
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  08007f10  08007f10  00017f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a2c  08008a2c  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a34  08008a34  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08008a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       000000a0  20000290  08008ccc  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20000330  08008d6c  00020330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00020358  2**0
                  CONTENTS
 12 .bss          000046d8  20000358  20000358  00020358  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20004a30  20004a30  00020358  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 16 .debug_info   00011f34  00000000  00000000  000203cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000036e8  00000000  00000000  000322ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000e50  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000abb  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000758c  00000000  00000000  000372f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001275b  00000000  00000000  0003e87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000cc7a8  00000000  00000000  00050fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000047e8  00000000  00000000  0011d784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00121f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ef8 	.word	0x08007ef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08007ef8 	.word	0x08007ef8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    __asm volatile (
 8000ece:	680a      	ldr	r2, [r1, #0]
 8000ed0:	f382 8808 	msr	MSP, r2
 8000ed4:	684a      	ldr	r2, [r1, #4]
 8000ed6:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8000ed8:	e7fe      	b.n	8000ed8 <branch_to_bootloader+0x14>
	...

08000edc <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 8000ee2:	491d      	ldr	r1, [pc, #116]	; (8000f58 <check_enter_bootloader+0x7c>)
 8000ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ee8:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8000eec:	4c1a      	ldr	r4, [pc, #104]	; (8000f58 <check_enter_bootloader+0x7c>)
 8000eee:	f04f 0000 	mov.w	r0, #0
 8000ef2:	f04f 0100 	mov.w	r1, #0
 8000ef6:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8000efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000efe:	f04f 0000 	mov.w	r0, #0
 8000f02:	f04f 0100 	mov.w	r1, #0
 8000f06:	0028      	movs	r0, r5
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8000f0e:	2300      	movs	r3, #0
 8000f10:	4912      	ldr	r1, [pc, #72]	; (8000f5c <check_enter_bootloader+0x80>)
 8000f12:	4411      	add	r1, r2
 8000f14:	430b      	orrs	r3, r1
 8000f16:	d11a      	bne.n	8000f4e <check_enter_bootloader+0x72>
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <check_enter_bootloader+0x84>)
 8000f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d014      	beq.n	8000f4e <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <check_enter_bootloader+0x88>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8000f2a:	683c      	ldr	r4, [r7, #0]
 8000f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	000a      	movs	r2, r1
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000f42:	f023 030f 	bic.w	r3, r3, #15
 8000f46:	4619      	mov	r1, r3
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f7ff ffbb 	bl	8000ec4 <branch_to_bootloader>
    }
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdb0      	pop	{r4, r5, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2001c000 	.word	0x2001c000
 8000f5c:	fffffa5b 	.word	0xfffffa5b
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40013800 	.word	0x40013800

08000f68 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460a      	mov	r2, r1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d832      	bhi.n	8000fe4 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <ledSetForce+0x84>)
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10d      	bne.n	8000fa6 <ledSetForce+0x3e>
  {
    value = !value;
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f083 0301 	eor.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00d      	beq.n	8000fc8 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <ledSetForce+0x88>)
 8000fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <ledSetForce+0x8c>)
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f001 fab7 	bl	8002534 <HAL_GPIO_WritePin>
 8000fc6:	e00e      	b.n	8000fe6 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <ledSetForce+0x88>)
 8000fcc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <ledSetForce+0x8c>)
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f001 faa9 	bl	8002534 <HAL_GPIO_WritePin>
 8000fe2:	e000      	b.n	8000fe6 <ledSetForce+0x7e>
    return;
 8000fe4:	bf00      	nop
    }

//  }

}
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000030 	.word	0x20000030
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000018 	.word	0x20000018

08000ff8 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <ledInit+0xd0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d15b      	bne.n	80010be <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <ledInit+0xd4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <ledInit+0xd4>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <ledInit+0xd4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <ledInit+0xd4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a24      	ldr	r2, [pc, #144]	; (80010cc <ledInit+0xd4>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <ledInit+0xd4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e02a      	b.n	80010aa <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <ledInit+0xd8>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <ledInit+0xdc>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	b29b      	uxth	r3, r3
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	f001 fa63 	bl	8002534 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <ledInit+0xdc>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <ledInit+0xd8>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	f107 0208 	add.w	r2, r7, #8
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f8b2 	bl	80021fc <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f81c 	bl	80010dc <ledSet>
  for (i = 0; i < LED_NUM; i++)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	ddd1      	ble.n	8001054 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <ledInit+0xe0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
  isInit = true;
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <ledInit+0xd0>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e000      	b.n	80010c0 <ledInit+0xc8>
    return;
 80010be:	bf00      	nop
}
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000374 	.word	0x20000374
 80010cc:	40023800 	.word	0x40023800
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000018 	.word	0x20000018
 80010d8:	2000037e 	.word	0x2000037e

080010dc <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d904      	bls.n	80010fc <ledSet+0x20>
 80010f2:	22e4      	movs	r2, #228	; 0xe4
 80010f4:	490a      	ldr	r1, [pc, #40]	; (8001120 <ledSet+0x44>)
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <ledSet+0x48>)
 80010f8:	f000 f966 	bl	80013c8 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <ledSet+0x4c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff2c 	bl	8000f68 <ledSetForce>
  }

  ledLastState[led] = value;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	79b9      	ldrb	r1, [r7, #6]
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <ledSet+0x50>)
 8001116:	54d1      	strb	r1, [r2, r3]
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08007f10 	.word	0x08007f10
 8001124:	08007f2c 	.word	0x08007f2c
 8001128:	2000037e 	.word	0x2000037e
 800112c:	20000378 	.word	0x20000378

08001130 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8001134:	2100      	movs	r1, #0
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ffd0 	bl	80010dc <ledSet>
  ledSet(LED_GREEN_R, 0);
 800113c:	2100      	movs	r1, #0
 800113e:	2003      	movs	r0, #3
 8001140:	f7ff ffcc 	bl	80010dc <ledSet>
  ledSet(LED_RED_L, 1);
 8001144:	2101      	movs	r1, #1
 8001146:	2002      	movs	r0, #2
 8001148:	f7ff ffc8 	bl	80010dc <ledSet>
  ledSet(LED_RED_R, 1);
 800114c:	2101      	movs	r1, #1
 800114e:	2004      	movs	r0, #4
 8001150:	f7ff ffc4 	bl	80010dc <ledSet>
  ledSet(LED_BLUE_L, 0);
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffc0 	bl	80010dc <ledSet>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	461a      	mov	r2, r3
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <systemLaunch+0x28>)
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <systemLaunch+0x2c>)
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2302      	movs	r3, #2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	4905      	ldr	r1, [pc, #20]	; (8001190 <systemLaunch+0x30>)
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <systemLaunch+0x34>)
 800117e:	f002 ffc0 	bl	8004102 <xTaskCreateStatic>
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000290 	.word	0x20000290
 800118c:	20000380 	.word	0x20000380
 8001190:	08007f54 	.word	0x08007f54
 8001194:	08001199 	.word	0x08001199

08001198 <systemTask>:

/* Private functions implementation */

void systemTask(void *arg)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  bool pass = true;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]

  ledInit();
 80011a4:	f7ff ff28 	bl	8000ff8 <ledInit>
  ledSet(CHG_LED, 1);
 80011a8:	2101      	movs	r1, #1
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ff96 	bl	80010dc <ledSet>
//  uart1Init(CONFIG_DEBUG_PRINT_ON_UART1_BAUDRATE);
#endif



}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f897 	bl	80012f8 <platformGetListOfConfigurations>
 80011ca:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 f855 	bl	8001280 <platformInitConfiguration>
 80011d6:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b30      	cmp	r3, #48	; 0x30
 80011fc:	d104      	bne.n	8001208 <platformParseDeviceTypeString+0x1c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3301      	adds	r3, #1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b3b      	cmp	r3, #59	; 0x3b
 8001206:	d001      	beq.n	800120c <platformParseDeviceTypeString+0x20>
    return 1;
 8001208:	2301      	movs	r3, #1
 800120a:	e034      	b.n	8001276 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3304      	adds	r3, #4
 8001214:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e00e      	b.n	800123e <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <platformParseDeviceTypeString+0x5a>
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b3b      	cmp	r3, #59	; 0x3b
 8001236:	d006      	beq.n	8001246 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	429a      	cmp	r2, r3
 8001244:	ddec      	ble.n	8001220 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd01      	ble.n	8001252 <platformParseDeviceTypeString+0x66>
    return 1;
 800124e:	2301      	movs	r3, #1
 8001250:	e011      	b.n	8001276 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	4619      	mov	r1, r3
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	f005 f8b6 	bl	80063d6 <memcpy>
  deviceType[length] = '\0';
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
  return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	; 0x40
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f852 	bl	8001338 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8001294:	f107 020c 	add.w	r2, r7, #12
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffa4 	bl	80011ec <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a8:	e01a      	b.n	80012e0 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 80012aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 80012bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ff83 	bl	80001d0 <strcmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d104      	bne.n	80012da <platformInitConfiguration+0x5a>
      active_config = config;
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <platformInitConfiguration+0x74>)
 80012d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d4:	6013      	str	r3, [r2, #0]
      return 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e007      	b.n	80012ea <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 80012da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012dc:	3301      	adds	r3, #1
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbe0      	blt.n	80012aa <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3740      	adds	r7, #64	; 0x40
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000780 	.word	0x20000780

080012f8 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	601a      	str	r2, [r3, #0]
  return configs;
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <platformGetListOfConfigurations+0x1c>)
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000048 	.word	0x20000048

08001318 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001326:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800132a:	015b      	lsls	r3, r3, #5
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	e00d      	b.n	8001366 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 800134a:	6938      	ldr	r0, [r7, #16]
 800134c:	f7ff ffe4 	bl	8001318 <getAddressOfOtpMemoryBlock>
 8001350:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	617b      	str	r3, [r7, #20]
      break;
 800135e:	e005      	b.n	800136c <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	3301      	adds	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	ddee      	ble.n	800134a <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <platformGetDeviceTypeString+0x42>
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d101      	bne.n	800137e <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <platformGetDeviceTypeString+0x60>)
 800137c:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 800137e:	2220      	movs	r2, #32
 8001380:	6979      	ldr	r1, [r7, #20]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f004 ff46 	bl	8006214 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3320      	adds	r3, #32
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	08007f5c 	.word	0x08007f5c

0800139c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013a0:	f3bf 8f4f 	dsb	sy
}
 80013a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <__NVIC_SystemReset+0x24>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013ae:	4904      	ldr	r1, [pc, #16]	; (80013c0 <__NVIC_SystemReset+0x24>)
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_SystemReset+0x28>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013b6:	f3bf 8f4f 	dsb	sy
}
 80013ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <__NVIC_SystemReset+0x20>
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	05fa0004 	.word	0x05fa0004

080013c8 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80013e6:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f000 f810 	bl	8001410 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 80013f0:	f7ff fe9e 	bl	8001130 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <assertFail+0x44>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8001400:	f7ff ffcc 	bl	800139c <__NVIC_SystemReset>
  }
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	e000edf0 	.word	0xe000edf0

08001410 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <storeAssertFileData+0x38>)
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <storeAssertFileData+0x3c>)
 800141e:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <storeAssertFileData+0x38>)
 8001422:	2201      	movs	r2, #1
 8001424:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <storeAssertFileData+0x38>)
 8001428:	791a      	ldrb	r2, [r3, #4]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <storeAssertFileData+0x40>)
 800142c:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <storeAssertFileData+0x38>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <storeAssertFileData+0x38>)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	60d3      	str	r3, [r2, #12]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000330 	.word	0x20000330
 800144c:	2f8a001f 	.word	0x2f8a001f
 8001450:	20000784 	.word	0x20000784

08001454 <_write>:
//#include "stm32f4xx_hal_def.h"

extern UART_HandleTypeDef huart6;

int _write(int file, char* p, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
		if(HAL_UART_Transmit(&huart6, p, len , 10 )!= 0)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	b29a      	uxth	r2, r3
 8001464:	230a      	movs	r3, #10
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <_write+0x30>)
 800146a:	f001 fd65 	bl	8002f38 <HAL_UART_Transmit>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <_write+0x26>
			//		while(!LL_USART_IsActiveFlag_TXE(USART6));0
			//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
			return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001478:	e000      	b.n	800147c <_write+0x28>
		return len;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000a28 	.word	0x20000a28

08001488 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <vApplicationGetIdleTaskMemory+0x30>)
 800149e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000788 	.word	0x20000788
 80014b8:	20000828 	.word	0x20000828

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f000 fc85 	bl	8001dd0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f8d1 	bl	800166c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ca:	f000 f963 	bl	8001794 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80014ce:	f000 f937 	bl	8001740 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  InitTick(168000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 80014d2:	495a      	ldr	r1, [pc, #360]	; (800163c <main+0x180>)
 80014d4:	485a      	ldr	r0, [pc, #360]	; (8001640 <main+0x184>)
 80014d6:	f000 fa43 	bl	8001960 <InitTick>

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80014da:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <main+0x188>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <main+0x188>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	60da      	str	r2, [r3, #12]
  //usDelay(1000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); 	// LED Off
 80014ea:	2201      	movs	r2, #1
 80014ec:	2120      	movs	r1, #32
 80014ee:	4856      	ldr	r0, [pc, #344]	; (8001648 <main+0x18c>)
 80014f0:	f001 f820 	bl	8002534 <HAL_GPIO_WritePin>
  usDelay(1000);		// ms 단위, 정확하게 1ms 나오지 않음
 80014f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f8:	f000 fb5c 	bl	8001bb4 <usDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	// LED On
 80014fc:	2200      	movs	r2, #0
 80014fe:	2120      	movs	r1, #32
 8001500:	4851      	ldr	r0, [pc, #324]	; (8001648 <main+0x18c>)
 8001502:	f001 f817 	bl	8002534 <HAL_GPIO_WritePin>
  t1 = DWT->CYCCNT;
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <main+0x190>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a51      	ldr	r2, [pc, #324]	; (8001650 <main+0x194>)
 800150c:	6013      	str	r3, [r2, #0]
  usDelay(1000);	// 1ms
 800150e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001512:	f000 fb4f 	bl	8001bb4 <usDelay>
  t2 = DWT->CYCCNT;
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <main+0x190>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <main+0x198>)
 800151c:	6013      	str	r3, [r2, #0]
  printf("delay = %.2f\n",(float)(t2-t1)/CLOCK_PER_USEC);
 800151e:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <main+0x198>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <main+0x194>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001530:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001658 <main+0x19c>
 8001534:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001538:	ee16 0a90 	vmov	r0, s13
 800153c:	f7ff f814 	bl	8000568 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4845      	ldr	r0, [pc, #276]	; (800165c <main+0x1a0>)
 8001546:	f004 fd17 	bl	8005f78 <iprintf>

  t1 = DWT->CYCCNT;
 800154a:	4b40      	ldr	r3, [pc, #256]	; (800164c <main+0x190>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a40      	ldr	r2, [pc, #256]	; (8001650 <main+0x194>)
 8001550:	6013      	str	r3, [r2, #0]
  vTaskDelay(1000);		// 1ms
 8001552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001556:	f002 ff7f 	bl	8004458 <vTaskDelay>
  t2 = DWT->CYCCNT;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <main+0x190>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a3d      	ldr	r2, [pc, #244]	; (8001654 <main+0x198>)
 8001560:	6013      	str	r3, [r2, #0]
  printf("delay = %.2f\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <main+0x198>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <main+0x194>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001574:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001658 <main+0x19c>
 8001578:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800157c:	ee16 0a90 	vmov	r0, s13
 8001580:	f7fe fff2 	bl	8000568 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4834      	ldr	r0, [pc, #208]	; (800165c <main+0x1a0>)
 800158a:	f004 fcf5 	bl	8005f78 <iprintf>

  freertos_IntroTitle();
 800158e:	f000 f971 	bl	8001874 <freertos_IntroTitle>
  printf("[TASK]main\n");
 8001592:	4833      	ldr	r0, [pc, #204]	; (8001660 <main+0x1a4>)
 8001594:	f004 fd56 	bl	8006044 <puts>


  check_enter_bootloader();
 8001598:	f7ff fca0 	bl	8000edc <check_enter_bootloader>

  int err = platformInit();
 800159c:	f7ff fe0c 	bl	80011b8 <platformInit>
 80015a0:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d000      	beq.n	80015aa <main+0xee>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 80015a8:	e7fe      	b.n	80015a8 <main+0xec>
  }
  systemLaunch();
 80015aa:	f7ff fdd9 	bl	8001160 <systemLaunch>

  ledInit();
 80015ae:	f7ff fd23 	bl	8000ff8 <ledInit>
  ledSet(0, 1); vTaskDelay(1000);
 80015b2:	2101      	movs	r1, #1
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fd91 	bl	80010dc <ledSet>
 80015ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015be:	f002 ff4b 	bl	8004458 <vTaskDelay>
  ledSet(0, 0); vTaskDelay(1000);
 80015c2:	2100      	movs	r1, #0
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fd89 	bl	80010dc <ledSet>
 80015ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ce:	f002 ff43 	bl	8004458 <vTaskDelay>
  ledSet(0, 1); vTaskDelay(1000);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fd81 	bl	80010dc <ledSet>
 80015da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015de:	f002 ff3b 	bl	8004458 <vTaskDelay>
  ledSet(0, 0); vTaskDelay(1000);
 80015e2:	2100      	movs	r1, #0
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fd79 	bl	80010dc <ledSet>
 80015ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ee:	f002 ff33 	bl	8004458 <vTaskDelay>
  ledSet(0, 1); vTaskDelay(1000);
 80015f2:	2101      	movs	r1, #1
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fd71 	bl	80010dc <ledSet>
 80015fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fe:	f002 ff2b 	bl	8004458 <vTaskDelay>
  ledSet(0, 0); vTaskDelay(1000);
 8001602:	2100      	movs	r1, #0
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fd69 	bl	80010dc <ledSet>
 800160a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160e:	f002 ff23 	bl	8004458 <vTaskDelay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <main+0x1a8>)
 8001614:	463c      	mov	r4, r7
 8001616:	461d      	mov	r5, r3
 8001618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001624:	463b      	mov	r3, r7
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fc56 	bl	8003eda <osThreadCreate>
 800162e:	4603      	mov	r3, r0
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <main+0x1ac>)
 8001632:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001634:	f002 fc4a 	bl	8003ecc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001638:	e7fe      	b.n	8001638 <main+0x17c>
 800163a:	bf00      	nop
 800163c:	000f4240 	.word	0x000f4240
 8001640:	0a037a00 	.word	0x0a037a00
 8001644:	20000a28 	.word	0x20000a28
 8001648:	40020400 	.word	0x40020400
 800164c:	e0001000 	.word	0xe0001000
 8001650:	20000a74 	.word	0x20000a74
 8001654:	20000a78 	.word	0x20000a78
 8001658:	43280000 	.word	0x43280000
 800165c:	08007f64 	.word	0x08007f64
 8001660:	08007f74 	.word	0x08007f74
 8001664:	08007f8c 	.word	0x08007f8c
 8001668:	20000a70 	.word	0x20000a70

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fdc2 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <SystemClock_Config+0xcc>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <SystemClock_Config+0xd0>)
 80016b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e0:	23a8      	movs	r3, #168	; 0xa8
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e8:	2304      	movs	r3, #4
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 ff39 	bl	8002568 <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016fc:	f000 f96c 	bl	80019d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001700:	230f      	movs	r3, #15
 8001702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2105      	movs	r1, #5
 800171e:	4618      	mov	r0, r3
 8001720:	f001 f99a 	bl	8002a58 <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172a:	f000 f955 	bl	80019d8 <Error_Handler>
  }
}
 800172e:	bf00      	nop
 8001730:	3750      	adds	r7, #80	; 0x50
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART6_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_USART6_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART6_UART_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART6_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART6_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART6_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART6_UART_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART6_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART6_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART6_UART_Init+0x4c>)
 8001778:	f001 fb8e 	bl	8002e98 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001782:	f000 f929 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000a28 	.word	0x20000a28
 8001790:	40011400 	.word	0x40011400

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a1a      	ldr	r2, [pc, #104]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2101      	movs	r1, #1
 8001802:	4815      	ldr	r0, [pc, #84]	; (8001858 <MX_GPIO_Init+0xc4>)
 8001804:	f000 fe96 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2120      	movs	r1, #32
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_GPIO_Init+0xc8>)
 800180e:	f000 fe91 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001812:	2301      	movs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <MX_GPIO_Init+0xc4>)
 800182a:	f000 fce7 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800182e:	2320      	movs	r3, #32
 8001830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_GPIO_Init+0xc8>)
 8001846:	f000 fcd9 	bl	80021fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40020400 	.word	0x40020400

08001860 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <OSVersion+0x10>)
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	08007fa8 	.word	0x08007fa8

08001874 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8001878:	4823      	ldr	r0, [pc, #140]	; (8001908 <freertos_IntroTitle+0x94>)
 800187a:	f004 fbe3 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 800187e:	4823      	ldr	r0, [pc, #140]	; (800190c <freertos_IntroTitle+0x98>)
 8001880:	f004 fbe0 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8001884:	4822      	ldr	r0, [pc, #136]	; (8001910 <freertos_IntroTitle+0x9c>)
 8001886:	f004 fbdd 	bl	8006044 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 800188a:	4822      	ldr	r0, [pc, #136]	; (8001914 <freertos_IntroTitle+0xa0>)
 800188c:	f004 fbda 	bl	8006044 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <freertos_IntroTitle+0xa4>)
 8001892:	f004 fbd7 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8001896:	4821      	ldr	r0, [pc, #132]	; (800191c <freertos_IntroTitle+0xa8>)
 8001898:	f004 fbd4 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 800189c:	4820      	ldr	r0, [pc, #128]	; (8001920 <freertos_IntroTitle+0xac>)
 800189e:	f004 fbd1 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 80018a2:	4820      	ldr	r0, [pc, #128]	; (8001924 <freertos_IntroTitle+0xb0>)
 80018a4:	f004 fbce 	bl	8006044 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 80018a8:	481f      	ldr	r0, [pc, #124]	; (8001928 <freertos_IntroTitle+0xb4>)
 80018aa:	f004 fbcb 	bl	8006044 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 80018ae:	481f      	ldr	r0, [pc, #124]	; (800192c <freertos_IntroTitle+0xb8>)
 80018b0:	f004 fbc8 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 80018b4:	481e      	ldr	r0, [pc, #120]	; (8001930 <freertos_IntroTitle+0xbc>)
 80018b6:	f004 fbc5 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 80018ba:	481e      	ldr	r0, [pc, #120]	; (8001934 <freertos_IntroTitle+0xc0>)
 80018bc:	f004 fbc2 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 80018c0:	481d      	ldr	r0, [pc, #116]	; (8001938 <freertos_IntroTitle+0xc4>)
 80018c2:	f004 fbbf 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80018c6:	481d      	ldr	r0, [pc, #116]	; (800193c <freertos_IntroTitle+0xc8>)
 80018c8:	f004 fbbc 	bl	8006044 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80018cc:	481c      	ldr	r0, [pc, #112]	; (8001940 <freertos_IntroTitle+0xcc>)
 80018ce:	f004 fbb9 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80018d2:	481c      	ldr	r0, [pc, #112]	; (8001944 <freertos_IntroTitle+0xd0>)
 80018d4:	f004 fbb6 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80018d8:	481b      	ldr	r0, [pc, #108]	; (8001948 <freertos_IntroTitle+0xd4>)
 80018da:	f004 fbb3 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80018de:	481b      	ldr	r0, [pc, #108]	; (800194c <freertos_IntroTitle+0xd8>)
 80018e0:	f004 fbb0 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80018e4:	481a      	ldr	r0, [pc, #104]	; (8001950 <freertos_IntroTitle+0xdc>)
 80018e6:	f004 fbad 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80018ea:	f7ff ffb9 	bl	8001860 <OSVersion>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4818      	ldr	r0, [pc, #96]	; (8001954 <freertos_IntroTitle+0xe0>)
 80018f4:	f004 fb40 	bl	8005f78 <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80018f8:	4817      	ldr	r0, [pc, #92]	; (8001958 <freertos_IntroTitle+0xe4>)
 80018fa:	f004 fba3 	bl	8006044 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 80018fe:	4817      	ldr	r0, [pc, #92]	; (800195c <freertos_IntroTitle+0xe8>)
 8001900:	f004 fba0 	bl	8006044 <puts>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08007fb0 	.word	0x08007fb0
 800190c:	08007ff0 	.word	0x08007ff0
 8001910:	08008044 	.word	0x08008044
 8001914:	08008098 	.word	0x08008098
 8001918:	080080ec 	.word	0x080080ec
 800191c:	08008140 	.word	0x08008140
 8001920:	08008194 	.word	0x08008194
 8001924:	080081e8 	.word	0x080081e8
 8001928:	0800823c 	.word	0x0800823c
 800192c:	08008290 	.word	0x08008290
 8001930:	080082e4 	.word	0x080082e4
 8001934:	08008338 	.word	0x08008338
 8001938:	0800838c 	.word	0x0800838c
 800193c:	080083e0 	.word	0x080083e0
 8001940:	08008434 	.word	0x08008434
 8001944:	08008488 	.word	0x08008488
 8001948:	080084dc 	.word	0x080084dc
 800194c:	08008530 	.word	0x08008530
 8001950:	08008578 	.word	0x08008578
 8001954:	080085a4 	.word	0x080085a4
 8001958:	080085e8 	.word	0x080085e8
 800195c:	08008614 	.word	0x08008614

08001960 <InitTick>:
  printf("\n\nAssertion failed in %s:%d\n", pcFile, ulLine); for(;;);
}


void InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <InitTick+0x50>)
 8001974:	3b01      	subs	r3, #1
 8001976:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <InitTick+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <InitTick+0x50>)
 8001980:	2205      	movs	r2, #5
 8001982:	601a      	str	r2, [r3, #0]

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <InitTick+0x54>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <InitTick+0x54>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <InitTick+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <InitTick+0x58>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <InitTick+0x58>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010
 80019b4:	e000edf0 	.word	0xe000edf0
 80019b8:	e0001000 	.word	0xe0001000

080019bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("[TASK] StartDefaultTask!\n");
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <StartDefaultTask+0x18>)
 80019c6:	f004 fb3d 	bl	8006044 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f002 fad1 	bl	8003f72 <osDelay>
 80019d0:	e7fb      	b.n	80019ca <StartDefaultTask+0xe>
 80019d2:	bf00      	nop
 80019d4:	0800867c 	.word	0x0800867c

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>
	...

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_MspInit+0x64>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_MspInit+0x64>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_MspInit+0x64>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x64>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x64>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x64>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	210f      	movs	r1, #15
 8001a26:	f06f 0001 	mvn.w	r0, #1
 8001a2a:	f000 fb1e 	bl	800206a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	2005      	movs	r0, #5
 8001a34:	f000 fb19 	bl	800206a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a38:	2005      	movs	r0, #5
 8001a3a:	f000 fb32 	bl	80020a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_UART_MspInit+0x94>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d133      	bne.n	8001ad6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_UART_MspInit+0x98>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_UART_MspInit+0x98>)
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_UART_MspInit+0x98>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_UART_MspInit+0x98>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_UART_MspInit+0x98>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_UART_MspInit+0x98>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa6:	23c0      	movs	r3, #192	; 0xc0
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <HAL_UART_MspInit+0x9c>)
 8001ac2:	f000 fb9b 	bl	80021fc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2105      	movs	r1, #5
 8001aca:	2047      	movs	r0, #71	; 0x47
 8001acc:	f000 facd 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ad0:	2047      	movs	r0, #71	; 0x47
 8001ad2:	f000 fae6 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40011400 	.word	0x40011400
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020800 	.word	0x40020800

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <SysTick_Handler+0x2c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <SysTick_Handler+0x16>

		TimingDelay--;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <SysTick_Handler+0x2c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <SysTick_Handler+0x2c>)
 8001b2c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2e:	f000 f9a1 	bl	8001e74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b32:	f002 ffcd 	bl	8004ad0 <xTaskGetSchedulerState>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b3c:	f003 fa0c 	bl	8004f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000a80 	.word	0x20000a80

08001b48 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <USART6_IRQHandler+0x54>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d117      	bne.n	8001b9c <USART6_IRQHandler+0x44>
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <USART6_IRQHandler+0x54>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d010      	beq.n	8001b9c <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <USART6_IRQHandler+0x54>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <USART6_IRQHandler+0x58>)
 8001b84:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <USART6_IRQHandler+0x54>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <USART6_IRQHandler+0x54>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <USART6_IRQHandler+0x54>)
 8001b9e:	f001 fa57 	bl	8003050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000a28 	.word	0x20000a28
 8001bb0:	20000a7c 	.word	0x20000a7c

08001bb4 <usDelay>:

/* USER CODE BEGIN 1 */
void usDelay(unsigned int nTime)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <usDelay+0x48>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 8001bc2:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <usDelay+0x48>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <usDelay+0x48>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <usDelay+0x48>)
 8001bd0:	f043 0307 	orr.w	r3, r3, #7
 8001bd4:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <usDelay+0x4c>)
 8001bdc:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 8001bde:	bf00      	nop
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <usDelay+0x4c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1fb      	bne.n	8001be0 <usDelay+0x2c>

	SysTick->CTRL = 0;
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <usDelay+0x48>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010
 8001c00:	20000a80 	.word	0x20000a80

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f004 fbad 	bl	800637c <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001caa:	605a      	str	r2, [r3, #4]
  return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_isatty>:

int _isatty(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f004 fb2e 	bl	800637c <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000a84 	.word	0x20000a84
 8001d54:	20004a30 	.word	0x20004a30

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d80:	f7ff ffea 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	; (8001dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	; (8001dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f004 faed 	bl	8006388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff fb85 	bl	80014bc <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8001dc0:	08008a3c 	.word	0x08008a3c
  ldr r2, =_sbss
 8001dc4:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001dc8:	20004a30 	.word	0x20004a30

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f92b 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fdee 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f943 	bl	80020be <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e50:	f000 f90b 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200000b8 	.word	0x200000b8
 8001e6c:	200000c0 	.word	0x200000c0
 8001e70:	200000bc 	.word	0x200000bc

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200000c0 	.word	0x200000c0
 8001e98:	20000a88 	.word	0x20000a88

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000a88 	.word	0x20000a88

08001eb4 <__NVIC_SetPriorityGrouping>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002034:	f7ff ff8e 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff29 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff3e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff8e 	bl	8001fa8 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5d 	bl	8001f54 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff31 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff feda 	bl	8001e9c <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d008      	beq.n	8002108 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e052      	b.n	80021ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0216 	bic.w	r2, r2, #22
 8002116:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002126:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <HAL_DMA_Abort+0x62>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0208 	bic.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	e013      	b.n	8002182 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215a:	f7ff fe9f 	bl	8001e9c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b05      	cmp	r3, #5
 8002166:	d90c      	bls.n	8002182 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e015      	b.n	80021ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e4      	bne.n	800215a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e00c      	b.n	80021ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2205      	movs	r2, #5
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e16b      	b.n	80024f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 815a 	bne.w	80024ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d005      	beq.n	800224e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	2b02      	cmp	r3, #2
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80b4 	beq.w	80024ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b60      	ldr	r3, [pc, #384]	; (8002508 <HAL_GPIO_Init+0x30c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a5f      	ldr	r2, [pc, #380]	; (8002508 <HAL_GPIO_Init+0x30c>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_GPIO_Init+0x310>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_GPIO_Init+0x314>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x226>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a51      	ldr	r2, [pc, #324]	; (8002514 <HAL_GPIO_Init+0x318>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_GPIO_Init+0x222>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <HAL_GPIO_Init+0x31c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <HAL_GPIO_Init+0x21e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	; (800251c <HAL_GPIO_Init+0x320>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x21a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4e      	ldr	r2, [pc, #312]	; (8002520 <HAL_GPIO_Init+0x324>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x216>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_GPIO_Init+0x328>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x212>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <HAL_GPIO_Init+0x32c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4b      	ldr	r2, [pc, #300]	; (800252c <HAL_GPIO_Init+0x330>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x20a>
 8002402:	2307      	movs	r3, #7
 8002404:	e00e      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002406:	2308      	movs	r3, #8
 8002408:	e00c      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800240a:	2306      	movs	r3, #6
 800240c:	e00a      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800240e:	2305      	movs	r3, #5
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002412:	2304      	movs	r3, #4
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002422:	2300      	movs	r3, #0
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	; (800250c <HAL_GPIO_Init+0x310>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_GPIO_Init+0x334>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x334>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_GPIO_Init+0x334>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_GPIO_Init+0x334>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	f67f ae90 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40021c00 	.word	0x40021c00
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e267      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d075      	beq.n	8002672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002586:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b85      	ldr	r3, [pc, #532]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b7e      	ldr	r3, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d157      	bne.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e242      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x74>
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a75      	ldr	r2, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b70      	ldr	r3, [pc, #448]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6f      	ldr	r2, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6c      	ldr	r2, [pc, #432]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 8002600:	4b69      	ldr	r3, [pc, #420]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a68      	ldr	r2, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fc3c 	bl	8001e9c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff fc38 	bl	8001e9c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e207      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xc0>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fc28 	bl	8001e9c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fc24 	bl	8001e9c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1f3      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c7      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4937      	ldr	r1, [pc, #220]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_RCC_OscConfig+0x244>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7ff fbdd 	bl	8001e9c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7ff fbd9 	bl	8001e9c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a8      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4925      	ldr	r1, [pc, #148]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x244>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff fbbc 	bl	8001e9c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002728:	f7ff fbb8 	bl	8001e9c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e187      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d036      	beq.n	80027c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_OscConfig+0x248>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff fb9c 	bl	8001e9c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7ff fb98 	bl	8001e9c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e167      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x240>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x200>
 8002786:	e01b      	b.n	80027c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_OscConfig+0x248>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7ff fb85 	bl	8001e9c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	e00e      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002796:	f7ff fb81 	bl	8001e9c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d907      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e150      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470000 	.word	0x42470000
 80027b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ea      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8097 	beq.w	80028fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b7d      	ldr	r3, [pc, #500]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a7c      	ldr	r2, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b7a      	ldr	r3, [pc, #488]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b77      	ldr	r3, [pc, #476]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b74      	ldr	r3, [pc, #464]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a73      	ldr	r2, [pc, #460]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7ff fb41 	bl	8001e9c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7ff fb3d 	bl	8001e9c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e10c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x474>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x2ea>
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b05      	cmp	r3, #5
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x30c>
 800285a:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a5e      	ldr	r2, [pc, #376]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	4b5c      	ldr	r3, [pc, #368]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a5b      	ldr	r2, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0x324>
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7ff fb02 	bl	8001e9c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7ff fafe 	bl	8001e9c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0cb      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ee      	beq.n	800289c <HAL_RCC_OscConfig+0x334>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7ff faec 	bl	8001e9c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7ff fae8 	bl	8001e9c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b5      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	4a38      	ldr	r2, [pc, #224]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a1 	beq.w	8002a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d05c      	beq.n	80029cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d141      	bne.n	800299e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff fabc 	bl	8001e9c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff fab8 	bl	8001e9c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e087      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	491b      	ldr	r1, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7ff fa91 	bl	8001e9c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297e:	f7ff fa8d 	bl	8001e9c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e05c      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x416>
 800299c:	e054      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fa7a 	bl	8001e9c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ac:	f7ff fa76 	bl	8001e9c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e045      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x444>
 80029ca:	e03d      	b.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e038      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x4ec>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11a      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7ff f9a8 	bl	8001e9c <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7ff f9a4 	bl	8001e9c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f908 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	080086a0 	.word	0x080086a0
 8002c1c:	200000b8 	.word	0x200000b8
 8002c20:	200000bc 	.word	0x200000bc

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b094      	sub	sp, #80	; 0x50
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c30:	2300      	movs	r3, #0
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	2300      	movs	r3, #0
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x40>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	f200 80e1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c56:	e0db      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c5c:	e0db      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c62:	e0d8      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
 8002c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	0159      	lsls	r1, r3, #5
 8002ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca8:	0150      	lsls	r0, r2, #5
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4621      	mov	r1, r4
 8002cb0:	1a51      	subs	r1, r2, r1
 8002cb2:	6139      	str	r1, [r7, #16]
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	018b      	lsls	r3, r1, #6
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	018a      	lsls	r2, r1, #6
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cdc:	4659      	mov	r1, fp
 8002cde:	eb63 0901 	sbc.w	r9, r3, r1
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf6:	4690      	mov	r8, r2
 8002cf8:	4699      	mov	r9, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	eb18 0303 	adds.w	r3, r8, r3
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	462b      	mov	r3, r5
 8002d04:	eb49 0303 	adc.w	r3, r9, r3
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d16:	4629      	mov	r1, r5
 8002d18:	024b      	lsls	r3, r1, #9
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d20:	4621      	mov	r1, r4
 8002d22:	024a      	lsls	r2, r1, #9
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d34:	f7fd ff48 	bl	8000bc8 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	e058      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0159      	lsls	r1, r3, #5
 8002d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6e:	0150      	lsls	r0, r2, #5
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4641      	mov	r1, r8
 8002d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d94:	ebb2 040a 	subs.w	r4, r2, sl
 8002d98:	eb63 050b 	sbc.w	r5, r3, fp
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	00eb      	lsls	r3, r5, #3
 8002da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002daa:	00e2      	lsls	r2, r4, #3
 8002dac:	4614      	mov	r4, r2
 8002dae:	461d      	mov	r5, r3
 8002db0:	4643      	mov	r3, r8
 8002db2:	18e3      	adds	r3, r4, r3
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	464b      	mov	r3, r9
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	61fa      	str	r2, [r7, #28]
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	f7fd feee 	bl	8000bc8 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3750      	adds	r7, #80	; 0x50
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	200000b8 	.word	0x200000b8

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	080086b0 	.word	0x080086b0

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffdc 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0b5b      	lsrs	r3, r3, #13
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	080086b0 	.word	0x080086b0

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe fdc4 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fd69 	bl	80039b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d175      	bne.n	8003044 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Transmit+0x2c>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e06e      	b.n	8003046 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	; 0x21
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f76:	f7fe ff91 	bl	8001e9c <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d108      	bne.n	8002fa4 <HAL_UART_Transmit+0x6c>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e003      	b.n	8002fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fac:	e02e      	b.n	800300c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fb05 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e03a      	b.n	8003046 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	e007      	b.n	8002ffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1cb      	bne.n	8002fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fad1 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e006      	b.n	8003046 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0ba      	sub	sp, #232	; 0xe8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800308e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_UART_IRQHandler+0x66>
 80030a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fbc2 	bl	8003838 <UART_Receive_IT>
      return;
 80030b4:	e25b      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80de 	beq.w	800327c <HAL_UART_IRQHandler+0x22c>
 80030c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80d1 	beq.w	800327c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xae>
 80030e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xd2>
 800310a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xf6>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <HAL_UART_IRQHandler+0x126>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800315e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f043 0208 	orr.w	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 81f2 	beq.w	8003564 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_UART_IRQHandler+0x14e>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fb4d 	bl	8003838 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_UART_IRQHandler+0x17a>
 80031c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04f      	beq.n	800326a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa55 	bl	800367a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d141      	bne.n	8003262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800320a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800320e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1d9      	bne.n	80031de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d013      	beq.n	800325a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	4a7e      	ldr	r2, [pc, #504]	; (8003430 <HAL_UART_IRQHandler+0x3e0>)
 8003238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe ffb9 	bl	80021b6 <HAL_DMA_Abort_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e00e      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f99e 	bl	800359c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	e00a      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f99a 	bl	800359c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e006      	b.n	8003278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f996 	bl	800359c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003276:	e175      	b.n	8003564 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	bf00      	nop
    return;
 800327a:	e173      	b.n	8003564 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 814f 	bne.w	8003524 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8148 	beq.w	8003524 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8141 	beq.w	8003524 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	f040 80b6 	bne.w	8003434 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8145 	beq.w	8003568 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e6:	429a      	cmp	r2, r3
 80032e8:	f080 813e 	bcs.w	8003568 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fe:	f000 8088 	beq.w	8003412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800331c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800332e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800333a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1d9      	bne.n	8003302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800335e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800337a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e1      	bne.n	800334e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3314      	adds	r3, #20
 80033aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e3      	bne.n	800338a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e2:	f023 0310 	bic.w	r3, r3, #16
 80033e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80033f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e3      	bne.n	80033d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fe62 	bl	80020d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003420:	b29b      	uxth	r3, r3
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8c1 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800342e:	e09b      	b.n	8003568 <HAL_UART_IRQHandler+0x518>
 8003430:	08003741 	.word	0x08003741
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 808e 	beq.w	800356c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8089 	beq.w	800356c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800347e:	647a      	str	r2, [r7, #68]	; 0x44
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	623b      	str	r3, [r7, #32]
   return(result);
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034b6:	633a      	str	r2, [r7, #48]	; 0x30
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	617b      	str	r3, [r7, #20]
   return(result);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e3      	bne.n	80034d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003516:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f847 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003522:	e023      	b.n	800356c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_UART_IRQHandler+0x4f4>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f913 	bl	8003768 <UART_Transmit_IT>
    return;
 8003542:	e014      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_UART_IRQHandler+0x51e>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f953 	bl	8003808 <UART_EndTransmit_IT>
    return;
 8003562:	e004      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
    return;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
      return;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_UART_IRQHandler+0x51e>
      return;
 800356c:	bf00      	nop
  }
}
 800356e:	37e8      	adds	r7, #232	; 0xe8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	e03b      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	d037      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe fc5b 	bl	8001e9c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e03a      	b.n	8003672 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d023      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d020      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d01d      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d116      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f81d 	bl	800367a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2208      	movs	r2, #8
 8003644:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	429a      	cmp	r2, r3
 800366e:	d0b4      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800367a:	b480      	push	{r7}
 800367c:	b095      	sub	sp, #84	; 0x54
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a2:	643a      	str	r2, [r7, #64]	; 0x40
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d119      	bne.n	8003726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	60bb      	str	r3, [r7, #8]
   return(result);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003712:	61ba      	str	r2, [r7, #24]
 8003714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6979      	ldr	r1, [r7, #20]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	613b      	str	r3, [r7, #16]
   return(result);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003734:	bf00      	nop
 8003736:	3754      	adds	r7, #84	; 0x54
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff1e 	bl	800359c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b21      	cmp	r3, #33	; 0x21
 800377a:	d13e      	bne.n	80037fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003784:	d114      	bne.n	80037b0 <UART_Transmit_IT+0x48>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d110      	bne.n	80037b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	1c9a      	adds	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	e008      	b.n	80037c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	1c59      	adds	r1, r3, #1
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6211      	str	r1, [r2, #32]
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4619      	mov	r1, r3
 80037d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fea3 	bl	8003574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b22      	cmp	r3, #34	; 0x22
 800384a:	f040 80ae 	bne.w	80039aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003856:	d117      	bne.n	8003888 <UART_Receive_IT+0x50>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d113      	bne.n	8003888 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b29b      	uxth	r3, r3
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	b29a      	uxth	r2, r3
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
 8003886:	e026      	b.n	80038d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	d007      	beq.n	80038ac <UART_Receive_IT+0x74>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <UART_Receive_IT+0x82>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e008      	b.n	80038cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29b      	uxth	r3, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d15d      	bne.n	80039a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0220 	bic.w	r2, r2, #32
 80038f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	2b01      	cmp	r3, #1
 800392e:	d135      	bne.n	800399c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	613b      	str	r3, [r7, #16]
   return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	623a      	str	r2, [r7, #32]
 8003958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	69f9      	ldr	r1, [r7, #28]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	61bb      	str	r3, [r7, #24]
   return(result);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b10      	cmp	r3, #16
 8003976:	d10a      	bne.n	800398e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fe0b 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
 800399a:	e002      	b.n	80039a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fdf3 	bl	8003588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e002      	b.n	80039ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3730      	adds	r7, #48	; 0x30
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b0c0      	sub	sp, #256	; 0x100
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	68d9      	ldr	r1, [r3, #12]
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	ea40 0301 	orr.w	r3, r0, r1
 80039dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a0c:	f021 010c 	bic.w	r1, r1, #12
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	6999      	ldr	r1, [r3, #24]
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	ea40 0301 	orr.w	r3, r0, r1
 8003a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b8f      	ldr	r3, [pc, #572]	; (8003c80 <UART_SetConfig+0x2cc>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d005      	beq.n	8003a54 <UART_SetConfig+0xa0>
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b8d      	ldr	r3, [pc, #564]	; (8003c84 <UART_SetConfig+0x2d0>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d104      	bne.n	8003a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7ff fa0c 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8003a58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a5c:	e003      	b.n	8003a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a5e:	f7ff f9f3 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8003a62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a70:	f040 810c 	bne.w	8003c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	1891      	adds	r1, r2, r2
 8003a8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a8e:	415b      	adcs	r3, r3
 8003a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a96:	4621      	mov	r1, r4
 8003a98:	eb12 0801 	adds.w	r8, r2, r1
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb43 0901 	adc.w	r9, r3, r1
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab6:	4690      	mov	r8, r2
 8003ab8:	4699      	mov	r9, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	eb18 0303 	adds.w	r3, r8, r3
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	eb49 0303 	adc.w	r3, r9, r3
 8003aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	18db      	adds	r3, r3, r3
 8003ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae8:	4613      	mov	r3, r2
 8003aea:	eb42 0303 	adc.w	r3, r2, r3
 8003aee:	657b      	str	r3, [r7, #84]	; 0x54
 8003af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003af8:	f7fd f866 	bl	8000bc8 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <UART_SetConfig+0x2d4>)
 8003b02:	fba3 2302 	umull	r2, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	011c      	lsls	r4, r3, #4
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	1891      	adds	r1, r2, r2
 8003b22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b24:	415b      	adcs	r3, r3
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b32:	4649      	mov	r1, r9
 8003b34:	eb43 0b01 	adc.w	fp, r3, r1
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b4c:	4692      	mov	sl, r2
 8003b4e:	469b      	mov	fp, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	eb1a 0303 	adds.w	r3, sl, r3
 8003b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	18db      	adds	r3, r3, r3
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7e:	4613      	mov	r3, r2
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	647b      	str	r3, [r7, #68]	; 0x44
 8003b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b8e:	f7fd f81b 	bl	8000bc8 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <UART_SetConfig+0x2d4>)
 8003b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2264      	movs	r2, #100	; 0x64
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	1acb      	subs	r3, r1, r3
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bae:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <UART_SetConfig+0x2d4>)
 8003bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bbc:	441c      	add	r4, r3
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003be0:	4641      	mov	r1, r8
 8003be2:	1851      	adds	r1, r2, r1
 8003be4:	6339      	str	r1, [r7, #48]	; 0x30
 8003be6:	4649      	mov	r1, r9
 8003be8:	414b      	adcs	r3, r1
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	00cb      	lsls	r3, r1, #3
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c02:	4651      	mov	r1, sl
 8003c04:	00ca      	lsls	r2, r1, #3
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c14:	464b      	mov	r3, r9
 8003c16:	460a      	mov	r2, r1
 8003c18:	eb42 0303 	adc.w	r3, r2, r3
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c34:	460b      	mov	r3, r1
 8003c36:	18db      	adds	r3, r3, r3
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c4a:	f7fc ffbd 	bl	8000bc8 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <UART_SetConfig+0x2d4>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <UART_SetConfig+0x2d4>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4422      	add	r2, r4
 8003c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c7c:	e106      	b.n	8003e8c <UART_SetConfig+0x4d8>
 8003c7e:	bf00      	nop
 8003c80:	40011000 	.word	0x40011000
 8003c84:	40011400 	.word	0x40011400
 8003c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c9e:	4642      	mov	r2, r8
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	1891      	adds	r1, r2, r2
 8003ca4:	6239      	str	r1, [r7, #32]
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cae:	4641      	mov	r1, r8
 8003cb0:	1854      	adds	r4, r2, r1
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	eb43 0501 	adc.w	r5, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	00eb      	lsls	r3, r5, #3
 8003cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cc6:	00e2      	lsls	r2, r4, #3
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	4643      	mov	r3, r8
 8003cce:	18e3      	adds	r3, r4, r3
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	eb45 0303 	adc.w	r3, r5, r3
 8003cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d04:	4621      	mov	r1, r4
 8003d06:	008a      	lsls	r2, r1, #2
 8003d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d0c:	f7fc ff5c 	bl	8000bc8 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4b60      	ldr	r3, [pc, #384]	; (8003e98 <UART_SetConfig+0x4e4>)
 8003d16:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	011c      	lsls	r4, r3, #4
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d30:	4642      	mov	r2, r8
 8003d32:	464b      	mov	r3, r9
 8003d34:	1891      	adds	r1, r2, r2
 8003d36:	61b9      	str	r1, [r7, #24]
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d40:	4641      	mov	r1, r8
 8003d42:	1851      	adds	r1, r2, r1
 8003d44:	6139      	str	r1, [r7, #16]
 8003d46:	4649      	mov	r1, r9
 8003d48:	414b      	adcs	r3, r1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d58:	4659      	mov	r1, fp
 8003d5a:	00cb      	lsls	r3, r1, #3
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d62:	4651      	mov	r1, sl
 8003d64:	00ca      	lsls	r2, r1, #3
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d74:	464b      	mov	r3, r9
 8003d76:	460a      	mov	r2, r1
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d98:	4649      	mov	r1, r9
 8003d9a:	008b      	lsls	r3, r1, #2
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da2:	4641      	mov	r1, r8
 8003da4:	008a      	lsls	r2, r1, #2
 8003da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003daa:	f7fc ff0d 	bl	8000bc8 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <UART_SetConfig+0x4e4>)
 8003db6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2264      	movs	r2, #100	; 0x64
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	1acb      	subs	r3, r1, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a33      	ldr	r2, [pc, #204]	; (8003e98 <UART_SetConfig+0x4e4>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd4:	441c      	add	r4, r3
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dda:	2200      	movs	r2, #0
 8003ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8003dde:	677a      	str	r2, [r7, #116]	; 0x74
 8003de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003de4:	4642      	mov	r2, r8
 8003de6:	464b      	mov	r3, r9
 8003de8:	1891      	adds	r1, r2, r2
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	415b      	adcs	r3, r3
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df4:	4641      	mov	r1, r8
 8003df6:	1851      	adds	r1, r2, r1
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	414b      	adcs	r3, r1
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	00cb      	lsls	r3, r1, #3
 8003e10:	4651      	mov	r1, sl
 8003e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e16:	4651      	mov	r1, sl
 8003e18:	00ca      	lsls	r2, r1, #3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4642      	mov	r2, r8
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e26:	464b      	mov	r3, r9
 8003e28:	460a      	mov	r2, r1
 8003e2a:	eb42 0303 	adc.w	r3, r2, r3
 8003e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3a:	667a      	str	r2, [r7, #100]	; 0x64
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e48:	4649      	mov	r1, r9
 8003e4a:	008b      	lsls	r3, r1, #2
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e52:	4641      	mov	r1, r8
 8003e54:	008a      	lsls	r2, r1, #2
 8003e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e5a:	f7fc feb5 	bl	8000bc8 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <UART_SetConfig+0x4e4>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	3332      	adds	r3, #50	; 0x32
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <UART_SetConfig+0x4e4>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4422      	add	r2, r4
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e92:	46bd      	mov	sp, r7
 8003e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e98:	51eb851f 	.word	0x51eb851f

08003e9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eae:	2b84      	cmp	r3, #132	; 0x84
 8003eb0:	d005      	beq.n	8003ebe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003eb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	3303      	adds	r3, #3
 8003ebc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ed0:	f000 faf6 	bl	80044c0 <vTaskStartScheduler>
  
  return osOK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003edc:	b089      	sub	sp, #36	; 0x24
 8003ede:	af04      	add	r7, sp, #16
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <osThreadCreate+0x54>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01c      	beq.n	8003f2e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685c      	ldr	r4, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691e      	ldr	r6, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ffc8 	bl	8003e9c <makeFreeRtosPriority>
 8003f0c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f16:	9202      	str	r2, [sp, #8]
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	9100      	str	r1, [sp, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4632      	mov	r2, r6
 8003f20:	4629      	mov	r1, r5
 8003f22:	4620      	mov	r0, r4
 8003f24:	f000 f8ed 	bl	8004102 <xTaskCreateStatic>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e01c      	b.n	8003f68 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685c      	ldr	r4, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f3a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ffaa 	bl	8003e9c <makeFreeRtosPriority>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	9200      	str	r2, [sp, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	4632      	mov	r2, r6
 8003f56:	4629      	mov	r1, r5
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 f92f 	bl	80041bc <xTaskCreate>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f72 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <osDelay+0x16>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	e000      	b.n	8003f8a <osDelay+0x18>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fa64 	bl	8004458 <vTaskDelay>
  
  return osOK;
 8003f90:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f103 0208 	add.w	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f103 0208 	add.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 0208 	add.w	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004052:	d103      	bne.n	800405c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e00c      	b.n	8004076 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3308      	adds	r3, #8
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e002      	b.n	800406a <vListInsert+0x2e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	d2f6      	bcs.n	8004064 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6892      	ldr	r2, [r2, #8]
 80040c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6852      	ldr	r2, [r2, #4]
 80040ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d103      	bne.n	80040e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08e      	sub	sp, #56	; 0x38
 8004106:	af04      	add	r7, sp, #16
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xTaskCreateStatic+0x2a>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	623b      	str	r3, [r7, #32]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <xTaskCreateStatic+0x46>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	61fb      	str	r3, [r7, #28]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004148:	23a0      	movs	r3, #160	; 0xa0
 800414a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2ba0      	cmp	r3, #160	; 0xa0
 8004150:	d00a      	beq.n	8004168 <xTaskCreateStatic+0x66>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	61bb      	str	r3, [r7, #24]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004168:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01e      	beq.n	80041ae <xTaskCreateStatic+0xac>
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01b      	beq.n	80041ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800417e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	2202      	movs	r2, #2
 8004184:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004188:	2300      	movs	r3, #0
 800418a:	9303      	str	r3, [sp, #12]
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	9302      	str	r3, [sp, #8]
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f851 	bl	8004248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041a8:	f000 f8ec 	bl	8004384 <prvAddNewTaskToReadyList>
 80041ac:	e001      	b.n	80041b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041b2:	697b      	ldr	r3, [r7, #20]
	}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3728      	adds	r7, #40	; 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
 80041c0:	af04      	add	r7, sp, #16
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 ff11 	bl	8004ff8 <pvPortMalloc>
 80041d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00e      	beq.n	80041fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041de:	20a0      	movs	r0, #160	; 0xa0
 80041e0:	f000 ff0a 	bl	8004ff8 <pvPortMalloc>
 80041e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
 80041f2:	e005      	b.n	8004200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	f000 ffcb 	bl	8005190 <vPortFree>
 80041fa:	e001      	b.n	8004200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	2300      	movs	r3, #0
 8004212:	9303      	str	r3, [sp, #12]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f80f 	bl	8004248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800422a:	69f8      	ldr	r0, [r7, #28]
 800422c:	f000 f8aa 	bl	8004384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004230:	2301      	movs	r3, #1
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e002      	b.n	800423c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800423a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800423c:	69bb      	ldr	r3, [r7, #24]
	}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004260:	3b01      	subs	r3, #1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <prvInitialiseNewTask+0x48>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	617b      	str	r3, [r7, #20]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01f      	beq.n	80042d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e012      	b.n	80042c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	7819      	ldrb	r1, [r3, #0]
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	3334      	adds	r3, #52	; 0x34
 80042ac:	460a      	mov	r2, r1
 80042ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b0f      	cmp	r3, #15
 80042c6:	d9e9      	bls.n	800429c <prvInitialiseNewTask+0x54>
 80042c8:	e000      	b.n	80042cc <prvInitialiseNewTask+0x84>
			{
				break;
 80042ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d4:	e003      	b.n	80042de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2b13      	cmp	r3, #19
 80042e2:	d901      	bls.n	80042e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042e4:	2313      	movs	r3, #19
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	2200      	movs	r2, #0
 80042f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	3304      	adds	r3, #4
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fe6b 	bl	8003fda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	3318      	adds	r3, #24
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fe66 	bl	8003fda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004312:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	f1c3 0214 	rsb	r2, r3, #20
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	2200      	movs	r2, #0
 8004330:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	334c      	adds	r3, #76	; 0x4c
 8004338:	224c      	movs	r2, #76	; 0x4c
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f001 ff61 	bl	8006204 <memset>
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <prvInitialiseNewTask+0x130>)
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	4a0c      	ldr	r2, [pc, #48]	; (800437c <prvInitialiseNewTask+0x134>)
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <prvInitialiseNewTask+0x138>)
 8004352:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	69b8      	ldr	r0, [r7, #24]
 800435a:	f000 fc3d 	bl	8004bd8 <pxPortInitialiseStack>
 800435e:	4602      	mov	r2, r0
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004370:	bf00      	nop
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200048e4 	.word	0x200048e4
 800437c:	2000494c 	.word	0x2000494c
 8004380:	200049b4 	.word	0x200049b4

08004384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800438c:	f000 fd52 	bl	8004e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <prvAddNewTaskToReadyList+0xb8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	4a29      	ldr	r2, [pc, #164]	; (800443c <prvAddNewTaskToReadyList+0xb8>)
 8004398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <prvAddNewTaskToReadyList+0xbc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043a2:	4a27      	ldr	r2, [pc, #156]	; (8004440 <prvAddNewTaskToReadyList+0xbc>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <prvAddNewTaskToReadyList+0xb8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d110      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043b0:	f000 facc 	bl	800494c <prvInitialiseTaskLists>
 80043b4:	e00d      	b.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <prvAddNewTaskToReadyList+0xc0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043be:	4b20      	ldr	r3, [pc, #128]	; (8004440 <prvAddNewTaskToReadyList+0xbc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d802      	bhi.n	80043d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <prvAddNewTaskToReadyList+0xbc>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <prvAddNewTaskToReadyList+0xc4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <prvAddNewTaskToReadyList+0xc4>)
 80043da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	2201      	movs	r2, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <prvAddNewTaskToReadyList+0xc8>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <prvAddNewTaskToReadyList+0xcc>)
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7ff fdf5 	bl	8003ff4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800440a:	f000 fd43 	bl	8004e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <prvAddNewTaskToReadyList+0xc0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <prvAddNewTaskToReadyList+0xbc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d207      	bcs.n	8004434 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <prvAddNewTaskToReadyList+0xd0>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000c90 	.word	0x20000c90
 8004440:	20000a8c 	.word	0x20000a8c
 8004444:	20000c9c 	.word	0x20000c9c
 8004448:	20000cac 	.word	0x20000cac
 800444c:	20000c98 	.word	0x20000c98
 8004450:	20000a90 	.word	0x20000a90
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <vTaskDelay+0x60>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <vTaskDelay+0x30>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60bb      	str	r3, [r7, #8]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004488:	f000 f884 	bl	8004594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800448c:	2100      	movs	r1, #0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fb3c 	bl	8004b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004494:	f000 f88c 	bl	80045b0 <xTaskResumeAll>
 8004498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <vTaskDelay+0x64>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000cb8 	.word	0x20000cb8
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ce:	463a      	mov	r2, r7
 80044d0:	1d39      	adds	r1, r7, #4
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc ffd6 	bl	8001488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044dc:	6839      	ldr	r1, [r7, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	9202      	str	r2, [sp, #8]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	2300      	movs	r3, #0
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	460a      	mov	r2, r1
 80044ee:	4921      	ldr	r1, [pc, #132]	; (8004574 <vTaskStartScheduler+0xb4>)
 80044f0:	4821      	ldr	r0, [pc, #132]	; (8004578 <vTaskStartScheduler+0xb8>)
 80044f2:	f7ff fe06 	bl	8004102 <xTaskCreateStatic>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4a20      	ldr	r2, [pc, #128]	; (800457c <vTaskStartScheduler+0xbc>)
 80044fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044fc:	4b1f      	ldr	r3, [pc, #124]	; (800457c <vTaskStartScheduler+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004504:	2301      	movs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e001      	b.n	800450e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d11b      	bne.n	800454c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	613b      	str	r3, [r7, #16]
}
 8004526:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <vTaskStartScheduler+0xc0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	334c      	adds	r3, #76	; 0x4c
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <vTaskStartScheduler+0xc4>)
 8004530:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <vTaskStartScheduler+0xc8>)
 8004534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004538:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800453a:	4b14      	ldr	r3, [pc, #80]	; (800458c <vTaskStartScheduler+0xcc>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <vTaskStartScheduler+0xd0>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004546:	f000 fbd3 	bl	8004cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800454a:	e00e      	b.n	800456a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004552:	d10a      	bne.n	800456a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60fb      	str	r3, [r7, #12]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <vTaskStartScheduler+0xa8>
}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	08008698 	.word	0x08008698
 8004578:	0800491d 	.word	0x0800491d
 800457c:	20000cb4 	.word	0x20000cb4
 8004580:	20000a8c 	.word	0x20000a8c
 8004584:	20000120 	.word	0x20000120
 8004588:	20000cb0 	.word	0x20000cb0
 800458c:	20000c9c 	.word	0x20000c9c
 8004590:	20000c94 	.word	0x20000c94

08004594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <vTaskSuspendAll+0x18>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a03      	ldr	r2, [pc, #12]	; (80045ac <vTaskSuspendAll+0x18>)
 80045a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000cb8 	.word	0x20000cb8

080045b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <xTaskResumeAll+0x114>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <xTaskResumeAll+0x2c>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	603b      	str	r3, [r7, #0]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045dc:	f000 fc2a 	bl	8004e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045e0:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <xTaskResumeAll+0x114>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	4a37      	ldr	r2, [pc, #220]	; (80046c4 <xTaskResumeAll+0x114>)
 80045e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <xTaskResumeAll+0x114>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d161      	bne.n	80046b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <xTaskResumeAll+0x118>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d05d      	beq.n	80046b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045fa:	e02e      	b.n	800465a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b33      	ldr	r3, [pc, #204]	; (80046cc <xTaskResumeAll+0x11c>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3318      	adds	r3, #24
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fd50 	bl	80040ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fd4b 	bl	80040ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <xTaskResumeAll+0x120>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <xTaskResumeAll+0x120>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4a27      	ldr	r2, [pc, #156]	; (80046d4 <xTaskResumeAll+0x124>)
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f7ff fcd7 	bl	8003ff4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <xTaskResumeAll+0x128>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004654:	4b21      	ldr	r3, [pc, #132]	; (80046dc <xTaskResumeAll+0x12c>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <xTaskResumeAll+0x11c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1cc      	bne.n	80045fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004668:	f000 fa12 	bl	8004a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <xTaskResumeAll+0x130>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004678:	f000 f836 	bl	80046e8 <xTaskIncrementTick>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <xTaskResumeAll+0x12c>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3b01      	subs	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f1      	bne.n	8004678 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <xTaskResumeAll+0x130>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <xTaskResumeAll+0x12c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046a2:	2301      	movs	r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <xTaskResumeAll+0x134>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046b6:	f000 fbed 	bl	8004e94 <vPortExitCritical>

	return xAlreadyYielded;
 80046ba:	68bb      	ldr	r3, [r7, #8]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000cb8 	.word	0x20000cb8
 80046c8:	20000c90 	.word	0x20000c90
 80046cc:	20000c50 	.word	0x20000c50
 80046d0:	20000c98 	.word	0x20000c98
 80046d4:	20000a90 	.word	0x20000a90
 80046d8:	20000a8c 	.word	0x20000a8c
 80046dc:	20000ca4 	.word	0x20000ca4
 80046e0:	20000ca0 	.word	0x20000ca0
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f2:	4b4e      	ldr	r3, [pc, #312]	; (800482c <xTaskIncrementTick+0x144>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 808e 	bne.w	8004818 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046fc:	4b4c      	ldr	r3, [pc, #304]	; (8004830 <xTaskIncrementTick+0x148>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004704:	4a4a      	ldr	r2, [pc, #296]	; (8004830 <xTaskIncrementTick+0x148>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d120      	bne.n	8004752 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004710:	4b48      	ldr	r3, [pc, #288]	; (8004834 <xTaskIncrementTick+0x14c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <xTaskIncrementTick+0x48>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	603b      	str	r3, [r7, #0]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <xTaskIncrementTick+0x46>
 8004730:	4b40      	ldr	r3, [pc, #256]	; (8004834 <xTaskIncrementTick+0x14c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <xTaskIncrementTick+0x150>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3e      	ldr	r2, [pc, #248]	; (8004834 <xTaskIncrementTick+0x14c>)
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4a3e      	ldr	r2, [pc, #248]	; (8004838 <xTaskIncrementTick+0x150>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b3d      	ldr	r3, [pc, #244]	; (800483c <xTaskIncrementTick+0x154>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	4a3c      	ldr	r2, [pc, #240]	; (800483c <xTaskIncrementTick+0x154>)
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	f000 f99f 	bl	8004a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004752:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <xTaskIncrementTick+0x158>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d348      	bcc.n	80047ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475c:	4b35      	ldr	r3, [pc, #212]	; (8004834 <xTaskIncrementTick+0x14c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <xTaskIncrementTick+0x158>)
 8004768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800476c:	601a      	str	r2, [r3, #0]
					break;
 800476e:	e03e      	b.n	80047ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <xTaskIncrementTick+0x14c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d203      	bcs.n	8004790 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004788:	4a2d      	ldr	r2, [pc, #180]	; (8004840 <xTaskIncrementTick+0x158>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800478e:	e02e      	b.n	80047ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fc8a 	bl	80040ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3318      	adds	r3, #24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fc81 	bl	80040ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	2201      	movs	r2, #1
 80047b2:	409a      	lsls	r2, r3
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <xTaskIncrementTick+0x15c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	4a22      	ldr	r2, [pc, #136]	; (8004844 <xTaskIncrementTick+0x15c>)
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <xTaskIncrementTick+0x160>)
 80047cc:	441a      	add	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f7ff fc0d 	bl	8003ff4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <xTaskIncrementTick+0x164>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d3b9      	bcc.n	800475c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ec:	e7b6      	b.n	800475c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <xTaskIncrementTick+0x164>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f4:	4914      	ldr	r1, [pc, #80]	; (8004848 <xTaskIncrementTick+0x160>)
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d901      	bls.n	800480a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <xTaskIncrementTick+0x168>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e004      	b.n	8004822 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <xTaskIncrementTick+0x16c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <xTaskIncrementTick+0x16c>)
 8004820:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004822:	697b      	ldr	r3, [r7, #20]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000cb8 	.word	0x20000cb8
 8004830:	20000c94 	.word	0x20000c94
 8004834:	20000c48 	.word	0x20000c48
 8004838:	20000c4c 	.word	0x20000c4c
 800483c:	20000ca8 	.word	0x20000ca8
 8004840:	20000cb0 	.word	0x20000cb0
 8004844:	20000c98 	.word	0x20000c98
 8004848:	20000a90 	.word	0x20000a90
 800484c:	20000a8c 	.word	0x20000a8c
 8004850:	20000ca4 	.word	0x20000ca4
 8004854:	20000ca0 	.word	0x20000ca0

08004858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800485e:	4b29      	ldr	r3, [pc, #164]	; (8004904 <vTaskSwitchContext+0xac>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004866:	4b28      	ldr	r3, [pc, #160]	; (8004908 <vTaskSwitchContext+0xb0>)
 8004868:	2201      	movs	r2, #1
 800486a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800486c:	e044      	b.n	80048f8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800486e:	4b26      	ldr	r3, [pc, #152]	; (8004908 <vTaskSwitchContext+0xb0>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <vTaskSwitchContext+0xb4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	f1c3 031f 	rsb	r3, r3, #31
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	4921      	ldr	r1, [pc, #132]	; (8004910 <vTaskSwitchContext+0xb8>)
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <vTaskSwitchContext+0x5a>
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <vTaskSwitchContext+0xb8>)
 80048c0:	4413      	add	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3308      	adds	r3, #8
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d104      	bne.n	80048e4 <vTaskSwitchContext+0x8c>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <vTaskSwitchContext+0xbc>)
 80048ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <vTaskSwitchContext+0xbc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	334c      	adds	r3, #76	; 0x4c
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <vTaskSwitchContext+0xc0>)
 80048f6:	6013      	str	r3, [r2, #0]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	20000cb8 	.word	0x20000cb8
 8004908:	20000ca4 	.word	0x20000ca4
 800490c:	20000c98 	.word	0x20000c98
 8004910:	20000a90 	.word	0x20000a90
 8004914:	20000a8c 	.word	0x20000a8c
 8004918:	20000120 	.word	0x20000120

0800491c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004924:	f000 f852 	bl	80049cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <prvIdleTask+0x28>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d9f9      	bls.n	8004924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <prvIdleTask+0x2c>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004940:	e7f0      	b.n	8004924 <prvIdleTask+0x8>
 8004942:	bf00      	nop
 8004944:	20000a90 	.word	0x20000a90
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	e00c      	b.n	8004972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <prvInitialiseTaskLists+0x60>)
 8004964:	4413      	add	r3, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fb17 	bl	8003f9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3301      	adds	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b13      	cmp	r3, #19
 8004976:	d9ef      	bls.n	8004958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004978:	480d      	ldr	r0, [pc, #52]	; (80049b0 <prvInitialiseTaskLists+0x64>)
 800497a:	f7ff fb0e 	bl	8003f9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800497e:	480d      	ldr	r0, [pc, #52]	; (80049b4 <prvInitialiseTaskLists+0x68>)
 8004980:	f7ff fb0b 	bl	8003f9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004984:	480c      	ldr	r0, [pc, #48]	; (80049b8 <prvInitialiseTaskLists+0x6c>)
 8004986:	f7ff fb08 	bl	8003f9a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800498a:	480c      	ldr	r0, [pc, #48]	; (80049bc <prvInitialiseTaskLists+0x70>)
 800498c:	f7ff fb05 	bl	8003f9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004990:	480b      	ldr	r0, [pc, #44]	; (80049c0 <prvInitialiseTaskLists+0x74>)
 8004992:	f7ff fb02 	bl	8003f9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <prvInitialiseTaskLists+0x78>)
 8004998:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <prvInitialiseTaskLists+0x64>)
 800499a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <prvInitialiseTaskLists+0x7c>)
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <prvInitialiseTaskLists+0x68>)
 80049a0:	601a      	str	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000a90 	.word	0x20000a90
 80049b0:	20000c20 	.word	0x20000c20
 80049b4:	20000c34 	.word	0x20000c34
 80049b8:	20000c50 	.word	0x20000c50
 80049bc:	20000c64 	.word	0x20000c64
 80049c0:	20000c7c 	.word	0x20000c7c
 80049c4:	20000c48 	.word	0x20000c48
 80049c8:	20000c4c 	.word	0x20000c4c

080049cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049d2:	e019      	b.n	8004a08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049d4:	f000 fa2e 	bl	8004e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <prvCheckTasksWaitingTermination+0x50>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fb62 	bl	80040ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <prvCheckTasksWaitingTermination+0x54>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <prvCheckTasksWaitingTermination+0x54>)
 80049f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <prvCheckTasksWaitingTermination+0x58>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <prvCheckTasksWaitingTermination+0x58>)
 80049fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049fe:	f000 fa49 	bl	8004e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f810 	bl	8004a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <prvCheckTasksWaitingTermination+0x58>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e1      	bne.n	80049d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000c64 	.word	0x20000c64
 8004a20:	20000c90 	.word	0x20000c90
 8004a24:	20000c78 	.word	0x20000c78

08004a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	334c      	adds	r3, #76	; 0x4c
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 fc15 	bl	8006264 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d108      	bne.n	8004a56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fba1 	bl	8005190 <vPortFree>
				vPortFree( pxTCB );
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb9e 	bl	8005190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a54:	e018      	b.n	8004a88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d103      	bne.n	8004a68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb95 	bl	8005190 <vPortFree>
	}
 8004a66:	e00f      	b.n	8004a88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d00a      	beq.n	8004a88 <prvDeleteTCB+0x60>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60fb      	str	r3, [r7, #12]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <prvDeleteTCB+0x5e>
	}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <prvResetNextTaskUnblockTime+0x38>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <prvResetNextTaskUnblockTime+0x3c>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aa8:	e008      	b.n	8004abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <prvResetNextTaskUnblockTime+0x38>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <prvResetNextTaskUnblockTime+0x3c>)
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000c48 	.word	0x20000c48
 8004acc:	20000cb0 	.word	0x20000cb0

08004ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <xTaskGetSchedulerState+0x34>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	e008      	b.n	8004af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae4:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <xTaskGetSchedulerState+0x38>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004aec:	2302      	movs	r3, #2
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	e001      	b.n	8004af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004af6:	687b      	ldr	r3, [r7, #4]
	}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	20000c9c 	.word	0x20000c9c
 8004b08:	20000cb8 	.word	0x20000cb8

08004b0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fac3 	bl	80040ae <uxListRemove>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2201      	movs	r2, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4013      	ands	r3, r2
 8004b42:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4c:	d10a      	bne.n	8004b64 <prvAddCurrentTaskToDelayedList+0x58>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	481a      	ldr	r0, [pc, #104]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b5e:	f7ff fa49 	bl	8003ff4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b62:	e026      	b.n	8004bb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4413      	add	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d209      	bcs.n	8004b90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7ff fa57 	bl	800403c <vListInsert>
}
 8004b8e:	e010      	b.n	8004bb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7ff fa4d 	bl	800403c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d202      	bcs.n	8004bb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6013      	str	r3, [r2, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000c94 	.word	0x20000c94
 8004bc0:	20000a8c 	.word	0x20000a8c
 8004bc4:	20000c98 	.word	0x20000c98
 8004bc8:	20000c7c 	.word	0x20000c7c
 8004bcc:	20000c4c 	.word	0x20000c4c
 8004bd0:	20000c48 	.word	0x20000c48
 8004bd4:	20000cb0 	.word	0x20000cb0

08004bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b04      	subs	r3, #4
 8004be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f023 0201 	bic.w	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b04      	subs	r3, #4
 8004c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c08:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <pxPortInitialiseStack+0x64>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b14      	subs	r3, #20
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3b04      	subs	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f06f 0202 	mvn.w	r2, #2
 8004c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3b20      	subs	r3, #32
 8004c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	08004c41 	.word	0x08004c41

08004c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <prvTaskExitError+0x54>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c52:	d00a      	beq.n	8004c6a <prvTaskExitError+0x2a>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60fb      	str	r3, [r7, #12]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <prvTaskExitError+0x28>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
}
 8004c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c7e:	bf00      	nop
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0fc      	beq.n	8004c80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	200000c4 	.word	0x200000c4
	...

08004ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <pxCurrentTCBConst2>)
 8004ca2:	6819      	ldr	r1, [r3, #0]
 8004ca4:	6808      	ldr	r0, [r1, #0]
 8004ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004caa:	f380 8809 	msr	PSP, r0
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f380 8811 	msr	BASEPRI, r0
 8004cba:	4770      	bx	lr
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst2>:
 8004cc0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cc8:	4808      	ldr	r0, [pc, #32]	; (8004cec <prvPortStartFirstTask+0x24>)
 8004cca:	6800      	ldr	r0, [r0, #0]
 8004ccc:	6800      	ldr	r0, [r0, #0]
 8004cce:	f380 8808 	msr	MSP, r0
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f380 8814 	msr	CONTROL, r0
 8004cda:	b662      	cpsie	i
 8004cdc:	b661      	cpsie	f
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	df00      	svc	0
 8004ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cea:	bf00      	nop
 8004cec:	e000ed08 	.word	0xe000ed08

08004cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cf6:	4b46      	ldr	r3, [pc, #280]	; (8004e10 <xPortStartScheduler+0x120>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a46      	ldr	r2, [pc, #280]	; (8004e14 <xPortStartScheduler+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10a      	bne.n	8004d16 <xPortStartScheduler+0x26>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <xPortStartScheduler+0x120>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3f      	ldr	r2, [pc, #252]	; (8004e18 <xPortStartScheduler+0x128>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10a      	bne.n	8004d36 <xPortStartScheduler+0x46>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d36:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <xPortStartScheduler+0x12c>)
 8004d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	22ff      	movs	r2, #255	; 0xff
 8004d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <xPortStartScheduler+0x130>)
 8004d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <xPortStartScheduler+0x134>)
 8004d60:	2207      	movs	r2, #7
 8004d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d64:	e009      	b.n	8004d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d66:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <xPortStartScheduler+0x134>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <xPortStartScheduler+0x134>)
 8004d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	2b80      	cmp	r3, #128	; 0x80
 8004d84:	d0ef      	beq.n	8004d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d86:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <xPortStartScheduler+0x134>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f1c3 0307 	rsb	r3, r3, #7
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00a      	beq.n	8004da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60bb      	str	r3, [r7, #8]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <xPortStartScheduler+0x134>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <xPortStartScheduler+0x134>)
 8004db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <xPortStartScheduler+0x134>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <xPortStartScheduler+0x134>)
 8004dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dc6:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <xPortStartScheduler+0x138>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <xPortStartScheduler+0x138>)
 8004dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <xPortStartScheduler+0x138>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a14      	ldr	r2, [pc, #80]	; (8004e28 <xPortStartScheduler+0x138>)
 8004dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dde:	f000 f8dd 	bl	8004f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <xPortStartScheduler+0x13c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004de8:	f000 f8fc 	bl	8004fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <xPortStartScheduler+0x140>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0f      	ldr	r2, [pc, #60]	; (8004e30 <xPortStartScheduler+0x140>)
 8004df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004df8:	f7ff ff66 	bl	8004cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dfc:	f7ff fd2c 	bl	8004858 <vTaskSwitchContext>
	prvTaskExitError();
 8004e00:	f7ff ff1e 	bl	8004c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	e000ed00 	.word	0xe000ed00
 8004e14:	410fc271 	.word	0x410fc271
 8004e18:	410fc270 	.word	0x410fc270
 8004e1c:	e000e400 	.word	0xe000e400
 8004e20:	20000cbc 	.word	0x20000cbc
 8004e24:	20000cc0 	.word	0x20000cc0
 8004e28:	e000ed20 	.word	0xe000ed20
 8004e2c:	200000c4 	.word	0x200000c4
 8004e30:	e000ef34 	.word	0xe000ef34

08004e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	607b      	str	r3, [r7, #4]
}
 8004e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <vPortEnterCritical+0x58>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <vPortEnterCritical+0x58>)
 8004e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <vPortEnterCritical+0x58>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10f      	bne.n	8004e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <vPortEnterCritical+0x5c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	603b      	str	r3, [r7, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <vPortEnterCritical+0x4a>
	}
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	200000c4 	.word	0x200000c4
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <vPortExitCritical+0x50>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <vPortExitCritical+0x24>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	607b      	str	r3, [r7, #4]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <vPortExitCritical+0x50>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <vPortExitCritical+0x50>)
 8004ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <vPortExitCritical+0x50>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <vPortExitCritical+0x42>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	200000c4 	.word	0x200000c4
	...

08004ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ef0:	f3ef 8009 	mrs	r0, PSP
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <pxCurrentTCBConst>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f01e 0f10 	tst.w	lr, #16
 8004f00:	bf08      	it	eq
 8004f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	6010      	str	r0, [r2, #0]
 8004f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f14:	f380 8811 	msr	BASEPRI, r0
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f7ff fc9a 	bl	8004858 <vTaskSwitchContext>
 8004f24:	f04f 0000 	mov.w	r0, #0
 8004f28:	f380 8811 	msr	BASEPRI, r0
 8004f2c:	bc09      	pop	{r0, r3}
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	6808      	ldr	r0, [r1, #0]
 8004f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f36:	f01e 0f10 	tst.w	lr, #16
 8004f3a:	bf08      	it	eq
 8004f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f40:	f380 8809 	msr	PSP, r0
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w

08004f50 <pxCurrentTCBConst>:
 8004f50:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
}
 8004f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f72:	f7ff fbb9 	bl	80046e8 <xTaskIncrementTick>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <xPortSysTickHandler+0x40>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
}
 8004f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <vPortSetupTimerInterrupt+0x34>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <vPortSetupTimerInterrupt+0x38>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fac:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <vPortSetupTimerInterrupt+0x3c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <vPortSetupTimerInterrupt+0x40>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <vPortSetupTimerInterrupt+0x44>)
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <vPortSetupTimerInterrupt+0x34>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	e000e010 	.word	0xe000e010
 8004fd4:	e000e018 	.word	0xe000e018
 8004fd8:	200000b8 	.word	0x200000b8
 8004fdc:	10624dd3 	.word	0x10624dd3
 8004fe0:	e000e014 	.word	0xe000e014

08004fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ff4 <vPortEnableVFP+0x10>
 8004fe8:	6801      	ldr	r1, [r0, #0]
 8004fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fee:	6001      	str	r1, [r0, #0]
 8004ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ff2:	bf00      	nop
 8004ff4:	e000ed88 	.word	0xe000ed88

08004ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005004:	f7ff fac6 	bl	8004594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005008:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <pvPortMalloc+0x180>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005010:	f000 f920 	bl	8005254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <pvPortMalloc+0x184>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8093 	bne.w	8005148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01d      	beq.n	8005064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005028:	2208      	movs	r2, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f023 0307 	bic.w	r3, r3, #7
 8005040:	3308      	adds	r3, #8
 8005042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <pvPortMalloc+0x6c>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	617b      	str	r3, [r7, #20]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d06e      	beq.n	8005148 <pvPortMalloc+0x150>
 800506a:	4b45      	ldr	r3, [pc, #276]	; (8005180 <pvPortMalloc+0x188>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d869      	bhi.n	8005148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005074:	4b43      	ldr	r3, [pc, #268]	; (8005184 <pvPortMalloc+0x18c>)
 8005076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005078:	4b42      	ldr	r3, [pc, #264]	; (8005184 <pvPortMalloc+0x18c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800507e:	e004      	b.n	800508a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d903      	bls.n	800509c <pvPortMalloc+0xa4>
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f1      	bne.n	8005080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <pvPortMalloc+0x180>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d050      	beq.n	8005148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2208      	movs	r2, #8
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	2308      	movs	r3, #8
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d91f      	bls.n	8005108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <pvPortMalloc+0xf8>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	613b      	str	r3, [r7, #16]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f000 f908 	bl	8005318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <pvPortMalloc+0x188>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <pvPortMalloc+0x188>)
 8005114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <pvPortMalloc+0x188>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <pvPortMalloc+0x190>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d203      	bcs.n	800512a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <pvPortMalloc+0x188>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <pvPortMalloc+0x190>)
 8005128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <pvPortMalloc+0x184>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	431a      	orrs	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <pvPortMalloc+0x194>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <pvPortMalloc+0x194>)
 8005146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005148:	f7ff fa32 	bl	80045b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <pvPortMalloc+0x174>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <pvPortMalloc+0x172>
	return pvReturn;
 800516c:	69fb      	ldr	r3, [r7, #28]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200048cc 	.word	0x200048cc
 800517c:	200048e0 	.word	0x200048e0
 8005180:	200048d0 	.word	0x200048d0
 8005184:	200048c4 	.word	0x200048c4
 8005188:	200048d4 	.word	0x200048d4
 800518c:	200048d8 	.word	0x200048d8

08005190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04d      	beq.n	800523e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051a2:	2308      	movs	r3, #8
 80051a4:	425b      	negs	r3, r3
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <vPortFree+0xb8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <vPortFree+0x44>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60fb      	str	r3, [r7, #12]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <vPortFree+0x62>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60bb      	str	r3, [r7, #8]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <vPortFree+0xb8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11a      	bne.n	800523e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <vPortFree+0xb8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005218:	f7ff f9bc 	bl	8004594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <vPortFree+0xbc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <vPortFree+0xbc>)
 8005228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f000 f874 	bl	8005318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <vPortFree+0xc0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	4a06      	ldr	r2, [pc, #24]	; (8005250 <vPortFree+0xc0>)
 8005238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800523a:	f7ff f9b9 	bl	80045b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200048e0 	.word	0x200048e0
 800524c:	200048d0 	.word	0x200048d0
 8005250:	200048dc 	.word	0x200048dc

08005254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800525a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800525e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <prvHeapInit+0xac>)
 8005262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3307      	adds	r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <prvHeapInit+0xac>)
 8005284:	4413      	add	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <prvHeapInit+0xb0>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <prvHeapInit+0xb0>)
 8005294:	2200      	movs	r2, #0
 8005296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052a0:	2208      	movs	r2, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvHeapInit+0xb4>)
 80052b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <prvHeapInit+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <prvHeapInit+0xb4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvHeapInit+0xb4>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	; (800530c <prvHeapInit+0xb8>)
 80052e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <prvHeapInit+0xbc>)
 80052ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <prvHeapInit+0xc0>)
 80052ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000cc4 	.word	0x20000cc4
 8005304:	200048c4 	.word	0x200048c4
 8005308:	200048cc 	.word	0x200048cc
 800530c:	200048d4 	.word	0x200048d4
 8005310:	200048d0 	.word	0x200048d0
 8005314:	200048e0 	.word	0x200048e0

08005318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <prvInsertBlockIntoFreeList+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <prvInsertBlockIntoFreeList+0x14>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d8f7      	bhi.n	8005326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d108      	bne.n	800535a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	441a      	add	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d118      	bne.n	80053a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d00d      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e008      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e003      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d002      	beq.n	80053b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	200048c4 	.word	0x200048c4
 80053c8:	200048cc 	.word	0x200048cc

080053cc <__cvt>:
 80053cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	ec55 4b10 	vmov	r4, r5, d0
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	460e      	mov	r6, r1
 80053d8:	4619      	mov	r1, r3
 80053da:	462b      	mov	r3, r5
 80053dc:	bfbb      	ittet	lt
 80053de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053e2:	461d      	movlt	r5, r3
 80053e4:	2300      	movge	r3, #0
 80053e6:	232d      	movlt	r3, #45	; 0x2d
 80053e8:	700b      	strb	r3, [r1, #0]
 80053ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053f0:	4691      	mov	r9, r2
 80053f2:	f023 0820 	bic.w	r8, r3, #32
 80053f6:	bfbc      	itt	lt
 80053f8:	4622      	movlt	r2, r4
 80053fa:	4614      	movlt	r4, r2
 80053fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005400:	d005      	beq.n	800540e <__cvt+0x42>
 8005402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005406:	d100      	bne.n	800540a <__cvt+0x3e>
 8005408:	3601      	adds	r6, #1
 800540a:	2102      	movs	r1, #2
 800540c:	e000      	b.n	8005410 <__cvt+0x44>
 800540e:	2103      	movs	r1, #3
 8005410:	ab03      	add	r3, sp, #12
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	ab02      	add	r3, sp, #8
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	ec45 4b10 	vmov	d0, r4, r5
 800541c:	4653      	mov	r3, sl
 800541e:	4632      	mov	r2, r6
 8005420:	f001 f872 	bl	8006508 <_dtoa_r>
 8005424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005428:	4607      	mov	r7, r0
 800542a:	d102      	bne.n	8005432 <__cvt+0x66>
 800542c:	f019 0f01 	tst.w	r9, #1
 8005430:	d022      	beq.n	8005478 <__cvt+0xac>
 8005432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005436:	eb07 0906 	add.w	r9, r7, r6
 800543a:	d110      	bne.n	800545e <__cvt+0x92>
 800543c:	783b      	ldrb	r3, [r7, #0]
 800543e:	2b30      	cmp	r3, #48	; 0x30
 8005440:	d10a      	bne.n	8005458 <__cvt+0x8c>
 8005442:	2200      	movs	r2, #0
 8005444:	2300      	movs	r3, #0
 8005446:	4620      	mov	r0, r4
 8005448:	4629      	mov	r1, r5
 800544a:	f7fb fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800544e:	b918      	cbnz	r0, 8005458 <__cvt+0x8c>
 8005450:	f1c6 0601 	rsb	r6, r6, #1
 8005454:	f8ca 6000 	str.w	r6, [sl]
 8005458:	f8da 3000 	ldr.w	r3, [sl]
 800545c:	4499      	add	r9, r3
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	4620      	mov	r0, r4
 8005464:	4629      	mov	r1, r5
 8005466:	f7fb fb3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800546a:	b108      	cbz	r0, 8005470 <__cvt+0xa4>
 800546c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005470:	2230      	movs	r2, #48	; 0x30
 8005472:	9b03      	ldr	r3, [sp, #12]
 8005474:	454b      	cmp	r3, r9
 8005476:	d307      	bcc.n	8005488 <__cvt+0xbc>
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800547c:	1bdb      	subs	r3, r3, r7
 800547e:	4638      	mov	r0, r7
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	b004      	add	sp, #16
 8005484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005488:	1c59      	adds	r1, r3, #1
 800548a:	9103      	str	r1, [sp, #12]
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e7f0      	b.n	8005472 <__cvt+0xa6>

08005490 <__exponent>:
 8005490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005492:	4603      	mov	r3, r0
 8005494:	2900      	cmp	r1, #0
 8005496:	bfb8      	it	lt
 8005498:	4249      	neglt	r1, r1
 800549a:	f803 2b02 	strb.w	r2, [r3], #2
 800549e:	bfb4      	ite	lt
 80054a0:	222d      	movlt	r2, #45	; 0x2d
 80054a2:	222b      	movge	r2, #43	; 0x2b
 80054a4:	2909      	cmp	r1, #9
 80054a6:	7042      	strb	r2, [r0, #1]
 80054a8:	dd2a      	ble.n	8005500 <__exponent+0x70>
 80054aa:	f10d 0207 	add.w	r2, sp, #7
 80054ae:	4617      	mov	r7, r2
 80054b0:	260a      	movs	r6, #10
 80054b2:	4694      	mov	ip, r2
 80054b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80054b8:	fb06 1415 	mls	r4, r6, r5, r1
 80054bc:	3430      	adds	r4, #48	; 0x30
 80054be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80054c2:	460c      	mov	r4, r1
 80054c4:	2c63      	cmp	r4, #99	; 0x63
 80054c6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80054ca:	4629      	mov	r1, r5
 80054cc:	dcf1      	bgt.n	80054b2 <__exponent+0x22>
 80054ce:	3130      	adds	r1, #48	; 0x30
 80054d0:	f1ac 0402 	sub.w	r4, ip, #2
 80054d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80054d8:	1c41      	adds	r1, r0, #1
 80054da:	4622      	mov	r2, r4
 80054dc:	42ba      	cmp	r2, r7
 80054de:	d30a      	bcc.n	80054f6 <__exponent+0x66>
 80054e0:	f10d 0209 	add.w	r2, sp, #9
 80054e4:	eba2 020c 	sub.w	r2, r2, ip
 80054e8:	42bc      	cmp	r4, r7
 80054ea:	bf88      	it	hi
 80054ec:	2200      	movhi	r2, #0
 80054ee:	4413      	add	r3, r2
 80054f0:	1a18      	subs	r0, r3, r0
 80054f2:	b003      	add	sp, #12
 80054f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80054fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80054fe:	e7ed      	b.n	80054dc <__exponent+0x4c>
 8005500:	2330      	movs	r3, #48	; 0x30
 8005502:	3130      	adds	r1, #48	; 0x30
 8005504:	7083      	strb	r3, [r0, #2]
 8005506:	70c1      	strb	r1, [r0, #3]
 8005508:	1d03      	adds	r3, r0, #4
 800550a:	e7f1      	b.n	80054f0 <__exponent+0x60>

0800550c <_printf_float>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	ed2d 8b02 	vpush	{d8}
 8005514:	b08d      	sub	sp, #52	; 0x34
 8005516:	460c      	mov	r4, r1
 8005518:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800551c:	4616      	mov	r6, r2
 800551e:	461f      	mov	r7, r3
 8005520:	4605      	mov	r5, r0
 8005522:	f000 fe8b 	bl	800623c <_localeconv_r>
 8005526:	f8d0 a000 	ldr.w	sl, [r0]
 800552a:	4650      	mov	r0, sl
 800552c:	f7fa feb0 	bl	8000290 <strlen>
 8005530:	2300      	movs	r3, #0
 8005532:	930a      	str	r3, [sp, #40]	; 0x28
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	f8d8 3000 	ldr.w	r3, [r8]
 800553c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005540:	3307      	adds	r3, #7
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	f103 0208 	add.w	r2, r3, #8
 800554a:	f8c8 2000 	str.w	r2, [r8]
 800554e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005556:	9307      	str	r3, [sp, #28]
 8005558:	f8cd 8018 	str.w	r8, [sp, #24]
 800555c:	ee08 0a10 	vmov	s16, r0
 8005560:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005568:	4b9e      	ldr	r3, [pc, #632]	; (80057e4 <_printf_float+0x2d8>)
 800556a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800556e:	f7fb faed 	bl	8000b4c <__aeabi_dcmpun>
 8005572:	bb88      	cbnz	r0, 80055d8 <_printf_float+0xcc>
 8005574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005578:	4b9a      	ldr	r3, [pc, #616]	; (80057e4 <_printf_float+0x2d8>)
 800557a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800557e:	f7fb fac7 	bl	8000b10 <__aeabi_dcmple>
 8005582:	bb48      	cbnz	r0, 80055d8 <_printf_float+0xcc>
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fb fab6 	bl	8000afc <__aeabi_dcmplt>
 8005590:	b110      	cbz	r0, 8005598 <_printf_float+0x8c>
 8005592:	232d      	movs	r3, #45	; 0x2d
 8005594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005598:	4a93      	ldr	r2, [pc, #588]	; (80057e8 <_printf_float+0x2dc>)
 800559a:	4b94      	ldr	r3, [pc, #592]	; (80057ec <_printf_float+0x2e0>)
 800559c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055a0:	bf94      	ite	ls
 80055a2:	4690      	movls	r8, r2
 80055a4:	4698      	movhi	r8, r3
 80055a6:	2303      	movs	r3, #3
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	f023 0304 	bic.w	r3, r3, #4
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	9700      	str	r7, [sp, #0]
 80055b8:	4633      	mov	r3, r6
 80055ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f9da 	bl	8005978 <_printf_common>
 80055c4:	3001      	adds	r0, #1
 80055c6:	f040 8090 	bne.w	80056ea <_printf_float+0x1de>
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ce:	b00d      	add	sp, #52	; 0x34
 80055d0:	ecbd 8b02 	vpop	{d8}
 80055d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	4649      	mov	r1, r9
 80055e0:	f7fb fab4 	bl	8000b4c <__aeabi_dcmpun>
 80055e4:	b140      	cbz	r0, 80055f8 <_printf_float+0xec>
 80055e6:	464b      	mov	r3, r9
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bfbc      	itt	lt
 80055ec:	232d      	movlt	r3, #45	; 0x2d
 80055ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055f2:	4a7f      	ldr	r2, [pc, #508]	; (80057f0 <_printf_float+0x2e4>)
 80055f4:	4b7f      	ldr	r3, [pc, #508]	; (80057f4 <_printf_float+0x2e8>)
 80055f6:	e7d1      	b.n	800559c <_printf_float+0x90>
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055fe:	9206      	str	r2, [sp, #24]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	d13f      	bne.n	8005684 <_printf_float+0x178>
 8005604:	2306      	movs	r3, #6
 8005606:	6063      	str	r3, [r4, #4]
 8005608:	9b05      	ldr	r3, [sp, #20]
 800560a:	6861      	ldr	r1, [r4, #4]
 800560c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005610:	2300      	movs	r3, #0
 8005612:	9303      	str	r3, [sp, #12]
 8005614:	ab0a      	add	r3, sp, #40	; 0x28
 8005616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800561a:	ab09      	add	r3, sp, #36	; 0x24
 800561c:	ec49 8b10 	vmov	d0, r8, r9
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005628:	4628      	mov	r0, r5
 800562a:	f7ff fecf 	bl	80053cc <__cvt>
 800562e:	9b06      	ldr	r3, [sp, #24]
 8005630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005632:	2b47      	cmp	r3, #71	; 0x47
 8005634:	4680      	mov	r8, r0
 8005636:	d108      	bne.n	800564a <_printf_float+0x13e>
 8005638:	1cc8      	adds	r0, r1, #3
 800563a:	db02      	blt.n	8005642 <_printf_float+0x136>
 800563c:	6863      	ldr	r3, [r4, #4]
 800563e:	4299      	cmp	r1, r3
 8005640:	dd41      	ble.n	80056c6 <_printf_float+0x1ba>
 8005642:	f1ab 0302 	sub.w	r3, fp, #2
 8005646:	fa5f fb83 	uxtb.w	fp, r3
 800564a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800564e:	d820      	bhi.n	8005692 <_printf_float+0x186>
 8005650:	3901      	subs	r1, #1
 8005652:	465a      	mov	r2, fp
 8005654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005658:	9109      	str	r1, [sp, #36]	; 0x24
 800565a:	f7ff ff19 	bl	8005490 <__exponent>
 800565e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005660:	1813      	adds	r3, r2, r0
 8005662:	2a01      	cmp	r2, #1
 8005664:	4681      	mov	r9, r0
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	dc02      	bgt.n	8005670 <_printf_float+0x164>
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	07d2      	lsls	r2, r2, #31
 800566e:	d501      	bpl.n	8005674 <_printf_float+0x168>
 8005670:	3301      	adds	r3, #1
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005678:	2b00      	cmp	r3, #0
 800567a:	d09c      	beq.n	80055b6 <_printf_float+0xaa>
 800567c:	232d      	movs	r3, #45	; 0x2d
 800567e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005682:	e798      	b.n	80055b6 <_printf_float+0xaa>
 8005684:	9a06      	ldr	r2, [sp, #24]
 8005686:	2a47      	cmp	r2, #71	; 0x47
 8005688:	d1be      	bne.n	8005608 <_printf_float+0xfc>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1bc      	bne.n	8005608 <_printf_float+0xfc>
 800568e:	2301      	movs	r3, #1
 8005690:	e7b9      	b.n	8005606 <_printf_float+0xfa>
 8005692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005696:	d118      	bne.n	80056ca <_printf_float+0x1be>
 8005698:	2900      	cmp	r1, #0
 800569a:	6863      	ldr	r3, [r4, #4]
 800569c:	dd0b      	ble.n	80056b6 <_printf_float+0x1aa>
 800569e:	6121      	str	r1, [r4, #16]
 80056a0:	b913      	cbnz	r3, 80056a8 <_printf_float+0x19c>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	07d0      	lsls	r0, r2, #31
 80056a6:	d502      	bpl.n	80056ae <_printf_float+0x1a2>
 80056a8:	3301      	adds	r3, #1
 80056aa:	440b      	add	r3, r1
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80056b0:	f04f 0900 	mov.w	r9, #0
 80056b4:	e7de      	b.n	8005674 <_printf_float+0x168>
 80056b6:	b913      	cbnz	r3, 80056be <_printf_float+0x1b2>
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	07d2      	lsls	r2, r2, #31
 80056bc:	d501      	bpl.n	80056c2 <_printf_float+0x1b6>
 80056be:	3302      	adds	r3, #2
 80056c0:	e7f4      	b.n	80056ac <_printf_float+0x1a0>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e7f2      	b.n	80056ac <_printf_float+0x1a0>
 80056c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056cc:	4299      	cmp	r1, r3
 80056ce:	db05      	blt.n	80056dc <_printf_float+0x1d0>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	6121      	str	r1, [r4, #16]
 80056d4:	07d8      	lsls	r0, r3, #31
 80056d6:	d5ea      	bpl.n	80056ae <_printf_float+0x1a2>
 80056d8:	1c4b      	adds	r3, r1, #1
 80056da:	e7e7      	b.n	80056ac <_printf_float+0x1a0>
 80056dc:	2900      	cmp	r1, #0
 80056de:	bfd4      	ite	le
 80056e0:	f1c1 0202 	rsble	r2, r1, #2
 80056e4:	2201      	movgt	r2, #1
 80056e6:	4413      	add	r3, r2
 80056e8:	e7e0      	b.n	80056ac <_printf_float+0x1a0>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	055a      	lsls	r2, r3, #21
 80056ee:	d407      	bmi.n	8005700 <_printf_float+0x1f4>
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	4642      	mov	r2, r8
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	d12c      	bne.n	8005758 <_printf_float+0x24c>
 80056fe:	e764      	b.n	80055ca <_printf_float+0xbe>
 8005700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005704:	f240 80e0 	bls.w	80058c8 <_printf_float+0x3bc>
 8005708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	f7fb f9ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8005714:	2800      	cmp	r0, #0
 8005716:	d034      	beq.n	8005782 <_printf_float+0x276>
 8005718:	4a37      	ldr	r2, [pc, #220]	; (80057f8 <_printf_float+0x2ec>)
 800571a:	2301      	movs	r3, #1
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f af51 	beq.w	80055ca <_printf_float+0xbe>
 8005728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800572c:	429a      	cmp	r2, r3
 800572e:	db02      	blt.n	8005736 <_printf_float+0x22a>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	07d8      	lsls	r0, r3, #31
 8005734:	d510      	bpl.n	8005758 <_printf_float+0x24c>
 8005736:	ee18 3a10 	vmov	r3, s16
 800573a:	4652      	mov	r2, sl
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	f43f af41 	beq.w	80055ca <_printf_float+0xbe>
 8005748:	f04f 0800 	mov.w	r8, #0
 800574c:	f104 091a 	add.w	r9, r4, #26
 8005750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	4543      	cmp	r3, r8
 8005756:	dc09      	bgt.n	800576c <_printf_float+0x260>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	079b      	lsls	r3, r3, #30
 800575c:	f100 8107 	bmi.w	800596e <_printf_float+0x462>
 8005760:	68e0      	ldr	r0, [r4, #12]
 8005762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005764:	4298      	cmp	r0, r3
 8005766:	bfb8      	it	lt
 8005768:	4618      	movlt	r0, r3
 800576a:	e730      	b.n	80055ce <_printf_float+0xc2>
 800576c:	2301      	movs	r3, #1
 800576e:	464a      	mov	r2, r9
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f af27 	beq.w	80055ca <_printf_float+0xbe>
 800577c:	f108 0801 	add.w	r8, r8, #1
 8005780:	e7e6      	b.n	8005750 <_printf_float+0x244>
 8005782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	dc39      	bgt.n	80057fc <_printf_float+0x2f0>
 8005788:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <_printf_float+0x2ec>)
 800578a:	2301      	movs	r3, #1
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f af19 	beq.w	80055ca <_printf_float+0xbe>
 8005798:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800579c:	4313      	orrs	r3, r2
 800579e:	d102      	bne.n	80057a6 <_printf_float+0x29a>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	07d9      	lsls	r1, r3, #31
 80057a4:	d5d8      	bpl.n	8005758 <_printf_float+0x24c>
 80057a6:	ee18 3a10 	vmov	r3, s16
 80057aa:	4652      	mov	r2, sl
 80057ac:	4631      	mov	r1, r6
 80057ae:	4628      	mov	r0, r5
 80057b0:	47b8      	blx	r7
 80057b2:	3001      	adds	r0, #1
 80057b4:	f43f af09 	beq.w	80055ca <_printf_float+0xbe>
 80057b8:	f04f 0900 	mov.w	r9, #0
 80057bc:	f104 0a1a 	add.w	sl, r4, #26
 80057c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c2:	425b      	negs	r3, r3
 80057c4:	454b      	cmp	r3, r9
 80057c6:	dc01      	bgt.n	80057cc <_printf_float+0x2c0>
 80057c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ca:	e792      	b.n	80056f2 <_printf_float+0x1e6>
 80057cc:	2301      	movs	r3, #1
 80057ce:	4652      	mov	r2, sl
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	f43f aef7 	beq.w	80055ca <_printf_float+0xbe>
 80057dc:	f109 0901 	add.w	r9, r9, #1
 80057e0:	e7ee      	b.n	80057c0 <_printf_float+0x2b4>
 80057e2:	bf00      	nop
 80057e4:	7fefffff 	.word	0x7fefffff
 80057e8:	080087b9 	.word	0x080087b9
 80057ec:	080087bd 	.word	0x080087bd
 80057f0:	080087c1 	.word	0x080087c1
 80057f4:	080087c5 	.word	0x080087c5
 80057f8:	080087c9 	.word	0x080087c9
 80057fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005800:	429a      	cmp	r2, r3
 8005802:	bfa8      	it	ge
 8005804:	461a      	movge	r2, r3
 8005806:	2a00      	cmp	r2, #0
 8005808:	4691      	mov	r9, r2
 800580a:	dc37      	bgt.n	800587c <_printf_float+0x370>
 800580c:	f04f 0b00 	mov.w	fp, #0
 8005810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005814:	f104 021a 	add.w	r2, r4, #26
 8005818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	eba3 0309 	sub.w	r3, r3, r9
 8005820:	455b      	cmp	r3, fp
 8005822:	dc33      	bgt.n	800588c <_printf_float+0x380>
 8005824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005828:	429a      	cmp	r2, r3
 800582a:	db3b      	blt.n	80058a4 <_printf_float+0x398>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07da      	lsls	r2, r3, #31
 8005830:	d438      	bmi.n	80058a4 <_printf_float+0x398>
 8005832:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005836:	eba2 0903 	sub.w	r9, r2, r3
 800583a:	9b05      	ldr	r3, [sp, #20]
 800583c:	1ad2      	subs	r2, r2, r3
 800583e:	4591      	cmp	r9, r2
 8005840:	bfa8      	it	ge
 8005842:	4691      	movge	r9, r2
 8005844:	f1b9 0f00 	cmp.w	r9, #0
 8005848:	dc35      	bgt.n	80058b6 <_printf_float+0x3aa>
 800584a:	f04f 0800 	mov.w	r8, #0
 800584e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005852:	f104 0a1a 	add.w	sl, r4, #26
 8005856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	eba3 0309 	sub.w	r3, r3, r9
 8005860:	4543      	cmp	r3, r8
 8005862:	f77f af79 	ble.w	8005758 <_printf_float+0x24c>
 8005866:	2301      	movs	r3, #1
 8005868:	4652      	mov	r2, sl
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	f43f aeaa 	beq.w	80055ca <_printf_float+0xbe>
 8005876:	f108 0801 	add.w	r8, r8, #1
 800587a:	e7ec      	b.n	8005856 <_printf_float+0x34a>
 800587c:	4613      	mov	r3, r2
 800587e:	4631      	mov	r1, r6
 8005880:	4642      	mov	r2, r8
 8005882:	4628      	mov	r0, r5
 8005884:	47b8      	blx	r7
 8005886:	3001      	adds	r0, #1
 8005888:	d1c0      	bne.n	800580c <_printf_float+0x300>
 800588a:	e69e      	b.n	80055ca <_printf_float+0xbe>
 800588c:	2301      	movs	r3, #1
 800588e:	4631      	mov	r1, r6
 8005890:	4628      	mov	r0, r5
 8005892:	9205      	str	r2, [sp, #20]
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f ae97 	beq.w	80055ca <_printf_float+0xbe>
 800589c:	9a05      	ldr	r2, [sp, #20]
 800589e:	f10b 0b01 	add.w	fp, fp, #1
 80058a2:	e7b9      	b.n	8005818 <_printf_float+0x30c>
 80058a4:	ee18 3a10 	vmov	r3, s16
 80058a8:	4652      	mov	r2, sl
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d1be      	bne.n	8005832 <_printf_float+0x326>
 80058b4:	e689      	b.n	80055ca <_printf_float+0xbe>
 80058b6:	9a05      	ldr	r2, [sp, #20]
 80058b8:	464b      	mov	r3, r9
 80058ba:	4442      	add	r2, r8
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	d1c1      	bne.n	800584a <_printf_float+0x33e>
 80058c6:	e680      	b.n	80055ca <_printf_float+0xbe>
 80058c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ca:	2a01      	cmp	r2, #1
 80058cc:	dc01      	bgt.n	80058d2 <_printf_float+0x3c6>
 80058ce:	07db      	lsls	r3, r3, #31
 80058d0:	d53a      	bpl.n	8005948 <_printf_float+0x43c>
 80058d2:	2301      	movs	r3, #1
 80058d4:	4642      	mov	r2, r8
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	f43f ae74 	beq.w	80055ca <_printf_float+0xbe>
 80058e2:	ee18 3a10 	vmov	r3, s16
 80058e6:	4652      	mov	r2, sl
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f ae6b 	beq.w	80055ca <_printf_float+0xbe>
 80058f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005900:	f7fb f8f2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005904:	b9d8      	cbnz	r0, 800593e <_printf_float+0x432>
 8005906:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800590a:	f108 0201 	add.w	r2, r8, #1
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	d10e      	bne.n	8005936 <_printf_float+0x42a>
 8005918:	e657      	b.n	80055ca <_printf_float+0xbe>
 800591a:	2301      	movs	r3, #1
 800591c:	4652      	mov	r2, sl
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f ae50 	beq.w	80055ca <_printf_float+0xbe>
 800592a:	f108 0801 	add.w	r8, r8, #1
 800592e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005930:	3b01      	subs	r3, #1
 8005932:	4543      	cmp	r3, r8
 8005934:	dcf1      	bgt.n	800591a <_printf_float+0x40e>
 8005936:	464b      	mov	r3, r9
 8005938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800593c:	e6da      	b.n	80056f4 <_printf_float+0x1e8>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	f104 0a1a 	add.w	sl, r4, #26
 8005946:	e7f2      	b.n	800592e <_printf_float+0x422>
 8005948:	2301      	movs	r3, #1
 800594a:	4642      	mov	r2, r8
 800594c:	e7df      	b.n	800590e <_printf_float+0x402>
 800594e:	2301      	movs	r3, #1
 8005950:	464a      	mov	r2, r9
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f ae36 	beq.w	80055ca <_printf_float+0xbe>
 800595e:	f108 0801 	add.w	r8, r8, #1
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005966:	1a5b      	subs	r3, r3, r1
 8005968:	4543      	cmp	r3, r8
 800596a:	dcf0      	bgt.n	800594e <_printf_float+0x442>
 800596c:	e6f8      	b.n	8005760 <_printf_float+0x254>
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	f104 0919 	add.w	r9, r4, #25
 8005976:	e7f4      	b.n	8005962 <_printf_float+0x456>

08005978 <_printf_common>:
 8005978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	4616      	mov	r6, r2
 800597e:	4699      	mov	r9, r3
 8005980:	688a      	ldr	r2, [r1, #8]
 8005982:	690b      	ldr	r3, [r1, #16]
 8005984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005988:	4293      	cmp	r3, r2
 800598a:	bfb8      	it	lt
 800598c:	4613      	movlt	r3, r2
 800598e:	6033      	str	r3, [r6, #0]
 8005990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005994:	4607      	mov	r7, r0
 8005996:	460c      	mov	r4, r1
 8005998:	b10a      	cbz	r2, 800599e <_printf_common+0x26>
 800599a:	3301      	adds	r3, #1
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	0699      	lsls	r1, r3, #26
 80059a2:	bf42      	ittt	mi
 80059a4:	6833      	ldrmi	r3, [r6, #0]
 80059a6:	3302      	addmi	r3, #2
 80059a8:	6033      	strmi	r3, [r6, #0]
 80059aa:	6825      	ldr	r5, [r4, #0]
 80059ac:	f015 0506 	ands.w	r5, r5, #6
 80059b0:	d106      	bne.n	80059c0 <_printf_common+0x48>
 80059b2:	f104 0a19 	add.w	sl, r4, #25
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	6832      	ldr	r2, [r6, #0]
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	42ab      	cmp	r3, r5
 80059be:	dc26      	bgt.n	8005a0e <_printf_common+0x96>
 80059c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059c4:	1e13      	subs	r3, r2, #0
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	bf18      	it	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	0692      	lsls	r2, r2, #26
 80059ce:	d42b      	bmi.n	8005a28 <_printf_common+0xb0>
 80059d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059d4:	4649      	mov	r1, r9
 80059d6:	4638      	mov	r0, r7
 80059d8:	47c0      	blx	r8
 80059da:	3001      	adds	r0, #1
 80059dc:	d01e      	beq.n	8005a1c <_printf_common+0xa4>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	f003 0306 	and.w	r3, r3, #6
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	bf02      	ittt	eq
 80059ea:	68e5      	ldreq	r5, [r4, #12]
 80059ec:	6833      	ldreq	r3, [r6, #0]
 80059ee:	1aed      	subeq	r5, r5, r3
 80059f0:	68a3      	ldr	r3, [r4, #8]
 80059f2:	bf0c      	ite	eq
 80059f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059f8:	2500      	movne	r5, #0
 80059fa:	4293      	cmp	r3, r2
 80059fc:	bfc4      	itt	gt
 80059fe:	1a9b      	subgt	r3, r3, r2
 8005a00:	18ed      	addgt	r5, r5, r3
 8005a02:	2600      	movs	r6, #0
 8005a04:	341a      	adds	r4, #26
 8005a06:	42b5      	cmp	r5, r6
 8005a08:	d11a      	bne.n	8005a40 <_printf_common+0xc8>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e008      	b.n	8005a20 <_printf_common+0xa8>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4652      	mov	r2, sl
 8005a12:	4649      	mov	r1, r9
 8005a14:	4638      	mov	r0, r7
 8005a16:	47c0      	blx	r8
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d103      	bne.n	8005a24 <_printf_common+0xac>
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a24:	3501      	adds	r5, #1
 8005a26:	e7c6      	b.n	80059b6 <_printf_common+0x3e>
 8005a28:	18e1      	adds	r1, r4, r3
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	2030      	movs	r0, #48	; 0x30
 8005a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a32:	4422      	add	r2, r4
 8005a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	e7c7      	b.n	80059d0 <_printf_common+0x58>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4622      	mov	r2, r4
 8005a44:	4649      	mov	r1, r9
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c0      	blx	r8
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d0e6      	beq.n	8005a1c <_printf_common+0xa4>
 8005a4e:	3601      	adds	r6, #1
 8005a50:	e7d9      	b.n	8005a06 <_printf_common+0x8e>
	...

08005a54 <_printf_i>:
 8005a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	7e0f      	ldrb	r7, [r1, #24]
 8005a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a5c:	2f78      	cmp	r7, #120	; 0x78
 8005a5e:	4691      	mov	r9, r2
 8005a60:	4680      	mov	r8, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	469a      	mov	sl, r3
 8005a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a6a:	d807      	bhi.n	8005a7c <_printf_i+0x28>
 8005a6c:	2f62      	cmp	r7, #98	; 0x62
 8005a6e:	d80a      	bhi.n	8005a86 <_printf_i+0x32>
 8005a70:	2f00      	cmp	r7, #0
 8005a72:	f000 80d4 	beq.w	8005c1e <_printf_i+0x1ca>
 8005a76:	2f58      	cmp	r7, #88	; 0x58
 8005a78:	f000 80c0 	beq.w	8005bfc <_printf_i+0x1a8>
 8005a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a84:	e03a      	b.n	8005afc <_printf_i+0xa8>
 8005a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a8a:	2b15      	cmp	r3, #21
 8005a8c:	d8f6      	bhi.n	8005a7c <_printf_i+0x28>
 8005a8e:	a101      	add	r1, pc, #4	; (adr r1, 8005a94 <_printf_i+0x40>)
 8005a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005b01 	.word	0x08005b01
 8005a9c:	08005a7d 	.word	0x08005a7d
 8005aa0:	08005a7d 	.word	0x08005a7d
 8005aa4:	08005a7d 	.word	0x08005a7d
 8005aa8:	08005a7d 	.word	0x08005a7d
 8005aac:	08005b01 	.word	0x08005b01
 8005ab0:	08005a7d 	.word	0x08005a7d
 8005ab4:	08005a7d 	.word	0x08005a7d
 8005ab8:	08005a7d 	.word	0x08005a7d
 8005abc:	08005a7d 	.word	0x08005a7d
 8005ac0:	08005c05 	.word	0x08005c05
 8005ac4:	08005b2d 	.word	0x08005b2d
 8005ac8:	08005bbf 	.word	0x08005bbf
 8005acc:	08005a7d 	.word	0x08005a7d
 8005ad0:	08005a7d 	.word	0x08005a7d
 8005ad4:	08005c27 	.word	0x08005c27
 8005ad8:	08005a7d 	.word	0x08005a7d
 8005adc:	08005b2d 	.word	0x08005b2d
 8005ae0:	08005a7d 	.word	0x08005a7d
 8005ae4:	08005a7d 	.word	0x08005a7d
 8005ae8:	08005bc7 	.word	0x08005bc7
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	602a      	str	r2, [r5, #0]
 8005af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005afc:	2301      	movs	r3, #1
 8005afe:	e09f      	b.n	8005c40 <_printf_i+0x1ec>
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	682b      	ldr	r3, [r5, #0]
 8005b04:	0607      	lsls	r7, r0, #24
 8005b06:	f103 0104 	add.w	r1, r3, #4
 8005b0a:	6029      	str	r1, [r5, #0]
 8005b0c:	d501      	bpl.n	8005b12 <_printf_i+0xbe>
 8005b0e:	681e      	ldr	r6, [r3, #0]
 8005b10:	e003      	b.n	8005b1a <_printf_i+0xc6>
 8005b12:	0646      	lsls	r6, r0, #25
 8005b14:	d5fb      	bpl.n	8005b0e <_printf_i+0xba>
 8005b16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	da03      	bge.n	8005b26 <_printf_i+0xd2>
 8005b1e:	232d      	movs	r3, #45	; 0x2d
 8005b20:	4276      	negs	r6, r6
 8005b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b26:	485a      	ldr	r0, [pc, #360]	; (8005c90 <_printf_i+0x23c>)
 8005b28:	230a      	movs	r3, #10
 8005b2a:	e012      	b.n	8005b52 <_printf_i+0xfe>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	6820      	ldr	r0, [r4, #0]
 8005b30:	1d19      	adds	r1, r3, #4
 8005b32:	6029      	str	r1, [r5, #0]
 8005b34:	0605      	lsls	r5, r0, #24
 8005b36:	d501      	bpl.n	8005b3c <_printf_i+0xe8>
 8005b38:	681e      	ldr	r6, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <_printf_i+0xee>
 8005b3c:	0641      	lsls	r1, r0, #25
 8005b3e:	d5fb      	bpl.n	8005b38 <_printf_i+0xe4>
 8005b40:	881e      	ldrh	r6, [r3, #0]
 8005b42:	4853      	ldr	r0, [pc, #332]	; (8005c90 <_printf_i+0x23c>)
 8005b44:	2f6f      	cmp	r7, #111	; 0x6f
 8005b46:	bf0c      	ite	eq
 8005b48:	2308      	moveq	r3, #8
 8005b4a:	230a      	movne	r3, #10
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b52:	6865      	ldr	r5, [r4, #4]
 8005b54:	60a5      	str	r5, [r4, #8]
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	bfa2      	ittt	ge
 8005b5a:	6821      	ldrge	r1, [r4, #0]
 8005b5c:	f021 0104 	bicge.w	r1, r1, #4
 8005b60:	6021      	strge	r1, [r4, #0]
 8005b62:	b90e      	cbnz	r6, 8005b68 <_printf_i+0x114>
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	d04b      	beq.n	8005c00 <_printf_i+0x1ac>
 8005b68:	4615      	mov	r5, r2
 8005b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b72:	5dc7      	ldrb	r7, [r0, r7]
 8005b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b78:	4637      	mov	r7, r6
 8005b7a:	42bb      	cmp	r3, r7
 8005b7c:	460e      	mov	r6, r1
 8005b7e:	d9f4      	bls.n	8005b6a <_printf_i+0x116>
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d10b      	bne.n	8005b9c <_printf_i+0x148>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07de      	lsls	r6, r3, #31
 8005b88:	d508      	bpl.n	8005b9c <_printf_i+0x148>
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	6861      	ldr	r1, [r4, #4]
 8005b8e:	4299      	cmp	r1, r3
 8005b90:	bfde      	ittt	le
 8005b92:	2330      	movle	r3, #48	; 0x30
 8005b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b9c:	1b52      	subs	r2, r2, r5
 8005b9e:	6122      	str	r2, [r4, #16]
 8005ba0:	f8cd a000 	str.w	sl, [sp]
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	aa03      	add	r2, sp, #12
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7ff fee4 	bl	8005978 <_printf_common>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d14a      	bne.n	8005c4a <_printf_i+0x1f6>
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bb8:	b004      	add	sp, #16
 8005bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	f043 0320 	orr.w	r3, r3, #32
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	4833      	ldr	r0, [pc, #204]	; (8005c94 <_printf_i+0x240>)
 8005bc8:	2778      	movs	r7, #120	; 0x78
 8005bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	6829      	ldr	r1, [r5, #0]
 8005bd2:	061f      	lsls	r7, r3, #24
 8005bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bd8:	d402      	bmi.n	8005be0 <_printf_i+0x18c>
 8005bda:	065f      	lsls	r7, r3, #25
 8005bdc:	bf48      	it	mi
 8005bde:	b2b6      	uxthmi	r6, r6
 8005be0:	07df      	lsls	r7, r3, #31
 8005be2:	bf48      	it	mi
 8005be4:	f043 0320 	orrmi.w	r3, r3, #32
 8005be8:	6029      	str	r1, [r5, #0]
 8005bea:	bf48      	it	mi
 8005bec:	6023      	strmi	r3, [r4, #0]
 8005bee:	b91e      	cbnz	r6, 8005bf8 <_printf_i+0x1a4>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	f023 0320 	bic.w	r3, r3, #32
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	e7a7      	b.n	8005b4c <_printf_i+0xf8>
 8005bfc:	4824      	ldr	r0, [pc, #144]	; (8005c90 <_printf_i+0x23c>)
 8005bfe:	e7e4      	b.n	8005bca <_printf_i+0x176>
 8005c00:	4615      	mov	r5, r2
 8005c02:	e7bd      	b.n	8005b80 <_printf_i+0x12c>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	6826      	ldr	r6, [r4, #0]
 8005c08:	6961      	ldr	r1, [r4, #20]
 8005c0a:	1d18      	adds	r0, r3, #4
 8005c0c:	6028      	str	r0, [r5, #0]
 8005c0e:	0635      	lsls	r5, r6, #24
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	d501      	bpl.n	8005c18 <_printf_i+0x1c4>
 8005c14:	6019      	str	r1, [r3, #0]
 8005c16:	e002      	b.n	8005c1e <_printf_i+0x1ca>
 8005c18:	0670      	lsls	r0, r6, #25
 8005c1a:	d5fb      	bpl.n	8005c14 <_printf_i+0x1c0>
 8005c1c:	8019      	strh	r1, [r3, #0]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6123      	str	r3, [r4, #16]
 8005c22:	4615      	mov	r5, r2
 8005c24:	e7bc      	b.n	8005ba0 <_printf_i+0x14c>
 8005c26:	682b      	ldr	r3, [r5, #0]
 8005c28:	1d1a      	adds	r2, r3, #4
 8005c2a:	602a      	str	r2, [r5, #0]
 8005c2c:	681d      	ldr	r5, [r3, #0]
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	2100      	movs	r1, #0
 8005c32:	4628      	mov	r0, r5
 8005c34:	f7fa fadc 	bl	80001f0 <memchr>
 8005c38:	b108      	cbz	r0, 8005c3e <_printf_i+0x1ea>
 8005c3a:	1b40      	subs	r0, r0, r5
 8005c3c:	6060      	str	r0, [r4, #4]
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	2300      	movs	r3, #0
 8005c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c48:	e7aa      	b.n	8005ba0 <_printf_i+0x14c>
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4649      	mov	r1, r9
 8005c50:	4640      	mov	r0, r8
 8005c52:	47d0      	blx	sl
 8005c54:	3001      	adds	r0, #1
 8005c56:	d0ad      	beq.n	8005bb4 <_printf_i+0x160>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	079b      	lsls	r3, r3, #30
 8005c5c:	d413      	bmi.n	8005c86 <_printf_i+0x232>
 8005c5e:	68e0      	ldr	r0, [r4, #12]
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	4298      	cmp	r0, r3
 8005c64:	bfb8      	it	lt
 8005c66:	4618      	movlt	r0, r3
 8005c68:	e7a6      	b.n	8005bb8 <_printf_i+0x164>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4640      	mov	r0, r8
 8005c72:	47d0      	blx	sl
 8005c74:	3001      	adds	r0, #1
 8005c76:	d09d      	beq.n	8005bb4 <_printf_i+0x160>
 8005c78:	3501      	adds	r5, #1
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	9903      	ldr	r1, [sp, #12]
 8005c7e:	1a5b      	subs	r3, r3, r1
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	dcf2      	bgt.n	8005c6a <_printf_i+0x216>
 8005c84:	e7eb      	b.n	8005c5e <_printf_i+0x20a>
 8005c86:	2500      	movs	r5, #0
 8005c88:	f104 0619 	add.w	r6, r4, #25
 8005c8c:	e7f5      	b.n	8005c7a <_printf_i+0x226>
 8005c8e:	bf00      	nop
 8005c90:	080087cb 	.word	0x080087cb
 8005c94:	080087dc 	.word	0x080087dc

08005c98 <__sflush_r>:
 8005c98:	898a      	ldrh	r2, [r1, #12]
 8005c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9e:	4605      	mov	r5, r0
 8005ca0:	0710      	lsls	r0, r2, #28
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	d458      	bmi.n	8005d58 <__sflush_r+0xc0>
 8005ca6:	684b      	ldr	r3, [r1, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc05      	bgt.n	8005cb8 <__sflush_r+0x20>
 8005cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dc02      	bgt.n	8005cb8 <__sflush_r+0x20>
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cba:	2e00      	cmp	r6, #0
 8005cbc:	d0f9      	beq.n	8005cb2 <__sflush_r+0x1a>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cc4:	682f      	ldr	r7, [r5, #0]
 8005cc6:	6a21      	ldr	r1, [r4, #32]
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	d032      	beq.n	8005d32 <__sflush_r+0x9a>
 8005ccc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	075a      	lsls	r2, r3, #29
 8005cd2:	d505      	bpl.n	8005ce0 <__sflush_r+0x48>
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	1ac0      	subs	r0, r0, r3
 8005cd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cda:	b10b      	cbz	r3, 8005ce0 <__sflush_r+0x48>
 8005cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cde:	1ac0      	subs	r0, r0, r3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ce6:	6a21      	ldr	r1, [r4, #32]
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b0      	blx	r6
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	d106      	bne.n	8005d00 <__sflush_r+0x68>
 8005cf2:	6829      	ldr	r1, [r5, #0]
 8005cf4:	291d      	cmp	r1, #29
 8005cf6:	d82b      	bhi.n	8005d50 <__sflush_r+0xb8>
 8005cf8:	4a29      	ldr	r2, [pc, #164]	; (8005da0 <__sflush_r+0x108>)
 8005cfa:	410a      	asrs	r2, r1
 8005cfc:	07d6      	lsls	r6, r2, #31
 8005cfe:	d427      	bmi.n	8005d50 <__sflush_r+0xb8>
 8005d00:	2200      	movs	r2, #0
 8005d02:	6062      	str	r2, [r4, #4]
 8005d04:	04d9      	lsls	r1, r3, #19
 8005d06:	6922      	ldr	r2, [r4, #16]
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	d504      	bpl.n	8005d16 <__sflush_r+0x7e>
 8005d0c:	1c42      	adds	r2, r0, #1
 8005d0e:	d101      	bne.n	8005d14 <__sflush_r+0x7c>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b903      	cbnz	r3, 8005d16 <__sflush_r+0x7e>
 8005d14:	6560      	str	r0, [r4, #84]	; 0x54
 8005d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d18:	602f      	str	r7, [r5, #0]
 8005d1a:	2900      	cmp	r1, #0
 8005d1c:	d0c9      	beq.n	8005cb2 <__sflush_r+0x1a>
 8005d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d22:	4299      	cmp	r1, r3
 8005d24:	d002      	beq.n	8005d2c <__sflush_r+0x94>
 8005d26:	4628      	mov	r0, r5
 8005d28:	f001 f9e0 	bl	80070ec <_free_r>
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d30:	e7c0      	b.n	8005cb4 <__sflush_r+0x1c>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b0      	blx	r6
 8005d38:	1c41      	adds	r1, r0, #1
 8005d3a:	d1c8      	bne.n	8005cce <__sflush_r+0x36>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0c5      	beq.n	8005cce <__sflush_r+0x36>
 8005d42:	2b1d      	cmp	r3, #29
 8005d44:	d001      	beq.n	8005d4a <__sflush_r+0xb2>
 8005d46:	2b16      	cmp	r3, #22
 8005d48:	d101      	bne.n	8005d4e <__sflush_r+0xb6>
 8005d4a:	602f      	str	r7, [r5, #0]
 8005d4c:	e7b1      	b.n	8005cb2 <__sflush_r+0x1a>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	e7ad      	b.n	8005cb4 <__sflush_r+0x1c>
 8005d58:	690f      	ldr	r7, [r1, #16]
 8005d5a:	2f00      	cmp	r7, #0
 8005d5c:	d0a9      	beq.n	8005cb2 <__sflush_r+0x1a>
 8005d5e:	0793      	lsls	r3, r2, #30
 8005d60:	680e      	ldr	r6, [r1, #0]
 8005d62:	bf08      	it	eq
 8005d64:	694b      	ldreq	r3, [r1, #20]
 8005d66:	600f      	str	r7, [r1, #0]
 8005d68:	bf18      	it	ne
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	eba6 0807 	sub.w	r8, r6, r7
 8005d70:	608b      	str	r3, [r1, #8]
 8005d72:	f1b8 0f00 	cmp.w	r8, #0
 8005d76:	dd9c      	ble.n	8005cb2 <__sflush_r+0x1a>
 8005d78:	6a21      	ldr	r1, [r4, #32]
 8005d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d7c:	4643      	mov	r3, r8
 8005d7e:	463a      	mov	r2, r7
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b0      	blx	r6
 8005d84:	2800      	cmp	r0, #0
 8005d86:	dc06      	bgt.n	8005d96 <__sflush_r+0xfe>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d94:	e78e      	b.n	8005cb4 <__sflush_r+0x1c>
 8005d96:	4407      	add	r7, r0
 8005d98:	eba8 0800 	sub.w	r8, r8, r0
 8005d9c:	e7e9      	b.n	8005d72 <__sflush_r+0xda>
 8005d9e:	bf00      	nop
 8005da0:	dfbffffe 	.word	0xdfbffffe

08005da4 <_fflush_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	690b      	ldr	r3, [r1, #16]
 8005da8:	4605      	mov	r5, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	b913      	cbnz	r3, 8005db4 <_fflush_r+0x10>
 8005dae:	2500      	movs	r5, #0
 8005db0:	4628      	mov	r0, r5
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	b118      	cbz	r0, 8005dbe <_fflush_r+0x1a>
 8005db6:	6a03      	ldr	r3, [r0, #32]
 8005db8:	b90b      	cbnz	r3, 8005dbe <_fflush_r+0x1a>
 8005dba:	f000 f8a7 	bl	8005f0c <__sinit>
 8005dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f3      	beq.n	8005dae <_fflush_r+0xa>
 8005dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dc8:	07d0      	lsls	r0, r2, #31
 8005dca:	d404      	bmi.n	8005dd6 <_fflush_r+0x32>
 8005dcc:	0599      	lsls	r1, r3, #22
 8005dce:	d402      	bmi.n	8005dd6 <_fflush_r+0x32>
 8005dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd2:	f000 fafe 	bl	80063d2 <__retarget_lock_acquire_recursive>
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	4621      	mov	r1, r4
 8005dda:	f7ff ff5d 	bl	8005c98 <__sflush_r>
 8005dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005de0:	07da      	lsls	r2, r3, #31
 8005de2:	4605      	mov	r5, r0
 8005de4:	d4e4      	bmi.n	8005db0 <_fflush_r+0xc>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	059b      	lsls	r3, r3, #22
 8005dea:	d4e1      	bmi.n	8005db0 <_fflush_r+0xc>
 8005dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dee:	f000 faf1 	bl	80063d4 <__retarget_lock_release_recursive>
 8005df2:	e7dd      	b.n	8005db0 <_fflush_r+0xc>

08005df4 <std>:
 8005df4:	2300      	movs	r3, #0
 8005df6:	b510      	push	{r4, lr}
 8005df8:	4604      	mov	r4, r0
 8005dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e02:	6083      	str	r3, [r0, #8]
 8005e04:	8181      	strh	r1, [r0, #12]
 8005e06:	6643      	str	r3, [r0, #100]	; 0x64
 8005e08:	81c2      	strh	r2, [r0, #14]
 8005e0a:	6183      	str	r3, [r0, #24]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	2208      	movs	r2, #8
 8005e10:	305c      	adds	r0, #92	; 0x5c
 8005e12:	f000 f9f7 	bl	8006204 <memset>
 8005e16:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <std+0x58>)
 8005e18:	6263      	str	r3, [r4, #36]	; 0x24
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <std+0x5c>)
 8005e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <std+0x60>)
 8005e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <std+0x64>)
 8005e24:	6323      	str	r3, [r4, #48]	; 0x30
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <std+0x68>)
 8005e28:	6224      	str	r4, [r4, #32]
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d006      	beq.n	8005e3c <std+0x48>
 8005e2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e32:	4294      	cmp	r4, r2
 8005e34:	d002      	beq.n	8005e3c <std+0x48>
 8005e36:	33d0      	adds	r3, #208	; 0xd0
 8005e38:	429c      	cmp	r4, r3
 8005e3a:	d105      	bne.n	8005e48 <std+0x54>
 8005e3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e44:	f000 bac4 	b.w	80063d0 <__retarget_lock_init_recursive>
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08006055 	.word	0x08006055
 8005e50:	08006077 	.word	0x08006077
 8005e54:	080060af 	.word	0x080060af
 8005e58:	080060d3 	.word	0x080060d3
 8005e5c:	200048e4 	.word	0x200048e4

08005e60 <stdio_exit_handler>:
 8005e60:	4a02      	ldr	r2, [pc, #8]	; (8005e6c <stdio_exit_handler+0xc>)
 8005e62:	4903      	ldr	r1, [pc, #12]	; (8005e70 <stdio_exit_handler+0x10>)
 8005e64:	4803      	ldr	r0, [pc, #12]	; (8005e74 <stdio_exit_handler+0x14>)
 8005e66:	f000 b869 	b.w	8005f3c <_fwalk_sglue>
 8005e6a:	bf00      	nop
 8005e6c:	200000c8 	.word	0x200000c8
 8005e70:	08005da5 	.word	0x08005da5
 8005e74:	200000d4 	.word	0x200000d4

08005e78 <cleanup_stdio>:
 8005e78:	6841      	ldr	r1, [r0, #4]
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <cleanup_stdio+0x34>)
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	4604      	mov	r4, r0
 8005e82:	d001      	beq.n	8005e88 <cleanup_stdio+0x10>
 8005e84:	f7ff ff8e 	bl	8005da4 <_fflush_r>
 8005e88:	68a1      	ldr	r1, [r4, #8]
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <cleanup_stdio+0x38>)
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	d002      	beq.n	8005e96 <cleanup_stdio+0x1e>
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff ff87 	bl	8005da4 <_fflush_r>
 8005e96:	68e1      	ldr	r1, [r4, #12]
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <cleanup_stdio+0x3c>)
 8005e9a:	4299      	cmp	r1, r3
 8005e9c:	d004      	beq.n	8005ea8 <cleanup_stdio+0x30>
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea4:	f7ff bf7e 	b.w	8005da4 <_fflush_r>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	bf00      	nop
 8005eac:	200048e4 	.word	0x200048e4
 8005eb0:	2000494c 	.word	0x2000494c
 8005eb4:	200049b4 	.word	0x200049b4

08005eb8 <global_stdio_init.part.0>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <global_stdio_init.part.0+0x30>)
 8005ebc:	4c0b      	ldr	r4, [pc, #44]	; (8005eec <global_stdio_init.part.0+0x34>)
 8005ebe:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <global_stdio_init.part.0+0x38>)
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2104      	movs	r1, #4
 8005ec8:	f7ff ff94 	bl	8005df4 <std>
 8005ecc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	2109      	movs	r1, #9
 8005ed4:	f7ff ff8e 	bl	8005df4 <std>
 8005ed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005edc:	2202      	movs	r2, #2
 8005ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee2:	2112      	movs	r1, #18
 8005ee4:	f7ff bf86 	b.w	8005df4 <std>
 8005ee8:	20004a1c 	.word	0x20004a1c
 8005eec:	200048e4 	.word	0x200048e4
 8005ef0:	08005e61 	.word	0x08005e61

08005ef4 <__sfp_lock_acquire>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__sfp_lock_acquire+0x8>)
 8005ef6:	f000 ba6c 	b.w	80063d2 <__retarget_lock_acquire_recursive>
 8005efa:	bf00      	nop
 8005efc:	20004a25 	.word	0x20004a25

08005f00 <__sfp_lock_release>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__sfp_lock_release+0x8>)
 8005f02:	f000 ba67 	b.w	80063d4 <__retarget_lock_release_recursive>
 8005f06:	bf00      	nop
 8005f08:	20004a25 	.word	0x20004a25

08005f0c <__sinit>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	4604      	mov	r4, r0
 8005f10:	f7ff fff0 	bl	8005ef4 <__sfp_lock_acquire>
 8005f14:	6a23      	ldr	r3, [r4, #32]
 8005f16:	b11b      	cbz	r3, 8005f20 <__sinit+0x14>
 8005f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f1c:	f7ff bff0 	b.w	8005f00 <__sfp_lock_release>
 8005f20:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <__sinit+0x28>)
 8005f22:	6223      	str	r3, [r4, #32]
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <__sinit+0x2c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f5      	bne.n	8005f18 <__sinit+0xc>
 8005f2c:	f7ff ffc4 	bl	8005eb8 <global_stdio_init.part.0>
 8005f30:	e7f2      	b.n	8005f18 <__sinit+0xc>
 8005f32:	bf00      	nop
 8005f34:	08005e79 	.word	0x08005e79
 8005f38:	20004a1c 	.word	0x20004a1c

08005f3c <_fwalk_sglue>:
 8005f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f40:	4607      	mov	r7, r0
 8005f42:	4688      	mov	r8, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	2600      	movs	r6, #0
 8005f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f50:	d505      	bpl.n	8005f5e <_fwalk_sglue+0x22>
 8005f52:	6824      	ldr	r4, [r4, #0]
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	d1f7      	bne.n	8005f48 <_fwalk_sglue+0xc>
 8005f58:	4630      	mov	r0, r6
 8005f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5e:	89ab      	ldrh	r3, [r5, #12]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d907      	bls.n	8005f74 <_fwalk_sglue+0x38>
 8005f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	d003      	beq.n	8005f74 <_fwalk_sglue+0x38>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4638      	mov	r0, r7
 8005f70:	47c0      	blx	r8
 8005f72:	4306      	orrs	r6, r0
 8005f74:	3568      	adds	r5, #104	; 0x68
 8005f76:	e7e9      	b.n	8005f4c <_fwalk_sglue+0x10>

08005f78 <iprintf>:
 8005f78:	b40f      	push	{r0, r1, r2, r3}
 8005f7a:	b507      	push	{r0, r1, r2, lr}
 8005f7c:	4906      	ldr	r1, [pc, #24]	; (8005f98 <iprintf+0x20>)
 8005f7e:	ab04      	add	r3, sp, #16
 8005f80:	6808      	ldr	r0, [r1, #0]
 8005f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f86:	6881      	ldr	r1, [r0, #8]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	f001 fd55 	bl	8007a38 <_vfiprintf_r>
 8005f8e:	b003      	add	sp, #12
 8005f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f94:	b004      	add	sp, #16
 8005f96:	4770      	bx	lr
 8005f98:	20000120 	.word	0x20000120

08005f9c <_puts_r>:
 8005f9c:	6a03      	ldr	r3, [r0, #32]
 8005f9e:	b570      	push	{r4, r5, r6, lr}
 8005fa0:	6884      	ldr	r4, [r0, #8]
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	b90b      	cbnz	r3, 8005fac <_puts_r+0x10>
 8005fa8:	f7ff ffb0 	bl	8005f0c <__sinit>
 8005fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d405      	bmi.n	8005fbe <_puts_r+0x22>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	0598      	lsls	r0, r3, #22
 8005fb6:	d402      	bmi.n	8005fbe <_puts_r+0x22>
 8005fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fba:	f000 fa0a 	bl	80063d2 <__retarget_lock_acquire_recursive>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	0719      	lsls	r1, r3, #28
 8005fc2:	d513      	bpl.n	8005fec <_puts_r+0x50>
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	b18b      	cbz	r3, 8005fec <_puts_r+0x50>
 8005fc8:	3e01      	subs	r6, #1
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	60a3      	str	r3, [r4, #8]
 8005fd4:	b9e9      	cbnz	r1, 8006012 <_puts_r+0x76>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da2e      	bge.n	8006038 <_puts_r+0x9c>
 8005fda:	4622      	mov	r2, r4
 8005fdc:	210a      	movs	r1, #10
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f87b 	bl	80060da <__swbuf_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d007      	beq.n	8005ff8 <_puts_r+0x5c>
 8005fe8:	250a      	movs	r5, #10
 8005fea:	e007      	b.n	8005ffc <_puts_r+0x60>
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f8b0 	bl	8006154 <__swsetup_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0e7      	beq.n	8005fc8 <_puts_r+0x2c>
 8005ff8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ffe:	07da      	lsls	r2, r3, #31
 8006000:	d405      	bmi.n	800600e <_puts_r+0x72>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	d402      	bmi.n	800600e <_puts_r+0x72>
 8006008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800600a:	f000 f9e3 	bl	80063d4 <__retarget_lock_release_recursive>
 800600e:	4628      	mov	r0, r5
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	2b00      	cmp	r3, #0
 8006014:	da04      	bge.n	8006020 <_puts_r+0x84>
 8006016:	69a2      	ldr	r2, [r4, #24]
 8006018:	429a      	cmp	r2, r3
 800601a:	dc06      	bgt.n	800602a <_puts_r+0x8e>
 800601c:	290a      	cmp	r1, #10
 800601e:	d004      	beq.n	800602a <_puts_r+0x8e>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	7019      	strb	r1, [r3, #0]
 8006028:	e7cf      	b.n	8005fca <_puts_r+0x2e>
 800602a:	4622      	mov	r2, r4
 800602c:	4628      	mov	r0, r5
 800602e:	f000 f854 	bl	80060da <__swbuf_r>
 8006032:	3001      	adds	r0, #1
 8006034:	d1c9      	bne.n	8005fca <_puts_r+0x2e>
 8006036:	e7df      	b.n	8005ff8 <_puts_r+0x5c>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	250a      	movs	r5, #10
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	6022      	str	r2, [r4, #0]
 8006040:	701d      	strb	r5, [r3, #0]
 8006042:	e7db      	b.n	8005ffc <_puts_r+0x60>

08006044 <puts>:
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <puts+0xc>)
 8006046:	4601      	mov	r1, r0
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f7ff bfa7 	b.w	8005f9c <_puts_r>
 800604e:	bf00      	nop
 8006050:	20000120 	.word	0x20000120

08006054 <__sread>:
 8006054:	b510      	push	{r4, lr}
 8006056:	460c      	mov	r4, r1
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	f000 f96a 	bl	8006334 <_read_r>
 8006060:	2800      	cmp	r0, #0
 8006062:	bfab      	itete	ge
 8006064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006066:	89a3      	ldrhlt	r3, [r4, #12]
 8006068:	181b      	addge	r3, r3, r0
 800606a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800606e:	bfac      	ite	ge
 8006070:	6563      	strge	r3, [r4, #84]	; 0x54
 8006072:	81a3      	strhlt	r3, [r4, #12]
 8006074:	bd10      	pop	{r4, pc}

08006076 <__swrite>:
 8006076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607a:	461f      	mov	r7, r3
 800607c:	898b      	ldrh	r3, [r1, #12]
 800607e:	05db      	lsls	r3, r3, #23
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	4616      	mov	r6, r2
 8006086:	d505      	bpl.n	8006094 <__swrite+0x1e>
 8006088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608c:	2302      	movs	r3, #2
 800608e:	2200      	movs	r2, #0
 8006090:	f000 f93e 	bl	8006310 <_lseek_r>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800609a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	4632      	mov	r2, r6
 80060a2:	463b      	mov	r3, r7
 80060a4:	4628      	mov	r0, r5
 80060a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060aa:	f000 b955 	b.w	8006358 <_write_r>

080060ae <__sseek>:
 80060ae:	b510      	push	{r4, lr}
 80060b0:	460c      	mov	r4, r1
 80060b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b6:	f000 f92b 	bl	8006310 <_lseek_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	bf15      	itete	ne
 80060c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ca:	81a3      	strheq	r3, [r4, #12]
 80060cc:	bf18      	it	ne
 80060ce:	81a3      	strhne	r3, [r4, #12]
 80060d0:	bd10      	pop	{r4, pc}

080060d2 <__sclose>:
 80060d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d6:	f000 b8b5 	b.w	8006244 <_close_r>

080060da <__swbuf_r>:
 80060da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060dc:	460e      	mov	r6, r1
 80060de:	4614      	mov	r4, r2
 80060e0:	4605      	mov	r5, r0
 80060e2:	b118      	cbz	r0, 80060ec <__swbuf_r+0x12>
 80060e4:	6a03      	ldr	r3, [r0, #32]
 80060e6:	b90b      	cbnz	r3, 80060ec <__swbuf_r+0x12>
 80060e8:	f7ff ff10 	bl	8005f0c <__sinit>
 80060ec:	69a3      	ldr	r3, [r4, #24]
 80060ee:	60a3      	str	r3, [r4, #8]
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	071a      	lsls	r2, r3, #28
 80060f4:	d525      	bpl.n	8006142 <__swbuf_r+0x68>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	b31b      	cbz	r3, 8006142 <__swbuf_r+0x68>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	6922      	ldr	r2, [r4, #16]
 80060fe:	1a98      	subs	r0, r3, r2
 8006100:	6963      	ldr	r3, [r4, #20]
 8006102:	b2f6      	uxtb	r6, r6
 8006104:	4283      	cmp	r3, r0
 8006106:	4637      	mov	r7, r6
 8006108:	dc04      	bgt.n	8006114 <__swbuf_r+0x3a>
 800610a:	4621      	mov	r1, r4
 800610c:	4628      	mov	r0, r5
 800610e:	f7ff fe49 	bl	8005da4 <_fflush_r>
 8006112:	b9e0      	cbnz	r0, 800614e <__swbuf_r+0x74>
 8006114:	68a3      	ldr	r3, [r4, #8]
 8006116:	3b01      	subs	r3, #1
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	6022      	str	r2, [r4, #0]
 8006120:	701e      	strb	r6, [r3, #0]
 8006122:	6962      	ldr	r2, [r4, #20]
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	d004      	beq.n	8006134 <__swbuf_r+0x5a>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	07db      	lsls	r3, r3, #31
 800612e:	d506      	bpl.n	800613e <__swbuf_r+0x64>
 8006130:	2e0a      	cmp	r6, #10
 8006132:	d104      	bne.n	800613e <__swbuf_r+0x64>
 8006134:	4621      	mov	r1, r4
 8006136:	4628      	mov	r0, r5
 8006138:	f7ff fe34 	bl	8005da4 <_fflush_r>
 800613c:	b938      	cbnz	r0, 800614e <__swbuf_r+0x74>
 800613e:	4638      	mov	r0, r7
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f805 	bl	8006154 <__swsetup_r>
 800614a:	2800      	cmp	r0, #0
 800614c:	d0d5      	beq.n	80060fa <__swbuf_r+0x20>
 800614e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006152:	e7f4      	b.n	800613e <__swbuf_r+0x64>

08006154 <__swsetup_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <__swsetup_r+0xac>)
 8006158:	4605      	mov	r5, r0
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	460c      	mov	r4, r1
 800615e:	b118      	cbz	r0, 8006168 <__swsetup_r+0x14>
 8006160:	6a03      	ldr	r3, [r0, #32]
 8006162:	b90b      	cbnz	r3, 8006168 <__swsetup_r+0x14>
 8006164:	f7ff fed2 	bl	8005f0c <__sinit>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800616e:	0718      	lsls	r0, r3, #28
 8006170:	d422      	bmi.n	80061b8 <__swsetup_r+0x64>
 8006172:	06d9      	lsls	r1, r3, #27
 8006174:	d407      	bmi.n	8006186 <__swsetup_r+0x32>
 8006176:	2309      	movs	r3, #9
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006184:	e034      	b.n	80061f0 <__swsetup_r+0x9c>
 8006186:	0758      	lsls	r0, r3, #29
 8006188:	d512      	bpl.n	80061b0 <__swsetup_r+0x5c>
 800618a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800618c:	b141      	cbz	r1, 80061a0 <__swsetup_r+0x4c>
 800618e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006192:	4299      	cmp	r1, r3
 8006194:	d002      	beq.n	800619c <__swsetup_r+0x48>
 8006196:	4628      	mov	r0, r5
 8006198:	f000 ffa8 	bl	80070ec <_free_r>
 800619c:	2300      	movs	r3, #0
 800619e:	6363      	str	r3, [r4, #52]	; 0x34
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	2300      	movs	r3, #0
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f043 0308 	orr.w	r3, r3, #8
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	b94b      	cbnz	r3, 80061d0 <__swsetup_r+0x7c>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c6:	d003      	beq.n	80061d0 <__swsetup_r+0x7c>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f001 fd74 	bl	8007cb8 <__smakebuf_r>
 80061d0:	89a0      	ldrh	r0, [r4, #12]
 80061d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061d6:	f010 0301 	ands.w	r3, r0, #1
 80061da:	d00a      	beq.n	80061f2 <__swsetup_r+0x9e>
 80061dc:	2300      	movs	r3, #0
 80061de:	60a3      	str	r3, [r4, #8]
 80061e0:	6963      	ldr	r3, [r4, #20]
 80061e2:	425b      	negs	r3, r3
 80061e4:	61a3      	str	r3, [r4, #24]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	b943      	cbnz	r3, 80061fc <__swsetup_r+0xa8>
 80061ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061ee:	d1c4      	bne.n	800617a <__swsetup_r+0x26>
 80061f0:	bd38      	pop	{r3, r4, r5, pc}
 80061f2:	0781      	lsls	r1, r0, #30
 80061f4:	bf58      	it	pl
 80061f6:	6963      	ldrpl	r3, [r4, #20]
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	e7f4      	b.n	80061e6 <__swsetup_r+0x92>
 80061fc:	2000      	movs	r0, #0
 80061fe:	e7f7      	b.n	80061f0 <__swsetup_r+0x9c>
 8006200:	20000120 	.word	0x20000120

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <strncpy>:
 8006214:	b510      	push	{r4, lr}
 8006216:	3901      	subs	r1, #1
 8006218:	4603      	mov	r3, r0
 800621a:	b132      	cbz	r2, 800622a <strncpy+0x16>
 800621c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006220:	f803 4b01 	strb.w	r4, [r3], #1
 8006224:	3a01      	subs	r2, #1
 8006226:	2c00      	cmp	r4, #0
 8006228:	d1f7      	bne.n	800621a <strncpy+0x6>
 800622a:	441a      	add	r2, r3
 800622c:	2100      	movs	r1, #0
 800622e:	4293      	cmp	r3, r2
 8006230:	d100      	bne.n	8006234 <strncpy+0x20>
 8006232:	bd10      	pop	{r4, pc}
 8006234:	f803 1b01 	strb.w	r1, [r3], #1
 8006238:	e7f9      	b.n	800622e <strncpy+0x1a>
	...

0800623c <_localeconv_r>:
 800623c:	4800      	ldr	r0, [pc, #0]	; (8006240 <_localeconv_r+0x4>)
 800623e:	4770      	bx	lr
 8006240:	20000214 	.word	0x20000214

08006244 <_close_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d06      	ldr	r5, [pc, #24]	; (8006260 <_close_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fb fd17 	bl	8001c82 <_close>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_close_r+0x1a>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_close_r+0x1a>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20004a20 	.word	0x20004a20

08006264 <_reclaim_reent>:
 8006264:	4b29      	ldr	r3, [pc, #164]	; (800630c <_reclaim_reent+0xa8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4283      	cmp	r3, r0
 800626a:	b570      	push	{r4, r5, r6, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	d04b      	beq.n	8006308 <_reclaim_reent+0xa4>
 8006270:	69c3      	ldr	r3, [r0, #28]
 8006272:	b143      	cbz	r3, 8006286 <_reclaim_reent+0x22>
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d144      	bne.n	8006304 <_reclaim_reent+0xa0>
 800627a:	69e3      	ldr	r3, [r4, #28]
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	b111      	cbz	r1, 8006286 <_reclaim_reent+0x22>
 8006280:	4620      	mov	r0, r4
 8006282:	f000 ff33 	bl	80070ec <_free_r>
 8006286:	6961      	ldr	r1, [r4, #20]
 8006288:	b111      	cbz	r1, 8006290 <_reclaim_reent+0x2c>
 800628a:	4620      	mov	r0, r4
 800628c:	f000 ff2e 	bl	80070ec <_free_r>
 8006290:	69e1      	ldr	r1, [r4, #28]
 8006292:	b111      	cbz	r1, 800629a <_reclaim_reent+0x36>
 8006294:	4620      	mov	r0, r4
 8006296:	f000 ff29 	bl	80070ec <_free_r>
 800629a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800629c:	b111      	cbz	r1, 80062a4 <_reclaim_reent+0x40>
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 ff24 	bl	80070ec <_free_r>
 80062a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a6:	b111      	cbz	r1, 80062ae <_reclaim_reent+0x4a>
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 ff1f 	bl	80070ec <_free_r>
 80062ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062b0:	b111      	cbz	r1, 80062b8 <_reclaim_reent+0x54>
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 ff1a 	bl	80070ec <_free_r>
 80062b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062ba:	b111      	cbz	r1, 80062c2 <_reclaim_reent+0x5e>
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 ff15 	bl	80070ec <_free_r>
 80062c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80062c4:	b111      	cbz	r1, 80062cc <_reclaim_reent+0x68>
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 ff10 	bl	80070ec <_free_r>
 80062cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062ce:	b111      	cbz	r1, 80062d6 <_reclaim_reent+0x72>
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 ff0b 	bl	80070ec <_free_r>
 80062d6:	6a23      	ldr	r3, [r4, #32]
 80062d8:	b1b3      	cbz	r3, 8006308 <_reclaim_reent+0xa4>
 80062da:	4620      	mov	r0, r4
 80062dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062e0:	4718      	bx	r3
 80062e2:	5949      	ldr	r1, [r1, r5]
 80062e4:	b941      	cbnz	r1, 80062f8 <_reclaim_reent+0x94>
 80062e6:	3504      	adds	r5, #4
 80062e8:	69e3      	ldr	r3, [r4, #28]
 80062ea:	2d80      	cmp	r5, #128	; 0x80
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	d1f8      	bne.n	80062e2 <_reclaim_reent+0x7e>
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fefb 	bl	80070ec <_free_r>
 80062f6:	e7c0      	b.n	800627a <_reclaim_reent+0x16>
 80062f8:	680e      	ldr	r6, [r1, #0]
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fef6 	bl	80070ec <_free_r>
 8006300:	4631      	mov	r1, r6
 8006302:	e7ef      	b.n	80062e4 <_reclaim_reent+0x80>
 8006304:	2500      	movs	r5, #0
 8006306:	e7ef      	b.n	80062e8 <_reclaim_reent+0x84>
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	bf00      	nop
 800630c:	20000120 	.word	0x20000120

08006310 <_lseek_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	; (8006330 <_lseek_r+0x20>)
 8006314:	4604      	mov	r4, r0
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	2200      	movs	r2, #0
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f7fb fcd6 	bl	8001cd0 <_lseek>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_lseek_r+0x1e>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_lseek_r+0x1e>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	20004a20 	.word	0x20004a20

08006334 <_read_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d07      	ldr	r5, [pc, #28]	; (8006354 <_read_r+0x20>)
 8006338:	4604      	mov	r4, r0
 800633a:	4608      	mov	r0, r1
 800633c:	4611      	mov	r1, r2
 800633e:	2200      	movs	r2, #0
 8006340:	602a      	str	r2, [r5, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f7fb fc80 	bl	8001c48 <_read>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_read_r+0x1e>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_read_r+0x1e>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20004a20 	.word	0x20004a20

08006358 <_write_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d07      	ldr	r5, [pc, #28]	; (8006378 <_write_r+0x20>)
 800635c:	4604      	mov	r4, r0
 800635e:	4608      	mov	r0, r1
 8006360:	4611      	mov	r1, r2
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f7fb f874 	bl	8001454 <_write>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_write_r+0x1e>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_write_r+0x1e>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20004a20 	.word	0x20004a20

0800637c <__errno>:
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <__errno+0x8>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000120 	.word	0x20000120

08006388 <__libc_init_array>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4d0d      	ldr	r5, [pc, #52]	; (80063c0 <__libc_init_array+0x38>)
 800638c:	4c0d      	ldr	r4, [pc, #52]	; (80063c4 <__libc_init_array+0x3c>)
 800638e:	1b64      	subs	r4, r4, r5
 8006390:	10a4      	asrs	r4, r4, #2
 8006392:	2600      	movs	r6, #0
 8006394:	42a6      	cmp	r6, r4
 8006396:	d109      	bne.n	80063ac <__libc_init_array+0x24>
 8006398:	4d0b      	ldr	r5, [pc, #44]	; (80063c8 <__libc_init_array+0x40>)
 800639a:	4c0c      	ldr	r4, [pc, #48]	; (80063cc <__libc_init_array+0x44>)
 800639c:	f001 fdac 	bl	8007ef8 <_init>
 80063a0:	1b64      	subs	r4, r4, r5
 80063a2:	10a4      	asrs	r4, r4, #2
 80063a4:	2600      	movs	r6, #0
 80063a6:	42a6      	cmp	r6, r4
 80063a8:	d105      	bne.n	80063b6 <__libc_init_array+0x2e>
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b0:	4798      	blx	r3
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7ee      	b.n	8006394 <__libc_init_array+0xc>
 80063b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ba:	4798      	blx	r3
 80063bc:	3601      	adds	r6, #1
 80063be:	e7f2      	b.n	80063a6 <__libc_init_array+0x1e>
 80063c0:	08008a34 	.word	0x08008a34
 80063c4:	08008a34 	.word	0x08008a34
 80063c8:	08008a34 	.word	0x08008a34
 80063cc:	08008a38 	.word	0x08008a38

080063d0 <__retarget_lock_init_recursive>:
 80063d0:	4770      	bx	lr

080063d2 <__retarget_lock_acquire_recursive>:
 80063d2:	4770      	bx	lr

080063d4 <__retarget_lock_release_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <memcpy>:
 80063d6:	440a      	add	r2, r1
 80063d8:	4291      	cmp	r1, r2
 80063da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063de:	d100      	bne.n	80063e2 <memcpy+0xc>
 80063e0:	4770      	bx	lr
 80063e2:	b510      	push	{r4, lr}
 80063e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ec:	4291      	cmp	r1, r2
 80063ee:	d1f9      	bne.n	80063e4 <memcpy+0xe>
 80063f0:	bd10      	pop	{r4, pc}

080063f2 <quorem>:
 80063f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f6:	6903      	ldr	r3, [r0, #16]
 80063f8:	690c      	ldr	r4, [r1, #16]
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	4607      	mov	r7, r0
 80063fe:	db7e      	blt.n	80064fe <quorem+0x10c>
 8006400:	3c01      	subs	r4, #1
 8006402:	f101 0814 	add.w	r8, r1, #20
 8006406:	f100 0514 	add.w	r5, r0, #20
 800640a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	3301      	adds	r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006424:	fbb2 f6f3 	udiv	r6, r2, r3
 8006428:	d331      	bcc.n	800648e <quorem+0x9c>
 800642a:	f04f 0e00 	mov.w	lr, #0
 800642e:	4640      	mov	r0, r8
 8006430:	46ac      	mov	ip, r5
 8006432:	46f2      	mov	sl, lr
 8006434:	f850 2b04 	ldr.w	r2, [r0], #4
 8006438:	b293      	uxth	r3, r2
 800643a:	fb06 e303 	mla	r3, r6, r3, lr
 800643e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006442:	0c1a      	lsrs	r2, r3, #16
 8006444:	b29b      	uxth	r3, r3
 8006446:	ebaa 0303 	sub.w	r3, sl, r3
 800644a:	f8dc a000 	ldr.w	sl, [ip]
 800644e:	fa13 f38a 	uxtah	r3, r3, sl
 8006452:	fb06 220e 	mla	r2, r6, lr, r2
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	9b00      	ldr	r3, [sp, #0]
 800645a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800645e:	b292      	uxth	r2, r2
 8006460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006468:	f8bd 3000 	ldrh.w	r3, [sp]
 800646c:	4581      	cmp	r9, r0
 800646e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006472:	f84c 3b04 	str.w	r3, [ip], #4
 8006476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800647a:	d2db      	bcs.n	8006434 <quorem+0x42>
 800647c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006480:	b92b      	cbnz	r3, 800648e <quorem+0x9c>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	3b04      	subs	r3, #4
 8006486:	429d      	cmp	r5, r3
 8006488:	461a      	mov	r2, r3
 800648a:	d32c      	bcc.n	80064e6 <quorem+0xf4>
 800648c:	613c      	str	r4, [r7, #16]
 800648e:	4638      	mov	r0, r7
 8006490:	f001 f9a8 	bl	80077e4 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	db22      	blt.n	80064de <quorem+0xec>
 8006498:	3601      	adds	r6, #1
 800649a:	4629      	mov	r1, r5
 800649c:	2000      	movs	r0, #0
 800649e:	f858 2b04 	ldr.w	r2, [r8], #4
 80064a2:	f8d1 c000 	ldr.w	ip, [r1]
 80064a6:	b293      	uxth	r3, r2
 80064a8:	1ac3      	subs	r3, r0, r3
 80064aa:	0c12      	lsrs	r2, r2, #16
 80064ac:	fa13 f38c 	uxtah	r3, r3, ip
 80064b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80064b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064be:	45c1      	cmp	r9, r8
 80064c0:	f841 3b04 	str.w	r3, [r1], #4
 80064c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064c8:	d2e9      	bcs.n	800649e <quorem+0xac>
 80064ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064d2:	b922      	cbnz	r2, 80064de <quorem+0xec>
 80064d4:	3b04      	subs	r3, #4
 80064d6:	429d      	cmp	r5, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	d30a      	bcc.n	80064f2 <quorem+0x100>
 80064dc:	613c      	str	r4, [r7, #16]
 80064de:	4630      	mov	r0, r6
 80064e0:	b003      	add	sp, #12
 80064e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d1ce      	bne.n	800648c <quorem+0x9a>
 80064ee:	3c01      	subs	r4, #1
 80064f0:	e7c9      	b.n	8006486 <quorem+0x94>
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d1f0      	bne.n	80064dc <quorem+0xea>
 80064fa:	3c01      	subs	r4, #1
 80064fc:	e7eb      	b.n	80064d6 <quorem+0xe4>
 80064fe:	2000      	movs	r0, #0
 8006500:	e7ee      	b.n	80064e0 <quorem+0xee>
 8006502:	0000      	movs	r0, r0
 8006504:	0000      	movs	r0, r0
	...

08006508 <_dtoa_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b04 	vpush	{d8-d9}
 8006510:	69c5      	ldr	r5, [r0, #28]
 8006512:	b093      	sub	sp, #76	; 0x4c
 8006514:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006518:	ec57 6b10 	vmov	r6, r7, d0
 800651c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006520:	9107      	str	r1, [sp, #28]
 8006522:	4604      	mov	r4, r0
 8006524:	920a      	str	r2, [sp, #40]	; 0x28
 8006526:	930d      	str	r3, [sp, #52]	; 0x34
 8006528:	b975      	cbnz	r5, 8006548 <_dtoa_r+0x40>
 800652a:	2010      	movs	r0, #16
 800652c:	f000 fe2a 	bl	8007184 <malloc>
 8006530:	4602      	mov	r2, r0
 8006532:	61e0      	str	r0, [r4, #28]
 8006534:	b920      	cbnz	r0, 8006540 <_dtoa_r+0x38>
 8006536:	4bae      	ldr	r3, [pc, #696]	; (80067f0 <_dtoa_r+0x2e8>)
 8006538:	21ef      	movs	r1, #239	; 0xef
 800653a:	48ae      	ldr	r0, [pc, #696]	; (80067f4 <_dtoa_r+0x2ec>)
 800653c:	f001 fc2a 	bl	8007d94 <__assert_func>
 8006540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006544:	6005      	str	r5, [r0, #0]
 8006546:	60c5      	str	r5, [r0, #12]
 8006548:	69e3      	ldr	r3, [r4, #28]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	b151      	cbz	r1, 8006564 <_dtoa_r+0x5c>
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	604a      	str	r2, [r1, #4]
 8006552:	2301      	movs	r3, #1
 8006554:	4093      	lsls	r3, r2
 8006556:	608b      	str	r3, [r1, #8]
 8006558:	4620      	mov	r0, r4
 800655a:	f000 ff07 	bl	800736c <_Bfree>
 800655e:	69e3      	ldr	r3, [r4, #28]
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	1e3b      	subs	r3, r7, #0
 8006566:	bfbb      	ittet	lt
 8006568:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800656c:	9303      	strlt	r3, [sp, #12]
 800656e:	2300      	movge	r3, #0
 8006570:	2201      	movlt	r2, #1
 8006572:	bfac      	ite	ge
 8006574:	f8c8 3000 	strge.w	r3, [r8]
 8006578:	f8c8 2000 	strlt.w	r2, [r8]
 800657c:	4b9e      	ldr	r3, [pc, #632]	; (80067f8 <_dtoa_r+0x2f0>)
 800657e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006582:	ea33 0308 	bics.w	r3, r3, r8
 8006586:	d11b      	bne.n	80065c0 <_dtoa_r+0xb8>
 8006588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800658a:	f242 730f 	movw	r3, #9999	; 0x270f
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006594:	4333      	orrs	r3, r6
 8006596:	f000 8593 	beq.w	80070c0 <_dtoa_r+0xbb8>
 800659a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800659c:	b963      	cbnz	r3, 80065b8 <_dtoa_r+0xb0>
 800659e:	4b97      	ldr	r3, [pc, #604]	; (80067fc <_dtoa_r+0x2f4>)
 80065a0:	e027      	b.n	80065f2 <_dtoa_r+0xea>
 80065a2:	4b97      	ldr	r3, [pc, #604]	; (8006800 <_dtoa_r+0x2f8>)
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	9800      	ldr	r0, [sp, #0]
 80065ae:	b013      	add	sp, #76	; 0x4c
 80065b0:	ecbd 8b04 	vpop	{d8-d9}
 80065b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b8:	4b90      	ldr	r3, [pc, #576]	; (80067fc <_dtoa_r+0x2f4>)
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	3303      	adds	r3, #3
 80065be:	e7f3      	b.n	80065a8 <_dtoa_r+0xa0>
 80065c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065c4:	2200      	movs	r2, #0
 80065c6:	ec51 0b17 	vmov	r0, r1, d7
 80065ca:	eeb0 8a47 	vmov.f32	s16, s14
 80065ce:	eef0 8a67 	vmov.f32	s17, s15
 80065d2:	2300      	movs	r3, #0
 80065d4:	f7fa fa88 	bl	8000ae8 <__aeabi_dcmpeq>
 80065d8:	4681      	mov	r9, r0
 80065da:	b160      	cbz	r0, 80065f6 <_dtoa_r+0xee>
 80065dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065de:	2301      	movs	r3, #1
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8568 	beq.w	80070ba <_dtoa_r+0xbb2>
 80065ea:	4b86      	ldr	r3, [pc, #536]	; (8006804 <_dtoa_r+0x2fc>)
 80065ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	e7da      	b.n	80065ac <_dtoa_r+0xa4>
 80065f6:	aa10      	add	r2, sp, #64	; 0x40
 80065f8:	a911      	add	r1, sp, #68	; 0x44
 80065fa:	4620      	mov	r0, r4
 80065fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006600:	eef0 0a68 	vmov.f32	s1, s17
 8006604:	f001 f994 	bl	8007930 <__d2b>
 8006608:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800660c:	4682      	mov	sl, r0
 800660e:	2d00      	cmp	r5, #0
 8006610:	d07f      	beq.n	8006712 <_dtoa_r+0x20a>
 8006612:	ee18 3a90 	vmov	r3, s17
 8006616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800661a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800661e:	ec51 0b18 	vmov	r0, r1, d8
 8006622:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800662a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800662e:	4619      	mov	r1, r3
 8006630:	2200      	movs	r2, #0
 8006632:	4b75      	ldr	r3, [pc, #468]	; (8006808 <_dtoa_r+0x300>)
 8006634:	f7f9 fe38 	bl	80002a8 <__aeabi_dsub>
 8006638:	a367      	add	r3, pc, #412	; (adr r3, 80067d8 <_dtoa_r+0x2d0>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 ffeb 	bl	8000618 <__aeabi_dmul>
 8006642:	a367      	add	r3, pc, #412	; (adr r3, 80067e0 <_dtoa_r+0x2d8>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 fe30 	bl	80002ac <__adddf3>
 800664c:	4606      	mov	r6, r0
 800664e:	4628      	mov	r0, r5
 8006650:	460f      	mov	r7, r1
 8006652:	f7f9 ff77 	bl	8000544 <__aeabi_i2d>
 8006656:	a364      	add	r3, pc, #400	; (adr r3, 80067e8 <_dtoa_r+0x2e0>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	f7f9 ffdc 	bl	8000618 <__aeabi_dmul>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4630      	mov	r0, r6
 8006666:	4639      	mov	r1, r7
 8006668:	f7f9 fe20 	bl	80002ac <__adddf3>
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	f7fa fa82 	bl	8000b78 <__aeabi_d2iz>
 8006674:	2200      	movs	r2, #0
 8006676:	4683      	mov	fp, r0
 8006678:	2300      	movs	r3, #0
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	f7fa fa3d 	bl	8000afc <__aeabi_dcmplt>
 8006682:	b148      	cbz	r0, 8006698 <_dtoa_r+0x190>
 8006684:	4658      	mov	r0, fp
 8006686:	f7f9 ff5d 	bl	8000544 <__aeabi_i2d>
 800668a:	4632      	mov	r2, r6
 800668c:	463b      	mov	r3, r7
 800668e:	f7fa fa2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006692:	b908      	cbnz	r0, 8006698 <_dtoa_r+0x190>
 8006694:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006698:	f1bb 0f16 	cmp.w	fp, #22
 800669c:	d857      	bhi.n	800674e <_dtoa_r+0x246>
 800669e:	4b5b      	ldr	r3, [pc, #364]	; (800680c <_dtoa_r+0x304>)
 80066a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	ec51 0b18 	vmov	r0, r1, d8
 80066ac:	f7fa fa26 	bl	8000afc <__aeabi_dcmplt>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d04e      	beq.n	8006752 <_dtoa_r+0x24a>
 80066b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80066b8:	2300      	movs	r3, #0
 80066ba:	930c      	str	r3, [sp, #48]	; 0x30
 80066bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066be:	1b5b      	subs	r3, r3, r5
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	bf45      	ittet	mi
 80066c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80066c8:	9305      	strmi	r3, [sp, #20]
 80066ca:	2300      	movpl	r3, #0
 80066cc:	2300      	movmi	r3, #0
 80066ce:	9206      	str	r2, [sp, #24]
 80066d0:	bf54      	ite	pl
 80066d2:	9305      	strpl	r3, [sp, #20]
 80066d4:	9306      	strmi	r3, [sp, #24]
 80066d6:	f1bb 0f00 	cmp.w	fp, #0
 80066da:	db3c      	blt.n	8006756 <_dtoa_r+0x24e>
 80066dc:	9b06      	ldr	r3, [sp, #24]
 80066de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066e2:	445b      	add	r3, fp
 80066e4:	9306      	str	r3, [sp, #24]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d868      	bhi.n	80067c2 <_dtoa_r+0x2ba>
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	bfc4      	itt	gt
 80066f4:	3b04      	subgt	r3, #4
 80066f6:	9307      	strgt	r3, [sp, #28]
 80066f8:	9b07      	ldr	r3, [sp, #28]
 80066fa:	f1a3 0302 	sub.w	r3, r3, #2
 80066fe:	bfcc      	ite	gt
 8006700:	2500      	movgt	r5, #0
 8006702:	2501      	movle	r5, #1
 8006704:	2b03      	cmp	r3, #3
 8006706:	f200 8085 	bhi.w	8006814 <_dtoa_r+0x30c>
 800670a:	e8df f003 	tbb	[pc, r3]
 800670e:	3b2e      	.short	0x3b2e
 8006710:	5839      	.short	0x5839
 8006712:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006716:	441d      	add	r5, r3
 8006718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800671c:	2b20      	cmp	r3, #32
 800671e:	bfc1      	itttt	gt
 8006720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006724:	fa08 f803 	lslgt.w	r8, r8, r3
 8006728:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800672c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006730:	bfd6      	itet	le
 8006732:	f1c3 0320 	rsble	r3, r3, #32
 8006736:	ea48 0003 	orrgt.w	r0, r8, r3
 800673a:	fa06 f003 	lslle.w	r0, r6, r3
 800673e:	f7f9 fef1 	bl	8000524 <__aeabi_ui2d>
 8006742:	2201      	movs	r2, #1
 8006744:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006748:	3d01      	subs	r5, #1
 800674a:	920e      	str	r2, [sp, #56]	; 0x38
 800674c:	e76f      	b.n	800662e <_dtoa_r+0x126>
 800674e:	2301      	movs	r3, #1
 8006750:	e7b3      	b.n	80066ba <_dtoa_r+0x1b2>
 8006752:	900c      	str	r0, [sp, #48]	; 0x30
 8006754:	e7b2      	b.n	80066bc <_dtoa_r+0x1b4>
 8006756:	9b05      	ldr	r3, [sp, #20]
 8006758:	eba3 030b 	sub.w	r3, r3, fp
 800675c:	9305      	str	r3, [sp, #20]
 800675e:	f1cb 0300 	rsb	r3, fp, #0
 8006762:	9308      	str	r3, [sp, #32]
 8006764:	2300      	movs	r3, #0
 8006766:	930b      	str	r3, [sp, #44]	; 0x2c
 8006768:	e7bf      	b.n	80066ea <_dtoa_r+0x1e2>
 800676a:	2300      	movs	r3, #0
 800676c:	9309      	str	r3, [sp, #36]	; 0x24
 800676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	dc52      	bgt.n	800681a <_dtoa_r+0x312>
 8006774:	2301      	movs	r3, #1
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	461a      	mov	r2, r3
 800677c:	920a      	str	r2, [sp, #40]	; 0x28
 800677e:	e00b      	b.n	8006798 <_dtoa_r+0x290>
 8006780:	2301      	movs	r3, #1
 8006782:	e7f3      	b.n	800676c <_dtoa_r+0x264>
 8006784:	2300      	movs	r3, #0
 8006786:	9309      	str	r3, [sp, #36]	; 0x24
 8006788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678a:	445b      	add	r3, fp
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	bfb8      	it	lt
 8006796:	2301      	movlt	r3, #1
 8006798:	69e0      	ldr	r0, [r4, #28]
 800679a:	2100      	movs	r1, #0
 800679c:	2204      	movs	r2, #4
 800679e:	f102 0614 	add.w	r6, r2, #20
 80067a2:	429e      	cmp	r6, r3
 80067a4:	d93d      	bls.n	8006822 <_dtoa_r+0x31a>
 80067a6:	6041      	str	r1, [r0, #4]
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 fd9f 	bl	80072ec <_Balloc>
 80067ae:	9000      	str	r0, [sp, #0]
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d139      	bne.n	8006828 <_dtoa_r+0x320>
 80067b4:	4b16      	ldr	r3, [pc, #88]	; (8006810 <_dtoa_r+0x308>)
 80067b6:	4602      	mov	r2, r0
 80067b8:	f240 11af 	movw	r1, #431	; 0x1af
 80067bc:	e6bd      	b.n	800653a <_dtoa_r+0x32>
 80067be:	2301      	movs	r3, #1
 80067c0:	e7e1      	b.n	8006786 <_dtoa_r+0x27e>
 80067c2:	2501      	movs	r5, #1
 80067c4:	2300      	movs	r3, #0
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	9509      	str	r5, [sp, #36]	; 0x24
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2312      	movs	r3, #18
 80067d6:	e7d1      	b.n	800677c <_dtoa_r+0x274>
 80067d8:	636f4361 	.word	0x636f4361
 80067dc:	3fd287a7 	.word	0x3fd287a7
 80067e0:	8b60c8b3 	.word	0x8b60c8b3
 80067e4:	3fc68a28 	.word	0x3fc68a28
 80067e8:	509f79fb 	.word	0x509f79fb
 80067ec:	3fd34413 	.word	0x3fd34413
 80067f0:	080087fa 	.word	0x080087fa
 80067f4:	08008811 	.word	0x08008811
 80067f8:	7ff00000 	.word	0x7ff00000
 80067fc:	080087f6 	.word	0x080087f6
 8006800:	080087ed 	.word	0x080087ed
 8006804:	080087ca 	.word	0x080087ca
 8006808:	3ff80000 	.word	0x3ff80000
 800680c:	08008900 	.word	0x08008900
 8006810:	08008869 	.word	0x08008869
 8006814:	2301      	movs	r3, #1
 8006816:	9309      	str	r3, [sp, #36]	; 0x24
 8006818:	e7d7      	b.n	80067ca <_dtoa_r+0x2c2>
 800681a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	e7ba      	b.n	8006798 <_dtoa_r+0x290>
 8006822:	3101      	adds	r1, #1
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	e7ba      	b.n	800679e <_dtoa_r+0x296>
 8006828:	69e3      	ldr	r3, [r4, #28]
 800682a:	9a00      	ldr	r2, [sp, #0]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	2b0e      	cmp	r3, #14
 8006832:	f200 80a8 	bhi.w	8006986 <_dtoa_r+0x47e>
 8006836:	2d00      	cmp	r5, #0
 8006838:	f000 80a5 	beq.w	8006986 <_dtoa_r+0x47e>
 800683c:	f1bb 0f00 	cmp.w	fp, #0
 8006840:	dd38      	ble.n	80068b4 <_dtoa_r+0x3ac>
 8006842:	4bc0      	ldr	r3, [pc, #768]	; (8006b44 <_dtoa_r+0x63c>)
 8006844:	f00b 020f 	and.w	r2, fp, #15
 8006848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800684c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006850:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006854:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006858:	d019      	beq.n	800688e <_dtoa_r+0x386>
 800685a:	4bbb      	ldr	r3, [pc, #748]	; (8006b48 <_dtoa_r+0x640>)
 800685c:	ec51 0b18 	vmov	r0, r1, d8
 8006860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006864:	f7fa f802 	bl	800086c <__aeabi_ddiv>
 8006868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800686c:	f008 080f 	and.w	r8, r8, #15
 8006870:	2503      	movs	r5, #3
 8006872:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006b48 <_dtoa_r+0x640>
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	d10a      	bne.n	8006892 <_dtoa_r+0x38a>
 800687c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006880:	4632      	mov	r2, r6
 8006882:	463b      	mov	r3, r7
 8006884:	f7f9 fff2 	bl	800086c <__aeabi_ddiv>
 8006888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800688c:	e02b      	b.n	80068e6 <_dtoa_r+0x3de>
 800688e:	2502      	movs	r5, #2
 8006890:	e7ef      	b.n	8006872 <_dtoa_r+0x36a>
 8006892:	f018 0f01 	tst.w	r8, #1
 8006896:	d008      	beq.n	80068aa <_dtoa_r+0x3a2>
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80068a0:	f7f9 feba 	bl	8000618 <__aeabi_dmul>
 80068a4:	3501      	adds	r5, #1
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80068ae:	f109 0908 	add.w	r9, r9, #8
 80068b2:	e7e0      	b.n	8006876 <_dtoa_r+0x36e>
 80068b4:	f000 809f 	beq.w	80069f6 <_dtoa_r+0x4ee>
 80068b8:	f1cb 0600 	rsb	r6, fp, #0
 80068bc:	4ba1      	ldr	r3, [pc, #644]	; (8006b44 <_dtoa_r+0x63c>)
 80068be:	4fa2      	ldr	r7, [pc, #648]	; (8006b48 <_dtoa_r+0x640>)
 80068c0:	f006 020f 	and.w	r2, r6, #15
 80068c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	ec51 0b18 	vmov	r0, r1, d8
 80068d0:	f7f9 fea2 	bl	8000618 <__aeabi_dmul>
 80068d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d8:	1136      	asrs	r6, r6, #4
 80068da:	2300      	movs	r3, #0
 80068dc:	2502      	movs	r5, #2
 80068de:	2e00      	cmp	r6, #0
 80068e0:	d17e      	bne.n	80069e0 <_dtoa_r+0x4d8>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1d0      	bne.n	8006888 <_dtoa_r+0x380>
 80068e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8084 	beq.w	80069fa <_dtoa_r+0x4f2>
 80068f2:	4b96      	ldr	r3, [pc, #600]	; (8006b4c <_dtoa_r+0x644>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f7fa f8ff 	bl	8000afc <__aeabi_dcmplt>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d07b      	beq.n	80069fa <_dtoa_r+0x4f2>
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d078      	beq.n	80069fa <_dtoa_r+0x4f2>
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	dd39      	ble.n	8006982 <_dtoa_r+0x47a>
 800690e:	4b90      	ldr	r3, [pc, #576]	; (8006b50 <_dtoa_r+0x648>)
 8006910:	2200      	movs	r2, #0
 8006912:	4640      	mov	r0, r8
 8006914:	4649      	mov	r1, r9
 8006916:	f7f9 fe7f 	bl	8000618 <__aeabi_dmul>
 800691a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800691e:	9e01      	ldr	r6, [sp, #4]
 8006920:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006924:	3501      	adds	r5, #1
 8006926:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800692a:	4628      	mov	r0, r5
 800692c:	f7f9 fe0a 	bl	8000544 <__aeabi_i2d>
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	f7f9 fe70 	bl	8000618 <__aeabi_dmul>
 8006938:	4b86      	ldr	r3, [pc, #536]	; (8006b54 <_dtoa_r+0x64c>)
 800693a:	2200      	movs	r2, #0
 800693c:	f7f9 fcb6 	bl	80002ac <__adddf3>
 8006940:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	2e00      	cmp	r6, #0
 800694c:	d158      	bne.n	8006a00 <_dtoa_r+0x4f8>
 800694e:	4b82      	ldr	r3, [pc, #520]	; (8006b58 <_dtoa_r+0x650>)
 8006950:	2200      	movs	r2, #0
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fca7 	bl	80002a8 <__aeabi_dsub>
 800695a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800695e:	4680      	mov	r8, r0
 8006960:	4689      	mov	r9, r1
 8006962:	f7fa f8e9 	bl	8000b38 <__aeabi_dcmpgt>
 8006966:	2800      	cmp	r0, #0
 8006968:	f040 8296 	bne.w	8006e98 <_dtoa_r+0x990>
 800696c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006970:	4640      	mov	r0, r8
 8006972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006976:	4649      	mov	r1, r9
 8006978:	f7fa f8c0 	bl	8000afc <__aeabi_dcmplt>
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 8289 	bne.w	8006e94 <_dtoa_r+0x98c>
 8006982:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006988:	2b00      	cmp	r3, #0
 800698a:	f2c0 814e 	blt.w	8006c2a <_dtoa_r+0x722>
 800698e:	f1bb 0f0e 	cmp.w	fp, #14
 8006992:	f300 814a 	bgt.w	8006c2a <_dtoa_r+0x722>
 8006996:	4b6b      	ldr	r3, [pc, #428]	; (8006b44 <_dtoa_r+0x63c>)
 8006998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800699c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f280 80dc 	bge.w	8006b60 <_dtoa_r+0x658>
 80069a8:	9b04      	ldr	r3, [sp, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f300 80d8 	bgt.w	8006b60 <_dtoa_r+0x658>
 80069b0:	f040 826f 	bne.w	8006e92 <_dtoa_r+0x98a>
 80069b4:	4b68      	ldr	r3, [pc, #416]	; (8006b58 <_dtoa_r+0x650>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	4640      	mov	r0, r8
 80069ba:	4649      	mov	r1, r9
 80069bc:	f7f9 fe2c 	bl	8000618 <__aeabi_dmul>
 80069c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c4:	f7fa f8ae 	bl	8000b24 <__aeabi_dcmpge>
 80069c8:	9e04      	ldr	r6, [sp, #16]
 80069ca:	4637      	mov	r7, r6
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f040 8245 	bne.w	8006e5c <_dtoa_r+0x954>
 80069d2:	9d00      	ldr	r5, [sp, #0]
 80069d4:	2331      	movs	r3, #49	; 0x31
 80069d6:	f805 3b01 	strb.w	r3, [r5], #1
 80069da:	f10b 0b01 	add.w	fp, fp, #1
 80069de:	e241      	b.n	8006e64 <_dtoa_r+0x95c>
 80069e0:	07f2      	lsls	r2, r6, #31
 80069e2:	d505      	bpl.n	80069f0 <_dtoa_r+0x4e8>
 80069e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e8:	f7f9 fe16 	bl	8000618 <__aeabi_dmul>
 80069ec:	3501      	adds	r5, #1
 80069ee:	2301      	movs	r3, #1
 80069f0:	1076      	asrs	r6, r6, #1
 80069f2:	3708      	adds	r7, #8
 80069f4:	e773      	b.n	80068de <_dtoa_r+0x3d6>
 80069f6:	2502      	movs	r5, #2
 80069f8:	e775      	b.n	80068e6 <_dtoa_r+0x3de>
 80069fa:	9e04      	ldr	r6, [sp, #16]
 80069fc:	465f      	mov	r7, fp
 80069fe:	e792      	b.n	8006926 <_dtoa_r+0x41e>
 8006a00:	9900      	ldr	r1, [sp, #0]
 8006a02:	4b50      	ldr	r3, [pc, #320]	; (8006b44 <_dtoa_r+0x63c>)
 8006a04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a08:	4431      	add	r1, r6
 8006a0a:	9102      	str	r1, [sp, #8]
 8006a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a0e:	eeb0 9a47 	vmov.f32	s18, s14
 8006a12:	eef0 9a67 	vmov.f32	s19, s15
 8006a16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d044      	beq.n	8006aac <_dtoa_r+0x5a4>
 8006a22:	494e      	ldr	r1, [pc, #312]	; (8006b5c <_dtoa_r+0x654>)
 8006a24:	2000      	movs	r0, #0
 8006a26:	f7f9 ff21 	bl	800086c <__aeabi_ddiv>
 8006a2a:	ec53 2b19 	vmov	r2, r3, d9
 8006a2e:	f7f9 fc3b 	bl	80002a8 <__aeabi_dsub>
 8006a32:	9d00      	ldr	r5, [sp, #0]
 8006a34:	ec41 0b19 	vmov	d9, r0, r1
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f7fa f89c 	bl	8000b78 <__aeabi_d2iz>
 8006a40:	4606      	mov	r6, r0
 8006a42:	f7f9 fd7f 	bl	8000544 <__aeabi_i2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fc2b 	bl	80002a8 <__aeabi_dsub>
 8006a52:	3630      	adds	r6, #48	; 0x30
 8006a54:	f805 6b01 	strb.w	r6, [r5], #1
 8006a58:	ec53 2b19 	vmov	r2, r3, d9
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	f7fa f84c 	bl	8000afc <__aeabi_dcmplt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d164      	bne.n	8006b32 <_dtoa_r+0x62a>
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	4937      	ldr	r1, [pc, #220]	; (8006b4c <_dtoa_r+0x644>)
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f7f9 fc1a 	bl	80002a8 <__aeabi_dsub>
 8006a74:	ec53 2b19 	vmov	r2, r3, d9
 8006a78:	f7fa f840 	bl	8000afc <__aeabi_dcmplt>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f040 80b6 	bne.w	8006bee <_dtoa_r+0x6e6>
 8006a82:	9b02      	ldr	r3, [sp, #8]
 8006a84:	429d      	cmp	r5, r3
 8006a86:	f43f af7c 	beq.w	8006982 <_dtoa_r+0x47a>
 8006a8a:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <_dtoa_r+0x648>)
 8006a8c:	ec51 0b19 	vmov	r0, r1, d9
 8006a90:	2200      	movs	r2, #0
 8006a92:	f7f9 fdc1 	bl	8000618 <__aeabi_dmul>
 8006a96:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <_dtoa_r+0x648>)
 8006a98:	ec41 0b19 	vmov	d9, r0, r1
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	f7f9 fdb9 	bl	8000618 <__aeabi_dmul>
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	4689      	mov	r9, r1
 8006aaa:	e7c5      	b.n	8006a38 <_dtoa_r+0x530>
 8006aac:	ec51 0b17 	vmov	r0, r1, d7
 8006ab0:	f7f9 fdb2 	bl	8000618 <__aeabi_dmul>
 8006ab4:	9b02      	ldr	r3, [sp, #8]
 8006ab6:	9d00      	ldr	r5, [sp, #0]
 8006ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aba:	ec41 0b19 	vmov	d9, r0, r1
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	f7fa f859 	bl	8000b78 <__aeabi_d2iz>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	f7f9 fd3c 	bl	8000544 <__aeabi_i2d>
 8006acc:	3630      	adds	r6, #48	; 0x30
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fbe7 	bl	80002a8 <__aeabi_dsub>
 8006ada:	f805 6b01 	strb.w	r6, [r5], #1
 8006ade:	9b02      	ldr	r3, [sp, #8]
 8006ae0:	429d      	cmp	r5, r3
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	d124      	bne.n	8006b36 <_dtoa_r+0x62e>
 8006aec:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <_dtoa_r+0x654>)
 8006aee:	ec51 0b19 	vmov	r0, r1, d9
 8006af2:	f7f9 fbdb 	bl	80002ac <__adddf3>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7fa f81b 	bl	8000b38 <__aeabi_dcmpgt>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d173      	bne.n	8006bee <_dtoa_r+0x6e6>
 8006b06:	ec53 2b19 	vmov	r2, r3, d9
 8006b0a:	4914      	ldr	r1, [pc, #80]	; (8006b5c <_dtoa_r+0x654>)
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	f7f9 fbcb 	bl	80002a8 <__aeabi_dsub>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7f9 ffef 	bl	8000afc <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f af2f 	beq.w	8006982 <_dtoa_r+0x47a>
 8006b24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b26:	1e6b      	subs	r3, r5, #1
 8006b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b2e:	2b30      	cmp	r3, #48	; 0x30
 8006b30:	d0f8      	beq.n	8006b24 <_dtoa_r+0x61c>
 8006b32:	46bb      	mov	fp, r7
 8006b34:	e04a      	b.n	8006bcc <_dtoa_r+0x6c4>
 8006b36:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <_dtoa_r+0x648>)
 8006b38:	f7f9 fd6e 	bl	8000618 <__aeabi_dmul>
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	4689      	mov	r9, r1
 8006b40:	e7bd      	b.n	8006abe <_dtoa_r+0x5b6>
 8006b42:	bf00      	nop
 8006b44:	08008900 	.word	0x08008900
 8006b48:	080088d8 	.word	0x080088d8
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	40240000 	.word	0x40240000
 8006b54:	401c0000 	.word	0x401c0000
 8006b58:	40140000 	.word	0x40140000
 8006b5c:	3fe00000 	.word	0x3fe00000
 8006b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b64:	9d00      	ldr	r5, [sp, #0]
 8006b66:	4642      	mov	r2, r8
 8006b68:	464b      	mov	r3, r9
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 fe7d 	bl	800086c <__aeabi_ddiv>
 8006b72:	f7fa f801 	bl	8000b78 <__aeabi_d2iz>
 8006b76:	9001      	str	r0, [sp, #4]
 8006b78:	f7f9 fce4 	bl	8000544 <__aeabi_i2d>
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f7f9 fd4a 	bl	8000618 <__aeabi_dmul>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 fb8c 	bl	80002a8 <__aeabi_dsub>
 8006b90:	9e01      	ldr	r6, [sp, #4]
 8006b92:	9f04      	ldr	r7, [sp, #16]
 8006b94:	3630      	adds	r6, #48	; 0x30
 8006b96:	f805 6b01 	strb.w	r6, [r5], #1
 8006b9a:	9e00      	ldr	r6, [sp, #0]
 8006b9c:	1bae      	subs	r6, r5, r6
 8006b9e:	42b7      	cmp	r7, r6
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	d134      	bne.n	8006c10 <_dtoa_r+0x708>
 8006ba6:	f7f9 fb81 	bl	80002ac <__adddf3>
 8006baa:	4642      	mov	r2, r8
 8006bac:	464b      	mov	r3, r9
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	f7f9 ffc1 	bl	8000b38 <__aeabi_dcmpgt>
 8006bb6:	b9c8      	cbnz	r0, 8006bec <_dtoa_r+0x6e4>
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 ff92 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bc4:	b110      	cbz	r0, 8006bcc <_dtoa_r+0x6c4>
 8006bc6:	9b01      	ldr	r3, [sp, #4]
 8006bc8:	07db      	lsls	r3, r3, #31
 8006bca:	d40f      	bmi.n	8006bec <_dtoa_r+0x6e4>
 8006bcc:	4651      	mov	r1, sl
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fbcc 	bl	800736c <_Bfree>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bd8:	702b      	strb	r3, [r5, #0]
 8006bda:	f10b 0301 	add.w	r3, fp, #1
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f43f ace2 	beq.w	80065ac <_dtoa_r+0xa4>
 8006be8:	601d      	str	r5, [r3, #0]
 8006bea:	e4df      	b.n	80065ac <_dtoa_r+0xa4>
 8006bec:	465f      	mov	r7, fp
 8006bee:	462b      	mov	r3, r5
 8006bf0:	461d      	mov	r5, r3
 8006bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bf6:	2a39      	cmp	r2, #57	; 0x39
 8006bf8:	d106      	bne.n	8006c08 <_dtoa_r+0x700>
 8006bfa:	9a00      	ldr	r2, [sp, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d1f7      	bne.n	8006bf0 <_dtoa_r+0x6e8>
 8006c00:	9900      	ldr	r1, [sp, #0]
 8006c02:	2230      	movs	r2, #48	; 0x30
 8006c04:	3701      	adds	r7, #1
 8006c06:	700a      	strb	r2, [r1, #0]
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	3201      	adds	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e790      	b.n	8006b32 <_dtoa_r+0x62a>
 8006c10:	4ba3      	ldr	r3, [pc, #652]	; (8006ea0 <_dtoa_r+0x998>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	f7f9 fd00 	bl	8000618 <__aeabi_dmul>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	460f      	mov	r7, r1
 8006c20:	f7f9 ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d09e      	beq.n	8006b66 <_dtoa_r+0x65e>
 8006c28:	e7d0      	b.n	8006bcc <_dtoa_r+0x6c4>
 8006c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	f000 80ca 	beq.w	8006dc6 <_dtoa_r+0x8be>
 8006c32:	9a07      	ldr	r2, [sp, #28]
 8006c34:	2a01      	cmp	r2, #1
 8006c36:	f300 80ad 	bgt.w	8006d94 <_dtoa_r+0x88c>
 8006c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	f000 80a5 	beq.w	8006d8c <_dtoa_r+0x884>
 8006c42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c46:	9e08      	ldr	r6, [sp, #32]
 8006c48:	9d05      	ldr	r5, [sp, #20]
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	9a06      	ldr	r2, [sp, #24]
 8006c52:	2101      	movs	r1, #1
 8006c54:	441a      	add	r2, r3
 8006c56:	4620      	mov	r0, r4
 8006c58:	9206      	str	r2, [sp, #24]
 8006c5a:	f000 fc3d 	bl	80074d8 <__i2b>
 8006c5e:	4607      	mov	r7, r0
 8006c60:	b165      	cbz	r5, 8006c7c <_dtoa_r+0x774>
 8006c62:	9b06      	ldr	r3, [sp, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dd09      	ble.n	8006c7c <_dtoa_r+0x774>
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	9a05      	ldr	r2, [sp, #20]
 8006c6c:	bfa8      	it	ge
 8006c6e:	462b      	movge	r3, r5
 8006c70:	1ad2      	subs	r2, r2, r3
 8006c72:	9205      	str	r2, [sp, #20]
 8006c74:	9a06      	ldr	r2, [sp, #24]
 8006c76:	1aed      	subs	r5, r5, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	9306      	str	r3, [sp, #24]
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	b1f3      	cbz	r3, 8006cbe <_dtoa_r+0x7b6>
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80a3 	beq.w	8006dce <_dtoa_r+0x8c6>
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	dd10      	ble.n	8006cae <_dtoa_r+0x7a6>
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	4632      	mov	r2, r6
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fce1 	bl	8007658 <__pow5mult>
 8006c96:	4652      	mov	r2, sl
 8006c98:	4601      	mov	r1, r0
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fc31 	bl	8007504 <__multiply>
 8006ca2:	4651      	mov	r1, sl
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fb60 	bl	800736c <_Bfree>
 8006cac:	46c2      	mov	sl, r8
 8006cae:	9b08      	ldr	r3, [sp, #32]
 8006cb0:	1b9a      	subs	r2, r3, r6
 8006cb2:	d004      	beq.n	8006cbe <_dtoa_r+0x7b6>
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 fcce 	bl	8007658 <__pow5mult>
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fc09 	bl	80074d8 <__i2b>
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	4606      	mov	r6, r0
 8006ccc:	f340 8081 	ble.w	8006dd2 <_dtoa_r+0x8ca>
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4601      	mov	r1, r0
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 fcbf 	bl	8007658 <__pow5mult>
 8006cda:	9b07      	ldr	r3, [sp, #28]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	4606      	mov	r6, r0
 8006ce0:	dd7a      	ble.n	8006dd8 <_dtoa_r+0x8d0>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	6933      	ldr	r3, [r6, #16]
 8006ce8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cec:	6918      	ldr	r0, [r3, #16]
 8006cee:	f000 fba5 	bl	800743c <__hi0bits>
 8006cf2:	f1c0 0020 	rsb	r0, r0, #32
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	4418      	add	r0, r3
 8006cfa:	f010 001f 	ands.w	r0, r0, #31
 8006cfe:	f000 8094 	beq.w	8006e2a <_dtoa_r+0x922>
 8006d02:	f1c0 0320 	rsb	r3, r0, #32
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	f340 8085 	ble.w	8006e16 <_dtoa_r+0x90e>
 8006d0c:	9b05      	ldr	r3, [sp, #20]
 8006d0e:	f1c0 001c 	rsb	r0, r0, #28
 8006d12:	4403      	add	r3, r0
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	4403      	add	r3, r0
 8006d1a:	4405      	add	r5, r0
 8006d1c:	9306      	str	r3, [sp, #24]
 8006d1e:	9b05      	ldr	r3, [sp, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dd05      	ble.n	8006d30 <_dtoa_r+0x828>
 8006d24:	4651      	mov	r1, sl
 8006d26:	461a      	mov	r2, r3
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fcef 	bl	800770c <__lshift>
 8006d2e:	4682      	mov	sl, r0
 8006d30:	9b06      	ldr	r3, [sp, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dd05      	ble.n	8006d42 <_dtoa_r+0x83a>
 8006d36:	4631      	mov	r1, r6
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fce6 	bl	800770c <__lshift>
 8006d40:	4606      	mov	r6, r0
 8006d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d072      	beq.n	8006e2e <_dtoa_r+0x926>
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f000 fd4a 	bl	80077e4 <__mcmp>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	da6c      	bge.n	8006e2e <_dtoa_r+0x926>
 8006d54:	2300      	movs	r3, #0
 8006d56:	4651      	mov	r1, sl
 8006d58:	220a      	movs	r2, #10
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fb28 	bl	80073b0 <__multadd>
 8006d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d66:	4682      	mov	sl, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 81b0 	beq.w	80070ce <_dtoa_r+0xbc6>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4639      	mov	r1, r7
 8006d72:	220a      	movs	r2, #10
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 fb1b 	bl	80073b0 <__multadd>
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	4607      	mov	r7, r0
 8006d80:	f300 8096 	bgt.w	8006eb0 <_dtoa_r+0x9a8>
 8006d84:	9b07      	ldr	r3, [sp, #28]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	dc59      	bgt.n	8006e3e <_dtoa_r+0x936>
 8006d8a:	e091      	b.n	8006eb0 <_dtoa_r+0x9a8>
 8006d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d92:	e758      	b.n	8006c46 <_dtoa_r+0x73e>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	1e5e      	subs	r6, r3, #1
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	42b3      	cmp	r3, r6
 8006d9c:	bfbf      	itttt	lt
 8006d9e:	9b08      	ldrlt	r3, [sp, #32]
 8006da0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006da2:	9608      	strlt	r6, [sp, #32]
 8006da4:	1af3      	sublt	r3, r6, r3
 8006da6:	bfb4      	ite	lt
 8006da8:	18d2      	addlt	r2, r2, r3
 8006daa:	1b9e      	subge	r6, r3, r6
 8006dac:	9b04      	ldr	r3, [sp, #16]
 8006dae:	bfbc      	itt	lt
 8006db0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006db2:	2600      	movlt	r6, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfb7      	itett	lt
 8006db8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006dbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006dc0:	1a9d      	sublt	r5, r3, r2
 8006dc2:	2300      	movlt	r3, #0
 8006dc4:	e741      	b.n	8006c4a <_dtoa_r+0x742>
 8006dc6:	9e08      	ldr	r6, [sp, #32]
 8006dc8:	9d05      	ldr	r5, [sp, #20]
 8006dca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dcc:	e748      	b.n	8006c60 <_dtoa_r+0x758>
 8006dce:	9a08      	ldr	r2, [sp, #32]
 8006dd0:	e770      	b.n	8006cb4 <_dtoa_r+0x7ac>
 8006dd2:	9b07      	ldr	r3, [sp, #28]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	dc19      	bgt.n	8006e0c <_dtoa_r+0x904>
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	b9bb      	cbnz	r3, 8006e0c <_dtoa_r+0x904>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006de2:	b99b      	cbnz	r3, 8006e0c <_dtoa_r+0x904>
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dea:	0d1b      	lsrs	r3, r3, #20
 8006dec:	051b      	lsls	r3, r3, #20
 8006dee:	b183      	cbz	r3, 8006e12 <_dtoa_r+0x90a>
 8006df0:	9b05      	ldr	r3, [sp, #20]
 8006df2:	3301      	adds	r3, #1
 8006df4:	9305      	str	r3, [sp, #20]
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	f04f 0801 	mov.w	r8, #1
 8006e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f af6f 	bne.w	8006ce6 <_dtoa_r+0x7de>
 8006e08:	2001      	movs	r0, #1
 8006e0a:	e774      	b.n	8006cf6 <_dtoa_r+0x7ee>
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	e7f6      	b.n	8006e00 <_dtoa_r+0x8f8>
 8006e12:	4698      	mov	r8, r3
 8006e14:	e7f4      	b.n	8006e00 <_dtoa_r+0x8f8>
 8006e16:	d082      	beq.n	8006d1e <_dtoa_r+0x816>
 8006e18:	9a05      	ldr	r2, [sp, #20]
 8006e1a:	331c      	adds	r3, #28
 8006e1c:	441a      	add	r2, r3
 8006e1e:	9205      	str	r2, [sp, #20]
 8006e20:	9a06      	ldr	r2, [sp, #24]
 8006e22:	441a      	add	r2, r3
 8006e24:	441d      	add	r5, r3
 8006e26:	9206      	str	r2, [sp, #24]
 8006e28:	e779      	b.n	8006d1e <_dtoa_r+0x816>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	e7f4      	b.n	8006e18 <_dtoa_r+0x910>
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	dc37      	bgt.n	8006ea4 <_dtoa_r+0x99c>
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	dd34      	ble.n	8006ea4 <_dtoa_r+0x99c>
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	b963      	cbnz	r3, 8006e5c <_dtoa_r+0x954>
 8006e42:	4631      	mov	r1, r6
 8006e44:	2205      	movs	r2, #5
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 fab2 	bl	80073b0 <__multadd>
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4606      	mov	r6, r0
 8006e50:	4650      	mov	r0, sl
 8006e52:	f000 fcc7 	bl	80077e4 <__mcmp>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f73f adbb 	bgt.w	80069d2 <_dtoa_r+0x4ca>
 8006e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5e:	9d00      	ldr	r5, [sp, #0]
 8006e60:	ea6f 0b03 	mvn.w	fp, r3
 8006e64:	f04f 0800 	mov.w	r8, #0
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fa7e 	bl	800736c <_Bfree>
 8006e70:	2f00      	cmp	r7, #0
 8006e72:	f43f aeab 	beq.w	8006bcc <_dtoa_r+0x6c4>
 8006e76:	f1b8 0f00 	cmp.w	r8, #0
 8006e7a:	d005      	beq.n	8006e88 <_dtoa_r+0x980>
 8006e7c:	45b8      	cmp	r8, r7
 8006e7e:	d003      	beq.n	8006e88 <_dtoa_r+0x980>
 8006e80:	4641      	mov	r1, r8
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fa72 	bl	800736c <_Bfree>
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fa6e 	bl	800736c <_Bfree>
 8006e90:	e69c      	b.n	8006bcc <_dtoa_r+0x6c4>
 8006e92:	2600      	movs	r6, #0
 8006e94:	4637      	mov	r7, r6
 8006e96:	e7e1      	b.n	8006e5c <_dtoa_r+0x954>
 8006e98:	46bb      	mov	fp, r7
 8006e9a:	4637      	mov	r7, r6
 8006e9c:	e599      	b.n	80069d2 <_dtoa_r+0x4ca>
 8006e9e:	bf00      	nop
 8006ea0:	40240000 	.word	0x40240000
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80c8 	beq.w	800703c <_dtoa_r+0xb34>
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	dd05      	ble.n	8006ec0 <_dtoa_r+0x9b8>
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fc27 	bl	800770c <__lshift>
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d05b      	beq.n	8006f7e <_dtoa_r+0xa76>
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fa0f 	bl	80072ec <_Balloc>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b928      	cbnz	r0, 8006ede <_dtoa_r+0x9d6>
 8006ed2:	4b83      	ldr	r3, [pc, #524]	; (80070e0 <_dtoa_r+0xbd8>)
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006eda:	f7ff bb2e 	b.w	800653a <_dtoa_r+0x32>
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	3202      	adds	r2, #2
 8006ee2:	0092      	lsls	r2, r2, #2
 8006ee4:	f107 010c 	add.w	r1, r7, #12
 8006ee8:	300c      	adds	r0, #12
 8006eea:	f7ff fa74 	bl	80063d6 <memcpy>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fc0a 	bl	800770c <__lshift>
 8006ef8:	9b00      	ldr	r3, [sp, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f02:	4413      	add	r3, r2
 8006f04:	9308      	str	r3, [sp, #32]
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	46b8      	mov	r8, r7
 8006f0e:	9306      	str	r3, [sp, #24]
 8006f10:	4607      	mov	r7, r0
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	4631      	mov	r1, r6
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4650      	mov	r0, sl
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	f7ff fa69 	bl	80063f2 <quorem>
 8006f20:	4641      	mov	r1, r8
 8006f22:	9002      	str	r0, [sp, #8]
 8006f24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f28:	4650      	mov	r0, sl
 8006f2a:	f000 fc5b 	bl	80077e4 <__mcmp>
 8006f2e:	463a      	mov	r2, r7
 8006f30:	9005      	str	r0, [sp, #20]
 8006f32:	4631      	mov	r1, r6
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fc71 	bl	800781c <__mdiff>
 8006f3a:	68c2      	ldr	r2, [r0, #12]
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	bb02      	cbnz	r2, 8006f82 <_dtoa_r+0xa7a>
 8006f40:	4601      	mov	r1, r0
 8006f42:	4650      	mov	r0, sl
 8006f44:	f000 fc4e 	bl	80077e4 <__mcmp>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f50:	f000 fa0c 	bl	800736c <_Bfree>
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f58:	9d04      	ldr	r5, [sp, #16]
 8006f5a:	ea43 0102 	orr.w	r1, r3, r2
 8006f5e:	9b06      	ldr	r3, [sp, #24]
 8006f60:	4319      	orrs	r1, r3
 8006f62:	d110      	bne.n	8006f86 <_dtoa_r+0xa7e>
 8006f64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f68:	d029      	beq.n	8006fbe <_dtoa_r+0xab6>
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dd02      	ble.n	8006f76 <_dtoa_r+0xa6e>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	f883 9000 	strb.w	r9, [r3]
 8006f7c:	e774      	b.n	8006e68 <_dtoa_r+0x960>
 8006f7e:	4638      	mov	r0, r7
 8006f80:	e7ba      	b.n	8006ef8 <_dtoa_r+0x9f0>
 8006f82:	2201      	movs	r2, #1
 8006f84:	e7e1      	b.n	8006f4a <_dtoa_r+0xa42>
 8006f86:	9b05      	ldr	r3, [sp, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	db04      	blt.n	8006f96 <_dtoa_r+0xa8e>
 8006f8c:	9907      	ldr	r1, [sp, #28]
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	9906      	ldr	r1, [sp, #24]
 8006f92:	430b      	orrs	r3, r1
 8006f94:	d120      	bne.n	8006fd8 <_dtoa_r+0xad0>
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	dded      	ble.n	8006f76 <_dtoa_r+0xa6e>
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fbb4 	bl	800770c <__lshift>
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4682      	mov	sl, r0
 8006fa8:	f000 fc1c 	bl	80077e4 <__mcmp>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	dc03      	bgt.n	8006fb8 <_dtoa_r+0xab0>
 8006fb0:	d1e1      	bne.n	8006f76 <_dtoa_r+0xa6e>
 8006fb2:	f019 0f01 	tst.w	r9, #1
 8006fb6:	d0de      	beq.n	8006f76 <_dtoa_r+0xa6e>
 8006fb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fbc:	d1d8      	bne.n	8006f70 <_dtoa_r+0xa68>
 8006fbe:	9a01      	ldr	r2, [sp, #4]
 8006fc0:	2339      	movs	r3, #57	; 0x39
 8006fc2:	7013      	strb	r3, [r2, #0]
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fce:	2a39      	cmp	r2, #57	; 0x39
 8006fd0:	d06c      	beq.n	80070ac <_dtoa_r+0xba4>
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e747      	b.n	8006e68 <_dtoa_r+0x960>
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	dd07      	ble.n	8006fec <_dtoa_r+0xae4>
 8006fdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fe0:	d0ed      	beq.n	8006fbe <_dtoa_r+0xab6>
 8006fe2:	9a01      	ldr	r2, [sp, #4]
 8006fe4:	f109 0301 	add.w	r3, r9, #1
 8006fe8:	7013      	strb	r3, [r2, #0]
 8006fea:	e73d      	b.n	8006e68 <_dtoa_r+0x960>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	9a08      	ldr	r2, [sp, #32]
 8006ff0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d043      	beq.n	8007080 <_dtoa_r+0xb78>
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f9d6 	bl	80073b0 <__multadd>
 8007004:	45b8      	cmp	r8, r7
 8007006:	4682      	mov	sl, r0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	f04f 020a 	mov.w	r2, #10
 8007010:	4641      	mov	r1, r8
 8007012:	4620      	mov	r0, r4
 8007014:	d107      	bne.n	8007026 <_dtoa_r+0xb1e>
 8007016:	f000 f9cb 	bl	80073b0 <__multadd>
 800701a:	4680      	mov	r8, r0
 800701c:	4607      	mov	r7, r0
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	3301      	adds	r3, #1
 8007022:	9304      	str	r3, [sp, #16]
 8007024:	e775      	b.n	8006f12 <_dtoa_r+0xa0a>
 8007026:	f000 f9c3 	bl	80073b0 <__multadd>
 800702a:	4639      	mov	r1, r7
 800702c:	4680      	mov	r8, r0
 800702e:	2300      	movs	r3, #0
 8007030:	220a      	movs	r2, #10
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f9bc 	bl	80073b0 <__multadd>
 8007038:	4607      	mov	r7, r0
 800703a:	e7f0      	b.n	800701e <_dtoa_r+0xb16>
 800703c:	9b04      	ldr	r3, [sp, #16]
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	9d00      	ldr	r5, [sp, #0]
 8007042:	4631      	mov	r1, r6
 8007044:	4650      	mov	r0, sl
 8007046:	f7ff f9d4 	bl	80063f2 <quorem>
 800704a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	f805 9b01 	strb.w	r9, [r5], #1
 8007054:	1aea      	subs	r2, r5, r3
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	4293      	cmp	r3, r2
 800705a:	dd07      	ble.n	800706c <_dtoa_r+0xb64>
 800705c:	4651      	mov	r1, sl
 800705e:	2300      	movs	r3, #0
 8007060:	220a      	movs	r2, #10
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f9a4 	bl	80073b0 <__multadd>
 8007068:	4682      	mov	sl, r0
 800706a:	e7ea      	b.n	8007042 <_dtoa_r+0xb3a>
 800706c:	9b01      	ldr	r3, [sp, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfc8      	it	gt
 8007072:	461d      	movgt	r5, r3
 8007074:	9b00      	ldr	r3, [sp, #0]
 8007076:	bfd8      	it	le
 8007078:	2501      	movle	r5, #1
 800707a:	441d      	add	r5, r3
 800707c:	f04f 0800 	mov.w	r8, #0
 8007080:	4651      	mov	r1, sl
 8007082:	2201      	movs	r2, #1
 8007084:	4620      	mov	r0, r4
 8007086:	f000 fb41 	bl	800770c <__lshift>
 800708a:	4631      	mov	r1, r6
 800708c:	4682      	mov	sl, r0
 800708e:	f000 fba9 	bl	80077e4 <__mcmp>
 8007092:	2800      	cmp	r0, #0
 8007094:	dc96      	bgt.n	8006fc4 <_dtoa_r+0xabc>
 8007096:	d102      	bne.n	800709e <_dtoa_r+0xb96>
 8007098:	f019 0f01 	tst.w	r9, #1
 800709c:	d192      	bne.n	8006fc4 <_dtoa_r+0xabc>
 800709e:	462b      	mov	r3, r5
 80070a0:	461d      	mov	r5, r3
 80070a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070a6:	2a30      	cmp	r2, #48	; 0x30
 80070a8:	d0fa      	beq.n	80070a0 <_dtoa_r+0xb98>
 80070aa:	e6dd      	b.n	8006e68 <_dtoa_r+0x960>
 80070ac:	9a00      	ldr	r2, [sp, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d189      	bne.n	8006fc6 <_dtoa_r+0xabe>
 80070b2:	f10b 0b01 	add.w	fp, fp, #1
 80070b6:	2331      	movs	r3, #49	; 0x31
 80070b8:	e796      	b.n	8006fe8 <_dtoa_r+0xae0>
 80070ba:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <_dtoa_r+0xbdc>)
 80070bc:	f7ff ba99 	b.w	80065f2 <_dtoa_r+0xea>
 80070c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f47f aa6d 	bne.w	80065a2 <_dtoa_r+0x9a>
 80070c8:	4b07      	ldr	r3, [pc, #28]	; (80070e8 <_dtoa_r+0xbe0>)
 80070ca:	f7ff ba92 	b.w	80065f2 <_dtoa_r+0xea>
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dcb5      	bgt.n	8007040 <_dtoa_r+0xb38>
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	f73f aeb1 	bgt.w	8006e3e <_dtoa_r+0x936>
 80070dc:	e7b0      	b.n	8007040 <_dtoa_r+0xb38>
 80070de:	bf00      	nop
 80070e0:	08008869 	.word	0x08008869
 80070e4:	080087c9 	.word	0x080087c9
 80070e8:	080087ed 	.word	0x080087ed

080070ec <_free_r>:
 80070ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ee:	2900      	cmp	r1, #0
 80070f0:	d044      	beq.n	800717c <_free_r+0x90>
 80070f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f6:	9001      	str	r0, [sp, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f1a1 0404 	sub.w	r4, r1, #4
 80070fe:	bfb8      	it	lt
 8007100:	18e4      	addlt	r4, r4, r3
 8007102:	f000 f8e7 	bl	80072d4 <__malloc_lock>
 8007106:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <_free_r+0x94>)
 8007108:	9801      	ldr	r0, [sp, #4]
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x30>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	b003      	add	sp, #12
 8007114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007118:	f000 b8e2 	b.w	80072e0 <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x46>
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	1961      	adds	r1, r4, r5
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1949      	addeq	r1, r1, r5
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x22>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x50>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x46>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1855      	adds	r5, r2, r1
 8007140:	42a5      	cmp	r5, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x70>
 8007144:	6824      	ldr	r4, [r4, #0]
 8007146:	4421      	add	r1, r4
 8007148:	1854      	adds	r4, r2, r1
 800714a:	42a3      	cmp	r3, r4
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x26>
 8007150:	681c      	ldr	r4, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	6053      	str	r3, [r2, #4]
 8007156:	440c      	add	r4, r1
 8007158:	6014      	str	r4, [r2, #0]
 800715a:	e7da      	b.n	8007112 <_free_r+0x26>
 800715c:	d902      	bls.n	8007164 <_free_r+0x78>
 800715e:	230c      	movs	r3, #12
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x26>
 8007164:	6825      	ldr	r5, [r4, #0]
 8007166:	1961      	adds	r1, r4, r5
 8007168:	428b      	cmp	r3, r1
 800716a:	bf04      	itt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	bf04      	itt	eq
 8007174:	1949      	addeq	r1, r1, r5
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	e7ca      	b.n	8007112 <_free_r+0x26>
 800717c:	b003      	add	sp, #12
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	20004a28 	.word	0x20004a28

08007184 <malloc>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <malloc+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f000 b823 	b.w	80071d4 <_malloc_r>
 800718e:	bf00      	nop
 8007190:	20000120 	.word	0x20000120

08007194 <sbrk_aligned>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4e0e      	ldr	r6, [pc, #56]	; (80071d0 <sbrk_aligned+0x3c>)
 8007198:	460c      	mov	r4, r1
 800719a:	6831      	ldr	r1, [r6, #0]
 800719c:	4605      	mov	r5, r0
 800719e:	b911      	cbnz	r1, 80071a6 <sbrk_aligned+0x12>
 80071a0:	f000 fde8 	bl	8007d74 <_sbrk_r>
 80071a4:	6030      	str	r0, [r6, #0]
 80071a6:	4621      	mov	r1, r4
 80071a8:	4628      	mov	r0, r5
 80071aa:	f000 fde3 	bl	8007d74 <_sbrk_r>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d00a      	beq.n	80071c8 <sbrk_aligned+0x34>
 80071b2:	1cc4      	adds	r4, r0, #3
 80071b4:	f024 0403 	bic.w	r4, r4, #3
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d007      	beq.n	80071cc <sbrk_aligned+0x38>
 80071bc:	1a21      	subs	r1, r4, r0
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 fdd8 	bl	8007d74 <_sbrk_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	d101      	bne.n	80071cc <sbrk_aligned+0x38>
 80071c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80071cc:	4620      	mov	r0, r4
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	20004a2c 	.word	0x20004a2c

080071d4 <_malloc_r>:
 80071d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d8:	1ccd      	adds	r5, r1, #3
 80071da:	f025 0503 	bic.w	r5, r5, #3
 80071de:	3508      	adds	r5, #8
 80071e0:	2d0c      	cmp	r5, #12
 80071e2:	bf38      	it	cc
 80071e4:	250c      	movcc	r5, #12
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	4607      	mov	r7, r0
 80071ea:	db01      	blt.n	80071f0 <_malloc_r+0x1c>
 80071ec:	42a9      	cmp	r1, r5
 80071ee:	d905      	bls.n	80071fc <_malloc_r+0x28>
 80071f0:	230c      	movs	r3, #12
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	2600      	movs	r6, #0
 80071f6:	4630      	mov	r0, r6
 80071f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072d0 <_malloc_r+0xfc>
 8007200:	f000 f868 	bl	80072d4 <__malloc_lock>
 8007204:	f8d8 3000 	ldr.w	r3, [r8]
 8007208:	461c      	mov	r4, r3
 800720a:	bb5c      	cbnz	r4, 8007264 <_malloc_r+0x90>
 800720c:	4629      	mov	r1, r5
 800720e:	4638      	mov	r0, r7
 8007210:	f7ff ffc0 	bl	8007194 <sbrk_aligned>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	4604      	mov	r4, r0
 8007218:	d155      	bne.n	80072c6 <_malloc_r+0xf2>
 800721a:	f8d8 4000 	ldr.w	r4, [r8]
 800721e:	4626      	mov	r6, r4
 8007220:	2e00      	cmp	r6, #0
 8007222:	d145      	bne.n	80072b0 <_malloc_r+0xdc>
 8007224:	2c00      	cmp	r4, #0
 8007226:	d048      	beq.n	80072ba <_malloc_r+0xe6>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	4631      	mov	r1, r6
 800722c:	4638      	mov	r0, r7
 800722e:	eb04 0903 	add.w	r9, r4, r3
 8007232:	f000 fd9f 	bl	8007d74 <_sbrk_r>
 8007236:	4581      	cmp	r9, r0
 8007238:	d13f      	bne.n	80072ba <_malloc_r+0xe6>
 800723a:	6821      	ldr	r1, [r4, #0]
 800723c:	1a6d      	subs	r5, r5, r1
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ffa7 	bl	8007194 <sbrk_aligned>
 8007246:	3001      	adds	r0, #1
 8007248:	d037      	beq.n	80072ba <_malloc_r+0xe6>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	442b      	add	r3, r5
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	f8d8 3000 	ldr.w	r3, [r8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d038      	beq.n	80072ca <_malloc_r+0xf6>
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	42a2      	cmp	r2, r4
 800725c:	d12b      	bne.n	80072b6 <_malloc_r+0xe2>
 800725e:	2200      	movs	r2, #0
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	e00f      	b.n	8007284 <_malloc_r+0xb0>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	1b52      	subs	r2, r2, r5
 8007268:	d41f      	bmi.n	80072aa <_malloc_r+0xd6>
 800726a:	2a0b      	cmp	r2, #11
 800726c:	d917      	bls.n	800729e <_malloc_r+0xca>
 800726e:	1961      	adds	r1, r4, r5
 8007270:	42a3      	cmp	r3, r4
 8007272:	6025      	str	r5, [r4, #0]
 8007274:	bf18      	it	ne
 8007276:	6059      	strne	r1, [r3, #4]
 8007278:	6863      	ldr	r3, [r4, #4]
 800727a:	bf08      	it	eq
 800727c:	f8c8 1000 	streq.w	r1, [r8]
 8007280:	5162      	str	r2, [r4, r5]
 8007282:	604b      	str	r3, [r1, #4]
 8007284:	4638      	mov	r0, r7
 8007286:	f104 060b 	add.w	r6, r4, #11
 800728a:	f000 f829 	bl	80072e0 <__malloc_unlock>
 800728e:	f026 0607 	bic.w	r6, r6, #7
 8007292:	1d23      	adds	r3, r4, #4
 8007294:	1af2      	subs	r2, r6, r3
 8007296:	d0ae      	beq.n	80071f6 <_malloc_r+0x22>
 8007298:	1b9b      	subs	r3, r3, r6
 800729a:	50a3      	str	r3, [r4, r2]
 800729c:	e7ab      	b.n	80071f6 <_malloc_r+0x22>
 800729e:	42a3      	cmp	r3, r4
 80072a0:	6862      	ldr	r2, [r4, #4]
 80072a2:	d1dd      	bne.n	8007260 <_malloc_r+0x8c>
 80072a4:	f8c8 2000 	str.w	r2, [r8]
 80072a8:	e7ec      	b.n	8007284 <_malloc_r+0xb0>
 80072aa:	4623      	mov	r3, r4
 80072ac:	6864      	ldr	r4, [r4, #4]
 80072ae:	e7ac      	b.n	800720a <_malloc_r+0x36>
 80072b0:	4634      	mov	r4, r6
 80072b2:	6876      	ldr	r6, [r6, #4]
 80072b4:	e7b4      	b.n	8007220 <_malloc_r+0x4c>
 80072b6:	4613      	mov	r3, r2
 80072b8:	e7cc      	b.n	8007254 <_malloc_r+0x80>
 80072ba:	230c      	movs	r3, #12
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	4638      	mov	r0, r7
 80072c0:	f000 f80e 	bl	80072e0 <__malloc_unlock>
 80072c4:	e797      	b.n	80071f6 <_malloc_r+0x22>
 80072c6:	6025      	str	r5, [r4, #0]
 80072c8:	e7dc      	b.n	8007284 <_malloc_r+0xb0>
 80072ca:	605b      	str	r3, [r3, #4]
 80072cc:	deff      	udf	#255	; 0xff
 80072ce:	bf00      	nop
 80072d0:	20004a28 	.word	0x20004a28

080072d4 <__malloc_lock>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__malloc_lock+0x8>)
 80072d6:	f7ff b87c 	b.w	80063d2 <__retarget_lock_acquire_recursive>
 80072da:	bf00      	nop
 80072dc:	20004a24 	.word	0x20004a24

080072e0 <__malloc_unlock>:
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <__malloc_unlock+0x8>)
 80072e2:	f7ff b877 	b.w	80063d4 <__retarget_lock_release_recursive>
 80072e6:	bf00      	nop
 80072e8:	20004a24 	.word	0x20004a24

080072ec <_Balloc>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	69c6      	ldr	r6, [r0, #28]
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	b976      	cbnz	r6, 8007314 <_Balloc+0x28>
 80072f6:	2010      	movs	r0, #16
 80072f8:	f7ff ff44 	bl	8007184 <malloc>
 80072fc:	4602      	mov	r2, r0
 80072fe:	61e0      	str	r0, [r4, #28]
 8007300:	b920      	cbnz	r0, 800730c <_Balloc+0x20>
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <_Balloc+0x78>)
 8007304:	4818      	ldr	r0, [pc, #96]	; (8007368 <_Balloc+0x7c>)
 8007306:	216b      	movs	r1, #107	; 0x6b
 8007308:	f000 fd44 	bl	8007d94 <__assert_func>
 800730c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007310:	6006      	str	r6, [r0, #0]
 8007312:	60c6      	str	r6, [r0, #12]
 8007314:	69e6      	ldr	r6, [r4, #28]
 8007316:	68f3      	ldr	r3, [r6, #12]
 8007318:	b183      	cbz	r3, 800733c <_Balloc+0x50>
 800731a:	69e3      	ldr	r3, [r4, #28]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007322:	b9b8      	cbnz	r0, 8007354 <_Balloc+0x68>
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f605 	lsl.w	r6, r1, r5
 800732a:	1d72      	adds	r2, r6, #5
 800732c:	0092      	lsls	r2, r2, #2
 800732e:	4620      	mov	r0, r4
 8007330:	f000 fd4e 	bl	8007dd0 <_calloc_r>
 8007334:	b160      	cbz	r0, 8007350 <_Balloc+0x64>
 8007336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800733a:	e00e      	b.n	800735a <_Balloc+0x6e>
 800733c:	2221      	movs	r2, #33	; 0x21
 800733e:	2104      	movs	r1, #4
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fd45 	bl	8007dd0 <_calloc_r>
 8007346:	69e3      	ldr	r3, [r4, #28]
 8007348:	60f0      	str	r0, [r6, #12]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e4      	bne.n	800731a <_Balloc+0x2e>
 8007350:	2000      	movs	r0, #0
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	6802      	ldr	r2, [r0, #0]
 8007356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800735a:	2300      	movs	r3, #0
 800735c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007360:	e7f7      	b.n	8007352 <_Balloc+0x66>
 8007362:	bf00      	nop
 8007364:	080087fa 	.word	0x080087fa
 8007368:	0800887a 	.word	0x0800887a

0800736c <_Bfree>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	69c6      	ldr	r6, [r0, #28]
 8007370:	4605      	mov	r5, r0
 8007372:	460c      	mov	r4, r1
 8007374:	b976      	cbnz	r6, 8007394 <_Bfree+0x28>
 8007376:	2010      	movs	r0, #16
 8007378:	f7ff ff04 	bl	8007184 <malloc>
 800737c:	4602      	mov	r2, r0
 800737e:	61e8      	str	r0, [r5, #28]
 8007380:	b920      	cbnz	r0, 800738c <_Bfree+0x20>
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <_Bfree+0x3c>)
 8007384:	4809      	ldr	r0, [pc, #36]	; (80073ac <_Bfree+0x40>)
 8007386:	218f      	movs	r1, #143	; 0x8f
 8007388:	f000 fd04 	bl	8007d94 <__assert_func>
 800738c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007390:	6006      	str	r6, [r0, #0]
 8007392:	60c6      	str	r6, [r0, #12]
 8007394:	b13c      	cbz	r4, 80073a6 <_Bfree+0x3a>
 8007396:	69eb      	ldr	r3, [r5, #28]
 8007398:	6862      	ldr	r2, [r4, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a0:	6021      	str	r1, [r4, #0]
 80073a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	080087fa 	.word	0x080087fa
 80073ac:	0800887a 	.word	0x0800887a

080073b0 <__multadd>:
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	690d      	ldr	r5, [r1, #16]
 80073b6:	4607      	mov	r7, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	461e      	mov	r6, r3
 80073bc:	f101 0c14 	add.w	ip, r1, #20
 80073c0:	2000      	movs	r0, #0
 80073c2:	f8dc 3000 	ldr.w	r3, [ip]
 80073c6:	b299      	uxth	r1, r3
 80073c8:	fb02 6101 	mla	r1, r2, r1, r6
 80073cc:	0c1e      	lsrs	r6, r3, #16
 80073ce:	0c0b      	lsrs	r3, r1, #16
 80073d0:	fb02 3306 	mla	r3, r2, r6, r3
 80073d4:	b289      	uxth	r1, r1
 80073d6:	3001      	adds	r0, #1
 80073d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073dc:	4285      	cmp	r5, r0
 80073de:	f84c 1b04 	str.w	r1, [ip], #4
 80073e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073e6:	dcec      	bgt.n	80073c2 <__multadd+0x12>
 80073e8:	b30e      	cbz	r6, 800742e <__multadd+0x7e>
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dc19      	bgt.n	8007424 <__multadd+0x74>
 80073f0:	6861      	ldr	r1, [r4, #4]
 80073f2:	4638      	mov	r0, r7
 80073f4:	3101      	adds	r1, #1
 80073f6:	f7ff ff79 	bl	80072ec <_Balloc>
 80073fa:	4680      	mov	r8, r0
 80073fc:	b928      	cbnz	r0, 800740a <__multadd+0x5a>
 80073fe:	4602      	mov	r2, r0
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <__multadd+0x84>)
 8007402:	480d      	ldr	r0, [pc, #52]	; (8007438 <__multadd+0x88>)
 8007404:	21ba      	movs	r1, #186	; 0xba
 8007406:	f000 fcc5 	bl	8007d94 <__assert_func>
 800740a:	6922      	ldr	r2, [r4, #16]
 800740c:	3202      	adds	r2, #2
 800740e:	f104 010c 	add.w	r1, r4, #12
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	300c      	adds	r0, #12
 8007416:	f7fe ffde 	bl	80063d6 <memcpy>
 800741a:	4621      	mov	r1, r4
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ffa5 	bl	800736c <_Bfree>
 8007422:	4644      	mov	r4, r8
 8007424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007428:	3501      	adds	r5, #1
 800742a:	615e      	str	r6, [r3, #20]
 800742c:	6125      	str	r5, [r4, #16]
 800742e:	4620      	mov	r0, r4
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	08008869 	.word	0x08008869
 8007438:	0800887a 	.word	0x0800887a

0800743c <__hi0bits>:
 800743c:	0c03      	lsrs	r3, r0, #16
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	b9d3      	cbnz	r3, 8007478 <__hi0bits+0x3c>
 8007442:	0400      	lsls	r0, r0, #16
 8007444:	2310      	movs	r3, #16
 8007446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800744a:	bf04      	itt	eq
 800744c:	0200      	lsleq	r0, r0, #8
 800744e:	3308      	addeq	r3, #8
 8007450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007454:	bf04      	itt	eq
 8007456:	0100      	lsleq	r0, r0, #4
 8007458:	3304      	addeq	r3, #4
 800745a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800745e:	bf04      	itt	eq
 8007460:	0080      	lsleq	r0, r0, #2
 8007462:	3302      	addeq	r3, #2
 8007464:	2800      	cmp	r0, #0
 8007466:	db05      	blt.n	8007474 <__hi0bits+0x38>
 8007468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800746c:	f103 0301 	add.w	r3, r3, #1
 8007470:	bf08      	it	eq
 8007472:	2320      	moveq	r3, #32
 8007474:	4618      	mov	r0, r3
 8007476:	4770      	bx	lr
 8007478:	2300      	movs	r3, #0
 800747a:	e7e4      	b.n	8007446 <__hi0bits+0xa>

0800747c <__lo0bits>:
 800747c:	6803      	ldr	r3, [r0, #0]
 800747e:	f013 0207 	ands.w	r2, r3, #7
 8007482:	d00c      	beq.n	800749e <__lo0bits+0x22>
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d422      	bmi.n	80074ce <__lo0bits+0x52>
 8007488:	079a      	lsls	r2, r3, #30
 800748a:	bf49      	itett	mi
 800748c:	085b      	lsrmi	r3, r3, #1
 800748e:	089b      	lsrpl	r3, r3, #2
 8007490:	6003      	strmi	r3, [r0, #0]
 8007492:	2201      	movmi	r2, #1
 8007494:	bf5c      	itt	pl
 8007496:	6003      	strpl	r3, [r0, #0]
 8007498:	2202      	movpl	r2, #2
 800749a:	4610      	mov	r0, r2
 800749c:	4770      	bx	lr
 800749e:	b299      	uxth	r1, r3
 80074a0:	b909      	cbnz	r1, 80074a6 <__lo0bits+0x2a>
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	2210      	movs	r2, #16
 80074a6:	b2d9      	uxtb	r1, r3
 80074a8:	b909      	cbnz	r1, 80074ae <__lo0bits+0x32>
 80074aa:	3208      	adds	r2, #8
 80074ac:	0a1b      	lsrs	r3, r3, #8
 80074ae:	0719      	lsls	r1, r3, #28
 80074b0:	bf04      	itt	eq
 80074b2:	091b      	lsreq	r3, r3, #4
 80074b4:	3204      	addeq	r2, #4
 80074b6:	0799      	lsls	r1, r3, #30
 80074b8:	bf04      	itt	eq
 80074ba:	089b      	lsreq	r3, r3, #2
 80074bc:	3202      	addeq	r2, #2
 80074be:	07d9      	lsls	r1, r3, #31
 80074c0:	d403      	bmi.n	80074ca <__lo0bits+0x4e>
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	f102 0201 	add.w	r2, r2, #1
 80074c8:	d003      	beq.n	80074d2 <__lo0bits+0x56>
 80074ca:	6003      	str	r3, [r0, #0]
 80074cc:	e7e5      	b.n	800749a <__lo0bits+0x1e>
 80074ce:	2200      	movs	r2, #0
 80074d0:	e7e3      	b.n	800749a <__lo0bits+0x1e>
 80074d2:	2220      	movs	r2, #32
 80074d4:	e7e1      	b.n	800749a <__lo0bits+0x1e>
	...

080074d8 <__i2b>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	460c      	mov	r4, r1
 80074dc:	2101      	movs	r1, #1
 80074de:	f7ff ff05 	bl	80072ec <_Balloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	b928      	cbnz	r0, 80074f2 <__i2b+0x1a>
 80074e6:	4b05      	ldr	r3, [pc, #20]	; (80074fc <__i2b+0x24>)
 80074e8:	4805      	ldr	r0, [pc, #20]	; (8007500 <__i2b+0x28>)
 80074ea:	f240 1145 	movw	r1, #325	; 0x145
 80074ee:	f000 fc51 	bl	8007d94 <__assert_func>
 80074f2:	2301      	movs	r3, #1
 80074f4:	6144      	str	r4, [r0, #20]
 80074f6:	6103      	str	r3, [r0, #16]
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	08008869 	.word	0x08008869
 8007500:	0800887a 	.word	0x0800887a

08007504 <__multiply>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4691      	mov	r9, r2
 800750a:	690a      	ldr	r2, [r1, #16]
 800750c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007510:	429a      	cmp	r2, r3
 8007512:	bfb8      	it	lt
 8007514:	460b      	movlt	r3, r1
 8007516:	460c      	mov	r4, r1
 8007518:	bfbc      	itt	lt
 800751a:	464c      	movlt	r4, r9
 800751c:	4699      	movlt	r9, r3
 800751e:	6927      	ldr	r7, [r4, #16]
 8007520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	6861      	ldr	r1, [r4, #4]
 8007528:	eb07 060a 	add.w	r6, r7, sl
 800752c:	42b3      	cmp	r3, r6
 800752e:	b085      	sub	sp, #20
 8007530:	bfb8      	it	lt
 8007532:	3101      	addlt	r1, #1
 8007534:	f7ff feda 	bl	80072ec <_Balloc>
 8007538:	b930      	cbnz	r0, 8007548 <__multiply+0x44>
 800753a:	4602      	mov	r2, r0
 800753c:	4b44      	ldr	r3, [pc, #272]	; (8007650 <__multiply+0x14c>)
 800753e:	4845      	ldr	r0, [pc, #276]	; (8007654 <__multiply+0x150>)
 8007540:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007544:	f000 fc26 	bl	8007d94 <__assert_func>
 8007548:	f100 0514 	add.w	r5, r0, #20
 800754c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007550:	462b      	mov	r3, r5
 8007552:	2200      	movs	r2, #0
 8007554:	4543      	cmp	r3, r8
 8007556:	d321      	bcc.n	800759c <__multiply+0x98>
 8007558:	f104 0314 	add.w	r3, r4, #20
 800755c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007560:	f109 0314 	add.w	r3, r9, #20
 8007564:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007568:	9202      	str	r2, [sp, #8]
 800756a:	1b3a      	subs	r2, r7, r4
 800756c:	3a15      	subs	r2, #21
 800756e:	f022 0203 	bic.w	r2, r2, #3
 8007572:	3204      	adds	r2, #4
 8007574:	f104 0115 	add.w	r1, r4, #21
 8007578:	428f      	cmp	r7, r1
 800757a:	bf38      	it	cc
 800757c:	2204      	movcc	r2, #4
 800757e:	9201      	str	r2, [sp, #4]
 8007580:	9a02      	ldr	r2, [sp, #8]
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	429a      	cmp	r2, r3
 8007586:	d80c      	bhi.n	80075a2 <__multiply+0x9e>
 8007588:	2e00      	cmp	r6, #0
 800758a:	dd03      	ble.n	8007594 <__multiply+0x90>
 800758c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05b      	beq.n	800764c <__multiply+0x148>
 8007594:	6106      	str	r6, [r0, #16]
 8007596:	b005      	add	sp, #20
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	f843 2b04 	str.w	r2, [r3], #4
 80075a0:	e7d8      	b.n	8007554 <__multiply+0x50>
 80075a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80075a6:	f1ba 0f00 	cmp.w	sl, #0
 80075aa:	d024      	beq.n	80075f6 <__multiply+0xf2>
 80075ac:	f104 0e14 	add.w	lr, r4, #20
 80075b0:	46a9      	mov	r9, r5
 80075b2:	f04f 0c00 	mov.w	ip, #0
 80075b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075ba:	f8d9 1000 	ldr.w	r1, [r9]
 80075be:	fa1f fb82 	uxth.w	fp, r2
 80075c2:	b289      	uxth	r1, r1
 80075c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80075c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075cc:	f8d9 2000 	ldr.w	r2, [r9]
 80075d0:	4461      	add	r1, ip
 80075d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80075da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075de:	b289      	uxth	r1, r1
 80075e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075e4:	4577      	cmp	r7, lr
 80075e6:	f849 1b04 	str.w	r1, [r9], #4
 80075ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075ee:	d8e2      	bhi.n	80075b6 <__multiply+0xb2>
 80075f0:	9a01      	ldr	r2, [sp, #4]
 80075f2:	f845 c002 	str.w	ip, [r5, r2]
 80075f6:	9a03      	ldr	r2, [sp, #12]
 80075f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075fc:	3304      	adds	r3, #4
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	d021      	beq.n	8007648 <__multiply+0x144>
 8007604:	6829      	ldr	r1, [r5, #0]
 8007606:	f104 0c14 	add.w	ip, r4, #20
 800760a:	46ae      	mov	lr, r5
 800760c:	f04f 0a00 	mov.w	sl, #0
 8007610:	f8bc b000 	ldrh.w	fp, [ip]
 8007614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007618:	fb09 220b 	mla	r2, r9, fp, r2
 800761c:	4452      	add	r2, sl
 800761e:	b289      	uxth	r1, r1
 8007620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007624:	f84e 1b04 	str.w	r1, [lr], #4
 8007628:	f85c 1b04 	ldr.w	r1, [ip], #4
 800762c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007630:	f8be 1000 	ldrh.w	r1, [lr]
 8007634:	fb09 110a 	mla	r1, r9, sl, r1
 8007638:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800763c:	4567      	cmp	r7, ip
 800763e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007642:	d8e5      	bhi.n	8007610 <__multiply+0x10c>
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	50a9      	str	r1, [r5, r2]
 8007648:	3504      	adds	r5, #4
 800764a:	e799      	b.n	8007580 <__multiply+0x7c>
 800764c:	3e01      	subs	r6, #1
 800764e:	e79b      	b.n	8007588 <__multiply+0x84>
 8007650:	08008869 	.word	0x08008869
 8007654:	0800887a 	.word	0x0800887a

08007658 <__pow5mult>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	4615      	mov	r5, r2
 800765e:	f012 0203 	ands.w	r2, r2, #3
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	d007      	beq.n	8007678 <__pow5mult+0x20>
 8007668:	4c25      	ldr	r4, [pc, #148]	; (8007700 <__pow5mult+0xa8>)
 800766a:	3a01      	subs	r2, #1
 800766c:	2300      	movs	r3, #0
 800766e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007672:	f7ff fe9d 	bl	80073b0 <__multadd>
 8007676:	4607      	mov	r7, r0
 8007678:	10ad      	asrs	r5, r5, #2
 800767a:	d03d      	beq.n	80076f8 <__pow5mult+0xa0>
 800767c:	69f4      	ldr	r4, [r6, #28]
 800767e:	b97c      	cbnz	r4, 80076a0 <__pow5mult+0x48>
 8007680:	2010      	movs	r0, #16
 8007682:	f7ff fd7f 	bl	8007184 <malloc>
 8007686:	4602      	mov	r2, r0
 8007688:	61f0      	str	r0, [r6, #28]
 800768a:	b928      	cbnz	r0, 8007698 <__pow5mult+0x40>
 800768c:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <__pow5mult+0xac>)
 800768e:	481e      	ldr	r0, [pc, #120]	; (8007708 <__pow5mult+0xb0>)
 8007690:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007694:	f000 fb7e 	bl	8007d94 <__assert_func>
 8007698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800769c:	6004      	str	r4, [r0, #0]
 800769e:	60c4      	str	r4, [r0, #12]
 80076a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80076a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076a8:	b94c      	cbnz	r4, 80076be <__pow5mult+0x66>
 80076aa:	f240 2171 	movw	r1, #625	; 0x271
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ff12 	bl	80074d8 <__i2b>
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ba:	4604      	mov	r4, r0
 80076bc:	6003      	str	r3, [r0, #0]
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	07eb      	lsls	r3, r5, #31
 80076c4:	d50a      	bpl.n	80076dc <__pow5mult+0x84>
 80076c6:	4639      	mov	r1, r7
 80076c8:	4622      	mov	r2, r4
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ff1a 	bl	8007504 <__multiply>
 80076d0:	4639      	mov	r1, r7
 80076d2:	4680      	mov	r8, r0
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7ff fe49 	bl	800736c <_Bfree>
 80076da:	4647      	mov	r7, r8
 80076dc:	106d      	asrs	r5, r5, #1
 80076de:	d00b      	beq.n	80076f8 <__pow5mult+0xa0>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	b938      	cbnz	r0, 80076f4 <__pow5mult+0x9c>
 80076e4:	4622      	mov	r2, r4
 80076e6:	4621      	mov	r1, r4
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7ff ff0b 	bl	8007504 <__multiply>
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	f8c0 9000 	str.w	r9, [r0]
 80076f4:	4604      	mov	r4, r0
 80076f6:	e7e4      	b.n	80076c2 <__pow5mult+0x6a>
 80076f8:	4638      	mov	r0, r7
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fe:	bf00      	nop
 8007700:	080089c8 	.word	0x080089c8
 8007704:	080087fa 	.word	0x080087fa
 8007708:	0800887a 	.word	0x0800887a

0800770c <__lshift>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	6849      	ldr	r1, [r1, #4]
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	4607      	mov	r7, r0
 800771e:	4691      	mov	r9, r2
 8007720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007724:	f108 0601 	add.w	r6, r8, #1
 8007728:	42b3      	cmp	r3, r6
 800772a:	db0b      	blt.n	8007744 <__lshift+0x38>
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff fddd 	bl	80072ec <_Balloc>
 8007732:	4605      	mov	r5, r0
 8007734:	b948      	cbnz	r0, 800774a <__lshift+0x3e>
 8007736:	4602      	mov	r2, r0
 8007738:	4b28      	ldr	r3, [pc, #160]	; (80077dc <__lshift+0xd0>)
 800773a:	4829      	ldr	r0, [pc, #164]	; (80077e0 <__lshift+0xd4>)
 800773c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007740:	f000 fb28 	bl	8007d94 <__assert_func>
 8007744:	3101      	adds	r1, #1
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	e7ee      	b.n	8007728 <__lshift+0x1c>
 800774a:	2300      	movs	r3, #0
 800774c:	f100 0114 	add.w	r1, r0, #20
 8007750:	f100 0210 	add.w	r2, r0, #16
 8007754:	4618      	mov	r0, r3
 8007756:	4553      	cmp	r3, sl
 8007758:	db33      	blt.n	80077c2 <__lshift+0xb6>
 800775a:	6920      	ldr	r0, [r4, #16]
 800775c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007760:	f104 0314 	add.w	r3, r4, #20
 8007764:	f019 091f 	ands.w	r9, r9, #31
 8007768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800776c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007770:	d02b      	beq.n	80077ca <__lshift+0xbe>
 8007772:	f1c9 0e20 	rsb	lr, r9, #32
 8007776:	468a      	mov	sl, r1
 8007778:	2200      	movs	r2, #0
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	fa00 f009 	lsl.w	r0, r0, r9
 8007780:	4310      	orrs	r0, r2
 8007782:	f84a 0b04 	str.w	r0, [sl], #4
 8007786:	f853 2b04 	ldr.w	r2, [r3], #4
 800778a:	459c      	cmp	ip, r3
 800778c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007790:	d8f3      	bhi.n	800777a <__lshift+0x6e>
 8007792:	ebac 0304 	sub.w	r3, ip, r4
 8007796:	3b15      	subs	r3, #21
 8007798:	f023 0303 	bic.w	r3, r3, #3
 800779c:	3304      	adds	r3, #4
 800779e:	f104 0015 	add.w	r0, r4, #21
 80077a2:	4584      	cmp	ip, r0
 80077a4:	bf38      	it	cc
 80077a6:	2304      	movcc	r3, #4
 80077a8:	50ca      	str	r2, [r1, r3]
 80077aa:	b10a      	cbz	r2, 80077b0 <__lshift+0xa4>
 80077ac:	f108 0602 	add.w	r6, r8, #2
 80077b0:	3e01      	subs	r6, #1
 80077b2:	4638      	mov	r0, r7
 80077b4:	612e      	str	r6, [r5, #16]
 80077b6:	4621      	mov	r1, r4
 80077b8:	f7ff fdd8 	bl	800736c <_Bfree>
 80077bc:	4628      	mov	r0, r5
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077c6:	3301      	adds	r3, #1
 80077c8:	e7c5      	b.n	8007756 <__lshift+0x4a>
 80077ca:	3904      	subs	r1, #4
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077d4:	459c      	cmp	ip, r3
 80077d6:	d8f9      	bhi.n	80077cc <__lshift+0xc0>
 80077d8:	e7ea      	b.n	80077b0 <__lshift+0xa4>
 80077da:	bf00      	nop
 80077dc:	08008869 	.word	0x08008869
 80077e0:	0800887a 	.word	0x0800887a

080077e4 <__mcmp>:
 80077e4:	b530      	push	{r4, r5, lr}
 80077e6:	6902      	ldr	r2, [r0, #16]
 80077e8:	690c      	ldr	r4, [r1, #16]
 80077ea:	1b12      	subs	r2, r2, r4
 80077ec:	d10e      	bne.n	800780c <__mcmp+0x28>
 80077ee:	f100 0314 	add.w	r3, r0, #20
 80077f2:	3114      	adds	r1, #20
 80077f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007800:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007804:	42a5      	cmp	r5, r4
 8007806:	d003      	beq.n	8007810 <__mcmp+0x2c>
 8007808:	d305      	bcc.n	8007816 <__mcmp+0x32>
 800780a:	2201      	movs	r2, #1
 800780c:	4610      	mov	r0, r2
 800780e:	bd30      	pop	{r4, r5, pc}
 8007810:	4283      	cmp	r3, r0
 8007812:	d3f3      	bcc.n	80077fc <__mcmp+0x18>
 8007814:	e7fa      	b.n	800780c <__mcmp+0x28>
 8007816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800781a:	e7f7      	b.n	800780c <__mcmp+0x28>

0800781c <__mdiff>:
 800781c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	460c      	mov	r4, r1
 8007822:	4606      	mov	r6, r0
 8007824:	4611      	mov	r1, r2
 8007826:	4620      	mov	r0, r4
 8007828:	4690      	mov	r8, r2
 800782a:	f7ff ffdb 	bl	80077e4 <__mcmp>
 800782e:	1e05      	subs	r5, r0, #0
 8007830:	d110      	bne.n	8007854 <__mdiff+0x38>
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff fd59 	bl	80072ec <_Balloc>
 800783a:	b930      	cbnz	r0, 800784a <__mdiff+0x2e>
 800783c:	4b3a      	ldr	r3, [pc, #232]	; (8007928 <__mdiff+0x10c>)
 800783e:	4602      	mov	r2, r0
 8007840:	f240 2137 	movw	r1, #567	; 0x237
 8007844:	4839      	ldr	r0, [pc, #228]	; (800792c <__mdiff+0x110>)
 8007846:	f000 faa5 	bl	8007d94 <__assert_func>
 800784a:	2301      	movs	r3, #1
 800784c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007854:	bfa4      	itt	ge
 8007856:	4643      	movge	r3, r8
 8007858:	46a0      	movge	r8, r4
 800785a:	4630      	mov	r0, r6
 800785c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007860:	bfa6      	itte	ge
 8007862:	461c      	movge	r4, r3
 8007864:	2500      	movge	r5, #0
 8007866:	2501      	movlt	r5, #1
 8007868:	f7ff fd40 	bl	80072ec <_Balloc>
 800786c:	b920      	cbnz	r0, 8007878 <__mdiff+0x5c>
 800786e:	4b2e      	ldr	r3, [pc, #184]	; (8007928 <__mdiff+0x10c>)
 8007870:	4602      	mov	r2, r0
 8007872:	f240 2145 	movw	r1, #581	; 0x245
 8007876:	e7e5      	b.n	8007844 <__mdiff+0x28>
 8007878:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800787c:	6926      	ldr	r6, [r4, #16]
 800787e:	60c5      	str	r5, [r0, #12]
 8007880:	f104 0914 	add.w	r9, r4, #20
 8007884:	f108 0514 	add.w	r5, r8, #20
 8007888:	f100 0e14 	add.w	lr, r0, #20
 800788c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007890:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007894:	f108 0210 	add.w	r2, r8, #16
 8007898:	46f2      	mov	sl, lr
 800789a:	2100      	movs	r1, #0
 800789c:	f859 3b04 	ldr.w	r3, [r9], #4
 80078a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078a4:	fa11 f88b 	uxtah	r8, r1, fp
 80078a8:	b299      	uxth	r1, r3
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	eba8 0801 	sub.w	r8, r8, r1
 80078b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078b8:	fa1f f888 	uxth.w	r8, r8
 80078bc:	1419      	asrs	r1, r3, #16
 80078be:	454e      	cmp	r6, r9
 80078c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078c4:	f84a 3b04 	str.w	r3, [sl], #4
 80078c8:	d8e8      	bhi.n	800789c <__mdiff+0x80>
 80078ca:	1b33      	subs	r3, r6, r4
 80078cc:	3b15      	subs	r3, #21
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	3304      	adds	r3, #4
 80078d4:	3415      	adds	r4, #21
 80078d6:	42a6      	cmp	r6, r4
 80078d8:	bf38      	it	cc
 80078da:	2304      	movcc	r3, #4
 80078dc:	441d      	add	r5, r3
 80078de:	4473      	add	r3, lr
 80078e0:	469e      	mov	lr, r3
 80078e2:	462e      	mov	r6, r5
 80078e4:	4566      	cmp	r6, ip
 80078e6:	d30e      	bcc.n	8007906 <__mdiff+0xea>
 80078e8:	f10c 0203 	add.w	r2, ip, #3
 80078ec:	1b52      	subs	r2, r2, r5
 80078ee:	f022 0203 	bic.w	r2, r2, #3
 80078f2:	3d03      	subs	r5, #3
 80078f4:	45ac      	cmp	ip, r5
 80078f6:	bf38      	it	cc
 80078f8:	2200      	movcc	r2, #0
 80078fa:	4413      	add	r3, r2
 80078fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007900:	b17a      	cbz	r2, 8007922 <__mdiff+0x106>
 8007902:	6107      	str	r7, [r0, #16]
 8007904:	e7a4      	b.n	8007850 <__mdiff+0x34>
 8007906:	f856 8b04 	ldr.w	r8, [r6], #4
 800790a:	fa11 f288 	uxtah	r2, r1, r8
 800790e:	1414      	asrs	r4, r2, #16
 8007910:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007914:	b292      	uxth	r2, r2
 8007916:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800791a:	f84e 2b04 	str.w	r2, [lr], #4
 800791e:	1421      	asrs	r1, r4, #16
 8007920:	e7e0      	b.n	80078e4 <__mdiff+0xc8>
 8007922:	3f01      	subs	r7, #1
 8007924:	e7ea      	b.n	80078fc <__mdiff+0xe0>
 8007926:	bf00      	nop
 8007928:	08008869 	.word	0x08008869
 800792c:	0800887a 	.word	0x0800887a

08007930 <__d2b>:
 8007930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007934:	460f      	mov	r7, r1
 8007936:	2101      	movs	r1, #1
 8007938:	ec59 8b10 	vmov	r8, r9, d0
 800793c:	4616      	mov	r6, r2
 800793e:	f7ff fcd5 	bl	80072ec <_Balloc>
 8007942:	4604      	mov	r4, r0
 8007944:	b930      	cbnz	r0, 8007954 <__d2b+0x24>
 8007946:	4602      	mov	r2, r0
 8007948:	4b24      	ldr	r3, [pc, #144]	; (80079dc <__d2b+0xac>)
 800794a:	4825      	ldr	r0, [pc, #148]	; (80079e0 <__d2b+0xb0>)
 800794c:	f240 310f 	movw	r1, #783	; 0x30f
 8007950:	f000 fa20 	bl	8007d94 <__assert_func>
 8007954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800795c:	bb2d      	cbnz	r5, 80079aa <__d2b+0x7a>
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f1b8 0300 	subs.w	r3, r8, #0
 8007964:	d026      	beq.n	80079b4 <__d2b+0x84>
 8007966:	4668      	mov	r0, sp
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f7ff fd87 	bl	800747c <__lo0bits>
 800796e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007972:	b1e8      	cbz	r0, 80079b0 <__d2b+0x80>
 8007974:	f1c0 0320 	rsb	r3, r0, #32
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	430b      	orrs	r3, r1
 800797e:	40c2      	lsrs	r2, r0
 8007980:	6163      	str	r3, [r4, #20]
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	61a3      	str	r3, [r4, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2202      	movne	r2, #2
 800798e:	2201      	moveq	r2, #1
 8007990:	6122      	str	r2, [r4, #16]
 8007992:	b1bd      	cbz	r5, 80079c4 <__d2b+0x94>
 8007994:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007998:	4405      	add	r5, r0
 800799a:	603d      	str	r5, [r7, #0]
 800799c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079a0:	6030      	str	r0, [r6, #0]
 80079a2:	4620      	mov	r0, r4
 80079a4:	b003      	add	sp, #12
 80079a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ae:	e7d6      	b.n	800795e <__d2b+0x2e>
 80079b0:	6161      	str	r1, [r4, #20]
 80079b2:	e7e7      	b.n	8007984 <__d2b+0x54>
 80079b4:	a801      	add	r0, sp, #4
 80079b6:	f7ff fd61 	bl	800747c <__lo0bits>
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	6163      	str	r3, [r4, #20]
 80079be:	3020      	adds	r0, #32
 80079c0:	2201      	movs	r2, #1
 80079c2:	e7e5      	b.n	8007990 <__d2b+0x60>
 80079c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079cc:	6038      	str	r0, [r7, #0]
 80079ce:	6918      	ldr	r0, [r3, #16]
 80079d0:	f7ff fd34 	bl	800743c <__hi0bits>
 80079d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079d8:	e7e2      	b.n	80079a0 <__d2b+0x70>
 80079da:	bf00      	nop
 80079dc:	08008869 	.word	0x08008869
 80079e0:	0800887a 	.word	0x0800887a

080079e4 <__sfputc_r>:
 80079e4:	6893      	ldr	r3, [r2, #8]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	b410      	push	{r4}
 80079ec:	6093      	str	r3, [r2, #8]
 80079ee:	da08      	bge.n	8007a02 <__sfputc_r+0x1e>
 80079f0:	6994      	ldr	r4, [r2, #24]
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	db01      	blt.n	80079fa <__sfputc_r+0x16>
 80079f6:	290a      	cmp	r1, #10
 80079f8:	d103      	bne.n	8007a02 <__sfputc_r+0x1e>
 80079fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079fe:	f7fe bb6c 	b.w	80060da <__swbuf_r>
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	1c58      	adds	r0, r3, #1
 8007a06:	6010      	str	r0, [r2, #0]
 8007a08:	7019      	strb	r1, [r3, #0]
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <__sfputs_r>:
 8007a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a14:	4606      	mov	r6, r0
 8007a16:	460f      	mov	r7, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	18d5      	adds	r5, r2, r3
 8007a1c:	42ac      	cmp	r4, r5
 8007a1e:	d101      	bne.n	8007a24 <__sfputs_r+0x12>
 8007a20:	2000      	movs	r0, #0
 8007a22:	e007      	b.n	8007a34 <__sfputs_r+0x22>
 8007a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a28:	463a      	mov	r2, r7
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f7ff ffda 	bl	80079e4 <__sfputc_r>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d1f3      	bne.n	8007a1c <__sfputs_r+0xa>
 8007a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a38 <_vfiprintf_r>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	460d      	mov	r5, r1
 8007a3e:	b09d      	sub	sp, #116	; 0x74
 8007a40:	4614      	mov	r4, r2
 8007a42:	4698      	mov	r8, r3
 8007a44:	4606      	mov	r6, r0
 8007a46:	b118      	cbz	r0, 8007a50 <_vfiprintf_r+0x18>
 8007a48:	6a03      	ldr	r3, [r0, #32]
 8007a4a:	b90b      	cbnz	r3, 8007a50 <_vfiprintf_r+0x18>
 8007a4c:	f7fe fa5e 	bl	8005f0c <__sinit>
 8007a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a52:	07d9      	lsls	r1, r3, #31
 8007a54:	d405      	bmi.n	8007a62 <_vfiprintf_r+0x2a>
 8007a56:	89ab      	ldrh	r3, [r5, #12]
 8007a58:	059a      	lsls	r2, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_vfiprintf_r+0x2a>
 8007a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a5e:	f7fe fcb8 	bl	80063d2 <__retarget_lock_acquire_recursive>
 8007a62:	89ab      	ldrh	r3, [r5, #12]
 8007a64:	071b      	lsls	r3, r3, #28
 8007a66:	d501      	bpl.n	8007a6c <_vfiprintf_r+0x34>
 8007a68:	692b      	ldr	r3, [r5, #16]
 8007a6a:	b99b      	cbnz	r3, 8007a94 <_vfiprintf_r+0x5c>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7fe fb70 	bl	8006154 <__swsetup_r>
 8007a74:	b170      	cbz	r0, 8007a94 <_vfiprintf_r+0x5c>
 8007a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a78:	07dc      	lsls	r4, r3, #31
 8007a7a:	d504      	bpl.n	8007a86 <_vfiprintf_r+0x4e>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a80:	b01d      	add	sp, #116	; 0x74
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	0598      	lsls	r0, r3, #22
 8007a8a:	d4f7      	bmi.n	8007a7c <_vfiprintf_r+0x44>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8e:	f7fe fca1 	bl	80063d4 <__retarget_lock_release_recursive>
 8007a92:	e7f3      	b.n	8007a7c <_vfiprintf_r+0x44>
 8007a94:	2300      	movs	r3, #0
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
 8007a98:	2320      	movs	r3, #32
 8007a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa2:	2330      	movs	r3, #48	; 0x30
 8007aa4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c58 <_vfiprintf_r+0x220>
 8007aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aac:	f04f 0901 	mov.w	r9, #1
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	469a      	mov	sl, r3
 8007ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab8:	b10a      	cbz	r2, 8007abe <_vfiprintf_r+0x86>
 8007aba:	2a25      	cmp	r2, #37	; 0x25
 8007abc:	d1f9      	bne.n	8007ab2 <_vfiprintf_r+0x7a>
 8007abe:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac2:	d00b      	beq.n	8007adc <_vfiprintf_r+0xa4>
 8007ac4:	465b      	mov	r3, fp
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7ff ffa1 	bl	8007a12 <__sfputs_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f000 80a9 	beq.w	8007c28 <_vfiprintf_r+0x1f0>
 8007ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad8:	445a      	add	r2, fp
 8007ada:	9209      	str	r2, [sp, #36]	; 0x24
 8007adc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80a1 	beq.w	8007c28 <_vfiprintf_r+0x1f0>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af0:	f10a 0a01 	add.w	sl, sl, #1
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	9307      	str	r3, [sp, #28]
 8007af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007afc:	931a      	str	r3, [sp, #104]	; 0x68
 8007afe:	4654      	mov	r4, sl
 8007b00:	2205      	movs	r2, #5
 8007b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b06:	4854      	ldr	r0, [pc, #336]	; (8007c58 <_vfiprintf_r+0x220>)
 8007b08:	f7f8 fb72 	bl	80001f0 <memchr>
 8007b0c:	9a04      	ldr	r2, [sp, #16]
 8007b0e:	b9d8      	cbnz	r0, 8007b48 <_vfiprintf_r+0x110>
 8007b10:	06d1      	lsls	r1, r2, #27
 8007b12:	bf44      	itt	mi
 8007b14:	2320      	movmi	r3, #32
 8007b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1a:	0713      	lsls	r3, r2, #28
 8007b1c:	bf44      	itt	mi
 8007b1e:	232b      	movmi	r3, #43	; 0x2b
 8007b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b24:	f89a 3000 	ldrb.w	r3, [sl]
 8007b28:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2a:	d015      	beq.n	8007b58 <_vfiprintf_r+0x120>
 8007b2c:	9a07      	ldr	r2, [sp, #28]
 8007b2e:	4654      	mov	r4, sl
 8007b30:	2000      	movs	r0, #0
 8007b32:	f04f 0c0a 	mov.w	ip, #10
 8007b36:	4621      	mov	r1, r4
 8007b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b3c:	3b30      	subs	r3, #48	; 0x30
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d94d      	bls.n	8007bde <_vfiprintf_r+0x1a6>
 8007b42:	b1b0      	cbz	r0, 8007b72 <_vfiprintf_r+0x13a>
 8007b44:	9207      	str	r2, [sp, #28]
 8007b46:	e014      	b.n	8007b72 <_vfiprintf_r+0x13a>
 8007b48:	eba0 0308 	sub.w	r3, r0, r8
 8007b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	46a2      	mov	sl, r4
 8007b56:	e7d2      	b.n	8007afe <_vfiprintf_r+0xc6>
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	1d19      	adds	r1, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfbb      	ittet	lt
 8007b64:	425b      	neglt	r3, r3
 8007b66:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6a:	9307      	strge	r3, [sp, #28]
 8007b6c:	9307      	strlt	r3, [sp, #28]
 8007b6e:	bfb8      	it	lt
 8007b70:	9204      	strlt	r2, [sp, #16]
 8007b72:	7823      	ldrb	r3, [r4, #0]
 8007b74:	2b2e      	cmp	r3, #46	; 0x2e
 8007b76:	d10c      	bne.n	8007b92 <_vfiprintf_r+0x15a>
 8007b78:	7863      	ldrb	r3, [r4, #1]
 8007b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b7c:	d134      	bne.n	8007be8 <_vfiprintf_r+0x1b0>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	1d1a      	adds	r2, r3, #4
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	9203      	str	r2, [sp, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bfb8      	it	lt
 8007b8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b8e:	3402      	adds	r4, #2
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c68 <_vfiprintf_r+0x230>
 8007b96:	7821      	ldrb	r1, [r4, #0]
 8007b98:	2203      	movs	r2, #3
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	f7f8 fb28 	bl	80001f0 <memchr>
 8007ba0:	b138      	cbz	r0, 8007bb2 <_vfiprintf_r+0x17a>
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	eba0 000a 	sub.w	r0, r0, sl
 8007ba8:	2240      	movs	r2, #64	; 0x40
 8007baa:	4082      	lsls	r2, r0
 8007bac:	4313      	orrs	r3, r2
 8007bae:	3401      	adds	r4, #1
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	4829      	ldr	r0, [pc, #164]	; (8007c5c <_vfiprintf_r+0x224>)
 8007bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	f7f8 fb17 	bl	80001f0 <memchr>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d03f      	beq.n	8007c46 <_vfiprintf_r+0x20e>
 8007bc6:	4b26      	ldr	r3, [pc, #152]	; (8007c60 <_vfiprintf_r+0x228>)
 8007bc8:	bb1b      	cbnz	r3, 8007c12 <_vfiprintf_r+0x1da>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	f023 0307 	bic.w	r3, r3, #7
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd8:	443b      	add	r3, r7
 8007bda:	9309      	str	r3, [sp, #36]	; 0x24
 8007bdc:	e768      	b.n	8007ab0 <_vfiprintf_r+0x78>
 8007bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be2:	460c      	mov	r4, r1
 8007be4:	2001      	movs	r0, #1
 8007be6:	e7a6      	b.n	8007b36 <_vfiprintf_r+0xfe>
 8007be8:	2300      	movs	r3, #0
 8007bea:	3401      	adds	r4, #1
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	f04f 0c0a 	mov.w	ip, #10
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfa:	3a30      	subs	r2, #48	; 0x30
 8007bfc:	2a09      	cmp	r2, #9
 8007bfe:	d903      	bls.n	8007c08 <_vfiprintf_r+0x1d0>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0c6      	beq.n	8007b92 <_vfiprintf_r+0x15a>
 8007c04:	9105      	str	r1, [sp, #20]
 8007c06:	e7c4      	b.n	8007b92 <_vfiprintf_r+0x15a>
 8007c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e7f0      	b.n	8007bf4 <_vfiprintf_r+0x1bc>
 8007c12:	ab03      	add	r3, sp, #12
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	462a      	mov	r2, r5
 8007c18:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <_vfiprintf_r+0x22c>)
 8007c1a:	a904      	add	r1, sp, #16
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7fd fc75 	bl	800550c <_printf_float>
 8007c22:	4607      	mov	r7, r0
 8007c24:	1c78      	adds	r0, r7, #1
 8007c26:	d1d6      	bne.n	8007bd6 <_vfiprintf_r+0x19e>
 8007c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d405      	bmi.n	8007c3a <_vfiprintf_r+0x202>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	059a      	lsls	r2, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_vfiprintf_r+0x202>
 8007c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c36:	f7fe fbcd 	bl	80063d4 <__retarget_lock_release_recursive>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	065b      	lsls	r3, r3, #25
 8007c3e:	f53f af1d 	bmi.w	8007a7c <_vfiprintf_r+0x44>
 8007c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c44:	e71c      	b.n	8007a80 <_vfiprintf_r+0x48>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <_vfiprintf_r+0x22c>)
 8007c4e:	a904      	add	r1, sp, #16
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7fd feff 	bl	8005a54 <_printf_i>
 8007c56:	e7e4      	b.n	8007c22 <_vfiprintf_r+0x1ea>
 8007c58:	080089d4 	.word	0x080089d4
 8007c5c:	080089de 	.word	0x080089de
 8007c60:	0800550d 	.word	0x0800550d
 8007c64:	08007a13 	.word	0x08007a13
 8007c68:	080089da 	.word	0x080089da

08007c6c <__swhatbuf_r>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	460c      	mov	r4, r1
 8007c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	b096      	sub	sp, #88	; 0x58
 8007c78:	4615      	mov	r5, r2
 8007c7a:	461e      	mov	r6, r3
 8007c7c:	da0d      	bge.n	8007c9a <__swhatbuf_r+0x2e>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c84:	f04f 0100 	mov.w	r1, #0
 8007c88:	bf0c      	ite	eq
 8007c8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c8e:	2340      	movne	r3, #64	; 0x40
 8007c90:	2000      	movs	r0, #0
 8007c92:	6031      	str	r1, [r6, #0]
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	b016      	add	sp, #88	; 0x58
 8007c98:	bd70      	pop	{r4, r5, r6, pc}
 8007c9a:	466a      	mov	r2, sp
 8007c9c:	f000 f848 	bl	8007d30 <_fstat_r>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	dbec      	blt.n	8007c7e <__swhatbuf_r+0x12>
 8007ca4:	9901      	ldr	r1, [sp, #4]
 8007ca6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007caa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cae:	4259      	negs	r1, r3
 8007cb0:	4159      	adcs	r1, r3
 8007cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb6:	e7eb      	b.n	8007c90 <__swhatbuf_r+0x24>

08007cb8 <__smakebuf_r>:
 8007cb8:	898b      	ldrh	r3, [r1, #12]
 8007cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cbc:	079d      	lsls	r5, r3, #30
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	d507      	bpl.n	8007cd4 <__smakebuf_r+0x1c>
 8007cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	6163      	str	r3, [r4, #20]
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	ab01      	add	r3, sp, #4
 8007cd6:	466a      	mov	r2, sp
 8007cd8:	f7ff ffc8 	bl	8007c6c <__swhatbuf_r>
 8007cdc:	9900      	ldr	r1, [sp, #0]
 8007cde:	4605      	mov	r5, r0
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff fa77 	bl	80071d4 <_malloc_r>
 8007ce6:	b948      	cbnz	r0, 8007cfc <__smakebuf_r+0x44>
 8007ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cec:	059a      	lsls	r2, r3, #22
 8007cee:	d4ef      	bmi.n	8007cd0 <__smakebuf_r+0x18>
 8007cf0:	f023 0303 	bic.w	r3, r3, #3
 8007cf4:	f043 0302 	orr.w	r3, r3, #2
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e7e3      	b.n	8007cc4 <__smakebuf_r+0xc>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	6020      	str	r0, [r4, #0]
 8007d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	6163      	str	r3, [r4, #20]
 8007d0a:	9b01      	ldr	r3, [sp, #4]
 8007d0c:	6120      	str	r0, [r4, #16]
 8007d0e:	b15b      	cbz	r3, 8007d28 <__smakebuf_r+0x70>
 8007d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d14:	4630      	mov	r0, r6
 8007d16:	f000 f81d 	bl	8007d54 <_isatty_r>
 8007d1a:	b128      	cbz	r0, 8007d28 <__smakebuf_r+0x70>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	f043 0301 	orr.w	r3, r3, #1
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	431d      	orrs	r5, r3
 8007d2c:	81a5      	strh	r5, [r4, #12]
 8007d2e:	e7cf      	b.n	8007cd0 <__smakebuf_r+0x18>

08007d30 <_fstat_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d07      	ldr	r5, [pc, #28]	; (8007d50 <_fstat_r+0x20>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	f7f9 ffac 	bl	8001c9a <_fstat>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	d102      	bne.n	8007d4c <_fstat_r+0x1c>
 8007d46:	682b      	ldr	r3, [r5, #0]
 8007d48:	b103      	cbz	r3, 8007d4c <_fstat_r+0x1c>
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	bf00      	nop
 8007d50:	20004a20 	.word	0x20004a20

08007d54 <_isatty_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4d06      	ldr	r5, [pc, #24]	; (8007d70 <_isatty_r+0x1c>)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	602b      	str	r3, [r5, #0]
 8007d60:	f7f9 ffab 	bl	8001cba <_isatty>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_isatty_r+0x1a>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_isatty_r+0x1a>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	20004a20 	.word	0x20004a20

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d06      	ldr	r5, [pc, #24]	; (8007d90 <_sbrk_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7f9 ffb4 	bl	8001cec <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	20004a20 	.word	0x20004a20

08007d94 <__assert_func>:
 8007d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d96:	4614      	mov	r4, r2
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <__assert_func+0x2c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4605      	mov	r5, r0
 8007da0:	68d8      	ldr	r0, [r3, #12]
 8007da2:	b14c      	cbz	r4, 8007db8 <__assert_func+0x24>
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <__assert_func+0x30>)
 8007da6:	9100      	str	r1, [sp, #0]
 8007da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dac:	4906      	ldr	r1, [pc, #24]	; (8007dc8 <__assert_func+0x34>)
 8007dae:	462b      	mov	r3, r5
 8007db0:	f000 f844 	bl	8007e3c <fiprintf>
 8007db4:	f000 f854 	bl	8007e60 <abort>
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <__assert_func+0x38>)
 8007dba:	461c      	mov	r4, r3
 8007dbc:	e7f3      	b.n	8007da6 <__assert_func+0x12>
 8007dbe:	bf00      	nop
 8007dc0:	20000120 	.word	0x20000120
 8007dc4:	080089ef 	.word	0x080089ef
 8007dc8:	080089fc 	.word	0x080089fc
 8007dcc:	08008a2a 	.word	0x08008a2a

08007dd0 <_calloc_r>:
 8007dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dd2:	fba1 2402 	umull	r2, r4, r1, r2
 8007dd6:	b94c      	cbnz	r4, 8007dec <_calloc_r+0x1c>
 8007dd8:	4611      	mov	r1, r2
 8007dda:	9201      	str	r2, [sp, #4]
 8007ddc:	f7ff f9fa 	bl	80071d4 <_malloc_r>
 8007de0:	9a01      	ldr	r2, [sp, #4]
 8007de2:	4605      	mov	r5, r0
 8007de4:	b930      	cbnz	r0, 8007df4 <_calloc_r+0x24>
 8007de6:	4628      	mov	r0, r5
 8007de8:	b003      	add	sp, #12
 8007dea:	bd30      	pop	{r4, r5, pc}
 8007dec:	220c      	movs	r2, #12
 8007dee:	6002      	str	r2, [r0, #0]
 8007df0:	2500      	movs	r5, #0
 8007df2:	e7f8      	b.n	8007de6 <_calloc_r+0x16>
 8007df4:	4621      	mov	r1, r4
 8007df6:	f7fe fa05 	bl	8006204 <memset>
 8007dfa:	e7f4      	b.n	8007de6 <_calloc_r+0x16>

08007dfc <__ascii_mbtowc>:
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	b901      	cbnz	r1, 8007e02 <__ascii_mbtowc+0x6>
 8007e00:	a901      	add	r1, sp, #4
 8007e02:	b142      	cbz	r2, 8007e16 <__ascii_mbtowc+0x1a>
 8007e04:	b14b      	cbz	r3, 8007e1a <__ascii_mbtowc+0x1e>
 8007e06:	7813      	ldrb	r3, [r2, #0]
 8007e08:	600b      	str	r3, [r1, #0]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	1e10      	subs	r0, r2, #0
 8007e0e:	bf18      	it	ne
 8007e10:	2001      	movne	r0, #1
 8007e12:	b002      	add	sp, #8
 8007e14:	4770      	bx	lr
 8007e16:	4610      	mov	r0, r2
 8007e18:	e7fb      	b.n	8007e12 <__ascii_mbtowc+0x16>
 8007e1a:	f06f 0001 	mvn.w	r0, #1
 8007e1e:	e7f8      	b.n	8007e12 <__ascii_mbtowc+0x16>

08007e20 <__ascii_wctomb>:
 8007e20:	b149      	cbz	r1, 8007e36 <__ascii_wctomb+0x16>
 8007e22:	2aff      	cmp	r2, #255	; 0xff
 8007e24:	bf85      	ittet	hi
 8007e26:	238a      	movhi	r3, #138	; 0x8a
 8007e28:	6003      	strhi	r3, [r0, #0]
 8007e2a:	700a      	strbls	r2, [r1, #0]
 8007e2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007e30:	bf98      	it	ls
 8007e32:	2001      	movls	r0, #1
 8007e34:	4770      	bx	lr
 8007e36:	4608      	mov	r0, r1
 8007e38:	4770      	bx	lr
	...

08007e3c <fiprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	b503      	push	{r0, r1, lr}
 8007e40:	4601      	mov	r1, r0
 8007e42:	ab03      	add	r3, sp, #12
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <fiprintf+0x20>)
 8007e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	f7ff fdf3 	bl	8007a38 <_vfiprintf_r>
 8007e52:	b002      	add	sp, #8
 8007e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e58:	b003      	add	sp, #12
 8007e5a:	4770      	bx	lr
 8007e5c:	20000120 	.word	0x20000120

08007e60 <abort>:
 8007e60:	b508      	push	{r3, lr}
 8007e62:	2006      	movs	r0, #6
 8007e64:	f000 f82c 	bl	8007ec0 <raise>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7f9 fee3 	bl	8001c34 <_exit>

08007e6e <_raise_r>:
 8007e6e:	291f      	cmp	r1, #31
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4604      	mov	r4, r0
 8007e74:	460d      	mov	r5, r1
 8007e76:	d904      	bls.n	8007e82 <_raise_r+0x14>
 8007e78:	2316      	movs	r3, #22
 8007e7a:	6003      	str	r3, [r0, #0]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e84:	b112      	cbz	r2, 8007e8c <_raise_r+0x1e>
 8007e86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e8a:	b94b      	cbnz	r3, 8007ea0 <_raise_r+0x32>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 f831 	bl	8007ef4 <_getpid_r>
 8007e92:	462a      	mov	r2, r5
 8007e94:	4601      	mov	r1, r0
 8007e96:	4620      	mov	r0, r4
 8007e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9c:	f000 b818 	b.w	8007ed0 <_kill_r>
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d00a      	beq.n	8007eba <_raise_r+0x4c>
 8007ea4:	1c59      	adds	r1, r3, #1
 8007ea6:	d103      	bne.n	8007eb0 <_raise_r+0x42>
 8007ea8:	2316      	movs	r3, #22
 8007eaa:	6003      	str	r3, [r0, #0]
 8007eac:	2001      	movs	r0, #1
 8007eae:	e7e7      	b.n	8007e80 <_raise_r+0x12>
 8007eb0:	2400      	movs	r4, #0
 8007eb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	4798      	blx	r3
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e7e0      	b.n	8007e80 <_raise_r+0x12>
	...

08007ec0 <raise>:
 8007ec0:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <raise+0xc>)
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f7ff bfd2 	b.w	8007e6e <_raise_r>
 8007eca:	bf00      	nop
 8007ecc:	20000120 	.word	0x20000120

08007ed0 <_kill_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_kill_r+0x20>)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	f7f9 fe99 	bl	8001c14 <_kill>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d102      	bne.n	8007eec <_kill_r+0x1c>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b103      	cbz	r3, 8007eec <_kill_r+0x1c>
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	20004a20 	.word	0x20004a20

08007ef4 <_getpid_r>:
 8007ef4:	f7f9 be86 	b.w	8001c04 <_getpid>

08007ef8 <_init>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr

08007f04 <_fini>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr
