
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f04  08014c88  08014c88  00024c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b8c  08016b8c  00031d38  2**0
                  CONTENTS
  4 .ARM          00000008  08016b8c  08016b8c  00026b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b94  08016b94  00031d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b94  08016b94  00026b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b98  08016b98  00026b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ac  20000000  08016b9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00001764  200005ac  08017148  000305ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20001d10  080188ac  00031d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00031d38  2**0
                  CONTENTS
 12 .bss          00009260  20001d38  20001d38  00031d38  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000af98  2000af98  00031d38  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00031d38  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00031d68  2**0
                  CONTENTS, READONLY
 16 .debug_info   000342ad  00000000  00000000  00031dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00009774  00000000  00000000  00066058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002840  00000000  00000000  0006f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001e68  00000000  00000000  00072010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000150b7  00000000  00000000  00073e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003cdd7  00000000  00000000  00088f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f6f33  00000000  00000000  000c5d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b1c0  00000000  00000000  001bcc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  001c7dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001d38 	.word	0x20001d38
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c70 	.word	0x08014c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001d3c 	.word	0x20001d3c
 80001cc:	08014c70 	.word	0x08014c70

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <appInit>:

static void appTask(void *param);


void __attribute__((weak)) appInit()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af04      	add	r7, sp, #16
  if (isInit) {
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <appInit+0x38>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d111      	bne.n	8000fa6 <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 8000f82:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <appInit+0x3c>)
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <appInit+0x40>)
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2300      	movs	r3, #0
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <appInit+0x44>)
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <appInit+0x48>)
 8000f9a:	f00e f8f5 	bl	800f188 <xTaskCreateStatic>
  isInit = true;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <appInit+0x38>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e000      	b.n	8000fa8 <appInit+0x34>
    return;
 8000fa6:	bf00      	nop
}
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20001d54 	.word	0x20001d54
 8000fb0:	200005ac 	.word	0x200005ac
 8000fb4:	20001d58 	.word	0x20001d58
 8000fb8:	08014c88 	.word	0x08014c88
 8000fbc:	08000fc1 	.word	0x08000fc1

08000fc0 <appTask>:

static void appTask(void *param)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8000fc8:	f001 fa72 	bl	80024b0 <systemWaitStart>

  appMain();
 8000fcc:	f000 f806 	bl	8000fdc <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f00e fa90 	bl	800f4f8 <vTaskDelay>
 8000fd8:	e7fa      	b.n	8000fd0 <appTask+0x10>
	...

08000fdc <appMain>:
    int myNum;
    std::string myString;
};
*/
void appMain()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <appMain+0x20>)
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f002 fc26 	bl	8003834 <SEGGER_RTT_printf>
  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */
//  assert(cl->myNum + cl->myString.size() == 0);

  while(1) {
    vTaskDelay(M2T(2000));
 8000fe8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fec:	f00e fa84 	bl	800f4f8 <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <appMain+0x24>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 fc1e 	bl	8003834 <SEGGER_RTT_printf>
    vTaskDelay(M2T(2000));
 8000ff8:	e7f6      	b.n	8000fe8 <appMain+0xc>
 8000ffa:	bf00      	nop
 8000ffc:	08014c8c 	.word	0x08014c8c
 8001000:	08014ca8 	.word	0x08014ca8

08001004 <commInit>:
#include "crtp_localization_service.h"

static bool isInit;

void commInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  if (isInit)
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <commInit+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d103      	bne.n	8001018 <commInit+0x14>
  //if (usbTest())
  //  crtpSetLink(usbGetLink);
  //else if(radiolinkTest())
  //  crtpSetLink(radiolinkGetLink());
  
  isInit = true;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <commInit+0x20>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e000      	b.n	800101a <commInit+0x16>
    return;
 8001018:	bf00      	nop
}
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20002208 	.word	0x20002208

08001028 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af04      	add	r7, sp, #16
  if(isInit)
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <crtpInit+0x70>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d12d      	bne.n	8001092 <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f00d f9dc 	bl	800e3f8 <xQueueGenericCreate>
 8001040:	4603      	mov	r3, r0
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <crtpInit+0x74>)
 8001044:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <crtpInit+0x74>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <crtpInit+0x78>)
 800104c:	4915      	ldr	r1, [pc, #84]	; (80010a4 <crtpInit+0x7c>)
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fd60 	bl	8003b14 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	461a      	mov	r2, r3
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <crtpInit+0x80>)
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <crtpInit+0x84>)
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2302      	movs	r3, #2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	4912      	ldr	r1, [pc, #72]	; (80010b0 <crtpInit+0x88>)
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <crtpInit+0x8c>)
 800106a:	f00e f88d 	bl	800f188 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	461a      	mov	r2, r3
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <crtpInit+0x90>)
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <crtpInit+0x94>)
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	2302      	movs	r3, #2
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2300      	movs	r3, #0
 8001082:	490f      	ldr	r1, [pc, #60]	; (80010c0 <crtpInit+0x98>)
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <crtpInit+0x9c>)
 8001086:	f00e f87f 	bl	800f188 <xTaskCreateStatic>

  isInit = true;
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <crtpInit+0x70>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e000      	b.n	8001094 <crtpInit+0x6c>
    return;
 8001092:	bf00      	nop
}
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20002209 	.word	0x20002209
 800109c:	20002220 	.word	0x20002220
 80010a0:	08014cb8 	.word	0x08014cb8
 80010a4:	08014cc0 	.word	0x08014cc0
 80010a8:	20000864 	.word	0x20000864
 80010ac:	20000664 	.word	0x20000664
 80010b0:	08014cdc 	.word	0x08014cdc
 80010b4:	080010c9 	.word	0x080010c9
 80010b8:	20000d1c 	.word	0x20000d1c
 80010bc:	2000091c 	.word	0x2000091c
 80010c0:	08014ce4 	.word	0x08014ce4
 80010c4:	08001139 	.word	0x08001139

080010c8 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <crtpTxTask+0x60>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a15      	ldr	r2, [pc, #84]	; (800112c <crtpTxTask+0x64>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d021      	beq.n	800111e <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <crtpTxTask+0x68>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f107 0108 	add.w	r1, r7, #8
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00d fc56 	bl	800e998 <xQueueReceive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d1ee      	bne.n	80010d0 <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 80010f2:	e002      	b.n	80010fa <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 80010f4:	200a      	movs	r0, #10
 80010f6:	f00e f9ff 	bl	800f4f8 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <crtpTxTask+0x60>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	4610      	mov	r0, r2
 8001106:	4798      	blx	r3
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f2      	beq.n	80010f4 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <crtpTxTask+0x6c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <crtpTxTask+0x6c>)
 8001116:	6053      	str	r3, [r2, #4]
        updateStats();
 8001118:	f000 f87e 	bl	8001218 <updateStats>
 800111c:	e7d8      	b.n	80010d0 <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 800111e:	200a      	movs	r0, #10
 8001120:	f00e f9ea 	bl	800f4f8 <vTaskDelay>
    if (link != &nopLink)
 8001124:	e7d4      	b.n	80010d0 <crtpTxTask+0x8>
 8001126:	bf00      	nop
 8001128:	20000014 	.word	0x20000014
 800112c:	20000000 	.word	0x20000000
 8001130:	20002220 	.word	0x20002220
 8001134:	2000220c 	.word	0x2000220c

08001138 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <crtpRxTask+0x9c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <crtpRxTask+0xa0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d040      	beq.n	80011cc <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <crtpRxTask+0x9c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f107 0208 	add.w	r2, r7, #8
 8001154:	4610      	mov	r0, r2
 8001156:	4798      	blx	r3
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <crtpRxTask+0x8>
      {
        if (queues[p.port])
 800115e:	7a7b      	ldrb	r3, [r7, #9]
 8001160:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <crtpRxTask+0xa4>)
 800116a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00e      	beq.n	8001190 <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 8001172:	7a7b      	ldrb	r3, [r7, #9]
 8001174:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <crtpRxTask+0xa4>)
 800117e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001182:	f107 0108 	add.w	r1, r7, #8
 8001186:	2300      	movs	r3, #0
 8001188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800118c:	f00d f9de 	bl	800e54c <xQueueGenericSend>
        }

        if (callbacks[p.port])
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <crtpRxTask+0xa8>)
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 80011a4:	7a7b      	ldrb	r3, [r7, #9]
 80011a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <crtpRxTask+0xa8>)
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	4610      	mov	r0, r2
 80011ba:	4798      	blx	r3
        }

        stats.rxCount++;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <crtpRxTask+0xac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <crtpRxTask+0xac>)
 80011c4:	6013      	str	r3, [r2, #0]
        updateStats();
 80011c6:	f000 f827 	bl	8001218 <updateStats>
 80011ca:	e7b9      	b.n	8001140 <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80011cc:	200a      	movs	r0, #10
 80011ce:	f00e f993 	bl	800f4f8 <vTaskDelay>
    if (link != &nopLink)
 80011d2:	e7b5      	b.n	8001140 <crtpRxTask+0x8>
 80011d4:	20000014 	.word	0x20000014
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20002224 	.word	0x20002224
 80011e0:	20002264 	.word	0x20002264
 80011e4:	2000220c 	.word	0x2000220c

080011e8 <nopFunc>:

  link->setEnable(true);
}

static int nopFunc(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ENETDOWN;
 80011ec:	2373      	movs	r3, #115	; 0x73
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <clearStats>:

static void clearStats()
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <clearStats+0x1c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <clearStats+0x1c>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2000220c 	.word	0x2000220c

08001218 <updateStats>:

static void updateStats()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 800121e:	f00e fb29 	bl	800f874 <xTaskGetTickCount>
 8001222:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <updateStats+0x9c>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d93d      	bls.n	80012aa <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <updateStats+0x9c>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123e:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <updateStats+0x9c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012b8 <updateStats+0xa0>
 8001252:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001256:	ed97 7a00 	vldr	s14, [r7]
 800125a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001262:	ee17 3a90 	vmov	r3, s15
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <updateStats+0x9c>)
 800126a:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <updateStats+0x9c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001278:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012b8 <updateStats+0xa0>
 800127c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001280:	ed97 7a00 	vldr	s14, [r7]
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <updateStats+0x9c>)
 8001294:	815a      	strh	r2, [r3, #10]

    clearStats();
 8001296:	f7ff ffaf 	bl	80011f8 <clearStats>
    stats.previousStatisticsTime = now;
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <updateStats+0x9c>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80012a6:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <updateStats+0x9c>)
 80012a8:	60d3      	str	r3, [r2, #12]
  }
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000220c 	.word	0x2000220c
 80012b8:	447a0000 	.word	0x447a0000

080012bc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f023 0210 	bic.w	r2, r3, #16
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	605a      	str	r2, [r3, #4]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b02      	cmp	r3, #2
 800133a:	d101      	bne.n	8001340 <LL_SPI_IsActiveFlag_TXE+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	330c      	adds	r3, #12
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	330c      	adds	r3, #12
 800137a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40023800 	.word	0x40023800

080013c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80013d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	619a      	str	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b090      	sub	sp, #64	; 0x40
 8001430:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	2228      	movs	r2, #40	; 0x28
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f011 fd6c 	bl	8012f18 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001450:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001454:	f7ff ffb4 	bl	80013c0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff ff99 	bl	8001390 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800145e:	2004      	movs	r0, #4
 8001460:	f7ff ff96 	bl	8001390 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001464:	23e0      	movs	r3, #224	; 0xe0
 8001466:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001468:	2302      	movs	r3, #2
 800146a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001478:	2305      	movs	r3, #5
 800147a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4825      	ldr	r0, [pc, #148]	; (8001518 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001482:	f009 f9ea 	bl	800a85a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800148a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800148e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001494:	2302      	movs	r3, #2
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800149c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80014a2:	2310      	movs	r3, #16
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80014ae:	230a      	movs	r3, #10
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4818      	ldr	r0, [pc, #96]	; (800151c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80014ba:	f009 fa72 	bl	800a9a2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80014be:	2100      	movs	r1, #0
 80014c0:	4816      	ldr	r0, [pc, #88]	; (800151c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80014c2:	f7ff ff0b 	bl	80012dc <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80014c6:	2110      	movs	r1, #16
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014ca:	f7ff ff9f 	bl	800140c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80014ce:	2310      	movs	r3, #16
 80014d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014e8:	f009 f9b7 	bl	800a85a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80014ec:	2310      	movs	r3, #16
 80014ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80014fe:	f009 f9ac 	bl	800a85a <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001504:	f7ff feda 	bl	80012bc <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001508:	2110      	movs	r1, #16
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800150c:	f7ff ff70 	bl	80013f0 <LL_GPIO_SetOutputPin>
}
 8001510:	bf00      	nop
 8001512:	3740      	adds	r7, #64	; 0x40
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020000 	.word	0x40020000
 800151c:	40013000 	.word	0x40013000
 8001520:	40020800 	.word	0x40020800

08001524 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800152e:	bf00      	nop
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <SPI1_SendByte+0x40>)
 8001532:	f7ff fef9 	bl	8001328 <LL_SPI_IsActiveFlag_TXE>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f9      	beq.n	8001530 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4619      	mov	r1, r3
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <SPI1_SendByte+0x40>)
 8001542:	f7ff ff12 	bl	800136a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001546:	bf00      	nop
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <SPI1_SendByte+0x40>)
 800154a:	f7ff feda 	bl	8001302 <LL_SPI_IsActiveFlag_RXNE>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f9      	beq.n	8001548 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <SPI1_SendByte+0x40>)
 8001556:	f7ff fefa 	bl	800134e <LL_SPI_ReceiveData8>
 800155a:	4603      	mov	r3, r0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013000 	.word	0x40013000

08001568 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001572:	2110      	movs	r1, #16
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <ICM20602_Readbyte+0x3c>)
 8001576:	f7ff ff49 	bl	800140c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffce 	bl	8001524 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff ffcb 	bl	8001524 <SPI1_SendByte>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001592:	2110      	movs	r1, #16
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <ICM20602_Readbyte+0x3c>)
 8001596:	f7ff ff2b 	bl	80013f0 <LL_GPIO_SetOutputPin>
	
	return val;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020000 	.word	0x40020000

080015a8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80015b8:	2110      	movs	r1, #16
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <ICM20602_Writebyte+0x40>)
 80015bc:	f7ff ff26 	bl	800140c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ffab 	bl	8001524 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffa7 	bl	8001524 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80015d6:	2110      	movs	r1, #16
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <ICM20602_Writebyte+0x40>)
 80015da:	f7ff ff09 	bl	80013f0 <LL_GPIO_SetOutputPin>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020000 	.word	0x40020000

080015ec <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001608:	f7ff ff10 	bl	800142c <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 800160c:	4934      	ldr	r1, [pc, #208]	; (80016e0 <ICM20602_Initialization+0xf4>)
 800160e:	2000      	movs	r0, #0
 8001610:	f002 f910 	bl	8003834 <SEGGER_RTT_printf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001614:	2075      	movs	r0, #117	; 0x75
 8001616:	f7ff ffa7 	bl	8001568 <ICM20602_Readbyte>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d106      	bne.n	8001632 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	461a      	mov	r2, r3
 8001628:	492e      	ldr	r1, [pc, #184]	; (80016e4 <ICM20602_Initialization+0xf8>)
 800162a:	2000      	movs	r0, #0
 800162c:	f002 f902 	bl	8003834 <SEGGER_RTT_printf>
 8001630:	e012      	b.n	8001658 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d00f      	beq.n	8001658 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001638:	2075      	movs	r0, #117	; 0x75
 800163a:	f7ff ff95 	bl	8001568 <ICM20602_Readbyte>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d007      	beq.n	8001658 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	2312      	movs	r3, #18
 800164c:	4926      	ldr	r1, [pc, #152]	; (80016e8 <ICM20602_Initialization+0xfc>)
 800164e:	2000      	movs	r0, #0
 8001650:	f002 f8f0 	bl	8003834 <SEGGER_RTT_printf>
			return 1; //ERROR
 8001654:	2301      	movs	r3, #1
 8001656:	e03f      	b.n	80016d8 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	206b      	movs	r0, #107	; 0x6b
 800165c:	f7ff ffa4 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 8001660:	4822      	ldr	r0, [pc, #136]	; (80016ec <ICM20602_Initialization+0x100>)
 8001662:	f003 f909 	bl	8004878 <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001666:	2101      	movs	r1, #1
 8001668:	206b      	movs	r0, #107	; 0x6b
 800166a:	f7ff ff9d 	bl	80015a8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 800166e:	481f      	ldr	r0, [pc, #124]	; (80016ec <ICM20602_Initialization+0x100>)
 8001670:	f003 f902 	bl	8004878 <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8001674:	2100      	movs	r1, #0
 8001676:	206c      	movs	r0, #108	; 0x6c
 8001678:	f7ff ff96 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 800167c:	481b      	ldr	r0, [pc, #108]	; (80016ec <ICM20602_Initialization+0x100>)
 800167e:	f003 f8fb 	bl	8004878 <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001682:	2100      	movs	r1, #0
 8001684:	2019      	movs	r0, #25
 8001686:	f7ff ff8f 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <ICM20602_Initialization+0x100>)
 800168c:	f003 f8f4 	bl	8004878 <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001690:	2105      	movs	r1, #5
 8001692:	201a      	movs	r0, #26
 8001694:	f7ff ff88 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 8001698:	4814      	ldr	r0, [pc, #80]	; (80016ec <ICM20602_Initialization+0x100>)
 800169a:	f003 f8ed 	bl	8004878 <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800169e:	2118      	movs	r1, #24
 80016a0:	201b      	movs	r0, #27
 80016a2:	f7ff ff81 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <ICM20602_Initialization+0x100>)
 80016a8:	f003 f8e6 	bl	8004878 <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80016ac:	2118      	movs	r1, #24
 80016ae:	201c      	movs	r0, #28
 80016b0:	f7ff ff7a 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <ICM20602_Initialization+0x100>)
 80016b6:	f003 f8df 	bl	8004878 <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80016ba:	2103      	movs	r1, #3
 80016bc:	201d      	movs	r0, #29
 80016be:	f7ff ff73 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80016c2:	480a      	ldr	r0, [pc, #40]	; (80016ec <ICM20602_Initialization+0x100>)
 80016c4:	f003 f8d8 	bl	8004878 <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80016c8:	2101      	movs	r1, #1
 80016ca:	2038      	movs	r0, #56	; 0x38
 80016cc:	f7ff ff6c 	bl	80015a8 <ICM20602_Writebyte>
	delay_us(5000000);
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <ICM20602_Initialization+0x100>)
 80016d2:	f003 f8d1 	bl	8004878 <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	08014d38 	.word	0x08014d38
 80016e4:	08014d50 	.word	0x08014d50
 80016e8:	08014d84 	.word	0x08014d84
 80016ec:	004c4b40 	.word	0x004c4b40

080016f0 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80016fa:	680a      	ldr	r2, [r1, #0]
 80016fc:	f382 8808 	msr	MSP, r2
 8001700:	684a      	ldr	r2, [r1, #4]
 8001702:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001704:	e7fe      	b.n	8001704 <branch_to_bootloader+0x14>
	...

08001708 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800170e:	491d      	ldr	r1, [pc, #116]	; (8001784 <check_enter_bootloader+0x7c>)
 8001710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001714:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001718:	4c1a      	ldr	r4, [pc, #104]	; (8001784 <check_enter_bootloader+0x7c>)
 800171a:	f04f 0000 	mov.w	r0, #0
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8001726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0028      	movs	r0, r5
 8001734:	2100      	movs	r1, #0
 8001736:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800173a:	2300      	movs	r3, #0
 800173c:	4912      	ldr	r1, [pc, #72]	; (8001788 <check_enter_bootloader+0x80>)
 800173e:	4411      	add	r1, r2
 8001740:	430b      	orrs	r3, r1
 8001742:	d11a      	bne.n	800177a <check_enter_bootloader+0x72>
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <check_enter_bootloader+0x84>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d014      	beq.n	800177a <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <check_enter_bootloader+0x88>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8001756:	683c      	ldr	r4, [r7, #0]
 8001758:	e9d7 0100 	ldrd	r0, r1, [r7]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	000a      	movs	r2, r1
 8001766:	2300      	movs	r3, #0
 8001768:	4613      	mov	r3, r2
 800176a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800176e:	f023 030f 	bic.w	r3, r3, #15
 8001772:	4619      	mov	r1, r3
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff ffbb 	bl	80016f0 <branch_to_bootloader>
    }
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	bf00      	nop
 8001784:	2001c000 	.word	0x2001c000
 8001788:	fffffa5b 	.word	0xfffffa5b
 800178c:	40023800 	.word	0x40023800
 8001790:	40013800 	.word	0x40013800

08001794 <buzzerInit>:




void buzzerInit()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001798:	2100      	movs	r1, #0
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <buzzerInit+0x18>)
 800179c:	f007 f864 	bl	8008868 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <buzzerInit+0x1c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20005094 	.word	0x20005094
 80017b0:	40000400 	.word	0x40000400

080017b4 <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <buzzerOff+0x18>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80017be:	2100      	movs	r1, #0
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <buzzerOff+0x1c>)
 80017c2:	f007 f919 	bl	80089f8 <HAL_TIM_PWM_Stop>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40000400 	.word	0x40000400
 80017d0:	20005094 	.word	0x20005094

080017d4 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	460a      	mov	r2, r1
 80017de:	71fb      	strb	r3, [r7, #7]
 80017e0:	4613      	mov	r3, r2
 80017e2:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d832      	bhi.n	8001850 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <ledSetForce+0x84>)
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10d      	bne.n	8001812 <ledSetForce+0x3e>
  {
    value = !value;
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <ledSetForce+0x88>)
 800181c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <ledSetForce+0x8c>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	b29b      	uxth	r3, r3
 800182a:	2201      	movs	r2, #1
 800182c:	4619      	mov	r1, r3
 800182e:	f004 ffd1 	bl	80067d4 <HAL_GPIO_WritePin>
 8001832:	e00e      	b.n	8001852 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <ledSetForce+0x88>)
 8001838:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <ledSetForce+0x8c>)
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	b29b      	uxth	r3, r3
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	f004 ffc3 	bl	80067d4 <HAL_GPIO_WritePin>
 800184e:	e000      	b.n	8001852 <ledSetForce+0x7e>
    return;
 8001850:	bf00      	nop
    }

//  }

}
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000048 	.word	0x20000048
 800185c:	20000018 	.word	0x20000018
 8001860:	20000030 	.word	0x20000030

08001864 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <ledInit+0xd0>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d15b      	bne.n	800192a <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <ledInit+0xd4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <ledInit+0xd4>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <ledInit+0xd4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <ledInit+0xd4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <ledInit+0xd4>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <ledInit+0xd4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e02a      	b.n	8001916 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <ledInit+0xd8>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <ledInit+0xdc>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	f004 ff7d 	bl	80067d4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <ledInit+0xdc>)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <ledInit+0xd8>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fdcc 	bl	800649c <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f81c 	bl	8001948 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b05      	cmp	r3, #5
 800191a:	ddd1      	ble.n	80018c0 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <ledInit+0xe0>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <ledInit+0xd0>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e000      	b.n	800192c <ledInit+0xc8>
    return;
 800192a:	bf00      	nop
}
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200022a4 	.word	0x200022a4
 8001938:	40023800 	.word	0x40023800
 800193c:	20000018 	.word	0x20000018
 8001940:	20000030 	.word	0x20000030
 8001944:	200022ae 	.word	0x200022ae

08001948 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	460a      	mov	r2, r1
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	4613      	mov	r3, r2
 8001956:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d904      	bls.n	8001968 <ledSet+0x20>
 800195e:	22e4      	movs	r2, #228	; 0xe4
 8001960:	490a      	ldr	r1, [pc, #40]	; (800198c <ledSet+0x44>)
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <ledSet+0x48>)
 8001964:	f001 ff94 	bl	8003890 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <ledSet+0x4c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001970:	79ba      	ldrb	r2, [r7, #6]
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff2c 	bl	80017d4 <ledSetForce>
  }

  ledLastState[led] = value;
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	79b9      	ldrb	r1, [r7, #6]
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <ledSet+0x50>)
 8001982:	54d1      	strb	r1, [r2, r3]
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08014db4 	.word	0x08014db4
 8001990:	08014dd0 	.word	0x08014dd0
 8001994:	200022ae 	.word	0x200022ae
 8001998:	200022a8 	.word	0x200022a8

0800199c <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff ffd0 	bl	8001948 <ledSet>
  ledSet(LED_GREEN_R, 0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	2003      	movs	r0, #3
 80019ac:	f7ff ffcc 	bl	8001948 <ledSet>
  ledSet(LED_RED_L, 1);
 80019b0:	2101      	movs	r1, #1
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7ff ffc8 	bl	8001948 <ledSet>
  ledSet(LED_RED_R, 1);
 80019b8:	2101      	movs	r1, #1
 80019ba:	2004      	movs	r0, #4
 80019bc:	f7ff ffc4 	bl	8001948 <ledSet>
  ledSet(LED_BLUE_L, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff ffc0 	bl	8001948 <ledSet>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af02      	add	r7, sp, #8
  if(isInit) {
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <ledseqInit+0xe4>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d165      	bne.n	8001aa6 <ledseqInit+0xda>
    return;
  }

  ledInit();
 80019da:	f7ff ff43 	bl	8001864 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 80019de:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <ledseqInit+0xe8>)
 80019e0:	f000 f9f8 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 80019e4:	4834      	ldr	r0, [pc, #208]	; (8001ab8 <ledseqInit+0xec>)
 80019e6:	f000 f9f5 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 80019ea:	4834      	ldr	r0, [pc, #208]	; (8001abc <ledseqInit+0xf0>)
 80019ec:	f000 f9f2 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 80019f0:	4833      	ldr	r0, [pc, #204]	; (8001ac0 <ledseqInit+0xf4>)
 80019f2:	f000 f9ef 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 80019f6:	4833      	ldr	r0, [pc, #204]	; (8001ac4 <ledseqInit+0xf8>)
 80019f8:	f000 f9ec 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 80019fc:	4832      	ldr	r0, [pc, #200]	; (8001ac8 <ledseqInit+0xfc>)
 80019fe:	f000 f9e9 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8001a02:	4832      	ldr	r0, [pc, #200]	; (8001acc <ledseqInit+0x100>)
 8001a04:	f000 f9e6 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8001a08:	4831      	ldr	r0, [pc, #196]	; (8001ad0 <ledseqInit+0x104>)
 8001a0a:	f000 f9e3 	bl	8001dd4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8001a0e:	4831      	ldr	r0, [pc, #196]	; (8001ad4 <ledseqInit+0x108>)
 8001a10:	f000 f9e0 	bl	8001dd4 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	e007      	b.n	8001a2a <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <ledseqInit+0x10c>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	ddf4      	ble.n	8001a1a <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	e018      	b.n	8001a68 <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4926      	ldr	r1, [pc, #152]	; (8001adc <ledseqInit+0x110>)
 8001a42:	440b      	add	r3, r1
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <ledseqInit+0x114>)
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a52:	4824      	ldr	r0, [pc, #144]	; (8001ae4 <ledseqInit+0x118>)
 8001a54:	f00e fede 	bl	8010814 <xTimerCreateStatic>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4923      	ldr	r1, [pc, #140]	; (8001ae8 <ledseqInit+0x11c>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	dde3      	ble.n	8001a36 <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f00c fd39 	bl	800e4e6 <xQueueCreateMutex>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <ledseqInit+0x120>)
 8001a78:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f00c fcba 	bl	800e3f8 <xQueueGenericCreate>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <ledseqInit+0x124>)
 8001a88:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	4917      	ldr	r1, [pc, #92]	; (8001af4 <ledseqInit+0x128>)
 8001a98:	4817      	ldr	r0, [pc, #92]	; (8001af8 <ledseqInit+0x12c>)
 8001a9a:	f00d fbcb 	bl	800f234 <xTaskCreate>

  isInit = true;
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <ledseqInit+0xe4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	e000      	b.n	8001aa8 <ledseqInit+0xdc>
    return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200022bc 	.word	0x200022bc
 8001ab4:	20000238 	.word	0x20000238
 8001ab8:	20000248 	.word	0x20000248
 8001abc:	20000070 	.word	0x20000070
 8001ac0:	20000188 	.word	0x20000188
 8001ac4:	200001b0 	.word	0x200001b0
 8001ac8:	20000108 	.word	0x20000108
 8001acc:	20000130 	.word	0x20000130
 8001ad0:	20000158 	.word	0x20000158
 8001ad4:	20000168 	.word	0x20000168
 8001ad8:	20000dd4 	.word	0x20000dd4
 8001adc:	20000e04 	.word	0x20000e04
 8001ae0:	08001cbd 	.word	0x08001cbd
 8001ae4:	08014df8 	.word	0x08014df8
 8001ae8:	20000dec 	.word	0x20000dec
 8001aec:	200022b4 	.word	0x200022b4
 8001af0:	200022b8 	.word	0x200022b8
 8001af4:	08014e04 	.word	0x08014e04
 8001af8:	08001afd 	.word	0x08001afd

08001afc <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <lesdeqCmdTask+0x3c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f107 0108 	add.w	r1, r7, #8
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00c ff41 	bl	800e998 <xQueueReceive>

    switch(command.command) {
 8001b16:	7a3b      	ldrb	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <lesdeqCmdTask+0x26>
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <lesdeqCmdTask+0x30>
 8001b20:	e009      	b.n	8001b36 <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 f825 	bl	8001b74 <ledseqRunBlocking>
        break;
 8001b2a:	e004      	b.n	8001b36 <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f898 	bl	8001c64 <ledseqStopBlocking>
        break;
 8001b34:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8001b36:	e7e5      	b.n	8001b04 <lesdeqCmdTask+0x8>
 8001b38:	200022b8 	.word	0x200022b8

08001b3c <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 8001b44:	2300      	movs	r3, #0
 8001b46:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <ledseqRun+0x34>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f107 0108 	add.w	r1, r7, #8
 8001b54:	2300      	movs	r3, #0
 8001b56:	2200      	movs	r2, #0
 8001b58:	f00c fcf8 	bl	800e54c <xQueueGenericSend>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <ledseqRun+0x2a>
    return true;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <ledseqRun+0x2c>
  }
  return false;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200022b8 	.word	0x200022b8

08001b74 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7b1b      	ldrb	r3, [r3, #12]
 8001b80:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <ledseqRunBlocking+0x5c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f00c ffe4 	bl	800eb58 <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f94f 	bl	8001e3c <updateActive>
  xSemaphoreGive(ledseqMutex);
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <ledseqRunBlocking+0x5c>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f00c fcd0 	bl	800e54c <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <ledseqRunBlocking+0x60>)
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d106      	bne.n	8001bc8 <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <ledseqRunBlocking+0x64>)
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f87a 	bl	8001cbc <runLedseq>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200022b4 	.word	0x200022b4
 8001bd4:	20000dd4 	.word	0x20000dd4
 8001bd8:	20000dec 	.word	0x20000dec

08001bdc <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 8001be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001c24 <ledseqSetChargeLevel+0x48>
 8001bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf6:	ee17 3a90 	vmov	r3, s15
 8001bfa:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001c02:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <ledseqSetChargeLevel+0x4c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <ledseqSetChargeLevel+0x4c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3308      	adds	r3, #8
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	605a      	str	r2, [r3, #4]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	447a0000 	.word	0x447a0000
 8001c28:	200001b0 	.word	0x200001b0

08001c2c <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 8001c34:	2301      	movs	r3, #1
 8001c36:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <ledseqStop+0x34>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	f107 0108 	add.w	r1, r7, #8
 8001c44:	2300      	movs	r3, #0
 8001c46:	2200      	movs	r2, #0
 8001c48:	f00c fc80 	bl	800e54c <xQueueGenericSend>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <ledseqStop+0x2a>
    return true;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <ledseqStop+0x2c>
  }
  return false;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200022b8 	.word	0x200022b8

08001c64 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7b1b      	ldrb	r3, [r3, #12]
 8001c70:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <ledseqStopBlocking+0x50>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00c ff6c 	bl	800eb58 <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c86:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f8d6 	bl	8001e3c <updateActive>
  xSemaphoreGive(ledseqMutex);
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <ledseqStopBlocking+0x50>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f00c fc57 	bl	800e54c <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <ledseqStopBlocking+0x54>)
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f808 	bl	8001cbc <runLedseq>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200022b4 	.word	0x200022b4
 8001cb8:	20000dec 	.word	0x20000dec

08001cbc <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <runLedseq+0x10c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d171      	bne.n	8001db6 <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f00f f912 	bl	8010efc <pvTimerGetTimerID>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8001cdc:	7dbb      	ldrb	r3, [r7, #22]
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <runLedseq+0x110>)
 8001ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce4:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d066      	beq.n	8001dba <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8001cf0:	e05a      	b.n	8001da8 <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfa:	d060      	beq.n	8001dbe <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <runLedseq+0x114>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00c ff20 	bl	800eb58 <xQueueSemaphoreTake>
    context->state++;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	7b1b      	ldrb	r3, [r3, #12]
 8001d26:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f113 0f02 	cmn.w	r3, #2
 8001d30:	d003      	beq.n	8001d3a <runLedseq+0x7e>
 8001d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d36:	d004      	beq.n	8001d42 <runLedseq+0x86>
 8001d38:	e00c      	b.n	8001d54 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
        break;
 8001d40:	e02b      	b.n	8001d9a <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d48:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f875 	bl	8001e3c <updateActive>
        break;
 8001d52:	e022      	b.n	8001d9a <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fdf3 	bl	8001948 <ledSet>
        if (step->action == 0) {
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2300      	movs	r3, #0
 8001d76:	2104      	movs	r1, #4
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f00e fdbf 	bl	80108fc <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 8001d7e:	f00d fd79 	bl	800f874 <xTaskGetTickCount>
 8001d82:	4602      	mov	r2, r0
 8001d84:	2300      	movs	r3, #0
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f00e fdb5 	bl	80108fc <xTimerGenericCommand>
        leave = true;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
        break;
 8001d96:	e000      	b.n	8001d9a <runLedseq+0xde>
          break;
 8001d98:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <runLedseq+0x114>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	f00c fbd2 	bl	800e54c <xQueueGenericSend>
  while(!leave) {
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	f083 0301 	eor.w	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d19e      	bne.n	8001cf2 <runLedseq+0x36>
 8001db4:	e004      	b.n	8001dc0 <runLedseq+0x104>
    return;
 8001db6:	bf00      	nop
 8001db8:	e002      	b.n	8001dc0 <runLedseq+0x104>
    return;
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <runLedseq+0x104>
      return;
 8001dbe:	bf00      	nop
  }
}
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200022bd 	.word	0x200022bd
 8001dcc:	20000dd4 	.word	0x20000dd4
 8001dd0:	200022b4 	.word	0x200022b4

08001dd4 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de2:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <ledseqRegisterSequence+0x64>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <ledseqRegisterSequence+0x26>
    sequences = context;
 8001df2:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <ledseqRegisterSequence+0x64>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e019      	b.n	8001e2e <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <ledseqRegisterSequence+0x64>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d00f      	beq.n	8001e28 <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 8001e08:	e006      	b.n	8001e18 <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d009      	beq.n	8001e2c <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f4      	bne.n	8001e0a <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e002      	b.n	8001e2e <ledseqRegisterSequence+0x5a>
      return;
 8001e28:	bf00      	nop
 8001e2a:	e000      	b.n	8001e2e <ledseqRegisterSequence+0x5a>
        return;
 8001e2c:	bf00      	nop
  }
}
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	200022b0 	.word	0x200022b0

08001e3c <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <updateActive+0x5c>)
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fd77 	bl	8001948 <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <updateActive+0x60>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e012      	b.n	8001e88 <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	79fa      	ldrb	r2, [r7, #7]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10a      	bne.n	8001e82 <updateActive+0x46>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d005      	beq.n	8001e82 <updateActive+0x46>
      activeSeq[led] = sequence;
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <updateActive+0x5c>)
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 8001e80:	e006      	b.n	8001e90 <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e9      	bne.n	8001e62 <updateActive+0x26>
    }
  }
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000dd4 	.word	0x20000dd4
 8001e9c:	200022b0 	.word	0x200022b0

08001ea0 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af04      	add	r7, sp, #16
  if(isInit) {
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <pmInit+0x60>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d125      	bne.n	8001efa <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4914      	ldr	r1, [pc, #80]	; (8001f04 <pmInit+0x64>)
 8001eb2:	4815      	ldr	r0, [pc, #84]	; (8001f08 <pmInit+0x68>)
 8001eb4:	f003 fa10 	bl	80052d8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4914      	ldr	r1, [pc, #80]	; (8001f0c <pmInit+0x6c>)
 8001ebc:	4814      	ldr	r0, [pc, #80]	; (8001f10 <pmInit+0x70>)
 8001ebe:	f003 fa0b 	bl	80052d8 <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <pmInit+0x74>)
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <pmInit+0x78>)
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4911      	ldr	r1, [pc, #68]	; (8001f1c <pmInit+0x7c>)
 8001ed6:	4812      	ldr	r0, [pc, #72]	; (8001f20 <pmInit+0x80>)
 8001ed8:	f00d f956 	bl	800f188 <xTaskCreateStatic>

  isInit = true;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <pmInit+0x60>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <pmInit+0x84>)
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <pmInit+0x88>)
 8001ee6:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <pmInit+0x84>)
 8001eec:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001ef0:	ee00 3a10 	vmov	s0, r3
 8001ef4:	f000 f81a 	bl	8001f2c <pmSetBatteryVoltage>
 8001ef8:	e000      	b.n	8001efc <pmInit+0x5c>
    return;
 8001efa:	bf00      	nop
}
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200022ec 	.word	0x200022ec
 8001f04:	200022fc 	.word	0x200022fc
 8001f08:	20004f44 	.word	0x20004f44
 8001f0c:	200022fe 	.word	0x200022fe
 8001f10:	20004f8c 	.word	0x20004f8c
 8001f14:	20000f0c 	.word	0x20000f0c
 8001f18:	20002300 	.word	0x20002300
 8001f1c:	08014e10 	.word	0x08014e10
 8001f20:	080021a9 	.word	0x080021a9
 8001f24:	200022f0 	.word	0x200022f0
 8001f28:	406ccccd 	.word	0x406ccccd

08001f2c <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <pmSetBatteryVoltage+0x6c>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 8001f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f40:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f9c <pmSetBatteryVoltage+0x70>
 8001f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4c:	ee17 3a90 	vmov	r3, s15
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <pmSetBatteryVoltage+0x74>)
 8001f54:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <pmSetBatteryVoltage+0x78>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	dd02      	ble.n	8001f70 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <pmSetBatteryVoltage+0x78>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <pmSetBatteryVoltage+0x7c>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	d400      	bmi.n	8001f86 <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 8001f84:	e002      	b.n	8001f8c <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <pmSetBatteryVoltage+0x7c>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	200022c0 	.word	0x200022c0
 8001f9c:	447a0000 	.word	0x447a0000
 8001fa0:	200022c4 	.word	0x200022c4
 8001fa4:	200022c8 	.word	0x200022c8
 8001fa8:	20000258 	.word	0x20000258

08001fac <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 8001fca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	d501      	bpl.n	8001fe0 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e01c      	b.n	800201a <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8001fe0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002028 <pmBatteryChargeFromVoltage+0x6c>
 8001fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	dd01      	ble.n	8001ff6 <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	e011      	b.n	800201a <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8001ff6:	e002      	b.n	8001ffe <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <pmBatteryChargeFromVoltage+0x70>)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ed97 7a01 	vldr	s14, [r7, #4]
 800200e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	dcef      	bgt.n	8001ff8 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 8002018:	68fb      	ldr	r3, [r7, #12]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40833333 	.word	0x40833333
 800202c:	080167c0 	.word	0x080167c0

08002030 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return batteryVoltage;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <pmGetBatteryVoltage+0x18>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	ee07 3a90 	vmov	s15, r3
}
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	200022c0 	.word	0x200022c0

0800204c <pmSetChargeState>:
    workerSchedule(pmGracefulShutdown, NULL);
  }
}

void pmSetChargeState(PMChargeStates chgState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <pmUpdateState>:

PMStates pmUpdateState()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <pmUpdateState+0x98>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <pmUpdateState+0x98>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 8002092:	f00d fbef 	bl	800f874 <xTaskGetTickCount>
 8002096:	4602      	mov	r2, r0
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <pmUpdateState+0x9c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <pmUpdateState+0xa0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 80020a8:	2300      	movs	r3, #0
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	e016      	b.n	80020dc <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 80020ae:	79bb      	ldrb	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <pmUpdateState+0x62>
 80020b4:	797b      	ldrb	r3, [r7, #5]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <pmUpdateState+0x62>
  {
    nextState = charged;
 80020c0:	2302      	movs	r3, #2
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	e00a      	b.n	80020dc <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <pmUpdateState+0x74>
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <pmUpdateState+0x74>
  {
    nextState = charging;
 80020d2:	2301      	movs	r3, #1
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	e001      	b.n	80020dc <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 80020d8:	2300      	movs	r3, #0
 80020da:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <pmUpdateState+0x8c>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 80020ec:	2303      	movs	r3, #3
 80020ee:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 80020f0:	79fb      	ldrb	r3, [r7, #7]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200022f0 	.word	0x200022f0
 8002100:	200022e4 	.word	0x200022e4
 8002104:	200022fa 	.word	0x200022fa

08002108 <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <pmMeasureExtBatteryCurrent+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00d      	beq.n	8002132 <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <pmMeasureExtBatteryCurrent+0x48>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <pmMeasureExtBatteryCurrent+0x4c>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002130:	e002      	b.n	8002138 <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
  }

  return current;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ee07 3a90 	vmov	s15, r3
}
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	200022dc 	.word	0x200022dc
 8002150:	200022fc 	.word	0x200022fc
 8002154:	200022e0 	.word	0x200022e0

08002158 <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <pmMeasureExtBatteryVoltage+0x44>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <pmMeasureExtBatteryVoltage+0x48>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <pmMeasureExtBatteryVoltage+0x4c>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002180:	e002      	b.n	8002188 <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	ee07 3a90 	vmov	s15, r3
}
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	200022d2 	.word	0x200022d2
 80021a0:	200022fe 	.word	0x200022fe
 80021a4:	200022d4 	.word	0x200022d4

080021a8 <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 80021b4:	2105      	movs	r1, #5
 80021b6:	2000      	movs	r0, #0
 80021b8:	f00d fcba 	bl	800fb30 <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 80021bc:	f00d fb5a 	bl	800f874 <xTaskGetTickCount>
 80021c0:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 80021c2:	4a6f      	ldr	r2, [pc, #444]	; (8002380 <pmTask+0x1d8>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 80021c8:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <pmTask+0x1dc>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff ff3c 	bl	800204c <pmSetChargeState>
  systemWaitStart();
 80021d4:	f000 f96c 	bl	80024b0 <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	f00d f98d 	bl	800f4f8 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 80021de:	f00d fb49 	bl	800f874 <xTaskGetTickCount>
 80021e2:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 80021e4:	f7ff ffb8 	bl	8002158 <pmMeasureExtBatteryVoltage>
 80021e8:	eef0 7a40 	vmov.f32	s15, s0
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <pmTask+0x1e0>)
 80021ee:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 80021f2:	4b65      	ldr	r3, [pc, #404]	; (8002388 <pmTask+0x1e0>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800238c <pmTask+0x1e4>
 80021fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002204:	ee17 3a90 	vmov	r3, s15
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b61      	ldr	r3, [pc, #388]	; (8002390 <pmTask+0x1e8>)
 800220c:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 800220e:	f7ff ff7b 	bl	8002108 <pmMeasureExtBatteryCurrent>
 8002212:	eef0 7a40 	vmov.f32	s15, s0
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <pmTask+0x1ec>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 800221c:	f7ff ff08 	bl	8002030 <pmGetBatteryVoltage>
 8002220:	eef0 7a40 	vmov.f32	s15, s0
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	f7ff fec8 	bl	8001fbc <pmBatteryChargeFromVoltage>
 800222c:	4603      	mov	r3, r0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4413      	add	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <pmTask+0x1f0>)
 800223c:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 800223e:	f7ff fef7 	bl	8002030 <pmGetBatteryVoltage>
 8002242:	eeb0 7a40 	vmov.f32	s14, s0
 8002246:	4b55      	ldr	r3, [pc, #340]	; (800239c <pmTask+0x1f4>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002254:	dd02      	ble.n	800225c <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 8002256:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <pmTask+0x1d8>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 800225c:	f7ff fee8 	bl	8002030 <pmGetBatteryVoltage>
 8002260:	eeb0 7a40 	vmov.f32	s14, s0
 8002264:	4b4e      	ldr	r3, [pc, #312]	; (80023a0 <pmTask+0x1f8>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	dd02      	ble.n	800227a <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 8002274:	4a43      	ldr	r2, [pc, #268]	; (8002384 <pmTask+0x1dc>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 800227a:	f7ff fef3 	bl	8002064 <pmUpdateState>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <pmTask+0x1fc>)
 8002284:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <pmTask+0x1fc>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	7dfa      	ldrb	r2, [r7, #23]
 800228c:	429a      	cmp	r2, r3
 800228e:	d03b      	beq.n	8002308 <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 8002290:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <pmTask+0x1fc>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d833      	bhi.n	8002300 <pmTask+0x158>
 8002298:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <pmTask+0xf8>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022ed 	.word	0x080022ed
 80022a4:	080022c5 	.word	0x080022c5
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	080022df 	.word	0x080022df
      {
        case charged:
          ledseqStop(&seq_charging);
 80022b0:	483d      	ldr	r0, [pc, #244]	; (80023a8 <pmTask+0x200>)
 80022b2:	f7ff fcbb 	bl	8001c2c <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 80022b6:	483d      	ldr	r0, [pc, #244]	; (80023ac <pmTask+0x204>)
 80022b8:	f7ff fc5c 	bl	8001b74 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 80022bc:	2004      	movs	r0, #4
 80022be:	f000 f879 	bl	80023b4 <soundSetEffect>
          break;
 80022c2:	e01e      	b.n	8002302 <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 80022c4:	483a      	ldr	r0, [pc, #232]	; (80023b0 <pmTask+0x208>)
 80022c6:	f7ff fcb1 	bl	8001c2c <ledseqStop>
          ledseqStop(&seq_charged);
 80022ca:	4838      	ldr	r0, [pc, #224]	; (80023ac <pmTask+0x204>)
 80022cc:	f7ff fcae 	bl	8001c2c <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 80022d0:	4835      	ldr	r0, [pc, #212]	; (80023a8 <pmTask+0x200>)
 80022d2:	f7ff fc4f 	bl	8001b74 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 80022d6:	2003      	movs	r0, #3
 80022d8:	f000 f86c 	bl	80023b4 <soundSetEffect>
          break;
 80022dc:	e011      	b.n	8002302 <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 80022de:	4834      	ldr	r0, [pc, #208]	; (80023b0 <pmTask+0x208>)
 80022e0:	f7ff fc48 	bl	8001b74 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 80022e4:	2005      	movs	r0, #5
 80022e6:	f000 f865 	bl	80023b4 <soundSetEffect>
          break;
 80022ea:	e00a      	b.n	8002302 <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 80022ec:	482e      	ldr	r0, [pc, #184]	; (80023a8 <pmTask+0x200>)
 80022ee:	f7ff fc41 	bl	8001b74 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 80022f2:	482e      	ldr	r0, [pc, #184]	; (80023ac <pmTask+0x204>)
 80022f4:	f7ff fc22 	bl	8001b3c <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 80022f8:	2002      	movs	r0, #2
 80022fa:	f000 f85b 	bl	80023b4 <soundSetEffect>
          break;
 80022fe:	e000      	b.n	8002302 <pmTask+0x15a>
        default:
          break;
 8002300:	bf00      	nop
      }
      pmStateOld = pmState;
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <pmTask+0x1fc>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <pmTask+0x1fc>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d832      	bhi.n	8002376 <pmTask+0x1ce>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <pmTask+0x170>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002371 	.word	0x08002371
 800231c:	08002329 	.word	0x08002329
 8002320:	08002377 	.word	0x08002377
 8002324:	08002357 	.word	0x08002357
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 8002328:	f7ff fe82 	bl	8002030 <pmGetBatteryVoltage>
 800232c:	eef0 7a40 	vmov.f32	s15, s0
 8002330:	eeb0 0a67 	vmov.f32	s0, s15
 8002334:	f7ff fe42 	bl	8001fbc <pmBatteryChargeFromVoltage>
 8002338:	ee07 0a90 	vmov	s15, r0
 800233c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002340:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002348:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 800234c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002350:	f7ff fc44 	bl	8001bdc <ledseqSetChargeLevel>
        }
        break;
 8002354:	e012      	b.n	800237c <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <pmTask+0x1dc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d907      	bls.n	800237a <pmTask+0x1d2>
          {
            pmSystemShutdown();
 800236a:	f7ff fe1f 	bl	8001fac <pmSystemShutdown>
          }
        }
        break;
 800236e:	e004      	b.n	800237a <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 8002370:	f7ff fe1c 	bl	8001fac <pmSystemShutdown>
          }
        }
        break;
 8002374:	e002      	b.n	800237c <pmTask+0x1d4>
      default:
        break;
 8002376:	bf00      	nop
 8002378:	e72e      	b.n	80021d8 <pmTask+0x30>
        break;
 800237a:	bf00      	nop
    vTaskDelay(100);
 800237c:	e72c      	b.n	80021d8 <pmTask+0x30>
 800237e:	bf00      	nop
 8002380:	200022e4 	.word	0x200022e4
 8002384:	200022e8 	.word	0x200022e8
 8002388:	200022cc 	.word	0x200022cc
 800238c:	447a0000 	.word	0x447a0000
 8002390:	200022d0 	.word	0x200022d0
 8002394:	200022d8 	.word	0x200022d8
 8002398:	200022f9 	.word	0x200022f9
 800239c:	20000260 	.word	0x20000260
 80023a0:	2000025c 	.word	0x2000025c
 80023a4:	200022ed 	.word	0x200022ed
 80023a8:	200001b0 	.word	0x200001b0
 80023ac:	20000188 	.word	0x20000188
 80023b0:	20000070 	.word	0x20000070

080023b4 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <soundSetEffect+0x1c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20002500 	.word	0x20002500

080023d4 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 80023da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023de:	461a      	mov	r2, r3
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <systemLaunch+0x30>)
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <systemLaunch+0x34>)
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2302      	movs	r3, #2
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2300      	movs	r3, #0
 80023ee:	4907      	ldr	r1, [pc, #28]	; (800240c <systemLaunch+0x38>)
 80023f0:	4807      	ldr	r0, [pc, #28]	; (8002410 <systemLaunch+0x3c>)
 80023f2:	f00c fec9 	bl	800f188 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 80023f6:	4907      	ldr	r1, [pc, #28]	; (8002414 <systemLaunch+0x40>)
 80023f8:	2000      	movs	r0, #0
 80023fa:	f001 fa1b 	bl	8003834 <SEGGER_RTT_printf>

}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000fc4 	.word	0x20000fc4
 8002408:	20002510 	.word	0x20002510
 800240c:	08014e98 	.word	0x08014e98
 8002410:	08002419 	.word	0x08002419
 8002414:	08014ea0 	.word	0x08014ea0

08002418 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  bool pass = true;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <systemTask+0x7c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <systemTask+0x80>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <systemTask+0x84>)
 8002430:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8002432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002436:	f002 fa1f 	bl	8004878 <delay_us>
  time2 = DWT->CYCCNT;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <systemTask+0x80>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <systemTask+0x88>)
 8002440:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(time2-time1)/CLOCK_PER_USEC);
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <systemTask+0x88>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <systemTask+0x84>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <systemTask+0x8c>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	461a      	mov	r2, r3
 8002456:	4914      	ldr	r1, [pc, #80]	; (80024a8 <systemTask+0x90>)
 8002458:	2000      	movs	r0, #0
 800245a:	f001 f9eb 	bl	8003834 <SEGGER_RTT_printf>


  ledInit();
 800245e:	f7ff fa01 	bl	8001864 <ledInit>
  ledSet(CHG_LED, SET);
 8002462:	2101      	movs	r1, #1
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fa6f 	bl	8001948 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 800246a:	f001 fb0b 	bl	8003a84 <queueMonitorInit>
#endif

#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  uartInit();
 800246e:	f001 fa95 	bl	800399c <uartInit>
  uartDmaInit();
 8002472:	f001 fab1 	bl	80039d8 <uartDmaInit>
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8002476:	f7ff f8b9 	bl	80015ec <ICM20602_Initialization>

  delay_us(5000000);
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <systemTask+0x94>)
 800247c:	f002 f9fc 	bl	8004878 <delay_us>

  passthroughInit();	// Create passthrough task
 8002480:	f000 fa26 	bl	80028d0 <passthroughInit>

  systemInit();
 8002484:	f000 f836 	bl	80024f4 <systemInit>
  commInit();
 8002488:	f7fe fdbc 	bl	8001004 <commInit>
    vTaskDelay(portMAX_DELAY);


    */

}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	e000e010 	.word	0xe000e010
 8002498:	e0001000 	.word	0xe0001000
 800249c:	20002508 	.word	0x20002508
 80024a0:	2000250c 	.word	0x2000250c
 80024a4:	38e38e39 	.word	0x38e38e39
 80024a8:	08014ec0 	.word	0x08014ec0
 80024ac:	004c4b40 	.word	0x004c4b40

080024b0 <systemWaitStart>:



void systemWaitStart(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 80024b4:	e002      	b.n	80024bc <systemWaitStart+0xc>
    vTaskDelay(2);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f00d f81e 	bl	800f4f8 <vTaskDelay>
  while(!isInit)
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <systemWaitStart+0x3c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f5      	bne.n	80024b6 <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <systemWaitStart+0x40>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00c fb40 	bl	800eb58 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <systemWaitStart+0x40>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	2300      	movs	r3, #0
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	f00c f833 	bl	800e54c <xQueueGenericSend>
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20002504 	.word	0x20002504
 80024f0:	20002910 	.word	0x20002910

080024f4 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af02      	add	r7, sp, #8
  if(isInit)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <systemInit+0x124>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 8087 	bne.w	8002612 <systemInit+0x11e>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8002504:	4945      	ldr	r1, [pc, #276]	; (800261c <systemInit+0x128>)
 8002506:	2001      	movs	r0, #1
 8002508:	f00c f805 	bl	800e516 <xQueueCreateMutexStatic>
 800250c:	4603      	mov	r3, r0
 800250e:	4a44      	ldr	r2, [pc, #272]	; (8002620 <systemInit+0x12c>)
 8002510:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <systemInit+0x12c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800251a:	4618      	mov	r0, r3
 800251c:	f00c fb1c 	bl	800eb58 <xQueueSemaphoreTake>

  usblinkInit();
 8002520:	f000 f990 	bl	8002844 <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8002524:	493f      	ldr	r1, [pc, #252]	; (8002624 <systemInit+0x130>)
 8002526:	2000      	movs	r0, #0
 8002528:	f001 f984 	bl	8003834 <SEGGER_RTT_printf>

  sysLoadInit();
 800252c:	f001 fbca 	bl	8003cc4 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8002530:	493d      	ldr	r1, [pc, #244]	; (8002628 <systemInit+0x134>)
 8002532:	2000      	movs	r0, #0
 8002534:	f001 f97e 	bl	8003834 <SEGGER_RTT_printf>
#if CONFIG_ENABLE_CPX
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
  debugInit();
 8002538:	f001 fa20 	bl	800397c <debugInit>
  crtpInit();
 800253c:	f7fe fd74 	bl	8001028 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8002540:	493a      	ldr	r1, [pc, #232]	; (800262c <systemInit+0x138>)
 8002542:	2000      	movs	r0, #0
 8002544:	f001 f976 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <systemInit+0x13c>)
 800254a:	2000      	movs	r0, #0
 800254c:	f001 f972 	bl	8003834 <SEGGER_RTT_printf>

  consoleInit();
 8002550:	f001 f9e4 	bl	800391c <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8002554:	f000 face 	bl	8002af4 <platformConfigGetDeviceTypeName>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4935      	ldr	r1, [pc, #212]	; (8002634 <systemInit+0x140>)
 800255e:	2000      	movs	r0, #0
 8002560:	f001 f968 	bl	8003834 <SEGGER_RTT_printf>

  if (V_PRODUCTION_RELEASE) {
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <systemInit+0x144>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <systemInit+0x88>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <systemInit+0x148>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4933      	ldr	r1, [pc, #204]	; (8002640 <systemInit+0x14c>)
 8002574:	2000      	movs	r0, #0
 8002576:	f001 f95d 	bl	8003834 <SEGGER_RTT_printf>
 800257a:	e014      	b.n	80025a6 <systemInit+0xb2>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <systemInit+0x150>)
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <systemInit+0x154>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <systemInit+0x148>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a30      	ldr	r2, [pc, #192]	; (800264c <systemInit+0x158>)
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	2a00      	cmp	r2, #0
 800258e:	d001      	beq.n	8002594 <systemInit+0xa0>
 8002590:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <systemInit+0x15c>)
 8002592:	e000      	b.n	8002596 <systemInit+0xa2>
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <systemInit+0x160>)
 8002596:	9201      	str	r2, [sp, #4]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4603      	mov	r3, r0
 800259c:	460a      	mov	r2, r1
 800259e:	492e      	ldr	r1, [pc, #184]	; (8002658 <systemInit+0x164>)
 80025a0:	2000      	movs	r0, #0
 80025a2:	f001 f947 	bl	8003834 <SEGGER_RTT_printf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <systemInit+0x168>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <systemInit+0x16c>)
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <systemInit+0x170>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	482d      	ldr	r0, [pc, #180]	; (8002668 <systemInit+0x174>)
 80025b4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80025b8:	9001      	str	r0, [sp, #4]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	492b      	ldr	r1, [pc, #172]	; (800266c <systemInit+0x178>)
 80025c0:	2000      	movs	r0, #0
 80025c2:	f001 f937 	bl	8003834 <SEGGER_RTT_printf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 80025c6:	f001 fcab 	bl	8003f20 <workerInit>
  ledseqInit();
 80025ca:	f7ff f9ff 	bl	80019cc <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 80025ce:	4928      	ldr	r1, [pc, #160]	; (8002670 <systemInit+0x17c>)
 80025d0:	2000      	movs	r0, #0
 80025d2:	f001 f92f 	bl	8003834 <SEGGER_RTT_printf>


  pmInit();
 80025d6:	f7ff fc63 	bl	8001ea0 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 80025da:	4926      	ldr	r1, [pc, #152]	; (8002674 <systemInit+0x180>)
 80025dc:	2000      	movs	r0, #0
 80025de:	f001 f929 	bl	8003834 <SEGGER_RTT_printf>

  buzzerInit();
 80025e2:	f7ff f8d7 	bl	8001794 <buzzerInit>
  buzzerOn(3000);
  HAL_Delay(2);
  buzzerOn(2000);
  HAL_Delay(2);
  */
  buzzerOff();
 80025e6:	f7ff f8e5 	bl	80017b4 <buzzerOff>

  peerLocalizationInit();
 80025ea:	f7fe fcbb 	bl	8000f64 <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <systemInit+0x184>)
 80025f0:	2000      	movs	r0, #0
 80025f2:	f001 f91f 	bl	8003834 <SEGGER_RTT_printf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <systemInit+0x188>)
 80025f8:	2000      	movs	r0, #0
 80025fa:	f001 f91b 	bl	8003834 <SEGGER_RTT_printf>
  appInit();
 80025fe:	f7fe fcb9 	bl	8000f74 <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8002602:	491f      	ldr	r1, [pc, #124]	; (8002680 <systemInit+0x18c>)
 8002604:	2000      	movs	r0, #0
 8002606:	f001 f915 	bl	8003834 <SEGGER_RTT_printf>
#endif

  isInit = true;
 800260a:	4b03      	ldr	r3, [pc, #12]	; (8002618 <systemInit+0x124>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e000      	b.n	8002614 <systemInit+0x120>
    return;
 8002612:	bf00      	nop
}
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20002504 	.word	0x20002504
 800261c:	20002914 	.word	0x20002914
 8002620:	20002910 	.word	0x20002910
 8002624:	08014ed0 	.word	0x08014ed0
 8002628:	08014ef0 	.word	0x08014ef0
 800262c:	08014f14 	.word	0x08014f14
 8002630:	08014f34 	.word	0x08014f34
 8002634:	08014f54 	.word	0x08014f54
 8002638:	080167f9 	.word	0x080167f9
 800263c:	200002e0 	.word	0x200002e0
 8002640:	08014f6c 	.word	0x08014f6c
 8002644:	200002d8 	.word	0x200002d8
 8002648:	200002dc 	.word	0x200002dc
 800264c:	080167f8 	.word	0x080167f8
 8002650:	08014f84 	.word	0x08014f84
 8002654:	08014f90 	.word	0x08014f90
 8002658:	08014f98 	.word	0x08014f98
 800265c:	1fff7a18 	.word	0x1fff7a18
 8002660:	1fff7a14 	.word	0x1fff7a14
 8002664:	1fff7a10 	.word	0x1fff7a10
 8002668:	1fff7a22 	.word	0x1fff7a22
 800266c:	08014fb0 	.word	0x08014fb0
 8002670:	08014fe0 	.word	0x08014fe0
 8002674:	08015004 	.word	0x08015004
 8002678:	08015020 	.word	0x08015020
 800267c:	08015044 	.word	0x08015044
 8002680:	08015080 	.word	0x08015080

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <__NVIC_EnableIRQ+0x38>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db12      	blt.n	80026f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	490a      	ldr	r1, [pc, #40]	; (8002704 <__NVIC_DisableIRQ+0x44>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	3320      	adds	r3, #32
 80026e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026ec:	f3bf 8f4f 	dsb	sy
}
 80026f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026f2:	f3bf 8f6f 	isb	sy
}
 80026f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100

08002708 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8002710:	bf00      	nop
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <usbGetDataBlocking+0x50>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f00c f93b 	bl	800e998 <xQueueReceive>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	d1f4      	bne.n	8002712 <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 8002728:	2043      	movs	r0, #67	; 0x43
 800272a:	f7ff ffc9 	bl	80026c0 <__NVIC_DisableIRQ>
  if (rxStopped) {
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <usbGetDataBlocking+0x54>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <usbGetDataBlocking+0x58>)
 800273a:	2101      	movs	r1, #1
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <usbGetDataBlocking+0x5c>)
 800273e:	f00f fc97 	bl	8012070 <USBD_LL_PrepareReceive>
    rxStopped = false;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <usbGetDataBlocking+0x54>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 8002748:	2043      	movs	r0, #67	; 0x43
 800274a:	f7ff ff9b 	bl	8002684 <__NVIC_EnableIRQ>

  return true;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20002968 	.word	0x20002968
 800275c:	20000264 	.word	0x20000264
 8002760:	20002971 	.word	0x20002971
 8002764:	2000926c 	.word	0x2000926c

08002768 <usbInit>:

void usbInit(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 800276e:	2305      	movs	r3, #5
 8002770:	4618      	mov	r0, r3
 8002772:	2341      	movs	r3, #65	; 0x41
 8002774:	4619      	mov	r1, r3
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <usbInit+0x64>)
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <usbInit+0x68>)
 800277e:	f00b fdcf 	bl	800e320 <xQueueGenericCreateStatic>
 8002782:	4603      	mov	r3, r0
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <usbInit+0x6c>)
 8002786:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <usbInit+0x6c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <usbInit+0x70>)
 800278e:	4913      	ldr	r1, [pc, #76]	; (80027dc <usbInit+0x74>)
 8002790:	4618      	mov	r0, r3
 8002792:	f001 f9bf 	bl	8003b14 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 8002796:	2301      	movs	r3, #1
 8002798:	4618      	mov	r0, r3
 800279a:	2341      	movs	r3, #65	; 0x41
 800279c:	4619      	mov	r1, r3
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <usbInit+0x78>)
 80027a4:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <usbInit+0x7c>)
 80027a6:	f00b fdbb 	bl	800e320 <xQueueGenericCreateStatic>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <usbInit+0x80>)
 80027ae:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <usbInit+0x80>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <usbInit+0x84>)
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <usbInit+0x74>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 f9ab 	bl	8003b14 <qmRegisterQueue>

  isInit = true;
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <usbInit+0x88>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200011c4 	.word	0x200011c4
 80027d0:	2000107c 	.word	0x2000107c
 80027d4:	20002968 	.word	0x20002968
 80027d8:	0801509c 	.word	0x0801509c
 80027dc:	080150a8 	.word	0x080150a8
 80027e0:	20001258 	.word	0x20001258
 80027e4:	20001214 	.word	0x20001214
 80027e8:	2000296c 	.word	0x2000296c
 80027ec:	080150c4 	.word	0x080150c4
 80027f0:	20002964 	.word	0x20002964

080027f4 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <usblinkTask+0x3c>)
 80027fe:	f7ff ff83 	bl	8002708 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <usblinkTask+0x3c>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	3b01      	subs	r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <usblinkTask+0x40>)
 800280c:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <usblinkTask+0x3c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4908      	ldr	r1, [pc, #32]	; (8002838 <usblinkTask+0x44>)
 8002816:	4809      	ldr	r0, [pc, #36]	; (800283c <usblinkTask+0x48>)
 8002818:	f010 fc67 	bl	80130ea <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <usblinkTask+0x4c>)
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	2300      	movs	r3, #0
 8002822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002826:	4903      	ldr	r1, [pc, #12]	; (8002834 <usblinkTask+0x40>)
 8002828:	f00b fe90 	bl	800e54c <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 800282c:	e7e6      	b.n	80027fc <usblinkTask+0x8>
 800282e:	bf00      	nop
 8002830:	20002bb8 	.word	0x20002bb8
 8002834:	20002bfc 	.word	0x20002bfc
 8002838:	20002bb9 	.word	0x20002bb9
 800283c:	20002bfd 	.word	0x20002bfd
 8002840:	200029b4 	.word	0x200029b4

08002844 <usblinkInit>:
/*
 * Public functions
 */

void usblinkInit()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af04      	add	r7, sp, #16
  if(isInit)
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <usblinkInit+0x64>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d126      	bne.n	80028a0 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 8002852:	f7ff ff89 	bl	8002768 <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8002856:	2310      	movs	r3, #16
 8002858:	4618      	mov	r0, r3
 800285a:	2320      	movs	r3, #32
 800285c:	4619      	mov	r1, r3
 800285e:	2300      	movs	r3, #0
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <usblinkInit+0x68>)
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <usblinkInit+0x6c>)
 8002866:	f00b fd5b 	bl	800e320 <xQueueGenericCreateStatic>
 800286a:	4603      	mov	r3, r0
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <usblinkInit+0x70>)
 800286e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <usblinkInit+0x70>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <usblinkInit+0x74>)
 8002876:	4911      	ldr	r1, [pc, #68]	; (80028bc <usblinkInit+0x78>)
 8002878:	4618      	mov	r0, r3
 800287a:	f001 f94b 	bl	8003b14 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	461a      	mov	r2, r3
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <usblinkInit+0x7c>)
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <usblinkInit+0x80>)
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	2303      	movs	r3, #3
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	490d      	ldr	r1, [pc, #52]	; (80028c8 <usblinkInit+0x84>)
 8002892:	480e      	ldr	r0, [pc, #56]	; (80028cc <usblinkInit+0x88>)
 8002894:	f00c fc78 	bl	800f188 <xTaskCreateStatic>

  isInit = true;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <usblinkInit+0x64>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e000      	b.n	80028a2 <usblinkInit+0x5e>
    return;
 80028a0:	bf00      	nop
}
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200029b1 	.word	0x200029b1
 80028ac:	200014a8 	.word	0x200014a8
 80028b0:	200012a8 	.word	0x200012a8
 80028b4:	200029b4 	.word	0x200029b4
 80028b8:	080150d0 	.word	0x080150d0
 80028bc:	080150e4 	.word	0x080150e4
 80028c0:	200014f8 	.word	0x200014f8
 80028c4:	200029b8 	.word	0x200029b8
 80028c8:	08015104 	.word	0x08015104
 80028cc:	080027f5 	.word	0x080027f5

080028d0 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af04      	add	r7, sp, #16
  if(isInit)
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <passthroughInit+0x8c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d13b      	bne.n	8002956 <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 80028de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e2:	4618      	mov	r0, r3
 80028e4:	2301      	movs	r3, #1
 80028e6:	4619      	mov	r1, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <passthroughInit+0x90>)
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <passthroughInit+0x94>)
 80028f0:	f00b fd16 	bl	800e320 <xQueueGenericCreateStatic>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <passthroughInit+0x98>)
 80028f8:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <passthroughInit+0x98>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <passthroughInit+0x9c>)
 8002900:	491b      	ldr	r1, [pc, #108]	; (8002970 <passthroughInit+0xa0>)
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f906 	bl	8003b14 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8002908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290c:	4618      	mov	r0, r3
 800290e:	2301      	movs	r3, #1
 8002910:	4619      	mov	r1, r3
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <passthroughInit+0xa4>)
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <passthroughInit+0xa8>)
 800291a:	f00b fd01 	bl	800e320 <xQueueGenericCreateStatic>
 800291e:	4603      	mov	r3, r0
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <passthroughInit+0xac>)
 8002922:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <passthroughInit+0x98>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a10      	ldr	r2, [pc, #64]	; (800296c <passthroughInit+0x9c>)
 800292a:	4911      	ldr	r1, [pc, #68]	; (8002970 <passthroughInit+0xa0>)
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f8f1 	bl	8003b14 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 8002932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002936:	461a      	mov	r2, r3
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <passthroughInit+0xb0>)
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <passthroughInit+0xb4>)
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2305      	movs	r3, #5
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	4910      	ldr	r1, [pc, #64]	; (8002988 <passthroughInit+0xb8>)
 8002948:	4810      	ldr	r0, [pc, #64]	; (800298c <passthroughInit+0xbc>)
 800294a:	f00c fc1d 	bl	800f188 <xTaskCreateStatic>
 800294e:	4603      	mov	r3, r0
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <passthroughInit+0xc0>)
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e000      	b.n	8002958 <passthroughInit+0x88>
    return;
 8002956:	bf00      	nop
}
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20003020 	.word	0x20003020
 8002960:	20001868 	.word	0x20001868
 8002964:	20001668 	.word	0x20001668
 8002968:	20003024 	.word	0x20003024
 800296c:	0801510c 	.word	0x0801510c
 8002970:	08015118 	.word	0x08015118
 8002974:	20001ab8 	.word	0x20001ab8
 8002978:	200018b8 	.word	0x200018b8
 800297c:	20003028 	.word	0x20003028
 8002980:	200015b0 	.word	0x200015b0
 8002984:	20002c20 	.word	0x20002c20
 8002988:	08015144 	.word	0x08015144
 800298c:	08002995 	.word	0x08002995
 8002990:	20002c1c 	.word	0x20002c1c

08002994 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 800299c:	f7ff fd88 	bl	80024b0 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029a4:	2001      	movs	r0, #1
 80029a6:	f00d fe17 	bl	80105d8 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 80029aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029ae:	2000      	movs	r0, #0
 80029b0:	f00d fe5e 	bl	8010670 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80029b4:	e7f4      	b.n	80029a0 <passthroughTask+0xc>

080029b6 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f8a2 	bl	8002b0c <platformGetListOfConfigurations>
 80029c8:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4619      	mov	r1, r3
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f854 	bl	8002a7c <platformInitConfiguration>
 80029d4:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b30      	cmp	r3, #48	; 0x30
 80029fa:	d104      	bne.n	8002a06 <platformParseDeviceTypeString+0x1c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3301      	adds	r3, #1
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b3b      	cmp	r3, #59	; 0x3b
 8002a04:	d001      	beq.n	8002a0a <platformParseDeviceTypeString+0x20>
    return 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e034      	b.n	8002a74 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	3304      	adds	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e00e      	b.n	8002a3c <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <platformParseDeviceTypeString+0x5a>
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b3b      	cmp	r3, #59	; 0x3b
 8002a34:	d006      	beq.n	8002a44 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	ddec      	ble.n	8002a1e <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dd01      	ble.n	8002a50 <platformParseDeviceTypeString+0x66>
    return 1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e011      	b.n	8002a74 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4619      	mov	r1, r3
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f010 fb41 	bl	80130ea <memcpy>
  deviceType[length] = '\0';
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
  return 0;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b090      	sub	sp, #64	; 0x40
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f85e 	bl	8002b4c <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8002a90:	f107 020c 	add.w	r2, r7, #12
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ffa5 	bl	80029ea <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	e01a      	b.n	8002adc <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8002aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	f107 020c 	add.w	r2, r7, #12
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fb85 	bl	80001d0 <strcmp>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <platformInitConfiguration+0x5a>
      active_config = config;
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <platformInitConfiguration+0x74>)
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	6013      	str	r3, [r2, #0]
      return 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e007      	b.n	8002ae6 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	3301      	adds	r3, #1
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbe0      	blt.n	8002aa6 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3740      	adds	r7, #64	; 0x40
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000302c 	.word	0x2000302c

08002af4 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <platformConfigGetDeviceTypeName+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3305      	adds	r3, #5
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	2000302c 	.word	0x2000302c

08002b0c <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	601a      	str	r2, [r3, #0]
  return configs;
 8002b1a:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <platformGetListOfConfigurations+0x1c>)
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	20000268 	.word	0x20000268

08002b2c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002b3e:	015b      	lsls	r3, r3, #5
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e00d      	b.n	8002b7a <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8002b5e:	6938      	ldr	r0, [r7, #16]
 8002b60:	f7ff ffe4 	bl	8002b2c <getAddressOfOtpMemoryBlock>
 8002b64:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	617b      	str	r3, [r7, #20]
      break;
 8002b72:	e005      	b.n	8002b80 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	3301      	adds	r3, #1
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	ddee      	ble.n	8002b5e <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <platformGetDeviceTypeString+0x42>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d101      	bne.n	8002b92 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <platformGetDeviceTypeString+0x60>)
 8002b90:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8002b92:	2220      	movs	r2, #32
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f010 f9c6 	bl	8012f28 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3320      	adds	r3, #32
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08015238 	.word	0x08015238

08002bb0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <_DoInit+0x8c>)
 8002bb8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <_DoInit+0x90>)
 8002bca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <_DoInit+0x94>)
 8002bd0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bd8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <_DoInit+0x90>)
 8002bf0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_DoInit+0x98>)
 8002bf6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3307      	adds	r3, #7
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <_DoInit+0x9c>)
 8002c16:	6810      	ldr	r0, [r2, #0]
 8002c18:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <_DoInit+0xa0>)
 8002c1e:	6810      	ldr	r0, [r2, #0]
 8002c20:	6018      	str	r0, [r3, #0]
 8002c22:	8891      	ldrh	r1, [r2, #4]
 8002c24:	7992      	ldrb	r2, [r2, #6]
 8002c26:	8099      	strh	r1, [r3, #4]
 8002c28:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	719a      	strb	r2, [r3, #6]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	20003030 	.word	0x20003030
 8002c40:	08015240 	.word	0x08015240
 8002c44:	200030d8 	.word	0x200030d8
 8002c48:	200040d8 	.word	0x200040d8
 8002c4c:	0801524c 	.word	0x0801524c
 8002c50:	08015250 	.word	0x08015250

08002c54 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d905      	bls.n	8002c84 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e007      	b.n	8002c94 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	6939      	ldr	r1, [r7, #16]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1acb      	subs	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b01      	subs	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bf28      	it	cs
 8002ca2:	4613      	movcs	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	bf28      	it	cs
 8002cae:	4613      	movcs	r3, r2
 8002cb0:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4413      	add	r3, r2
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f010 fa13 	bl	80130ea <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d101      	bne.n	8002cf2 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1b5      	bne.n	8002c6a <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d90e      	bls.n	8002d4a <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f010 f9d6 	bl	80130ea <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	441a      	add	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002d48:	e01a      	b.n	8002d80 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f010 f9c5 	bl	80130ea <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6858      	ldr	r0, [r3, #4]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f010 f9b8 	bl	80130ea <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	60da      	str	r2, [r3, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d808      	bhi.n	8002db6 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	3b01      	subs	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e004      	b.n	8002dc0 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002dc0:	697b      	ldr	r3, [r7, #20]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <SEGGER_RTT_WriteNoLock+0x9c>)
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d029      	beq.n	8002e4e <SEGGER_RTT_WriteNoLock+0x7e>
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d82e      	bhi.n	8002e5c <SEGGER_RTT_WriteNoLock+0x8c>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <SEGGER_RTT_WriteNoLock+0x38>
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d013      	beq.n	8002e2e <SEGGER_RTT_WriteNoLock+0x5e>
 8002e06:	e029      	b.n	8002e5c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002e08:	6978      	ldr	r0, [r7, #20]
 8002e0a:	f7ff ffbd 	bl	8002d88 <_GetAvailWriteSpace>
 8002e0e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d202      	bcs.n	8002e1e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002e1c:	e021      	b.n	8002e62 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	69b9      	ldr	r1, [r7, #24]
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f7ff ff6e 	bl	8002d08 <_WriteNoCheck>
    break;
 8002e2c:	e019      	b.n	8002e62 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ffaa 	bl	8002d88 <_GetAvailWriteSpace>
 8002e34:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	bf28      	it	cs
 8002e3e:	4613      	movcs	r3, r2
 8002e40:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	69b9      	ldr	r1, [r7, #24]
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7ff ff5e 	bl	8002d08 <_WriteNoCheck>
    break;
 8002e4c:	e009      	b.n	8002e62 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff fefe 	bl	8002c54 <_WriteBlocking>
 8002e58:	61f8      	str	r0, [r7, #28]
    break;
 8002e5a:	e002      	b.n	8002e62 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
    break;
 8002e60:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002e62:	69fb      	ldr	r3, [r7, #28]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20003030 	.word	0x20003030

08002e70 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <SEGGER_RTT_Write+0x44>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <SEGGER_RTT_Write+0x18>
 8002e84:	f7ff fe94 	bl	8002bb0 <_DoInit>
  SEGGER_RTT_LOCK();
 8002e88:	f3ef 8311 	mrs	r3, BASEPRI
 8002e8c:	f04f 0120 	mov.w	r1, #32
 8002e90:	f381 8811 	msr	BASEPRI, r1
 8002e94:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff ff98 	bl	8002dd0 <SEGGER_RTT_WriteNoLock>
 8002ea0:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8002ea8:	693b      	ldr	r3, [r7, #16]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20003030 	.word	0x20003030

08002eb8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002ece:	f7ff fe6f 	bl	8002bb0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d24c      	bcs.n	8002f78 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002ede:	f3ef 8311 	mrs	r3, BASEPRI
 8002ee2:	f04f 0120 	mov.w	r1, #32
 8002ee6:	f381 8811 	msr	BASEPRI, r1
 8002eea:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d032      	beq.n	8002f58 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002ef2:	4925      	ldr	r1, [pc, #148]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002f06:	4920      	ldr	r1, [pc, #128]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	3304      	adds	r3, #4
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002f1c:	491a      	ldr	r1, [pc, #104]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	3320      	adds	r3, #32
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002f30:	4915      	ldr	r1, [pc, #84]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3328      	adds	r3, #40	; 0x28
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002f44:	4910      	ldr	r1, [pc, #64]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	3324      	adds	r3, #36	; 0x24
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002f58:	490b      	ldr	r1, [pc, #44]	; (8002f88 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	332c      	adds	r3, #44	; 0x2c
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e002      	b.n	8002f7e <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002f7e:	697b      	ldr	r3, [r7, #20]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20003030 	.word	0x20003030

08002f8c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  _DoInit();
 8002f90:	f7ff fe0e 	bl	8002bb0 <_DoInit>
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d80e      	bhi.n	8002fd4 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d115      	bne.n	800300c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6918      	ldr	r0, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f7ff ff3f 	bl	8002e70 <SEGGER_RTT_Write>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d004      	beq.n	8003006 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003002:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8003004:	e002      	b.n	800300c <_StoreChar+0x74>
      p->Cnt = 0u;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003026:	2301      	movs	r3, #1
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800302a:	2301      	movs	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800302e:	e007      	b.n	8003040 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	623b      	str	r3, [r7, #32]
    Width++;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3301      	adds	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d2f3      	bcs.n	8003030 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	d901      	bls.n	8003054 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d125      	bne.n	80030aa <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	2b00      	cmp	r3, #0
 8003062:	d022      	beq.n	80030aa <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <_PrintUnsigned+0x66>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <_PrintUnsigned+0x66>
        c = '0';
 8003074:	2330      	movs	r3, #48	; 0x30
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	e001      	b.n	800307e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800307a:	2320      	movs	r3, #32
 800307c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800307e:	e00b      	b.n	8003098 <_PrintUnsigned+0x84>
        FieldWidth--;
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	3b01      	subs	r3, #1
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003086:	7efb      	ldrb	r3, [r7, #27]
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff84 	bl	8002f98 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db07      	blt.n	80030a8 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <_PrintUnsigned+0x96>
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3ec      	bcc.n	8003080 <_PrintUnsigned+0x6c>
 80030a6:	e000      	b.n	80030aa <_PrintUnsigned+0x96>
          break;
 80030a8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db55      	blt.n	800315e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d903      	bls.n	80030c0 <_PrintUnsigned+0xac>
        NumDigits--;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	e009      	b.n	80030d4 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d200      	bcs.n	80030d4 <_PrintUnsigned+0xc0>
          break;
 80030d2:	e005      	b.n	80030e0 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	fb02 f303 	mul.w	r3, r2, r3
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80030de:	e7e8      	b.n	80030b2 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <_PrintUnsigned+0x154>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff48 	bl	8002f98 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db08      	blt.n	8003122 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1df      	bne.n	80030e0 <_PrintUnsigned+0xcc>
 8003120:	e000      	b.n	8003124 <_PrintUnsigned+0x110>
        break;
 8003122:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d017      	beq.n	800315e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d014      	beq.n	800315e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003134:	e00a      	b.n	800314c <_PrintUnsigned+0x138>
          FieldWidth--;
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	3b01      	subs	r3, #1
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 800313c:	2120      	movs	r1, #32
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff ff2a 	bl	8002f98 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db07      	blt.n	800315c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <_PrintUnsigned+0x14a>
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	429a      	cmp	r2, r3
 8003158:	d3ed      	bcc.n	8003136 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800315a:	e000      	b.n	800315e <_PrintUnsigned+0x14a>
            break;
 800315c:	bf00      	nop
}
 800315e:	bf00      	nop
 8003160:	3728      	adds	r7, #40	; 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	080167e8 	.word	0x080167e8

0800316c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfb8      	it	lt
 8003180:	425b      	neglt	r3, r3
 8003182:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003184:	2301      	movs	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003188:	e007      	b.n	800319a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003192:	613b      	str	r3, [r7, #16]
    Width++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	daf3      	bge.n	800318a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d901      	bls.n	80031ae <_PrintInt+0x42>
    Width = NumDigits;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <_PrintInt+0x5e>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db04      	blt.n	80031c4 <_PrintInt+0x58>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <_PrintInt+0x5e>
    FieldWidth--;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <_PrintInt+0x6e>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01c      	beq.n	8003214 <_PrintInt+0xa8>
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d117      	bne.n	8003214 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d014      	beq.n	8003214 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80031ea:	e00a      	b.n	8003202 <_PrintInt+0x96>
        FieldWidth--;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80031f2:	2120      	movs	r1, #32
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fecf 	bl	8002f98 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db07      	blt.n	8003212 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <_PrintInt+0xa8>
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	429a      	cmp	r2, r3
 800320e:	d3ed      	bcc.n	80031ec <_PrintInt+0x80>
 8003210:	e000      	b.n	8003214 <_PrintInt+0xa8>
          break;
 8003212:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db4a      	blt.n	80032b2 <_PrintInt+0x146>
    if (v < 0) {
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	da07      	bge.n	8003232 <_PrintInt+0xc6>
      v = -v;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	425b      	negs	r3, r3
 8003226:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8003228:	212d      	movs	r1, #45	; 0x2d
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff feb4 	bl	8002f98 <_StoreChar>
 8003230:	e008      	b.n	8003244 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 800323c:	212b      	movs	r1, #43	; 0x2b
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff feaa 	bl	8002f98 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db32      	blt.n	80032b2 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01f      	beq.n	8003296 <_PrintInt+0x12a>
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11a      	bne.n	8003296 <_PrintInt+0x12a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d117      	bne.n	8003296 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d014      	beq.n	8003296 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800326c:	e00a      	b.n	8003284 <_PrintInt+0x118>
            FieldWidth--;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	3b01      	subs	r3, #1
 8003272:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8003274:	2130      	movs	r1, #48	; 0x30
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7ff fe8e 	bl	8002f98 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db07      	blt.n	8003294 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <_PrintInt+0x12a>
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	429a      	cmp	r2, r3
 8003290:	d3ed      	bcc.n	800326e <_PrintInt+0x102>
 8003292:	e000      	b.n	8003296 <_PrintInt+0x12a>
              break;
 8003294:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db09      	blt.n	80032b2 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff feb1 	bl	8003014 <_PrintUnsigned>
      }
    }
  }
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b0d2      	sub	sp, #328	; 0x148
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80032c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032ca:	6018      	str	r0, [r3, #0]
 80032cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80032d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032d4:	6019      	str	r1, [r3, #0]
 80032d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80032da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032de:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80032e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 80032f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80032fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 800330a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800330e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 800331a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800331e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003322:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003326:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	3201      	adds	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 8003330:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 825a 	beq.w	80037ee <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 800333a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800333e:	2b25      	cmp	r3, #37	; 0x25
 8003340:	f040 8247 	bne.w	80037d2 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 8003350:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003354:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 8003360:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003364:	3b23      	subs	r3, #35	; 0x23
 8003366:	2b0d      	cmp	r3, #13
 8003368:	d866      	bhi.n	8003438 <SEGGER_RTT_vprintf+0x17c>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <SEGGER_RTT_vprintf+0xb4>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003415 	.word	0x08003415
 8003374:	08003439 	.word	0x08003439
 8003378:	08003439 	.word	0x08003439
 800337c:	08003439 	.word	0x08003439
 8003380:	08003439 	.word	0x08003439
 8003384:	08003439 	.word	0x08003439
 8003388:	08003439 	.word	0x08003439
 800338c:	08003439 	.word	0x08003439
 8003390:	080033f1 	.word	0x080033f1
 8003394:	08003439 	.word	0x08003439
 8003398:	080033a9 	.word	0x080033a9
 800339c:	08003439 	.word	0x08003439
 80033a0:	08003439 	.word	0x08003439
 80033a4:	080033cd 	.word	0x080033cd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80033a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80033b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80033b8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033bc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80033c0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	3201      	adds	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e039      	b.n	8003440 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80033cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80033d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80033dc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80033e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80033e4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	3201      	adds	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e027      	b.n	8003440 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80033f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80033fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003400:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003404:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003408:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	3201      	adds	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e015      	b.n	8003440 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003414:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003420:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003424:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003428:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800342c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	3201      	adds	r2, #1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e003      	b.n	8003440 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800343e:	bf00      	nop
        }
      } while (v);
 8003440:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003444:	2b00      	cmp	r3, #0
 8003446:	d183      	bne.n	8003350 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 800344e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003452:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 800345e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003462:	2b2f      	cmp	r3, #47	; 0x2f
 8003464:	d91c      	bls.n	80034a0 <SEGGER_RTT_vprintf+0x1e4>
 8003466:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800346a:	2b39      	cmp	r3, #57	; 0x39
 800346c:	d818      	bhi.n	80034a0 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 800346e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003472:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003476:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800347a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	3201      	adds	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8003484:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	461a      	mov	r2, r3
 8003492:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003496:	4413      	add	r3, r2
 8003498:	3b30      	subs	r3, #48	; 0x30
 800349a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 800349e:	e7d6      	b.n	800344e <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 80034a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80034aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 80034b6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80034ba:	2b2e      	cmp	r3, #46	; 0x2e
 80034bc:	d133      	bne.n	8003526 <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 80034be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80034c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034c6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80034ca:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	3201      	adds	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 80034d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80034d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 80034e4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80034e8:	2b2f      	cmp	r3, #47	; 0x2f
 80034ea:	d91c      	bls.n	8003526 <SEGGER_RTT_vprintf+0x26a>
 80034ec:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80034f0:	2b39      	cmp	r3, #57	; 0x39
 80034f2:	d818      	bhi.n	8003526 <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 80034f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80034f8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034fc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003500:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	3201      	adds	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800350a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	461a      	mov	r2, r3
 8003518:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800351c:	4413      	add	r3, r2
 800351e:	3b30      	subs	r3, #48	; 0x30
 8003520:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 8003524:	e7d6      	b.n	80034d4 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003526:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800352a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 8003536:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800353a:	2b6c      	cmp	r3, #108	; 0x6c
 800353c:	d003      	beq.n	8003546 <SEGGER_RTT_vprintf+0x28a>
 800353e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003542:	2b68      	cmp	r3, #104	; 0x68
 8003544:	d113      	bne.n	800356e <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 8003546:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800354a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800354e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003552:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	3201      	adds	r2, #1
 800355a:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 800355c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003560:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 800356c:	e7e3      	b.n	8003536 <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800356e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003572:	2b25      	cmp	r3, #37	; 0x25
 8003574:	f000 8119 	beq.w	80037aa <SEGGER_RTT_vprintf+0x4ee>
 8003578:	2b25      	cmp	r3, #37	; 0x25
 800357a:	f2c0 811d 	blt.w	80037b8 <SEGGER_RTT_vprintf+0x4fc>
 800357e:	2b78      	cmp	r3, #120	; 0x78
 8003580:	f300 811a 	bgt.w	80037b8 <SEGGER_RTT_vprintf+0x4fc>
 8003584:	2b58      	cmp	r3, #88	; 0x58
 8003586:	f2c0 8117 	blt.w	80037b8 <SEGGER_RTT_vprintf+0x4fc>
 800358a:	3b58      	subs	r3, #88	; 0x58
 800358c:	2b20      	cmp	r3, #32
 800358e:	f200 8113 	bhi.w	80037b8 <SEGGER_RTT_vprintf+0x4fc>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <SEGGER_RTT_vprintf+0x2dc>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080036d7 	.word	0x080036d7
 800359c:	080037b9 	.word	0x080037b9
 80035a0:	080037b9 	.word	0x080037b9
 80035a4:	080037b9 	.word	0x080037b9
 80035a8:	080037b9 	.word	0x080037b9
 80035ac:	080037b9 	.word	0x080037b9
 80035b0:	080037b9 	.word	0x080037b9
 80035b4:	080037b9 	.word	0x080037b9
 80035b8:	080037b9 	.word	0x080037b9
 80035bc:	080037b9 	.word	0x080037b9
 80035c0:	080037b9 	.word	0x080037b9
 80035c4:	0800361d 	.word	0x0800361d
 80035c8:	08003657 	.word	0x08003657
 80035cc:	080037b9 	.word	0x080037b9
 80035d0:	080037b9 	.word	0x080037b9
 80035d4:	080037b9 	.word	0x080037b9
 80035d8:	080037b9 	.word	0x080037b9
 80035dc:	080037b9 	.word	0x080037b9
 80035e0:	080037b9 	.word	0x080037b9
 80035e4:	080037b9 	.word	0x080037b9
 80035e8:	080037b9 	.word	0x080037b9
 80035ec:	080037b9 	.word	0x080037b9
 80035f0:	080037b9 	.word	0x080037b9
 80035f4:	080037b9 	.word	0x080037b9
 80035f8:	08003771 	.word	0x08003771
 80035fc:	080037b9 	.word	0x080037b9
 8003600:	080037b9 	.word	0x080037b9
 8003604:	08003717 	.word	0x08003717
 8003608:	080037b9 	.word	0x080037b9
 800360c:	08003697 	.word	0x08003697
 8003610:	080037b9 	.word	0x080037b9
 8003614:	080037b9 	.word	0x080037b9
 8003618:	080036d7 	.word	0x080036d7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800361c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003620:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1d19      	adds	r1, r3, #4
 800362a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800362e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	6011      	str	r1, [r2, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 800363c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 8003644:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8003648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fca2 	bl	8002f98 <_StoreChar>
        break;
 8003654:	e0b1      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003656:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800365a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1d19      	adds	r1, r3, #4
 8003664:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003668:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6011      	str	r1, [r2, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003676:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800367a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800368a:	220a      	movs	r2, #10
 800368c:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8003690:	f7ff fd6c 	bl	800316c <_PrintInt>
        break;
 8003694:	e091      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 8003696:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800369a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1d19      	adds	r1, r3, #4
 80036a4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80036a8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	6011      	str	r1, [r2, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80036b6:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80036ba:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80036be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036ce:	220a      	movs	r2, #10
 80036d0:	f7ff fca0 	bl	8003014 <_PrintUnsigned>
        break;
 80036d4:	e071      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80036d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80036da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	1d19      	adds	r1, r3, #4
 80036e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80036e8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	6011      	str	r1, [r2, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80036f6:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80036fa:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80036fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800370e:	2210      	movs	r2, #16
 8003710:	f7ff fc80 	bl	8003014 <_PrintUnsigned>
        break;
 8003714:	e051      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8003716:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800371a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1d19      	adds	r1, r3, #4
 8003724:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003728:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	6011      	str	r1, [r2, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 8003736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 8003740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003744:	3301      	adds	r3, #1
 8003746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 800374a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8003752:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8003756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fc1b 	bl	8002f98 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8003762:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003766:	2b00      	cmp	r3, #0
 8003768:	dae5      	bge.n	8003736 <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 800376a:	e026      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
              break;
 800376c:	bf00      	nop
        break;
 800376e:	e024      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 8003770:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003774:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1d19      	adds	r1, r3, #4
 800377e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003782:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	6011      	str	r1, [r2, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8003790:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8003794:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8003798:	2300      	movs	r3, #0
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2308      	movs	r3, #8
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2308      	movs	r3, #8
 80037a2:	2210      	movs	r2, #16
 80037a4:	f7ff fc36 	bl	8003014 <_PrintUnsigned>
        break;
 80037a8:	e007      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80037aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037ae:	2125      	movs	r1, #37	; 0x25
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fbf1 	bl	8002f98 <_StoreChar>
        break;
 80037b6:	e000      	b.n	80037ba <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 80037b8:	bf00      	nop
      }
      sFormat++;
 80037ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80037be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037c2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80037c6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	3201      	adds	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e007      	b.n	80037e2 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 80037d2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80037d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fbdb 	bl	8002f98 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80037e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f6bf ad8f 	bge.w	800330a <SEGGER_RTT_vprintf+0x4e>
 80037ec:	e000      	b.n	80037f0 <SEGGER_RTT_vprintf+0x534>
      break;
 80037ee:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80037f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dd15      	ble.n	8003824 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80037f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8003800:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003804:	f107 0110 	add.w	r1, r7, #16
 8003808:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800380c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f7ff fb2d 	bl	8002e70 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8003816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800381a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800381e:	4413      	add	r3, r2
 8003820:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 8003824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8003828:	4618      	mov	r0, r3
 800382a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop

08003834 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8003834:	b40e      	push	{r1, r2, r3}
 8003836:	b580      	push	{r7, lr}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800383e:	f107 0320 	add.w	r3, r7, #32
 8003842:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	461a      	mov	r2, r3
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fd35 	bl	80032bc <SEGGER_RTT_vprintf>
 8003852:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003860:	b003      	add	sp, #12
 8003862:	4770      	bx	lr

08003864 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003868:	f3bf 8f4f 	dsb	sy
}
 800386c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <__NVIC_SystemReset+0x24>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003876:	4904      	ldr	r1, [pc, #16]	; (8003888 <__NVIC_SystemReset+0x24>)
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <__NVIC_SystemReset+0x28>)
 800387a:	4313      	orrs	r3, r2
 800387c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800387e:	f3bf 8f4f 	dsb	sy
}
 8003882:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <__NVIC_SystemReset+0x20>
 8003888:	e000ed00 	.word	0xe000ed00
 800388c:	05fa0004 	.word	0x05fa0004

08003890 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ae:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	68b8      	ldr	r0, [r7, #8]
 80038b4:	f000 f810 	bl	80038d8 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 80038b8:	f7fe f870 	bl	800199c <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <assertFail+0x44>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 80038c8:	f7ff ffcc 	bl	8003864 <__NVIC_SystemReset>
  }
}
 80038cc:	bf00      	nop
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e000edf0 	.word	0xe000edf0

080038d8 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <storeAssertFileData+0x38>)
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <storeAssertFileData+0x3c>)
 80038e6:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <storeAssertFileData+0x38>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <storeAssertFileData+0x38>)
 80038f0:	791a      	ldrb	r2, [r3, #4]
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <storeAssertFileData+0x40>)
 80038f4:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 80038f6:	4a06      	ldr	r2, [pc, #24]	; (8003910 <storeAssertFileData+0x38>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <storeAssertFileData+0x38>)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	60d3      	str	r3, [r2, #12]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20001d10 	.word	0x20001d10
 8003914:	2f8a001f 	.word	0x2f8a001f
 8003918:	200040f8 	.word	0x200040f8

0800391c <consoleInit>:

  return true;
}

void consoleInit()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  if (isInit)
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <consoleInit+0x50>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11f      	bne.n	8003968 <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <consoleInit+0x54>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <consoleInit+0x54>)
 8003930:	2200      	movs	r2, #0
 8003932:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 8003934:	2203      	movs	r2, #3
 8003936:	2100      	movs	r1, #0
 8003938:	2001      	movs	r0, #1
 800393a:	f00a fd5d 	bl	800e3f8 <xQueueGenericCreate>
 800393e:	4603      	mov	r3, r0
 8003940:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <consoleInit+0x58>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <consoleInit+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <consoleInit+0x3e>
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <consoleInit+0x58>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	2200      	movs	r2, #0
 8003954:	2100      	movs	r1, #0
 8003956:	f00a fdf9 	bl	800e54c <xQueueGenericSend>
  messageSendingIsPending = false;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <consoleInit+0x5c>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]

  isInit = true;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <consoleInit+0x50>)
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e000      	b.n	800396a <consoleInit+0x4e>
    return;
 8003968:	bf00      	nop
}
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20004124 	.word	0x20004124
 8003970:	200040fc 	.word	0x200040fc
 8003974:	20004120 	.word	0x20004120
 8003978:	2000411c 	.word	0x2000411c

0800397c <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af02      	add	r7, sp, #8
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
 8003982:	f7ff fb03 	bl	8002f8c <SEGGER_RTT_Init>
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 8003986:	2301      	movs	r3, #1
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2000      	movs	r0, #0
 8003992:	f7ff fa91 	bl	8002eb8 <SEGGER_RTT_ConfigUpBuffer>
#endif
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <uartInit>:
    return len;
}
*/


void uartInit(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af02      	add	r7, sp, #8
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 80039a2:	2340      	movs	r3, #64	; 0x40
 80039a4:	4618      	mov	r0, r3
 80039a6:	2301      	movs	r3, #1
 80039a8:	4619      	mov	r1, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <uartInit+0x2c>)
 80039b0:	4a06      	ldr	r2, [pc, #24]	; (80039cc <uartInit+0x30>)
 80039b2:	f00a fcb5 	bl	800e320 <xQueueGenericCreateStatic>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <uartInit+0x34>)
 80039ba:	6013      	str	r3, [r2, #0]
    isInit = true;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <uartInit+0x38>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20001b48 	.word	0x20001b48
 80039cc:	20001b08 	.word	0x20001b08
 80039d0:	20004128 	.word	0x20004128
 80039d4:	200041d5 	.word	0x200041d5

080039d8 <uartDmaInit>:



void uartDmaInit(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af02      	add	r7, sp, #8

  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 80039de:	2303      	movs	r3, #3
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <uartDmaInit+0x90>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	2001      	movs	r0, #1
 80039ea:	f00a fc99 	bl	800e320 <xQueueGenericCreateStatic>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <uartDmaInit+0x94>)
 80039f2:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 80039f4:	2303      	movs	r3, #3
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <uartDmaInit+0x98>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	2001      	movs	r0, #1
 8003a00:	f00a fc8e 	bl	800e320 <xQueueGenericCreateStatic>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <uartDmaInit+0x9c>)
 8003a08:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <uartDmaInit+0x9c>)
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	f00a fd9a 	bl	800e54c <xQueueGenericSend>
  xSemaphoreGive(waitUntilSendDone);
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <uartDmaInit+0x94>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	f00a fd93 	bl	800e54c <xQueueGenericSend>

  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <uartDmaInit+0xa0>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <uartDmaInit+0xa0>)
 8003a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <uartDmaInit+0xa0>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
  HAL_DMA_Init(&hdma_usart6_tx);
 8003a42:	480e      	ldr	r0, [pc, #56]	; (8003a7c <uartDmaInit+0xa4>)
 8003a44:	f002 f928 	bl	8005c98 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2105      	movs	r1, #5
 8003a4c:	2045      	movs	r0, #69	; 0x45
 8003a4e:	f002 f8ec 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003a52:	2045      	movs	r0, #69	; 0x45
 8003a54:	f002 f905 	bl	8005c62 <HAL_NVIC_EnableIRQ>

  isUartDmaInitialized = true;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <uartDmaInit+0xa8>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]

}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20004184 	.word	0x20004184
 8003a6c:	20004180 	.word	0x20004180
 8003a70:	20004130 	.word	0x20004130
 8003a74:	2000412c 	.word	0x2000412c
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	2000516c 	.word	0x2000516c
 8003a80:	200041d4 	.word	0x200041d4

08003a84 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8003a8a:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <queueMonitorInit+0x6c>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	f083 0301 	eor.w	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <queueMonitorInit+0x1e>
 8003a98:	2248      	movs	r2, #72	; 0x48
 8003a9a:	4916      	ldr	r1, [pc, #88]	; (8003af4 <queueMonitorInit+0x70>)
 8003a9c:	4816      	ldr	r0, [pc, #88]	; (8003af8 <queueMonitorInit+0x74>)
 8003a9e:	f7ff fef7 	bl	8003890 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <queueMonitorInit+0x78>)
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <queueMonitorInit+0x7c>)
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2201      	movs	r2, #1
 8003aae:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ab2:	4814      	ldr	r0, [pc, #80]	; (8003b04 <queueMonitorInit+0x80>)
 8003ab4:	f00c feae 	bl	8010814 <xTimerCreateStatic>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <queueMonitorInit+0x84>)
 8003abc:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <queueMonitorInit+0x84>)
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	f00b fed7 	bl	800f874 <xTaskGetTickCount>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	2364      	movs	r3, #100	; 0x64
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f00c ff13 	bl	80108fc <xTimerGenericCommand>

  data[0].fileName = "Na";
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <queueMonitorInit+0x88>)
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <queueMonitorInit+0x8c>)
 8003ada:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <queueMonitorInit+0x88>)
 8003ade:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <queueMonitorInit+0x8c>)
 8003ae0:	605a      	str	r2, [r3, #4]

  initialized = true;
 8003ae2:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <queueMonitorInit+0x6c>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	3704      	adds	r7, #4
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}
 8003af0:	20004398 	.word	0x20004398
 8003af4:	08015258 	.word	0x08015258
 8003af8:	0801527c 	.word	0x0801527c
 8003afc:	2000436c 	.word	0x2000436c
 8003b00:	08003cb1 	.word	0x08003cb1
 8003b04:	0801528c 	.word	0x0801528c
 8003b08:	20004368 	.word	0x20004368
 8003b0c:	200041d8 	.word	0x200041d8
 8003b10:	080152a0 	.word	0x080152a0

08003b14 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <qmRegisterQueue+0x70>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <qmRegisterQueue+0x1e>
 8003b28:	2265      	movs	r2, #101	; 0x65
 8003b2a:	4917      	ldr	r1, [pc, #92]	; (8003b88 <qmRegisterQueue+0x74>)
 8003b2c:	4817      	ldr	r0, [pc, #92]	; (8003b8c <qmRegisterQueue+0x78>)
 8003b2e:	f7ff feaf 	bl	8003890 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <qmRegisterQueue+0x7c>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b13      	cmp	r3, #19
 8003b38:	d904      	bls.n	8003b44 <qmRegisterQueue+0x30>
 8003b3a:	2266      	movs	r2, #102	; 0x66
 8003b3c:	4912      	ldr	r1, [pc, #72]	; (8003b88 <qmRegisterQueue+0x74>)
 8003b3e:	4815      	ldr	r0, [pc, #84]	; (8003b94 <qmRegisterQueue+0x80>)
 8003b40:	f7ff fea6 	bl	8003890 <assertFail>
  Data* queueData = &data[nrOfQueues];
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <qmRegisterQueue+0x7c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <qmRegisterQueue+0x84>)
 8003b54:	4413      	add	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <qmRegisterQueue+0x7c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f00b f978 	bl	800ee60 <vQueueSetQueueNumber>

  nrOfQueues++;
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <qmRegisterQueue+0x7c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <qmRegisterQueue+0x7c>)
 8003b7a:	701a      	strb	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20004398 	.word	0x20004398
 8003b88:	08015258 	.word	0x08015258
 8003b8c:	080152a4 	.word	0x080152a4
 8003b90:	200002d7 	.word	0x200002d7
 8003b94:	080152b0 	.word	0x080152b0
 8003b98:	200041d8 	.word	0x200041d8

08003b9c <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  int i = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	e013      	b.n	8003bd4 <debugPrint+0x38>
    Data* queueData = &data[i];
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <debugPrint+0x50>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f000 f819 	bl	8003bf4 <filter>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <debugPrint+0x32>
      debugPrintQueue(queueData);
 8003bc8:	6838      	ldr	r0, [r7, #0]
 8003bca:	f000 f827 	bl	8003c1c <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <debugPrint+0x54>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	dbe5      	blt.n	8003bac <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8003be0:	f000 f838 	bl	8003c54 <resetCounters>
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200041d8 	.word	0x200041d8
 8003bf0:	200002d7 	.word	0x200002d7

08003bf4 <filter>:

static bool filter(Data* queueData) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6858      	ldr	r0, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689c      	ldr	r4, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6912      	ldr	r2, [r2, #16]
 8003c38:	9201      	str	r2, [sp, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <debugPrintQueue+0x34>)
 8003c42:	f00f f877 	bl	8012d34 <iprintf>
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	080152ec 	.word	0x080152ec

08003c54 <resetCounters>:

static void resetCounters() {
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
  int i = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e013      	b.n	8003c8c <resetCounters+0x38>
    Data* queueData = &data[i];
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <resetCounters+0x54>)
 8003c70:	4413      	add	r3, r2
 8003c72:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <resetCounters+0x58>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	dbe5      	blt.n	8003c64 <resetCounters+0x10>
  }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	200041d8 	.word	0x200041d8
 8003cac:	200002d7 	.word	0x200002d7

08003cb0 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  debugPrint();
 8003cb8:	f7ff ff70 	bl	8003b9c <debugPrint>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <sysLoadInit+0x58>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	f083 0301 	eor.w	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <sysLoadInit+0x1e>
 8003cd8:	223c      	movs	r2, #60	; 0x3c
 8003cda:	4911      	ldr	r1, [pc, #68]	; (8003d20 <sysLoadInit+0x5c>)
 8003cdc:	4811      	ldr	r0, [pc, #68]	; (8003d24 <sysLoadInit+0x60>)
 8003cde:	f7ff fdd7 	bl	8003890 <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <sysLoadInit+0x64>)
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <sysLoadInit+0x68>)
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2300      	movs	r3, #0
 8003cec:	2201      	movs	r2, #1
 8003cee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cf2:	480f      	ldr	r0, [pc, #60]	; (8003d30 <sysLoadInit+0x6c>)
 8003cf4:	f00c fd8e 	bl	8010814 <xTimerCreateStatic>
 8003cf8:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 8003cfa:	f00b fdbb 	bl	800f874 <xTaskGetTickCount>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	2364      	movs	r3, #100	; 0x64
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	2101      	movs	r1, #1
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f00c fdf7 	bl	80108fc <xTimerGenericCommand>

  initialized = true;
 8003d0e:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <sysLoadInit+0x58>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20004399 	.word	0x20004399
 8003d20:	08015314 	.word	0x08015314
 8003d24:	08015330 	.word	0x08015330
 8003d28:	200043a4 	.word	0x200043a4
 8003d2c:	08003db5 	.word	0x08003db5
 8003d30:	08015340 	.word	0x08015340

08003d34 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e00f      	b.n	8003d62 <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 8003d42:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <getPreviousTaskData+0x70>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d104      	bne.n	8003d5c <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <getPreviousTaskData+0x70>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	e01f      	b.n	8003d9c <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <getPreviousTaskData+0x74>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	dbea      	blt.n	8003d42 <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <getPreviousTaskData+0x74>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b1f      	cmp	r3, #31
 8003d72:	dd04      	ble.n	8003d7e <getPreviousTaskData+0x4a>
 8003d74:	224e      	movs	r2, #78	; 0x4e
 8003d76:	490d      	ldr	r1, [pc, #52]	; (8003dac <getPreviousTaskData+0x78>)
 8003d78:	480d      	ldr	r0, [pc, #52]	; (8003db0 <getPreviousTaskData+0x7c>)
 8003d7a:	f7ff fd89 	bl	8003890 <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <getPreviousTaskData+0x74>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <getPreviousTaskData+0x70>)
 8003d86:	4413      	add	r3, r2
 8003d88:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <getPreviousTaskData+0x74>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <getPreviousTaskData+0x74>)
 8003d98:	6013      	str	r3, [r2, #0]

  return result;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20001b98 	.word	0x20001b98
 8003da8:	2000439c 	.word	0x2000439c
 8003dac:	08015314 	.word	0x08015314
 8003db0:	08015354 	.word	0x08015354

08003db4 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003dc0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003dc4:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 8003dc6:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <timerHandler+0x14c>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8092 	beq.w	8003ef4 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8003dd0:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	2120      	movs	r1, #32
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f00b fd5a 	bl	800f894 <uxTaskGetSystemState>
 8003de0:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8003de4:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8003de8:	2b1f      	cmp	r3, #31
 8003dea:	d904      	bls.n	8003df6 <timerHandler+0x42>
 8003dec:	225d      	movs	r2, #93	; 0x5d
 8003dee:	4945      	ldr	r1, [pc, #276]	; (8003f04 <timerHandler+0x150>)
 8003df0:	4845      	ldr	r0, [pc, #276]	; (8003f08 <timerHandler+0x154>)
 8003df2:	f7ff fd4d 	bl	8003890 <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 8003df6:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8003dfa:	4b44      	ldr	r3, [pc, #272]	; (8003f0c <timerHandler+0x158>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8003e04:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8003e08:	f7fc fb8c 	bl	8000524 <__aeabi_ui2d>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	f04f 0000 	mov.w	r0, #0
 8003e14:	493e      	ldr	r1, [pc, #248]	; (8003f10 <timerHandler+0x15c>)
 8003e16:	f7fc fd29 	bl	800086c <__aeabi_ddiv>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	f7fc fed1 	bl	8000bc8 <__aeabi_d2f>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8003e2c:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 8003e2e:	4939      	ldr	r1, [pc, #228]	; (8003f14 <timerHandler+0x160>)
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7ff fcff 	bl	8003834 <SEGGER_RTT_printf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8003e36:	4938      	ldr	r1, [pc, #224]	; (8003f18 <timerHandler+0x164>)
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7ff fcfb 	bl	8003834 <SEGGER_RTT_printf>
    for (uint32_t i = 0; i < taskCount; i++) {
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003e44:	e049      	b.n	8003eda <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8003e46:	f107 010c 	add.w	r1, r7, #12
 8003e4a:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 8003e5c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff66 	bl	8003d34 <getPreviousTaskData>
 8003e68:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 8003e6c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 8003e76:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8003e8e:	ed93 7a00 	vldr	s14, [r3]
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003e9a:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 8003e9e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	f7fc fb60 	bl	8000568 <__aeabi_f2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003eb0:	8c09      	ldrh	r1, [r1, #32]
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003eb8:	6849      	ldr	r1, [r1, #4]
 8003eba:	9101      	str	r1, [sp, #4]
 8003ebc:	9000      	str	r0, [sp, #0]
 8003ebe:	4917      	ldr	r1, [pc, #92]	; (8003f1c <timerHandler+0x168>)
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7ff fcb7 	bl	8003834 <SEGGER_RTT_printf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 8003ec6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003eca:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8003ece:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8003ed0:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003eda:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8003ede:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3af      	bcc.n	8003e46 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 8003ee6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <timerHandler+0x158>)
 8003eec:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <timerHandler+0x14c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000439a 	.word	0x2000439a
 8003f04:	08015314 	.word	0x08015314
 8003f08:	08015374 	.word	0x08015374
 8003f0c:	200043a0 	.word	0x200043a0
 8003f10:	40590000 	.word	0x40590000
 8003f14:	08015390 	.word	0x08015390
 8003f18:	0801539c 	.word	0x0801539c
 8003f1c:	080153b4 	.word	0x080153b4

08003f20 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af02      	add	r7, sp, #8
  if (workerQueue)
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <workerInit+0x40>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d114      	bne.n	8003f58 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 8003f2e:	2305      	movs	r3, #5
 8003f30:	4618      	mov	r0, r3
 8003f32:	2308      	movs	r3, #8
 8003f34:	4619      	mov	r1, r3
 8003f36:	2300      	movs	r3, #0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <workerInit+0x44>)
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <workerInit+0x48>)
 8003f3e:	f00a f9ef 	bl	800e320 <xQueueGenericCreateStatic>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <workerInit+0x40>)
 8003f46:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <workerInit+0x40>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <workerInit+0x4c>)
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <workerInit+0x50>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fddf 	bl	8003b14 <qmRegisterQueue>
 8003f56:	e000      	b.n	8003f5a <workerInit+0x3a>
    return;
 8003f58:	bf00      	nop
}
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200043d0 	.word	0x200043d0
 8003f64:	20001cc0 	.word	0x20001cc0
 8003f68:	20001c98 	.word	0x20001c98
 8003f6c:	0801544c 	.word	0x0801544c
 8003f70:	08015458 	.word	0x08015458

08003f74 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0

}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
return 0;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a06      	ldr	r2, [pc, #24]	; (8003fd8 <vApplicationGetIdleTaskMemory+0x30>)
 8003fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	200043d4 	.word	0x200043d4
 8003fd8:	2000448c 	.word	0x2000448c

08003fdc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a07      	ldr	r2, [pc, #28]	; (8004008 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a06      	ldr	r2, [pc, #24]	; (800400c <vApplicationGetTimerTaskMemory+0x30>)
 8003ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	2000468c 	.word	0x2000468c
 800400c:	20004744 	.word	0x20004744

08004010 <LL_SPI_SetStandard>:
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	605a      	str	r2, [r3, #4]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <LL_AHB1_GRP1_EnableClock>:
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004044:	4907      	ldr	r1, [pc, #28]	; (8004064 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4313      	orrs	r3, r2
 800404a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800404e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4013      	ands	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40023800 	.word	0x40023800

08004068 <LL_APB2_GRP1_EnableClock>:
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004074:	4907      	ldr	r1, [pc, #28]	; (8004094 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4313      	orrs	r3, r2
 800407a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <LL_APB2_GRP1_EnableClock+0x2c>)
 800407e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4013      	ands	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40023800 	.word	0x40023800

08004098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800409e:	f001 f841 	bl	8005124 <HAL_Init>

  /* USER CODE BEGIN Init */
  debugInit();
 80040a2:	f7ff fc6b 	bl	800397c <debugInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040a6:	f000 f86b 	bl	8004180 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040aa:	f000 facd 	bl	8004648 <MX_GPIO_Init>
  MX_DMA_Init();
 80040ae:	f000 fa9b 	bl	80045e8 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80040b2:	f000 fa6f 	bl	8004594 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80040b6:	f000 fa37 	bl	8004528 <MX_TIM7_Init>
  MX_SPI1_Init();
 80040ba:	f000 f96d 	bl	8004398 <MX_SPI1_Init>
  MX_ADC1_Init();
 80040be:	f000 f8c7 	bl	8004250 <MX_ADC1_Init>
  MX_ADC2_Init();
 80040c2:	f000 f917 	bl	80042f4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80040c6:	f000 f9b9 	bl	800443c <MX_TIM3_Init>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <main+0xc4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <main+0xc4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0220 	orr.w	r2, r2, #32
 80040d8:	60da      	str	r2, [r3, #12]
//  SEGGER_RTT_Init();
//  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);



  freertos_IntroTitle();
 80040da:	f000 fb41 	bl	8004760 <freertos_IntroTitle>

  check_enter_bootloader();
 80040de:	f7fd fb13 	bl	8001708 <check_enter_bootloader>

  int err = platformInit();
 80040e2:	f7fe fc68 	bl	80029b6 <platformInit>
 80040e6:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d000      	beq.n	80040f0 <main+0x58>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 80040ee:	e7fe      	b.n	80040ee <main+0x56>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 80040f0:	481b      	ldr	r0, [pc, #108]	; (8004160 <main+0xc8>)
 80040f2:	f004 fac1 	bl	8008678 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <main+0xcc>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <main+0xd0>)
 80040fc:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 80040fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004102:	f000 fbb9 	bl	8004878 <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <main+0xcc>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a18      	ldr	r2, [pc, #96]	; (800416c <main+0xd4>)
 800410c:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 800410e:	4814      	ldr	r0, [pc, #80]	; (8004160 <main+0xc8>)
 8004110:	f004 fb22 	bl	8008758 <HAL_TIM_Base_Stop_IT>
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <main+0xd4>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <main+0xd0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <main+0xd8>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	461a      	mov	r2, r3
 8004128:	4912      	ldr	r1, [pc, #72]	; (8004174 <main+0xdc>)
 800412a:	2000      	movs	r0, #0
 800412c:	f7ff fb82 	bl	8003834 <SEGGER_RTT_printf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 8004130:	f7fe f950 	bl	80023d4 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <main+0xe0>)
 8004136:	463c      	mov	r4, r7
 8004138:	461d      	mov	r5, r3
 800413a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800413c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800413e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004146:	463b      	mov	r3, r7
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f009 ff65 	bl	800e01a <osThreadCreate>
 8004150:	4603      	mov	r3, r0
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <main+0xe4>)
 8004154:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004156:	f009 ff59 	bl	800e00c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800415a:	e7fe      	b.n	800415a <main+0xc2>
 800415c:	20005124 	.word	0x20005124
 8004160:	200050dc 	.word	0x200050dc
 8004164:	e0001000 	.word	0xe0001000
 8004168:	200051d0 	.word	0x200051d0
 800416c:	200051d4 	.word	0x200051d4
 8004170:	38e38e39 	.word	0x38e38e39
 8004174:	08015474 	.word	0x08015474
 8004178:	08015490 	.word	0x08015490
 800417c:	200051cc 	.word	0x200051cc

08004180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b094      	sub	sp, #80	; 0x50
 8004184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004186:	f107 0320 	add.w	r3, r7, #32
 800418a:	2230      	movs	r2, #48	; 0x30
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f00e fec2 	bl	8012f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004194:	f107 030c 	add.w	r3, r7, #12
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <SystemClock_Config+0xc8>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	4a26      	ldr	r2, [pc, #152]	; (8004248 <SystemClock_Config+0xc8>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	; 0x40
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <SystemClock_Config+0xc8>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c0:	2300      	movs	r3, #0
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <SystemClock_Config+0xcc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a20      	ldr	r2, [pc, #128]	; (800424c <SystemClock_Config+0xcc>)
 80041ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <SystemClock_Config+0xcc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041dc:	2301      	movs	r3, #1
 80041de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041e6:	2302      	movs	r3, #2
 80041e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041f0:	2304      	movs	r3, #4
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80041f4:	2348      	movs	r3, #72	; 0x48
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041f8:	2302      	movs	r3, #2
 80041fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80041fc:	2303      	movs	r3, #3
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004200:	f107 0320 	add.w	r3, r7, #32
 8004204:	4618      	mov	r0, r3
 8004206:	f003 fd4f 	bl	8007ca8 <HAL_RCC_OscConfig>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004210:	f000 fb5e 	bl	80048d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004214:	230f      	movs	r3, #15
 8004216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004218:	2302      	movs	r3, #2
 800421a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f003 ffb1 	bl	8008198 <HAL_RCC_ClockConfig>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800423c:	f000 fb48 	bl	80048d0 <Error_Handler>
  }
}
 8004240:	bf00      	nop
 8004242:	3750      	adds	r7, #80	; 0x50
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	40007000 	.word	0x40007000

08004250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004256:	463b      	mov	r3, r7
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <MX_ADC1_Init+0x98>)
 8004264:	4a21      	ldr	r2, [pc, #132]	; (80042ec <MX_ADC1_Init+0x9c>)
 8004266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <MX_ADC1_Init+0x98>)
 800426a:	2200      	movs	r2, #0
 800426c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <MX_ADC1_Init+0x98>)
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <MX_ADC1_Init+0x98>)
 8004276:	2200      	movs	r2, #0
 8004278:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <MX_ADC1_Init+0x98>)
 800427c:	2201      	movs	r2, #1
 800427e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <MX_ADC1_Init+0x98>)
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <MX_ADC1_Init+0x98>)
 800428a:	2200      	movs	r2, #0
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <MX_ADC1_Init+0x98>)
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <MX_ADC1_Init+0xa0>)
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <MX_ADC1_Init+0x98>)
 8004296:	2200      	movs	r2, #0
 8004298:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <MX_ADC1_Init+0x98>)
 800429c:	2201      	movs	r2, #1
 800429e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <MX_ADC1_Init+0x98>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <MX_ADC1_Init+0x98>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042ae:	480e      	ldr	r0, [pc, #56]	; (80042e8 <MX_ADC1_Init+0x98>)
 80042b0:	f000 ffce 	bl	8005250 <HAL_ADC_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80042ba:	f000 fb09 	bl	80048d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80042be:	230b      	movs	r3, #11
 80042c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80042c6:	2307      	movs	r3, #7
 80042c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042ca:	463b      	mov	r3, r7
 80042cc:	4619      	mov	r1, r3
 80042ce:	4806      	ldr	r0, [pc, #24]	; (80042e8 <MX_ADC1_Init+0x98>)
 80042d0:	f001 f930 	bl	8005534 <HAL_ADC_ConfigChannel>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80042da:	f000 faf9 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20004f44 	.word	0x20004f44
 80042ec:	40012000 	.word	0x40012000
 80042f0:	0f000001 	.word	0x0f000001

080042f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042fa:	463b      	mov	r3, r7
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <MX_ADC2_Init+0x98>)
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <MX_ADC2_Init+0x9c>)
 800430a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <MX_ADC2_Init+0x98>)
 800430e:	2200      	movs	r2, #0
 8004310:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <MX_ADC2_Init+0x98>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <MX_ADC2_Init+0x98>)
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800431e:	4b1b      	ldr	r3, [pc, #108]	; (800438c <MX_ADC2_Init+0x98>)
 8004320:	2201      	movs	r2, #1
 8004322:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <MX_ADC2_Init+0x98>)
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <MX_ADC2_Init+0x98>)
 800432e:	2200      	movs	r2, #0
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <MX_ADC2_Init+0x98>)
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <MX_ADC2_Init+0xa0>)
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004338:	4b14      	ldr	r3, [pc, #80]	; (800438c <MX_ADC2_Init+0x98>)
 800433a:	2200      	movs	r2, #0
 800433c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <MX_ADC2_Init+0x98>)
 8004340:	2201      	movs	r2, #1
 8004342:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <MX_ADC2_Init+0x98>)
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <MX_ADC2_Init+0x98>)
 800434e:	2201      	movs	r2, #1
 8004350:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004352:	480e      	ldr	r0, [pc, #56]	; (800438c <MX_ADC2_Init+0x98>)
 8004354:	f000 ff7c 	bl	8005250 <HAL_ADC_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800435e:	f000 fab7 	bl	80048d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004362:	230c      	movs	r3, #12
 8004364:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800436a:	2307      	movs	r3, #7
 800436c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800436e:	463b      	mov	r3, r7
 8004370:	4619      	mov	r1, r3
 8004372:	4806      	ldr	r0, [pc, #24]	; (800438c <MX_ADC2_Init+0x98>)
 8004374:	f001 f8de 	bl	8005534 <HAL_ADC_ConfigChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800437e:	f000 faa7 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20004f8c 	.word	0x20004f8c
 8004390:	40012100 	.word	0x40012100
 8004394:	0f000001 	.word	0x0f000001

08004398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b090      	sub	sp, #64	; 0x40
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800439e:	f107 0318 	add.w	r3, r7, #24
 80043a2:	2228      	movs	r2, #40	; 0x28
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00e fdb6 	bl	8012f18 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	463b      	mov	r3, r7
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80043bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80043c0:	f7ff fe52 	bl	8004068 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7ff fe37 	bl	8004038 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80043ca:	23e0      	movs	r3, #224	; 0xe0
 80043cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80043ce:	2302      	movs	r3, #2
 80043d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043d2:	2303      	movs	r3, #3
 80043d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80043de:	2305      	movs	r3, #5
 80043e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e2:	463b      	mov	r3, r7
 80043e4:	4619      	mov	r1, r3
 80043e6:	4813      	ldr	r0, [pc, #76]	; (8004434 <MX_SPI1_Init+0x9c>)
 80043e8:	f006 fa37 	bl	800a85a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80043f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80043f4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80043f6:	2300      	movs	r3, #0
 80043f8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80043fa:	2302      	movs	r3, #2
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80043fe:	2301      	movs	r3, #1
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8004408:	2310      	movs	r3, #16
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800440c:	2300      	movs	r3, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004414:	230a      	movs	r3, #10
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8004418:	f107 0318 	add.w	r3, r7, #24
 800441c:	4619      	mov	r1, r3
 800441e:	4806      	ldr	r0, [pc, #24]	; (8004438 <MX_SPI1_Init+0xa0>)
 8004420:	f006 fabf 	bl	800a9a2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8004424:	2100      	movs	r1, #0
 8004426:	4804      	ldr	r0, [pc, #16]	; (8004438 <MX_SPI1_Init+0xa0>)
 8004428:	f7ff fdf2 	bl	8004010 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800442c:	bf00      	nop
 800442e:	3740      	adds	r7, #64	; 0x40
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40020000 	.word	0x40020000
 8004438:	40013000 	.word	0x40013000

0800443c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08e      	sub	sp, #56	; 0x38
 8004440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004450:	f107 0320 	add.w	r3, r7, #32
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	611a      	str	r2, [r3, #16]
 8004468:	615a      	str	r2, [r3, #20]
 800446a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800446c:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <MX_TIM3_Init+0xe4>)
 800446e:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <MX_TIM3_Init+0xe8>)
 8004470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8004472:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <MX_TIM3_Init+0xe4>)
 8004474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004478:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800447a:	4b29      	ldr	r3, [pc, #164]	; (8004520 <MX_TIM3_Init+0xe4>)
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <MX_TIM3_Init+0xe4>)
 8004482:	2247      	movs	r2, #71	; 0x47
 8004484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <MX_TIM3_Init+0xe4>)
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <MX_TIM3_Init+0xe4>)
 800448e:	2200      	movs	r2, #0
 8004490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004492:	4823      	ldr	r0, [pc, #140]	; (8004520 <MX_TIM3_Init+0xe4>)
 8004494:	f004 f8a0 	bl	80085d8 <HAL_TIM_Base_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800449e:	f000 fa17 	bl	80048d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ac:	4619      	mov	r1, r3
 80044ae:	481c      	ldr	r0, [pc, #112]	; (8004520 <MX_TIM3_Init+0xe4>)
 80044b0:	f004 fcc4 	bl	8008e3c <HAL_TIM_ConfigClockSource>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80044ba:	f000 fa09 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80044be:	4818      	ldr	r0, [pc, #96]	; (8004520 <MX_TIM3_Init+0xe4>)
 80044c0:	f004 f979 	bl	80087b6 <HAL_TIM_PWM_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80044ca:	f000 fa01 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044d6:	f107 0320 	add.w	r3, r7, #32
 80044da:	4619      	mov	r1, r3
 80044dc:	4810      	ldr	r0, [pc, #64]	; (8004520 <MX_TIM3_Init+0xe4>)
 80044de:	f005 f8c3 	bl	8009668 <HAL_TIMEx_MasterConfigSynchronization>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80044e8:	f000 f9f2 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ec:	2360      	movs	r3, #96	; 0x60
 80044ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 80044f0:	2324      	movs	r3, #36	; 0x24
 80044f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	2200      	movs	r2, #0
 8004500:	4619      	mov	r1, r3
 8004502:	4807      	ldr	r0, [pc, #28]	; (8004520 <MX_TIM3_Init+0xe4>)
 8004504:	f004 fbd8 	bl	8008cb8 <HAL_TIM_PWM_ConfigChannel>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800450e:	f000 f9df 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004512:	4803      	ldr	r0, [pc, #12]	; (8004520 <MX_TIM3_Init+0xe4>)
 8004514:	f000 fb30 	bl	8004b78 <HAL_TIM_MspPostInit>

}
 8004518:	bf00      	nop
 800451a:	3738      	adds	r7, #56	; 0x38
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20005094 	.word	0x20005094
 8004524:	40000400 	.word	0x40000400

08004528 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800452e:	463b      	mov	r3, r7
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <MX_TIM7_Init+0x64>)
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <MX_TIM7_Init+0x68>)
 800453a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <MX_TIM7_Init+0x64>)
 800453e:	2247      	movs	r2, #71	; 0x47
 8004540:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <MX_TIM7_Init+0x64>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <MX_TIM7_Init+0x64>)
 800454a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800454e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <MX_TIM7_Init+0x64>)
 8004552:	2200      	movs	r2, #0
 8004554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004556:	480d      	ldr	r0, [pc, #52]	; (800458c <MX_TIM7_Init+0x64>)
 8004558:	f004 f83e 	bl	80085d8 <HAL_TIM_Base_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004562:	f000 f9b5 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800456e:	463b      	mov	r3, r7
 8004570:	4619      	mov	r1, r3
 8004572:	4806      	ldr	r0, [pc, #24]	; (800458c <MX_TIM7_Init+0x64>)
 8004574:	f005 f878 	bl	8009668 <HAL_TIMEx_MasterConfigSynchronization>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800457e:	f000 f9a7 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200050dc 	.word	0x200050dc
 8004590:	40001400 	.word	0x40001400

08004594 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <MX_USART6_UART_Init+0x50>)
 800459c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80045a6:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045ba:	220c      	movs	r2, #12
 80045bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80045ca:	4805      	ldr	r0, [pc, #20]	; (80045e0 <MX_USART6_UART_Init+0x4c>)
 80045cc:	f005 f8dc 	bl	8009788 <HAL_UART_Init>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80045d6:	f000 f97b 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20005124 	.word	0x20005124
 80045e4:	40011400 	.word	0x40011400

080045e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <MX_DMA_Init+0x5c>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <MX_DMA_Init+0x5c>)
 80045f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <MX_DMA_Init+0x5c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2105      	movs	r1, #5
 800460e:	2038      	movs	r0, #56	; 0x38
 8004610:	f001 fb0b 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004614:	2038      	movs	r0, #56	; 0x38
 8004616:	f001 fb24 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	2105      	movs	r1, #5
 800461e:	203a      	movs	r0, #58	; 0x3a
 8004620:	f001 fb03 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004624:	203a      	movs	r0, #58	; 0x3a
 8004626:	f001 fb1c 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800462a:	2200      	movs	r2, #0
 800462c:	2105      	movs	r1, #5
 800462e:	2045      	movs	r0, #69	; 0x45
 8004630:	f001 fafb 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004634:	2045      	movs	r0, #69	; 0x45
 8004636:	f001 fb14 	bl	8005c62 <HAL_NVIC_EnableIRQ>

}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <MX_GPIO_Init+0xf4>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4a35      	ldr	r2, [pc, #212]	; (800473c <MX_GPIO_Init+0xf4>)
 8004668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466c:	6313      	str	r3, [r2, #48]	; 0x30
 800466e:	4b33      	ldr	r3, [pc, #204]	; (800473c <MX_GPIO_Init+0xf4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	4b2f      	ldr	r3, [pc, #188]	; (800473c <MX_GPIO_Init+0xf4>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	4a2e      	ldr	r2, [pc, #184]	; (800473c <MX_GPIO_Init+0xf4>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	6313      	str	r3, [r2, #48]	; 0x30
 800468a:	4b2c      	ldr	r3, [pc, #176]	; (800473c <MX_GPIO_Init+0xf4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	4b28      	ldr	r3, [pc, #160]	; (800473c <MX_GPIO_Init+0xf4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a27      	ldr	r2, [pc, #156]	; (800473c <MX_GPIO_Init+0xf4>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b25      	ldr	r3, [pc, #148]	; (800473c <MX_GPIO_Init+0xf4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	4b21      	ldr	r3, [pc, #132]	; (800473c <MX_GPIO_Init+0xf4>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4a20      	ldr	r2, [pc, #128]	; (800473c <MX_GPIO_Init+0xf4>)
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	6313      	str	r3, [r2, #48]	; 0x30
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <MX_GPIO_Init+0xf4>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 80046ce:	2201      	movs	r2, #1
 80046d0:	2110      	movs	r1, #16
 80046d2:	481b      	ldr	r0, [pc, #108]	; (8004740 <MX_GPIO_Init+0xf8>)
 80046d4:	f002 f87e 	bl	80067d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80046d8:	2200      	movs	r2, #0
 80046da:	2120      	movs	r1, #32
 80046dc:	4819      	ldr	r0, [pc, #100]	; (8004744 <MX_GPIO_Init+0xfc>)
 80046de:	f002 f879 	bl	80067d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 80046e2:	2310      	movs	r3, #16
 80046e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ee:	2303      	movs	r3, #3
 80046f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 80046f2:	f107 0314 	add.w	r3, r7, #20
 80046f6:	4619      	mov	r1, r3
 80046f8:	4811      	ldr	r0, [pc, #68]	; (8004740 <MX_GPIO_Init+0xf8>)
 80046fa:	f001 fecf 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 80046fe:	2310      	movs	r3, #16
 8004700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004702:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	4619      	mov	r1, r3
 8004712:	480d      	ldr	r0, [pc, #52]	; (8004748 <MX_GPIO_Init+0x100>)
 8004714:	f001 fec2 	bl	800649c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8004718:	2320      	movs	r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471c:	2301      	movs	r3, #1
 800471e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004724:	2300      	movs	r3, #0
 8004726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	4619      	mov	r1, r3
 800472e:	4805      	ldr	r0, [pc, #20]	; (8004744 <MX_GPIO_Init+0xfc>)
 8004730:	f001 feb4 	bl	800649c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004734:	bf00      	nop
 8004736:	3728      	adds	r7, #40	; 0x28
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	40020000 	.word	0x40020000
 8004744:	40020400 	.word	0x40020400
 8004748:	40020800 	.word	0x40020800

0800474c <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8004750:	4b02      	ldr	r3, [pc, #8]	; (800475c <OSVersion+0x10>)
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	080154ac 	.word	0x080154ac

08004760 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8004764:	492e      	ldr	r1, [pc, #184]	; (8004820 <freertos_IntroTitle+0xc0>)
 8004766:	2000      	movs	r0, #0
 8004768:	f7ff f864 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 800476c:	492d      	ldr	r1, [pc, #180]	; (8004824 <freertos_IntroTitle+0xc4>)
 800476e:	2000      	movs	r0, #0
 8004770:	f7ff f860 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8004774:	492c      	ldr	r1, [pc, #176]	; (8004828 <freertos_IntroTitle+0xc8>)
 8004776:	2000      	movs	r0, #0
 8004778:	f7ff f85c 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 800477c:	492b      	ldr	r1, [pc, #172]	; (800482c <freertos_IntroTitle+0xcc>)
 800477e:	2000      	movs	r0, #0
 8004780:	f7ff f858 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8004784:	492a      	ldr	r1, [pc, #168]	; (8004830 <freertos_IntroTitle+0xd0>)
 8004786:	2000      	movs	r0, #0
 8004788:	f7ff f854 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 800478c:	4929      	ldr	r1, [pc, #164]	; (8004834 <freertos_IntroTitle+0xd4>)
 800478e:	2000      	movs	r0, #0
 8004790:	f7ff f850 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8004794:	4928      	ldr	r1, [pc, #160]	; (8004838 <freertos_IntroTitle+0xd8>)
 8004796:	2000      	movs	r0, #0
 8004798:	f7ff f84c 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800479c:	4927      	ldr	r1, [pc, #156]	; (800483c <freertos_IntroTitle+0xdc>)
 800479e:	2000      	movs	r0, #0
 80047a0:	f7ff f848 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 80047a4:	4926      	ldr	r1, [pc, #152]	; (8004840 <freertos_IntroTitle+0xe0>)
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7ff f844 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 80047ac:	4925      	ldr	r1, [pc, #148]	; (8004844 <freertos_IntroTitle+0xe4>)
 80047ae:	2000      	movs	r0, #0
 80047b0:	f7ff f840 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 80047b4:	4924      	ldr	r1, [pc, #144]	; (8004848 <freertos_IntroTitle+0xe8>)
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7ff f83c 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 80047bc:	4923      	ldr	r1, [pc, #140]	; (800484c <freertos_IntroTitle+0xec>)
 80047be:	2000      	movs	r0, #0
 80047c0:	f7ff f838 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 80047c4:	4922      	ldr	r1, [pc, #136]	; (8004850 <freertos_IntroTitle+0xf0>)
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7ff f834 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80047cc:	4921      	ldr	r1, [pc, #132]	; (8004854 <freertos_IntroTitle+0xf4>)
 80047ce:	2000      	movs	r0, #0
 80047d0:	f7ff f830 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80047d4:	4920      	ldr	r1, [pc, #128]	; (8004858 <freertos_IntroTitle+0xf8>)
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7ff f82c 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80047dc:	491f      	ldr	r1, [pc, #124]	; (800485c <freertos_IntroTitle+0xfc>)
 80047de:	2000      	movs	r0, #0
 80047e0:	f7ff f828 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80047e4:	491e      	ldr	r1, [pc, #120]	; (8004860 <freertos_IntroTitle+0x100>)
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7ff f824 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80047ec:	491d      	ldr	r1, [pc, #116]	; (8004864 <freertos_IntroTitle+0x104>)
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7ff f820 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80047f4:	491c      	ldr	r1, [pc, #112]	; (8004868 <freertos_IntroTitle+0x108>)
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7ff f81c 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80047fc:	f7ff ffa6 	bl	800474c <OSVersion>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	4919      	ldr	r1, [pc, #100]	; (800486c <freertos_IntroTitle+0x10c>)
 8004806:	2000      	movs	r0, #0
 8004808:	f7ff f814 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800480c:	4918      	ldr	r1, [pc, #96]	; (8004870 <freertos_IntroTitle+0x110>)
 800480e:	2000      	movs	r0, #0
 8004810:	f7ff f810 	bl	8003834 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 8004814:	4917      	ldr	r1, [pc, #92]	; (8004874 <freertos_IntroTitle+0x114>)
 8004816:	2000      	movs	r0, #0
 8004818:	f7ff f80c 	bl	8003834 <SEGGER_RTT_printf>
}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	080154b4 	.word	0x080154b4
 8004824:	080154f4 	.word	0x080154f4
 8004828:	08015548 	.word	0x08015548
 800482c:	0801559c 	.word	0x0801559c
 8004830:	080155f0 	.word	0x080155f0
 8004834:	08015644 	.word	0x08015644
 8004838:	08015698 	.word	0x08015698
 800483c:	080156ec 	.word	0x080156ec
 8004840:	08015740 	.word	0x08015740
 8004844:	08015794 	.word	0x08015794
 8004848:	080157e8 	.word	0x080157e8
 800484c:	0801583c 	.word	0x0801583c
 8004850:	08015890 	.word	0x08015890
 8004854:	080158e4 	.word	0x080158e4
 8004858:	08015938 	.word	0x08015938
 800485c:	0801598c 	.word	0x0801598c
 8004860:	080159e0 	.word	0x080159e0
 8004864:	08015a34 	.word	0x08015a34
 8004868:	08015a7c 	.word	0x08015a7c
 800486c:	08015aac 	.word	0x08015aac
 8004870:	08015af0 	.word	0x08015af0
 8004874:	08015b1c 	.word	0x08015b1c

08004878 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8004882:	480a      	ldr	r0, [pc, #40]	; (80048ac <delay_us+0x34>)
 8004884:	f003 fef8 	bl	8008678 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <delay_us+0x34>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8004890:	bf00      	nop
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <delay_us+0x34>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	429a      	cmp	r2, r3
 800489c:	d3f9      	bcc.n	8004892 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 800489e:	4803      	ldr	r0, [pc, #12]	; (80048ac <delay_us+0x34>)
 80048a0:	f003 ff5a 	bl	8008758 <HAL_TIM_Base_Stop_IT>
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200050dc 	.word	0x200050dc

080048b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80048b8:	f00c ff5e 	bl	8011778 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 80048bc:	4903      	ldr	r1, [pc, #12]	; (80048cc <StartDefaultTask+0x1c>)
 80048be:	2000      	movs	r0, #0
 80048c0:	f7fe ffb8 	bl	8003834 <SEGGER_RTT_printf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80048c4:	2001      	movs	r0, #1
 80048c6:	f009 fbf5 	bl	800e0b4 <osDelay>
 80048ca:	e7fb      	b.n	80048c4 <StartDefaultTask+0x14>
 80048cc:	08015b68 	.word	0x08015b68

080048d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048d4:	b672      	cpsid	i
}
 80048d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <Error_Handler+0x8>
	...

080048dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <HAL_MspInit+0x64>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <HAL_MspInit+0x64>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_MspInit+0x64>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <HAL_MspInit+0x64>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4a0e      	ldr	r2, [pc, #56]	; (8004940 <HAL_MspInit+0x64>)
 8004908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <HAL_MspInit+0x64>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	210f      	movs	r1, #15
 800491e:	f06f 0001 	mvn.w	r0, #1
 8004922:	f001 f982 	bl	8005c2a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004926:	2200      	movs	r2, #0
 8004928:	2105      	movs	r1, #5
 800492a:	2005      	movs	r0, #5
 800492c:	f001 f97d 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004930:	2005      	movs	r0, #5
 8004932:	f001 f996 	bl	8005c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800

08004944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08c      	sub	sp, #48	; 0x30
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494c:	f107 031c 	add.w	r3, r7, #28
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_ADC_MspInit+0x198>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d158      	bne.n	8004a18 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	4b5d      	ldr	r3, [pc, #372]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	4a5c      	ldr	r2, [pc, #368]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6453      	str	r3, [r2, #68]	; 0x44
 8004976:	4b5a      	ldr	r3, [pc, #360]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a55      	ldr	r2, [pc, #340]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 800499e:	2302      	movs	r3, #2
 80049a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049a2:	2303      	movs	r3, #3
 80049a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 80049aa:	f107 031c 	add.w	r3, r7, #28
 80049ae:	4619      	mov	r1, r3
 80049b0:	484c      	ldr	r0, [pc, #304]	; (8004ae4 <HAL_ADC_MspInit+0x1a0>)
 80049b2:	f001 fd73 	bl	800649c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80049b6:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049b8:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <HAL_ADC_MspInit+0x1a8>)
 80049ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80049bc:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049be:	2200      	movs	r2, #0
 80049c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c8:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049ce:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049d6:	4b44      	ldr	r3, [pc, #272]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049de:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049e6:	4b40      	ldr	r3, [pc, #256]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049ee:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049f4:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049fa:	483b      	ldr	r0, [pc, #236]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 80049fc:	f001 f94c 	bl	8005c98 <HAL_DMA_Init>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004a06:	f7ff ff63 	bl	80048d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a36      	ldr	r2, [pc, #216]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a10:	4a35      	ldr	r2, [pc, #212]	; (8004ae8 <HAL_ADC_MspInit+0x1a4>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a16:	e05d      	b.n	8004ad4 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a34      	ldr	r2, [pc, #208]	; (8004af0 <HAL_ADC_MspInit+0x1ac>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d158      	bne.n	8004ad4 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a30:	6453      	str	r3, [r2, #68]	; 0x44
 8004a32:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_ADC_MspInit+0x19c>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 8004a66:	f107 031c 	add.w	r3, r7, #28
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	481d      	ldr	r0, [pc, #116]	; (8004ae4 <HAL_ADC_MspInit+0x1a0>)
 8004a6e:	f001 fd15 	bl	800649c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_ADC_MspInit+0x1b4>)
 8004a76:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a7e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a92:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aa2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004aa4:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aaa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004ab8:	480e      	ldr	r0, [pc, #56]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004aba:	f001 f8ed 	bl	8005c98 <HAL_DMA_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8004ac4:	f7ff ff04 	bl	80048d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <HAL_ADC_MspInit+0x1b0>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004ad4:	bf00      	nop
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40012000 	.word	0x40012000
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40020800 	.word	0x40020800
 8004ae8:	20004fd4 	.word	0x20004fd4
 8004aec:	40026410 	.word	0x40026410
 8004af0:	40012100 	.word	0x40012100
 8004af4:	20005034 	.word	0x20005034
 8004af8:	40026440 	.word	0x40026440

08004afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIM_Base_MspInit+0x70>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <HAL_TIM_Base_MspInit+0x74>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <HAL_TIM_Base_MspInit+0x74>)
 8004b18:	f043 0302 	orr.w	r3, r3, #2
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1e:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <HAL_TIM_Base_MspInit+0x74>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004b2a:	e01a      	b.n	8004b62 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_TIM_Base_MspInit+0x78>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d115      	bne.n	8004b62 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <HAL_TIM_Base_MspInit+0x74>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <HAL_TIM_Base_MspInit+0x74>)
 8004b40:	f043 0320 	orr.w	r3, r3, #32
 8004b44:	6413      	str	r3, [r2, #64]	; 0x40
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <HAL_TIM_Base_MspInit+0x74>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004b52:	2200      	movs	r2, #0
 8004b54:	2105      	movs	r1, #5
 8004b56:	2037      	movs	r0, #55	; 0x37
 8004b58:	f001 f867 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004b5c:	2037      	movs	r0, #55	; 0x37
 8004b5e:	f001 f880 	bl	8005c62 <HAL_NVIC_EnableIRQ>
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40001400 	.word	0x40001400

08004b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <HAL_TIM_MspPostInit+0x68>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d11d      	bne.n	8004bd6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_TIM_MspPostInit+0x6c>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HAL_TIM_MspPostInit+0x6c>)
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <HAL_TIM_MspPostInit+0x6c>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4805      	ldr	r0, [pc, #20]	; (8004be8 <HAL_TIM_MspPostInit+0x70>)
 8004bd2:	f001 fc63 	bl	800649c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004bd6:	bf00      	nop
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40020400 	.word	0x40020400

08004bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a34      	ldr	r2, [pc, #208]	; (8004cdc <HAL_UART_MspInit+0xf0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d161      	bne.n	8004cd2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <HAL_UART_MspInit+0xf4>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	4a32      	ldr	r2, [pc, #200]	; (8004ce0 <HAL_UART_MspInit+0xf4>)
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_UART_MspInit+0xf4>)
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <HAL_UART_MspInit+0xf4>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <HAL_UART_MspInit+0xf4>)
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_UART_MspInit+0xf4>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 8004c46:	23c0      	movs	r3, #192	; 0xc0
 8004c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c52:	2303      	movs	r3, #3
 8004c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c56:	2308      	movs	r3, #8
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4820      	ldr	r0, [pc, #128]	; (8004ce4 <HAL_UART_MspInit+0xf8>)
 8004c62:	f001 fc1b 	bl	800649c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <HAL_UART_MspInit+0x100>)
 8004c6a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c6e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004c72:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c74:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c76:	2240      	movs	r2, #64	; 0x40
 8004c78:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c86:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c88:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004ca6:	4810      	ldr	r0, [pc, #64]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004ca8:	f000 fff6 	bl	8005c98 <HAL_DMA_Init>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004cb2:	f7ff fe0d 	bl	80048d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_UART_MspInit+0xfc>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2105      	movs	r1, #5
 8004cc6:	2047      	movs	r0, #71	; 0x47
 8004cc8:	f000 ffaf 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004ccc:	2047      	movs	r0, #71	; 0x47
 8004cce:	f000 ffc8 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004cd2:	bf00      	nop
 8004cd4:	3728      	adds	r7, #40	; 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40011400 	.word	0x40011400
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40020800 	.word	0x40020800
 8004ce8:	2000516c 	.word	0x2000516c
 8004cec:	400264a0 	.word	0x400264a0

08004cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cf4:	e7fe      	b.n	8004cf4 <NMI_Handler+0x4>

08004cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cfa:	e7fe      	b.n	8004cfa <HardFault_Handler+0x4>

08004cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d00:	e7fe      	b.n	8004d00 <MemManage_Handler+0x4>

08004d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d06:	e7fe      	b.n	8004d06 <BusFault_Handler+0x4>

08004d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d0c:	e7fe      	b.n	8004d0c <UsageFault_Handler+0x4>

08004d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <SysTick_Handler+0x2c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <SysTick_Handler+0x16>

		TimingDelay--;
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <SysTick_Handler+0x2c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <SysTick_Handler+0x2c>)
 8004d30:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d32:	f000 fa49 	bl	80051c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004d36:	f00b fa9b 	bl	8010270 <xTaskGetSchedulerState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004d40:	f00c faba 	bl	80112b8 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200051dc 	.word	0x200051dc

08004d4c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004d50:	bf00      	nop
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d60:	4802      	ldr	r0, [pc, #8]	; (8004d6c <TIM7_IRQHandler+0x10>)
 8004d62:	f003 feb9 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200050dc 	.word	0x200050dc

08004d70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d74:	4802      	ldr	r0, [pc, #8]	; (8004d80 <DMA2_Stream0_IRQHandler+0x10>)
 8004d76:	f001 f927 	bl	8005fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20004fd4 	.word	0x20004fd4

08004d84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004d88:	4802      	ldr	r0, [pc, #8]	; (8004d94 <DMA2_Stream2_IRQHandler+0x10>)
 8004d8a:	f001 f91d 	bl	8005fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20005034 	.word	0x20005034

08004d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d9c:	4802      	ldr	r0, [pc, #8]	; (8004da8 <OTG_FS_IRQHandler+0x10>)
 8004d9e:	f001 fe76 	bl	8006a8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2000a748 	.word	0x2000a748

08004dac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 8004db2:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <DMA2_Stream6_IRQHandler+0xa8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f009 ffd5 	bl	800ed6c <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <DMA2_Stream6_IRQHandler+0xac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <DMA2_Stream6_IRQHandler+0xb0>)
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d904      	bls.n	8004ddc <DMA2_Stream6_IRQHandler+0x30>
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <DMA2_Stream6_IRQHandler+0xb4>)
 8004dd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	e019      	b.n	8004e10 <DMA2_Stream6_IRQHandler+0x64>
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	; (8004e58 <DMA2_Stream6_IRQHandler+0xac>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <DMA2_Stream6_IRQHandler+0xb8>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d904      	bls.n	8004df2 <DMA2_Stream6_IRQHandler+0x46>
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <DMA2_Stream6_IRQHandler+0xb4>)
 8004dea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004dee:	6093      	str	r3, [r2, #8]
 8004df0:	e00e      	b.n	8004e10 <DMA2_Stream6_IRQHandler+0x64>
 8004df2:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <DMA2_Stream6_IRQHandler+0xac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <DMA2_Stream6_IRQHandler+0xbc>)
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d904      	bls.n	8004e08 <DMA2_Stream6_IRQHandler+0x5c>
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <DMA2_Stream6_IRQHandler+0xc0>)
 8004e00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e04:	60d3      	str	r3, [r2, #12]
 8004e06:	e003      	b.n	8004e10 <DMA2_Stream6_IRQHandler+0x64>
 8004e08:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <DMA2_Stream6_IRQHandler+0xc0>)
 8004e0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e0e:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 8004e10:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <DMA2_Stream6_IRQHandler+0xac>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <DMA2_Stream6_IRQHandler+0xac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <DMA2_Stream6_IRQHandler+0xa8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	1d3a      	adds	r2, r7, #4
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f009 fd31 	bl	800e890 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <DMA2_Stream6_IRQHandler+0x98>
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <DMA2_Stream6_IRQHandler+0xc4>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004e44:	4804      	ldr	r0, [pc, #16]	; (8004e58 <DMA2_Stream6_IRQHandler+0xac>)
 8004e46:	f001 f8bf 	bl	8005fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20004180 	.word	0x20004180
 8004e58:	2000516c 	.word	0x2000516c
 8004e5c:	40026458 	.word	0x40026458
 8004e60:	40026400 	.word	0x40026400
 8004e64:	400260b8 	.word	0x400260b8
 8004e68:	40026058 	.word	0x40026058
 8004e6c:	40026000 	.word	0x40026000
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <USART6_IRQHandler+0x7c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d12b      	bne.n	8004ee0 <USART6_IRQHandler+0x6c>
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <USART6_IRQHandler+0x7c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d024      	beq.n	8004ee0 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <USART6_IRQHandler+0x7c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <USART6_IRQHandler+0x80>)
 8004ea4:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <USART6_IRQHandler+0x7c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <USART6_IRQHandler+0x7c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <USART6_IRQHandler+0x84>)
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	1d3a      	adds	r2, r7, #4
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	490b      	ldr	r1, [pc, #44]	; (8004ef4 <USART6_IRQHandler+0x80>)
 8004ec6:	f009 fc4f 	bl	800e768 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <USART6_IRQHandler+0x6c>
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <USART6_IRQHandler+0x88>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ee0:	4803      	ldr	r0, [pc, #12]	; (8004ef0 <USART6_IRQHandler+0x7c>)
 8004ee2:	f004 fca1 	bl	8009828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20005124 	.word	0x20005124
 8004ef4:	200051d8 	.word	0x200051d8
 8004ef8:	20004128 	.word	0x20004128
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return 1;
 8004f04:	2301      	movs	r3, #1
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_kill>:

int _kill(int pid, int sig)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f1a:	f00e f8b9 	bl	8013090 <__errno>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2216      	movs	r2, #22
 8004f22:	601a      	str	r2, [r3, #0]
  return -1;
 8004f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <_exit>:

void _exit (int status)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffe7 	bl	8004f10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f42:	e7fe      	b.n	8004f42 <_exit+0x12>

08004f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e00a      	b.n	8004f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f56:	f3af 8000 	nop.w
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	60ba      	str	r2, [r7, #8]
 8004f62:	b2ca      	uxtb	r2, r1
 8004f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	dbf0      	blt.n	8004f56 <_read+0x12>
  }

  return len;
 8004f74:	687b      	ldr	r3, [r7, #4]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e009      	b.n	8004fa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	60ba      	str	r2, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	dbf1      	blt.n	8004f90 <_write+0x12>
  }
  return len;
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <_close>:

int _close(int file)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fde:	605a      	str	r2, [r3, #4]
  return 0;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <_isatty>:

int _isatty(int file)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ff6:	2301      	movs	r3, #1
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <_sbrk+0x5c>)
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <_sbrk+0x60>)
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005034:	4b13      	ldr	r3, [pc, #76]	; (8005084 <_sbrk+0x64>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800503c:	4b11      	ldr	r3, [pc, #68]	; (8005084 <_sbrk+0x64>)
 800503e:	4a12      	ldr	r2, [pc, #72]	; (8005088 <_sbrk+0x68>)
 8005040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <_sbrk+0x64>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	429a      	cmp	r2, r3
 800504e:	d207      	bcs.n	8005060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005050:	f00e f81e 	bl	8013090 <__errno>
 8005054:	4603      	mov	r3, r0
 8005056:	220c      	movs	r2, #12
 8005058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800505e:	e009      	b.n	8005074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <_sbrk+0x64>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <_sbrk+0x64>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	4a05      	ldr	r2, [pc, #20]	; (8005084 <_sbrk+0x64>)
 8005070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005072:	68fb      	ldr	r3, [r7, #12]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20020000 	.word	0x20020000
 8005080:	00000400 	.word	0x00000400
 8005084:	200051e0 	.word	0x200051e0
 8005088:	2000af98 	.word	0x2000af98

0800508c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <SystemInit+0x20>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	4a05      	ldr	r2, [pc, #20]	; (80050ac <SystemInit+0x20>)
 8005098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800509c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 80050b4:	202e      	movs	r0, #46	; 0x2e
 80050b6:	f00d fe4f 	bl	8012d58 <putchar>
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <vApplicationIdleHook+0x1c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f00d fd61 	bl	8012b88 <fflush>
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000043c 	.word	0x2000043c

080050d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005108 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80050d4:	f7ff ffda 	bl	800508c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050d8:	480c      	ldr	r0, [pc, #48]	; (800510c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050da:	490d      	ldr	r1, [pc, #52]	; (8005110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e0:	e002      	b.n	80050e8 <LoopCopyDataInit>

080050e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e6:	3304      	adds	r3, #4

080050e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050ec:	d3f9      	bcc.n	80050e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050f0:	4c0a      	ldr	r4, [pc, #40]	; (800511c <LoopFillZerobss+0x22>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f4:	e001      	b.n	80050fa <LoopFillZerobss>

080050f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f8:	3204      	adds	r2, #4

080050fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050fc:	d3fb      	bcc.n	80050f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80050fe:	f00d ffcd 	bl	801309c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005102:	f7fe ffc9 	bl	8004098 <main>
  bx  lr    
 8005106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800510c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005110:	200005ac 	.word	0x200005ac
  ldr r2, =_sidata
 8005114:	08016b9c 	.word	0x08016b9c
  ldr r2, =_sbss
 8005118:	20001d38 	.word	0x20001d38
  ldr r4, =_ebss
 800511c:	2000af98 	.word	0x2000af98

08005120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005120:	e7fe      	b.n	8005120 <ADC_IRQHandler>
	...

08005124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <HAL_Init+0x40>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <HAL_Init+0x40>)
 800512e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_Init+0x40>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <HAL_Init+0x40>)
 800513a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800513e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_Init+0x40>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a07      	ldr	r2, [pc, #28]	; (8005164 <HAL_Init+0x40>)
 8005146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800514c:	2003      	movs	r0, #3
 800514e:	f000 fd61 	bl	8005c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005152:	200f      	movs	r0, #15
 8005154:	f000 f808 	bl	8005168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005158:	f7ff fbc0 	bl	80048dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00

08005168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_InitTick+0x54>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_InitTick+0x58>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	4619      	mov	r1, r3
 800517a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800517e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fd79 	bl	8005c7e <HAL_SYSTICK_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e00e      	b.n	80051b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b0f      	cmp	r3, #15
 800519a:	d80a      	bhi.n	80051b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800519c:	2200      	movs	r2, #0
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a4:	f000 fd41 	bl	8005c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051a8:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <HAL_InitTick+0x5c>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200002e4 	.word	0x200002e4
 80051c0:	200002ec 	.word	0x200002ec
 80051c4:	200002e8 	.word	0x200002e8

080051c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_IncTick+0x20>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_IncTick+0x24>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <HAL_IncTick+0x24>)
 80051da:	6013      	str	r3, [r2, #0]
}
 80051dc:	bf00      	nop
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	200002ec 	.word	0x200002ec
 80051ec:	200051e4 	.word	0x200051e4

080051f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  return uwTick;
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <HAL_GetTick+0x14>)
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	200051e4 	.word	0x200051e4

08005208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005210:	f7ff ffee 	bl	80051f0 <HAL_GetTick>
 8005214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005220:	d005      	beq.n	800522e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <HAL_Delay+0x44>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800522e:	bf00      	nop
 8005230:	f7ff ffde 	bl	80051f0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	429a      	cmp	r2, r3
 800523e:	d8f7      	bhi.n	8005230 <HAL_Delay+0x28>
  {
  }
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200002ec 	.word	0x200002ec

08005250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e033      	b.n	80052ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fb68 	bl	8004944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005296:	f023 0302 	bic.w	r3, r3, #2
 800529a:	f043 0202 	orr.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa68 	bl	8005778 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	f043 0201 	orr.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
 80052be:	e001      	b.n	80052c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_ADC_Start_DMA+0x1e>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e0e9      	b.n	80054ca <HAL_ADC_Start_DMA+0x1f2>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d018      	beq.n	800533e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800531c:	4b6d      	ldr	r3, [pc, #436]	; (80054d4 <HAL_ADC_Start_DMA+0x1fc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a6d      	ldr	r2, [pc, #436]	; (80054d8 <HAL_ADC_Start_DMA+0x200>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0c9a      	lsrs	r2, r3, #18
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005330:	e002      	b.n	8005338 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3b01      	subs	r3, #1
 8005336:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f9      	bne.n	8005332 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d107      	bne.n	800535e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800535c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	f040 80a1 	bne.w	80054b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005376:	f023 0301 	bic.w	r3, r3, #1
 800537a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005398:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ac:	d106      	bne.n	80053bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f023 0206 	bic.w	r2, r3, #6
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
 80053ba:	e002      	b.n	80053c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053ca:	4b44      	ldr	r3, [pc, #272]	; (80054dc <HAL_ADC_Start_DMA+0x204>)
 80053cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	4a43      	ldr	r2, [pc, #268]	; (80054e0 <HAL_ADC_Start_DMA+0x208>)
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	4a42      	ldr	r2, [pc, #264]	; (80054e4 <HAL_ADC_Start_DMA+0x20c>)
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	4a41      	ldr	r2, [pc, #260]	; (80054e8 <HAL_ADC_Start_DMA+0x210>)
 80053e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80053fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800540e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	334c      	adds	r3, #76	; 0x4c
 800541a:	4619      	mov	r1, r3
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f000 fce8 	bl	8005df4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2b00      	cmp	r3, #0
 800542e:	d12a      	bne.n	8005486 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_ADC_Start_DMA+0x214>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d015      	beq.n	8005466 <HAL_ADC_Start_DMA+0x18e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <HAL_ADC_Start_DMA+0x218>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d105      	bne.n	8005450 <HAL_ADC_Start_DMA+0x178>
 8005444:	4b25      	ldr	r3, [pc, #148]	; (80054dc <HAL_ADC_Start_DMA+0x204>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <HAL_ADC_Start_DMA+0x21c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d136      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
 800545a:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_ADC_Start_DMA+0x204>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d130      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d129      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	e020      	b.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a18      	ldr	r2, [pc, #96]	; (80054ec <HAL_ADC_Start_DMA+0x214>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d11b      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d114      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	e00b      	b.n	80054c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0210 	orr.w	r2, r3, #16
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	f043 0201 	orr.w	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200002e4 	.word	0x200002e4
 80054d8:	431bde83 	.word	0x431bde83
 80054dc:	40012300 	.word	0x40012300
 80054e0:	08005971 	.word	0x08005971
 80054e4:	08005a2b 	.word	0x08005a2b
 80054e8:	08005a47 	.word	0x08005a47
 80054ec:	40012000 	.word	0x40012000
 80054f0:	40012100 	.word	0x40012100
 80054f4:	40012200 	.word	0x40012200

080054f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e105      	b.n	800575c <HAL_ADC_ConfigChannel+0x228>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b09      	cmp	r3, #9
 800555e:	d925      	bls.n	80055ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68d9      	ldr	r1, [r3, #12]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	3b1e      	subs	r3, #30
 8005576:	2207      	movs	r2, #7
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43da      	mvns	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	400a      	ands	r2, r1
 8005584:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68d9      	ldr	r1, [r3, #12]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	4618      	mov	r0, r3
 8005598:	4603      	mov	r3, r0
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	4403      	add	r3, r0
 800559e:	3b1e      	subs	r3, #30
 80055a0:	409a      	lsls	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	e022      	b.n	80055f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6919      	ldr	r1, [r3, #16]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	4613      	mov	r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4413      	add	r3, r2
 80055c0:	2207      	movs	r2, #7
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43da      	mvns	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	400a      	ands	r2, r1
 80055ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6919      	ldr	r1, [r3, #16]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4618      	mov	r0, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4403      	add	r3, r0
 80055e8:	409a      	lsls	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d824      	bhi.n	8005644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	3b05      	subs	r3, #5
 800560c:	221f      	movs	r2, #31
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43da      	mvns	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	400a      	ands	r2, r1
 800561a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	4618      	mov	r0, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	3b05      	subs	r3, #5
 8005636:	fa00 f203 	lsl.w	r2, r0, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	635a      	str	r2, [r3, #52]	; 0x34
 8005642:	e04c      	b.n	80056de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	d824      	bhi.n	8005696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	3b23      	subs	r3, #35	; 0x23
 800565e:	221f      	movs	r2, #31
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43da      	mvns	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	400a      	ands	r2, r1
 800566c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	4618      	mov	r0, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	3b23      	subs	r3, #35	; 0x23
 8005688:	fa00 f203 	lsl.w	r2, r0, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
 8005694:	e023      	b.n	80056de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	3b41      	subs	r3, #65	; 0x41
 80056a8:	221f      	movs	r2, #31
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43da      	mvns	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	400a      	ands	r2, r1
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4618      	mov	r0, r3
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	3b41      	subs	r3, #65	; 0x41
 80056d2:	fa00 f203 	lsl.w	r2, r0, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <HAL_ADC_ConfigChannel+0x234>)
 80056e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	; (800576c <HAL_ADC_ConfigChannel+0x238>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x1cc>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b12      	cmp	r3, #18
 80056f2:	d105      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_ADC_ConfigChannel+0x238>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d123      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x21e>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b10      	cmp	r3, #16
 8005710:	d003      	beq.n	800571a <HAL_ADC_ConfigChannel+0x1e6>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b11      	cmp	r3, #17
 8005718:	d11b      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b10      	cmp	r3, #16
 800572c:	d111      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <HAL_ADC_ConfigChannel+0x23c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a10      	ldr	r2, [pc, #64]	; (8005774 <HAL_ADC_ConfigChannel+0x240>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	0c9a      	lsrs	r2, r3, #18
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005744:	e002      	b.n	800574c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	3b01      	subs	r3, #1
 800574a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f9      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40012300 	.word	0x40012300
 800576c:	40012000 	.word	0x40012000
 8005770:	200002e4 	.word	0x200002e4
 8005774:	431bde83 	.word	0x431bde83

08005778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005780:	4b79      	ldr	r3, [pc, #484]	; (8005968 <ADC_Init+0x1f0>)
 8005782:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	021a      	lsls	r2, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80057d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6899      	ldr	r1, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	4a58      	ldr	r2, [pc, #352]	; (800596c <ADC_Init+0x1f4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800581e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	e00f      	b.n	8005876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0202 	bic.w	r2, r2, #2
 8005884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6899      	ldr	r1, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7e1b      	ldrb	r3, [r3, #24]
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01b      	beq.n	80058dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80058c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	3b01      	subs	r3, #1
 80058d0:	035a      	lsls	r2, r3, #13
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e007      	b.n	80058ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	3b01      	subs	r3, #1
 8005908:	051a      	lsls	r2, r3, #20
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6899      	ldr	r1, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800592e:	025a      	lsls	r2, r3, #9
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	029a      	lsls	r2, r3, #10
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40012300 	.word	0x40012300
 800596c:	0f000001 	.word	0x0f000001

08005970 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005986:	2b00      	cmp	r3, #0
 8005988:	d13c      	bne.n	8005a04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d12b      	bne.n	80059fc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d127      	bne.n	80059fc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d119      	bne.n	80059fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0220 	bic.w	r2, r2, #32
 80059d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fd7b 	bl	80054f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a02:	e00e      	b.n	8005a22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fd85 	bl	8005520 <HAL_ADC_ErrorCallback>
}
 8005a16:	e004      	b.n	8005a22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fd67 	bl	800550c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2240      	movs	r2, #64	; 0x40
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fd5a 	bl	8005520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <__NVIC_SetPriorityGrouping>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a90:	4013      	ands	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aa6:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	60d3      	str	r3, [r2, #12]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	e000ed00 	.word	0xe000ed00

08005abc <__NVIC_GetPriorityGrouping>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ac0:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	f003 0307 	and.w	r3, r3, #7
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	e000ed00 	.word	0xe000ed00

08005ad8 <__NVIC_EnableIRQ>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	db0b      	blt.n	8005b02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	f003 021f 	and.w	r2, r3, #31
 8005af0:	4907      	ldr	r1, [pc, #28]	; (8005b10 <__NVIC_EnableIRQ+0x38>)
 8005af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2001      	movs	r0, #1
 8005afa:	fa00 f202 	lsl.w	r2, r0, r2
 8005afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	e000e100 	.word	0xe000e100

08005b14 <__NVIC_SetPriority>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	db0a      	blt.n	8005b3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	490c      	ldr	r1, [pc, #48]	; (8005b60 <__NVIC_SetPriority+0x4c>)
 8005b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b32:	0112      	lsls	r2, r2, #4
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	440b      	add	r3, r1
 8005b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b3c:	e00a      	b.n	8005b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4908      	ldr	r1, [pc, #32]	; (8005b64 <__NVIC_SetPriority+0x50>)
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	3b04      	subs	r3, #4
 8005b4c:	0112      	lsls	r2, r2, #4
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	440b      	add	r3, r1
 8005b52:	761a      	strb	r2, [r3, #24]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000e100 	.word	0xe000e100
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <NVIC_EncodePriority>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f1c3 0307 	rsb	r3, r3, #7
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	bf28      	it	cs
 8005b86:	2304      	movcs	r3, #4
 8005b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d902      	bls.n	8005b98 <NVIC_EncodePriority+0x30>
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3b03      	subs	r3, #3
 8005b96:	e000      	b.n	8005b9a <NVIC_EncodePriority+0x32>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	401a      	ands	r2, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bba:	43d9      	mvns	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc0:	4313      	orrs	r3, r2
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3724      	adds	r7, #36	; 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be0:	d301      	bcc.n	8005be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005be2:	2301      	movs	r3, #1
 8005be4:	e00f      	b.n	8005c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <SysTick_Config+0x40>)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bee:	210f      	movs	r1, #15
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf4:	f7ff ff8e 	bl	8005b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <SysTick_Config+0x40>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <SysTick_Config+0x40>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010

08005c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff ff29 	bl	8005a74 <__NVIC_SetPriorityGrouping>
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	4603      	mov	r3, r0
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c3c:	f7ff ff3e 	bl	8005abc <__NVIC_GetPriorityGrouping>
 8005c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7ff ff8e 	bl	8005b68 <NVIC_EncodePriority>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff5d 	bl	8005b14 <__NVIC_SetPriority>
}
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	4603      	mov	r3, r0
 8005c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff31 	bl	8005ad8 <__NVIC_EnableIRQ>
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ffa2 	bl	8005bd0 <SysTick_Config>
 8005c8c:	4603      	mov	r3, r0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ca4:	f7ff faa4 	bl	80051f0 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e099      	b.n	8005de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cd4:	e00f      	b.n	8005cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cd6:	f7ff fa8b 	bl	80051f0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d908      	bls.n	8005cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e078      	b.n	8005de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e8      	bne.n	8005cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4b38      	ldr	r3, [pc, #224]	; (8005df0 <HAL_DMA_Init+0x158>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d107      	bne.n	8005d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d117      	bne.n	8005dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00e      	beq.n	8005dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fb01 	bl	80063a4 <DMA_CheckFifoParam>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2240      	movs	r2, #64	; 0x40
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005db6:	2301      	movs	r3, #1
 8005db8:	e016      	b.n	8005de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fab8 	bl	8006338 <DMA_CalcBaseAndBitshift>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd0:	223f      	movs	r2, #63	; 0x3f
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	f010803f 	.word	0xf010803f

08005df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_DMA_Start_IT+0x26>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e040      	b.n	8005e9c <HAL_DMA_Start_IT+0xa8>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d12f      	bne.n	8005e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fa4a 	bl	80062dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4c:	223f      	movs	r2, #63	; 0x3f
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0216 	orr.w	r2, r2, #22
 8005e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0208 	orr.w	r2, r2, #8
 8005e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e005      	b.n	8005e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
 8005e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005eb2:	f7ff f99d 	bl	80051f0 <HAL_GetTick>
 8005eb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d008      	beq.n	8005ed6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e052      	b.n	8005f7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0216 	bic.w	r2, r2, #22
 8005ee4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_DMA_Abort+0x62>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0208 	bic.w	r2, r2, #8
 8005f14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f26:	e013      	b.n	8005f50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f28:	f7ff f962 	bl	80051f0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d90c      	bls.n	8005f50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e015      	b.n	8005f7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e4      	bne.n	8005f28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f62:	223f      	movs	r2, #63	; 0x3f
 8005f64:	409a      	lsls	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d004      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00c      	b.n	8005fbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fd4:	4b8e      	ldr	r3, [pc, #568]	; (8006210 <HAL_DMA_IRQHandler+0x248>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a8e      	ldr	r2, [pc, #568]	; (8006214 <HAL_DMA_IRQHandler+0x24c>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	0a9b      	lsrs	r3, r3, #10
 8005fe0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01a      	beq.n	8006034 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d013      	beq.n	8006034 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0204 	bic.w	r2, r2, #4
 800601a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	2208      	movs	r2, #8
 8006022:	409a      	lsls	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	f043 0201 	orr.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	2201      	movs	r2, #1
 800603a:	409a      	lsls	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d012      	beq.n	800606a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	2201      	movs	r2, #1
 8006058:	409a      	lsls	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	2204      	movs	r2, #4
 8006070:	409a      	lsls	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d012      	beq.n	80060a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	2204      	movs	r2, #4
 800608e:	409a      	lsls	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006098:	f043 0204 	orr.w	r2, r3, #4
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a4:	2210      	movs	r2, #16
 80060a6:	409a      	lsls	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d043      	beq.n	8006138 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d03c      	beq.n	8006138 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c2:	2210      	movs	r2, #16
 80060c4:	409a      	lsls	r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d018      	beq.n	800610a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d108      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d024      	beq.n	8006138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
 80060f6:	e01f      	b.n	8006138 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
 8006108:	e016      	b.n	8006138 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0208 	bic.w	r2, r2, #8
 8006126:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	2220      	movs	r2, #32
 800613e:	409a      	lsls	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 808f 	beq.w	8006268 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8087 	beq.w	8006268 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615e:	2220      	movs	r2, #32
 8006160:	409a      	lsls	r2, r3
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b05      	cmp	r3, #5
 8006170:	d136      	bne.n	80061e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0216 	bic.w	r2, r2, #22
 8006180:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006190:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <HAL_DMA_IRQHandler+0x1da>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0208 	bic.w	r2, r2, #8
 80061b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b6:	223f      	movs	r2, #63	; 0x3f
 80061b8:	409a      	lsls	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d07e      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
        }
        return;
 80061de:	e079      	b.n	80062d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01d      	beq.n	800622a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10d      	bne.n	8006218 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	2b00      	cmp	r3, #0
 8006202:	d031      	beq.n	8006268 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
 800620c:	e02c      	b.n	8006268 <HAL_DMA_IRQHandler+0x2a0>
 800620e:	bf00      	nop
 8006210:	200002e4 	.word	0x200002e4
 8006214:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d023      	beq.n	8006268 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
 8006228:	e01e      	b.n	8006268 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10f      	bne.n	8006258 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0210 	bic.w	r2, r2, #16
 8006246:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	2b00      	cmp	r3, #0
 800626e:	d032      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2205      	movs	r2, #5
 8006280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0201 	bic.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	3301      	adds	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	429a      	cmp	r2, r3
 800629e:	d307      	bcc.n	80062b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f2      	bne.n	8006294 <HAL_DMA_IRQHandler+0x2cc>
 80062ae:	e000      	b.n	80062b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
 80062d2:	e000      	b.n	80062d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80062d4:	bf00      	nop
    }
  }
}
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d108      	bne.n	800631c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800631a:	e007      	b.n	800632c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	60da      	str	r2, [r3, #12]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	3b10      	subs	r3, #16
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <DMA_CalcBaseAndBitshift+0x64>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006352:	4a13      	ldr	r2, [pc, #76]	; (80063a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b03      	cmp	r3, #3
 8006364:	d909      	bls.n	800637a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	659a      	str	r2, [r3, #88]	; 0x58
 8006378:	e007      	b.n	800638a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	aaaaaaab 	.word	0xaaaaaaab
 80063a0:	08016814 	.word	0x08016814

080063a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d11f      	bne.n	80063fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d856      	bhi.n	8006472 <DMA_CheckFifoParam+0xce>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <DMA_CheckFifoParam+0x28>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063dd 	.word	0x080063dd
 80063d0:	080063ef 	.word	0x080063ef
 80063d4:	080063dd 	.word	0x080063dd
 80063d8:	08006473 	.word	0x08006473
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d046      	beq.n	8006476 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ec:	e043      	b.n	8006476 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063f6:	d140      	bne.n	800647a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fc:	e03d      	b.n	800647a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d121      	bne.n	800644c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b03      	cmp	r3, #3
 800640c:	d837      	bhi.n	800647e <DMA_CheckFifoParam+0xda>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <DMA_CheckFifoParam+0x70>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006425 	.word	0x08006425
 8006418:	0800642b 	.word	0x0800642b
 800641c:	08006425 	.word	0x08006425
 8006420:	0800643d 	.word	0x0800643d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
      break;
 8006428:	e030      	b.n	800648c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d025      	beq.n	8006482 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643a:	e022      	b.n	8006482 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006444:	d11f      	bne.n	8006486 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800644a:	e01c      	b.n	8006486 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d903      	bls.n	800645a <DMA_CheckFifoParam+0xb6>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d003      	beq.n	8006460 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006458:	e018      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
      break;
 800645e:	e015      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00e      	beq.n	800648a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
      break;
 8006470:	e00b      	b.n	800648a <DMA_CheckFifoParam+0xe6>
      break;
 8006472:	bf00      	nop
 8006474:	e00a      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      break;
 8006476:	bf00      	nop
 8006478:	e008      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      break;
 800647a:	bf00      	nop
 800647c:	e006      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      break;
 800647e:	bf00      	nop
 8006480:	e004      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      break;
 8006482:	bf00      	nop
 8006484:	e002      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      break;   
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <DMA_CheckFifoParam+0xe8>
      break;
 800648a:	bf00      	nop
    }
  } 
  
  return status; 
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop

0800649c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800649c:	b480      	push	{r7}
 800649e:	b089      	sub	sp, #36	; 0x24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	e16b      	b.n	8006790 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064b8:	2201      	movs	r2, #1
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4013      	ands	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	f040 815a 	bne.w	800678a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d005      	beq.n	80064ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d130      	bne.n	8006550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	2203      	movs	r2, #3
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43db      	mvns	r3, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4313      	orrs	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006524:	2201      	movs	r2, #1
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	f003 0201 	and.w	r2, r3, #1
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	2b03      	cmp	r3, #3
 800655a:	d017      	beq.n	800658c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	2203      	movs	r2, #3
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d123      	bne.n	80065e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	08da      	lsrs	r2, r3, #3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3208      	adds	r2, #8
 80065a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	220f      	movs	r2, #15
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4013      	ands	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	08da      	lsrs	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3208      	adds	r2, #8
 80065da:	69b9      	ldr	r1, [r7, #24]
 80065dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	2203      	movs	r2, #3
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4013      	ands	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 0203 	and.w	r2, r3, #3
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	4313      	orrs	r3, r2
 800660c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80b4 	beq.w	800678a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4b60      	ldr	r3, [pc, #384]	; (80067a8 <HAL_GPIO_Init+0x30c>)
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	4a5f      	ldr	r2, [pc, #380]	; (80067a8 <HAL_GPIO_Init+0x30c>)
 800662c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006630:	6453      	str	r3, [r2, #68]	; 0x44
 8006632:	4b5d      	ldr	r3, [pc, #372]	; (80067a8 <HAL_GPIO_Init+0x30c>)
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800663e:	4a5b      	ldr	r2, [pc, #364]	; (80067ac <HAL_GPIO_Init+0x310>)
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	089b      	lsrs	r3, r3, #2
 8006644:	3302      	adds	r3, #2
 8006646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	220f      	movs	r2, #15
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43db      	mvns	r3, r3
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4013      	ands	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a52      	ldr	r2, [pc, #328]	; (80067b0 <HAL_GPIO_Init+0x314>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d02b      	beq.n	80066c2 <HAL_GPIO_Init+0x226>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a51      	ldr	r2, [pc, #324]	; (80067b4 <HAL_GPIO_Init+0x318>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d025      	beq.n	80066be <HAL_GPIO_Init+0x222>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a50      	ldr	r2, [pc, #320]	; (80067b8 <HAL_GPIO_Init+0x31c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d01f      	beq.n	80066ba <HAL_GPIO_Init+0x21e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a4f      	ldr	r2, [pc, #316]	; (80067bc <HAL_GPIO_Init+0x320>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d019      	beq.n	80066b6 <HAL_GPIO_Init+0x21a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a4e      	ldr	r2, [pc, #312]	; (80067c0 <HAL_GPIO_Init+0x324>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_GPIO_Init+0x216>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a4d      	ldr	r2, [pc, #308]	; (80067c4 <HAL_GPIO_Init+0x328>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00d      	beq.n	80066ae <HAL_GPIO_Init+0x212>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a4c      	ldr	r2, [pc, #304]	; (80067c8 <HAL_GPIO_Init+0x32c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <HAL_GPIO_Init+0x20e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a4b      	ldr	r2, [pc, #300]	; (80067cc <HAL_GPIO_Init+0x330>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d101      	bne.n	80066a6 <HAL_GPIO_Init+0x20a>
 80066a2:	2307      	movs	r3, #7
 80066a4:	e00e      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066a6:	2308      	movs	r3, #8
 80066a8:	e00c      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066aa:	2306      	movs	r3, #6
 80066ac:	e00a      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066ae:	2305      	movs	r3, #5
 80066b0:	e008      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066b2:	2304      	movs	r3, #4
 80066b4:	e006      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066b6:	2303      	movs	r3, #3
 80066b8:	e004      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e002      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <HAL_GPIO_Init+0x228>
 80066c2:	2300      	movs	r3, #0
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	f002 0203 	and.w	r2, r2, #3
 80066ca:	0092      	lsls	r2, r2, #2
 80066cc:	4093      	lsls	r3, r2
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066d4:	4935      	ldr	r1, [pc, #212]	; (80067ac <HAL_GPIO_Init+0x310>)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	089b      	lsrs	r3, r3, #2
 80066da:	3302      	adds	r3, #2
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066e2:	4b3b      	ldr	r3, [pc, #236]	; (80067d0 <HAL_GPIO_Init+0x334>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006706:	4a32      	ldr	r2, [pc, #200]	; (80067d0 <HAL_GPIO_Init+0x334>)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800670c:	4b30      	ldr	r3, [pc, #192]	; (80067d0 <HAL_GPIO_Init+0x334>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006730:	4a27      	ldr	r2, [pc, #156]	; (80067d0 <HAL_GPIO_Init+0x334>)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006736:	4b26      	ldr	r3, [pc, #152]	; (80067d0 <HAL_GPIO_Init+0x334>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800675a:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <HAL_GPIO_Init+0x334>)
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_GPIO_Init+0x334>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	43db      	mvns	r3, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4013      	ands	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006784:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <HAL_GPIO_Init+0x334>)
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3301      	adds	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	f67f ae90 	bls.w	80064b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40013800 	.word	0x40013800
 80067b0:	40020000 	.word	0x40020000
 80067b4:	40020400 	.word	0x40020400
 80067b8:	40020800 	.word	0x40020800
 80067bc:	40020c00 	.word	0x40020c00
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40021400 	.word	0x40021400
 80067c8:	40021800 	.word	0x40021800
 80067cc:	40021c00 	.word	0x40021c00
 80067d0:	40013c00 	.word	0x40013c00

080067d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	807b      	strh	r3, [r7, #2]
 80067e0:	4613      	mov	r3, r2
 80067e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067e4:	787b      	ldrb	r3, [r7, #1]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067f0:	e003      	b.n	80067fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	041a      	lsls	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af02      	add	r7, sp, #8
 800680c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e101      	b.n	8006a1c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f00b f980 	bl	8011b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2203      	movs	r2, #3
 800683c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006846:	d102      	bne.n	800684e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f004 fa0f 	bl	800ac76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	7c1a      	ldrb	r2, [r3, #16]
 8006860:	f88d 2000 	strb.w	r2, [sp]
 8006864:	3304      	adds	r3, #4
 8006866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006868:	f004 f8ed 	bl	800aa46 <USB_CoreInit>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e0ce      	b.n	8006a1c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f004 fa07 	bl	800ac98 <USB_SetCurrentMode>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e0bf      	b.n	8006a1c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e04a      	b.n	8006938 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	3315      	adds	r3, #21
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	3314      	adds	r3, #20
 80068c6:	7bfa      	ldrb	r2, [r7, #15]
 80068c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	b298      	uxth	r0, r3
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	332e      	adds	r3, #46	; 0x2e
 80068de:	4602      	mov	r2, r0
 80068e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	3318      	adds	r3, #24
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068f6:	7bfa      	ldrb	r2, [r7, #15]
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	331c      	adds	r3, #28
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800690a:	7bfa      	ldrb	r2, [r7, #15]
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	3320      	adds	r3, #32
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800691e:	7bfa      	ldrb	r2, [r7, #15]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	3324      	adds	r3, #36	; 0x24
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	3301      	adds	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	429a      	cmp	r2, r3
 8006940:	d3af      	bcc.n	80068a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
 8006946:	e044      	b.n	80069d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006948:	7bfa      	ldrb	r2, [r7, #15]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	f203 2355 	addw	r3, r3, #597	; 0x255
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800695e:	7bfa      	ldrb	r2, [r7, #15]
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006970:	7bfa      	ldrb	r2, [r7, #15]
 8006972:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006974:	7bfa      	ldrb	r2, [r7, #15]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800698a:	7bfa      	ldrb	r2, [r7, #15]
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069a0:	7bfa      	ldrb	r2, [r7, #15]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069b6:	7bfa      	ldrb	r2, [r7, #15]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	3301      	adds	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	791b      	ldrb	r3, [r3, #4]
 80069d6:	7bfa      	ldrb	r2, [r7, #15]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d3b5      	bcc.n	8006948 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7c1a      	ldrb	r2, [r3, #16]
 80069e4:	f88d 2000 	strb.w	r2, [sp]
 80069e8:	3304      	adds	r3, #4
 80069ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069ec:	f004 f9a0 	bl	800ad30 <USB_DevInit>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e00c      	b.n	8006a1c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f005 f9e4 	bl	800bde2 <USB_DevDisconnect>

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_PCD_Start+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e022      	b.n	8006a86 <HAL_PCD_Start+0x62>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f004 f8f1 	bl	800ac54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f005 f992 	bl	800bda0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a8e:	b590      	push	{r4, r7, lr}
 8006a90:	b08d      	sub	sp, #52	; 0x34
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f005 fa50 	bl	800bf4a <USB_GetMode>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 848c 	bne.w	80073ca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f005 f9b4 	bl	800be24 <USB_ReadInterrupts>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8482 	beq.w	80073c8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	0a1b      	lsrs	r3, r3, #8
 8006ace:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f005 f9a1 	bl	800be24 <USB_ReadInterrupts>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d107      	bne.n	8006afc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f002 0202 	and.w	r2, r2, #2
 8006afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f005 f98f 	bl	800be24 <USB_ReadInterrupts>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d161      	bne.n	8006bd4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0210 	bic.w	r2, r2, #16
 8006b1e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	0c5b      	lsrs	r3, r3, #17
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d124      	bne.n	8006b96 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b52:	4013      	ands	r3, r2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d035      	beq.n	8006bc4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6a38      	ldr	r0, [r7, #32]
 8006b6c:	f004 ffc6 	bl	800bafc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	091b      	lsrs	r3, r3, #4
 8006b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b7c:	441a      	add	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b8e:	441a      	add	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	615a      	str	r2, [r3, #20]
 8006b94:	e016      	b.n	8006bc4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	0c5b      	lsrs	r3, r3, #17
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d110      	bne.n	8006bc4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006ba8:	2208      	movs	r2, #8
 8006baa:	4619      	mov	r1, r3
 8006bac:	6a38      	ldr	r0, [r7, #32]
 8006bae:	f004 ffa5 	bl	800bafc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	695a      	ldr	r2, [r3, #20]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bbe:	441a      	add	r2, r3
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0210 	orr.w	r2, r2, #16
 8006bd2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f005 f923 	bl	800be24 <USB_ReadInterrupts>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006be8:	f040 80a7 	bne.w	8006d3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f005 f928 	bl	800be4a <USB_ReadDevAllOutEpInterrupt>
 8006bfa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006bfc:	e099      	b.n	8006d32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 808e 	beq.w	8006d26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	4611      	mov	r1, r2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f005 f94c 	bl	800beb2 <USB_ReadDevOutEPInterrupt>
 8006c1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c32:	461a      	mov	r2, r3
 8006c34:	2301      	movs	r3, #1
 8006c36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fea2 	bl	8007984 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c56:	461a      	mov	r2, r3
 8006c58:	2308      	movs	r3, #8
 8006c5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 ff78 	bl	8007b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d008      	beq.n	8006c80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d030      	beq.n	8006cec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d109      	bne.n	8006caa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ca8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	78db      	ldrb	r3, [r3, #3]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d108      	bne.n	8006cda <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f00b f835 	bl	8011d44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2302      	movs	r3, #2
 8006cea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d02:	461a      	mov	r2, r3
 8006d04:	2320      	movs	r3, #32
 8006d06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	3301      	adds	r3, #1
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f47f af62 	bne.w	8006bfe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f005 f870 	bl	800be24 <USB_ReadInterrupts>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d4e:	f040 80db 	bne.w	8006f08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f005 f891 	bl	800be7e <USB_ReadDevAllInEpInterrupt>
 8006d5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006d62:	e0cd      	b.n	8006f00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80c2 	beq.w	8006ef4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f005 f8b7 	bl	800beee <USB_ReadDevInEPInterrupt>
 8006d80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d057      	beq.n	8006e3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	2201      	movs	r2, #1
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69f9      	ldr	r1, [r7, #28]
 8006da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dac:	4013      	ands	r3, r2
 8006dae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	799b      	ldrb	r3, [r3, #6]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d132      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3320      	adds	r3, #32
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de0:	4613      	mov	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4403      	add	r3, r0
 8006dea:	331c      	adds	r3, #28
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4419      	add	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4403      	add	r3, r0
 8006dfe:	3320      	adds	r3, #32
 8006e00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d113      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x3a2>
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	f005 f8be 	bl	800bfac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f00a feff 	bl	8011c3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d008      	beq.n	8006e58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	461a      	mov	r2, r3
 8006e54:	2308      	movs	r3, #8
 8006e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	461a      	mov	r2, r3
 8006e70:	2310      	movs	r3, #16
 8006e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d023      	beq.n	8006ee2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e9c:	6a38      	ldr	r0, [r7, #32]
 8006e9e:	f004 f8ab 	bl	800aff8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	3310      	adds	r3, #16
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	78db      	ldrb	r3, [r3, #3]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d108      	bne.n	8006ed0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f00a ff4c 	bl	8011d68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	2302      	movs	r3, #2
 8006ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fcbb 	bl	800786a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f af2e 	bne.w	8006d64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f004 ff89 	bl	800be24 <USB_ReadInterrupts>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1c:	d122      	bne.n	8006f64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d108      	bne.n	8006f4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fea2 	bl	8007c90 <HAL_PCDEx_LPM_Callback>
 8006f4c:	e002      	b.n	8006f54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f00a feea 	bl	8011d28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f004 ff5b 	bl	800be24 <USB_ReadInterrupts>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f78:	d112      	bne.n	8006fa0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d102      	bne.n	8006f90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f00a fea6 	bl	8011cdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006f9e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f004 ff3d 	bl	800be24 <USB_ReadInterrupts>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	f040 80b7 	bne.w	8007126 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2110      	movs	r1, #16
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f004 f810 	bl	800aff8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fdc:	e046      	b.n	800706c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	461a      	mov	r2, r3
 8006fec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ff0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007010:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007024:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	440a      	add	r2, r1
 800703c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007044:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007056:	0151      	lsls	r1, r2, #5
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	440a      	add	r2, r1
 800705c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007060:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007064:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	3301      	adds	r3, #1
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	791b      	ldrb	r3, [r3, #4]
 8007070:	461a      	mov	r2, r3
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	4293      	cmp	r3, r2
 8007076:	d3b2      	bcc.n	8006fde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007086:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800708a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7bdb      	ldrb	r3, [r3, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d016      	beq.n	80070c2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a4:	f043 030b 	orr.w	r3, r3, #11
 80070a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ba:	f043 030b 	orr.w	r3, r3, #11
 80070be:	6453      	str	r3, [r2, #68]	; 0x44
 80070c0:	e015      	b.n	80070ee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80070d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e8:	f043 030b 	orr.w	r3, r3, #11
 80070ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007100:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007110:	461a      	mov	r2, r3
 8007112:	f004 ff4b 	bl	800bfac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f004 fe7a 	bl	800be24 <USB_ReadInterrupts>
 8007130:	4603      	mov	r3, r0
 8007132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713a:	d123      	bne.n	8007184 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f004 ff10 	bl	800bf66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f003 ffcd 	bl	800b0ea <USB_GetDevSpeed>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681c      	ldr	r4, [r3, #0]
 800715c:	f001 fa08 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 8007160:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007166:	461a      	mov	r2, r3
 8007168:	4620      	mov	r0, r4
 800716a:	f003 fcd1 	bl	800ab10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f00a fd8b 	bl	8011c8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007182:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f004 fe4b 	bl	800be24 <USB_ReadInterrupts>
 800718e:	4603      	mov	r3, r0
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b08      	cmp	r3, #8
 8007196:	d10a      	bne.n	80071ae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f00a fd68 	bl	8011c6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f002 0208 	and.w	r2, r2, #8
 80071ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f004 fe36 	bl	800be24 <USB_ReadInterrupts>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d123      	bne.n	800720a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071ce:	2301      	movs	r3, #1
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
 80071d2:	e014      	b.n	80071fe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fb08 	bl	8007808 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	3301      	adds	r3, #1
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	461a      	mov	r2, r3
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	4293      	cmp	r3, r2
 8007208:	d3e4      	bcc.n	80071d4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f004 fe08 	bl	800be24 <USB_ReadInterrupts>
 8007214:	4603      	mov	r3, r0
 8007216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800721a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721e:	d13c      	bne.n	800729a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007220:	2301      	movs	r3, #1
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
 8007224:	e02b      	b.n	800727e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	3318      	adds	r3, #24
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d115      	bne.n	8007278 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800724c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800724e:	2b00      	cmp	r3, #0
 8007250:	da12      	bge.n	8007278 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	3317      	adds	r3, #23
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fac8 	bl	8007808 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	3301      	adds	r3, #1
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	4293      	cmp	r3, r2
 8007288:	d3cd      	bcc.n	8007226 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f004 fdc0 	bl	800be24 <USB_ReadInterrupts>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ae:	d156      	bne.n	800735e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072b0:	2301      	movs	r3, #1
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
 80072b4:	e045      	b.n	8007342 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	4613      	mov	r3, r2
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d12e      	bne.n	800733c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	da2b      	bge.n	800733c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80072f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d121      	bne.n	800733c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	f203 2357 	addw	r3, r3, #599	; 0x257
 800730a:	2201      	movs	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007338:	6053      	str	r3, [r2, #4]
            break;
 800733a:	e008      	b.n	800734e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	3301      	adds	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	791b      	ldrb	r3, [r3, #4]
 8007346:	461a      	mov	r2, r3
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	4293      	cmp	r3, r2
 800734c:	d3b3      	bcc.n	80072b6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800735c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f004 fd5e 	bl	800be24 <USB_ReadInterrupts>
 8007368:	4603      	mov	r3, r0
 800736a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800736e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007372:	d10a      	bne.n	800738a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f00a fd09 	bl	8011d8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f004 fd48 	bl	800be24 <USB_ReadInterrupts>
 8007394:	4603      	mov	r3, r0
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b04      	cmp	r3, #4
 800739c:	d115      	bne.n	80073ca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f00a fcf9 	bl	8011da8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	e000      	b.n	80073ca <HAL_PCD_IRQHandler+0x93c>
      return;
 80073c8:	bf00      	nop
    }
  }
}
 80073ca:	3734      	adds	r7, #52	; 0x34
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}

080073d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <HAL_PCD_SetAddress+0x1a>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e012      	b.n	8007410 <HAL_PCD_SetAddress+0x40>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	78fa      	ldrb	r2, [r7, #3]
 80073f6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	78fa      	ldrb	r2, [r7, #3]
 80073fe:	4611      	mov	r1, r2
 8007400:	4618      	mov	r0, r3
 8007402:	f004 fca7 	bl	800bd54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	461a      	mov	r2, r3
 8007426:	4603      	mov	r3, r0
 8007428:	70fb      	strb	r3, [r7, #3]
 800742a:	460b      	mov	r3, r1
 800742c:	803b      	strh	r3, [r7, #0]
 800742e:	4613      	mov	r3, r2
 8007430:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800743a:	2b00      	cmp	r3, #0
 800743c:	da0f      	bge.n	800745e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	4613      	mov	r3, r2
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	3310      	adds	r3, #16
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	3304      	adds	r3, #4
 8007454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	705a      	strb	r2, [r3, #1]
 800745c:	e00f      	b.n	800747e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	f003 020f 	and.w	r2, r3, #15
 8007464:	4613      	mov	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4413      	add	r3, r2
 8007474:	3304      	adds	r3, #4
 8007476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800747e:	78fb      	ldrb	r3, [r7, #3]
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	b2da      	uxtb	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800748a:	883a      	ldrh	r2, [r7, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	78ba      	ldrb	r2, [r7, #2]
 8007494:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80074a8:	78bb      	ldrb	r3, [r7, #2]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d102      	bne.n	80074b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_PCD_EP_Open+0xaa>
 80074be:	2302      	movs	r3, #2
 80074c0:	e00e      	b.n	80074e0 <HAL_PCD_EP_Open+0xc8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68f9      	ldr	r1, [r7, #12]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f003 fe2f 	bl	800b134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80074de:	7afb      	ldrb	r3, [r7, #11]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da0f      	bge.n	800751c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	f003 020f 	and.w	r2, r3, #15
 8007502:	4613      	mov	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	3310      	adds	r3, #16
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4413      	add	r3, r2
 8007510:	3304      	adds	r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	705a      	strb	r2, [r3, #1]
 800751a:	e00f      	b.n	800753c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	f003 020f 	and.w	r2, r3, #15
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	3304      	adds	r3, #4
 8007534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	b2da      	uxtb	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_PCD_EP_Close+0x6e>
 8007552:	2302      	movs	r3, #2
 8007554:	e00e      	b.n	8007574 <HAL_PCD_EP_Close+0x8c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	4618      	mov	r0, r3
 8007566:	f003 fe6d 	bl	800b244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	460b      	mov	r3, r1
 800758a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	f003 020f 	and.w	r2, r3, #15
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	3304      	adds	r3, #4
 80075a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	799b      	ldrb	r3, [r3, #6]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d102      	bne.n	80075d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	799b      	ldrb	r3, [r3, #6]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6979      	ldr	r1, [r7, #20]
 80075e4:	f003 ff0a 	bl	800b3fc <USB_EPStartXfer>

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 020f 	and.w	r2, r3, #15
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8007614:	681b      	ldr	r3, [r3, #0]
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	460b      	mov	r3, r1
 8007630:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	f003 020f 	and.w	r2, r3, #15
 8007638:	4613      	mov	r3, r2
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	3310      	adds	r3, #16
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	3304      	adds	r3, #4
 8007648:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2200      	movs	r2, #0
 800765a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2201      	movs	r2, #1
 8007660:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007662:	7afb      	ldrb	r3, [r7, #11]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	b2da      	uxtb	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	799b      	ldrb	r3, [r3, #6]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d102      	bne.n	800767c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	799b      	ldrb	r3, [r3, #6]
 8007684:	461a      	mov	r2, r3
 8007686:	6979      	ldr	r1, [r7, #20]
 8007688:	f003 feb8 	bl	800b3fc <USB_EPStartXfer>

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7912      	ldrb	r2, [r2, #4]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d901      	bls.n	80076b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e04f      	b.n	8007754 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da0f      	bge.n	80076dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	f003 020f 	and.w	r2, r3, #15
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	3310      	adds	r3, #16
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	3304      	adds	r3, #4
 80076d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	705a      	strb	r2, [r3, #1]
 80076da:	e00d      	b.n	80076f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076dc:	78fa      	ldrb	r2, [r7, #3]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	3304      	adds	r3, #4
 80076f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	b2da      	uxtb	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_PCD_EP_SetStall+0x82>
 8007714:	2302      	movs	r3, #2
 8007716:	e01d      	b.n	8007754 <HAL_PCD_EP_SetStall+0xbe>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68f9      	ldr	r1, [r7, #12]
 8007726:	4618      	mov	r0, r3
 8007728:	f004 fa40 	bl	800bbac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7999      	ldrb	r1, [r3, #6]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007744:	461a      	mov	r2, r3
 8007746:	f004 fc31 	bl	800bfac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	7912      	ldrb	r2, [r2, #4]
 8007772:	4293      	cmp	r3, r2
 8007774:	d901      	bls.n	800777a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e042      	b.n	8007800 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800777a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800777e:	2b00      	cmp	r3, #0
 8007780:	da0f      	bge.n	80077a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f003 020f 	and.w	r2, r3, #15
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	3310      	adds	r3, #16
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	705a      	strb	r2, [r3, #1]
 80077a0:	e00f      	b.n	80077c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	4613      	mov	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_PCD_EP_ClrStall+0x86>
 80077de:	2302      	movs	r3, #2
 80077e0:	e00e      	b.n	8007800 <HAL_PCD_EP_ClrStall+0xa4>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f004 fa49 	bl	800bc88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da0c      	bge.n	8007836 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	f003 020f 	and.w	r2, r3, #15
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	3310      	adds	r3, #16
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	3304      	adds	r3, #4
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e00c      	b.n	8007850 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	f003 020f 	and.w	r2, r3, #15
 800783c:	4613      	mov	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4413      	add	r3, r2
 800784c:	3304      	adds	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	4618      	mov	r0, r3
 8007858:	f004 f868 	bl	800b92c <USB_EPStopXfer>
 800785c:	4603      	mov	r3, r0
 800785e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007860:	7afb      	ldrb	r3, [r7, #11]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08a      	sub	sp, #40	; 0x28
 800786e:	af02      	add	r7, sp, #8
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	3310      	adds	r3, #16
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	3304      	adds	r3, #4
 8007890:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	429a      	cmp	r2, r3
 800789c:	d901      	bls.n	80078a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e06b      	b.n	800797a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d902      	bls.n	80078be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	3303      	adds	r3, #3
 80078c2:	089b      	lsrs	r3, r3, #2
 80078c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078c6:	e02a      	b.n	800791e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d902      	bls.n	80078e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3303      	adds	r3, #3
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	68d9      	ldr	r1, [r3, #12]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4603      	mov	r3, r0
 8007900:	6978      	ldr	r0, [r7, #20]
 8007902:	f004 f8bd 	bl	800ba80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	695a      	ldr	r2, [r3, #20]
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	441a      	add	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	429a      	cmp	r2, r3
 8007932:	d809      	bhi.n	8007948 <PCD_WriteEmptyTxFifo+0xde>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800793c:	429a      	cmp	r2, r3
 800793e:	d203      	bcs.n	8007948 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1bf      	bne.n	80078c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	429a      	cmp	r2, r3
 8007952:	d811      	bhi.n	8007978 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	2201      	movs	r2, #1
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	43db      	mvns	r3, r3
 800796e:	6939      	ldr	r1, [r7, #16]
 8007970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007974:	4013      	ands	r3, r2
 8007976:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	333c      	adds	r3, #60	; 0x3c
 800799c:	3304      	adds	r3, #4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	799b      	ldrb	r3, [r3, #6]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d17b      	bne.n	8007ab2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d015      	beq.n	80079f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	4a61      	ldr	r2, [pc, #388]	; (8007b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	f240 80b9 	bls.w	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80b3 	beq.w	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	461a      	mov	r2, r3
 80079e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ec:	6093      	str	r3, [r2, #8]
 80079ee:	e0a7      	b.n	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	461a      	mov	r2, r3
 8007a08:	2320      	movs	r3, #32
 8007a0a:	6093      	str	r3, [r2, #8]
 8007a0c:	e098      	b.n	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 8093 	bne.w	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4a4b      	ldr	r2, [pc, #300]	; (8007b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d90f      	bls.n	8007a42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3e:	6093      	str	r3, [r2, #8]
 8007a40:	e07e      	b.n	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	3304      	adds	r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a1a      	ldr	r2, [r3, #32]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	0159      	lsls	r1, r3, #5
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	440b      	add	r3, r1
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d114      	bne.n	8007aa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2101      	movs	r1, #1
 8007a90:	f004 fa8c 	bl	800bfac <USB_EP0_OutStart>
 8007a94:	e006      	b.n	8007aa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	441a      	add	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f00a f8aa 	bl	8011c04 <HAL_PCD_DataOutStageCallback>
 8007ab0:	e046      	b.n	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4a26      	ldr	r2, [pc, #152]	; (8007b50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d124      	bne.n	8007b04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad6:	6093      	str	r3, [r2, #8]
 8007ad8:	e032      	b.n	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af0:	461a      	mov	r2, r3
 8007af2:	2320      	movs	r3, #32
 8007af4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f00a f881 	bl	8011c04 <HAL_PCD_DataOutStageCallback>
 8007b02:	e01d      	b.n	8007b40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d114      	bne.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2100      	movs	r1, #0
 8007b30:	f004 fa3c 	bl	800bfac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f00a f862 	bl	8011c04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	4f54300a 	.word	0x4f54300a
 8007b50:	4f54310a 	.word	0x4f54310a

08007b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	333c      	adds	r3, #60	; 0x3c
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d90e      	bls.n	8007ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f00a f819 	bl	8011be0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d90c      	bls.n	8007bd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	799b      	ldrb	r3, [r3, #6]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d108      	bne.n	8007bd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2101      	movs	r1, #1
 8007bcc:	f004 f9ee 	bl	800bfac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	4f54300a 	.word	0x4f54300a

08007be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
 8007bec:	4613      	mov	r3, r2
 8007bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d107      	bne.n	8007c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007bfe:	883b      	ldrh	r3, [r7, #0]
 8007c00:	0419      	lsls	r1, r3, #16
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c0c:	e028      	b.n	8007c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
 8007c20:	e00d      	b.n	8007c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	3340      	adds	r3, #64	; 0x40
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	0c1b      	lsrs	r3, r3, #16
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	7bfa      	ldrb	r2, [r7, #15]
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d3ec      	bcc.n	8007c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c48:	883b      	ldrh	r3, [r7, #0]
 8007c4a:	0418      	lsls	r0, r3, #16
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	4302      	orrs	r2, r0
 8007c58:	3340      	adds	r3, #64	; 0x40
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	887a      	ldrh	r2, [r7, #2]
 8007c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e267      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d075      	beq.n	8007db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cc6:	4b88      	ldr	r3, [pc, #544]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d00c      	beq.n	8007cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cd2:	4b85      	ldr	r3, [pc, #532]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d112      	bne.n	8007d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cde:	4b82      	ldr	r3, [pc, #520]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cea:	d10b      	bne.n	8007d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cec:	4b7e      	ldr	r3, [pc, #504]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d05b      	beq.n	8007db0 <HAL_RCC_OscConfig+0x108>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d157      	bne.n	8007db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e242      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d0c:	d106      	bne.n	8007d1c <HAL_RCC_OscConfig+0x74>
 8007d0e:	4b76      	ldr	r3, [pc, #472]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a75      	ldr	r2, [pc, #468]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e01d      	b.n	8007d58 <HAL_RCC_OscConfig+0xb0>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCC_OscConfig+0x98>
 8007d26:	4b70      	ldr	r3, [pc, #448]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a6f      	ldr	r2, [pc, #444]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4b6d      	ldr	r3, [pc, #436]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a6c      	ldr	r2, [pc, #432]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e00b      	b.n	8007d58 <HAL_RCC_OscConfig+0xb0>
 8007d40:	4b69      	ldr	r3, [pc, #420]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a68      	ldr	r2, [pc, #416]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b66      	ldr	r3, [pc, #408]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a65      	ldr	r2, [pc, #404]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d013      	beq.n	8007d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d60:	f7fd fa46 	bl	80051f0 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d68:	f7fd fa42 	bl	80051f0 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b64      	cmp	r3, #100	; 0x64
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e207      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7a:	4b5b      	ldr	r3, [pc, #364]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0xc0>
 8007d86:	e014      	b.n	8007db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fd fa32 	bl	80051f0 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d90:	f7fd fa2e 	bl	80051f0 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b64      	cmp	r3, #100	; 0x64
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e1f3      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da2:	4b51      	ldr	r3, [pc, #324]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <HAL_RCC_OscConfig+0xe8>
 8007dae:	e000      	b.n	8007db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d063      	beq.n	8007e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dbe:	4b4a      	ldr	r3, [pc, #296]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dca:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d11c      	bne.n	8007e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dd6:	4b44      	ldr	r3, [pc, #272]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d116      	bne.n	8007e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de2:	4b41      	ldr	r3, [pc, #260]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_RCC_OscConfig+0x152>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d001      	beq.n	8007dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e1c7      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dfa:	4b3b      	ldr	r3, [pc, #236]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4937      	ldr	r1, [pc, #220]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e0e:	e03a      	b.n	8007e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d020      	beq.n	8007e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e18:	4b34      	ldr	r3, [pc, #208]	; (8007eec <HAL_RCC_OscConfig+0x244>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1e:	f7fd f9e7 	bl	80051f0 <HAL_GetTick>
 8007e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e24:	e008      	b.n	8007e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e26:	f7fd f9e3 	bl	80051f0 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e1a8      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e38:	4b2b      	ldr	r3, [pc, #172]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0f0      	beq.n	8007e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e44:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4925      	ldr	r1, [pc, #148]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	e015      	b.n	8007e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e5a:	4b24      	ldr	r3, [pc, #144]	; (8007eec <HAL_RCC_OscConfig+0x244>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fd f9c6 	bl	80051f0 <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e68:	f7fd f9c2 	bl	80051f0 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e187      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f0      	bne.n	8007e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d036      	beq.n	8007f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <HAL_RCC_OscConfig+0x248>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea0:	f7fd f9a6 	bl	80051f0 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea8:	f7fd f9a2 	bl	80051f0 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e167      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eba:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <HAL_RCC_OscConfig+0x240>)
 8007ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x200>
 8007ec6:	e01b      	b.n	8007f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec8:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <HAL_RCC_OscConfig+0x248>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ece:	f7fd f98f 	bl	80051f0 <HAL_GetTick>
 8007ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed4:	e00e      	b.n	8007ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed6:	f7fd f98b 	bl	80051f0 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d907      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e150      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	42470000 	.word	0x42470000
 8007ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ef4:	4b88      	ldr	r3, [pc, #544]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1ea      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8097 	beq.w	800803c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f12:	4b81      	ldr	r3, [pc, #516]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	4b7d      	ldr	r3, [pc, #500]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	4a7c      	ldr	r2, [pc, #496]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f2e:	4b7a      	ldr	r3, [pc, #488]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3e:	4b77      	ldr	r3, [pc, #476]	; (800811c <HAL_RCC_OscConfig+0x474>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d118      	bne.n	8007f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f4a:	4b74      	ldr	r3, [pc, #464]	; (800811c <HAL_RCC_OscConfig+0x474>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a73      	ldr	r2, [pc, #460]	; (800811c <HAL_RCC_OscConfig+0x474>)
 8007f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f56:	f7fd f94b 	bl	80051f0 <HAL_GetTick>
 8007f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5c:	e008      	b.n	8007f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f5e:	f7fd f947 	bl	80051f0 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d901      	bls.n	8007f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e10c      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f70:	4b6a      	ldr	r3, [pc, #424]	; (800811c <HAL_RCC_OscConfig+0x474>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0f0      	beq.n	8007f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d106      	bne.n	8007f92 <HAL_RCC_OscConfig+0x2ea>
 8007f84:	4b64      	ldr	r3, [pc, #400]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f88:	4a63      	ldr	r2, [pc, #396]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f90:	e01c      	b.n	8007fcc <HAL_RCC_OscConfig+0x324>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d10c      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x30c>
 8007f9a:	4b5f      	ldr	r3, [pc, #380]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9e:	4a5e      	ldr	r2, [pc, #376]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fa0:	f043 0304 	orr.w	r3, r3, #4
 8007fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa6:	4b5c      	ldr	r3, [pc, #368]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	4a5b      	ldr	r2, [pc, #364]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb2:	e00b      	b.n	8007fcc <HAL_RCC_OscConfig+0x324>
 8007fb4:	4b58      	ldr	r3, [pc, #352]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb8:	4a57      	ldr	r2, [pc, #348]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc0:	4b55      	ldr	r3, [pc, #340]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	4a54      	ldr	r2, [pc, #336]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007fc6:	f023 0304 	bic.w	r3, r3, #4
 8007fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d015      	beq.n	8008000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd4:	f7fd f90c 	bl	80051f0 <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fdc:	f7fd f908 	bl	80051f0 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e0cb      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff2:	4b49      	ldr	r3, [pc, #292]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0ee      	beq.n	8007fdc <HAL_RCC_OscConfig+0x334>
 8007ffe:	e014      	b.n	800802a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008000:	f7fd f8f6 	bl	80051f0 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008006:	e00a      	b.n	800801e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008008:	f7fd f8f2 	bl	80051f0 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	f241 3288 	movw	r2, #5000	; 0x1388
 8008016:	4293      	cmp	r3, r2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e0b5      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800801e:	4b3e      	ldr	r3, [pc, #248]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1ee      	bne.n	8008008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d105      	bne.n	800803c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	4a38      	ldr	r2, [pc, #224]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8008036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800803a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80a1 	beq.w	8008188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008046:	4b34      	ldr	r3, [pc, #208]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 030c 	and.w	r3, r3, #12
 800804e:	2b08      	cmp	r3, #8
 8008050:	d05c      	beq.n	800810c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b02      	cmp	r3, #2
 8008058:	d141      	bne.n	80080de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800805a:	4b31      	ldr	r3, [pc, #196]	; (8008120 <HAL_RCC_OscConfig+0x478>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008060:	f7fd f8c6 	bl	80051f0 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008068:	f7fd f8c2 	bl	80051f0 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e087      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807a:	4b27      	ldr	r3, [pc, #156]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f0      	bne.n	8008068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	69da      	ldr	r2, [r3, #28]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	019b      	lsls	r3, r3, #6
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	3b01      	subs	r3, #1
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	491b      	ldr	r1, [pc, #108]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b0:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <HAL_RCC_OscConfig+0x478>)
 80080b2:	2201      	movs	r2, #1
 80080b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b6:	f7fd f89b 	bl	80051f0 <HAL_GetTick>
 80080ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080be:	f7fd f897 	bl	80051f0 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e05c      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d0:	4b11      	ldr	r3, [pc, #68]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0f0      	beq.n	80080be <HAL_RCC_OscConfig+0x416>
 80080dc:	e054      	b.n	8008188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080de:	4b10      	ldr	r3, [pc, #64]	; (8008120 <HAL_RCC_OscConfig+0x478>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e4:	f7fd f884 	bl	80051f0 <HAL_GetTick>
 80080e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ea:	e008      	b.n	80080fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ec:	f7fd f880 	bl	80051f0 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e045      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080fe:	4b06      	ldr	r3, [pc, #24]	; (8008118 <HAL_RCC_OscConfig+0x470>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f0      	bne.n	80080ec <HAL_RCC_OscConfig+0x444>
 800810a:	e03d      	b.n	8008188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d107      	bne.n	8008124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e038      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
 8008118:	40023800 	.word	0x40023800
 800811c:	40007000 	.word	0x40007000
 8008120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008124:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <HAL_RCC_OscConfig+0x4ec>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d028      	beq.n	8008184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800813c:	429a      	cmp	r2, r3
 800813e:	d121      	bne.n	8008184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814a:	429a      	cmp	r2, r3
 800814c:	d11a      	bne.n	8008184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008154:	4013      	ands	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800815a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800815c:	4293      	cmp	r3, r2
 800815e:	d111      	bne.n	8008184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	085b      	lsrs	r3, r3, #1
 800816c:	3b01      	subs	r3, #1
 800816e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008170:	429a      	cmp	r2, r3
 8008172:	d107      	bne.n	8008184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008180:	429a      	cmp	r2, r3
 8008182:	d001      	beq.n	8008188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e000      	b.n	800818a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40023800 	.word	0x40023800

08008198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0cc      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081ac:	4b68      	ldr	r3, [pc, #416]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d90c      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ba:	4b65      	ldr	r3, [pc, #404]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c2:	4b63      	ldr	r3, [pc, #396]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d001      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0b8      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d020      	beq.n	8008222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081ec:	4b59      	ldr	r3, [pc, #356]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4a58      	ldr	r2, [pc, #352]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008204:	4b53      	ldr	r3, [pc, #332]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	4a52      	ldr	r2, [pc, #328]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800820a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800820e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008210:	4b50      	ldr	r3, [pc, #320]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	494d      	ldr	r1, [pc, #308]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800821e:	4313      	orrs	r3, r2
 8008220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d044      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d107      	bne.n	8008246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008236:	4b47      	ldr	r3, [pc, #284]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d119      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e07f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d003      	beq.n	8008256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008252:	2b03      	cmp	r3, #3
 8008254:	d107      	bne.n	8008266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008256:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e06f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008266:	4b3b      	ldr	r3, [pc, #236]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e067      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008276:	4b37      	ldr	r3, [pc, #220]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 0203 	bic.w	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4934      	ldr	r1, [pc, #208]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008288:	f7fc ffb2 	bl	80051f0 <HAL_GetTick>
 800828c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828e:	e00a      	b.n	80082a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008290:	f7fc ffae 	bl	80051f0 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f241 3288 	movw	r2, #5000	; 0x1388
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e04f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	4b2b      	ldr	r3, [pc, #172]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 020c 	and.w	r2, r3, #12
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d1eb      	bne.n	8008290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d20c      	bcs.n	80082e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b22      	ldr	r3, [pc, #136]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d001      	beq.n	80082e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e032      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d008      	beq.n	80082fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082ec:	4b19      	ldr	r3, [pc, #100]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4916      	ldr	r1, [pc, #88]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800830a:	4b12      	ldr	r3, [pc, #72]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	490e      	ldr	r1, [pc, #56]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	4313      	orrs	r3, r2
 800831c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800831e:	f000 f821 	bl	8008364 <HAL_RCC_GetSysClockFreq>
 8008322:	4602      	mov	r2, r0
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	490a      	ldr	r1, [pc, #40]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 8008330:	5ccb      	ldrb	r3, [r1, r3]
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCC_ClockConfig+0x1c8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7fc ff12 	bl	8005168 <HAL_InitTick>

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40023c00 	.word	0x40023c00
 8008354:	40023800 	.word	0x40023800
 8008358:	080167fc 	.word	0x080167fc
 800835c:	200002e4 	.word	0x200002e4
 8008360:	200002e8 	.word	0x200002e8

08008364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008368:	b094      	sub	sp, #80	; 0x50
 800836a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	647b      	str	r3, [r7, #68]	; 0x44
 8008370:	2300      	movs	r3, #0
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008374:	2300      	movs	r3, #0
 8008376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800837c:	4b79      	ldr	r3, [pc, #484]	; (8008564 <HAL_RCC_GetSysClockFreq+0x200>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f003 030c 	and.w	r3, r3, #12
 8008384:	2b08      	cmp	r3, #8
 8008386:	d00d      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008388:	2b08      	cmp	r3, #8
 800838a:	f200 80e1 	bhi.w	8008550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_RCC_GetSysClockFreq+0x34>
 8008392:	2b04      	cmp	r3, #4
 8008394:	d003      	beq.n	800839e <HAL_RCC_GetSysClockFreq+0x3a>
 8008396:	e0db      	b.n	8008550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008398:	4b73      	ldr	r3, [pc, #460]	; (8008568 <HAL_RCC_GetSysClockFreq+0x204>)
 800839a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800839c:	e0db      	b.n	8008556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800839e:	4b73      	ldr	r3, [pc, #460]	; (800856c <HAL_RCC_GetSysClockFreq+0x208>)
 80083a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083a2:	e0d8      	b.n	8008556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083a4:	4b6f      	ldr	r3, [pc, #444]	; (8008564 <HAL_RCC_GetSysClockFreq+0x200>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083ae:	4b6d      	ldr	r3, [pc, #436]	; (8008564 <HAL_RCC_GetSysClockFreq+0x200>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d063      	beq.n	8008482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ba:	4b6a      	ldr	r3, [pc, #424]	; (8008564 <HAL_RCC_GetSysClockFreq+0x200>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	099b      	lsrs	r3, r3, #6
 80083c0:	2200      	movs	r2, #0
 80083c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80083c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083cc:	633b      	str	r3, [r7, #48]	; 0x30
 80083ce:	2300      	movs	r3, #0
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
 80083d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083d6:	4622      	mov	r2, r4
 80083d8:	462b      	mov	r3, r5
 80083da:	f04f 0000 	mov.w	r0, #0
 80083de:	f04f 0100 	mov.w	r1, #0
 80083e2:	0159      	lsls	r1, r3, #5
 80083e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083e8:	0150      	lsls	r0, r2, #5
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4621      	mov	r1, r4
 80083f0:	1a51      	subs	r1, r2, r1
 80083f2:	6139      	str	r1, [r7, #16]
 80083f4:	4629      	mov	r1, r5
 80083f6:	eb63 0301 	sbc.w	r3, r3, r1
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008408:	4659      	mov	r1, fp
 800840a:	018b      	lsls	r3, r1, #6
 800840c:	4651      	mov	r1, sl
 800840e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008412:	4651      	mov	r1, sl
 8008414:	018a      	lsls	r2, r1, #6
 8008416:	4651      	mov	r1, sl
 8008418:	ebb2 0801 	subs.w	r8, r2, r1
 800841c:	4659      	mov	r1, fp
 800841e:	eb63 0901 	sbc.w	r9, r3, r1
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800842e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008436:	4690      	mov	r8, r2
 8008438:	4699      	mov	r9, r3
 800843a:	4623      	mov	r3, r4
 800843c:	eb18 0303 	adds.w	r3, r8, r3
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	462b      	mov	r3, r5
 8008444:	eb49 0303 	adc.w	r3, r9, r3
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008456:	4629      	mov	r1, r5
 8008458:	024b      	lsls	r3, r1, #9
 800845a:	4621      	mov	r1, r4
 800845c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008460:	4621      	mov	r1, r4
 8008462:	024a      	lsls	r2, r1, #9
 8008464:	4610      	mov	r0, r2
 8008466:	4619      	mov	r1, r3
 8008468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846a:	2200      	movs	r2, #0
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
 800846e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008474:	f7f8 fbf8 	bl	8000c68 <__aeabi_uldivmod>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4613      	mov	r3, r2
 800847e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008480:	e058      	b.n	8008534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008482:	4b38      	ldr	r3, [pc, #224]	; (8008564 <HAL_RCC_GetSysClockFreq+0x200>)
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	2200      	movs	r2, #0
 800848a:	4618      	mov	r0, r3
 800848c:	4611      	mov	r1, r2
 800848e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008492:	623b      	str	r3, [r7, #32]
 8008494:	2300      	movs	r3, #0
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
 8008498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	f04f 0000 	mov.w	r0, #0
 80084a4:	f04f 0100 	mov.w	r1, #0
 80084a8:	0159      	lsls	r1, r3, #5
 80084aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084ae:	0150      	lsls	r0, r2, #5
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4641      	mov	r1, r8
 80084b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80084ba:	4649      	mov	r1, r9
 80084bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084d4:	ebb2 040a 	subs.w	r4, r2, sl
 80084d8:	eb63 050b 	sbc.w	r5, r3, fp
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	00eb      	lsls	r3, r5, #3
 80084e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ea:	00e2      	lsls	r2, r4, #3
 80084ec:	4614      	mov	r4, r2
 80084ee:	461d      	mov	r5, r3
 80084f0:	4643      	mov	r3, r8
 80084f2:	18e3      	adds	r3, r4, r3
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	464b      	mov	r3, r9
 80084f8:	eb45 0303 	adc.w	r3, r5, r3
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800850a:	4629      	mov	r1, r5
 800850c:	028b      	lsls	r3, r1, #10
 800850e:	4621      	mov	r1, r4
 8008510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008514:	4621      	mov	r1, r4
 8008516:	028a      	lsls	r2, r1, #10
 8008518:	4610      	mov	r0, r2
 800851a:	4619      	mov	r1, r3
 800851c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851e:	2200      	movs	r2, #0
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	61fa      	str	r2, [r7, #28]
 8008524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008528:	f7f8 fb9e 	bl	8000c68 <__aeabi_uldivmod>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4613      	mov	r3, r2
 8008532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <HAL_RCC_GetSysClockFreq+0x200>)
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	0c1b      	lsrs	r3, r3, #16
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	3301      	adds	r3, #1
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008548:	fbb2 f3f3 	udiv	r3, r2, r3
 800854c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800854e:	e002      	b.n	8008556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <HAL_RCC_GetSysClockFreq+0x204>)
 8008552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008558:	4618      	mov	r0, r3
 800855a:	3750      	adds	r7, #80	; 0x50
 800855c:	46bd      	mov	sp, r7
 800855e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008562:	bf00      	nop
 8008564:	40023800 	.word	0x40023800
 8008568:	00f42400 	.word	0x00f42400
 800856c:	007a1200 	.word	0x007a1200

08008570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008574:	4b03      	ldr	r3, [pc, #12]	; (8008584 <HAL_RCC_GetHCLKFreq+0x14>)
 8008576:	681b      	ldr	r3, [r3, #0]
}
 8008578:	4618      	mov	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	200002e4 	.word	0x200002e4

08008588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800858c:	f7ff fff0 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 8008590:	4602      	mov	r2, r0
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	0a9b      	lsrs	r3, r3, #10
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	4903      	ldr	r1, [pc, #12]	; (80085ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800859e:	5ccb      	ldrb	r3, [r1, r3]
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40023800 	.word	0x40023800
 80085ac:	0801680c 	.word	0x0801680c

080085b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085b4:	f7ff ffdc 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	0b5b      	lsrs	r3, r3, #13
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	4903      	ldr	r1, [pc, #12]	; (80085d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085c6:	5ccb      	ldrb	r3, [r1, r3]
 80085c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40023800 	.word	0x40023800
 80085d4:	0801680c 	.word	0x0801680c

080085d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e041      	b.n	800866e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fc fa7c 	bl	8004afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f000 fd0a 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b01      	cmp	r3, #1
 800868a:	d001      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e04e      	b.n	800872e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a23      	ldr	r2, [pc, #140]	; (800873c <HAL_TIM_Base_Start_IT+0xc4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d022      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ba:	d01d      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <HAL_TIM_Base_Start_IT+0xc8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d018      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <HAL_TIM_Base_Start_IT+0xcc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d013      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1c      	ldr	r2, [pc, #112]	; (8008748 <HAL_TIM_Base_Start_IT+0xd0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00e      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1b      	ldr	r2, [pc, #108]	; (800874c <HAL_TIM_Base_Start_IT+0xd4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a19      	ldr	r2, [pc, #100]	; (8008750 <HAL_TIM_Base_Start_IT+0xd8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a18      	ldr	r2, [pc, #96]	; (8008754 <HAL_TIM_Base_Start_IT+0xdc>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d111      	bne.n	800871c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b06      	cmp	r3, #6
 8008708:	d010      	beq.n	800872c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871a:	e007      	b.n	800872c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40010000 	.word	0x40010000
 8008740:	40000400 	.word	0x40000400
 8008744:	40000800 	.word	0x40000800
 8008748:	40000c00 	.word	0x40000c00
 800874c:	40010400 	.word	0x40010400
 8008750:	40014000 	.word	0x40014000
 8008754:	40001800 	.word	0x40001800

08008758 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	f241 1311 	movw	r3, #4369	; 0x1111
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10f      	bne.n	80087a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6a1a      	ldr	r2, [r3, #32]
 8008786:	f240 4344 	movw	r3, #1092	; 0x444
 800878a:	4013      	ands	r3, r2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d107      	bne.n	80087a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0201 	bic.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e041      	b.n	800884c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f839 	bl	8008854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2202      	movs	r2, #2
 80087e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f000 fc1b 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <HAL_TIM_PWM_Start+0x24>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e022      	b.n	80088d2 <HAL_TIM_PWM_Start+0x6a>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b04      	cmp	r3, #4
 8008890:	d109      	bne.n	80088a6 <HAL_TIM_PWM_Start+0x3e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e015      	b.n	80088d2 <HAL_TIM_PWM_Start+0x6a>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d109      	bne.n	80088c0 <HAL_TIM_PWM_Start+0x58>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	bf14      	ite	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	2300      	moveq	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e008      	b.n	80088d2 <HAL_TIM_PWM_Start+0x6a>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e07c      	b.n	80089d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <HAL_TIM_PWM_Start+0x82>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088e8:	e013      	b.n	8008912 <HAL_TIM_PWM_Start+0xaa>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d104      	bne.n	80088fa <HAL_TIM_PWM_Start+0x92>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f8:	e00b      	b.n	8008912 <HAL_TIM_PWM_Start+0xaa>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d104      	bne.n	800890a <HAL_TIM_PWM_Start+0xa2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008908:	e003      	b.n	8008912 <HAL_TIM_PWM_Start+0xaa>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fe7e 	bl	800961c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a2d      	ldr	r2, [pc, #180]	; (80089dc <HAL_TIM_PWM_Start+0x174>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d004      	beq.n	8008934 <HAL_TIM_PWM_Start+0xcc>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a2c      	ldr	r2, [pc, #176]	; (80089e0 <HAL_TIM_PWM_Start+0x178>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d101      	bne.n	8008938 <HAL_TIM_PWM_Start+0xd0>
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <HAL_TIM_PWM_Start+0xd2>
 8008938:	2300      	movs	r3, #0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800894c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a22      	ldr	r2, [pc, #136]	; (80089dc <HAL_TIM_PWM_Start+0x174>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d022      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008960:	d01d      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <HAL_TIM_PWM_Start+0x17c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d018      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <HAL_TIM_PWM_Start+0x180>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d013      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <HAL_TIM_PWM_Start+0x184>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00e      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a16      	ldr	r2, [pc, #88]	; (80089e0 <HAL_TIM_PWM_Start+0x178>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d009      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a18      	ldr	r2, [pc, #96]	; (80089f0 <HAL_TIM_PWM_Start+0x188>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d004      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a16      	ldr	r2, [pc, #88]	; (80089f4 <HAL_TIM_PWM_Start+0x18c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d111      	bne.n	80089c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b06      	cmp	r3, #6
 80089ae:	d010      	beq.n	80089d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c0:	e007      	b.n	80089d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40010400 	.word	0x40010400
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40001800 	.word	0x40001800

080089f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fe06 	bl	800961c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a2e      	ldr	r2, [pc, #184]	; (8008ad0 <HAL_TIM_PWM_Stop+0xd8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d004      	beq.n	8008a24 <HAL_TIM_PWM_Stop+0x2c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a2d      	ldr	r2, [pc, #180]	; (8008ad4 <HAL_TIM_PWM_Stop+0xdc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d101      	bne.n	8008a28 <HAL_TIM_PWM_Stop+0x30>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <HAL_TIM_PWM_Stop+0x32>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d017      	beq.n	8008a5e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10f      	bne.n	8008a5e <HAL_TIM_PWM_Stop+0x66>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	f240 4344 	movw	r3, #1092	; 0x444
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <HAL_TIM_PWM_Stop+0x66>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6a1a      	ldr	r2, [r3, #32]
 8008a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10f      	bne.n	8008a8e <HAL_TIM_PWM_Stop+0x96>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6a1a      	ldr	r2, [r3, #32]
 8008a74:	f240 4344 	movw	r3, #1092	; 0x444
 8008a78:	4013      	ands	r3, r2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <HAL_TIM_PWM_Stop+0x96>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <HAL_TIM_PWM_Stop+0xa6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a9c:	e013      	b.n	8008ac6 <HAL_TIM_PWM_Stop+0xce>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d104      	bne.n	8008aae <HAL_TIM_PWM_Stop+0xb6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aac:	e00b      	b.n	8008ac6 <HAL_TIM_PWM_Stop+0xce>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d104      	bne.n	8008abe <HAL_TIM_PWM_Stop+0xc6>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008abc:	e003      	b.n	8008ac6 <HAL_TIM_PWM_Stop+0xce>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40010400 	.word	0x40010400

08008ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d020      	beq.n	8008b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01b      	beq.n	8008b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0202 	mvn.w	r2, #2
 8008b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fa65 	bl	8008ff2 <HAL_TIM_IC_CaptureCallback>
 8008b28:	e005      	b.n	8008b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa57 	bl	8008fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa68 	bl	8009006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01b      	beq.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0204 	mvn.w	r2, #4
 8008b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fa3f 	bl	8008ff2 <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa31 	bl	8008fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa42 	bl	8009006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 0308 	and.w	r3, r3, #8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d020      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01b      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0208 	mvn.w	r2, #8
 8008ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2204      	movs	r2, #4
 8008baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa19 	bl	8008ff2 <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa0b 	bl	8008fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa1c 	bl	8009006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d020      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0210 	mvn.w	r2, #16
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9f3 	bl	8008ff2 <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9e5 	bl	8008fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f9f6 	bl	8009006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00c      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0201 	mvn.w	r2, #1
 8008c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f9c3 	bl	8008fca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00c      	beq.n	8008c68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fd86 	bl	8009774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00c      	beq.n	8008c8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f9c7 	bl	800901a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f003 0320 	and.w	r3, r3, #32
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00c      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f06f 0220 	mvn.w	r2, #32
 8008ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fd58 	bl	8009760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d101      	bne.n	8008cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e0ae      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b0c      	cmp	r3, #12
 8008ce2:	f200 809f 	bhi.w	8008e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ce6:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008d21 	.word	0x08008d21
 8008cf0:	08008e25 	.word	0x08008e25
 8008cf4:	08008e25 	.word	0x08008e25
 8008cf8:	08008e25 	.word	0x08008e25
 8008cfc:	08008d61 	.word	0x08008d61
 8008d00:	08008e25 	.word	0x08008e25
 8008d04:	08008e25 	.word	0x08008e25
 8008d08:	08008e25 	.word	0x08008e25
 8008d0c:	08008da3 	.word	0x08008da3
 8008d10:	08008e25 	.word	0x08008e25
 8008d14:	08008e25 	.word	0x08008e25
 8008d18:	08008e25 	.word	0x08008e25
 8008d1c:	08008de3 	.word	0x08008de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fa2e 	bl	8009188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0208 	orr.w	r2, r2, #8
 8008d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699a      	ldr	r2, [r3, #24]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0204 	bic.w	r2, r2, #4
 8008d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6999      	ldr	r1, [r3, #24]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	691a      	ldr	r2, [r3, #16]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	619a      	str	r2, [r3, #24]
      break;
 8008d5e:	e064      	b.n	8008e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fa7e 	bl	8009268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	699a      	ldr	r2, [r3, #24]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6999      	ldr	r1, [r3, #24]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	021a      	lsls	r2, r3, #8
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	619a      	str	r2, [r3, #24]
      break;
 8008da0:	e043      	b.n	8008e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fad3 	bl	8009354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0208 	orr.w	r2, r2, #8
 8008dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69da      	ldr	r2, [r3, #28]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0204 	bic.w	r2, r2, #4
 8008dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69d9      	ldr	r1, [r3, #28]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	61da      	str	r2, [r3, #28]
      break;
 8008de0:	e023      	b.n	8008e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fb27 	bl	800943c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69da      	ldr	r2, [r3, #28]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69da      	ldr	r2, [r3, #28]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69d9      	ldr	r1, [r3, #28]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	021a      	lsls	r2, r3, #8
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	61da      	str	r2, [r3, #28]
      break;
 8008e22:	e002      	b.n	8008e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	75fb      	strb	r3, [r7, #23]
      break;
 8008e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e0b4      	b.n	8008fc2 <HAL_TIM_ConfigClockSource+0x186>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e90:	d03e      	beq.n	8008f10 <HAL_TIM_ConfigClockSource+0xd4>
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e96:	f200 8087 	bhi.w	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	f000 8086 	beq.w	8008fae <HAL_TIM_ConfigClockSource+0x172>
 8008ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea6:	d87f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ea8:	2b70      	cmp	r3, #112	; 0x70
 8008eaa:	d01a      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8008eac:	2b70      	cmp	r3, #112	; 0x70
 8008eae:	d87b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008eb0:	2b60      	cmp	r3, #96	; 0x60
 8008eb2:	d050      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x11a>
 8008eb4:	2b60      	cmp	r3, #96	; 0x60
 8008eb6:	d877      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008eb8:	2b50      	cmp	r3, #80	; 0x50
 8008eba:	d03c      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0xfa>
 8008ebc:	2b50      	cmp	r3, #80	; 0x50
 8008ebe:	d873      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec0:	2b40      	cmp	r3, #64	; 0x40
 8008ec2:	d058      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x13a>
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d86f      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec8:	2b30      	cmp	r3, #48	; 0x30
 8008eca:	d064      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ecc:	2b30      	cmp	r3, #48	; 0x30
 8008ece:	d86b      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d060      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d867      	bhi.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d05c      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x15a>
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d05a      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ee0:	e062      	b.n	8008fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ef2:	f000 fb73 	bl	80095dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	609a      	str	r2, [r3, #8]
      break;
 8008f0e:	e04f      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f20:	f000 fb5c 	bl	80095dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f32:	609a      	str	r2, [r3, #8]
      break;
 8008f34:	e03c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 fad0 	bl	80094e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2150      	movs	r1, #80	; 0x50
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fb29 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008f54:	e02c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f62:	461a      	mov	r2, r3
 8008f64:	f000 faef 	bl	8009546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2160      	movs	r1, #96	; 0x60
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fb19 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008f74:	e01c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f82:	461a      	mov	r2, r3
 8008f84:	f000 fab0 	bl	80094e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2140      	movs	r1, #64	; 0x40
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fb09 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008f94:	e00c      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f000 fb00 	bl	80095a6 <TIM_ITRx_SetConfig>
      break;
 8008fa6:	e003      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	73fb      	strb	r3, [r7, #15]
      break;
 8008fac:	e000      	b.n	8008fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800900e:	bf00      	nop
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
	...

08009030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a46      	ldr	r2, [pc, #280]	; (800915c <TIM_Base_SetConfig+0x12c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d00f      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a43      	ldr	r2, [pc, #268]	; (8009160 <TIM_Base_SetConfig+0x130>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00b      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a42      	ldr	r2, [pc, #264]	; (8009164 <TIM_Base_SetConfig+0x134>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d007      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a41      	ldr	r2, [pc, #260]	; (8009168 <TIM_Base_SetConfig+0x138>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_Base_SetConfig+0x40>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a40      	ldr	r2, [pc, #256]	; (800916c <TIM_Base_SetConfig+0x13c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d108      	bne.n	8009082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a35      	ldr	r2, [pc, #212]	; (800915c <TIM_Base_SetConfig+0x12c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d02b      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009090:	d027      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a32      	ldr	r2, [pc, #200]	; (8009160 <TIM_Base_SetConfig+0x130>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d023      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a31      	ldr	r2, [pc, #196]	; (8009164 <TIM_Base_SetConfig+0x134>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d01f      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a30      	ldr	r2, [pc, #192]	; (8009168 <TIM_Base_SetConfig+0x138>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01b      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a2f      	ldr	r2, [pc, #188]	; (800916c <TIM_Base_SetConfig+0x13c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d017      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a2e      	ldr	r2, [pc, #184]	; (8009170 <TIM_Base_SetConfig+0x140>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d013      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2d      	ldr	r2, [pc, #180]	; (8009174 <TIM_Base_SetConfig+0x144>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00f      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a2c      	ldr	r2, [pc, #176]	; (8009178 <TIM_Base_SetConfig+0x148>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d00b      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a2b      	ldr	r2, [pc, #172]	; (800917c <TIM_Base_SetConfig+0x14c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d007      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a2a      	ldr	r2, [pc, #168]	; (8009180 <TIM_Base_SetConfig+0x150>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d003      	beq.n	80090e2 <TIM_Base_SetConfig+0xb2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a29      	ldr	r2, [pc, #164]	; (8009184 <TIM_Base_SetConfig+0x154>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d108      	bne.n	80090f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a10      	ldr	r2, [pc, #64]	; (800915c <TIM_Base_SetConfig+0x12c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_Base_SetConfig+0xf8>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a12      	ldr	r2, [pc, #72]	; (800916c <TIM_Base_SetConfig+0x13c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d103      	bne.n	8009130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	691a      	ldr	r2, [r3, #16]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b01      	cmp	r3, #1
 8009140:	d105      	bne.n	800914e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f023 0201 	bic.w	r2, r3, #1
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	611a      	str	r2, [r3, #16]
  }
}
 800914e:	bf00      	nop
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40010000 	.word	0x40010000
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40000c00 	.word	0x40000c00
 800916c:	40010400 	.word	0x40010400
 8009170:	40014000 	.word	0x40014000
 8009174:	40014400 	.word	0x40014400
 8009178:	40014800 	.word	0x40014800
 800917c:	40001800 	.word	0x40001800
 8009180:	40001c00 	.word	0x40001c00
 8009184:	40002000 	.word	0x40002000

08009188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f023 0201 	bic.w	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f023 0302 	bic.w	r3, r3, #2
 80091d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a20      	ldr	r2, [pc, #128]	; (8009260 <TIM_OC1_SetConfig+0xd8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d003      	beq.n	80091ec <TIM_OC1_SetConfig+0x64>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <TIM_OC1_SetConfig+0xdc>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d10c      	bne.n	8009206 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f023 0308 	bic.w	r3, r3, #8
 80091f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f023 0304 	bic.w	r3, r3, #4
 8009204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a15      	ldr	r2, [pc, #84]	; (8009260 <TIM_OC1_SetConfig+0xd8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <TIM_OC1_SetConfig+0x8e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a14      	ldr	r2, [pc, #80]	; (8009264 <TIM_OC1_SetConfig+0xdc>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d111      	bne.n	800923a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	4313      	orrs	r3, r2
 800922e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	621a      	str	r2, [r3, #32]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	40010000 	.word	0x40010000
 8009264:	40010400 	.word	0x40010400

08009268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	f023 0210 	bic.w	r2, r3, #16
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800929e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f023 0320 	bic.w	r3, r3, #32
 80092b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	4313      	orrs	r3, r2
 80092be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a22      	ldr	r2, [pc, #136]	; (800934c <TIM_OC2_SetConfig+0xe4>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d003      	beq.n	80092d0 <TIM_OC2_SetConfig+0x68>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a21      	ldr	r2, [pc, #132]	; (8009350 <TIM_OC2_SetConfig+0xe8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d10d      	bne.n	80092ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a17      	ldr	r2, [pc, #92]	; (800934c <TIM_OC2_SetConfig+0xe4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_OC2_SetConfig+0x94>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a16      	ldr	r2, [pc, #88]	; (8009350 <TIM_OC2_SetConfig+0xe8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d113      	bne.n	8009324 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800930a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40010000 	.word	0x40010000
 8009350:	40010400 	.word	0x40010400

08009354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800939c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a21      	ldr	r2, [pc, #132]	; (8009434 <TIM_OC3_SetConfig+0xe0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC3_SetConfig+0x66>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a20      	ldr	r2, [pc, #128]	; (8009438 <TIM_OC3_SetConfig+0xe4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d10d      	bne.n	80093d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a16      	ldr	r2, [pc, #88]	; (8009434 <TIM_OC3_SetConfig+0xe0>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d003      	beq.n	80093e6 <TIM_OC3_SetConfig+0x92>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a15      	ldr	r2, [pc, #84]	; (8009438 <TIM_OC3_SetConfig+0xe4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d113      	bne.n	800940e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	621a      	str	r2, [r3, #32]
}
 8009428:	bf00      	nop
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40010000 	.word	0x40010000
 8009438:	40010400 	.word	0x40010400

0800943c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	031b      	lsls	r3, r3, #12
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a12      	ldr	r2, [pc, #72]	; (80094e0 <TIM_OC4_SetConfig+0xa4>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_OC4_SetConfig+0x68>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a11      	ldr	r2, [pc, #68]	; (80094e4 <TIM_OC4_SetConfig+0xa8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d109      	bne.n	80094b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	019b      	lsls	r3, r3, #6
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40010400 	.word	0x40010400

080094e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	f023 0201 	bic.w	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	4313      	orrs	r3, r2
 800951c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f023 030a 	bic.w	r3, r3, #10
 8009524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	621a      	str	r2, [r3, #32]
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009546:	b480      	push	{r7}
 8009548:	b087      	sub	sp, #28
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f023 0210 	bic.w	r2, r3, #16
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	031b      	lsls	r3, r3, #12
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	4313      	orrs	r3, r2
 800957a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	621a      	str	r2, [r3, #32]
}
 800959a:	bf00      	nop
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b085      	sub	sp, #20
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f043 0307 	orr.w	r3, r3, #7
 80095c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	021a      	lsls	r2, r3, #8
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	431a      	orrs	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	4313      	orrs	r3, r2
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	609a      	str	r2, [r3, #8]
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f003 031f 	and.w	r3, r3, #31
 800962e:	2201      	movs	r2, #1
 8009630:	fa02 f303 	lsl.w	r3, r2, r3
 8009634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6a1a      	ldr	r2, [r3, #32]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	43db      	mvns	r3, r3
 800963e:	401a      	ands	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a1a      	ldr	r2, [r3, #32]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f003 031f 	and.w	r3, r3, #31
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	431a      	orrs	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	621a      	str	r2, [r3, #32]
}
 800965a:	bf00      	nop
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
	...

08009668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800967c:	2302      	movs	r3, #2
 800967e:	e05a      	b.n	8009736 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a21      	ldr	r2, [pc, #132]	; (8009744 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d022      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096cc:	d01d      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a1d      	ldr	r2, [pc, #116]	; (8009748 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d018      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a1b      	ldr	r2, [pc, #108]	; (800974c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d013      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1a      	ldr	r2, [pc, #104]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d00e      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a18      	ldr	r2, [pc, #96]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d009      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a17      	ldr	r2, [pc, #92]	; (8009758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d004      	beq.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a15      	ldr	r2, [pc, #84]	; (800975c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d10c      	bne.n	8009724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4313      	orrs	r3, r2
 800971a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	40010000 	.word	0x40010000
 8009748:	40000400 	.word	0x40000400
 800974c:	40000800 	.word	0x40000800
 8009750:	40000c00 	.word	0x40000c00
 8009754:	40010400 	.word	0x40010400
 8009758:	40014000 	.word	0x40014000
 800975c:	40001800 	.word	0x40001800

08009760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e042      	b.n	8009820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fb fa1c 	bl	8004bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2224      	movs	r2, #36	; 0x24
 80097b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fc85 	bl	800a0dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	695a      	ldr	r2, [r3, #20]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b0ba      	sub	sp, #232	; 0xe8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800984e:	2300      	movs	r3, #0
 8009850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009854:	2300      	movs	r3, #0
 8009856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800985a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10f      	bne.n	800988e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800986e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <HAL_UART_IRQHandler+0x66>
 800987a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb69 	bl	8009f5e <UART_Receive_IT>
      return;
 800988c:	e25b      	b.n	8009d46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800988e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80de 	beq.w	8009a54 <HAL_UART_IRQHandler+0x22c>
 8009898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 80d1 	beq.w	8009a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00b      	beq.n	80098d6 <HAL_UART_IRQHandler+0xae>
 80098be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d005      	beq.n	80098d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ce:	f043 0201 	orr.w	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <HAL_UART_IRQHandler+0xd2>
 80098e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d005      	beq.n	80098fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f2:	f043 0202 	orr.w	r2, r3, #2
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <HAL_UART_IRQHandler+0xf6>
 8009906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009916:	f043 0204 	orr.w	r2, r3, #4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009922:	f003 0308 	and.w	r3, r3, #8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d011      	beq.n	800994e <HAL_UART_IRQHandler+0x126>
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d105      	bne.n	8009942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	f043 0208 	orr.w	r2, r3, #8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 81f2 	beq.w	8009d3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <HAL_UART_IRQHandler+0x14e>
 8009964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009968:	f003 0320 	and.w	r3, r3, #32
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 faf4 	bl	8009f5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009980:	2b40      	cmp	r3, #64	; 0x40
 8009982:	bf0c      	ite	eq
 8009984:	2301      	moveq	r3, #1
 8009986:	2300      	movne	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009992:	f003 0308 	and.w	r3, r3, #8
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <HAL_UART_IRQHandler+0x17a>
 800999a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d04f      	beq.n	8009a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f9fc 	bl	8009da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b2:	2b40      	cmp	r3, #64	; 0x40
 80099b4:	d141      	bne.n	8009a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3314      	adds	r3, #20
 80099bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3314      	adds	r3, #20
 80099de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1d9      	bne.n	80099b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d013      	beq.n	8009a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0e:	4a7e      	ldr	r2, [pc, #504]	; (8009c08 <HAL_UART_IRQHandler+0x3e0>)
 8009a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fc fab4 	bl	8005f84 <HAL_DMA_Abort_IT>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a30:	e00e      	b.n	8009a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f99e 	bl	8009d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a38:	e00a      	b.n	8009a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f99a 	bl	8009d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a40:	e006      	b.n	8009a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f996 	bl	8009d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009a4e:	e175      	b.n	8009d3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a50:	bf00      	nop
    return;
 8009a52:	e173      	b.n	8009d3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	f040 814f 	bne.w	8009cfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0310 	and.w	r3, r3, #16
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 8148 	beq.w	8009cfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a70:	f003 0310 	and.w	r3, r3, #16
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 8141 	beq.w	8009cfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60bb      	str	r3, [r7, #8]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60bb      	str	r3, [r7, #8]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	60bb      	str	r3, [r7, #8]
 8009a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	f040 80b6 	bne.w	8009c0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8145 	beq.w	8009d40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	f080 813e 	bcs.w	8009d40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad6:	f000 8088 	beq.w	8009bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	330c      	adds	r3, #12
 8009ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	330c      	adds	r3, #12
 8009b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1d9      	bne.n	8009ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3314      	adds	r3, #20
 8009b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b38:	f023 0301 	bic.w	r3, r3, #1
 8009b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3314      	adds	r3, #20
 8009b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e1      	bne.n	8009b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3314      	adds	r3, #20
 8009b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3314      	adds	r3, #20
 8009b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e3      	bne.n	8009b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	330c      	adds	r3, #12
 8009bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bba:	f023 0310 	bic.w	r3, r3, #16
 8009bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	330c      	adds	r3, #12
 8009bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e3      	bne.n	8009ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fc f95d 	bl	8005ea4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8c1 	bl	8009d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c06:	e09b      	b.n	8009d40 <HAL_UART_IRQHandler+0x518>
 8009c08:	08009e67 	.word	0x08009e67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 808e 	beq.w	8009d44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8089 	beq.w	8009d44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	330c      	adds	r3, #12
 8009c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	330c      	adds	r3, #12
 8009c52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c56:	647a      	str	r2, [r7, #68]	; 0x44
 8009c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e3      	bne.n	8009c32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3314      	adds	r3, #20
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	e853 3f00 	ldrex	r3, [r3]
 8009c78:	623b      	str	r3, [r7, #32]
   return(result);
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	f023 0301 	bic.w	r3, r3, #1
 8009c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3314      	adds	r3, #20
 8009c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e3      	bne.n	8009c6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	330c      	adds	r3, #12
 8009cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	e853 3f00 	ldrex	r3, [r3]
 8009cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f023 0310 	bic.w	r3, r3, #16
 8009cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	330c      	adds	r3, #12
 8009cd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009cd4:	61fa      	str	r2, [r7, #28]
 8009cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e3      	bne.n	8009cb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f847 	bl	8009d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cfa:	e023      	b.n	8009d44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <HAL_UART_IRQHandler+0x4f4>
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f8ba 	bl	8009e8e <UART_Transmit_IT>
    return;
 8009d1a:	e014      	b.n	8009d46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00e      	beq.n	8009d46 <HAL_UART_IRQHandler+0x51e>
 8009d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d008      	beq.n	8009d46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f8fa 	bl	8009f2e <UART_EndTransmit_IT>
    return;
 8009d3a:	e004      	b.n	8009d46 <HAL_UART_IRQHandler+0x51e>
    return;
 8009d3c:	bf00      	nop
 8009d3e:	e002      	b.n	8009d46 <HAL_UART_IRQHandler+0x51e>
      return;
 8009d40:	bf00      	nop
 8009d42:	e000      	b.n	8009d46 <HAL_UART_IRQHandler+0x51e>
      return;
 8009d44:	bf00      	nop
  }
}
 8009d46:	37e8      	adds	r7, #232	; 0xe8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b095      	sub	sp, #84	; 0x54
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	330c      	adds	r3, #12
 8009dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dc8:	643a      	str	r2, [r7, #64]	; 0x40
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e5      	bne.n	8009da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3314      	adds	r3, #20
 8009de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	f023 0301 	bic.w	r3, r3, #1
 8009df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3314      	adds	r3, #20
 8009dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e5      	bne.n	8009ddc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d119      	bne.n	8009e4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f023 0310 	bic.w	r3, r3, #16
 8009e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e38:	61ba      	str	r2, [r7, #24]
 8009e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	6979      	ldr	r1, [r7, #20]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	613b      	str	r3, [r7, #16]
   return(result);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e5      	bne.n	8009e18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e5a:	bf00      	nop
 8009e5c:	3754      	adds	r7, #84	; 0x54
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff ff77 	bl	8009d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b21      	cmp	r3, #33	; 0x21
 8009ea0:	d13e      	bne.n	8009f20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eaa:	d114      	bne.n	8009ed6 <UART_Transmit_IT+0x48>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d110      	bne.n	8009ed6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ec8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	1c9a      	adds	r2, r3, #2
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	621a      	str	r2, [r3, #32]
 8009ed4:	e008      	b.n	8009ee8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	1c59      	adds	r1, r3, #1
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6211      	str	r1, [r2, #32]
 8009ee0:	781a      	ldrb	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10f      	bne.n	8009f1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e000      	b.n	8009f22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f20:	2302      	movs	r3, #2
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff fefc 	bl	8009d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b08c      	sub	sp, #48	; 0x30
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b22      	cmp	r3, #34	; 0x22
 8009f70:	f040 80ae 	bne.w	800a0d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7c:	d117      	bne.n	8009fae <UART_Receive_IT+0x50>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d113      	bne.n	8009fae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa6:	1c9a      	adds	r2, r3, #2
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	629a      	str	r2, [r3, #40]	; 0x28
 8009fac:	e026      	b.n	8009ffc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc0:	d007      	beq.n	8009fd2 <UART_Receive_IT+0x74>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <UART_Receive_IT+0x82>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e008      	b.n	8009ff2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a000:	b29b      	uxth	r3, r3
 800a002:	3b01      	subs	r3, #1
 800a004:	b29b      	uxth	r3, r3
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	4619      	mov	r1, r3
 800a00a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d15d      	bne.n	800a0cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0220 	bic.w	r2, r2, #32
 800a01e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a02e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	695a      	ldr	r2, [r3, #20]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 0201 	bic.w	r2, r2, #1
 800a03e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	2b01      	cmp	r3, #1
 800a054:	d135      	bne.n	800a0c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	330c      	adds	r3, #12
 800a062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	613b      	str	r3, [r7, #16]
   return(result);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f023 0310 	bic.w	r3, r3, #16
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	330c      	adds	r3, #12
 800a07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07c:	623a      	str	r2, [r7, #32]
 800a07e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	69f9      	ldr	r1, [r7, #28]
 800a082:	6a3a      	ldr	r2, [r7, #32]
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	61bb      	str	r3, [r7, #24]
   return(result);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e5      	bne.n	800a05c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0310 	and.w	r3, r3, #16
 800a09a:	2b10      	cmp	r3, #16
 800a09c:	d10a      	bne.n	800a0b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fe64 	bl	8009d88 <HAL_UARTEx_RxEventCallback>
 800a0c0:	e002      	b.n	800a0c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fe4c 	bl	8009d60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e002      	b.n	800a0d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e000      	b.n	800a0d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a0d0:	2302      	movs	r3, #2
  }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3730      	adds	r7, #48	; 0x30
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0e0:	b0c0      	sub	sp, #256	; 0x100
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f8:	68d9      	ldr	r1, [r3, #12]
 800a0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	ea40 0301 	orr.w	r3, r0, r1
 800a104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	431a      	orrs	r2, r3
 800a114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4313      	orrs	r3, r2
 800a124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a134:	f021 010c 	bic.w	r1, r1, #12
 800a138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a142:	430b      	orrs	r3, r1
 800a144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a156:	6999      	ldr	r1, [r3, #24]
 800a158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	ea40 0301 	orr.w	r3, r0, r1
 800a162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4b8f      	ldr	r3, [pc, #572]	; (800a3a8 <UART_SetConfig+0x2cc>)
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d005      	beq.n	800a17c <UART_SetConfig+0xa0>
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	4b8d      	ldr	r3, [pc, #564]	; (800a3ac <UART_SetConfig+0x2d0>)
 800a178:	429a      	cmp	r2, r3
 800a17a:	d104      	bne.n	800a186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a17c:	f7fe fa18 	bl	80085b0 <HAL_RCC_GetPCLK2Freq>
 800a180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a184:	e003      	b.n	800a18e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a186:	f7fe f9ff 	bl	8008588 <HAL_RCC_GetPCLK1Freq>
 800a18a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a198:	f040 810c 	bne.w	800a3b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a19c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a1aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	462b      	mov	r3, r5
 800a1b2:	1891      	adds	r1, r2, r2
 800a1b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a1b6:	415b      	adcs	r3, r3
 800a1b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1be:	4621      	mov	r1, r4
 800a1c0:	eb12 0801 	adds.w	r8, r2, r1
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	eb43 0901 	adc.w	r9, r3, r1
 800a1ca:	f04f 0200 	mov.w	r2, #0
 800a1ce:	f04f 0300 	mov.w	r3, #0
 800a1d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1de:	4690      	mov	r8, r2
 800a1e0:	4699      	mov	r9, r3
 800a1e2:	4623      	mov	r3, r4
 800a1e4:	eb18 0303 	adds.w	r3, r8, r3
 800a1e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	eb49 0303 	adc.w	r3, r9, r3
 800a1f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a20a:	460b      	mov	r3, r1
 800a20c:	18db      	adds	r3, r3, r3
 800a20e:	653b      	str	r3, [r7, #80]	; 0x50
 800a210:	4613      	mov	r3, r2
 800a212:	eb42 0303 	adc.w	r3, r2, r3
 800a216:	657b      	str	r3, [r7, #84]	; 0x54
 800a218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a21c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a220:	f7f6 fd22 	bl	8000c68 <__aeabi_uldivmod>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4b61      	ldr	r3, [pc, #388]	; (800a3b0 <UART_SetConfig+0x2d4>)
 800a22a:	fba3 2302 	umull	r2, r3, r3, r2
 800a22e:	095b      	lsrs	r3, r3, #5
 800a230:	011c      	lsls	r4, r3, #4
 800a232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a236:	2200      	movs	r2, #0
 800a238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a23c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a244:	4642      	mov	r2, r8
 800a246:	464b      	mov	r3, r9
 800a248:	1891      	adds	r1, r2, r2
 800a24a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a24c:	415b      	adcs	r3, r3
 800a24e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a254:	4641      	mov	r1, r8
 800a256:	eb12 0a01 	adds.w	sl, r2, r1
 800a25a:	4649      	mov	r1, r9
 800a25c:	eb43 0b01 	adc.w	fp, r3, r1
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a26c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a274:	4692      	mov	sl, r2
 800a276:	469b      	mov	fp, r3
 800a278:	4643      	mov	r3, r8
 800a27a:	eb1a 0303 	adds.w	r3, sl, r3
 800a27e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a282:	464b      	mov	r3, r9
 800a284:	eb4b 0303 	adc.w	r3, fp, r3
 800a288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a29c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	18db      	adds	r3, r3, r3
 800a2a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	eb42 0303 	adc.w	r3, r2, r3
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a2b6:	f7f6 fcd7 	bl	8000c68 <__aeabi_uldivmod>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4b3b      	ldr	r3, [pc, #236]	; (800a3b0 <UART_SetConfig+0x2d4>)
 800a2c2:	fba3 2301 	umull	r2, r3, r3, r1
 800a2c6:	095b      	lsrs	r3, r3, #5
 800a2c8:	2264      	movs	r2, #100	; 0x64
 800a2ca:	fb02 f303 	mul.w	r3, r2, r3
 800a2ce:	1acb      	subs	r3, r1, r3
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a2d6:	4b36      	ldr	r3, [pc, #216]	; (800a3b0 <UART_SetConfig+0x2d4>)
 800a2d8:	fba3 2302 	umull	r2, r3, r3, r2
 800a2dc:	095b      	lsrs	r3, r3, #5
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2e4:	441c      	add	r4, r3
 800a2e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a2f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	1891      	adds	r1, r2, r2
 800a2fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800a300:	415b      	adcs	r3, r3
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a308:	4641      	mov	r1, r8
 800a30a:	1851      	adds	r1, r2, r1
 800a30c:	6339      	str	r1, [r7, #48]	; 0x30
 800a30e:	4649      	mov	r1, r9
 800a310:	414b      	adcs	r3, r1
 800a312:	637b      	str	r3, [r7, #52]	; 0x34
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	f04f 0300 	mov.w	r3, #0
 800a31c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a320:	4659      	mov	r1, fp
 800a322:	00cb      	lsls	r3, r1, #3
 800a324:	4651      	mov	r1, sl
 800a326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a32a:	4651      	mov	r1, sl
 800a32c:	00ca      	lsls	r2, r1, #3
 800a32e:	4610      	mov	r0, r2
 800a330:	4619      	mov	r1, r3
 800a332:	4603      	mov	r3, r0
 800a334:	4642      	mov	r2, r8
 800a336:	189b      	adds	r3, r3, r2
 800a338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a33c:	464b      	mov	r3, r9
 800a33e:	460a      	mov	r2, r1
 800a340:	eb42 0303 	adc.w	r3, r2, r3
 800a344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a35c:	460b      	mov	r3, r1
 800a35e:	18db      	adds	r3, r3, r3
 800a360:	62bb      	str	r3, [r7, #40]	; 0x28
 800a362:	4613      	mov	r3, r2
 800a364:	eb42 0303 	adc.w	r3, r2, r3
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a36a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a36e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a372:	f7f6 fc79 	bl	8000c68 <__aeabi_uldivmod>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4b0d      	ldr	r3, [pc, #52]	; (800a3b0 <UART_SetConfig+0x2d4>)
 800a37c:	fba3 1302 	umull	r1, r3, r3, r2
 800a380:	095b      	lsrs	r3, r3, #5
 800a382:	2164      	movs	r1, #100	; 0x64
 800a384:	fb01 f303 	mul.w	r3, r1, r3
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	3332      	adds	r3, #50	; 0x32
 800a38e:	4a08      	ldr	r2, [pc, #32]	; (800a3b0 <UART_SetConfig+0x2d4>)
 800a390:	fba2 2303 	umull	r2, r3, r2, r3
 800a394:	095b      	lsrs	r3, r3, #5
 800a396:	f003 0207 	and.w	r2, r3, #7
 800a39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4422      	add	r2, r4
 800a3a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3a4:	e106      	b.n	800a5b4 <UART_SetConfig+0x4d8>
 800a3a6:	bf00      	nop
 800a3a8:	40011000 	.word	0x40011000
 800a3ac:	40011400 	.word	0x40011400
 800a3b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	1891      	adds	r1, r2, r2
 800a3cc:	6239      	str	r1, [r7, #32]
 800a3ce:	415b      	adcs	r3, r3
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	1854      	adds	r4, r2, r1
 800a3da:	4649      	mov	r1, r9
 800a3dc:	eb43 0501 	adc.w	r5, r3, r1
 800a3e0:	f04f 0200 	mov.w	r2, #0
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	00eb      	lsls	r3, r5, #3
 800a3ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3ee:	00e2      	lsls	r2, r4, #3
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	461d      	mov	r5, r3
 800a3f4:	4643      	mov	r3, r8
 800a3f6:	18e3      	adds	r3, r4, r3
 800a3f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	eb45 0303 	adc.w	r3, r5, r3
 800a402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a416:	f04f 0200 	mov.w	r2, #0
 800a41a:	f04f 0300 	mov.w	r3, #0
 800a41e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a422:	4629      	mov	r1, r5
 800a424:	008b      	lsls	r3, r1, #2
 800a426:	4621      	mov	r1, r4
 800a428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a42c:	4621      	mov	r1, r4
 800a42e:	008a      	lsls	r2, r1, #2
 800a430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a434:	f7f6 fc18 	bl	8000c68 <__aeabi_uldivmod>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4b60      	ldr	r3, [pc, #384]	; (800a5c0 <UART_SetConfig+0x4e4>)
 800a43e:	fba3 2302 	umull	r2, r3, r3, r2
 800a442:	095b      	lsrs	r3, r3, #5
 800a444:	011c      	lsls	r4, r3, #4
 800a446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a458:	4642      	mov	r2, r8
 800a45a:	464b      	mov	r3, r9
 800a45c:	1891      	adds	r1, r2, r2
 800a45e:	61b9      	str	r1, [r7, #24]
 800a460:	415b      	adcs	r3, r3
 800a462:	61fb      	str	r3, [r7, #28]
 800a464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a468:	4641      	mov	r1, r8
 800a46a:	1851      	adds	r1, r2, r1
 800a46c:	6139      	str	r1, [r7, #16]
 800a46e:	4649      	mov	r1, r9
 800a470:	414b      	adcs	r3, r1
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	f04f 0300 	mov.w	r3, #0
 800a47c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a480:	4659      	mov	r1, fp
 800a482:	00cb      	lsls	r3, r1, #3
 800a484:	4651      	mov	r1, sl
 800a486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a48a:	4651      	mov	r1, sl
 800a48c:	00ca      	lsls	r2, r1, #3
 800a48e:	4610      	mov	r0, r2
 800a490:	4619      	mov	r1, r3
 800a492:	4603      	mov	r3, r0
 800a494:	4642      	mov	r2, r8
 800a496:	189b      	adds	r3, r3, r2
 800a498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a49c:	464b      	mov	r3, r9
 800a49e:	460a      	mov	r2, r1
 800a4a0:	eb42 0303 	adc.w	r3, r2, r3
 800a4a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	008b      	lsls	r3, r1, #2
 800a4c4:	4641      	mov	r1, r8
 800a4c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	008a      	lsls	r2, r1, #2
 800a4ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a4d2:	f7f6 fbc9 	bl	8000c68 <__aeabi_uldivmod>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4b38      	ldr	r3, [pc, #224]	; (800a5c0 <UART_SetConfig+0x4e4>)
 800a4de:	fba3 2301 	umull	r2, r3, r3, r1
 800a4e2:	095b      	lsrs	r3, r3, #5
 800a4e4:	2264      	movs	r2, #100	; 0x64
 800a4e6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ea:	1acb      	subs	r3, r1, r3
 800a4ec:	011b      	lsls	r3, r3, #4
 800a4ee:	3332      	adds	r3, #50	; 0x32
 800a4f0:	4a33      	ldr	r2, [pc, #204]	; (800a5c0 <UART_SetConfig+0x4e4>)
 800a4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4fc:	441c      	add	r4, r3
 800a4fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a502:	2200      	movs	r2, #0
 800a504:	673b      	str	r3, [r7, #112]	; 0x70
 800a506:	677a      	str	r2, [r7, #116]	; 0x74
 800a508:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a50c:	4642      	mov	r2, r8
 800a50e:	464b      	mov	r3, r9
 800a510:	1891      	adds	r1, r2, r2
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	415b      	adcs	r3, r3
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a51c:	4641      	mov	r1, r8
 800a51e:	1851      	adds	r1, r2, r1
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	4649      	mov	r1, r9
 800a524:	414b      	adcs	r3, r1
 800a526:	607b      	str	r3, [r7, #4]
 800a528:	f04f 0200 	mov.w	r2, #0
 800a52c:	f04f 0300 	mov.w	r3, #0
 800a530:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a534:	4659      	mov	r1, fp
 800a536:	00cb      	lsls	r3, r1, #3
 800a538:	4651      	mov	r1, sl
 800a53a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a53e:	4651      	mov	r1, sl
 800a540:	00ca      	lsls	r2, r1, #3
 800a542:	4610      	mov	r0, r2
 800a544:	4619      	mov	r1, r3
 800a546:	4603      	mov	r3, r0
 800a548:	4642      	mov	r2, r8
 800a54a:	189b      	adds	r3, r3, r2
 800a54c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a54e:	464b      	mov	r3, r9
 800a550:	460a      	mov	r2, r1
 800a552:	eb42 0303 	adc.w	r3, r2, r3
 800a556:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	663b      	str	r3, [r7, #96]	; 0x60
 800a562:	667a      	str	r2, [r7, #100]	; 0x64
 800a564:	f04f 0200 	mov.w	r2, #0
 800a568:	f04f 0300 	mov.w	r3, #0
 800a56c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a570:	4649      	mov	r1, r9
 800a572:	008b      	lsls	r3, r1, #2
 800a574:	4641      	mov	r1, r8
 800a576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a57a:	4641      	mov	r1, r8
 800a57c:	008a      	lsls	r2, r1, #2
 800a57e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a582:	f7f6 fb71 	bl	8000c68 <__aeabi_uldivmod>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <UART_SetConfig+0x4e4>)
 800a58c:	fba3 1302 	umull	r1, r3, r3, r2
 800a590:	095b      	lsrs	r3, r3, #5
 800a592:	2164      	movs	r1, #100	; 0x64
 800a594:	fb01 f303 	mul.w	r3, r1, r3
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	3332      	adds	r3, #50	; 0x32
 800a59e:	4a08      	ldr	r2, [pc, #32]	; (800a5c0 <UART_SetConfig+0x4e4>)
 800a5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a4:	095b      	lsrs	r3, r3, #5
 800a5a6:	f003 020f 	and.w	r2, r3, #15
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4422      	add	r2, r4
 800a5b2:	609a      	str	r2, [r3, #8]
}
 800a5b4:	bf00      	nop
 800a5b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5c0:	51eb851f 	.word	0x51eb851f

0800a5c4 <LL_GPIO_SetPinMode>:
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b08b      	sub	sp, #44	; 0x2c
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	fa93 f3a3 	rbit	r3, r3
 800a5de:	613b      	str	r3, [r7, #16]
  return result;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a5ea:	2320      	movs	r3, #32
 800a5ec:	e003      	b.n	800a5f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	fab3 f383 	clz	r3, r3
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	2103      	movs	r1, #3
 800a5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fe:	43db      	mvns	r3, r3
 800a600:	401a      	ands	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	fa93 f3a3 	rbit	r3, r3
 800a60c:	61fb      	str	r3, [r7, #28]
  return result;
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a618:	2320      	movs	r3, #32
 800a61a:	e003      	b.n	800a624 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	fab3 f383 	clz	r3, r3
 800a622:	b2db      	uxtb	r3, r3
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	fa01 f303 	lsl.w	r3, r1, r3
 800a62c:	431a      	orrs	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]
}
 800a632:	bf00      	nop
 800a634:	372c      	adds	r7, #44	; 0x2c
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <LL_GPIO_SetPinOutputType>:
{
 800a63e:	b480      	push	{r7}
 800a640:	b085      	sub	sp, #20
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	43db      	mvns	r3, r3
 800a652:	401a      	ands	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	fb01 f303 	mul.w	r3, r1, r3
 800a65c:	431a      	orrs	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	605a      	str	r2, [r3, #4]
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <LL_GPIO_SetPinSpeed>:
{
 800a66e:	b480      	push	{r7}
 800a670:	b08b      	sub	sp, #44	; 0x2c
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	fa93 f3a3 	rbit	r3, r3
 800a688:	613b      	str	r3, [r7, #16]
  return result;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a694:	2320      	movs	r3, #32
 800a696:	e003      	b.n	800a6a0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	fab3 f383 	clz	r3, r3
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	005b      	lsls	r3, r3, #1
 800a6a2:	2103      	movs	r1, #3
 800a6a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	401a      	ands	r2, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	fa93 f3a3 	rbit	r3, r3
 800a6b6:	61fb      	str	r3, [r7, #28]
  return result;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a6c2:	2320      	movs	r3, #32
 800a6c4:	e003      	b.n	800a6ce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	fab3 f383 	clz	r3, r3
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	609a      	str	r2, [r3, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	372c      	adds	r7, #44	; 0x2c
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <LL_GPIO_SetPinPull>:
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b08b      	sub	sp, #44	; 0x2c
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	fa93 f3a3 	rbit	r3, r3
 800a702:	613b      	str	r3, [r7, #16]
  return result;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a70e:	2320      	movs	r3, #32
 800a710:	e003      	b.n	800a71a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	fab3 f383 	clz	r3, r3
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	2103      	movs	r1, #3
 800a71e:	fa01 f303 	lsl.w	r3, r1, r3
 800a722:	43db      	mvns	r3, r3
 800a724:	401a      	ands	r2, r3
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	fa93 f3a3 	rbit	r3, r3
 800a730:	61fb      	str	r3, [r7, #28]
  return result;
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a73c:	2320      	movs	r3, #32
 800a73e:	e003      	b.n	800a748 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	fab3 f383 	clz	r3, r3
 800a746:	b2db      	uxtb	r3, r3
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	fa01 f303 	lsl.w	r3, r1, r3
 800a750:	431a      	orrs	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	60da      	str	r2, [r3, #12]
}
 800a756:	bf00      	nop
 800a758:	372c      	adds	r7, #44	; 0x2c
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <LL_GPIO_SetAFPin_0_7>:
{
 800a762:	b480      	push	{r7}
 800a764:	b08b      	sub	sp, #44	; 0x2c
 800a766:	af00      	add	r7, sp, #0
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a1a      	ldr	r2, [r3, #32]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	fa93 f3a3 	rbit	r3, r3
 800a77c:	613b      	str	r3, [r7, #16]
  return result;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a788:	2320      	movs	r3, #32
 800a78a:	e003      	b.n	800a794 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	fab3 f383 	clz	r3, r3
 800a792:	b2db      	uxtb	r3, r3
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	210f      	movs	r1, #15
 800a798:	fa01 f303 	lsl.w	r3, r1, r3
 800a79c:	43db      	mvns	r3, r3
 800a79e:	401a      	ands	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	fa93 f3a3 	rbit	r3, r3
 800a7aa:	61fb      	str	r3, [r7, #28]
  return result;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	e003      	b.n	800a7c2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	fab3 f383 	clz	r3, r3
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	6879      	ldr	r1, [r7, #4]
 800a7c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	621a      	str	r2, [r3, #32]
}
 800a7d0:	bf00      	nop
 800a7d2:	372c      	adds	r7, #44	; 0x2c
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <LL_GPIO_SetAFPin_8_15>:
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b08b      	sub	sp, #44	; 0x2c
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	0a1b      	lsrs	r3, r3, #8
 800a7f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	fa93 f3a3 	rbit	r3, r3
 800a7f8:	613b      	str	r3, [r7, #16]
  return result;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a804:	2320      	movs	r3, #32
 800a806:	e003      	b.n	800a810 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	fab3 f383 	clz	r3, r3
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	210f      	movs	r1, #15
 800a814:	fa01 f303 	lsl.w	r3, r1, r3
 800a818:	43db      	mvns	r3, r3
 800a81a:	401a      	ands	r2, r3
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	0a1b      	lsrs	r3, r3, #8
 800a820:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	fa93 f3a3 	rbit	r3, r3
 800a828:	61fb      	str	r3, [r7, #28]
  return result;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a834:	2320      	movs	r3, #32
 800a836:	e003      	b.n	800a840 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	fab3 f383 	clz	r3, r3
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	fa01 f303 	lsl.w	r3, r1, r3
 800a848:	431a      	orrs	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a84e:	bf00      	nop
 800a850:	372c      	adds	r7, #44	; 0x2c
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b08a      	sub	sp, #40	; 0x28
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800a864:	2300      	movs	r3, #0
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 800a868:	2300      	movs	r3, #0
 800a86a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	fa93 f3a3 	rbit	r3, r3
 800a878:	617b      	str	r3, [r7, #20]
  return result;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <LL_GPIO_Init+0x2e>
    return 32U;
 800a884:	2320      	movs	r3, #32
 800a886:	e003      	b.n	800a890 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	fab3 f383 	clz	r3, r3
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a892:	e057      	b.n	800a944 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	2101      	movs	r1, #1
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d049      	beq.n	800a93e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d003      	beq.n	800a8ba <LL_GPIO_Init+0x60>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d10d      	bne.n	800a8d6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6a39      	ldr	r1, [r7, #32]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7ff fed3 	bl	800a66e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6a39      	ldr	r1, [r7, #32]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff feb4 	bl	800a63e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	6a39      	ldr	r1, [r7, #32]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff ff02 	bl	800a6e8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d121      	bne.n	800a930 <LL_GPIO_Init+0xd6>
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	fa93 f3a3 	rbit	r3, r3
 800a8f6:	60bb      	str	r3, [r7, #8]
  return result;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <LL_GPIO_Init+0xac>
    return 32U;
 800a902:	2320      	movs	r3, #32
 800a904:	e003      	b.n	800a90e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	fab3 f383 	clz	r3, r3
 800a90c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800a90e:	2b07      	cmp	r3, #7
 800a910:	d807      	bhi.n	800a922 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	461a      	mov	r2, r3
 800a918:	6a39      	ldr	r1, [r7, #32]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff ff21 	bl	800a762 <LL_GPIO_SetAFPin_0_7>
 800a920:	e006      	b.n	800a930 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	461a      	mov	r2, r3
 800a928:	6a39      	ldr	r1, [r7, #32]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff ff56 	bl	800a7dc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	461a      	mov	r2, r3
 800a936:	6a39      	ldr	r1, [r7, #32]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7ff fe43 	bl	800a5c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	3301      	adds	r3, #1
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	fa22 f303 	lsr.w	r3, r2, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1a0      	bne.n	800a894 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3728      	adds	r7, #40	; 0x28
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <LL_SPI_IsEnabled>:
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96c:	2b40      	cmp	r3, #64	; 0x40
 800a96e:	d101      	bne.n	800a974 <LL_SPI_IsEnabled+0x18>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <LL_SPI_IsEnabled+0x1a>
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <LL_SPI_SetCRCPolynomial>:
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	461a      	mov	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	611a      	str	r2, [r3, #16]
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff ffd3 	bl	800a95c <LL_SPI_IsEnabled>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d139      	bne.n	800aa30 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9c4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	6811      	ldr	r1, [r2, #0]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	6852      	ldr	r2, [r2, #4]
 800a9d0:	4311      	orrs	r1, r2
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	6892      	ldr	r2, [r2, #8]
 800a9d6:	4311      	orrs	r1, r2
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	68d2      	ldr	r2, [r2, #12]
 800a9dc:	4311      	orrs	r1, r2
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	6912      	ldr	r2, [r2, #16]
 800a9e2:	4311      	orrs	r1, r2
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	6952      	ldr	r2, [r2, #20]
 800a9e8:	4311      	orrs	r1, r2
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	6992      	ldr	r2, [r2, #24]
 800a9ee:	4311      	orrs	r1, r2
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	69d2      	ldr	r2, [r2, #28]
 800a9f4:	4311      	orrs	r1, r2
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	6a12      	ldr	r2, [r2, #32]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f023 0204 	bic.w	r2, r3, #4
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	0c1b      	lsrs	r3, r3, #16
 800aa10:	431a      	orrs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa1e:	d105      	bne.n	800aa2c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff ffab 	bl	800a982 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	61da      	str	r2, [r3, #28]
  return status;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa46:	b084      	sub	sp, #16
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	f107 001c 	add.w	r0, r7, #28
 800aa54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d123      	bne.n	800aaa8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aa74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d105      	bne.n	800aa9c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 fae3 	bl	800c068 <USB_CoreReset>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]
 800aaa6:	e01b      	b.n	800aae0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fad7 	bl	800c068 <USB_CoreReset>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aabe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	639a      	str	r2, [r3, #56]	; 0x38
 800aad2:	e005      	b.n	800aae0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aae0:	7fbb      	ldrb	r3, [r7, #30]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d10b      	bne.n	800aafe <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f043 0206 	orr.w	r2, r3, #6
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f043 0220 	orr.w	r2, r3, #32
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab0a:	b004      	add	sp, #16
 800ab0c:	4770      	bx	lr
	...

0800ab10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d165      	bne.n	800abf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4a41      	ldr	r2, [pc, #260]	; (800ac2c <USB_SetTurnaroundTime+0x11c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d906      	bls.n	800ab3a <USB_SetTurnaroundTime+0x2a>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	4a40      	ldr	r2, [pc, #256]	; (800ac30 <USB_SetTurnaroundTime+0x120>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d202      	bcs.n	800ab3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ab34:	230f      	movs	r3, #15
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	e062      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	4a3c      	ldr	r2, [pc, #240]	; (800ac30 <USB_SetTurnaroundTime+0x120>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d306      	bcc.n	800ab50 <USB_SetTurnaroundTime+0x40>
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	4a3b      	ldr	r2, [pc, #236]	; (800ac34 <USB_SetTurnaroundTime+0x124>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d202      	bcs.n	800ab50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ab4a:	230e      	movs	r3, #14
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	e057      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4a38      	ldr	r2, [pc, #224]	; (800ac34 <USB_SetTurnaroundTime+0x124>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d306      	bcc.n	800ab66 <USB_SetTurnaroundTime+0x56>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4a37      	ldr	r2, [pc, #220]	; (800ac38 <USB_SetTurnaroundTime+0x128>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d202      	bcs.n	800ab66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ab60:	230d      	movs	r3, #13
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	e04c      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4a33      	ldr	r2, [pc, #204]	; (800ac38 <USB_SetTurnaroundTime+0x128>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d306      	bcc.n	800ab7c <USB_SetTurnaroundTime+0x6c>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4a32      	ldr	r2, [pc, #200]	; (800ac3c <USB_SetTurnaroundTime+0x12c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d802      	bhi.n	800ab7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ab76:	230c      	movs	r3, #12
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e041      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4a2f      	ldr	r2, [pc, #188]	; (800ac3c <USB_SetTurnaroundTime+0x12c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d906      	bls.n	800ab92 <USB_SetTurnaroundTime+0x82>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4a2e      	ldr	r2, [pc, #184]	; (800ac40 <USB_SetTurnaroundTime+0x130>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d802      	bhi.n	800ab92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ab8c:	230b      	movs	r3, #11
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	e036      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	4a2a      	ldr	r2, [pc, #168]	; (800ac40 <USB_SetTurnaroundTime+0x130>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d906      	bls.n	800aba8 <USB_SetTurnaroundTime+0x98>
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	4a29      	ldr	r2, [pc, #164]	; (800ac44 <USB_SetTurnaroundTime+0x134>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d802      	bhi.n	800aba8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aba2:	230a      	movs	r3, #10
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	e02b      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <USB_SetTurnaroundTime+0x134>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d906      	bls.n	800abbe <USB_SetTurnaroundTime+0xae>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4a25      	ldr	r2, [pc, #148]	; (800ac48 <USB_SetTurnaroundTime+0x138>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d202      	bcs.n	800abbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800abb8:	2309      	movs	r3, #9
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	e020      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	4a21      	ldr	r2, [pc, #132]	; (800ac48 <USB_SetTurnaroundTime+0x138>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d306      	bcc.n	800abd4 <USB_SetTurnaroundTime+0xc4>
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	4a20      	ldr	r2, [pc, #128]	; (800ac4c <USB_SetTurnaroundTime+0x13c>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d802      	bhi.n	800abd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800abce:	2308      	movs	r3, #8
 800abd0:	617b      	str	r3, [r7, #20]
 800abd2:	e015      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	4a1d      	ldr	r2, [pc, #116]	; (800ac4c <USB_SetTurnaroundTime+0x13c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d906      	bls.n	800abea <USB_SetTurnaroundTime+0xda>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	4a1c      	ldr	r2, [pc, #112]	; (800ac50 <USB_SetTurnaroundTime+0x140>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d202      	bcs.n	800abea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800abe4:	2307      	movs	r3, #7
 800abe6:	617b      	str	r3, [r7, #20]
 800abe8:	e00a      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800abea:	2306      	movs	r3, #6
 800abec:	617b      	str	r3, [r7, #20]
 800abee:	e007      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800abf6:	2309      	movs	r3, #9
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	e001      	b.n	800ac00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800abfc:	2309      	movs	r3, #9
 800abfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	029b      	lsls	r3, r3, #10
 800ac14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ac18:	431a      	orrs	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	00d8acbf 	.word	0x00d8acbf
 800ac30:	00e4e1c0 	.word	0x00e4e1c0
 800ac34:	00f42400 	.word	0x00f42400
 800ac38:	01067380 	.word	0x01067380
 800ac3c:	011a499f 	.word	0x011a499f
 800ac40:	01312cff 	.word	0x01312cff
 800ac44:	014ca43f 	.word	0x014ca43f
 800ac48:	016e3600 	.word	0x016e3600
 800ac4c:	01a6ab1f 	.word	0x01a6ab1f
 800ac50:	01e84800 	.word	0x01e84800

0800ac54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f043 0201 	orr.w	r2, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f023 0201 	bic.w	r2, r3, #1
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d115      	bne.n	800ace6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800acc6:	200a      	movs	r0, #10
 800acc8:	f7fa fa9e 	bl	8005208 <HAL_Delay>
      ms += 10U;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	330a      	adds	r3, #10
 800acd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f001 f939 	bl	800bf4a <USB_GetMode>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d01e      	beq.n	800ad1c <USB_SetCurrentMode+0x84>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2bc7      	cmp	r3, #199	; 0xc7
 800ace2:	d9f0      	bls.n	800acc6 <USB_SetCurrentMode+0x2e>
 800ace4:	e01a      	b.n	800ad1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d115      	bne.n	800ad18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800acf8:	200a      	movs	r0, #10
 800acfa:	f7fa fa85 	bl	8005208 <HAL_Delay>
      ms += 10U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	330a      	adds	r3, #10
 800ad02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 f920 	bl	800bf4a <USB_GetMode>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <USB_SetCurrentMode+0x84>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2bc7      	cmp	r3, #199	; 0xc7
 800ad14:	d9f0      	bls.n	800acf8 <USB_SetCurrentMode+0x60>
 800ad16:	e001      	b.n	800ad1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e005      	b.n	800ad28 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2bc8      	cmp	r3, #200	; 0xc8
 800ad20:	d101      	bne.n	800ad26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad30:	b084      	sub	sp, #16
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ad3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	613b      	str	r3, [r7, #16]
 800ad4e:	e009      	b.n	800ad64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	3340      	adds	r3, #64	; 0x40
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	3301      	adds	r3, #1
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	2b0e      	cmp	r3, #14
 800ad68:	d9f2      	bls.n	800ad50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d11c      	bne.n	800adac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad80:	f043 0302 	orr.w	r3, r3, #2
 800ad84:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38
 800adaa:	e00b      	b.n	800adc4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adca:	461a      	mov	r2, r3
 800adcc:	2300      	movs	r3, #0
 800adce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800add0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800add4:	2b01      	cmp	r3, #1
 800add6:	d10d      	bne.n	800adf4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800add8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ade0:	2100      	movs	r1, #0
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f968 	bl	800b0b8 <USB_SetDevSpeed>
 800ade8:	e008      	b.n	800adfc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800adea:	2101      	movs	r1, #1
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f963 	bl	800b0b8 <USB_SetDevSpeed>
 800adf2:	e003      	b.n	800adfc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800adf4:	2103      	movs	r1, #3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f95e 	bl	800b0b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800adfc:	2110      	movs	r1, #16
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f8fa 	bl	800aff8 <USB_FlushTxFifo>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f924 	bl	800b05c <USB_FlushRxFifo>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae24:	461a      	mov	r2, r3
 800ae26:	2300      	movs	r3, #0
 800ae28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae30:	461a      	mov	r2, r3
 800ae32:	2300      	movs	r3, #0
 800ae34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	2300      	movs	r3, #0
 800ae40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e043      	b.n	800aed0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae5e:	d118      	bne.n	800ae92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae72:	461a      	mov	r2, r3
 800ae74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	e013      	b.n	800aea4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae88:	461a      	mov	r2, r3
 800ae8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	e008      	b.n	800aea4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae9e:	461a      	mov	r2, r3
 800aea0:	2300      	movs	r3, #0
 800aea2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec2:	461a      	mov	r2, r3
 800aec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	3301      	adds	r3, #1
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aed4:	461a      	mov	r2, r3
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d3b5      	bcc.n	800ae48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aedc:	2300      	movs	r3, #0
 800aede:	613b      	str	r3, [r7, #16]
 800aee0:	e043      	b.n	800af6a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	015a      	lsls	r2, r3, #5
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4413      	add	r3, r2
 800aeea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aef8:	d118      	bne.n	800af2c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0c:	461a      	mov	r2, r3
 800af0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	e013      	b.n	800af3e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af22:	461a      	mov	r2, r3
 800af24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	e008      	b.n	800af3e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af38:	461a      	mov	r2, r3
 800af3a:	2300      	movs	r3, #0
 800af3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	015a      	lsls	r2, r3, #5
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4413      	add	r3, r2
 800af46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4a:	461a      	mov	r2, r3
 800af4c:	2300      	movs	r3, #0
 800af4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5c:	461a      	mov	r2, r3
 800af5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	3301      	adds	r3, #1
 800af68:	613b      	str	r3, [r7, #16]
 800af6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af6e:	461a      	mov	r2, r3
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	4293      	cmp	r3, r2
 800af74:	d3b5      	bcc.n	800aee2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	f043 0210 	orr.w	r2, r3, #16
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	699a      	ldr	r2, [r3, #24]
 800afb0:	4b10      	ldr	r3, [pc, #64]	; (800aff4 <USB_DevInit+0x2c4>)
 800afb2:	4313      	orrs	r3, r2
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800afb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	f043 0208 	orr.w	r2, r3, #8
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800afcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d107      	bne.n	800afe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afdc:	f043 0304 	orr.w	r3, r3, #4
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aff0:	b004      	add	sp, #16
 800aff2:	4770      	bx	lr
 800aff4:	803c3800 	.word	0x803c3800

0800aff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	3301      	adds	r3, #1
 800b00a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b012:	d901      	bls.n	800b018 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e01b      	b.n	800b050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	daf2      	bge.n	800b006 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	019b      	lsls	r3, r3, #6
 800b028:	f043 0220 	orr.w	r2, r3, #32
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b03c:	d901      	bls.n	800b042 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e006      	b.n	800b050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0320 	and.w	r3, r3, #32
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d0f0      	beq.n	800b030 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3301      	adds	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b074:	d901      	bls.n	800b07a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e018      	b.n	800b0ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	daf2      	bge.n	800b068 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2210      	movs	r2, #16
 800b08a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b098:	d901      	bls.n	800b09e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e006      	b.n	800b0ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	f003 0310 	and.w	r3, r3, #16
 800b0a6:	2b10      	cmp	r3, #16
 800b0a8:	d0f0      	beq.n	800b08c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	68f9      	ldr	r1, [r7, #12]
 800b0d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b087      	sub	sp, #28
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f003 0306 	and.w	r3, r3, #6
 800b102:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d102      	bne.n	800b110 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75fb      	strb	r3, [r7, #23]
 800b10e:	e00a      	b.n	800b126 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d002      	beq.n	800b11c <USB_GetDevSpeed+0x32>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b06      	cmp	r3, #6
 800b11a:	d102      	bne.n	800b122 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b11c:	2302      	movs	r3, #2
 800b11e:	75fb      	strb	r3, [r7, #23]
 800b120:	e001      	b.n	800b126 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b122:	230f      	movs	r3, #15
 800b124:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b126:	7dfb      	ldrb	r3, [r7, #23]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d13a      	bne.n	800b1c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b156:	69da      	ldr	r2, [r3, #28]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	f003 030f 	and.w	r3, r3, #15
 800b160:	2101      	movs	r1, #1
 800b162:	fa01 f303 	lsl.w	r3, r1, r3
 800b166:	b29b      	uxth	r3, r3
 800b168:	68f9      	ldr	r1, [r7, #12]
 800b16a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b16e:	4313      	orrs	r3, r2
 800b170:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d155      	bne.n	800b234 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	791b      	ldrb	r3, [r3, #4]
 800b1a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	059b      	lsls	r3, r3, #22
 800b1aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	e036      	b.n	800b234 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1cc:	69da      	ldr	r2, [r3, #28]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1dc:	041b      	lsls	r3, r3, #16
 800b1de:	68f9      	ldr	r1, [r7, #12]
 800b1e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d11a      	bne.n	800b234 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	015a      	lsls	r2, r3, #5
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4413      	add	r3, r2
 800b206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	791b      	ldrb	r3, [r3, #4]
 800b218:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b21a:	430b      	orrs	r3, r1
 800b21c:	4313      	orrs	r3, r2
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	0151      	lsls	r1, r2, #5
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	440a      	add	r2, r1
 800b226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b232:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
	...

0800b244 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	785b      	ldrb	r3, [r3, #1]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d161      	bne.n	800b324 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b276:	d11f      	bne.n	800b2b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	0151      	lsls	r1, r2, #5
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	440a      	add	r2, r1
 800b28e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b296:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	0151      	lsls	r1, r2, #5
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	440a      	add	r2, r1
 800b2ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	43db      	mvns	r3, r3
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2d8:	4013      	ands	r3, r2
 800b2da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e2:	69da      	ldr	r2, [r3, #28]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	f003 030f 	and.w	r3, r3, #15
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	43db      	mvns	r3, r3
 800b2f6:	68f9      	ldr	r1, [r7, #12]
 800b2f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	0159      	lsls	r1, r3, #5
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	440b      	add	r3, r1
 800b316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31a:	4619      	mov	r1, r3
 800b31c:	4b35      	ldr	r3, [pc, #212]	; (800b3f4 <USB_DeactivateEndpoint+0x1b0>)
 800b31e:	4013      	ands	r3, r2
 800b320:	600b      	str	r3, [r1, #0]
 800b322:	e060      	b.n	800b3e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b33a:	d11f      	bne.n	800b37c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	0151      	lsls	r1, r2, #5
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	440a      	add	r2, r1
 800b352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b35a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	0151      	lsls	r1, r2, #5
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	440a      	add	r2, r1
 800b372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b37a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	f003 030f 	and.w	r3, r3, #15
 800b38c:	2101      	movs	r1, #1
 800b38e:	fa01 f303 	lsl.w	r3, r1, r3
 800b392:	041b      	lsls	r3, r3, #16
 800b394:	43db      	mvns	r3, r3
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b39c:	4013      	ands	r3, r2
 800b39e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3b6:	041b      	lsls	r3, r3, #16
 800b3b8:	43db      	mvns	r3, r3
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	015a      	lsls	r2, r3, #5
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	0159      	lsls	r1, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	440b      	add	r3, r1
 800b3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <USB_DeactivateEndpoint+0x1b4>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	ec337800 	.word	0xec337800
 800b3f8:	eff37800 	.word	0xeff37800

0800b3fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08a      	sub	sp, #40	; 0x28
 800b400:	af02      	add	r7, sp, #8
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4613      	mov	r3, r2
 800b408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	785b      	ldrb	r3, [r3, #1]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	f040 817a 	bne.w	800b712 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d132      	bne.n	800b48c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	0151      	lsls	r1, r2, #5
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	440a      	add	r2, r1
 800b43c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	015a      	lsls	r2, r3, #5
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	4413      	add	r3, r2
 800b452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	0151      	lsls	r1, r2, #5
 800b45c:	69fa      	ldr	r2, [r7, #28]
 800b45e:	440a      	add	r2, r1
 800b460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	69fa      	ldr	r2, [r7, #28]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b484:	0cdb      	lsrs	r3, r3, #19
 800b486:	04db      	lsls	r3, r3, #19
 800b488:	6113      	str	r3, [r2, #16]
 800b48a:	e092      	b.n	800b5b2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a6:	0cdb      	lsrs	r3, r3, #19
 800b4a8:	04db      	lsls	r3, r3, #19
 800b4aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	0151      	lsls	r1, r2, #5
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	440a      	add	r2, r1
 800b4c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d11a      	bne.n	800b50c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	691a      	ldr	r2, [r3, #16]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d903      	bls.n	800b4ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	0151      	lsls	r1, r2, #5
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	440a      	add	r2, r1
 800b500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b508:	6113      	str	r3, [r2, #16]
 800b50a:	e01b      	b.n	800b544 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	4413      	add	r3, r2
 800b514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b518:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6919      	ldr	r1, [r3, #16]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	440b      	add	r3, r1
 800b524:	1e59      	subs	r1, r3, #1
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b52e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b530:	4ba2      	ldr	r3, [pc, #648]	; (800b7bc <USB_EPStartXfer+0x3c0>)
 800b532:	400b      	ands	r3, r1
 800b534:	69b9      	ldr	r1, [r7, #24]
 800b536:	0148      	lsls	r0, r1, #5
 800b538:	69f9      	ldr	r1, [r7, #28]
 800b53a:	4401      	add	r1, r0
 800b53c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b540:	4313      	orrs	r3, r2
 800b542:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	691a      	ldr	r2, [r3, #16]
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b55a:	69b9      	ldr	r1, [r7, #24]
 800b55c:	0148      	lsls	r0, r1, #5
 800b55e:	69f9      	ldr	r1, [r7, #28]
 800b560:	4401      	add	r1, r0
 800b562:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b566:	4313      	orrs	r3, r2
 800b568:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	791b      	ldrb	r3, [r3, #4]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d11f      	bne.n	800b5b2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	015a      	lsls	r2, r3, #5
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	4413      	add	r3, r2
 800b57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	0151      	lsls	r1, r2, #5
 800b584:	69fa      	ldr	r2, [r7, #28]
 800b586:	440a      	add	r2, r1
 800b588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b58c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b590:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	015a      	lsls	r2, r3, #5
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	4413      	add	r3, r2
 800b59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	0151      	lsls	r1, r2, #5
 800b5a4:	69fa      	ldr	r2, [r7, #28]
 800b5a6:	440a      	add	r2, r1
 800b5a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b5b2:	79fb      	ldrb	r3, [r7, #7]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d14b      	bne.n	800b650 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	69db      	ldr	r3, [r3, #28]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d009      	beq.n	800b5d4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	791b      	ldrb	r3, [r3, #4]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d128      	bne.n	800b62e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d110      	bne.n	800b60e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	0151      	lsls	r1, r2, #5
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	440a      	add	r2, r1
 800b602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b60a:	6013      	str	r3, [r2, #0]
 800b60c:	e00f      	b.n	800b62e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	015a      	lsls	r2, r3, #5
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	4413      	add	r3, r2
 800b616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	0151      	lsls	r1, r2, #5
 800b620:	69fa      	ldr	r2, [r7, #28]
 800b622:	440a      	add	r2, r1
 800b624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b62c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	0151      	lsls	r1, r2, #5
 800b640:	69fa      	ldr	r2, [r7, #28]
 800b642:	440a      	add	r2, r1
 800b644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b648:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	e165      	b.n	800b91c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	69fa      	ldr	r2, [r7, #28]
 800b664:	440a      	add	r2, r1
 800b666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b66a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b66e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	791b      	ldrb	r3, [r3, #4]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d015      	beq.n	800b6a4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f000 814d 	beq.w	800b91c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	2101      	movs	r1, #1
 800b694:	fa01 f303 	lsl.w	r3, r1, r3
 800b698:	69f9      	ldr	r1, [r7, #28]
 800b69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	634b      	str	r3, [r1, #52]	; 0x34
 800b6a2:	e13b      	b.n	800b91c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d110      	bne.n	800b6d6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	69fa      	ldr	r2, [r7, #28]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	e00f      	b.n	800b6f6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	0151      	lsls	r1, r2, #5
 800b6e8:	69fa      	ldr	r2, [r7, #28]
 800b6ea:	440a      	add	r2, r1
 800b6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	68d9      	ldr	r1, [r3, #12]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	781a      	ldrb	r2, [r3, #0]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	b298      	uxth	r0, r3
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	4603      	mov	r3, r0
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 f9b8 	bl	800ba80 <USB_WritePacket>
 800b710:	e104      	b.n	800b91c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b72c:	0cdb      	lsrs	r3, r3, #19
 800b72e:	04db      	lsls	r3, r3, #19
 800b730:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	0151      	lsls	r1, r2, #5
 800b744:	69fa      	ldr	r2, [r7, #28]
 800b746:	440a      	add	r2, r1
 800b748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b74c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b754:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d131      	bne.n	800b7c0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	689a      	ldr	r2, [r3, #8]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	689a      	ldr	r2, [r3, #8]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	015a      	lsls	r2, r3, #5
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b780:	691a      	ldr	r2, [r3, #16]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b78a:	69b9      	ldr	r1, [r7, #24]
 800b78c:	0148      	lsls	r0, r1, #5
 800b78e:	69f9      	ldr	r1, [r7, #28]
 800b790:	4401      	add	r1, r0
 800b792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b796:	4313      	orrs	r3, r2
 800b798:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7b8:	6113      	str	r3, [r2, #16]
 800b7ba:	e061      	b.n	800b880 <USB_EPStartXfer+0x484>
 800b7bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d123      	bne.n	800b810 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d4:	691a      	ldr	r2, [r3, #16]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7de:	69b9      	ldr	r1, [r7, #24]
 800b7e0:	0148      	lsls	r0, r1, #5
 800b7e2:	69f9      	ldr	r1, [r7, #28]
 800b7e4:	4401      	add	r1, r0
 800b7e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	015a      	lsls	r2, r3, #5
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	0151      	lsls	r1, r2, #5
 800b800:	69fa      	ldr	r2, [r7, #28]
 800b802:	440a      	add	r2, r1
 800b804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b80c:	6113      	str	r3, [r2, #16]
 800b80e:	e037      	b.n	800b880 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	691a      	ldr	r2, [r3, #16]
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	1e5a      	subs	r2, r3, #1
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	fbb2 f3f3 	udiv	r3, r2, r3
 800b824:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	8afa      	ldrh	r2, [r7, #22]
 800b82c:	fb03 f202 	mul.w	r2, r3, r2
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b840:	691a      	ldr	r2, [r3, #16]
 800b842:	8afb      	ldrh	r3, [r7, #22]
 800b844:	04d9      	lsls	r1, r3, #19
 800b846:	4b38      	ldr	r3, [pc, #224]	; (800b928 <USB_EPStartXfer+0x52c>)
 800b848:	400b      	ands	r3, r1
 800b84a:	69b9      	ldr	r1, [r7, #24]
 800b84c:	0148      	lsls	r0, r1, #5
 800b84e:	69f9      	ldr	r1, [r7, #28]
 800b850:	4401      	add	r1, r0
 800b852:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b856:	4313      	orrs	r3, r2
 800b858:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b866:	691a      	ldr	r2, [r3, #16]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b870:	69b9      	ldr	r1, [r7, #24]
 800b872:	0148      	lsls	r0, r1, #5
 800b874:	69f9      	ldr	r1, [r7, #28]
 800b876:	4401      	add	r1, r0
 800b878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b87c:	4313      	orrs	r3, r2
 800b87e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10d      	bne.n	800b8a2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d009      	beq.n	800b8a2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	68d9      	ldr	r1, [r3, #12]
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89e:	460a      	mov	r2, r1
 800b8a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	791b      	ldrb	r3, [r3, #4]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d128      	bne.n	800b8fc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d110      	bne.n	800b8dc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	015a      	lsls	r2, r3, #5
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	69ba      	ldr	r2, [r7, #24]
 800b8ca:	0151      	lsls	r1, r2, #5
 800b8cc:	69fa      	ldr	r2, [r7, #28]
 800b8ce:	440a      	add	r2, r1
 800b8d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	e00f      	b.n	800b8fc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	69ba      	ldr	r2, [r7, #24]
 800b8ec:	0151      	lsls	r1, r2, #5
 800b8ee:	69fa      	ldr	r2, [r7, #28]
 800b8f0:	440a      	add	r2, r1
 800b8f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	015a      	lsls	r2, r3, #5
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	4413      	add	r3, r2
 800b904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	69ba      	ldr	r2, [r7, #24]
 800b90c:	0151      	lsls	r1, r2, #5
 800b90e:	69fa      	ldr	r2, [r7, #28]
 800b910:	440a      	add	r2, r1
 800b912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b91a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3720      	adds	r7, #32
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	1ff80000 	.word	0x1ff80000

0800b92c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	785b      	ldrb	r3, [r3, #1]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d14a      	bne.n	800b9e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b95e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b962:	f040 8086 	bne.w	800ba72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	7812      	ldrb	r2, [r2, #0]
 800b97a:	0151      	lsls	r1, r2, #5
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	440a      	add	r2, r1
 800b980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b988:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	7812      	ldrb	r2, [r2, #0]
 800b99e:	0151      	lsls	r1, r2, #5
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	440a      	add	r2, r1
 800b9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d902      	bls.n	800b9c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75fb      	strb	r3, [r7, #23]
          break;
 800b9c2:	e056      	b.n	800ba72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9dc:	d0e7      	beq.n	800b9ae <USB_EPStopXfer+0x82>
 800b9de:	e048      	b.n	800ba72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f8:	d13b      	bne.n	800ba72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	7812      	ldrb	r2, [r2, #0]
 800ba0e:	0151      	lsls	r1, r2, #5
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	440a      	add	r2, r1
 800ba14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	7812      	ldrb	r2, [r2, #0]
 800ba32:	0151      	lsls	r1, r2, #5
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	440a      	add	r2, r1
 800ba38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3301      	adds	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d902      	bls.n	800ba58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	75fb      	strb	r3, [r7, #23]
          break;
 800ba56:	e00c      	b.n	800ba72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba70:	d0e7      	beq.n	800ba42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b089      	sub	sp, #36	; 0x24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	460b      	mov	r3, r1
 800ba90:	71fb      	strb	r3, [r7, #7]
 800ba92:	4613      	mov	r3, r2
 800ba94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ba9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d123      	bne.n	800baee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800baa6:	88bb      	ldrh	r3, [r7, #4]
 800baa8:	3303      	adds	r3, #3
 800baaa:	089b      	lsrs	r3, r3, #2
 800baac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800baae:	2300      	movs	r3, #0
 800bab0:	61bb      	str	r3, [r7, #24]
 800bab2:	e018      	b.n	800bae6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	031a      	lsls	r2, r3, #12
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	4413      	add	r3, r2
 800babc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac0:	461a      	mov	r2, r3
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	3301      	adds	r3, #1
 800bacc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	3301      	adds	r3, #1
 800bad2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	3301      	adds	r3, #1
 800bad8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	3301      	adds	r3, #1
 800bade:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	3301      	adds	r3, #1
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	69ba      	ldr	r2, [r7, #24]
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	429a      	cmp	r2, r3
 800baec:	d3e2      	bcc.n	800bab4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3724      	adds	r7, #36	; 0x24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b08b      	sub	sp, #44	; 0x2c
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	4613      	mov	r3, r2
 800bb08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	089b      	lsrs	r3, r3, #2
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	f003 0303 	and.w	r3, r3, #3
 800bb20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bb22:	2300      	movs	r3, #0
 800bb24:	623b      	str	r3, [r7, #32]
 800bb26:	e014      	b.n	800bb52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	3301      	adds	r3, #1
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	3301      	adds	r3, #1
 800bb44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	3301      	adds	r3, #1
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	623b      	str	r3, [r7, #32]
 800bb52:	6a3a      	ldr	r2, [r7, #32]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d3e6      	bcc.n	800bb28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bb5a:	8bfb      	ldrh	r3, [r7, #30]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d01e      	beq.n	800bb9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bb60:	2300      	movs	r3, #0
 800bb62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f107 0310 	add.w	r3, r7, #16
 800bb70:	6812      	ldr	r2, [r2, #0]
 800bb72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	701a      	strb	r2, [r3, #0]
      i++;
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	623b      	str	r3, [r7, #32]
      pDest++;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	3301      	adds	r3, #1
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bb92:	8bfb      	ldrh	r3, [r7, #30]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bb98:	8bfb      	ldrh	r3, [r7, #30]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1ea      	bne.n	800bb74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	372c      	adds	r7, #44	; 0x2c
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	785b      	ldrb	r3, [r3, #1]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d12c      	bne.n	800bc22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	db12      	blt.n	800bc00 <USB_EPSetStall+0x54>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00f      	beq.n	800bc00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	0151      	lsls	r1, r2, #5
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	440a      	add	r2, r1
 800bbf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbfe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	015a      	lsls	r2, r3, #5
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	4413      	add	r3, r2
 800bc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	0151      	lsls	r1, r2, #5
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	440a      	add	r2, r1
 800bc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	e02b      	b.n	800bc7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	015a      	lsls	r2, r3, #5
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4413      	add	r3, r2
 800bc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	db12      	blt.n	800bc5a <USB_EPSetStall+0xae>
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00f      	beq.n	800bc5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	015a      	lsls	r2, r3, #5
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	4413      	add	r3, r2
 800bc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	0151      	lsls	r1, r2, #5
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	440a      	add	r2, r1
 800bc50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	0151      	lsls	r1, r2, #5
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	440a      	add	r2, r1
 800bc70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d128      	bne.n	800bcf6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	0151      	lsls	r1, r2, #5
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	440a      	add	r2, r1
 800bcba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	791b      	ldrb	r3, [r3, #4]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d003      	beq.n	800bcd4 <USB_EPClearStall+0x4c>
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	791b      	ldrb	r3, [r3, #4]
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d138      	bne.n	800bd46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	e027      	b.n	800bd46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	0151      	lsls	r1, r2, #5
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	440a      	add	r2, r1
 800bd0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	791b      	ldrb	r3, [r3, #4]
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d003      	beq.n	800bd26 <USB_EPClearStall+0x9e>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	791b      	ldrb	r3, [r3, #4]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d10f      	bne.n	800bd46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	0151      	lsls	r1, r2, #5
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	440a      	add	r2, r1
 800bd3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bd76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	78fb      	ldrb	r3, [r7, #3]
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bd88:	68f9      	ldr	r1, [r7, #12]
 800bd8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdba:	f023 0303 	bic.w	r3, r3, #3
 800bdbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdce:	f023 0302 	bic.w	r3, r3, #2
 800bdd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b085      	sub	sp, #20
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be10:	f043 0302 	orr.w	r3, r3, #2
 800be14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	4013      	ands	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be3c:	68fb      	ldr	r3, [r7, #12]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b085      	sub	sp, #20
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	4013      	ands	r3, r2
 800be6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	0c1b      	lsrs	r3, r3, #16
}
 800be72:	4618      	mov	r0, r3
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800be7e:	b480      	push	{r7}
 800be80:	b085      	sub	sp, #20
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be9a:	69db      	ldr	r3, [r3, #28]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	4013      	ands	r3, r2
 800bea0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	b29b      	uxth	r3, r3
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	4013      	ands	r3, r2
 800bede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bee0:	68bb      	ldr	r3, [r7, #8]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800beee:	b480      	push	{r7}
 800bef0:	b087      	sub	sp, #28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bf12:	78fb      	ldrb	r3, [r7, #3]
 800bf14:	f003 030f 	and.w	r3, r3, #15
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf1e:	01db      	lsls	r3, r3, #7
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bf28:	78fb      	ldrb	r3, [r7, #3]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	371c      	adds	r7, #28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	f003 0301 	and.w	r3, r3, #1
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b085      	sub	sp, #20
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bf84:	f023 0307 	bic.w	r3, r3, #7
 800bf88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	333c      	adds	r3, #60	; 0x3c
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	4a26      	ldr	r2, [pc, #152]	; (800c064 <USB_EP0_OutStart+0xb8>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d90a      	bls.n	800bfe6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfe0:	d101      	bne.n	800bfe6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e037      	b.n	800c056 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfec:	461a      	mov	r2, r3
 800bfee:	2300      	movs	r3, #0
 800bff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c014:	f043 0318 	orr.w	r3, r3, #24
 800c018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c028:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c02c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c02e:	7afb      	ldrb	r3, [r7, #11]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d10f      	bne.n	800c054 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c03a:	461a      	mov	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c04e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	4f54300a 	.word	0x4f54300a

0800c068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3301      	adds	r3, #1
 800c078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c080:	d901      	bls.n	800c086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e01b      	b.n	800c0be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	daf2      	bge.n	800c074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	f043 0201 	orr.w	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c0aa:	d901      	bls.n	800c0b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	e006      	b.n	800c0be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d0f0      	beq.n	800c09e <USB_CoreReset+0x36>

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
	...

0800c0cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c0d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c0dc:	f005 fffc 	bl	80120d8 <USBD_static_malloc>
 800c0e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d109      	bne.n	800c0fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	32b0      	adds	r2, #176	; 0xb0
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	e0d4      	b.n	800c2a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c0fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f006 ff08 	bl	8012f18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	32b0      	adds	r2, #176	; 0xb0
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	32b0      	adds	r2, #176	; 0xb0
 800c122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	7c1b      	ldrb	r3, [r3, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d138      	bne.n	800c1a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c134:	4b5e      	ldr	r3, [pc, #376]	; (800c2b0 <USBD_CDC_Init+0x1e4>)
 800c136:	7819      	ldrb	r1, [r3, #0]
 800c138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c13c:	2202      	movs	r2, #2
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f005 fea7 	bl	8011e92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c144:	4b5a      	ldr	r3, [pc, #360]	; (800c2b0 <USBD_CDC_Init+0x1e4>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	f003 020f 	and.w	r2, r3, #15
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	440b      	add	r3, r1
 800c158:	3324      	adds	r3, #36	; 0x24
 800c15a:	2201      	movs	r2, #1
 800c15c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c15e:	4b55      	ldr	r3, [pc, #340]	; (800c2b4 <USBD_CDC_Init+0x1e8>)
 800c160:	7819      	ldrb	r1, [r3, #0]
 800c162:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c166:	2202      	movs	r2, #2
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f005 fe92 	bl	8011e92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c16e:	4b51      	ldr	r3, [pc, #324]	; (800c2b4 <USBD_CDC_Init+0x1e8>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	f003 020f 	and.w	r2, r3, #15
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	440b      	add	r3, r1
 800c182:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c186:	2201      	movs	r2, #1
 800c188:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c18a:	4b4b      	ldr	r3, [pc, #300]	; (800c2b8 <USBD_CDC_Init+0x1ec>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	f003 020f 	and.w	r2, r3, #15
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	440b      	add	r3, r1
 800c19e:	3326      	adds	r3, #38	; 0x26
 800c1a0:	2210      	movs	r2, #16
 800c1a2:	801a      	strh	r2, [r3, #0]
 800c1a4:	e035      	b.n	800c212 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c1a6:	4b42      	ldr	r3, [pc, #264]	; (800c2b0 <USBD_CDC_Init+0x1e4>)
 800c1a8:	7819      	ldrb	r1, [r3, #0]
 800c1aa:	2340      	movs	r3, #64	; 0x40
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f005 fe6f 	bl	8011e92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c1b4:	4b3e      	ldr	r3, [pc, #248]	; (800c2b0 <USBD_CDC_Init+0x1e4>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	f003 020f 	and.w	r2, r3, #15
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	440b      	add	r3, r1
 800c1c8:	3324      	adds	r3, #36	; 0x24
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c1ce:	4b39      	ldr	r3, [pc, #228]	; (800c2b4 <USBD_CDC_Init+0x1e8>)
 800c1d0:	7819      	ldrb	r1, [r3, #0]
 800c1d2:	2340      	movs	r3, #64	; 0x40
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f005 fe5b 	bl	8011e92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c1dc:	4b35      	ldr	r3, [pc, #212]	; (800c2b4 <USBD_CDC_Init+0x1e8>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f003 020f 	and.w	r2, r3, #15
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	440b      	add	r3, r1
 800c1f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c1f8:	4b2f      	ldr	r3, [pc, #188]	; (800c2b8 <USBD_CDC_Init+0x1ec>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	f003 020f 	and.w	r2, r3, #15
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	440b      	add	r3, r1
 800c20c:	3326      	adds	r3, #38	; 0x26
 800c20e:	2210      	movs	r2, #16
 800c210:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c212:	4b29      	ldr	r3, [pc, #164]	; (800c2b8 <USBD_CDC_Init+0x1ec>)
 800c214:	7819      	ldrb	r1, [r3, #0]
 800c216:	2308      	movs	r3, #8
 800c218:	2203      	movs	r2, #3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f005 fe39 	bl	8011e92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c220:	4b25      	ldr	r3, [pc, #148]	; (800c2b8 <USBD_CDC_Init+0x1ec>)
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	f003 020f 	and.w	r2, r3, #15
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	440b      	add	r3, r1
 800c234:	3324      	adds	r3, #36	; 0x24
 800c236:	2201      	movs	r2, #1
 800c238:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	33b0      	adds	r3, #176	; 0xb0
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c270:	2302      	movs	r3, #2
 800c272:	e018      	b.n	800c2a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	7c1b      	ldrb	r3, [r3, #16]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c27c:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <USBD_CDC_Init+0x1e8>)
 800c27e:	7819      	ldrb	r1, [r3, #0]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f005 fef0 	bl	8012070 <USBD_LL_PrepareReceive>
 800c290:	e008      	b.n	800c2a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c292:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <USBD_CDC_Init+0x1e8>)
 800c294:	7819      	ldrb	r1, [r3, #0]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c29c:	2340      	movs	r3, #64	; 0x40
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f005 fee6 	bl	8012070 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000377 	.word	0x20000377
 800c2b4:	20000378 	.word	0x20000378
 800c2b8:	20000379 	.word	0x20000379

0800c2bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c2c8:	4b3a      	ldr	r3, [pc, #232]	; (800c3b4 <USBD_CDC_DeInit+0xf8>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f005 fe05 	bl	8011ede <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c2d4:	4b37      	ldr	r3, [pc, #220]	; (800c3b4 <USBD_CDC_DeInit+0xf8>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	f003 020f 	and.w	r2, r3, #15
 800c2dc:	6879      	ldr	r1, [r7, #4]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	440b      	add	r3, r1
 800c2e8:	3324      	adds	r3, #36	; 0x24
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c2ee:	4b32      	ldr	r3, [pc, #200]	; (800c3b8 <USBD_CDC_DeInit+0xfc>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f005 fdf2 	bl	8011ede <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c2fa:	4b2f      	ldr	r3, [pc, #188]	; (800c3b8 <USBD_CDC_DeInit+0xfc>)
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	f003 020f 	and.w	r2, r3, #15
 800c302:	6879      	ldr	r1, [r7, #4]
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	440b      	add	r3, r1
 800c30e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c312:	2200      	movs	r2, #0
 800c314:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c316:	4b29      	ldr	r3, [pc, #164]	; (800c3bc <USBD_CDC_DeInit+0x100>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f005 fdde 	bl	8011ede <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c322:	4b26      	ldr	r3, [pc, #152]	; (800c3bc <USBD_CDC_DeInit+0x100>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 020f 	and.w	r2, r3, #15
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	4613      	mov	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	440b      	add	r3, r1
 800c336:	3324      	adds	r3, #36	; 0x24
 800c338:	2200      	movs	r2, #0
 800c33a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c33c:	4b1f      	ldr	r3, [pc, #124]	; (800c3bc <USBD_CDC_DeInit+0x100>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f003 020f 	and.w	r2, r3, #15
 800c344:	6879      	ldr	r1, [r7, #4]
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	440b      	add	r3, r1
 800c350:	3326      	adds	r3, #38	; 0x26
 800c352:	2200      	movs	r2, #0
 800c354:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	32b0      	adds	r2, #176	; 0xb0
 800c360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d01f      	beq.n	800c3a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	33b0      	adds	r3, #176	; 0xb0
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	32b0      	adds	r2, #176	; 0xb0
 800c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f005 feb2 	bl	80120f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	32b0      	adds	r2, #176	; 0xb0
 800c39a:	2100      	movs	r1, #0
 800c39c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20000377 	.word	0x20000377
 800c3b8:	20000378 	.word	0x20000378
 800c3bc:	20000379 	.word	0x20000379

0800c3c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	32b0      	adds	r2, #176	; 0xb0
 800c3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e0bf      	b.n	800c570 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d050      	beq.n	800c49e <USBD_CDC_Setup+0xde>
 800c3fc:	2b20      	cmp	r3, #32
 800c3fe:	f040 80af 	bne.w	800c560 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	88db      	ldrh	r3, [r3, #6]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d03a      	beq.n	800c480 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	b25b      	sxtb	r3, r3
 800c410:	2b00      	cmp	r3, #0
 800c412:	da1b      	bge.n	800c44c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	33b0      	adds	r3, #176	; 0xb0
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c42a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	88d2      	ldrh	r2, [r2, #6]
 800c430:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	88db      	ldrh	r3, [r3, #6]
 800c436:	2b07      	cmp	r3, #7
 800c438:	bf28      	it	cs
 800c43a:	2307      	movcs	r3, #7
 800c43c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	89fa      	ldrh	r2, [r7, #14]
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f001 fd49 	bl	800dedc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c44a:	e090      	b.n	800c56e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	785a      	ldrb	r2, [r3, #1]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	88db      	ldrh	r3, [r3, #6]
 800c45a:	2b3f      	cmp	r3, #63	; 0x3f
 800c45c:	d803      	bhi.n	800c466 <USBD_CDC_Setup+0xa6>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	88db      	ldrh	r3, [r3, #6]
 800c462:	b2da      	uxtb	r2, r3
 800c464:	e000      	b.n	800c468 <USBD_CDC_Setup+0xa8>
 800c466:	2240      	movs	r2, #64	; 0x40
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c46e:	6939      	ldr	r1, [r7, #16]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c476:	461a      	mov	r2, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 fd5b 	bl	800df34 <USBD_CtlPrepareRx>
      break;
 800c47e:	e076      	b.n	800c56e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	33b0      	adds	r3, #176	; 0xb0
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	7850      	ldrb	r0, [r2, #1]
 800c496:	2200      	movs	r2, #0
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	4798      	blx	r3
      break;
 800c49c:	e067      	b.n	800c56e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	785b      	ldrb	r3, [r3, #1]
 800c4a2:	2b0b      	cmp	r3, #11
 800c4a4:	d851      	bhi.n	800c54a <USBD_CDC_Setup+0x18a>
 800c4a6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ac <USBD_CDC_Setup+0xec>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c4dd 	.word	0x0800c4dd
 800c4b0:	0800c559 	.word	0x0800c559
 800c4b4:	0800c54b 	.word	0x0800c54b
 800c4b8:	0800c54b 	.word	0x0800c54b
 800c4bc:	0800c54b 	.word	0x0800c54b
 800c4c0:	0800c54b 	.word	0x0800c54b
 800c4c4:	0800c54b 	.word	0x0800c54b
 800c4c8:	0800c54b 	.word	0x0800c54b
 800c4cc:	0800c54b 	.word	0x0800c54b
 800c4d0:	0800c54b 	.word	0x0800c54b
 800c4d4:	0800c507 	.word	0x0800c507
 800c4d8:	0800c531 	.word	0x0800c531
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d107      	bne.n	800c4f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c4e8:	f107 030a 	add.w	r3, r7, #10
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f001 fcf3 	bl	800dedc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c4f6:	e032      	b.n	800c55e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f001 fc7d 	bl	800ddfa <USBD_CtlError>
            ret = USBD_FAIL;
 800c500:	2303      	movs	r3, #3
 800c502:	75fb      	strb	r3, [r7, #23]
          break;
 800c504:	e02b      	b.n	800c55e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d107      	bne.n	800c522 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c512:	f107 030d 	add.w	r3, r7, #13
 800c516:	2201      	movs	r2, #1
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 fcde 	bl	800dedc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c520:	e01d      	b.n	800c55e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f001 fc68 	bl	800ddfa <USBD_CtlError>
            ret = USBD_FAIL;
 800c52a:	2303      	movs	r3, #3
 800c52c:	75fb      	strb	r3, [r7, #23]
          break;
 800c52e:	e016      	b.n	800c55e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d00f      	beq.n	800c55c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 fc5b 	bl	800ddfa <USBD_CtlError>
            ret = USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c548:	e008      	b.n	800c55c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 fc54 	bl	800ddfa <USBD_CtlError>
          ret = USBD_FAIL;
 800c552:	2303      	movs	r3, #3
 800c554:	75fb      	strb	r3, [r7, #23]
          break;
 800c556:	e002      	b.n	800c55e <USBD_CDC_Setup+0x19e>
          break;
 800c558:	bf00      	nop
 800c55a:	e008      	b.n	800c56e <USBD_CDC_Setup+0x1ae>
          break;
 800c55c:	bf00      	nop
      }
      break;
 800c55e:	e006      	b.n	800c56e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f001 fc49 	bl	800ddfa <USBD_CtlError>
      ret = USBD_FAIL;
 800c568:	2303      	movs	r3, #3
 800c56a:	75fb      	strb	r3, [r7, #23]
      break;
 800c56c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c58a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	32b0      	adds	r2, #176	; 0xb0
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e065      	b.n	800c66e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	32b0      	adds	r2, #176	; 0xb0
 800c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c5b2:	78fb      	ldrb	r3, [r7, #3]
 800c5b4:	f003 020f 	and.w	r2, r3, #15
 800c5b8:	6879      	ldr	r1, [r7, #4]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4413      	add	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	440b      	add	r3, r1
 800c5c4:	3318      	adds	r3, #24
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d02f      	beq.n	800c62c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	f003 020f 	and.w	r2, r3, #15
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	440b      	add	r3, r1
 800c5de:	3318      	adds	r3, #24
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	f003 010f 	and.w	r1, r3, #15
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4403      	add	r3, r0
 800c5f4:	331c      	adds	r3, #28
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c5fc:	fb01 f303 	mul.w	r3, r1, r3
 800c600:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c602:	2b00      	cmp	r3, #0
 800c604:	d112      	bne.n	800c62c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c606:	78fb      	ldrb	r3, [r7, #3]
 800c608:	f003 020f 	and.w	r2, r3, #15
 800c60c:	6879      	ldr	r1, [r7, #4]
 800c60e:	4613      	mov	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	440b      	add	r3, r1
 800c618:	3318      	adds	r3, #24
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c61e:	78f9      	ldrb	r1, [r7, #3]
 800c620:	2300      	movs	r3, #0
 800c622:	2200      	movs	r2, #0
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f005 fd02 	bl	801202e <USBD_LL_Transmit>
 800c62a:	e01f      	b.n	800c66c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	33b0      	adds	r3, #176	; 0xb0
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d010      	beq.n	800c66c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	33b0      	adds	r3, #176	; 0xb0
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c668:	78fa      	ldrb	r2, [r7, #3]
 800c66a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	32b0      	adds	r2, #176	; 0xb0
 800c68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c690:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	32b0      	adds	r2, #176	; 0xb0
 800c69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e01a      	b.n	800c6de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f005 fd00 	bl	80120b2 <USBD_LL_GetRxDataSize>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	33b0      	adds	r3, #176	; 0xb0
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	32b0      	adds	r2, #176	; 0xb0
 800c6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c704:	2303      	movs	r3, #3
 800c706:	e025      	b.n	800c754 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	33b0      	adds	r3, #176	; 0xb0
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01a      	beq.n	800c752 <USBD_CDC_EP0_RxReady+0x6c>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c722:	2bff      	cmp	r3, #255	; 0xff
 800c724:	d015      	beq.n	800c752 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	33b0      	adds	r3, #176	; 0xb0
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c73e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c746:	b292      	uxth	r2, r2
 800c748:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	22ff      	movs	r2, #255	; 0xff
 800c74e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c764:	2182      	movs	r1, #130	; 0x82
 800c766:	4818      	ldr	r0, [pc, #96]	; (800c7c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c768:	f000 fd0f 	bl	800d18a <USBD_GetEpDesc>
 800c76c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c76e:	2101      	movs	r1, #1
 800c770:	4815      	ldr	r0, [pc, #84]	; (800c7c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c772:	f000 fd0a 	bl	800d18a <USBD_GetEpDesc>
 800c776:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c778:	2181      	movs	r1, #129	; 0x81
 800c77a:	4813      	ldr	r0, [pc, #76]	; (800c7c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c77c:	f000 fd05 	bl	800d18a <USBD_GetEpDesc>
 800c780:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2210      	movs	r2, #16
 800c78c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d006      	beq.n	800c7a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2200      	movs	r2, #0
 800c798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c79c:	711a      	strb	r2, [r3, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d006      	beq.n	800c7b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7b0:	711a      	strb	r2, [r3, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2243      	movs	r2, #67	; 0x43
 800c7ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c7bc:	4b02      	ldr	r3, [pc, #8]	; (800c7c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000334 	.word	0x20000334

0800c7cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c7d4:	2182      	movs	r1, #130	; 0x82
 800c7d6:	4818      	ldr	r0, [pc, #96]	; (800c838 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c7d8:	f000 fcd7 	bl	800d18a <USBD_GetEpDesc>
 800c7dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c7de:	2101      	movs	r1, #1
 800c7e0:	4815      	ldr	r0, [pc, #84]	; (800c838 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c7e2:	f000 fcd2 	bl	800d18a <USBD_GetEpDesc>
 800c7e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c7e8:	2181      	movs	r1, #129	; 0x81
 800c7ea:	4813      	ldr	r0, [pc, #76]	; (800c838 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c7ec:	f000 fccd 	bl	800d18a <USBD_GetEpDesc>
 800c7f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2210      	movs	r2, #16
 800c7fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d006      	beq.n	800c812 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	2200      	movs	r2, #0
 800c808:	711a      	strb	r2, [r3, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f042 0202 	orr.w	r2, r2, #2
 800c810:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d006      	beq.n	800c826 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	711a      	strb	r2, [r3, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	f042 0202 	orr.w	r2, r2, #2
 800c824:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2243      	movs	r2, #67	; 0x43
 800c82a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c82c:	4b02      	ldr	r3, [pc, #8]	; (800c838 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20000334 	.word	0x20000334

0800c83c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c844:	2182      	movs	r1, #130	; 0x82
 800c846:	4818      	ldr	r0, [pc, #96]	; (800c8a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c848:	f000 fc9f 	bl	800d18a <USBD_GetEpDesc>
 800c84c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c84e:	2101      	movs	r1, #1
 800c850:	4815      	ldr	r0, [pc, #84]	; (800c8a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c852:	f000 fc9a 	bl	800d18a <USBD_GetEpDesc>
 800c856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c858:	2181      	movs	r1, #129	; 0x81
 800c85a:	4813      	ldr	r0, [pc, #76]	; (800c8a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c85c:	f000 fc95 	bl	800d18a <USBD_GetEpDesc>
 800c860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	2210      	movs	r2, #16
 800c86c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d006      	beq.n	800c882 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2200      	movs	r2, #0
 800c878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c87c:	711a      	strb	r2, [r3, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d006      	beq.n	800c896 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c890:	711a      	strb	r2, [r3, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2243      	movs	r2, #67	; 0x43
 800c89a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c89c:	4b02      	ldr	r3, [pc, #8]	; (800c8a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20000334 	.word	0x20000334

0800c8ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	220a      	movs	r2, #10
 800c8b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c8ba:	4b03      	ldr	r3, [pc, #12]	; (800c8c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	200002f0 	.word	0x200002f0

0800c8cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e009      	b.n	800c8f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	33b0      	adds	r3, #176	; 0xb0
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	32b0      	adds	r2, #176	; 0xb0
 800c916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c922:	2303      	movs	r3, #3
 800c924:	e008      	b.n	800c938 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	371c      	adds	r7, #28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	32b0      	adds	r2, #176	; 0xb0
 800c958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c95c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d101      	bne.n	800c968 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c964:	2303      	movs	r3, #3
 800c966:	e004      	b.n	800c972 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
	...

0800c980 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	32b0      	adds	r2, #176	; 0xb0
 800c992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c996:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	32b0      	adds	r2, #176	; 0xb0
 800c9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e018      	b.n	800c9e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	7c1b      	ldrb	r3, [r3, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10a      	bne.n	800c9cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <USBD_CDC_ReceivePacket+0x68>)
 800c9b8:	7819      	ldrb	r1, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f005 fb53 	bl	8012070 <USBD_LL_PrepareReceive>
 800c9ca:	e008      	b.n	800c9de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9cc:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <USBD_CDC_ReceivePacket+0x68>)
 800c9ce:	7819      	ldrb	r1, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9d6:	2340      	movs	r3, #64	; 0x40
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f005 fb49 	bl	8012070 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	20000378 	.word	0x20000378

0800c9ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e01f      	b.n	800ca44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	79fa      	ldrb	r2, [r7, #7]
 800ca36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f005 f9c3 	bl	8011dc4 <USBD_LL_Init>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ca56:	2300      	movs	r3, #0
 800ca58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e025      	b.n	800cab0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	32ae      	adds	r2, #174	; 0xae
 800ca76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00f      	beq.n	800caa0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	32ae      	adds	r2, #174	; 0xae
 800ca8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	f107 020e 	add.w	r2, r7, #14
 800ca94:	4610      	mov	r0, r2
 800ca96:	4798      	blx	r3
 800ca98:	4602      	mov	r2, r0
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800caa6:	1c5a      	adds	r2, r3, #1
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f005 f9cb 	bl	8011e5c <USBD_LL_Start>
 800cac6:	4603      	mov	r3, r0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cad8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cada:	4618      	mov	r0, r3
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	460b      	mov	r3, r1
 800caf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d009      	beq.n	800cb14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	78fa      	ldrb	r2, [r7, #3]
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	4798      	blx	r3
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	460b      	mov	r3, r1
 800cb28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	78fa      	ldrb	r2, [r7, #3]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	4798      	blx	r3
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cb44:	2303      	movs	r3, #3
 800cb46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f001 f90e 	bl	800dd86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cb78:	461a      	mov	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb86:	f003 031f 	and.w	r3, r3, #31
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d01a      	beq.n	800cbc4 <USBD_LL_SetupStage+0x72>
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d822      	bhi.n	800cbd8 <USBD_LL_SetupStage+0x86>
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <USBD_LL_SetupStage+0x4a>
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d00a      	beq.n	800cbb0 <USBD_LL_SetupStage+0x5e>
 800cb9a:	e01d      	b.n	800cbd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fb65 	bl	800d274 <USBD_StdDevReq>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]
      break;
 800cbae:	e020      	b.n	800cbf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fbcd 	bl	800d358 <USBD_StdItfReq>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc2:	e016      	b.n	800cbf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fc2f 	bl	800d430 <USBD_StdEPReq>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd6:	e00c      	b.n	800cbf2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cbde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f005 f998 	bl	8011f1c <USBD_LL_StallEP>
 800cbec:	4603      	mov	r3, r0
 800cbee:	73fb      	strb	r3, [r7, #15]
      break;
 800cbf0:	bf00      	nop
  }

  return ret;
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	460b      	mov	r3, r1
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cc0e:	7afb      	ldrb	r3, [r7, #11]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d16e      	bne.n	800ccf2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cc1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	f040 8098 	bne.w	800cd58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	689a      	ldr	r2, [r3, #8]
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d913      	bls.n	800cc5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	689a      	ldr	r2, [r3, #8]
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	1ad2      	subs	r2, r2, r3
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	68da      	ldr	r2, [r3, #12]
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	bf28      	it	cs
 800cc4e:	4613      	movcs	r3, r2
 800cc50:	461a      	mov	r2, r3
 800cc52:	6879      	ldr	r1, [r7, #4]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f001 f98a 	bl	800df6e <USBD_CtlContinueRx>
 800cc5a:	e07d      	b.n	800cd58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cc62:	f003 031f 	and.w	r3, r3, #31
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d014      	beq.n	800cc94 <USBD_LL_DataOutStage+0x98>
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d81d      	bhi.n	800ccaa <USBD_LL_DataOutStage+0xae>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <USBD_LL_DataOutStage+0x7c>
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d003      	beq.n	800cc7e <USBD_LL_DataOutStage+0x82>
 800cc76:	e018      	b.n	800ccaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	75bb      	strb	r3, [r7, #22]
            break;
 800cc7c:	e018      	b.n	800ccb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	4619      	mov	r1, r3
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 fa64 	bl	800d156 <USBD_CoreFindIF>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75bb      	strb	r3, [r7, #22]
            break;
 800cc92:	e00d      	b.n	800ccb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 fa66 	bl	800d170 <USBD_CoreFindEP>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75bb      	strb	r3, [r7, #22]
            break;
 800cca8:	e002      	b.n	800ccb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	75bb      	strb	r3, [r7, #22]
            break;
 800ccae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ccb0:	7dbb      	ldrb	r3, [r7, #22]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d119      	bne.n	800ccea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d113      	bne.n	800ccea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ccc2:	7dba      	ldrb	r2, [r7, #22]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	32ae      	adds	r2, #174	; 0xae
 800ccc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00b      	beq.n	800ccea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ccd2:	7dba      	ldrb	r2, [r7, #22]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ccda:	7dba      	ldrb	r2, [r7, #22]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	32ae      	adds	r2, #174	; 0xae
 800cce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f001 f950 	bl	800df90 <USBD_CtlSendStatus>
 800ccf0:	e032      	b.n	800cd58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ccf2:	7afb      	ldrb	r3, [r7, #11]
 800ccf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f000 fa37 	bl	800d170 <USBD_CoreFindEP>
 800cd02:	4603      	mov	r3, r0
 800cd04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd06:	7dbb      	ldrb	r3, [r7, #22]
 800cd08:	2bff      	cmp	r3, #255	; 0xff
 800cd0a:	d025      	beq.n	800cd58 <USBD_LL_DataOutStage+0x15c>
 800cd0c:	7dbb      	ldrb	r3, [r7, #22]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d122      	bne.n	800cd58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d117      	bne.n	800cd4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cd1e:	7dba      	ldrb	r2, [r7, #22]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	32ae      	adds	r2, #174	; 0xae
 800cd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00f      	beq.n	800cd4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cd2e:	7dba      	ldrb	r2, [r7, #22]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cd36:	7dba      	ldrb	r2, [r7, #22]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	32ae      	adds	r2, #174	; 0xae
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	7afa      	ldrb	r2, [r7, #11]
 800cd44:	4611      	mov	r1, r2
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	4798      	blx	r3
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	e000      	b.n	800cd5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b086      	sub	sp, #24
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cd70:	7afb      	ldrb	r3, [r7, #11]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d16f      	bne.n	800ce56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3314      	adds	r3, #20
 800cd7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d15a      	bne.n	800ce3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	689a      	ldr	r2, [r3, #8]
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d914      	bls.n	800cdbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	689a      	ldr	r2, [r3, #8]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	1ad2      	subs	r2, r2, r3
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	461a      	mov	r2, r3
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f001 f8b2 	bl	800df12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdae:	2300      	movs	r3, #0
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f005 f95b 	bl	8012070 <USBD_LL_PrepareReceive>
 800cdba:	e03f      	b.n	800ce3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	68da      	ldr	r2, [r3, #12]
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d11c      	bne.n	800ce02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d316      	bcc.n	800ce02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d20f      	bcs.n	800ce02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cde2:	2200      	movs	r2, #0
 800cde4:	2100      	movs	r1, #0
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f001 f893 	bl	800df12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f005 f938 	bl	8012070 <USBD_LL_PrepareReceive>
 800ce00:	e01c      	b.n	800ce3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d10f      	bne.n	800ce2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d009      	beq.n	800ce2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce2e:	2180      	movs	r1, #128	; 0x80
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f005 f873 	bl	8011f1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f001 f8bd 	bl	800dfb6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d03a      	beq.n	800cebc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7ff fe42 	bl	800cad0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ce54:	e032      	b.n	800cebc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	4619      	mov	r1, r3
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 f985 	bl	800d170 <USBD_CoreFindEP>
 800ce66:	4603      	mov	r3, r0
 800ce68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	2bff      	cmp	r3, #255	; 0xff
 800ce6e:	d025      	beq.n	800cebc <USBD_LL_DataInStage+0x15a>
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d122      	bne.n	800cebc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	d11c      	bne.n	800cebc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ce82:	7dfa      	ldrb	r2, [r7, #23]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	32ae      	adds	r2, #174	; 0xae
 800ce88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d014      	beq.n	800cebc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ce92:	7dfa      	ldrb	r2, [r7, #23]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ce9a:	7dfa      	ldrb	r2, [r7, #23]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	32ae      	adds	r2, #174	; 0xae
 800cea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea4:	695b      	ldr	r3, [r3, #20]
 800cea6:	7afa      	ldrb	r2, [r7, #11]
 800cea8:	4611      	mov	r1, r2
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	4798      	blx	r3
 800ceae:	4603      	mov	r3, r0
 800ceb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ceb2:	7dbb      	ldrb	r3, [r7, #22]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ceb8:	7dbb      	ldrb	r3, [r7, #22]
 800ceba:	e000      	b.n	800cebe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d014      	beq.n	800cf2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00e      	beq.n	800cf2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6852      	ldr	r2, [r2, #4]
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d001      	beq.n	800cf2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf2c:	2340      	movs	r3, #64	; 0x40
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2100      	movs	r1, #0
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f004 ffad 	bl	8011e92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2240      	movs	r2, #64	; 0x40
 800cf44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf48:	2340      	movs	r3, #64	; 0x40
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2180      	movs	r1, #128	; 0x80
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f004 ff9f 	bl	8011e92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2240      	movs	r2, #64	; 0x40
 800cf5e:	621a      	str	r2, [r3, #32]

  return ret;
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	460b      	mov	r3, r1
 800cf74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	78fa      	ldrb	r2, [r7, #3]
 800cf7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b083      	sub	sp, #12
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	2b04      	cmp	r3, #4
 800cf9c:	d006      	beq.n	800cfac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2204      	movs	r2, #4
 800cfb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b04      	cmp	r3, #4
 800cfd4:	d106      	bne.n	800cfe4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b03      	cmp	r3, #3
 800d004:	d110      	bne.n	800d028 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00b      	beq.n	800d028 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d005      	beq.n	800d028 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d022:	69db      	ldr	r3, [r3, #28]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	460b      	mov	r3, r1
 800d03c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	32ae      	adds	r2, #174	; 0xae
 800d048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d101      	bne.n	800d054 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d050:	2303      	movs	r3, #3
 800d052:	e01c      	b.n	800d08e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d115      	bne.n	800d08c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	32ae      	adds	r2, #174	; 0xae
 800d06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06e:	6a1b      	ldr	r3, [r3, #32]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00b      	beq.n	800d08c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32ae      	adds	r2, #174	; 0xae
 800d07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d082:	6a1b      	ldr	r3, [r3, #32]
 800d084:	78fa      	ldrb	r2, [r7, #3]
 800d086:	4611      	mov	r1, r2
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	32ae      	adds	r2, #174	; 0xae
 800d0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	e01c      	b.n	800d0f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d115      	bne.n	800d0f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	32ae      	adds	r2, #174	; 0xae
 800d0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	32ae      	adds	r2, #174	; 0xae
 800d0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e8:	78fa      	ldrb	r2, [r7, #3]
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00e      	beq.n	800d14c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	6852      	ldr	r2, [r2, #4]
 800d13a:	b2d2      	uxtb	r2, r2
 800d13c:	4611      	mov	r1, r2
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	4798      	blx	r3
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d148:	2303      	movs	r3, #3
 800d14a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d156:	b480      	push	{r7}
 800d158:	b083      	sub	sp, #12
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
 800d15e:	460b      	mov	r3, r1
 800d160:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d162:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d17c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d17e:	4618      	mov	r0, r3
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr

0800d18a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b086      	sub	sp, #24
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	460b      	mov	r3, r1
 800d194:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	885b      	ldrh	r3, [r3, #2]
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d920      	bls.n	800d1f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d1ba:	e013      	b.n	800d1e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d1bc:	f107 030a 	add.w	r3, r7, #10
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6978      	ldr	r0, [r7, #20]
 800d1c4:	f000 f81b 	bl	800d1fe <USBD_GetNextDesc>
 800d1c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	785b      	ldrb	r3, [r3, #1]
 800d1ce:	2b05      	cmp	r3, #5
 800d1d0:	d108      	bne.n	800d1e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	789b      	ldrb	r3, [r3, #2]
 800d1da:	78fa      	ldrb	r2, [r7, #3]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d008      	beq.n	800d1f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	885b      	ldrh	r3, [r3, #2]
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	897b      	ldrh	r3, [r7, #10]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d8e5      	bhi.n	800d1bc <USBD_GetEpDesc+0x32>
 800d1f0:	e000      	b.n	800d1f4 <USBD_GetEpDesc+0x6a>
          break;
 800d1f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d1f4:	693b      	ldr	r3, [r7, #16]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3718      	adds	r7, #24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b085      	sub	sp, #20
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	881a      	ldrh	r2, [r3, #0]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	b29b      	uxth	r3, r3
 800d216:	4413      	add	r3, r2
 800d218:	b29a      	uxth	r2, r3
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4413      	add	r3, r2
 800d228:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d22a:	68fb      	ldr	r3, [r7, #12]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d238:	b480      	push	{r7}
 800d23a:	b087      	sub	sp, #28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	3301      	adds	r3, #1
 800d24e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d256:	8a3b      	ldrh	r3, [r7, #16]
 800d258:	021b      	lsls	r3, r3, #8
 800d25a:	b21a      	sxth	r2, r3
 800d25c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d260:	4313      	orrs	r3, r2
 800d262:	b21b      	sxth	r3, r3
 800d264:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d266:	89fb      	ldrh	r3, [r7, #14]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	371c      	adds	r7, #28
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d28a:	2b40      	cmp	r3, #64	; 0x40
 800d28c:	d005      	beq.n	800d29a <USBD_StdDevReq+0x26>
 800d28e:	2b40      	cmp	r3, #64	; 0x40
 800d290:	d857      	bhi.n	800d342 <USBD_StdDevReq+0xce>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00f      	beq.n	800d2b6 <USBD_StdDevReq+0x42>
 800d296:	2b20      	cmp	r3, #32
 800d298:	d153      	bne.n	800d342 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	32ae      	adds	r2, #174	; 0xae
 800d2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	6839      	ldr	r1, [r7, #0]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	4798      	blx	r3
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2b4:	e04a      	b.n	800d34c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	785b      	ldrb	r3, [r3, #1]
 800d2ba:	2b09      	cmp	r3, #9
 800d2bc:	d83b      	bhi.n	800d336 <USBD_StdDevReq+0xc2>
 800d2be:	a201      	add	r2, pc, #4	; (adr r2, 800d2c4 <USBD_StdDevReq+0x50>)
 800d2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c4:	0800d319 	.word	0x0800d319
 800d2c8:	0800d32d 	.word	0x0800d32d
 800d2cc:	0800d337 	.word	0x0800d337
 800d2d0:	0800d323 	.word	0x0800d323
 800d2d4:	0800d337 	.word	0x0800d337
 800d2d8:	0800d2f7 	.word	0x0800d2f7
 800d2dc:	0800d2ed 	.word	0x0800d2ed
 800d2e0:	0800d337 	.word	0x0800d337
 800d2e4:	0800d30f 	.word	0x0800d30f
 800d2e8:	0800d301 	.word	0x0800d301
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fa3c 	bl	800d76c <USBD_GetDescriptor>
          break;
 800d2f4:	e024      	b.n	800d340 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 fba1 	bl	800da40 <USBD_SetAddress>
          break;
 800d2fe:	e01f      	b.n	800d340 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fbe0 	bl	800dac8 <USBD_SetConfig>
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]
          break;
 800d30c:	e018      	b.n	800d340 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 fc83 	bl	800dc1c <USBD_GetConfig>
          break;
 800d316:	e013      	b.n	800d340 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d318:	6839      	ldr	r1, [r7, #0]
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fcb4 	bl	800dc88 <USBD_GetStatus>
          break;
 800d320:	e00e      	b.n	800d340 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fce3 	bl	800dcf0 <USBD_SetFeature>
          break;
 800d32a:	e009      	b.n	800d340 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fd07 	bl	800dd42 <USBD_ClrFeature>
          break;
 800d334:	e004      	b.n	800d340 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fd5e 	bl	800ddfa <USBD_CtlError>
          break;
 800d33e:	bf00      	nop
      }
      break;
 800d340:	e004      	b.n	800d34c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fd58 	bl	800ddfa <USBD_CtlError>
      break;
 800d34a:	bf00      	nop
  }

  return ret;
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop

0800d358 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d36e:	2b40      	cmp	r3, #64	; 0x40
 800d370:	d005      	beq.n	800d37e <USBD_StdItfReq+0x26>
 800d372:	2b40      	cmp	r3, #64	; 0x40
 800d374:	d852      	bhi.n	800d41c <USBD_StdItfReq+0xc4>
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <USBD_StdItfReq+0x26>
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d14e      	bne.n	800d41c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d384:	b2db      	uxtb	r3, r3
 800d386:	3b01      	subs	r3, #1
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d840      	bhi.n	800d40e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	889b      	ldrh	r3, [r3, #4]
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b01      	cmp	r3, #1
 800d394:	d836      	bhi.n	800d404 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	889b      	ldrh	r3, [r3, #4]
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff fed9 	bl	800d156 <USBD_CoreFindIF>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	2bff      	cmp	r3, #255	; 0xff
 800d3ac:	d01d      	beq.n	800d3ea <USBD_StdItfReq+0x92>
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d11a      	bne.n	800d3ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d3b4:	7bba      	ldrb	r2, [r7, #14]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	32ae      	adds	r2, #174	; 0xae
 800d3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00f      	beq.n	800d3e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d3c4:	7bba      	ldrb	r2, [r7, #14]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d3cc:	7bba      	ldrb	r2, [r7, #14]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	32ae      	adds	r2, #174	; 0xae
 800d3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	4798      	blx	r3
 800d3de:	4603      	mov	r3, r0
 800d3e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d3e2:	e004      	b.n	800d3ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d3e8:	e001      	b.n	800d3ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	88db      	ldrh	r3, [r3, #6]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d110      	bne.n	800d418 <USBD_StdItfReq+0xc0>
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10d      	bne.n	800d418 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fdc7 	bl	800df90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d402:	e009      	b.n	800d418 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fcf7 	bl	800ddfa <USBD_CtlError>
          break;
 800d40c:	e004      	b.n	800d418 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fcf2 	bl	800ddfa <USBD_CtlError>
          break;
 800d416:	e000      	b.n	800d41a <USBD_StdItfReq+0xc2>
          break;
 800d418:	bf00      	nop
      }
      break;
 800d41a:	e004      	b.n	800d426 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d41c:	6839      	ldr	r1, [r7, #0]
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fceb 	bl	800ddfa <USBD_CtlError>
      break;
 800d424:	bf00      	nop
  }

  return ret;
 800d426:	7bfb      	ldrb	r3, [r7, #15]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	889b      	ldrh	r3, [r3, #4]
 800d442:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d44c:	2b40      	cmp	r3, #64	; 0x40
 800d44e:	d007      	beq.n	800d460 <USBD_StdEPReq+0x30>
 800d450:	2b40      	cmp	r3, #64	; 0x40
 800d452:	f200 817f 	bhi.w	800d754 <USBD_StdEPReq+0x324>
 800d456:	2b00      	cmp	r3, #0
 800d458:	d02a      	beq.n	800d4b0 <USBD_StdEPReq+0x80>
 800d45a:	2b20      	cmp	r3, #32
 800d45c:	f040 817a 	bne.w	800d754 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d460:	7bbb      	ldrb	r3, [r7, #14]
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff fe83 	bl	800d170 <USBD_CoreFindEP>
 800d46a:	4603      	mov	r3, r0
 800d46c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d46e:	7b7b      	ldrb	r3, [r7, #13]
 800d470:	2bff      	cmp	r3, #255	; 0xff
 800d472:	f000 8174 	beq.w	800d75e <USBD_StdEPReq+0x32e>
 800d476:	7b7b      	ldrb	r3, [r7, #13]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f040 8170 	bne.w	800d75e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d47e:	7b7a      	ldrb	r2, [r7, #13]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d486:	7b7a      	ldrb	r2, [r7, #13]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	32ae      	adds	r2, #174	; 0xae
 800d48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 8163 	beq.w	800d75e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d498:	7b7a      	ldrb	r2, [r7, #13]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	32ae      	adds	r2, #174	; 0xae
 800d49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	6839      	ldr	r1, [r7, #0]
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	4798      	blx	r3
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d4ae:	e156      	b.n	800d75e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	785b      	ldrb	r3, [r3, #1]
 800d4b4:	2b03      	cmp	r3, #3
 800d4b6:	d008      	beq.n	800d4ca <USBD_StdEPReq+0x9a>
 800d4b8:	2b03      	cmp	r3, #3
 800d4ba:	f300 8145 	bgt.w	800d748 <USBD_StdEPReq+0x318>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f000 809b 	beq.w	800d5fa <USBD_StdEPReq+0x1ca>
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d03c      	beq.n	800d542 <USBD_StdEPReq+0x112>
 800d4c8:	e13e      	b.n	800d748 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d002      	beq.n	800d4dc <USBD_StdEPReq+0xac>
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d016      	beq.n	800d508 <USBD_StdEPReq+0xd8>
 800d4da:	e02c      	b.n	800d536 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4dc:	7bbb      	ldrb	r3, [r7, #14]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00d      	beq.n	800d4fe <USBD_StdEPReq+0xce>
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
 800d4e4:	2b80      	cmp	r3, #128	; 0x80
 800d4e6:	d00a      	beq.n	800d4fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4e8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f004 fd15 	bl	8011f1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4f2:	2180      	movs	r1, #128	; 0x80
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f004 fd11 	bl	8011f1c <USBD_LL_StallEP>
 800d4fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4fc:	e020      	b.n	800d540 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fc7a 	bl	800ddfa <USBD_CtlError>
              break;
 800d506:	e01b      	b.n	800d540 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	885b      	ldrh	r3, [r3, #2]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10e      	bne.n	800d52e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d510:	7bbb      	ldrb	r3, [r7, #14]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00b      	beq.n	800d52e <USBD_StdEPReq+0xfe>
 800d516:	7bbb      	ldrb	r3, [r7, #14]
 800d518:	2b80      	cmp	r3, #128	; 0x80
 800d51a:	d008      	beq.n	800d52e <USBD_StdEPReq+0xfe>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	88db      	ldrh	r3, [r3, #6]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d104      	bne.n	800d52e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d524:	7bbb      	ldrb	r3, [r7, #14]
 800d526:	4619      	mov	r1, r3
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f004 fcf7 	bl	8011f1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fd2e 	bl	800df90 <USBD_CtlSendStatus>

              break;
 800d534:	e004      	b.n	800d540 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fc5e 	bl	800ddfa <USBD_CtlError>
              break;
 800d53e:	bf00      	nop
          }
          break;
 800d540:	e107      	b.n	800d752 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d002      	beq.n	800d554 <USBD_StdEPReq+0x124>
 800d54e:	2b03      	cmp	r3, #3
 800d550:	d016      	beq.n	800d580 <USBD_StdEPReq+0x150>
 800d552:	e04b      	b.n	800d5ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d554:	7bbb      	ldrb	r3, [r7, #14]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00d      	beq.n	800d576 <USBD_StdEPReq+0x146>
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
 800d55c:	2b80      	cmp	r3, #128	; 0x80
 800d55e:	d00a      	beq.n	800d576 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d560:	7bbb      	ldrb	r3, [r7, #14]
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f004 fcd9 	bl	8011f1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d56a:	2180      	movs	r1, #128	; 0x80
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f004 fcd5 	bl	8011f1c <USBD_LL_StallEP>
 800d572:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d574:	e040      	b.n	800d5f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d576:	6839      	ldr	r1, [r7, #0]
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fc3e 	bl	800ddfa <USBD_CtlError>
              break;
 800d57e:	e03b      	b.n	800d5f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	885b      	ldrh	r3, [r3, #2]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d136      	bne.n	800d5f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d588:	7bbb      	ldrb	r3, [r7, #14]
 800d58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d004      	beq.n	800d59c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d592:	7bbb      	ldrb	r3, [r7, #14]
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f004 fcdf 	bl	8011f5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fcf7 	bl	800df90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d5a2:	7bbb      	ldrb	r3, [r7, #14]
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff fde2 	bl	800d170 <USBD_CoreFindEP>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5b0:	7b7b      	ldrb	r3, [r7, #13]
 800d5b2:	2bff      	cmp	r3, #255	; 0xff
 800d5b4:	d01f      	beq.n	800d5f6 <USBD_StdEPReq+0x1c6>
 800d5b6:	7b7b      	ldrb	r3, [r7, #13]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d11c      	bne.n	800d5f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d5bc:	7b7a      	ldrb	r2, [r7, #13]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d5c4:	7b7a      	ldrb	r2, [r7, #13]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	32ae      	adds	r2, #174	; 0xae
 800d5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d010      	beq.n	800d5f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d5d4:	7b7a      	ldrb	r2, [r7, #13]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	32ae      	adds	r2, #174	; 0xae
 800d5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d5ea:	e004      	b.n	800d5f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fc03 	bl	800ddfa <USBD_CtlError>
              break;
 800d5f4:	e000      	b.n	800d5f8 <USBD_StdEPReq+0x1c8>
              break;
 800d5f6:	bf00      	nop
          }
          break;
 800d5f8:	e0ab      	b.n	800d752 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d600:	b2db      	uxtb	r3, r3
 800d602:	2b02      	cmp	r3, #2
 800d604:	d002      	beq.n	800d60c <USBD_StdEPReq+0x1dc>
 800d606:	2b03      	cmp	r3, #3
 800d608:	d032      	beq.n	800d670 <USBD_StdEPReq+0x240>
 800d60a:	e097      	b.n	800d73c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d007      	beq.n	800d622 <USBD_StdEPReq+0x1f2>
 800d612:	7bbb      	ldrb	r3, [r7, #14]
 800d614:	2b80      	cmp	r3, #128	; 0x80
 800d616:	d004      	beq.n	800d622 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fbed 	bl	800ddfa <USBD_CtlError>
                break;
 800d620:	e091      	b.n	800d746 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d626:	2b00      	cmp	r3, #0
 800d628:	da0b      	bge.n	800d642 <USBD_StdEPReq+0x212>
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d630:	4613      	mov	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	3310      	adds	r3, #16
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	3304      	adds	r3, #4
 800d640:	e00b      	b.n	800d65a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d642:	7bbb      	ldrb	r3, [r7, #14]
 800d644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d648:	4613      	mov	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4413      	add	r3, r2
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	4413      	add	r3, r2
 800d658:	3304      	adds	r3, #4
 800d65a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2200      	movs	r2, #0
 800d660:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2202      	movs	r2, #2
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fc37 	bl	800dedc <USBD_CtlSendData>
              break;
 800d66e:	e06a      	b.n	800d746 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d674:	2b00      	cmp	r3, #0
 800d676:	da11      	bge.n	800d69c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d678:	7bbb      	ldrb	r3, [r7, #14]
 800d67a:	f003 020f 	and.w	r2, r3, #15
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	4613      	mov	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	440b      	add	r3, r1
 800d68a:	3324      	adds	r3, #36	; 0x24
 800d68c:	881b      	ldrh	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d117      	bne.n	800d6c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fbb0 	bl	800ddfa <USBD_CtlError>
                  break;
 800d69a:	e054      	b.n	800d746 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	f003 020f 	and.w	r2, r3, #15
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	440b      	add	r3, r1
 800d6ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d104      	bne.n	800d6c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d6b8:	6839      	ldr	r1, [r7, #0]
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 fb9d 	bl	800ddfa <USBD_CtlError>
                  break;
 800d6c0:	e041      	b.n	800d746 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	da0b      	bge.n	800d6e2 <USBD_StdEPReq+0x2b2>
 800d6ca:	7bbb      	ldrb	r3, [r7, #14]
 800d6cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4413      	add	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	3310      	adds	r3, #16
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	3304      	adds	r3, #4
 800d6e0:	e00b      	b.n	800d6fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
 800d6e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d6fc:	7bbb      	ldrb	r3, [r7, #14]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <USBD_StdEPReq+0x2d8>
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	2b80      	cmp	r3, #128	; 0x80
 800d706:	d103      	bne.n	800d710 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	2200      	movs	r2, #0
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	e00e      	b.n	800d72e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f004 fc3f 	bl	8011f98 <USBD_LL_IsStallEP>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d003      	beq.n	800d728 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2201      	movs	r2, #1
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	e002      	b.n	800d72e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2202      	movs	r2, #2
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fbd1 	bl	800dedc <USBD_CtlSendData>
              break;
 800d73a:	e004      	b.n	800d746 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d73c:	6839      	ldr	r1, [r7, #0]
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 fb5b 	bl	800ddfa <USBD_CtlError>
              break;
 800d744:	bf00      	nop
          }
          break;
 800d746:	e004      	b.n	800d752 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fb55 	bl	800ddfa <USBD_CtlError>
          break;
 800d750:	bf00      	nop
      }
      break;
 800d752:	e005      	b.n	800d760 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 fb4f 	bl	800ddfa <USBD_CtlError>
      break;
 800d75c:	e000      	b.n	800d760 <USBD_StdEPReq+0x330>
      break;
 800d75e:	bf00      	nop
  }

  return ret;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
	...

0800d76c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d77e:	2300      	movs	r3, #0
 800d780:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	885b      	ldrh	r3, [r3, #2]
 800d786:	0a1b      	lsrs	r3, r3, #8
 800d788:	b29b      	uxth	r3, r3
 800d78a:	3b01      	subs	r3, #1
 800d78c:	2b06      	cmp	r3, #6
 800d78e:	f200 8128 	bhi.w	800d9e2 <USBD_GetDescriptor+0x276>
 800d792:	a201      	add	r2, pc, #4	; (adr r2, 800d798 <USBD_GetDescriptor+0x2c>)
 800d794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d798:	0800d7b5 	.word	0x0800d7b5
 800d79c:	0800d7cd 	.word	0x0800d7cd
 800d7a0:	0800d80d 	.word	0x0800d80d
 800d7a4:	0800d9e3 	.word	0x0800d9e3
 800d7a8:	0800d9e3 	.word	0x0800d9e3
 800d7ac:	0800d983 	.word	0x0800d983
 800d7b0:	0800d9af 	.word	0x0800d9af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	7c12      	ldrb	r2, [r2, #16]
 800d7c0:	f107 0108 	add.w	r1, r7, #8
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	4798      	blx	r3
 800d7c8:	60f8      	str	r0, [r7, #12]
      break;
 800d7ca:	e112      	b.n	800d9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	7c1b      	ldrb	r3, [r3, #16]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10d      	bne.n	800d7f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7dc:	f107 0208 	add.w	r2, r7, #8
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4798      	blx	r3
 800d7e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d7ee:	e100      	b.n	800d9f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f8:	f107 0208 	add.w	r2, r7, #8
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4798      	blx	r3
 800d800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3301      	adds	r3, #1
 800d806:	2202      	movs	r2, #2
 800d808:	701a      	strb	r2, [r3, #0]
      break;
 800d80a:	e0f2      	b.n	800d9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	885b      	ldrh	r3, [r3, #2]
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b05      	cmp	r3, #5
 800d814:	f200 80ac 	bhi.w	800d970 <USBD_GetDescriptor+0x204>
 800d818:	a201      	add	r2, pc, #4	; (adr r2, 800d820 <USBD_GetDescriptor+0xb4>)
 800d81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81e:	bf00      	nop
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d86d 	.word	0x0800d86d
 800d828:	0800d8a1 	.word	0x0800d8a1
 800d82c:	0800d8d5 	.word	0x0800d8d5
 800d830:	0800d909 	.word	0x0800d909
 800d834:	0800d93d 	.word	0x0800d93d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00b      	beq.n	800d85c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	7c12      	ldrb	r2, [r2, #16]
 800d850:	f107 0108 	add.w	r1, r7, #8
 800d854:	4610      	mov	r0, r2
 800d856:	4798      	blx	r3
 800d858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d85a:	e091      	b.n	800d980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 facb 	bl	800ddfa <USBD_CtlError>
            err++;
 800d864:	7afb      	ldrb	r3, [r7, #11]
 800d866:	3301      	adds	r3, #1
 800d868:	72fb      	strb	r3, [r7, #11]
          break;
 800d86a:	e089      	b.n	800d980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	7c12      	ldrb	r2, [r2, #16]
 800d884:	f107 0108 	add.w	r1, r7, #8
 800d888:	4610      	mov	r0, r2
 800d88a:	4798      	blx	r3
 800d88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d88e:	e077      	b.n	800d980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fab1 	bl	800ddfa <USBD_CtlError>
            err++;
 800d898:	7afb      	ldrb	r3, [r7, #11]
 800d89a:	3301      	adds	r3, #1
 800d89c:	72fb      	strb	r3, [r7, #11]
          break;
 800d89e:	e06f      	b.n	800d980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00b      	beq.n	800d8c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	7c12      	ldrb	r2, [r2, #16]
 800d8b8:	f107 0108 	add.w	r1, r7, #8
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4798      	blx	r3
 800d8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8c2:	e05d      	b.n	800d980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fa97 	bl	800ddfa <USBD_CtlError>
            err++;
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8d2:	e055      	b.n	800d980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	7c12      	ldrb	r2, [r2, #16]
 800d8ec:	f107 0108 	add.w	r1, r7, #8
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	4798      	blx	r3
 800d8f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8f6:	e043      	b.n	800d980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fa7d 	bl	800ddfa <USBD_CtlError>
            err++;
 800d900:	7afb      	ldrb	r3, [r7, #11]
 800d902:	3301      	adds	r3, #1
 800d904:	72fb      	strb	r3, [r7, #11]
          break;
 800d906:	e03b      	b.n	800d980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00b      	beq.n	800d92c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	7c12      	ldrb	r2, [r2, #16]
 800d920:	f107 0108 	add.w	r1, r7, #8
 800d924:	4610      	mov	r0, r2
 800d926:	4798      	blx	r3
 800d928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d92a:	e029      	b.n	800d980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fa63 	bl	800ddfa <USBD_CtlError>
            err++;
 800d934:	7afb      	ldrb	r3, [r7, #11]
 800d936:	3301      	adds	r3, #1
 800d938:	72fb      	strb	r3, [r7, #11]
          break;
 800d93a:	e021      	b.n	800d980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00b      	beq.n	800d960 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	7c12      	ldrb	r2, [r2, #16]
 800d954:	f107 0108 	add.w	r1, r7, #8
 800d958:	4610      	mov	r0, r2
 800d95a:	4798      	blx	r3
 800d95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95e:	e00f      	b.n	800d980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fa49 	bl	800ddfa <USBD_CtlError>
            err++;
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	3301      	adds	r3, #1
 800d96c:	72fb      	strb	r3, [r7, #11]
          break;
 800d96e:	e007      	b.n	800d980 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d970:	6839      	ldr	r1, [r7, #0]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fa41 	bl	800ddfa <USBD_CtlError>
          err++;
 800d978:	7afb      	ldrb	r3, [r7, #11]
 800d97a:	3301      	adds	r3, #1
 800d97c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d97e:	bf00      	nop
      }
      break;
 800d980:	e037      	b.n	800d9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7c1b      	ldrb	r3, [r3, #16]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d109      	bne.n	800d99e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d992:	f107 0208 	add.w	r2, r7, #8
 800d996:	4610      	mov	r0, r2
 800d998:	4798      	blx	r3
 800d99a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d99c:	e029      	b.n	800d9f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d99e:	6839      	ldr	r1, [r7, #0]
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fa2a 	bl	800ddfa <USBD_CtlError>
        err++;
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	72fb      	strb	r3, [r7, #11]
      break;
 800d9ac:	e021      	b.n	800d9f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7c1b      	ldrb	r3, [r3, #16]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10d      	bne.n	800d9d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9be:	f107 0208 	add.w	r2, r7, #8
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4798      	blx	r3
 800d9c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	2207      	movs	r2, #7
 800d9ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9d0:	e00f      	b.n	800d9f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fa10 	bl	800ddfa <USBD_CtlError>
        err++;
 800d9da:	7afb      	ldrb	r3, [r7, #11]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	72fb      	strb	r3, [r7, #11]
      break;
 800d9e0:	e007      	b.n	800d9f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fa08 	bl	800ddfa <USBD_CtlError>
      err++;
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	72fb      	strb	r3, [r7, #11]
      break;
 800d9f0:	bf00      	nop
  }

  if (err != 0U)
 800d9f2:	7afb      	ldrb	r3, [r7, #11]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d11e      	bne.n	800da36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	88db      	ldrh	r3, [r3, #6]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d016      	beq.n	800da2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800da00:	893b      	ldrh	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00e      	beq.n	800da24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	88da      	ldrh	r2, [r3, #6]
 800da0a:	893b      	ldrh	r3, [r7, #8]
 800da0c:	4293      	cmp	r3, r2
 800da0e:	bf28      	it	cs
 800da10:	4613      	movcs	r3, r2
 800da12:	b29b      	uxth	r3, r3
 800da14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800da16:	893b      	ldrh	r3, [r7, #8]
 800da18:	461a      	mov	r2, r3
 800da1a:	68f9      	ldr	r1, [r7, #12]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 fa5d 	bl	800dedc <USBD_CtlSendData>
 800da22:	e009      	b.n	800da38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f9e7 	bl	800ddfa <USBD_CtlError>
 800da2c:	e004      	b.n	800da38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 faae 	bl	800df90 <USBD_CtlSendStatus>
 800da34:	e000      	b.n	800da38 <USBD_GetDescriptor+0x2cc>
    return;
 800da36:	bf00      	nop
  }
}
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop

0800da40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	889b      	ldrh	r3, [r3, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d131      	bne.n	800dab6 <USBD_SetAddress+0x76>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	88db      	ldrh	r3, [r3, #6]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d12d      	bne.n	800dab6 <USBD_SetAddress+0x76>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	885b      	ldrh	r3, [r3, #2]
 800da5e:	2b7f      	cmp	r3, #127	; 0x7f
 800da60:	d829      	bhi.n	800dab6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	885b      	ldrh	r3, [r3, #2]
 800da66:	b2db      	uxtb	r3, r3
 800da68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b03      	cmp	r3, #3
 800da78:	d104      	bne.n	800da84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f9bc 	bl	800ddfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da82:	e01d      	b.n	800dac0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	7bfa      	ldrb	r2, [r7, #15]
 800da88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f004 faad 	bl	8011ff0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fa7a 	bl	800df90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d004      	beq.n	800daac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2202      	movs	r2, #2
 800daa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daaa:	e009      	b.n	800dac0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dab4:	e004      	b.n	800dac0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f99e 	bl	800ddfa <USBD_CtlError>
  }
}
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	885b      	ldrh	r3, [r3, #2]
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	4b4e      	ldr	r3, [pc, #312]	; (800dc18 <USBD_SetConfig+0x150>)
 800dade:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dae0:	4b4d      	ldr	r3, [pc, #308]	; (800dc18 <USBD_SetConfig+0x150>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d905      	bls.n	800daf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dae8:	6839      	ldr	r1, [r7, #0]
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f985 	bl	800ddfa <USBD_CtlError>
    return USBD_FAIL;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e08c      	b.n	800dc0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d002      	beq.n	800db06 <USBD_SetConfig+0x3e>
 800db00:	2b03      	cmp	r3, #3
 800db02:	d029      	beq.n	800db58 <USBD_SetConfig+0x90>
 800db04:	e075      	b.n	800dbf2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800db06:	4b44      	ldr	r3, [pc, #272]	; (800dc18 <USBD_SetConfig+0x150>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d020      	beq.n	800db50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800db0e:	4b42      	ldr	r3, [pc, #264]	; (800dc18 <USBD_SetConfig+0x150>)
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db18:	4b3f      	ldr	r3, [pc, #252]	; (800dc18 <USBD_SetConfig+0x150>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7fe ffe1 	bl	800cae6 <USBD_SetClassConfig>
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d008      	beq.n	800db40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800db2e:	6839      	ldr	r1, [r7, #0]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f962 	bl	800ddfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2202      	movs	r2, #2
 800db3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db3e:	e065      	b.n	800dc0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fa25 	bl	800df90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2203      	movs	r2, #3
 800db4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db4e:	e05d      	b.n	800dc0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fa1d 	bl	800df90 <USBD_CtlSendStatus>
      break;
 800db56:	e059      	b.n	800dc0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800db58:	4b2f      	ldr	r3, [pc, #188]	; (800dc18 <USBD_SetConfig+0x150>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d112      	bne.n	800db86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800db68:	4b2b      	ldr	r3, [pc, #172]	; (800dc18 <USBD_SetConfig+0x150>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	461a      	mov	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db72:	4b29      	ldr	r3, [pc, #164]	; (800dc18 <USBD_SetConfig+0x150>)
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7fe ffd0 	bl	800cb1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fa06 	bl	800df90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db84:	e042      	b.n	800dc0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800db86:	4b24      	ldr	r3, [pc, #144]	; (800dc18 <USBD_SetConfig+0x150>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	461a      	mov	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	429a      	cmp	r2, r3
 800db92:	d02a      	beq.n	800dbea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7fe ffbe 	bl	800cb1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dba2:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <USBD_SetConfig+0x150>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbac:	4b1a      	ldr	r3, [pc, #104]	; (800dc18 <USBD_SetConfig+0x150>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7fe ff97 	bl	800cae6 <USBD_SetClassConfig>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00f      	beq.n	800dbe2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f918 	bl	800ddfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7fe ffa3 	bl	800cb1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dbe0:	e014      	b.n	800dc0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f9d4 	bl	800df90 <USBD_CtlSendStatus>
      break;
 800dbe8:	e010      	b.n	800dc0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f9d0 	bl	800df90 <USBD_CtlSendStatus>
      break;
 800dbf0:	e00c      	b.n	800dc0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dbf2:	6839      	ldr	r1, [r7, #0]
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 f900 	bl	800ddfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dbfa:	4b07      	ldr	r3, [pc, #28]	; (800dc18 <USBD_SetConfig+0x150>)
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7fe ff8c 	bl	800cb1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dc06:	2303      	movs	r3, #3
 800dc08:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0a:	bf00      	nop
  }

  return ret;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	200051e8 	.word	0x200051e8

0800dc1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	88db      	ldrh	r3, [r3, #6]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d004      	beq.n	800dc38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f8e2 	bl	800ddfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dc36:	e023      	b.n	800dc80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	dc02      	bgt.n	800dc4a <USBD_GetConfig+0x2e>
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dc03      	bgt.n	800dc50 <USBD_GetConfig+0x34>
 800dc48:	e015      	b.n	800dc76 <USBD_GetConfig+0x5a>
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d00b      	beq.n	800dc66 <USBD_GetConfig+0x4a>
 800dc4e:	e012      	b.n	800dc76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	3308      	adds	r3, #8
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f93c 	bl	800dedc <USBD_CtlSendData>
        break;
 800dc64:	e00c      	b.n	800dc80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3304      	adds	r3, #4
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f934 	bl	800dedc <USBD_CtlSendData>
        break;
 800dc74:	e004      	b.n	800dc80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f8be 	bl	800ddfa <USBD_CtlError>
        break;
 800dc7e:	bf00      	nop
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d81e      	bhi.n	800dcde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	88db      	ldrh	r3, [r3, #6]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d004      	beq.n	800dcb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f8a5 	bl	800ddfa <USBD_CtlError>
        break;
 800dcb0:	e01a      	b.n	800dce8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d005      	beq.n	800dcce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	f043 0202 	orr.w	r2, r3, #2
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	330c      	adds	r3, #12
 800dcd2:	2202      	movs	r2, #2
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f900 	bl	800dedc <USBD_CtlSendData>
      break;
 800dcdc:	e004      	b.n	800dce8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 f88a 	bl	800ddfa <USBD_CtlError>
      break;
 800dce6:	bf00      	nop
  }
}
 800dce8:	bf00      	nop
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	885b      	ldrh	r3, [r3, #2]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d107      	bne.n	800dd12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f940 	bl	800df90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dd10:	e013      	b.n	800dd3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	885b      	ldrh	r3, [r3, #2]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d10b      	bne.n	800dd32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	889b      	ldrh	r3, [r3, #4]
 800dd1e:	0a1b      	lsrs	r3, r3, #8
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 f930 	bl	800df90 <USBD_CtlSendStatus>
}
 800dd30:	e003      	b.n	800dd3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f860 	bl	800ddfa <USBD_CtlError>
}
 800dd3a:	bf00      	nop
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	3b01      	subs	r3, #1
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d80b      	bhi.n	800dd72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	885b      	ldrh	r3, [r3, #2]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d10c      	bne.n	800dd7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f910 	bl	800df90 <USBD_CtlSendStatus>
      }
      break;
 800dd70:	e004      	b.n	800dd7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f840 	bl	800ddfa <USBD_CtlError>
      break;
 800dd7a:	e000      	b.n	800dd7e <USBD_ClrFeature+0x3c>
      break;
 800dd7c:	bf00      	nop
  }
}
 800dd7e:	bf00      	nop
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	781a      	ldrb	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	781a      	ldrb	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3301      	adds	r3, #1
 800ddae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f7ff fa41 	bl	800d238 <SWAPBYTE>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	461a      	mov	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff fa34 	bl	800d238 <SWAPBYTE>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	3301      	adds	r3, #1
 800dde2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f7ff fa27 	bl	800d238 <SWAPBYTE>
 800ddea:	4603      	mov	r3, r0
 800ddec:	461a      	mov	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	80da      	strh	r2, [r3, #6]
}
 800ddf2:	bf00      	nop
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de04:	2180      	movs	r1, #128	; 0x80
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f004 f888 	bl	8011f1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de0c:	2100      	movs	r1, #0
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f004 f884 	bl	8011f1c <USBD_LL_StallEP>
}
 800de14:	bf00      	nop
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d036      	beq.n	800dea0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f000 f836 	bl	800dea8 <USBD_GetLen>
 800de3c:	4603      	mov	r3, r0
 800de3e:	3301      	adds	r3, #1
 800de40:	b29b      	uxth	r3, r3
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	b29a      	uxth	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	4413      	add	r3, r2
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	7812      	ldrb	r2, [r2, #0]
 800de54:	701a      	strb	r2, [r3, #0]
  idx++;
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	3301      	adds	r3, #1
 800de5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	4413      	add	r3, r2
 800de62:	2203      	movs	r2, #3
 800de64:	701a      	strb	r2, [r3, #0]
  idx++;
 800de66:	7dfb      	ldrb	r3, [r7, #23]
 800de68:	3301      	adds	r3, #1
 800de6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de6c:	e013      	b.n	800de96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	4413      	add	r3, r2
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	7812      	ldrb	r2, [r2, #0]
 800de78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	3301      	adds	r3, #1
 800de7e:	613b      	str	r3, [r7, #16]
    idx++;
 800de80:	7dfb      	ldrb	r3, [r7, #23]
 800de82:	3301      	adds	r3, #1
 800de84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de86:	7dfb      	ldrb	r3, [r7, #23]
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	4413      	add	r3, r2
 800de8c:	2200      	movs	r2, #0
 800de8e:	701a      	strb	r2, [r3, #0]
    idx++;
 800de90:	7dfb      	ldrb	r3, [r7, #23]
 800de92:	3301      	adds	r3, #1
 800de94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1e7      	bne.n	800de6e <USBD_GetString+0x52>
 800de9e:	e000      	b.n	800dea2 <USBD_GetString+0x86>
    return;
 800dea0:	bf00      	nop
  }
}
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800deb8:	e005      	b.n	800dec6 <USBD_GetLen+0x1e>
  {
    len++;
 800deba:	7bfb      	ldrb	r3, [r7, #15]
 800debc:	3301      	adds	r3, #1
 800debe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	3301      	adds	r3, #1
 800dec4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1f5      	bne.n	800deba <USBD_GetLen+0x12>
  }

  return len;
 800dece:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2202      	movs	r2, #2
 800deec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	2100      	movs	r1, #0
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f004 f893 	bl	801202e <USBD_LL_Transmit>

  return USBD_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b084      	sub	sp, #16
 800df16:	af00      	add	r7, sp, #0
 800df18:	60f8      	str	r0, [r7, #12]
 800df1a:	60b9      	str	r1, [r7, #8]
 800df1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	2100      	movs	r1, #0
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f004 f882 	bl	801202e <USBD_LL_Transmit>

  return USBD_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2203      	movs	r2, #3
 800df44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	2100      	movs	r1, #0
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f004 f886 	bl	8012070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b084      	sub	sp, #16
 800df72:	af00      	add	r7, sp, #0
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	2100      	movs	r1, #0
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f004 f875 	bl	8012070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2204      	movs	r2, #4
 800df9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f004 f841 	bl	801202e <USBD_LL_Transmit>

  return USBD_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b082      	sub	sp, #8
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2205      	movs	r2, #5
 800dfc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2100      	movs	r1, #0
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f004 f84f 	bl	8012070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dfea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfee:	2b84      	cmp	r3, #132	; 0x84
 800dff0:	d005      	beq.n	800dffe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	4413      	add	r3, r2
 800dffa:	3303      	adds	r3, #3
 800dffc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dffe:	68fb      	ldr	r3, [r7, #12]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e010:	f001 fb0c 	bl	800f62c <vTaskStartScheduler>
  
  return osOK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	bd80      	pop	{r7, pc}

0800e01a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e01a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e01c:	b089      	sub	sp, #36	; 0x24
 800e01e:	af04      	add	r7, sp, #16
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	695b      	ldr	r3, [r3, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d020      	beq.n	800e06e <osThreadCreate+0x54>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	699b      	ldr	r3, [r3, #24]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01c      	beq.n	800e06e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	685c      	ldr	r4, [r3, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	691e      	ldr	r6, [r3, #16]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff ffc8 	bl	800dfdc <makeFreeRtosPriority>
 800e04c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e056:	9202      	str	r2, [sp, #8]
 800e058:	9301      	str	r3, [sp, #4]
 800e05a:	9100      	str	r1, [sp, #0]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	4632      	mov	r2, r6
 800e060:	4629      	mov	r1, r5
 800e062:	4620      	mov	r0, r4
 800e064:	f001 f890 	bl	800f188 <xTaskCreateStatic>
 800e068:	4603      	mov	r3, r0
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	e01c      	b.n	800e0a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685c      	ldr	r4, [r3, #4]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e07a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff ffaa 	bl	800dfdc <makeFreeRtosPriority>
 800e088:	4602      	mov	r2, r0
 800e08a:	f107 030c 	add.w	r3, r7, #12
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	9200      	str	r2, [sp, #0]
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	4632      	mov	r2, r6
 800e096:	4629      	mov	r1, r5
 800e098:	4620      	mov	r0, r4
 800e09a:	f001 f8cb 	bl	800f234 <xTaskCreate>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d001      	beq.n	800e0a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e000      	b.n	800e0aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3714      	adds	r7, #20
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e0b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4a09      	ldr	r2, [pc, #36]	; (800e0e4 <osDelay+0x30>)
 800e0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e0c4:	099b      	lsrs	r3, r3, #6
 800e0c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <osDelay+0x1e>
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	e000      	b.n	800e0d4 <osDelay+0x20>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f001 fa0f 	bl	800f4f8 <vTaskDelay>
  
  return osOK;
 800e0da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3710      	adds	r7, #16
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	10624dd3 	.word	0x10624dd3

0800e0e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f103 0208 	add.w	r2, r3, #8
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f103 0208 	add.w	r2, r3, #8
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f103 0208 	add.w	r2, r3, #8
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e136:	bf00      	nop
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e142:	b480      	push	{r7}
 800e144:	b085      	sub	sp, #20
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	689a      	ldr	r2, [r3, #8]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	601a      	str	r2, [r3, #0]
}
 800e17e:	bf00      	nop
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e18a:	b480      	push	{r7}
 800e18c:	b085      	sub	sp, #20
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1a0:	d103      	bne.n	800e1aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	e00c      	b.n	800e1c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	60fb      	str	r3, [r7, #12]
 800e1b0:	e002      	b.n	800e1b8 <vListInsert+0x2e>
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d2f6      	bcs.n	800e1b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	685a      	ldr	r2, [r3, #4]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	1c5a      	adds	r2, r3, #1
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	601a      	str	r2, [r3, #0]
}
 800e1f0:	bf00      	nop
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	6892      	ldr	r2, [r2, #8]
 800e212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	6852      	ldr	r2, [r2, #4]
 800e21c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	429a      	cmp	r2, r3
 800e226:	d103      	bne.n	800e230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	689a      	ldr	r2, [r3, #8]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	1e5a      	subs	r2, r3, #1
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d105      	bne.n	800e270 <xQueueGenericReset+0x20>
 800e264:	f240 1203 	movw	r2, #259	; 0x103
 800e268:	492a      	ldr	r1, [pc, #168]	; (800e314 <xQueueGenericReset+0xc4>)
 800e26a:	482b      	ldr	r0, [pc, #172]	; (800e318 <xQueueGenericReset+0xc8>)
 800e26c:	f7f5 fb10 	bl	8003890 <assertFail>

	taskENTER_CRITICAL();
 800e270:	f002 ff96 	bl	80111a0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e27c:	68f9      	ldr	r1, [r7, #12]
 800e27e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e280:	fb01 f303 	mul.w	r3, r1, r3
 800e284:	441a      	add	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2200      	movs	r2, #0
 800e28e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	68f9      	ldr	r1, [r7, #12]
 800e2a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e2a6:	fb01 f303 	mul.w	r3, r1, r3
 800e2aa:	441a      	add	r2, r3
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	22ff      	movs	r2, #255	; 0xff
 800e2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	22ff      	movs	r2, #255	; 0xff
 800e2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d114      	bne.n	800e2f0 <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d01a      	beq.n	800e304 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	3310      	adds	r3, #16
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f001 fd3a 	bl	800fd4c <xTaskRemoveFromEventList>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d012      	beq.n	800e304 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2de:	4b0f      	ldr	r3, [pc, #60]	; (800e31c <xQueueGenericReset+0xcc>)
 800e2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	e009      	b.n	800e304 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	3310      	adds	r3, #16
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff fef7 	bl	800e0e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	3324      	adds	r3, #36	; 0x24
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff fef2 	bl	800e0e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e304:	f002 ff7a 	bl	80111fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e308:	2301      	movs	r3, #1
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	08015b90 	.word	0x08015b90
 800e318:	08015bc4 	.word	0x08015bc4
 800e31c:	e000ed04 	.word	0xe000ed04

0800e320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b088      	sub	sp, #32
 800e324:	af02      	add	r7, sp, #8
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d105      	bne.n	800e340 <xQueueGenericCreateStatic+0x20>
 800e334:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800e338:	4929      	ldr	r1, [pc, #164]	; (800e3e0 <xQueueGenericCreateStatic+0xc0>)
 800e33a:	482a      	ldr	r0, [pc, #168]	; (800e3e4 <xQueueGenericCreateStatic+0xc4>)
 800e33c:	f7f5 faa8 	bl	8003890 <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d105      	bne.n	800e352 <xQueueGenericCreateStatic+0x32>
 800e346:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800e34a:	4925      	ldr	r1, [pc, #148]	; (800e3e0 <xQueueGenericCreateStatic+0xc0>)
 800e34c:	4826      	ldr	r0, [pc, #152]	; (800e3e8 <xQueueGenericCreateStatic+0xc8>)
 800e34e:	f7f5 fa9f 	bl	8003890 <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <xQueueGenericCreateStatic+0x3e>
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d001      	beq.n	800e362 <xQueueGenericCreateStatic+0x42>
 800e35e:	2301      	movs	r3, #1
 800e360:	e000      	b.n	800e364 <xQueueGenericCreateStatic+0x44>
 800e362:	2300      	movs	r3, #0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d105      	bne.n	800e374 <xQueueGenericCreateStatic+0x54>
 800e368:	f44f 72a1 	mov.w	r2, #322	; 0x142
 800e36c:	491c      	ldr	r1, [pc, #112]	; (800e3e0 <xQueueGenericCreateStatic+0xc0>)
 800e36e:	481f      	ldr	r0, [pc, #124]	; (800e3ec <xQueueGenericCreateStatic+0xcc>)
 800e370:	f7f5 fa8e 	bl	8003890 <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d102      	bne.n	800e380 <xQueueGenericCreateStatic+0x60>
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <xQueueGenericCreateStatic+0x64>
 800e380:	2301      	movs	r3, #1
 800e382:	e000      	b.n	800e386 <xQueueGenericCreateStatic+0x66>
 800e384:	2300      	movs	r3, #0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d105      	bne.n	800e396 <xQueueGenericCreateStatic+0x76>
 800e38a:	f240 1243 	movw	r2, #323	; 0x143
 800e38e:	4914      	ldr	r1, [pc, #80]	; (800e3e0 <xQueueGenericCreateStatic+0xc0>)
 800e390:	4817      	ldr	r0, [pc, #92]	; (800e3f0 <xQueueGenericCreateStatic+0xd0>)
 800e392:	f7f5 fa7d 	bl	8003890 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e396:	2350      	movs	r3, #80	; 0x50
 800e398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	2b50      	cmp	r3, #80	; 0x50
 800e39e:	d005      	beq.n	800e3ac <xQueueGenericCreateStatic+0x8c>
 800e3a0:	f240 124b 	movw	r2, #331	; 0x14b
 800e3a4:	490e      	ldr	r1, [pc, #56]	; (800e3e0 <xQueueGenericCreateStatic+0xc0>)
 800e3a6:	4813      	ldr	r0, [pc, #76]	; (800e3f4 <xQueueGenericCreateStatic+0xd4>)
 800e3a8:	f7f5 fa72 	bl	8003890 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3ac:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00d      	beq.n	800e3d4 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f000 f84c 	bl	800e46c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3d4:	697b      	ldr	r3, [r7, #20]
	}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	08015b90 	.word	0x08015b90
 800e3e4:	08015bcc 	.word	0x08015bcc
 800e3e8:	08015bf0 	.word	0x08015bf0
 800e3ec:	08015c08 	.word	0x08015c08
 800e3f0:	08015c40 	.word	0x08015c40
 800e3f4:	08015c78 	.word	0x08015c78

0800e3f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	; 0x28
 800e3fc:	af02      	add	r7, sp, #8
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d105      	bne.n	800e418 <xQueueGenericCreate+0x20>
 800e40c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800e410:	4914      	ldr	r1, [pc, #80]	; (800e464 <xQueueGenericCreate+0x6c>)
 800e412:	4815      	ldr	r0, [pc, #84]	; (800e468 <xQueueGenericCreate+0x70>)
 800e414:	f7f5 fa3c 	bl	8003890 <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	fb02 f303 	mul.w	r3, r2, r3
 800e420:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	3350      	adds	r3, #80	; 0x50
 800e426:	4618      	mov	r0, r3
 800e428:	f002 ffca 	bl	80113c0 <pvPortMalloc>
 800e42c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d011      	beq.n	800e458 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	3350      	adds	r3, #80	; 0x50
 800e43c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	2200      	movs	r2, #0
 800e442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e446:	79fa      	ldrb	r2, [r7, #7]
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	4613      	mov	r3, r2
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	68b9      	ldr	r1, [r7, #8]
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f000 f80a 	bl	800e46c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e458:	69bb      	ldr	r3, [r7, #24]
	}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3720      	adds	r7, #32
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	08015b90 	.word	0x08015b90
 800e468:	08015bcc 	.word	0x08015bcc

0800e46c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	69ba      	ldr	r2, [r7, #24]
 800e484:	601a      	str	r2, [r3, #0]
 800e486:	e002      	b.n	800e48e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e49a:	2101      	movs	r1, #1
 800e49c:	69b8      	ldr	r0, [r7, #24]
 800e49e:	f7ff fed7 	bl	800e250 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	78fa      	ldrb	r2, [r7, #3]
 800e4a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e4aa:	bf00      	nop
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00e      	beq.n	800e4de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f837 	bl	800e54c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b086      	sub	sp, #24
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	6939      	ldr	r1, [r7, #16]
 800e4fe:	6978      	ldr	r0, [r7, #20]
 800e500:	f7ff ff7a 	bl	800e3f8 <xQueueGenericCreate>
 800e504:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7ff ffd3 	bl	800e4b2 <prvInitialiseMutex>

		return xNewQueue;
 800e50c:	68fb      	ldr	r3, [r7, #12]
	}
 800e50e:	4618      	mov	r0, r3
 800e510:	3718      	adds	r7, #24
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e516:	b580      	push	{r7, lr}
 800e518:	b088      	sub	sp, #32
 800e51a:	af02      	add	r7, sp, #8
 800e51c:	4603      	mov	r3, r0
 800e51e:	6039      	str	r1, [r7, #0]
 800e520:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e522:	2301      	movs	r3, #1
 800e524:	617b      	str	r3, [r7, #20]
 800e526:	2300      	movs	r3, #0
 800e528:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e52a:	79fb      	ldrb	r3, [r7, #7]
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	2200      	movs	r2, #0
 800e532:	6939      	ldr	r1, [r7, #16]
 800e534:	6978      	ldr	r0, [r7, #20]
 800e536:	f7ff fef3 	bl	800e320 <xQueueGenericCreateStatic>
 800e53a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7ff ffb8 	bl	800e4b2 <prvInitialiseMutex>

		return xNewQueue;
 800e542:	68fb      	ldr	r3, [r7, #12]
	}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08a      	sub	sp, #40	; 0x28
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e55a:	2300      	movs	r3, #0
 800e55c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800e562:	6a3b      	ldr	r3, [r7, #32]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d105      	bne.n	800e574 <xQueueGenericSend+0x28>
 800e568:	f240 22ea 	movw	r2, #746	; 0x2ea
 800e56c:	4977      	ldr	r1, [pc, #476]	; (800e74c <xQueueGenericSend+0x200>)
 800e56e:	4878      	ldr	r0, [pc, #480]	; (800e750 <xQueueGenericSend+0x204>)
 800e570:	f7f5 f98e 	bl	8003890 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d103      	bne.n	800e582 <xQueueGenericSend+0x36>
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d101      	bne.n	800e586 <xQueueGenericSend+0x3a>
 800e582:	2301      	movs	r3, #1
 800e584:	e000      	b.n	800e588 <xQueueGenericSend+0x3c>
 800e586:	2300      	movs	r3, #0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d105      	bne.n	800e598 <xQueueGenericSend+0x4c>
 800e58c:	f240 22eb 	movw	r2, #747	; 0x2eb
 800e590:	496e      	ldr	r1, [pc, #440]	; (800e74c <xQueueGenericSend+0x200>)
 800e592:	4870      	ldr	r0, [pc, #448]	; (800e754 <xQueueGenericSend+0x208>)
 800e594:	f7f5 f97c 	bl	8003890 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d103      	bne.n	800e5a6 <xQueueGenericSend+0x5a>
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d101      	bne.n	800e5aa <xQueueGenericSend+0x5e>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e000      	b.n	800e5ac <xQueueGenericSend+0x60>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d105      	bne.n	800e5bc <xQueueGenericSend+0x70>
 800e5b0:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e5b4:	4965      	ldr	r1, [pc, #404]	; (800e74c <xQueueGenericSend+0x200>)
 800e5b6:	4868      	ldr	r0, [pc, #416]	; (800e758 <xQueueGenericSend+0x20c>)
 800e5b8:	f7f5 f96a 	bl	8003890 <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5bc:	f001 fe58 	bl	8010270 <xTaskGetSchedulerState>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d102      	bne.n	800e5cc <xQueueGenericSend+0x80>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <xQueueGenericSend+0x84>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e000      	b.n	800e5d2 <xQueueGenericSend+0x86>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d105      	bne.n	800e5e2 <xQueueGenericSend+0x96>
 800e5d6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800e5da:	495c      	ldr	r1, [pc, #368]	; (800e74c <xQueueGenericSend+0x200>)
 800e5dc:	485f      	ldr	r0, [pc, #380]	; (800e75c <xQueueGenericSend+0x210>)
 800e5de:	f7f5 f957 	bl	8003890 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5e2:	f002 fddd 	bl	80111a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5e6:	6a3b      	ldr	r3, [r7, #32]
 800e5e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d302      	bcc.n	800e5f8 <xQueueGenericSend+0xac>
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b02      	cmp	r3, #2
 800e5f6:	d12f      	bne.n	800e658 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5fc:	4a58      	ldr	r2, [pc, #352]	; (800e760 <xQueueGenericSend+0x214>)
 800e5fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e602:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e604:	683a      	ldr	r2, [r7, #0]
 800e606:	68b9      	ldr	r1, [r7, #8]
 800e608:	6a38      	ldr	r0, [r7, #32]
 800e60a:	f000 fc4f 	bl	800eeac <prvCopyDataToQueue>
 800e60e:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	2b00      	cmp	r3, #0
 800e616:	d010      	beq.n	800e63a <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	3324      	adds	r3, #36	; 0x24
 800e61c:	4618      	mov	r0, r3
 800e61e:	f001 fb95 	bl	800fd4c <xTaskRemoveFromEventList>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d013      	beq.n	800e650 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e628:	4b4e      	ldr	r3, [pc, #312]	; (800e764 <xQueueGenericSend+0x218>)
 800e62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	e00a      	b.n	800e650 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d007      	beq.n	800e650 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e640:	4b48      	ldr	r3, [pc, #288]	; (800e764 <xQueueGenericSend+0x218>)
 800e642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e646:	601a      	str	r2, [r3, #0]
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e650:	f002 fdd4 	bl	80111fc <vPortExitCritical>
				return pdPASS;
 800e654:	2301      	movs	r3, #1
 800e656:	e075      	b.n	800e744 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d109      	bne.n	800e672 <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e65e:	f002 fdcd 	bl	80111fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e666:	4a3e      	ldr	r2, [pc, #248]	; (800e760 <xQueueGenericSend+0x214>)
 800e668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e66c:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 800e66e:	2300      	movs	r3, #0
 800e670:	e068      	b.n	800e744 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	2b00      	cmp	r3, #0
 800e676:	d106      	bne.n	800e686 <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e678:	f107 0314 	add.w	r3, r7, #20
 800e67c:	4618      	mov	r0, r3
 800e67e:	f001 fbc7 	bl	800fe10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e682:	2301      	movs	r3, #1
 800e684:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e686:	f002 fdb9 	bl	80111fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e68a:	f001 f849 	bl	800f720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e68e:	f002 fd87 	bl	80111a0 <vPortEnterCritical>
 800e692:	6a3b      	ldr	r3, [r7, #32]
 800e694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e698:	b25b      	sxtb	r3, r3
 800e69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e69e:	d103      	bne.n	800e6a8 <xQueueGenericSend+0x15c>
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6ae:	b25b      	sxtb	r3, r3
 800e6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6b4:	d103      	bne.n	800e6be <xQueueGenericSend+0x172>
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6be:	f002 fd9d 	bl	80111fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6c2:	1d3a      	adds	r2, r7, #4
 800e6c4:	f107 0314 	add.w	r3, r7, #20
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 fbb6 	bl	800fe3c <xTaskCheckForTimeOut>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d12a      	bne.n	800e72c <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6d6:	6a38      	ldr	r0, [r7, #32]
 800e6d8:	f000 fce0 	bl	800f09c <prvIsQueueFull>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d01e      	beq.n	800e720 <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e6:	4a1e      	ldr	r2, [pc, #120]	; (800e760 <xQueueGenericSend+0x214>)
 800e6e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e6ec:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	3310      	adds	r3, #16
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f001 fada 	bl	800fcb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e6fc:	6a38      	ldr	r0, [r7, #32]
 800e6fe:	f000 fc65 	bl	800efcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e702:	f001 f81b 	bl	800f73c <xTaskResumeAll>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f47f af6a 	bne.w	800e5e2 <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 800e70e:	4b15      	ldr	r3, [pc, #84]	; (800e764 <xQueueGenericSend+0x218>)
 800e710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	f3bf 8f4f 	dsb	sy
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	e760      	b.n	800e5e2 <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e720:	6a38      	ldr	r0, [r7, #32]
 800e722:	f000 fc53 	bl	800efcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e726:	f001 f809 	bl	800f73c <xTaskResumeAll>
 800e72a:	e75a      	b.n	800e5e2 <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e72c:	6a38      	ldr	r0, [r7, #32]
 800e72e:	f000 fc4d 	bl	800efcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e732:	f001 f803 	bl	800f73c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e73a:	4a09      	ldr	r2, [pc, #36]	; (800e760 <xQueueGenericSend+0x214>)
 800e73c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e740:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 800e742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e744:	4618      	mov	r0, r3
 800e746:	3728      	adds	r7, #40	; 0x28
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	08015b90 	.word	0x08015b90
 800e750:	08015bc4 	.word	0x08015bc4
 800e754:	08015c94 	.word	0x08015c94
 800e758:	08015ce4 	.word	0x08015ce4
 800e75c:	08015d2c 	.word	0x08015d2c
 800e760:	e000000c 	.word	0xe000000c
 800e764:	e000ed04 	.word	0xe000ed04

0800e768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08c      	sub	sp, #48	; 0x30
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d105      	bne.n	800e78c <xQueueGenericSendFromISR+0x24>
 800e780:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800e784:	493e      	ldr	r1, [pc, #248]	; (800e880 <xQueueGenericSendFromISR+0x118>)
 800e786:	483f      	ldr	r0, [pc, #252]	; (800e884 <xQueueGenericSendFromISR+0x11c>)
 800e788:	f7f5 f882 	bl	8003890 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <xQueueGenericSendFromISR+0x32>
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <xQueueGenericSendFromISR+0x36>
 800e79a:	2301      	movs	r3, #1
 800e79c:	e000      	b.n	800e7a0 <xQueueGenericSendFromISR+0x38>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d105      	bne.n	800e7b0 <xQueueGenericSendFromISR+0x48>
 800e7a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e7a8:	4935      	ldr	r1, [pc, #212]	; (800e880 <xQueueGenericSendFromISR+0x118>)
 800e7aa:	4837      	ldr	r0, [pc, #220]	; (800e888 <xQueueGenericSendFromISR+0x120>)
 800e7ac:	f7f5 f870 	bl	8003890 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d103      	bne.n	800e7be <xQueueGenericSendFromISR+0x56>
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d101      	bne.n	800e7c2 <xQueueGenericSendFromISR+0x5a>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e000      	b.n	800e7c4 <xQueueGenericSendFromISR+0x5c>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d105      	bne.n	800e7d4 <xQueueGenericSendFromISR+0x6c>
 800e7c8:	f240 32be 	movw	r2, #958	; 0x3be
 800e7cc:	492c      	ldr	r1, [pc, #176]	; (800e880 <xQueueGenericSendFromISR+0x118>)
 800e7ce:	482f      	ldr	r0, [pc, #188]	; (800e88c <xQueueGenericSendFromISR+0x124>)
 800e7d0:	f7f5 f85e 	bl	8003890 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7d4:	f002 fdba 	bl	801134c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7d8:	f3ef 8211 	mrs	r2, BASEPRI
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	61ba      	str	r2, [r7, #24]
 800e7ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e7f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7f2:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d302      	bcc.n	800e806 <xQueueGenericSendFromISR+0x9e>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b02      	cmp	r3, #2
 800e804:	d12f      	bne.n	800e866 <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e80c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	68b9      	ldr	r1, [r7, #8]
 800e81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e81c:	f000 fb46 	bl	800eeac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e820:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e828:	d112      	bne.n	800e850 <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d016      	beq.n	800e860 <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	3324      	adds	r3, #36	; 0x24
 800e836:	4618      	mov	r0, r3
 800e838:	f001 fa88 	bl	800fd4c <xTaskRemoveFromEventList>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00e      	beq.n	800e860 <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00b      	beq.n	800e860 <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	e007      	b.n	800e860 <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e854:	3301      	adds	r3, #1
 800e856:	b2db      	uxtb	r3, r3
 800e858:	b25a      	sxtb	r2, r3
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e860:	2301      	movs	r3, #1
 800e862:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 800e864:	e001      	b.n	800e86a <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e866:	2300      	movs	r3, #0
 800e868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e874:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3730      	adds	r7, #48	; 0x30
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	08015b90 	.word	0x08015b90
 800e884:	08015bc4 	.word	0x08015bc4
 800e888:	08015c94 	.word	0x08015c94
 800e88c:	08015ce4 	.word	0x08015ce4

0800e890 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08a      	sub	sp, #40	; 0x28
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d105      	bne.n	800e8b0 <xQueueGiveFromISR+0x20>
 800e8a4:	f240 4264 	movw	r2, #1124	; 0x464
 800e8a8:	4937      	ldr	r1, [pc, #220]	; (800e988 <xQueueGiveFromISR+0xf8>)
 800e8aa:	4838      	ldr	r0, [pc, #224]	; (800e98c <xQueueGiveFromISR+0xfc>)
 800e8ac:	f7f4 fff0 	bl	8003890 <assertFail>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d005      	beq.n	800e8c4 <xQueueGiveFromISR+0x34>
 800e8b8:	f44f 628d 	mov.w	r2, #1128	; 0x468
 800e8bc:	4932      	ldr	r1, [pc, #200]	; (800e988 <xQueueGiveFromISR+0xf8>)
 800e8be:	4834      	ldr	r0, [pc, #208]	; (800e990 <xQueueGiveFromISR+0x100>)
 800e8c0:	f7f4 ffe6 	bl	8003890 <assertFail>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d103      	bne.n	800e8d4 <xQueueGiveFromISR+0x44>
 800e8cc:	6a3b      	ldr	r3, [r7, #32]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <xQueueGiveFromISR+0x48>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e000      	b.n	800e8da <xQueueGiveFromISR+0x4a>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d105      	bne.n	800e8ea <xQueueGiveFromISR+0x5a>
 800e8de:	f240 426d 	movw	r2, #1133	; 0x46d
 800e8e2:	4929      	ldr	r1, [pc, #164]	; (800e988 <xQueueGiveFromISR+0xf8>)
 800e8e4:	482b      	ldr	r0, [pc, #172]	; (800e994 <xQueueGiveFromISR+0x104>)
 800e8e6:	f7f4 ffd3 	bl	8003890 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8ea:	f002 fd2f 	bl	801134c <vPortValidateInterruptPriority>
	__asm volatile
 800e8ee:	f3ef 8211 	mrs	r2, BASEPRI
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	613a      	str	r2, [r7, #16]
 800e904:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800e906:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e908:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e90a:	6a3b      	ldr	r3, [r7, #32]
 800e90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90e:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e914:	69ba      	ldr	r2, [r7, #24]
 800e916:	429a      	cmp	r2, r3
 800e918:	d229      	bcs.n	800e96e <xQueueGiveFromISR+0xde>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e920:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	1c5a      	adds	r2, r3, #1
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e92a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e932:	d112      	bne.n	800e95a <xQueueGiveFromISR+0xca>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d015      	beq.n	800e968 <xQueueGiveFromISR+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	3324      	adds	r3, #36	; 0x24
 800e940:	4618      	mov	r0, r3
 800e942:	f001 fa03 	bl	800fd4c <xTaskRemoveFromEventList>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d00d      	beq.n	800e968 <xQueueGiveFromISR+0xd8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00a      	beq.n	800e968 <xQueueGiveFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2201      	movs	r2, #1
 800e956:	601a      	str	r2, [r3, #0]
 800e958:	e006      	b.n	800e968 <xQueueGiveFromISR+0xd8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	3301      	adds	r3, #1
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	b25a      	sxtb	r2, r3
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e968:	2301      	movs	r3, #1
 800e96a:	627b      	str	r3, [r7, #36]	; 0x24
 800e96c:	e001      	b.n	800e972 <xQueueGiveFromISR+0xe2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e96e:	2300      	movs	r3, #0
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	f383 8811 	msr	BASEPRI, r3
}
 800e97c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e980:	4618      	mov	r0, r3
 800e982:	3728      	adds	r7, #40	; 0x28
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	08015b90 	.word	0x08015b90
 800e98c:	08015bc4 	.word	0x08015bc4
 800e990:	08015d84 	.word	0x08015d84
 800e994:	08015da0 	.word	0x08015da0

0800e998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08a      	sub	sp, #40	; 0x28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e9ac:	6a3b      	ldr	r3, [r7, #32]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d105      	bne.n	800e9be <xQueueReceive+0x26>
 800e9b2:	f240 5204 	movw	r2, #1284	; 0x504
 800e9b6:	4962      	ldr	r1, [pc, #392]	; (800eb40 <xQueueReceive+0x1a8>)
 800e9b8:	4862      	ldr	r0, [pc, #392]	; (800eb44 <xQueueReceive+0x1ac>)
 800e9ba:	f7f4 ff69 	bl	8003890 <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d103      	bne.n	800e9cc <xQueueReceive+0x34>
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <xQueueReceive+0x38>
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e000      	b.n	800e9d2 <xQueueReceive+0x3a>
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d105      	bne.n	800e9e2 <xQueueReceive+0x4a>
 800e9d6:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800e9da:	4959      	ldr	r1, [pc, #356]	; (800eb40 <xQueueReceive+0x1a8>)
 800e9dc:	485a      	ldr	r0, [pc, #360]	; (800eb48 <xQueueReceive+0x1b0>)
 800e9de:	f7f4 ff57 	bl	8003890 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9e2:	f001 fc45 	bl	8010270 <xTaskGetSchedulerState>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d102      	bne.n	800e9f2 <xQueueReceive+0x5a>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d101      	bne.n	800e9f6 <xQueueReceive+0x5e>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e000      	b.n	800e9f8 <xQueueReceive+0x60>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d105      	bne.n	800ea08 <xQueueReceive+0x70>
 800e9fc:	f240 520d 	movw	r2, #1293	; 0x50d
 800ea00:	494f      	ldr	r1, [pc, #316]	; (800eb40 <xQueueReceive+0x1a8>)
 800ea02:	4852      	ldr	r0, [pc, #328]	; (800eb4c <xQueueReceive+0x1b4>)
 800ea04:	f7f4 ff44 	bl	8003890 <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea08:	f002 fbca 	bl	80111a0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea10:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d01f      	beq.n	800ea58 <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea18:	68b9      	ldr	r1, [r7, #8]
 800ea1a:	6a38      	ldr	r0, [r7, #32]
 800ea1c:	f000 fab0 	bl	800ef80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	1e5a      	subs	r2, r3, #1
 800ea24:	6a3b      	ldr	r3, [r7, #32]
 800ea26:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00f      	beq.n	800ea50 <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	3310      	adds	r3, #16
 800ea34:	4618      	mov	r0, r3
 800ea36:	f001 f989 	bl	800fd4c <xTaskRemoveFromEventList>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea40:	4b43      	ldr	r3, [pc, #268]	; (800eb50 <xQueueReceive+0x1b8>)
 800ea42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea50:	f002 fbd4 	bl	80111fc <vPortExitCritical>
				return pdPASS;
 800ea54:	2301      	movs	r3, #1
 800ea56:	e06f      	b.n	800eb38 <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d103      	bne.n	800ea66 <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea5e:	f002 fbcd 	bl	80111fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea62:	2300      	movs	r3, #0
 800ea64:	e068      	b.n	800eb38 <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d106      	bne.n	800ea7a <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea6c:	f107 0314 	add.w	r3, r7, #20
 800ea70:	4618      	mov	r0, r3
 800ea72:	f001 f9cd 	bl	800fe10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea76:	2301      	movs	r3, #1
 800ea78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea7a:	f002 fbbf 	bl	80111fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea7e:	f000 fe4f 	bl	800f720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea82:	f002 fb8d 	bl	80111a0 <vPortEnterCritical>
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea8c:	b25b      	sxtb	r3, r3
 800ea8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea92:	d103      	bne.n	800ea9c <xQueueReceive+0x104>
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eaa2:	b25b      	sxtb	r3, r3
 800eaa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa8:	d103      	bne.n	800eab2 <xQueueReceive+0x11a>
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eab2:	f002 fba3 	bl	80111fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eab6:	1d3a      	adds	r2, r7, #4
 800eab8:	f107 0314 	add.w	r3, r7, #20
 800eabc:	4611      	mov	r1, r2
 800eabe:	4618      	mov	r0, r3
 800eac0:	f001 f9bc 	bl	800fe3c <xTaskCheckForTimeOut>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d129      	bne.n	800eb1e <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaca:	6a38      	ldr	r0, [r7, #32]
 800eacc:	f000 fad0 	bl	800f070 <prvIsQueueEmpty>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d01d      	beq.n	800eb12 <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800ead6:	6a3b      	ldr	r3, [r7, #32]
 800ead8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eada:	4a1e      	ldr	r2, [pc, #120]	; (800eb54 <xQueueReceive+0x1bc>)
 800eadc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800eae0:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eae2:	6a3b      	ldr	r3, [r7, #32]
 800eae4:	3324      	adds	r3, #36	; 0x24
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	4611      	mov	r1, r2
 800eaea:	4618      	mov	r0, r3
 800eaec:	f001 f8e0 	bl	800fcb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eaf0:	6a38      	ldr	r0, [r7, #32]
 800eaf2:	f000 fa6b 	bl	800efcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eaf6:	f000 fe21 	bl	800f73c <xTaskResumeAll>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d183      	bne.n	800ea08 <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 800eb00:	4b13      	ldr	r3, [pc, #76]	; (800eb50 <xQueueReceive+0x1b8>)
 800eb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	e77a      	b.n	800ea08 <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eb12:	6a38      	ldr	r0, [r7, #32]
 800eb14:	f000 fa5a 	bl	800efcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb18:	f000 fe10 	bl	800f73c <xTaskResumeAll>
 800eb1c:	e774      	b.n	800ea08 <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eb1e:	6a38      	ldr	r0, [r7, #32]
 800eb20:	f000 fa54 	bl	800efcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb24:	f000 fe0a 	bl	800f73c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb28:	6a38      	ldr	r0, [r7, #32]
 800eb2a:	f000 faa1 	bl	800f070 <prvIsQueueEmpty>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f43f af69 	beq.w	800ea08 <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3728      	adds	r7, #40	; 0x28
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	08015b90 	.word	0x08015b90
 800eb44:	08015e08 	.word	0x08015e08
 800eb48:	08015e14 	.word	0x08015e14
 800eb4c:	08015d2c 	.word	0x08015d2c
 800eb50:	e000ed04 	.word	0xe000ed04
 800eb54:	e000000c 	.word	0xe000000c

0800eb58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08a      	sub	sp, #40	; 0x28
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb62:	2300      	movs	r3, #0
 800eb64:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d105      	bne.n	800eb80 <xQueueSemaphoreTake+0x28>
 800eb74:	f240 5295 	movw	r2, #1429	; 0x595
 800eb78:	4975      	ldr	r1, [pc, #468]	; (800ed50 <xQueueSemaphoreTake+0x1f8>)
 800eb7a:	4876      	ldr	r0, [pc, #472]	; (800ed54 <xQueueSemaphoreTake+0x1fc>)
 800eb7c:	f7f4 fe88 	bl	8003890 <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d005      	beq.n	800eb94 <xQueueSemaphoreTake+0x3c>
 800eb88:	f240 5299 	movw	r2, #1433	; 0x599
 800eb8c:	4970      	ldr	r1, [pc, #448]	; (800ed50 <xQueueSemaphoreTake+0x1f8>)
 800eb8e:	4872      	ldr	r0, [pc, #456]	; (800ed58 <xQueueSemaphoreTake+0x200>)
 800eb90:	f7f4 fe7e 	bl	8003890 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb94:	f001 fb6c 	bl	8010270 <xTaskGetSchedulerState>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d102      	bne.n	800eba4 <xQueueSemaphoreTake+0x4c>
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d101      	bne.n	800eba8 <xQueueSemaphoreTake+0x50>
 800eba4:	2301      	movs	r3, #1
 800eba6:	e000      	b.n	800ebaa <xQueueSemaphoreTake+0x52>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d105      	bne.n	800ebba <xQueueSemaphoreTake+0x62>
 800ebae:	f240 529e 	movw	r2, #1438	; 0x59e
 800ebb2:	4967      	ldr	r1, [pc, #412]	; (800ed50 <xQueueSemaphoreTake+0x1f8>)
 800ebb4:	4869      	ldr	r0, [pc, #420]	; (800ed5c <xQueueSemaphoreTake+0x204>)
 800ebb6:	f7f4 fe6b 	bl	8003890 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebba:	f002 faf1 	bl	80111a0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc2:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d024      	beq.n	800ec14 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	1e5a      	subs	r2, r3, #1
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d104      	bne.n	800ebe4 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ebda:	f001 fce9 	bl	80105b0 <pvTaskIncrementMutexHeldCount>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00f      	beq.n	800ec0c <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	3310      	adds	r3, #16
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f001 f8ab 	bl	800fd4c <xTaskRemoveFromEventList>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d007      	beq.n	800ec0c <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ebfc:	4b58      	ldr	r3, [pc, #352]	; (800ed60 <xQueueSemaphoreTake+0x208>)
 800ebfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec0c:	f002 faf6 	bl	80111fc <vPortExitCritical>
				return pdPASS;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e098      	b.n	800ed46 <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d10c      	bne.n	800ec34 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d005      	beq.n	800ec2c <xQueueSemaphoreTake+0xd4>
 800ec20:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800ec24:	494a      	ldr	r1, [pc, #296]	; (800ed50 <xQueueSemaphoreTake+0x1f8>)
 800ec26:	484f      	ldr	r0, [pc, #316]	; (800ed64 <xQueueSemaphoreTake+0x20c>)
 800ec28:	f7f4 fe32 	bl	8003890 <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ec2c:	f002 fae6 	bl	80111fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec30:	2300      	movs	r3, #0
 800ec32:	e088      	b.n	800ed46 <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec3a:	f107 030c 	add.w	r3, r7, #12
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f001 f8e6 	bl	800fe10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec48:	f002 fad8 	bl	80111fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec4c:	f000 fd68 	bl	800f720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec50:	f002 faa6 	bl	80111a0 <vPortEnterCritical>
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec5a:	b25b      	sxtb	r3, r3
 800ec5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec60:	d103      	bne.n	800ec6a <xQueueSemaphoreTake+0x112>
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec70:	b25b      	sxtb	r3, r3
 800ec72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec76:	d103      	bne.n	800ec80 <xQueueSemaphoreTake+0x128>
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec80:	f002 fabc 	bl	80111fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec84:	463a      	mov	r2, r7
 800ec86:	f107 030c 	add.w	r3, r7, #12
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f001 f8d5 	bl	800fe3c <xTaskCheckForTimeOut>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d138      	bne.n	800ed0a <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec98:	69f8      	ldr	r0, [r7, #28]
 800ec9a:	f000 f9e9 	bl	800f070 <prvIsQueueEmpty>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d02c      	beq.n	800ecfe <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eca8:	4a2f      	ldr	r2, [pc, #188]	; (800ed68 <xQueueSemaphoreTake+0x210>)
 800ecaa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ecae:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d109      	bne.n	800eccc <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 800ecb8:	f002 fa72 	bl	80111a0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f001 faf3 	bl	80102ac <xTaskPriorityInherit>
 800ecc6:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800ecc8:	f002 fa98 	bl	80111fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	3324      	adds	r3, #36	; 0x24
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	4611      	mov	r1, r2
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f000 ffeb 	bl	800fcb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ecda:	69f8      	ldr	r0, [r7, #28]
 800ecdc:	f000 f976 	bl	800efcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ece0:	f000 fd2c 	bl	800f73c <xTaskResumeAll>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f47f af67 	bne.w	800ebba <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 800ecec:	4b1c      	ldr	r3, [pc, #112]	; (800ed60 <xQueueSemaphoreTake+0x208>)
 800ecee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	e75d      	b.n	800ebba <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ecfe:	69f8      	ldr	r0, [r7, #28]
 800ed00:	f000 f964 	bl	800efcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed04:	f000 fd1a 	bl	800f73c <xTaskResumeAll>
 800ed08:	e757      	b.n	800ebba <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ed0a:	69f8      	ldr	r0, [r7, #28]
 800ed0c:	f000 f95e 	bl	800efcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed10:	f000 fd14 	bl	800f73c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed14:	69f8      	ldr	r0, [r7, #28]
 800ed16:	f000 f9ab 	bl	800f070 <prvIsQueueEmpty>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f43f af4c 	beq.w	800ebba <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ed22:	6a3b      	ldr	r3, [r7, #32]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00d      	beq.n	800ed44 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 800ed28:	f002 fa3a 	bl	80111a0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ed2c:	69f8      	ldr	r0, [r7, #28]
 800ed2e:	f000 f8a5 	bl	800ee7c <prvGetDisinheritPriorityAfterTimeout>
 800ed32:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	6979      	ldr	r1, [r7, #20]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f001 fbae 	bl	801049c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ed40:	f002 fa5c 	bl	80111fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3728      	adds	r7, #40	; 0x28
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	08015b90 	.word	0x08015b90
 800ed54:	08015e08 	.word	0x08015e08
 800ed58:	08015d84 	.word	0x08015d84
 800ed5c:	08015d2c 	.word	0x08015d2c
 800ed60:	e000ed04 	.word	0xe000ed04
 800ed64:	08015e68 	.word	0x08015e68
 800ed68:	e000000c 	.word	0xe000000c

0800ed6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b08c      	sub	sp, #48	; 0x30
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d105      	bne.n	800ed8e <xQueueReceiveFromISR+0x22>
 800ed82:	f240 62ff 	movw	r2, #1791	; 0x6ff
 800ed86:	4933      	ldr	r1, [pc, #204]	; (800ee54 <xQueueReceiveFromISR+0xe8>)
 800ed88:	4833      	ldr	r0, [pc, #204]	; (800ee58 <xQueueReceiveFromISR+0xec>)
 800ed8a:	f7f4 fd81 	bl	8003890 <assertFail>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d103      	bne.n	800ed9c <xQueueReceiveFromISR+0x30>
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <xQueueReceiveFromISR+0x34>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e000      	b.n	800eda2 <xQueueReceiveFromISR+0x36>
 800eda0:	2300      	movs	r3, #0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d105      	bne.n	800edb2 <xQueueReceiveFromISR+0x46>
 800eda6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800edaa:	492a      	ldr	r1, [pc, #168]	; (800ee54 <xQueueReceiveFromISR+0xe8>)
 800edac:	482b      	ldr	r0, [pc, #172]	; (800ee5c <xQueueReceiveFromISR+0xf0>)
 800edae:	f7f4 fd6f 	bl	8003890 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edb2:	f002 facb 	bl	801134c <vPortValidateInterruptPriority>
	__asm volatile
 800edb6:	f3ef 8211 	mrs	r2, BASEPRI
 800edba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	61ba      	str	r2, [r7, #24]
 800edcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800edce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edd0:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd6:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edd8:	6a3b      	ldr	r3, [r7, #32]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d02d      	beq.n	800ee3a <xQueueReceiveFromISR+0xce>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ede4:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ede6:	68b9      	ldr	r1, [r7, #8]
 800ede8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edea:	f000 f8c9 	bl	800ef80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	1e5a      	subs	r2, r3, #1
 800edf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800edf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800edfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edfe:	d112      	bne.n	800ee26 <xQueueReceiveFromISR+0xba>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d015      	beq.n	800ee34 <xQueueReceiveFromISR+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	3310      	adds	r3, #16
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 ff9d 	bl	800fd4c <xTaskRemoveFromEventList>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00d      	beq.n	800ee34 <xQueueReceiveFromISR+0xc8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00a      	beq.n	800ee34 <xQueueReceiveFromISR+0xc8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	e006      	b.n	800ee34 <xQueueReceiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ee26:	7ffb      	ldrb	r3, [r7, #31]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	b25a      	sxtb	r2, r3
 800ee2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ee34:	2301      	movs	r3, #1
 800ee36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee38:	e001      	b.n	800ee3e <xQueueReceiveFromISR+0xd2>
		}
		else
		{
			xReturn = pdFAIL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	f383 8811 	msr	BASEPRI, r3
}
 800ee48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3730      	adds	r7, #48	; 0x30
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	08015b90 	.word	0x08015b90
 800ee58:	08015bc4 	.word	0x08015bc4
 800ee5c:	08015e88 	.word	0x08015e88

0800ee60 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b085      	sub	sp, #20
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d006      	beq.n	800ee9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f1c3 0314 	rsb	r3, r3, #20
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	e001      	b.n	800ee9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
	}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3714      	adds	r7, #20
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b086      	sub	sp, #24
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10d      	bne.n	800eee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d14d      	bne.n	800ef6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f001 fa5e 	bl	8010398 <xTaskPriorityDisinherit>
 800eedc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	609a      	str	r2, [r3, #8]
 800eee4:	e043      	b.n	800ef6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d119      	bne.n	800ef20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6858      	ldr	r0, [r3, #4]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eef4:	461a      	mov	r2, r3
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	f004 f8f7 	bl	80130ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	685a      	ldr	r2, [r3, #4]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef04:	441a      	add	r2, r3
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d32b      	bcc.n	800ef6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	605a      	str	r2, [r3, #4]
 800ef1e:	e026      	b.n	800ef6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	68d8      	ldr	r0, [r3, #12]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef28:	461a      	mov	r2, r3
 800ef2a:	68b9      	ldr	r1, [r7, #8]
 800ef2c:	f004 f8dd 	bl	80130ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	68da      	ldr	r2, [r3, #12]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef38:	425b      	negs	r3, r3
 800ef3a:	441a      	add	r2, r3
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	68da      	ldr	r2, [r3, #12]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d207      	bcs.n	800ef5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	689a      	ldr	r2, [r3, #8]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef54:	425b      	negs	r3, r3
 800ef56:	441a      	add	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d105      	bne.n	800ef6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d002      	beq.n	800ef6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	1c5a      	adds	r2, r3, #1
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ef76:	697b      	ldr	r3, [r7, #20]
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3718      	adds	r7, #24
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d018      	beq.n	800efc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68da      	ldr	r2, [r3, #12]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef9a:	441a      	add	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d303      	bcc.n	800efb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	68d9      	ldr	r1, [r3, #12]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efbc:	461a      	mov	r2, r3
 800efbe:	6838      	ldr	r0, [r7, #0]
 800efc0:	f004 f893 	bl	80130ea <memcpy>
	}
}
 800efc4:	bf00      	nop
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800efd4:	f002 f8e4 	bl	80111a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efe0:	e011      	b.n	800f006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d012      	beq.n	800f010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3324      	adds	r3, #36	; 0x24
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 feac 	bl	800fd4c <xTaskRemoveFromEventList>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800effa:	f000 ff7d 	bl	800fef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
 800f000:	3b01      	subs	r3, #1
 800f002:	b2db      	uxtb	r3, r3
 800f004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dce9      	bgt.n	800efe2 <prvUnlockQueue+0x16>
 800f00e:	e000      	b.n	800f012 <prvUnlockQueue+0x46>
					break;
 800f010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	22ff      	movs	r2, #255	; 0xff
 800f016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f01a:	f002 f8ef 	bl	80111fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f01e:	f002 f8bf 	bl	80111a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f02a:	e011      	b.n	800f050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d012      	beq.n	800f05a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3310      	adds	r3, #16
 800f038:	4618      	mov	r0, r3
 800f03a:	f000 fe87 	bl	800fd4c <xTaskRemoveFromEventList>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f044:	f000 ff58 	bl	800fef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f048:	7bbb      	ldrb	r3, [r7, #14]
 800f04a:	3b01      	subs	r3, #1
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f054:	2b00      	cmp	r3, #0
 800f056:	dce9      	bgt.n	800f02c <prvUnlockQueue+0x60>
 800f058:	e000      	b.n	800f05c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f05a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	22ff      	movs	r2, #255	; 0xff
 800f060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f064:	f002 f8ca 	bl	80111fc <vPortExitCritical>
}
 800f068:	bf00      	nop
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f078:	f002 f892 	bl	80111a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f080:	2b00      	cmp	r3, #0
 800f082:	d102      	bne.n	800f08a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f084:	2301      	movs	r3, #1
 800f086:	60fb      	str	r3, [r7, #12]
 800f088:	e001      	b.n	800f08e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f08e:	f002 f8b5 	bl	80111fc <vPortExitCritical>

	return xReturn;
 800f092:	68fb      	ldr	r3, [r7, #12]
}
 800f094:	4618      	mov	r0, r3
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f0a4:	f002 f87c 	bl	80111a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d102      	bne.n	800f0ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	60fb      	str	r3, [r7, #12]
 800f0b8:	e001      	b.n	800f0be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f0be:	f002 f89d 	bl	80111fc <vPortExitCritical>

	return xReturn;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3710      	adds	r7, #16
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	60fb      	str	r3, [r7, #12]
 800f0da:	e014      	b.n	800f106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f0dc:	4a0f      	ldr	r2, [pc, #60]	; (800f11c <vQueueAddToRegistry+0x50>)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10b      	bne.n	800f100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0e8:	490c      	ldr	r1, [pc, #48]	; (800f11c <vQueueAddToRegistry+0x50>)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	683a      	ldr	r2, [r7, #0]
 800f0ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0f2:	4a0a      	ldr	r2, [pc, #40]	; (800f11c <vQueueAddToRegistry+0x50>)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	00db      	lsls	r3, r3, #3
 800f0f8:	4413      	add	r3, r2
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f0fe:	e006      	b.n	800f10e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3301      	adds	r3, #1
 800f104:	60fb      	str	r3, [r7, #12]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b09      	cmp	r3, #9
 800f10a:	d9e7      	bls.n	800f0dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f10c:	bf00      	nop
 800f10e:	bf00      	nop
 800f110:	3714      	adds	r7, #20
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	200051ec 	.word	0x200051ec

0800f120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f130:	f002 f836 	bl	80111a0 <vPortEnterCritical>
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f13a:	b25b      	sxtb	r3, r3
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f140:	d103      	bne.n	800f14a <vQueueWaitForMessageRestricted+0x2a>
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f150:	b25b      	sxtb	r3, r3
 800f152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f156:	d103      	bne.n	800f160 <vQueueWaitForMessageRestricted+0x40>
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f160:	f002 f84c 	bl	80111fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d106      	bne.n	800f17a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	3324      	adds	r3, #36	; 0x24
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	68b9      	ldr	r1, [r7, #8]
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fdbf 	bl	800fcf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f17a:	6978      	ldr	r0, [r7, #20]
 800f17c:	f7ff ff26 	bl	800efcc <prvUnlockQueue>
	}
 800f180:	bf00      	nop
 800f182:	3718      	adds	r7, #24
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08c      	sub	sp, #48	; 0x30
 800f18c:	af04      	add	r7, sp, #16
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d105      	bne.n	800f1a8 <xTaskCreateStatic+0x20>
 800f19c:	f44f 7214 	mov.w	r2, #592	; 0x250
 800f1a0:	4920      	ldr	r1, [pc, #128]	; (800f224 <xTaskCreateStatic+0x9c>)
 800f1a2:	4821      	ldr	r0, [pc, #132]	; (800f228 <xTaskCreateStatic+0xa0>)
 800f1a4:	f7f4 fb74 	bl	8003890 <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d105      	bne.n	800f1ba <xTaskCreateStatic+0x32>
 800f1ae:	f240 2251 	movw	r2, #593	; 0x251
 800f1b2:	491c      	ldr	r1, [pc, #112]	; (800f224 <xTaskCreateStatic+0x9c>)
 800f1b4:	481d      	ldr	r0, [pc, #116]	; (800f22c <xTaskCreateStatic+0xa4>)
 800f1b6:	f7f4 fb6b 	bl	8003890 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1ba:	23b8      	movs	r3, #184	; 0xb8
 800f1bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	2bb8      	cmp	r3, #184	; 0xb8
 800f1c2:	d005      	beq.n	800f1d0 <xTaskCreateStatic+0x48>
 800f1c4:	f240 2259 	movw	r2, #601	; 0x259
 800f1c8:	4916      	ldr	r1, [pc, #88]	; (800f224 <xTaskCreateStatic+0x9c>)
 800f1ca:	4819      	ldr	r0, [pc, #100]	; (800f230 <xTaskCreateStatic+0xa8>)
 800f1cc:	f7f4 fb60 	bl	8003890 <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f1d0:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d01e      	beq.n	800f216 <xTaskCreateStatic+0x8e>
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d01b      	beq.n	800f216 <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	9303      	str	r3, [sp, #12]
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	9302      	str	r3, [sp, #8]
 800f1f8:	f107 0318 	add.w	r3, r7, #24
 800f1fc:	9301      	str	r3, [sp, #4]
 800f1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	68b9      	ldr	r1, [r7, #8]
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 f859 	bl	800f2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f000 f904 	bl	800f41c <prvAddNewTaskToReadyList>
 800f214:	e001      	b.n	800f21a <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 800f216:	2300      	movs	r3, #0
 800f218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f21a:	69bb      	ldr	r3, [r7, #24]
	}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3720      	adds	r7, #32
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	08015ef8 	.word	0x08015ef8
 800f228:	08015f2c 	.word	0x08015f2c
 800f22c:	08015f44 	.word	0x08015f44
 800f230:	08015f5c 	.word	0x08015f5c

0800f234 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f234:	b580      	push	{r7, lr}
 800f236:	b08c      	sub	sp, #48	; 0x30
 800f238:	af04      	add	r7, sp, #16
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	603b      	str	r3, [r7, #0]
 800f240:	4613      	mov	r3, r2
 800f242:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f244:	88fb      	ldrh	r3, [r7, #6]
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4618      	mov	r0, r3
 800f24a:	f002 f8b9 	bl	80113c0 <pvPortMalloc>
 800f24e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00e      	beq.n	800f274 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f256:	20b8      	movs	r0, #184	; 0xb8
 800f258:	f002 f8b2 	bl	80113c0 <pvPortMalloc>
 800f25c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d003      	beq.n	800f26c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	631a      	str	r2, [r3, #48]	; 0x30
 800f26a:	e005      	b.n	800f278 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f26c:	6978      	ldr	r0, [r7, #20]
 800f26e:	f002 f969 	bl	8011544 <vPortFree>
 800f272:	e001      	b.n	800f278 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f274:	2300      	movs	r3, #0
 800f276:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d017      	beq.n	800f2ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f286:	88fa      	ldrh	r2, [r7, #6]
 800f288:	2300      	movs	r3, #0
 800f28a:	9303      	str	r3, [sp, #12]
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	9302      	str	r3, [sp, #8]
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	9301      	str	r3, [sp, #4]
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	68b9      	ldr	r1, [r7, #8]
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f000 f80f 	bl	800f2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2a2:	69f8      	ldr	r0, [r7, #28]
 800f2a4:	f000 f8ba 	bl	800f41c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	e002      	b.n	800f2b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2b4:	69bb      	ldr	r3, [r7, #24]
	}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3720      	adds	r7, #32
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
 800f2cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	21a5      	movs	r1, #165	; 0xa5
 800f2da:	f003 fe1d 	bl	8012f18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2e8:	3b01      	subs	r3, #1
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	f023 0307 	bic.w	r3, r3, #7
 800f2f6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	f003 0307 	and.w	r3, r3, #7
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d005      	beq.n	800f30e <prvInitialiseNewTask+0x4e>
 800f302:	f44f 7259 	mov.w	r2, #868	; 0x364
 800f306:	4940      	ldr	r1, [pc, #256]	; (800f408 <prvInitialiseNewTask+0x148>)
 800f308:	4840      	ldr	r0, [pc, #256]	; (800f40c <prvInitialiseNewTask+0x14c>)
 800f30a:	f7f4 fac1 	bl	8003890 <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d01f      	beq.n	800f35a <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f31a:	2300      	movs	r3, #0
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e012      	b.n	800f346 <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f320:	68ba      	ldr	r2, [r7, #8]
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	4413      	add	r3, r2
 800f326:	7819      	ldrb	r1, [r3, #0]
 800f328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	4413      	add	r3, r2
 800f32e:	3334      	adds	r3, #52	; 0x34
 800f330:	460a      	mov	r2, r1
 800f332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	4413      	add	r3, r2
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d006      	beq.n	800f34e <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	3301      	adds	r3, #1
 800f344:	617b      	str	r3, [r7, #20]
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	2b0f      	cmp	r3, #15
 800f34a:	d9e9      	bls.n	800f320 <prvInitialiseNewTask+0x60>
 800f34c:	e000      	b.n	800f350 <prvInitialiseNewTask+0x90>
			{
				break;
 800f34e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f358:	e003      	b.n	800f362 <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	2200      	movs	r2, #0
 800f35e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	2b13      	cmp	r3, #19
 800f366:	d901      	bls.n	800f36c <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f368:	2313      	movs	r3, #19
 800f36a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	6a3a      	ldr	r2, [r7, #32]
 800f370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	6a3a      	ldr	r2, [r7, #32]
 800f376:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37a:	2200      	movs	r2, #0
 800f37c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	3304      	adds	r3, #4
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe fed0 	bl	800e128 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	3318      	adds	r3, #24
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe fecb 	bl	800e128 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f398:	6a3b      	ldr	r3, [r7, #32]
 800f39a:	f1c3 0214 	rsb	r2, r3, #20
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	3360      	adds	r3, #96	; 0x60
 800f3c8:	224c      	movs	r2, #76	; 0x4c
 800f3ca:	2100      	movs	r1, #0
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f003 fda3 	bl	8012f18 <memset>
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	4a0e      	ldr	r2, [pc, #56]	; (800f410 <prvInitialiseNewTask+0x150>)
 800f3d6:	665a      	str	r2, [r3, #100]	; 0x64
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	4a0e      	ldr	r2, [pc, #56]	; (800f414 <prvInitialiseNewTask+0x154>)
 800f3dc:	669a      	str	r2, [r3, #104]	; 0x68
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	4a0d      	ldr	r2, [pc, #52]	; (800f418 <prvInitialiseNewTask+0x158>)
 800f3e2:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	68f9      	ldr	r1, [r7, #12]
 800f3e8:	6938      	ldr	r0, [r7, #16]
 800f3ea:	f001 fda7 	bl	8010f3c <pxPortInitialiseStack>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d002      	beq.n	800f400 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f400:	bf00      	nop
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08015ef8 	.word	0x08015ef8
 800f40c:	08015f78 	.word	0x08015f78
 800f410:	2000ae4c 	.word	0x2000ae4c
 800f414:	2000aeb4 	.word	0x2000aeb4
 800f418:	2000af1c 	.word	0x2000af1c

0800f41c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f424:	f001 febc 	bl	80111a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f428:	4b2c      	ldr	r3, [pc, #176]	; (800f4dc <prvAddNewTaskToReadyList+0xc0>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	3301      	adds	r3, #1
 800f42e:	4a2b      	ldr	r2, [pc, #172]	; (800f4dc <prvAddNewTaskToReadyList+0xc0>)
 800f430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f432:	4b2b      	ldr	r3, [pc, #172]	; (800f4e0 <prvAddNewTaskToReadyList+0xc4>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d109      	bne.n	800f44e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f43a:	4a29      	ldr	r2, [pc, #164]	; (800f4e0 <prvAddNewTaskToReadyList+0xc4>)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f440:	4b26      	ldr	r3, [pc, #152]	; (800f4dc <prvAddNewTaskToReadyList+0xc0>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b01      	cmp	r3, #1
 800f446:	d110      	bne.n	800f46a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f448:	f000 fd7c 	bl	800ff44 <prvInitialiseTaskLists>
 800f44c:	e00d      	b.n	800f46a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f44e:	4b25      	ldr	r3, [pc, #148]	; (800f4e4 <prvAddNewTaskToReadyList+0xc8>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d109      	bne.n	800f46a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f456:	4b22      	ldr	r3, [pc, #136]	; (800f4e0 <prvAddNewTaskToReadyList+0xc4>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f460:	429a      	cmp	r2, r3
 800f462:	d802      	bhi.n	800f46a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f464:	4a1e      	ldr	r2, [pc, #120]	; (800f4e0 <prvAddNewTaskToReadyList+0xc4>)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f46a:	4b1f      	ldr	r3, [pc, #124]	; (800f4e8 <prvAddNewTaskToReadyList+0xcc>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	3301      	adds	r3, #1
 800f470:	4a1d      	ldr	r2, [pc, #116]	; (800f4e8 <prvAddNewTaskToReadyList+0xcc>)
 800f472:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f474:	4b1c      	ldr	r3, [pc, #112]	; (800f4e8 <prvAddNewTaskToReadyList+0xcc>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f480:	2201      	movs	r2, #1
 800f482:	409a      	lsls	r2, r3
 800f484:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <prvAddNewTaskToReadyList+0xd0>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4313      	orrs	r3, r2
 800f48a:	4a18      	ldr	r2, [pc, #96]	; (800f4ec <prvAddNewTaskToReadyList+0xd0>)
 800f48c:	6013      	str	r3, [r2, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f492:	4613      	mov	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4a15      	ldr	r2, [pc, #84]	; (800f4f0 <prvAddNewTaskToReadyList+0xd4>)
 800f49c:	441a      	add	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	f7fe fe4c 	bl	800e142 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4aa:	f001 fea7 	bl	80111fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4ae:	4b0d      	ldr	r3, [pc, #52]	; (800f4e4 <prvAddNewTaskToReadyList+0xc8>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00e      	beq.n	800f4d4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4b6:	4b0a      	ldr	r3, [pc, #40]	; (800f4e0 <prvAddNewTaskToReadyList+0xc4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d207      	bcs.n	800f4d4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4c4:	4b0b      	ldr	r3, [pc, #44]	; (800f4f4 <prvAddNewTaskToReadyList+0xd8>)
 800f4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4d4:	bf00      	nop
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20005444 	.word	0x20005444
 800f4e0:	2000523c 	.word	0x2000523c
 800f4e4:	20005450 	.word	0x20005450
 800f4e8:	20005460 	.word	0x20005460
 800f4ec:	2000544c 	.word	0x2000544c
 800f4f0:	20005240 	.word	0x20005240
 800f4f4:	e000ed04 	.word	0xe000ed04

0800f4f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f500:	2300      	movs	r3, #0
 800f502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d012      	beq.n	800f530 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f50a:	4b11      	ldr	r3, [pc, #68]	; (800f550 <vTaskDelay+0x58>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d005      	beq.n	800f51e <vTaskDelay+0x26>
 800f512:	f240 5244 	movw	r2, #1348	; 0x544
 800f516:	490f      	ldr	r1, [pc, #60]	; (800f554 <vTaskDelay+0x5c>)
 800f518:	480f      	ldr	r0, [pc, #60]	; (800f558 <vTaskDelay+0x60>)
 800f51a:	f7f4 f9b9 	bl	8003890 <assertFail>
			vTaskSuspendAll();
 800f51e:	f000 f8ff 	bl	800f720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f522:	2100      	movs	r1, #0
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f001 f8c9 	bl	80106bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f52a:	f000 f907 	bl	800f73c <xTaskResumeAll>
 800f52e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d107      	bne.n	800f546 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <vTaskDelay+0x64>)
 800f538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f53c:	601a      	str	r2, [r3, #0]
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f546:	bf00      	nop
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	2000546c 	.word	0x2000546c
 800f554:	08015ef8 	.word	0x08015ef8
 800f558:	08015fe4 	.word	0x08015fe4
 800f55c:	e000ed04 	.word	0xe000ed04

0800f560 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f560:	b580      	push	{r7, lr}
 800f562:	b088      	sub	sp, #32
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d105      	bne.n	800f57e <eTaskGetState+0x1e>
 800f572:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f576:	4926      	ldr	r1, [pc, #152]	; (800f610 <eTaskGetState+0xb0>)
 800f578:	4826      	ldr	r0, [pc, #152]	; (800f614 <eTaskGetState+0xb4>)
 800f57a:	f7f4 f989 	bl	8003890 <assertFail>

		if( pxTCB == pxCurrentTCB )
 800f57e:	4b26      	ldr	r3, [pc, #152]	; (800f618 <eTaskGetState+0xb8>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69ba      	ldr	r2, [r7, #24]
 800f584:	429a      	cmp	r2, r3
 800f586:	d102      	bne.n	800f58e <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f588:	2300      	movs	r3, #0
 800f58a:	77fb      	strb	r3, [r7, #31]
 800f58c:	e03a      	b.n	800f604 <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 800f58e:	f001 fe07 	bl	80111a0 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	695b      	ldr	r3, [r3, #20]
 800f596:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f598:	4b20      	ldr	r3, [pc, #128]	; (800f61c <eTaskGetState+0xbc>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f59e:	4b20      	ldr	r3, [pc, #128]	; (800f620 <eTaskGetState+0xc0>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f5a4:	f001 fe2a 	bl	80111fc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f5a8:	697a      	ldr	r2, [r7, #20]
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d003      	beq.n	800f5b8 <eTaskGetState+0x58>
 800f5b0:	697a      	ldr	r2, [r7, #20]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d102      	bne.n	800f5be <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	77fb      	strb	r3, [r7, #31]
 800f5bc:	e022      	b.n	800f604 <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	4a18      	ldr	r2, [pc, #96]	; (800f624 <eTaskGetState+0xc4>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d112      	bne.n	800f5ec <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10b      	bne.n	800f5e6 <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d102      	bne.n	800f5e0 <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 800f5da:	2302      	movs	r3, #2
 800f5dc:	77fb      	strb	r3, [r7, #31]
 800f5de:	e011      	b.n	800f604 <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 800f5e0:	2303      	movs	r3, #3
 800f5e2:	77fb      	strb	r3, [r7, #31]
 800f5e4:	e00e      	b.n	800f604 <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f5e6:	2302      	movs	r3, #2
 800f5e8:	77fb      	strb	r3, [r7, #31]
 800f5ea:	e00b      	b.n	800f604 <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	4a0e      	ldr	r2, [pc, #56]	; (800f628 <eTaskGetState+0xc8>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d002      	beq.n	800f5fa <eTaskGetState+0x9a>
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d102      	bne.n	800f600 <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f5fa:	2304      	movs	r3, #4
 800f5fc:	77fb      	strb	r3, [r7, #31]
 800f5fe:	e001      	b.n	800f604 <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f600:	2301      	movs	r3, #1
 800f602:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f604:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f606:	4618      	mov	r0, r3
 800f608:	3720      	adds	r7, #32
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	08015ef8 	.word	0x08015ef8
 800f614:	0801602c 	.word	0x0801602c
 800f618:	2000523c 	.word	0x2000523c
 800f61c:	200053f8 	.word	0x200053f8
 800f620:	200053fc 	.word	0x200053fc
 800f624:	2000542c 	.word	0x2000542c
 800f628:	20005414 	.word	0x20005414

0800f62c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08a      	sub	sp, #40	; 0x28
 800f630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f632:	2300      	movs	r3, #0
 800f634:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f63a:	1d3a      	adds	r2, r7, #4
 800f63c:	f107 0108 	add.w	r1, r7, #8
 800f640:	f107 030c 	add.w	r3, r7, #12
 800f644:	4618      	mov	r0, r3
 800f646:	f7f4 fcaf 	bl	8003fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f64a:	6879      	ldr	r1, [r7, #4]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	9202      	str	r2, [sp, #8]
 800f652:	9301      	str	r3, [sp, #4]
 800f654:	2300      	movs	r3, #0
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	2300      	movs	r3, #0
 800f65a:	460a      	mov	r2, r1
 800f65c:	4925      	ldr	r1, [pc, #148]	; (800f6f4 <vTaskStartScheduler+0xc8>)
 800f65e:	4826      	ldr	r0, [pc, #152]	; (800f6f8 <vTaskStartScheduler+0xcc>)
 800f660:	f7ff fd92 	bl	800f188 <xTaskCreateStatic>
 800f664:	4603      	mov	r3, r0
 800f666:	4a25      	ldr	r2, [pc, #148]	; (800f6fc <vTaskStartScheduler+0xd0>)
 800f668:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f66a:	4b24      	ldr	r3, [pc, #144]	; (800f6fc <vTaskStartScheduler+0xd0>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800f672:	2301      	movs	r3, #1
 800f674:	617b      	str	r3, [r7, #20]
 800f676:	e001      	b.n	800f67c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800f678:	2300      	movs	r3, #0
 800f67a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d102      	bne.n	800f688 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800f682:	f001 f881 	bl	8010788 <xTimerCreateTimerTask>
 800f686:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d123      	bne.n	800f6d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f692:	f383 8811 	msr	BASEPRI, r3
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	613b      	str	r3, [r7, #16]
}
 800f6a0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f6a2:	4b17      	ldr	r3, [pc, #92]	; (800f700 <vTaskStartScheduler+0xd4>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3360      	adds	r3, #96	; 0x60
 800f6a8:	4a16      	ldr	r2, [pc, #88]	; (800f704 <vTaskStartScheduler+0xd8>)
 800f6aa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f6ac:	4b16      	ldr	r3, [pc, #88]	; (800f708 <vTaskStartScheduler+0xdc>)
 800f6ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f6b4:	4b15      	ldr	r3, [pc, #84]	; (800f70c <vTaskStartScheduler+0xe0>)
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f6ba:	4b15      	ldr	r3, [pc, #84]	; (800f710 <vTaskStartScheduler+0xe4>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f6c0:	f7f4 fc58 	bl	8003f74 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800f6c4:	4b0e      	ldr	r3, [pc, #56]	; (800f700 <vTaskStartScheduler+0xd4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	3334      	adds	r3, #52	; 0x34
 800f6ca:	4a12      	ldr	r2, [pc, #72]	; (800f714 <vTaskStartScheduler+0xe8>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f6d0:	f001 fcbe 	bl	8011050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6d4:	e009      	b.n	800f6ea <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6dc:	d105      	bne.n	800f6ea <vTaskStartScheduler+0xbe>
 800f6de:	f640 022a 	movw	r2, #2090	; 0x82a
 800f6e2:	490d      	ldr	r1, [pc, #52]	; (800f718 <vTaskStartScheduler+0xec>)
 800f6e4:	480d      	ldr	r0, [pc, #52]	; (800f71c <vTaskStartScheduler+0xf0>)
 800f6e6:	f7f4 f8d3 	bl	8003890 <assertFail>
}
 800f6ea:	bf00      	nop
 800f6ec:	3718      	adds	r7, #24
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	08016078 	.word	0x08016078
 800f6f8:	0800ff11 	.word	0x0800ff11
 800f6fc:	20005468 	.word	0x20005468
 800f700:	2000523c 	.word	0x2000523c
 800f704:	2000043c 	.word	0x2000043c
 800f708:	20005464 	.word	0x20005464
 800f70c:	20005450 	.word	0x20005450
 800f710:	20005448 	.word	0x20005448
 800f714:	e0000004 	.word	0xe0000004
 800f718:	08015ef8 	.word	0x08015ef8
 800f71c:	08016080 	.word	0x08016080

0800f720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f720:	b480      	push	{r7}
 800f722:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f724:	4b04      	ldr	r3, [pc, #16]	; (800f738 <vTaskSuspendAll+0x18>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	3301      	adds	r3, #1
 800f72a:	4a03      	ldr	r2, [pc, #12]	; (800f738 <vTaskSuspendAll+0x18>)
 800f72c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f72e:	bf00      	nop
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	2000546c 	.word	0x2000546c

0800f73c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f746:	2300      	movs	r3, #0
 800f748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f74a:	4b3f      	ldr	r3, [pc, #252]	; (800f848 <xTaskResumeAll+0x10c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d105      	bne.n	800f75e <xTaskResumeAll+0x22>
 800f752:	f640 0299 	movw	r2, #2201	; 0x899
 800f756:	493d      	ldr	r1, [pc, #244]	; (800f84c <xTaskResumeAll+0x110>)
 800f758:	483d      	ldr	r0, [pc, #244]	; (800f850 <xTaskResumeAll+0x114>)
 800f75a:	f7f4 f899 	bl	8003890 <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f75e:	f001 fd1f 	bl	80111a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f762:	4b39      	ldr	r3, [pc, #228]	; (800f848 <xTaskResumeAll+0x10c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	3b01      	subs	r3, #1
 800f768:	4a37      	ldr	r2, [pc, #220]	; (800f848 <xTaskResumeAll+0x10c>)
 800f76a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f76c:	4b36      	ldr	r3, [pc, #216]	; (800f848 <xTaskResumeAll+0x10c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d161      	bne.n	800f838 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f774:	4b37      	ldr	r3, [pc, #220]	; (800f854 <xTaskResumeAll+0x118>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d05d      	beq.n	800f838 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f77c:	e02e      	b.n	800f7dc <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f77e:	4b36      	ldr	r3, [pc, #216]	; (800f858 <xTaskResumeAll+0x11c>)
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3318      	adds	r3, #24
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fe fd36 	bl	800e1fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3304      	adds	r3, #4
 800f794:	4618      	mov	r0, r3
 800f796:	f7fe fd31 	bl	800e1fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79e:	2201      	movs	r2, #1
 800f7a0:	409a      	lsls	r2, r3
 800f7a2:	4b2e      	ldr	r3, [pc, #184]	; (800f85c <xTaskResumeAll+0x120>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	4a2c      	ldr	r2, [pc, #176]	; (800f85c <xTaskResumeAll+0x120>)
 800f7aa:	6013      	str	r3, [r2, #0]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	4413      	add	r3, r2
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	4a29      	ldr	r2, [pc, #164]	; (800f860 <xTaskResumeAll+0x124>)
 800f7ba:	441a      	add	r2, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	3304      	adds	r3, #4
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	f7fe fcbd 	bl	800e142 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7cc:	4b25      	ldr	r3, [pc, #148]	; (800f864 <xTaskResumeAll+0x128>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d302      	bcc.n	800f7dc <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 800f7d6:	4b24      	ldr	r3, [pc, #144]	; (800f868 <xTaskResumeAll+0x12c>)
 800f7d8:	2201      	movs	r2, #1
 800f7da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7dc:	4b1e      	ldr	r3, [pc, #120]	; (800f858 <xTaskResumeAll+0x11c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1cc      	bne.n	800f77e <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f7ea:	f000 fd21 	bl	8010230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f7ee:	4b1f      	ldr	r3, [pc, #124]	; (800f86c <xTaskResumeAll+0x130>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d010      	beq.n	800f81c <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f7fa:	f000 f8db 	bl	800f9b4 <xTaskIncrementTick>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 800f804:	4b18      	ldr	r3, [pc, #96]	; (800f868 <xTaskResumeAll+0x12c>)
 800f806:	2201      	movs	r2, #1
 800f808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d1f1      	bne.n	800f7fa <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 800f816:	4b15      	ldr	r3, [pc, #84]	; (800f86c <xTaskResumeAll+0x130>)
 800f818:	2200      	movs	r2, #0
 800f81a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f81c:	4b12      	ldr	r3, [pc, #72]	; (800f868 <xTaskResumeAll+0x12c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d009      	beq.n	800f838 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f824:	2301      	movs	r3, #1
 800f826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f828:	4b11      	ldr	r3, [pc, #68]	; (800f870 <xTaskResumeAll+0x134>)
 800f82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f838:	f001 fce0 	bl	80111fc <vPortExitCritical>

	return xAlreadyYielded;
 800f83c:	68bb      	ldr	r3, [r7, #8]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	2000546c 	.word	0x2000546c
 800f84c:	08015ef8 	.word	0x08015ef8
 800f850:	080160b4 	.word	0x080160b4
 800f854:	20005444 	.word	0x20005444
 800f858:	20005400 	.word	0x20005400
 800f85c:	2000544c 	.word	0x2000544c
 800f860:	20005240 	.word	0x20005240
 800f864:	2000523c 	.word	0x2000523c
 800f868:	20005458 	.word	0x20005458
 800f86c:	20005454 	.word	0x20005454
 800f870:	e000ed04 	.word	0xe000ed04

0800f874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f87a:	4b05      	ldr	r3, [pc, #20]	; (800f890 <xTaskGetTickCount+0x1c>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f880:	687b      	ldr	r3, [r7, #4]
}
 800f882:	4618      	mov	r0, r3
 800f884:	370c      	adds	r7, #12
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	20005448 	.word	0x20005448

0800f894 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	617b      	str	r3, [r7, #20]
 800f8a4:	2314      	movs	r3, #20
 800f8a6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f8a8:	f7ff ff3a 	bl	800f720 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f8ac:	4b3b      	ldr	r3, [pc, #236]	; (800f99c <uxTaskGetSystemState+0x108>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d36a      	bcc.n	800f98c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f8bc:	697a      	ldr	r2, [r7, #20]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	00db      	lsls	r3, r3, #3
 800f8c2:	4413      	add	r3, r2
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	1898      	adds	r0, r3, r2
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	4413      	add	r3, r2
 800f8d4:	009b      	lsls	r3, r3, #2
 800f8d6:	4a32      	ldr	r2, [pc, #200]	; (800f9a0 <uxTaskGetSystemState+0x10c>)
 800f8d8:	4413      	add	r3, r2
 800f8da:	2201      	movs	r2, #1
 800f8dc:	4619      	mov	r1, r3
 800f8de:	f000 fc05 	bl	80100ec <prvListTasksWithinSingleList>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d1e2      	bne.n	800f8b6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	00db      	lsls	r3, r3, #3
 800f8f6:	4413      	add	r3, r2
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	4413      	add	r3, r2
 800f900:	4a28      	ldr	r2, [pc, #160]	; (800f9a4 <uxTaskGetSystemState+0x110>)
 800f902:	6811      	ldr	r1, [r2, #0]
 800f904:	2202      	movs	r2, #2
 800f906:	4618      	mov	r0, r3
 800f908:	f000 fbf0 	bl	80100ec <prvListTasksWithinSingleList>
 800f90c:	4602      	mov	r2, r0
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	4413      	add	r3, r2
 800f912:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f914:	697a      	ldr	r2, [r7, #20]
 800f916:	4613      	mov	r3, r2
 800f918:	00db      	lsls	r3, r3, #3
 800f91a:	4413      	add	r3, r2
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	461a      	mov	r2, r3
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	4413      	add	r3, r2
 800f924:	4a20      	ldr	r2, [pc, #128]	; (800f9a8 <uxTaskGetSystemState+0x114>)
 800f926:	6811      	ldr	r1, [r2, #0]
 800f928:	2202      	movs	r2, #2
 800f92a:	4618      	mov	r0, r3
 800f92c:	f000 fbde 	bl	80100ec <prvListTasksWithinSingleList>
 800f930:	4602      	mov	r2, r0
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	4413      	add	r3, r2
 800f936:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f938:	697a      	ldr	r2, [r7, #20]
 800f93a:	4613      	mov	r3, r2
 800f93c:	00db      	lsls	r3, r3, #3
 800f93e:	4413      	add	r3, r2
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	461a      	mov	r2, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	4413      	add	r3, r2
 800f948:	2204      	movs	r2, #4
 800f94a:	4918      	ldr	r1, [pc, #96]	; (800f9ac <uxTaskGetSystemState+0x118>)
 800f94c:	4618      	mov	r0, r3
 800f94e:	f000 fbcd 	bl	80100ec <prvListTasksWithinSingleList>
 800f952:	4602      	mov	r2, r0
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	4413      	add	r3, r2
 800f958:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	4613      	mov	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	461a      	mov	r2, r3
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	4413      	add	r3, r2
 800f96a:	2203      	movs	r2, #3
 800f96c:	4910      	ldr	r1, [pc, #64]	; (800f9b0 <uxTaskGetSystemState+0x11c>)
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fbbc 	bl	80100ec <prvListTasksWithinSingleList>
 800f974:	4602      	mov	r2, r0
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	4413      	add	r3, r2
 800f97a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d004      	beq.n	800f98c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f982:	f7f4 fafe 	bl	8003f82 <getRunTimeCounterValue>
 800f986:	4602      	mov	r2, r0
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f98c:	f7ff fed6 	bl	800f73c <xTaskResumeAll>

		return uxTask;
 800f990:	697b      	ldr	r3, [r7, #20]
	}
 800f992:	4618      	mov	r0, r3
 800f994:	3718      	adds	r7, #24
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20005444 	.word	0x20005444
 800f9a0:	20005240 	.word	0x20005240
 800f9a4:	200053f8 	.word	0x200053f8
 800f9a8:	200053fc 	.word	0x200053fc
 800f9ac:	20005414 	.word	0x20005414
 800f9b0:	2000542c 	.word	0x2000542c

0800f9b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b086      	sub	sp, #24
 800f9b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800f9be:	4a4e      	ldr	r2, [pc, #312]	; (800faf8 <xTaskIncrementTick+0x144>)
 800f9c0:	4b4e      	ldr	r3, [pc, #312]	; (800fafc <xTaskIncrementTick+0x148>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9c6:	4b4e      	ldr	r3, [pc, #312]	; (800fb00 <xTaskIncrementTick+0x14c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	f040 8089 	bne.w	800fae2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f9d0:	4b4a      	ldr	r3, [pc, #296]	; (800fafc <xTaskIncrementTick+0x148>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f9d8:	4a48      	ldr	r2, [pc, #288]	; (800fafc <xTaskIncrementTick+0x148>)
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d11b      	bne.n	800fa1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f9e4:	4b47      	ldr	r3, [pc, #284]	; (800fb04 <xTaskIncrementTick+0x150>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <xTaskIncrementTick+0x46>
 800f9ee:	f640 22a9 	movw	r2, #2729	; 0xaa9
 800f9f2:	4945      	ldr	r1, [pc, #276]	; (800fb08 <xTaskIncrementTick+0x154>)
 800f9f4:	4845      	ldr	r0, [pc, #276]	; (800fb0c <xTaskIncrementTick+0x158>)
 800f9f6:	f7f3 ff4b 	bl	8003890 <assertFail>
 800f9fa:	4b42      	ldr	r3, [pc, #264]	; (800fb04 <xTaskIncrementTick+0x150>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	60fb      	str	r3, [r7, #12]
 800fa00:	4b43      	ldr	r3, [pc, #268]	; (800fb10 <xTaskIncrementTick+0x15c>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a3f      	ldr	r2, [pc, #252]	; (800fb04 <xTaskIncrementTick+0x150>)
 800fa06:	6013      	str	r3, [r2, #0]
 800fa08:	4a41      	ldr	r2, [pc, #260]	; (800fb10 <xTaskIncrementTick+0x15c>)
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	6013      	str	r3, [r2, #0]
 800fa0e:	4b41      	ldr	r3, [pc, #260]	; (800fb14 <xTaskIncrementTick+0x160>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	3301      	adds	r3, #1
 800fa14:	4a3f      	ldr	r2, [pc, #252]	; (800fb14 <xTaskIncrementTick+0x160>)
 800fa16:	6013      	str	r3, [r2, #0]
 800fa18:	f000 fc0a 	bl	8010230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa1c:	4b3e      	ldr	r3, [pc, #248]	; (800fb18 <xTaskIncrementTick+0x164>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d348      	bcc.n	800fab8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa26:	4b37      	ldr	r3, [pc, #220]	; (800fb04 <xTaskIncrementTick+0x150>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d104      	bne.n	800fa3a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa30:	4b39      	ldr	r3, [pc, #228]	; (800fb18 <xTaskIncrementTick+0x164>)
 800fa32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa36:	601a      	str	r2, [r3, #0]
					break;
 800fa38:	e03e      	b.n	800fab8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa3a:	4b32      	ldr	r3, [pc, #200]	; (800fb04 <xTaskIncrementTick+0x150>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fa4a:	693a      	ldr	r2, [r7, #16]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d203      	bcs.n	800fa5a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fa52:	4a31      	ldr	r2, [pc, #196]	; (800fb18 <xTaskIncrementTick+0x164>)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fa58:	e02e      	b.n	800fab8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fe fbcc 	bl	800e1fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d004      	beq.n	800fa76 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	3318      	adds	r3, #24
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fe fbc3 	bl	800e1fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	409a      	lsls	r2, r3
 800fa7e:	4b27      	ldr	r3, [pc, #156]	; (800fb1c <xTaskIncrementTick+0x168>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4313      	orrs	r3, r2
 800fa84:	4a25      	ldr	r2, [pc, #148]	; (800fb1c <xTaskIncrementTick+0x168>)
 800fa86:	6013      	str	r3, [r2, #0]
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	4413      	add	r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4a22      	ldr	r2, [pc, #136]	; (800fb20 <xTaskIncrementTick+0x16c>)
 800fa96:	441a      	add	r2, r3
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4610      	mov	r0, r2
 800faa0:	f7fe fb4f 	bl	800e142 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa8:	4b1e      	ldr	r3, [pc, #120]	; (800fb24 <xTaskIncrementTick+0x170>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faae:	429a      	cmp	r2, r3
 800fab0:	d3b9      	bcc.n	800fa26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800fab2:	2301      	movs	r3, #1
 800fab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fab6:	e7b6      	b.n	800fa26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fab8:	4b1a      	ldr	r3, [pc, #104]	; (800fb24 <xTaskIncrementTick+0x170>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fabe:	4918      	ldr	r1, [pc, #96]	; (800fb20 <xTaskIncrementTick+0x16c>)
 800fac0:	4613      	mov	r3, r2
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	4413      	add	r3, r2
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	440b      	add	r3, r1
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b01      	cmp	r3, #1
 800face:	d901      	bls.n	800fad4 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800fad0:	2301      	movs	r3, #1
 800fad2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fad4:	4b14      	ldr	r3, [pc, #80]	; (800fb28 <xTaskIncrementTick+0x174>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d007      	beq.n	800faec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800fadc:	2301      	movs	r3, #1
 800fade:	617b      	str	r3, [r7, #20]
 800fae0:	e004      	b.n	800faec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fae2:	4b12      	ldr	r3, [pc, #72]	; (800fb2c <xTaskIncrementTick+0x178>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	3301      	adds	r3, #1
 800fae8:	4a10      	ldr	r2, [pc, #64]	; (800fb2c <xTaskIncrementTick+0x178>)
 800faea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800faec:	697b      	ldr	r3, [r7, #20]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3718      	adds	r7, #24
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	e0000008 	.word	0xe0000008
 800fafc:	20005448 	.word	0x20005448
 800fb00:	2000546c 	.word	0x2000546c
 800fb04:	200053f8 	.word	0x200053f8
 800fb08:	08015ef8 	.word	0x08015ef8
 800fb0c:	08016100 	.word	0x08016100
 800fb10:	200053fc 	.word	0x200053fc
 800fb14:	2000545c 	.word	0x2000545c
 800fb18:	20005464 	.word	0x20005464
 800fb1c:	2000544c 	.word	0x2000544c
 800fb20:	20005240 	.word	0x20005240
 800fb24:	2000523c 	.word	0x2000523c
 800fb28:	20005458 	.word	0x20005458
 800fb2c:	20005454 	.word	0x20005454

0800fb30 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d103      	bne.n	800fb48 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800fb40:	4b08      	ldr	r3, [pc, #32]	; (800fb64 <vTaskSetApplicationTaskTag+0x34>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	60fb      	str	r3, [r7, #12]
 800fb46:	e001      	b.n	800fb4c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800fb4c:	f001 fb28 	bl	80111a0 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800fb56:	f001 fb51 	bl	80111fc <vPortExitCritical>
	}
 800fb5a:	bf00      	nop
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	2000523c 	.word	0x2000523c

0800fb68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb6e:	4b44      	ldr	r3, [pc, #272]	; (800fc80 <vTaskSwitchContext+0x118>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d003      	beq.n	800fb7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fb76:	4b43      	ldr	r3, [pc, #268]	; (800fc84 <vTaskSwitchContext+0x11c>)
 800fb78:	2201      	movs	r2, #1
 800fb7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fb7c:	e07b      	b.n	800fc76 <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 800fb7e:	4b41      	ldr	r3, [pc, #260]	; (800fc84 <vTaskSwitchContext+0x11c>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fb84:	f7f4 f9fd 	bl	8003f82 <getRunTimeCounterValue>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	4a3f      	ldr	r2, [pc, #252]	; (800fc88 <vTaskSwitchContext+0x120>)
 800fb8c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fb8e:	4b3e      	ldr	r3, [pc, #248]	; (800fc88 <vTaskSwitchContext+0x120>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	4b3e      	ldr	r3, [pc, #248]	; (800fc8c <vTaskSwitchContext+0x124>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d909      	bls.n	800fbae <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fb9a:	4b3d      	ldr	r3, [pc, #244]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fba0:	4a39      	ldr	r2, [pc, #228]	; (800fc88 <vTaskSwitchContext+0x120>)
 800fba2:	6810      	ldr	r0, [r2, #0]
 800fba4:	4a39      	ldr	r2, [pc, #228]	; (800fc8c <vTaskSwitchContext+0x124>)
 800fba6:	6812      	ldr	r2, [r2, #0]
 800fba8:	1a82      	subs	r2, r0, r2
 800fbaa:	440a      	add	r2, r1
 800fbac:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800fbae:	4b36      	ldr	r3, [pc, #216]	; (800fc88 <vTaskSwitchContext+0x120>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a36      	ldr	r2, [pc, #216]	; (800fc8c <vTaskSwitchContext+0x124>)
 800fbb4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fbb6:	4b36      	ldr	r3, [pc, #216]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	4b34      	ldr	r3, [pc, #208]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d808      	bhi.n	800fbd8 <vTaskSwitchContext+0x70>
 800fbc6:	4b32      	ldr	r3, [pc, #200]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	4b31      	ldr	r3, [pc, #196]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3334      	adds	r3, #52	; 0x34
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	4610      	mov	r0, r2
 800fbd4:	f7f4 f9dd 	bl	8003f92 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800fbd8:	4b2d      	ldr	r3, [pc, #180]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a2d      	ldr	r2, [pc, #180]	; (800fc94 <vTaskSwitchContext+0x12c>)
 800fbde:	6812      	ldr	r2, [r2, #0]
 800fbe0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbe4:	4b2c      	ldr	r3, [pc, #176]	; (800fc98 <vTaskSwitchContext+0x130>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	fab3 f383 	clz	r3, r3
 800fbf0:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800fbf2:	78fb      	ldrb	r3, [r7, #3]
 800fbf4:	f1c3 031f 	rsb	r3, r3, #31
 800fbf8:	60fb      	str	r3, [r7, #12]
 800fbfa:	4928      	ldr	r1, [pc, #160]	; (800fc9c <vTaskSwitchContext+0x134>)
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	4613      	mov	r3, r2
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4413      	add	r3, r2
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	440b      	add	r3, r1
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d105      	bne.n	800fc1a <vTaskSwitchContext+0xb2>
 800fc0e:	f640 32e1 	movw	r2, #3041	; 0xbe1
 800fc12:	4923      	ldr	r1, [pc, #140]	; (800fca0 <vTaskSwitchContext+0x138>)
 800fc14:	4823      	ldr	r0, [pc, #140]	; (800fca4 <vTaskSwitchContext+0x13c>)
 800fc16:	f7f3 fe3b 	bl	8003890 <assertFail>
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4413      	add	r3, r2
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	4a1d      	ldr	r2, [pc, #116]	; (800fc9c <vTaskSwitchContext+0x134>)
 800fc26:	4413      	add	r3, r2
 800fc28:	60bb      	str	r3, [r7, #8]
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	605a      	str	r2, [r3, #4]
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	685a      	ldr	r2, [r3, #4]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	3308      	adds	r3, #8
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d104      	bne.n	800fc4a <vTaskSwitchContext+0xe2>
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	605a      	str	r2, [r3, #4]
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	4a0f      	ldr	r2, [pc, #60]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fc52:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800fc54:	4b0e      	ldr	r3, [pc, #56]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3334      	adds	r3, #52	; 0x34
 800fc5a:	4a13      	ldr	r2, [pc, #76]	; (800fca8 <vTaskSwitchContext+0x140>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800fc60:	4b0b      	ldr	r3, [pc, #44]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc68:	4a0a      	ldr	r2, [pc, #40]	; (800fc94 <vTaskSwitchContext+0x12c>)
 800fc6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc6c:	4b08      	ldr	r3, [pc, #32]	; (800fc90 <vTaskSwitchContext+0x128>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	3360      	adds	r3, #96	; 0x60
 800fc72:	4a0e      	ldr	r2, [pc, #56]	; (800fcac <vTaskSwitchContext+0x144>)
 800fc74:	6013      	str	r3, [r2, #0]
}
 800fc76:	bf00      	nop
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	2000546c 	.word	0x2000546c
 800fc84:	20005458 	.word	0x20005458
 800fc88:	20005474 	.word	0x20005474
 800fc8c:	20005470 	.word	0x20005470
 800fc90:	2000523c 	.word	0x2000523c
 800fc94:	20005440 	.word	0x20005440
 800fc98:	2000544c 	.word	0x2000544c
 800fc9c:	20005240 	.word	0x20005240
 800fca0:	08015ef8 	.word	0x08015ef8
 800fca4:	0801612c 	.word	0x0801612c
 800fca8:	e0000004 	.word	0xe0000004
 800fcac:	2000043c 	.word	0x2000043c

0800fcb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d105      	bne.n	800fccc <vTaskPlaceOnEventList+0x1c>
 800fcc0:	f640 32fa 	movw	r2, #3066	; 0xbfa
 800fcc4:	4909      	ldr	r1, [pc, #36]	; (800fcec <vTaskPlaceOnEventList+0x3c>)
 800fcc6:	480a      	ldr	r0, [pc, #40]	; (800fcf0 <vTaskPlaceOnEventList+0x40>)
 800fcc8:	f7f3 fde2 	bl	8003890 <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fccc:	4b09      	ldr	r3, [pc, #36]	; (800fcf4 <vTaskPlaceOnEventList+0x44>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	3318      	adds	r3, #24
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7fe fa58 	bl	800e18a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fcda:	2101      	movs	r1, #1
 800fcdc:	6838      	ldr	r0, [r7, #0]
 800fcde:	f000 fced 	bl	80106bc <prvAddCurrentTaskToDelayedList>
}
 800fce2:	bf00      	nop
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	08015ef8 	.word	0x08015ef8
 800fcf0:	08016174 	.word	0x08016174
 800fcf4:	2000523c 	.word	0x2000523c

0800fcf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d105      	bne.n	800fd16 <vTaskPlaceOnEventListRestricted+0x1e>
 800fd0a:	f640 4225 	movw	r2, #3109	; 0xc25
 800fd0e:	490c      	ldr	r1, [pc, #48]	; (800fd40 <vTaskPlaceOnEventListRestricted+0x48>)
 800fd10:	480c      	ldr	r0, [pc, #48]	; (800fd44 <vTaskPlaceOnEventListRestricted+0x4c>)
 800fd12:	f7f3 fdbd 	bl	8003890 <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd16:	4b0c      	ldr	r3, [pc, #48]	; (800fd48 <vTaskPlaceOnEventListRestricted+0x50>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3318      	adds	r3, #24
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f7fe fa0f 	bl	800e142 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 800fd2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd30:	6879      	ldr	r1, [r7, #4]
 800fd32:	68b8      	ldr	r0, [r7, #8]
 800fd34:	f000 fcc2 	bl	80106bc <prvAddCurrentTaskToDelayedList>
	}
 800fd38:	bf00      	nop
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	08015ef8 	.word	0x08015ef8
 800fd44:	08016174 	.word	0x08016174
 800fd48:	2000523c 	.word	0x2000523c

0800fd4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d105      	bne.n	800fd6e <xTaskRemoveFromEventList+0x22>
 800fd62:	f640 4255 	movw	r2, #3157	; 0xc55
 800fd66:	4922      	ldr	r1, [pc, #136]	; (800fdf0 <xTaskRemoveFromEventList+0xa4>)
 800fd68:	4822      	ldr	r0, [pc, #136]	; (800fdf4 <xTaskRemoveFromEventList+0xa8>)
 800fd6a:	f7f3 fd91 	bl	8003890 <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	3318      	adds	r3, #24
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe fa42 	bl	800e1fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd78:	4b1f      	ldr	r3, [pc, #124]	; (800fdf8 <xTaskRemoveFromEventList+0xac>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d11c      	bne.n	800fdba <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	3304      	adds	r3, #4
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fe fa39 	bl	800e1fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8e:	2201      	movs	r2, #1
 800fd90:	409a      	lsls	r2, r3
 800fd92:	4b1a      	ldr	r3, [pc, #104]	; (800fdfc <xTaskRemoveFromEventList+0xb0>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	4a18      	ldr	r2, [pc, #96]	; (800fdfc <xTaskRemoveFromEventList+0xb0>)
 800fd9a:	6013      	str	r3, [r2, #0]
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fda0:	4613      	mov	r3, r2
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	4413      	add	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4a15      	ldr	r2, [pc, #84]	; (800fe00 <xTaskRemoveFromEventList+0xb4>)
 800fdaa:	441a      	add	r2, r3
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	3304      	adds	r3, #4
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	f7fe f9c5 	bl	800e142 <vListInsertEnd>
 800fdb8:	e005      	b.n	800fdc6 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	3318      	adds	r3, #24
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	4810      	ldr	r0, [pc, #64]	; (800fe04 <xTaskRemoveFromEventList+0xb8>)
 800fdc2:	f7fe f9be 	bl	800e142 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdca:	4b0f      	ldr	r3, [pc, #60]	; (800fe08 <xTaskRemoveFromEventList+0xbc>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d905      	bls.n	800fde0 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fdd8:	4b0c      	ldr	r3, [pc, #48]	; (800fe0c <xTaskRemoveFromEventList+0xc0>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	e001      	b.n	800fde4 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 800fde0:	2300      	movs	r3, #0
 800fde2:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fde4:	68fb      	ldr	r3, [r7, #12]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	08015ef8 	.word	0x08015ef8
 800fdf4:	0801619c 	.word	0x0801619c
 800fdf8:	2000546c 	.word	0x2000546c
 800fdfc:	2000544c 	.word	0x2000544c
 800fe00:	20005240 	.word	0x20005240
 800fe04:	20005400 	.word	0x20005400
 800fe08:	2000523c 	.word	0x2000523c
 800fe0c:	20005458 	.word	0x20005458

0800fe10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe18:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <vTaskInternalSetTimeOutState+0x24>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe20:	4b05      	ldr	r3, [pc, #20]	; (800fe38 <vTaskInternalSetTimeOutState+0x28>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	605a      	str	r2, [r3, #4]
}
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr
 800fe34:	2000545c 	.word	0x2000545c
 800fe38:	20005448 	.word	0x20005448

0800fe3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d105      	bne.n	800fe58 <xTaskCheckForTimeOut+0x1c>
 800fe4c:	f640 42ce 	movw	r2, #3278	; 0xcce
 800fe50:	4924      	ldr	r1, [pc, #144]	; (800fee4 <xTaskCheckForTimeOut+0xa8>)
 800fe52:	4825      	ldr	r0, [pc, #148]	; (800fee8 <xTaskCheckForTimeOut+0xac>)
 800fe54:	f7f3 fd1c 	bl	8003890 <assertFail>
	configASSERT( pxTicksToWait );
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d105      	bne.n	800fe6a <xTaskCheckForTimeOut+0x2e>
 800fe5e:	f640 42cf 	movw	r2, #3279	; 0xccf
 800fe62:	4920      	ldr	r1, [pc, #128]	; (800fee4 <xTaskCheckForTimeOut+0xa8>)
 800fe64:	4821      	ldr	r0, [pc, #132]	; (800feec <xTaskCheckForTimeOut+0xb0>)
 800fe66:	f7f3 fd13 	bl	8003890 <assertFail>

	taskENTER_CRITICAL();
 800fe6a:	f001 f999 	bl	80111a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fe6e:	4b20      	ldr	r3, [pc, #128]	; (800fef0 <xTaskCheckForTimeOut+0xb4>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe86:	d102      	bne.n	800fe8e <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	617b      	str	r3, [r7, #20]
 800fe8c:	e023      	b.n	800fed6 <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	4b18      	ldr	r3, [pc, #96]	; (800fef4 <xTaskCheckForTimeOut+0xb8>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d007      	beq.n	800feaa <xTaskCheckForTimeOut+0x6e>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d302      	bcc.n	800feaa <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fea4:	2301      	movs	r3, #1
 800fea6:	617b      	str	r3, [r7, #20]
 800fea8:	e015      	b.n	800fed6 <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d20b      	bcs.n	800fecc <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	1ad2      	subs	r2, r2, r3
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f7ff ffa5 	bl	800fe10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fec6:	2300      	movs	r3, #0
 800fec8:	617b      	str	r3, [r7, #20]
 800feca:	e004      	b.n	800fed6 <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	2200      	movs	r2, #0
 800fed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fed2:	2301      	movs	r3, #1
 800fed4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fed6:	f001 f991 	bl	80111fc <vPortExitCritical>

	return xReturn;
 800feda:	697b      	ldr	r3, [r7, #20]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	08015ef8 	.word	0x08015ef8
 800fee8:	080161cc 	.word	0x080161cc
 800feec:	080161d8 	.word	0x080161d8
 800fef0:	20005448 	.word	0x20005448
 800fef4:	2000545c 	.word	0x2000545c

0800fef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fefc:	4b03      	ldr	r3, [pc, #12]	; (800ff0c <vTaskMissedYield+0x14>)
 800fefe:	2201      	movs	r2, #1
 800ff00:	601a      	str	r2, [r3, #0]
}
 800ff02:	bf00      	nop
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	20005458 	.word	0x20005458

0800ff10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff18:	f000 f854 	bl	800ffc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff1c:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <prvIdleTask+0x2c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d907      	bls.n	800ff34 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ff24:	4b06      	ldr	r3, [pc, #24]	; (800ff40 <prvIdleTask+0x30>)
 800ff26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff2a:	601a      	str	r2, [r3, #0]
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ff34:	f7f5 f8bc 	bl	80050b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ff38:	e7ee      	b.n	800ff18 <prvIdleTask+0x8>
 800ff3a:	bf00      	nop
 800ff3c:	20005240 	.word	0x20005240
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	607b      	str	r3, [r7, #4]
 800ff4e:	e00c      	b.n	800ff6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	4613      	mov	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4413      	add	r3, r2
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	4a12      	ldr	r2, [pc, #72]	; (800ffa4 <prvInitialiseTaskLists+0x60>)
 800ff5c:	4413      	add	r3, r2
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe f8c2 	bl	800e0e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3301      	adds	r3, #1
 800ff68:	607b      	str	r3, [r7, #4]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b13      	cmp	r3, #19
 800ff6e:	d9ef      	bls.n	800ff50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ff70:	480d      	ldr	r0, [pc, #52]	; (800ffa8 <prvInitialiseTaskLists+0x64>)
 800ff72:	f7fe f8b9 	bl	800e0e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ff76:	480d      	ldr	r0, [pc, #52]	; (800ffac <prvInitialiseTaskLists+0x68>)
 800ff78:	f7fe f8b6 	bl	800e0e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ff7c:	480c      	ldr	r0, [pc, #48]	; (800ffb0 <prvInitialiseTaskLists+0x6c>)
 800ff7e:	f7fe f8b3 	bl	800e0e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ff82:	480c      	ldr	r0, [pc, #48]	; (800ffb4 <prvInitialiseTaskLists+0x70>)
 800ff84:	f7fe f8b0 	bl	800e0e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ff88:	480b      	ldr	r0, [pc, #44]	; (800ffb8 <prvInitialiseTaskLists+0x74>)
 800ff8a:	f7fe f8ad 	bl	800e0e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <prvInitialiseTaskLists+0x78>)
 800ff90:	4a05      	ldr	r2, [pc, #20]	; (800ffa8 <prvInitialiseTaskLists+0x64>)
 800ff92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ff94:	4b0a      	ldr	r3, [pc, #40]	; (800ffc0 <prvInitialiseTaskLists+0x7c>)
 800ff96:	4a05      	ldr	r2, [pc, #20]	; (800ffac <prvInitialiseTaskLists+0x68>)
 800ff98:	601a      	str	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20005240 	.word	0x20005240
 800ffa8:	200053d0 	.word	0x200053d0
 800ffac:	200053e4 	.word	0x200053e4
 800ffb0:	20005400 	.word	0x20005400
 800ffb4:	20005414 	.word	0x20005414
 800ffb8:	2000542c 	.word	0x2000542c
 800ffbc:	200053f8 	.word	0x200053f8
 800ffc0:	200053fc 	.word	0x200053fc

0800ffc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ffca:	e019      	b.n	8010000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ffcc:	f001 f8e8 	bl	80111a0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffd0:	4b10      	ldr	r3, [pc, #64]	; (8010014 <prvCheckTasksWaitingTermination+0x50>)
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fe f90d 	bl	800e1fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ffe2:	4b0d      	ldr	r3, [pc, #52]	; (8010018 <prvCheckTasksWaitingTermination+0x54>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	4a0b      	ldr	r2, [pc, #44]	; (8010018 <prvCheckTasksWaitingTermination+0x54>)
 800ffea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ffec:	4b0b      	ldr	r3, [pc, #44]	; (801001c <prvCheckTasksWaitingTermination+0x58>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3b01      	subs	r3, #1
 800fff2:	4a0a      	ldr	r2, [pc, #40]	; (801001c <prvCheckTasksWaitingTermination+0x58>)
 800fff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fff6:	f001 f901 	bl	80111fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f8e4 	bl	80101c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010000:	4b06      	ldr	r3, [pc, #24]	; (801001c <prvCheckTasksWaitingTermination+0x58>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1e1      	bne.n	800ffcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010008:	bf00      	nop
 801000a:	bf00      	nop
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	20005414 	.word	0x20005414
 8010018:	20005444 	.word	0x20005444
 801001c:	20005428 	.word	0x20005428

08010020 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <vTaskGetInfo+0x1a>
 8010034:	4b2c      	ldr	r3, [pc, #176]	; (80100e8 <vTaskGetInfo+0xc8>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	e000      	b.n	801003c <vTaskGetInfo+0x1c>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	697a      	ldr	r2, [r7, #20]
 8010042:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8010076:	78fb      	ldrb	r3, [r7, #3]
 8010078:	2b05      	cmp	r3, #5
 801007a:	d01a      	beq.n	80100b2 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 801007c:	4b1a      	ldr	r3, [pc, #104]	; (80100e8 <vTaskGetInfo+0xc8>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	429a      	cmp	r2, r3
 8010084:	d103      	bne.n	801008e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2200      	movs	r2, #0
 801008a:	731a      	strb	r2, [r3, #12]
 801008c:	e018      	b.n	80100c0 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	78fa      	ldrb	r2, [r7, #3]
 8010092:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8010094:	78fb      	ldrb	r3, [r7, #3]
 8010096:	2b03      	cmp	r3, #3
 8010098:	d112      	bne.n	80100c0 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 801009a:	f7ff fb41 	bl	800f720 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2202      	movs	r2, #2
 80100aa:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80100ac:	f7ff fb46 	bl	800f73c <xTaskResumeAll>
 80100b0:	e006      	b.n	80100c0 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80100b2:	6978      	ldr	r0, [r7, #20]
 80100b4:	f7ff fa54 	bl	800f560 <eTaskGetState>
 80100b8:	4603      	mov	r3, r0
 80100ba:	461a      	mov	r2, r3
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d009      	beq.n	80100da <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 f860 	bl	8010190 <prvTaskCheckFreeStackSpace>
 80100d0:	4603      	mov	r3, r0
 80100d2:	461a      	mov	r2, r3
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80100d8:	e002      	b.n	80100e0 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2200      	movs	r2, #0
 80100de:	841a      	strh	r2, [r3, #32]
	}
 80100e0:	bf00      	nop
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	2000523c 	.word	0x2000523c

080100ec <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08a      	sub	sp, #40	; 0x28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	4613      	mov	r3, r2
 80100f8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d03f      	beq.n	8010186 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	623b      	str	r3, [r7, #32]
 801010a:	6a3b      	ldr	r3, [r7, #32]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	685a      	ldr	r2, [r3, #4]
 8010110:	6a3b      	ldr	r3, [r7, #32]
 8010112:	605a      	str	r2, [r3, #4]
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	685a      	ldr	r2, [r3, #4]
 8010118:	6a3b      	ldr	r3, [r7, #32]
 801011a:	3308      	adds	r3, #8
 801011c:	429a      	cmp	r2, r3
 801011e:	d104      	bne.n	801012a <prvListTasksWithinSingleList+0x3e>
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	605a      	str	r2, [r3, #4]
 801012a:	6a3b      	ldr	r3, [r7, #32]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	61bb      	str	r3, [r7, #24]
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	605a      	str	r2, [r3, #4]
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	685a      	ldr	r2, [r3, #4]
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	3308      	adds	r3, #8
 8010148:	429a      	cmp	r2, r3
 801014a:	d104      	bne.n	8010156 <prvListTasksWithinSingleList+0x6a>
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	605a      	str	r2, [r3, #4]
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801015e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010160:	4613      	mov	r3, r2
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	4413      	add	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	461a      	mov	r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	1899      	adds	r1, r3, r2
 801016e:	79fb      	ldrb	r3, [r7, #7]
 8010170:	2201      	movs	r2, #1
 8010172:	6978      	ldr	r0, [r7, #20]
 8010174:	f7ff ff54 	bl	8010020 <vTaskGetInfo>
				uxTask++;
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	3301      	adds	r3, #1
 801017c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	429a      	cmp	r2, r3
 8010184:	d1d5      	bne.n	8010132 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8010186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010188:	4618      	mov	r0, r3
 801018a:	3728      	adds	r7, #40	; 0x28
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8010198:	2300      	movs	r3, #0
 801019a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801019c:	e005      	b.n	80101aa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	3301      	adds	r3, #1
 80101a2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	3301      	adds	r3, #1
 80101a8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2ba5      	cmp	r3, #165	; 0xa5
 80101b0:	d0f5      	beq.n	801019e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	089b      	lsrs	r3, r3, #2
 80101b6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	b29b      	uxth	r3, r3
	}
 80101bc:	4618      	mov	r0, r3
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3360      	adds	r3, #96	; 0x60
 80101d4:	4618      	mov	r0, r3
 80101d6:	f002 fecf 	bl	8012f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d108      	bne.n	80101f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e8:	4618      	mov	r0, r3
 80101ea:	f001 f9ab 	bl	8011544 <vPortFree>
				vPortFree( pxTCB );
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f001 f9a8 	bl	8011544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101f4:	e013      	b.n	801021e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d103      	bne.n	8010208 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f001 f99f 	bl	8011544 <vPortFree>
	}
 8010206:	e00a      	b.n	801021e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801020e:	2b02      	cmp	r3, #2
 8010210:	d005      	beq.n	801021e <prvDeleteTCB+0x56>
 8010212:	f640 725d 	movw	r2, #3933	; 0xf5d
 8010216:	4904      	ldr	r1, [pc, #16]	; (8010228 <prvDeleteTCB+0x60>)
 8010218:	4804      	ldr	r0, [pc, #16]	; (801022c <prvDeleteTCB+0x64>)
 801021a:	f7f3 fb39 	bl	8003890 <assertFail>
	}
 801021e:	bf00      	nop
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	08015ef8 	.word	0x08015ef8
 801022c:	080161e8 	.word	0x080161e8

08010230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010236:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <prvResetNextTaskUnblockTime+0x38>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d104      	bne.n	801024a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010240:	4b0a      	ldr	r3, [pc, #40]	; (801026c <prvResetNextTaskUnblockTime+0x3c>)
 8010242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010248:	e008      	b.n	801025c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801024a:	4b07      	ldr	r3, [pc, #28]	; (8010268 <prvResetNextTaskUnblockTime+0x38>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	4a04      	ldr	r2, [pc, #16]	; (801026c <prvResetNextTaskUnblockTime+0x3c>)
 801025a:	6013      	str	r3, [r2, #0]
}
 801025c:	bf00      	nop
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	200053f8 	.word	0x200053f8
 801026c:	20005464 	.word	0x20005464

08010270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010276:	4b0b      	ldr	r3, [pc, #44]	; (80102a4 <xTaskGetSchedulerState+0x34>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801027e:	2301      	movs	r3, #1
 8010280:	607b      	str	r3, [r7, #4]
 8010282:	e008      	b.n	8010296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010284:	4b08      	ldr	r3, [pc, #32]	; (80102a8 <xTaskGetSchedulerState+0x38>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d102      	bne.n	8010292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801028c:	2302      	movs	r3, #2
 801028e:	607b      	str	r3, [r7, #4]
 8010290:	e001      	b.n	8010296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010292:	2300      	movs	r3, #0
 8010294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010296:	687b      	ldr	r3, [r7, #4]
	}
 8010298:	4618      	mov	r0, r3
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	20005450 	.word	0x20005450
 80102a8:	2000546c 	.word	0x2000546c

080102ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80102b8:	2300      	movs	r3, #0
 80102ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d05e      	beq.n	8010380 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c6:	4b31      	ldr	r3, [pc, #196]	; (801038c <xTaskPriorityInherit+0xe0>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d24e      	bcs.n	801036e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	699b      	ldr	r3, [r3, #24]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	db06      	blt.n	80102e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102d8:	4b2c      	ldr	r3, [pc, #176]	; (801038c <xTaskPriorityInherit+0xe0>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102de:	f1c3 0214 	rsb	r2, r3, #20
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	6959      	ldr	r1, [r3, #20]
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ee:	4613      	mov	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	4a26      	ldr	r2, [pc, #152]	; (8010390 <xTaskPriorityInherit+0xe4>)
 80102f8:	4413      	add	r3, r2
 80102fa:	4299      	cmp	r1, r3
 80102fc:	d12f      	bne.n	801035e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	3304      	adds	r3, #4
 8010302:	4618      	mov	r0, r3
 8010304:	f7fd ff7a 	bl	800e1fc <uxListRemove>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10a      	bne.n	8010324 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010312:	2201      	movs	r2, #1
 8010314:	fa02 f303 	lsl.w	r3, r2, r3
 8010318:	43da      	mvns	r2, r3
 801031a:	4b1e      	ldr	r3, [pc, #120]	; (8010394 <xTaskPriorityInherit+0xe8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4013      	ands	r3, r2
 8010320:	4a1c      	ldr	r2, [pc, #112]	; (8010394 <xTaskPriorityInherit+0xe8>)
 8010322:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010324:	4b19      	ldr	r3, [pc, #100]	; (801038c <xTaskPriorityInherit+0xe0>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010332:	2201      	movs	r2, #1
 8010334:	409a      	lsls	r2, r3
 8010336:	4b17      	ldr	r3, [pc, #92]	; (8010394 <xTaskPriorityInherit+0xe8>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4313      	orrs	r3, r2
 801033c:	4a15      	ldr	r2, [pc, #84]	; (8010394 <xTaskPriorityInherit+0xe8>)
 801033e:	6013      	str	r3, [r2, #0]
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010344:	4613      	mov	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	4a10      	ldr	r2, [pc, #64]	; (8010390 <xTaskPriorityInherit+0xe4>)
 801034e:	441a      	add	r2, r3
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3304      	adds	r3, #4
 8010354:	4619      	mov	r1, r3
 8010356:	4610      	mov	r0, r2
 8010358:	f7fd fef3 	bl	800e142 <vListInsertEnd>
 801035c:	e004      	b.n	8010368 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801035e:	4b0b      	ldr	r3, [pc, #44]	; (801038c <xTaskPriorityInherit+0xe0>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010368:	2301      	movs	r3, #1
 801036a:	60fb      	str	r3, [r7, #12]
 801036c:	e008      	b.n	8010380 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010372:	4b06      	ldr	r3, [pc, #24]	; (801038c <xTaskPriorityInherit+0xe0>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010378:	429a      	cmp	r2, r3
 801037a:	d201      	bcs.n	8010380 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801037c:	2301      	movs	r3, #1
 801037e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010380:	68fb      	ldr	r3, [r7, #12]
	}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	2000523c 	.word	0x2000523c
 8010390:	20005240 	.word	0x20005240
 8010394:	2000544c 	.word	0x2000544c

08010398 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d064      	beq.n	8010478 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103ae:	4b35      	ldr	r3, [pc, #212]	; (8010484 <xTaskPriorityDisinherit+0xec>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	68ba      	ldr	r2, [r7, #8]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d005      	beq.n	80103c4 <xTaskPriorityDisinherit+0x2c>
 80103b8:	f241 0213 	movw	r2, #4115	; 0x1013
 80103bc:	4932      	ldr	r1, [pc, #200]	; (8010488 <xTaskPriorityDisinherit+0xf0>)
 80103be:	4833      	ldr	r0, [pc, #204]	; (801048c <xTaskPriorityDisinherit+0xf4>)
 80103c0:	f7f3 fa66 	bl	8003890 <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d105      	bne.n	80103d8 <xTaskPriorityDisinherit+0x40>
 80103cc:	f241 0214 	movw	r2, #4116	; 0x1014
 80103d0:	492d      	ldr	r1, [pc, #180]	; (8010488 <xTaskPriorityDisinherit+0xf0>)
 80103d2:	482f      	ldr	r0, [pc, #188]	; (8010490 <xTaskPriorityDisinherit+0xf8>)
 80103d4:	f7f3 fa5c 	bl	8003890 <assertFail>
			( pxTCB->uxMutexesHeld )--;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103dc:	1e5a      	subs	r2, r3, #1
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d044      	beq.n	8010478 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d140      	bne.n	8010478 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	3304      	adds	r3, #4
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fd fefe 	bl	800e1fc <uxListRemove>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d115      	bne.n	8010432 <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040a:	4922      	ldr	r1, [pc, #136]	; (8010494 <xTaskPriorityDisinherit+0xfc>)
 801040c:	4613      	mov	r3, r2
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	440b      	add	r3, r1
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10a      	bne.n	8010432 <xTaskPriorityDisinherit+0x9a>
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010420:	2201      	movs	r2, #1
 8010422:	fa02 f303 	lsl.w	r3, r2, r3
 8010426:	43da      	mvns	r2, r3
 8010428:	4b1b      	ldr	r3, [pc, #108]	; (8010498 <xTaskPriorityDisinherit+0x100>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4013      	ands	r3, r2
 801042e:	4a1a      	ldr	r2, [pc, #104]	; (8010498 <xTaskPriorityDisinherit+0x100>)
 8010430:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801043e:	f1c3 0214 	rsb	r2, r3, #20
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044a:	2201      	movs	r2, #1
 801044c:	409a      	lsls	r2, r3
 801044e:	4b12      	ldr	r3, [pc, #72]	; (8010498 <xTaskPriorityDisinherit+0x100>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4313      	orrs	r3, r2
 8010454:	4a10      	ldr	r2, [pc, #64]	; (8010498 <xTaskPriorityDisinherit+0x100>)
 8010456:	6013      	str	r3, [r2, #0]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045c:	4613      	mov	r3, r2
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	4413      	add	r3, r2
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	4a0b      	ldr	r2, [pc, #44]	; (8010494 <xTaskPriorityDisinherit+0xfc>)
 8010466:	441a      	add	r2, r3
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	3304      	adds	r3, #4
 801046c:	4619      	mov	r1, r3
 801046e:	4610      	mov	r0, r2
 8010470:	f7fd fe67 	bl	800e142 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010474:	2301      	movs	r3, #1
 8010476:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010478:	68fb      	ldr	r3, [r7, #12]
	}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	2000523c 	.word	0x2000523c
 8010488:	08015ef8 	.word	0x08015ef8
 801048c:	08016230 	.word	0x08016230
 8010490:	08016248 	.word	0x08016248
 8010494:	20005240 	.word	0x20005240
 8010498:	2000544c 	.word	0x2000544c

0801049c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801049c:	b580      	push	{r7, lr}
 801049e:	b086      	sub	sp, #24
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104aa:	2301      	movs	r3, #1
 80104ac:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d06d      	beq.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d105      	bne.n	80104c8 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 80104bc:	f241 0262 	movw	r2, #4194	; 0x1062
 80104c0:	4935      	ldr	r1, [pc, #212]	; (8010598 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80104c2:	4836      	ldr	r0, [pc, #216]	; (801059c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80104c4:	f7f3 f9e4 	bl	8003890 <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d902      	bls.n	80104d8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	617b      	str	r3, [r7, #20]
 80104d6:	e002      	b.n	80104de <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104dc:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d053      	beq.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d14e      	bne.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104f2:	4b2b      	ldr	r3, [pc, #172]	; (80105a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d105      	bne.n	8010508 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 80104fc:	f241 027d 	movw	r2, #4221	; 0x107d
 8010500:	4925      	ldr	r1, [pc, #148]	; (8010598 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010502:	4828      	ldr	r0, [pc, #160]	; (80105a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010504:	f7f3 f9c4 	bl	8003890 <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801050c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	699b      	ldr	r3, [r3, #24]
 8010518:	2b00      	cmp	r3, #0
 801051a:	db04      	blt.n	8010526 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	f1c3 0214 	rsb	r2, r3, #20
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	6959      	ldr	r1, [r3, #20]
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	4613      	mov	r3, r2
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	4413      	add	r3, r2
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	4a1c      	ldr	r2, [pc, #112]	; (80105a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010536:	4413      	add	r3, r2
 8010538:	4299      	cmp	r1, r3
 801053a:	d129      	bne.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	3304      	adds	r3, #4
 8010540:	4618      	mov	r0, r3
 8010542:	f7fd fe5b 	bl	800e1fc <uxListRemove>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10a      	bne.n	8010562 <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010550:	2201      	movs	r2, #1
 8010552:	fa02 f303 	lsl.w	r3, r2, r3
 8010556:	43da      	mvns	r2, r3
 8010558:	4b14      	ldr	r3, [pc, #80]	; (80105ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4013      	ands	r3, r2
 801055e:	4a13      	ldr	r2, [pc, #76]	; (80105ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010560:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010566:	2201      	movs	r2, #1
 8010568:	409a      	lsls	r2, r3
 801056a:	4b10      	ldr	r3, [pc, #64]	; (80105ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4313      	orrs	r3, r2
 8010570:	4a0e      	ldr	r2, [pc, #56]	; (80105ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010572:	6013      	str	r3, [r2, #0]
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010578:	4613      	mov	r3, r2
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	4413      	add	r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	4a09      	ldr	r2, [pc, #36]	; (80105a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010582:	441a      	add	r2, r3
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	3304      	adds	r3, #4
 8010588:	4619      	mov	r1, r3
 801058a:	4610      	mov	r0, r2
 801058c:	f7fd fdd9 	bl	800e142 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010590:	bf00      	nop
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	08015ef8 	.word	0x08015ef8
 801059c:	08016248 	.word	0x08016248
 80105a0:	2000523c 	.word	0x2000523c
 80105a4:	08016260 	.word	0x08016260
 80105a8:	20005240 	.word	0x20005240
 80105ac:	2000544c 	.word	0x2000544c

080105b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105b0:	b480      	push	{r7}
 80105b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105b4:	4b07      	ldr	r3, [pc, #28]	; (80105d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d004      	beq.n	80105c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105bc:	4b05      	ldr	r3, [pc, #20]	; (80105d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105c2:	3201      	adds	r2, #1
 80105c4:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80105c6:	4b03      	ldr	r3, [pc, #12]	; (80105d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80105c8:	681b      	ldr	r3, [r3, #0]
	}
 80105ca:	4618      	mov	r0, r3
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	2000523c 	.word	0x2000523c

080105d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80105e2:	f000 fddd 	bl	80111a0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80105e6:	4b20      	ldr	r3, [pc, #128]	; (8010668 <ulTaskNotifyTake+0x90>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d113      	bne.n	801061a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80105f2:	4b1d      	ldr	r3, [pc, #116]	; (8010668 <ulTaskNotifyTake+0x90>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00b      	beq.n	801061a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010602:	2101      	movs	r1, #1
 8010604:	6838      	ldr	r0, [r7, #0]
 8010606:	f000 f859 	bl	80106bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801060a:	4b18      	ldr	r3, [pc, #96]	; (801066c <ulTaskNotifyTake+0x94>)
 801060c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	f3bf 8f4f 	dsb	sy
 8010616:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801061a:	f000 fdef 	bl	80111fc <vPortExitCritical>

		taskENTER_CRITICAL();
 801061e:	f000 fdbf 	bl	80111a0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010622:	4b11      	ldr	r3, [pc, #68]	; (8010668 <ulTaskNotifyTake+0x90>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801062a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00e      	beq.n	8010650 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d005      	beq.n	8010644 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010638:	4b0b      	ldr	r3, [pc, #44]	; (8010668 <ulTaskNotifyTake+0x90>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2200      	movs	r2, #0
 801063e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8010642:	e005      	b.n	8010650 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010644:	4b08      	ldr	r3, [pc, #32]	; (8010668 <ulTaskNotifyTake+0x90>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	3a01      	subs	r2, #1
 801064c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010650:	4b05      	ldr	r3, [pc, #20]	; (8010668 <ulTaskNotifyTake+0x90>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2200      	movs	r2, #0
 8010656:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 801065a:	f000 fdcf 	bl	80111fc <vPortExitCritical>

		return ulReturn;
 801065e:	68fb      	ldr	r3, [r7, #12]
	}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	2000523c 	.word	0x2000523c
 801066c:	e000ed04 	.word	0xe000ed04

08010670 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d102      	bne.n	8010686 <ulTaskNotifyValueClear+0x16>
 8010680:	4b0d      	ldr	r3, [pc, #52]	; (80106b8 <ulTaskNotifyValueClear+0x48>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	e000      	b.n	8010688 <ulTaskNotifyValueClear+0x18>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 801068a:	f000 fd89 	bl	80111a0 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801068e:	4b0a      	ldr	r3, [pc, #40]	; (80106b8 <ulTaskNotifyValueClear+0x48>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010696:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	43db      	mvns	r3, r3
 80106a2:	401a      	ands	r2, r3
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 80106aa:	f000 fda7 	bl	80111fc <vPortExitCritical>

		return ulReturn;
 80106ae:	68bb      	ldr	r3, [r7, #8]
	}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	2000523c 	.word	0x2000523c

080106bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80106c6:	4b29      	ldr	r3, [pc, #164]	; (801076c <prvAddCurrentTaskToDelayedList+0xb0>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106cc:	4b28      	ldr	r3, [pc, #160]	; (8010770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3304      	adds	r3, #4
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fd fd92 	bl	800e1fc <uxListRemove>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d10b      	bne.n	80106f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80106de:	4b24      	ldr	r3, [pc, #144]	; (8010770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e4:	2201      	movs	r2, #1
 80106e6:	fa02 f303 	lsl.w	r3, r2, r3
 80106ea:	43da      	mvns	r2, r3
 80106ec:	4b21      	ldr	r3, [pc, #132]	; (8010774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4013      	ands	r3, r2
 80106f2:	4a20      	ldr	r2, [pc, #128]	; (8010774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80106f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106fc:	d10a      	bne.n	8010714 <prvAddCurrentTaskToDelayedList+0x58>
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d007      	beq.n	8010714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010704:	4b1a      	ldr	r3, [pc, #104]	; (8010770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	3304      	adds	r3, #4
 801070a:	4619      	mov	r1, r3
 801070c:	481a      	ldr	r0, [pc, #104]	; (8010778 <prvAddCurrentTaskToDelayedList+0xbc>)
 801070e:	f7fd fd18 	bl	800e142 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010712:	e026      	b.n	8010762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4413      	add	r3, r2
 801071a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801071c:	4b14      	ldr	r3, [pc, #80]	; (8010770 <prvAddCurrentTaskToDelayedList+0xb4>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	429a      	cmp	r2, r3
 801072a:	d209      	bcs.n	8010740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801072c:	4b13      	ldr	r3, [pc, #76]	; (801077c <prvAddCurrentTaskToDelayedList+0xc0>)
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	3304      	adds	r3, #4
 8010736:	4619      	mov	r1, r3
 8010738:	4610      	mov	r0, r2
 801073a:	f7fd fd26 	bl	800e18a <vListInsert>
}
 801073e:	e010      	b.n	8010762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010740:	4b0f      	ldr	r3, [pc, #60]	; (8010780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	4b0a      	ldr	r3, [pc, #40]	; (8010770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	3304      	adds	r3, #4
 801074a:	4619      	mov	r1, r3
 801074c:	4610      	mov	r0, r2
 801074e:	f7fd fd1c 	bl	800e18a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010752:	4b0c      	ldr	r3, [pc, #48]	; (8010784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	68ba      	ldr	r2, [r7, #8]
 8010758:	429a      	cmp	r2, r3
 801075a:	d202      	bcs.n	8010762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801075c:	4a09      	ldr	r2, [pc, #36]	; (8010784 <prvAddCurrentTaskToDelayedList+0xc8>)
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	6013      	str	r3, [r2, #0]
}
 8010762:	bf00      	nop
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	20005448 	.word	0x20005448
 8010770:	2000523c 	.word	0x2000523c
 8010774:	2000544c 	.word	0x2000544c
 8010778:	2000542c 	.word	0x2000542c
 801077c:	200053fc 	.word	0x200053fc
 8010780:	200053f8 	.word	0x200053f8
 8010784:	20005464 	.word	0x20005464

08010788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b088      	sub	sp, #32
 801078c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801078e:	2300      	movs	r3, #0
 8010790:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010792:	f000 fb73 	bl	8010e7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010796:	4b19      	ldr	r3, [pc, #100]	; (80107fc <xTimerCreateTimerTask+0x74>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d020      	beq.n	80107e0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80107a2:	2300      	movs	r3, #0
 80107a4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80107a6:	463a      	mov	r2, r7
 80107a8:	1d39      	adds	r1, r7, #4
 80107aa:	f107 0308 	add.w	r3, r7, #8
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7f3 fc14 	bl	8003fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80107b4:	6839      	ldr	r1, [r7, #0]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	68ba      	ldr	r2, [r7, #8]
 80107ba:	9202      	str	r2, [sp, #8]
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	2301      	movs	r3, #1
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	2300      	movs	r3, #0
 80107c4:	460a      	mov	r2, r1
 80107c6:	490e      	ldr	r1, [pc, #56]	; (8010800 <xTimerCreateTimerTask+0x78>)
 80107c8:	480e      	ldr	r0, [pc, #56]	; (8010804 <xTimerCreateTimerTask+0x7c>)
 80107ca:	f7fe fcdd 	bl	800f188 <xTaskCreateStatic>
 80107ce:	4603      	mov	r3, r0
 80107d0:	4a0d      	ldr	r2, [pc, #52]	; (8010808 <xTimerCreateTimerTask+0x80>)
 80107d2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80107d4:	4b0c      	ldr	r3, [pc, #48]	; (8010808 <xTimerCreateTimerTask+0x80>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d001      	beq.n	80107e0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80107dc:	2301      	movs	r3, #1
 80107de:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d105      	bne.n	80107f2 <xTimerCreateTimerTask+0x6a>
 80107e6:	f240 1213 	movw	r2, #275	; 0x113
 80107ea:	4908      	ldr	r1, [pc, #32]	; (801080c <xTimerCreateTimerTask+0x84>)
 80107ec:	4808      	ldr	r0, [pc, #32]	; (8010810 <xTimerCreateTimerTask+0x88>)
 80107ee:	f7f3 f84f 	bl	8003890 <assertFail>
	return xReturn;
 80107f2:	68fb      	ldr	r3, [r7, #12]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	200054a8 	.word	0x200054a8
 8010800:	08016310 	.word	0x08016310
 8010804:	08010a2d 	.word	0x08010a2d
 8010808:	200054ac 	.word	0x200054ac
 801080c:	08016318 	.word	0x08016318
 8010810:	0801634c 	.word	0x0801634c

08010814 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010814:	b580      	push	{r7, lr}
 8010816:	b088      	sub	sp, #32
 8010818:	af02      	add	r7, sp, #8
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	607a      	str	r2, [r7, #4]
 8010820:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010822:	232c      	movs	r3, #44	; 0x2c
 8010824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	2b2c      	cmp	r3, #44	; 0x2c
 801082a:	d005      	beq.n	8010838 <xTimerCreateStatic+0x24>
 801082c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010830:	4912      	ldr	r1, [pc, #72]	; (801087c <xTimerCreateStatic+0x68>)
 8010832:	4813      	ldr	r0, [pc, #76]	; (8010880 <xTimerCreateStatic+0x6c>)
 8010834:	f7f3 f82c 	bl	8003890 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010838:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083c:	2b00      	cmp	r3, #0
 801083e:	d105      	bne.n	801084c <xTimerCreateStatic+0x38>
 8010840:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010844:	490d      	ldr	r1, [pc, #52]	; (801087c <xTimerCreateStatic+0x68>)
 8010846:	480f      	ldr	r0, [pc, #60]	; (8010884 <xTimerCreateStatic+0x70>)
 8010848:	f7f3 f822 	bl	8003890 <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00d      	beq.n	8010872 <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2202      	movs	r2, #2
 801085a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	68b9      	ldr	r1, [r7, #8]
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	f000 f80b 	bl	8010888 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010872:	697b      	ldr	r3, [r7, #20]
	}
 8010874:	4618      	mov	r0, r3
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	08016318 	.word	0x08016318
 8010880:	08016354 	.word	0x08016354
 8010884:	08016370 	.word	0x08016370

08010888 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d105      	bne.n	80108a8 <prvInitialiseNewTimer+0x20>
 801089c:	f240 1265 	movw	r2, #357	; 0x165
 80108a0:	4914      	ldr	r1, [pc, #80]	; (80108f4 <prvInitialiseNewTimer+0x6c>)
 80108a2:	4815      	ldr	r0, [pc, #84]	; (80108f8 <prvInitialiseNewTimer+0x70>)
 80108a4:	f7f2 fff4 	bl	8003890 <assertFail>

	if( pxNewTimer != NULL )
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d01e      	beq.n	80108ec <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80108ae:	f000 fae5 	bl	8010e7c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	683a      	ldr	r2, [r7, #0]
 80108c2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	69ba      	ldr	r2, [r7, #24]
 80108c8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80108ca:	69fb      	ldr	r3, [r7, #28]
 80108cc:	3304      	adds	r3, #4
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fd fc2a 	bl	800e128 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d008      	beq.n	80108ec <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108e0:	f043 0304 	orr.w	r3, r3, #4
 80108e4:	b2da      	uxtb	r2, r3
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80108ec:	bf00      	nop
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	08016318 	.word	0x08016318
 80108f8:	08016380 	.word	0x08016380

080108fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b08a      	sub	sp, #40	; 0x28
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
 8010908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801090a:	2300      	movs	r3, #0
 801090c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d105      	bne.n	8010920 <xTimerGenericCommand+0x24>
 8010914:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8010918:	491b      	ldr	r1, [pc, #108]	; (8010988 <xTimerGenericCommand+0x8c>)
 801091a:	481c      	ldr	r0, [pc, #112]	; (801098c <xTimerGenericCommand+0x90>)
 801091c:	f7f2 ffb8 	bl	8003890 <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010920:	4b1b      	ldr	r3, [pc, #108]	; (8010990 <xTimerGenericCommand+0x94>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d02a      	beq.n	801097e <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	2b05      	cmp	r3, #5
 8010938:	dc18      	bgt.n	801096c <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801093a:	f7ff fc99 	bl	8010270 <xTaskGetSchedulerState>
 801093e:	4603      	mov	r3, r0
 8010940:	2b02      	cmp	r3, #2
 8010942:	d109      	bne.n	8010958 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010944:	4b12      	ldr	r3, [pc, #72]	; (8010990 <xTimerGenericCommand+0x94>)
 8010946:	6818      	ldr	r0, [r3, #0]
 8010948:	f107 0114 	add.w	r1, r7, #20
 801094c:	2300      	movs	r3, #0
 801094e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010950:	f7fd fdfc 	bl	800e54c <xQueueGenericSend>
 8010954:	6278      	str	r0, [r7, #36]	; 0x24
 8010956:	e012      	b.n	801097e <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010958:	4b0d      	ldr	r3, [pc, #52]	; (8010990 <xTimerGenericCommand+0x94>)
 801095a:	6818      	ldr	r0, [r3, #0]
 801095c:	f107 0114 	add.w	r1, r7, #20
 8010960:	2300      	movs	r3, #0
 8010962:	2200      	movs	r2, #0
 8010964:	f7fd fdf2 	bl	800e54c <xQueueGenericSend>
 8010968:	6278      	str	r0, [r7, #36]	; 0x24
 801096a:	e008      	b.n	801097e <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801096c:	4b08      	ldr	r3, [pc, #32]	; (8010990 <xTimerGenericCommand+0x94>)
 801096e:	6818      	ldr	r0, [r3, #0]
 8010970:	f107 0114 	add.w	r1, r7, #20
 8010974:	2300      	movs	r3, #0
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	f7fd fef6 	bl	800e768 <xQueueGenericSendFromISR>
 801097c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010980:	4618      	mov	r0, r3
 8010982:	3728      	adds	r7, #40	; 0x28
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	08016318 	.word	0x08016318
 801098c:	0801639c 	.word	0x0801639c
 8010990:	200054a8 	.word	0x200054a8

08010994 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af02      	add	r7, sp, #8
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801099e:	4b20      	ldr	r3, [pc, #128]	; (8010a20 <prvProcessExpiredTimer+0x8c>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	68db      	ldr	r3, [r3, #12]
 80109a6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	3304      	adds	r3, #4
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fd fc25 	bl	800e1fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109b8:	f003 0304 	and.w	r3, r3, #4
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d01e      	beq.n	80109fe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	699a      	ldr	r2, [r3, #24]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	18d1      	adds	r1, r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	683a      	ldr	r2, [r7, #0]
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f000 f8d1 	bl	8010b74 <prvInsertTimerInActiveList>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01b      	beq.n	8010a10 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109d8:	2300      	movs	r3, #0
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	2300      	movs	r3, #0
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	2100      	movs	r1, #0
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f7ff ff8a 	bl	80108fc <xTimerGenericCommand>
 80109e8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d10f      	bne.n	8010a10 <prvProcessExpiredTimer+0x7c>
 80109f0:	f240 2211 	movw	r2, #529	; 0x211
 80109f4:	490b      	ldr	r1, [pc, #44]	; (8010a24 <prvProcessExpiredTimer+0x90>)
 80109f6:	480c      	ldr	r0, [pc, #48]	; (8010a28 <prvProcessExpiredTimer+0x94>)
 80109f8:	f7f2 ff4a 	bl	8003890 <assertFail>
 80109fc:	e008      	b.n	8010a10 <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a04:	f023 0301 	bic.w	r3, r3, #1
 8010a08:	b2da      	uxtb	r2, r3
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6a1b      	ldr	r3, [r3, #32]
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	4798      	blx	r3
}
 8010a18:	bf00      	nop
 8010a1a:	3710      	adds	r7, #16
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	200054a0 	.word	0x200054a0
 8010a24:	08016318 	.word	0x08016318
 8010a28:	080163c4 	.word	0x080163c4

08010a2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a34:	f107 0308 	add.w	r3, r7, #8
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 f857 	bl	8010aec <prvGetNextExpireTime>
 8010a3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	4619      	mov	r1, r3
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f000 f803 	bl	8010a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a4a:	f000 f8d5 	bl	8010bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a4e:	e7f1      	b.n	8010a34 <prvTimerTask+0x8>

08010a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a5a:	f7fe fe61 	bl	800f720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a5e:	f107 0308 	add.w	r3, r7, #8
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 f866 	bl	8010b34 <prvSampleTimeNow>
 8010a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d130      	bne.n	8010ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d10a      	bne.n	8010a8c <prvProcessTimerOrBlockTask+0x3c>
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d806      	bhi.n	8010a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a7e:	f7fe fe5d 	bl	800f73c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a82:	68f9      	ldr	r1, [r7, #12]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff ff85 	bl	8010994 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a8a:	e024      	b.n	8010ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d008      	beq.n	8010aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a92:	4b13      	ldr	r3, [pc, #76]	; (8010ae0 <prvProcessTimerOrBlockTask+0x90>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d101      	bne.n	8010aa0 <prvProcessTimerOrBlockTask+0x50>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e000      	b.n	8010aa2 <prvProcessTimerOrBlockTask+0x52>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010aa4:	4b0f      	ldr	r3, [pc, #60]	; (8010ae4 <prvProcessTimerOrBlockTask+0x94>)
 8010aa6:	6818      	ldr	r0, [r3, #0]
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	683a      	ldr	r2, [r7, #0]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	f7fe fb35 	bl	800f120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010ab6:	f7fe fe41 	bl	800f73c <xTaskResumeAll>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d10a      	bne.n	8010ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010ac0:	4b09      	ldr	r3, [pc, #36]	; (8010ae8 <prvProcessTimerOrBlockTask+0x98>)
 8010ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ac6:	601a      	str	r2, [r3, #0]
 8010ac8:	f3bf 8f4f 	dsb	sy
 8010acc:	f3bf 8f6f 	isb	sy
}
 8010ad0:	e001      	b.n	8010ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010ad2:	f7fe fe33 	bl	800f73c <xTaskResumeAll>
}
 8010ad6:	bf00      	nop
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	200054a4 	.word	0x200054a4
 8010ae4:	200054a8 	.word	0x200054a8
 8010ae8:	e000ed04 	.word	0xe000ed04

08010aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010af4:	4b0e      	ldr	r3, [pc, #56]	; (8010b30 <prvGetNextExpireTime+0x44>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <prvGetNextExpireTime+0x16>
 8010afe:	2201      	movs	r2, #1
 8010b00:	e000      	b.n	8010b04 <prvGetNextExpireTime+0x18>
 8010b02:	2200      	movs	r2, #0
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d105      	bne.n	8010b1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b10:	4b07      	ldr	r3, [pc, #28]	; (8010b30 <prvGetNextExpireTime+0x44>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60fb      	str	r3, [r7, #12]
 8010b1a:	e001      	b.n	8010b20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010b20:	68fb      	ldr	r3, [r7, #12]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3714      	adds	r7, #20
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	200054a0 	.word	0x200054a0

08010b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b3c:	f7fe fe9a 	bl	800f874 <xTaskGetTickCount>
 8010b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b42:	4b0b      	ldr	r3, [pc, #44]	; (8010b70 <prvSampleTimeNow+0x3c>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d205      	bcs.n	8010b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b4c:	f000 f932 	bl	8010db4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2201      	movs	r2, #1
 8010b54:	601a      	str	r2, [r3, #0]
 8010b56:	e002      	b.n	8010b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b5e:	4a04      	ldr	r2, [pc, #16]	; (8010b70 <prvSampleTimeNow+0x3c>)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b64:	68fb      	ldr	r3, [r7, #12]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	200054b0 	.word	0x200054b0

08010b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b82:	2300      	movs	r3, #0
 8010b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d812      	bhi.n	8010bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	1ad2      	subs	r2, r2, r3
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d302      	bcc.n	8010bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	617b      	str	r3, [r7, #20]
 8010bac:	e01b      	b.n	8010be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010bae:	4b10      	ldr	r3, [pc, #64]	; (8010bf0 <prvInsertTimerInActiveList+0x7c>)
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	3304      	adds	r3, #4
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	4610      	mov	r0, r2
 8010bba:	f7fd fae6 	bl	800e18a <vListInsert>
 8010bbe:	e012      	b.n	8010be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d206      	bcs.n	8010bd6 <prvInsertTimerInActiveList+0x62>
 8010bc8:	68ba      	ldr	r2, [r7, #8]
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d302      	bcc.n	8010bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	617b      	str	r3, [r7, #20]
 8010bd4:	e007      	b.n	8010be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bd6:	4b07      	ldr	r3, [pc, #28]	; (8010bf4 <prvInsertTimerInActiveList+0x80>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	3304      	adds	r3, #4
 8010bde:	4619      	mov	r1, r3
 8010be0:	4610      	mov	r0, r2
 8010be2:	f7fd fad2 	bl	800e18a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010be6:	697b      	ldr	r3, [r7, #20]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	200054a4 	.word	0x200054a4
 8010bf4:	200054a0 	.word	0x200054a0

08010bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08c      	sub	sp, #48	; 0x30
 8010bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bfe:	e0bd      	b.n	8010d7c <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	da14      	bge.n	8010c30 <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010c06:	f107 0308 	add.w	r3, r7, #8
 8010c0a:	3304      	adds	r3, #4
 8010c0c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d105      	bne.n	8010c20 <prvProcessReceivedCommands+0x28>
 8010c14:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010c18:	4961      	ldr	r1, [pc, #388]	; (8010da0 <prvProcessReceivedCommands+0x1a8>)
 8010c1a:	4862      	ldr	r0, [pc, #392]	; (8010da4 <prvProcessReceivedCommands+0x1ac>)
 8010c1c:	f7f2 fe38 	bl	8003890 <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c26:	6850      	ldr	r0, [r2, #4]
 8010c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c2a:	6892      	ldr	r2, [r2, #8]
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f2c0 80a2 	blt.w	8010d7c <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c3c:	6a3b      	ldr	r3, [r7, #32]
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d004      	beq.n	8010c4e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c44:	6a3b      	ldr	r3, [r7, #32]
 8010c46:	3304      	adds	r3, #4
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fd fad7 	bl	800e1fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c4e:	1d3b      	adds	r3, r7, #4
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7ff ff6f 	bl	8010b34 <prvSampleTimeNow>
 8010c56:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	2b09      	cmp	r3, #9
 8010c5c:	f200 808d 	bhi.w	8010d7a <prvProcessReceivedCommands+0x182>
 8010c60:	a201      	add	r2, pc, #4	; (adr r2, 8010c68 <prvProcessReceivedCommands+0x70>)
 8010c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c66:	bf00      	nop
 8010c68:	08010c91 	.word	0x08010c91
 8010c6c:	08010c91 	.word	0x08010c91
 8010c70:	08010c91 	.word	0x08010c91
 8010c74:	08010cfd 	.word	0x08010cfd
 8010c78:	08010d11 	.word	0x08010d11
 8010c7c:	08010d51 	.word	0x08010d51
 8010c80:	08010c91 	.word	0x08010c91
 8010c84:	08010c91 	.word	0x08010c91
 8010c88:	08010cfd 	.word	0x08010cfd
 8010c8c:	08010d11 	.word	0x08010d11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c96:	f043 0301 	orr.w	r3, r3, #1
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	18d1      	adds	r1, r2, r3
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	69fa      	ldr	r2, [r7, #28]
 8010cae:	6a38      	ldr	r0, [r7, #32]
 8010cb0:	f7ff ff60 	bl	8010b74 <prvInsertTimerInActiveList>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d060      	beq.n	8010d7c <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	6a1b      	ldr	r3, [r3, #32]
 8010cbe:	6a38      	ldr	r0, [r7, #32]
 8010cc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010cc2:	6a3b      	ldr	r3, [r7, #32]
 8010cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cc8:	f003 0304 	and.w	r3, r3, #4
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d055      	beq.n	8010d7c <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	441a      	add	r2, r3
 8010cd8:	2300      	movs	r3, #0
 8010cda:	9300      	str	r3, [sp, #0]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	2100      	movs	r1, #0
 8010ce0:	6a38      	ldr	r0, [r7, #32]
 8010ce2:	f7ff fe0b 	bl	80108fc <xTimerGenericCommand>
 8010ce6:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d146      	bne.n	8010d7c <prvProcessReceivedCommands+0x184>
 8010cee:	f44f 724b 	mov.w	r2, #812	; 0x32c
 8010cf2:	492b      	ldr	r1, [pc, #172]	; (8010da0 <prvProcessReceivedCommands+0x1a8>)
 8010cf4:	482c      	ldr	r0, [pc, #176]	; (8010da8 <prvProcessReceivedCommands+0x1b0>)
 8010cf6:	f7f2 fdcb 	bl	8003890 <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8010cfa:	e03f      	b.n	8010d7c <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d02:	f023 0301 	bic.w	r3, r3, #1
 8010d06:	b2da      	uxtb	r2, r3
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010d0e:	e035      	b.n	8010d7c <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d16:	f043 0301 	orr.w	r3, r3, #1
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	6a3b      	ldr	r3, [r7, #32]
 8010d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	6a3b      	ldr	r3, [r7, #32]
 8010d26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d28:	6a3b      	ldr	r3, [r7, #32]
 8010d2a:	699b      	ldr	r3, [r3, #24]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d105      	bne.n	8010d3c <prvProcessReceivedCommands+0x144>
 8010d30:	f44f 7251 	mov.w	r2, #836	; 0x344
 8010d34:	491a      	ldr	r1, [pc, #104]	; (8010da0 <prvProcessReceivedCommands+0x1a8>)
 8010d36:	481d      	ldr	r0, [pc, #116]	; (8010dac <prvProcessReceivedCommands+0x1b4>)
 8010d38:	f7f2 fdaa 	bl	8003890 <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	699a      	ldr	r2, [r3, #24]
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	18d1      	adds	r1, r2, r3
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	69fa      	ldr	r2, [r7, #28]
 8010d48:	6a38      	ldr	r0, [r7, #32]
 8010d4a:	f7ff ff13 	bl	8010b74 <prvInsertTimerInActiveList>
					break;
 8010d4e:	e015      	b.n	8010d7c <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d56:	f003 0302 	and.w	r3, r3, #2
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d103      	bne.n	8010d66 <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 8010d5e:	6a38      	ldr	r0, [r7, #32]
 8010d60:	f000 fbf0 	bl	8011544 <vPortFree>
 8010d64:	e00a      	b.n	8010d7c <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d6c:	f023 0301 	bic.w	r3, r3, #1
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d78:	e000      	b.n	8010d7c <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 8010d7a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d7c:	4b0c      	ldr	r3, [pc, #48]	; (8010db0 <prvProcessReceivedCommands+0x1b8>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f107 0108 	add.w	r1, r7, #8
 8010d84:	2200      	movs	r2, #0
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fd fe06 	bl	800e998 <xQueueReceive>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f47f af36 	bne.w	8010c00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010d94:	bf00      	nop
 8010d96:	bf00      	nop
 8010d98:	3728      	adds	r7, #40	; 0x28
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	08016318 	.word	0x08016318
 8010da4:	080163cc 	.word	0x080163cc
 8010da8:	080163c4 	.word	0x080163c4
 8010dac:	080163d8 	.word	0x080163d8
 8010db0:	200054a8 	.word	0x200054a8

08010db4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b088      	sub	sp, #32
 8010db8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010dba:	e043      	b.n	8010e44 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010dbc:	4b2b      	ldr	r3, [pc, #172]	; (8010e6c <prvSwitchTimerLists+0xb8>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dc6:	4b29      	ldr	r3, [pc, #164]	; (8010e6c <prvSwitchTimerLists+0xb8>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fd fa11 	bl	800e1fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010de8:	f003 0304 	and.w	r3, r3, #4
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d029      	beq.n	8010e44 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	699b      	ldr	r3, [r3, #24]
 8010df4:	693a      	ldr	r2, [r7, #16]
 8010df6:	4413      	add	r3, r2
 8010df8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d90e      	bls.n	8010e20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e0e:	4b17      	ldr	r3, [pc, #92]	; (8010e6c <prvSwitchTimerLists+0xb8>)
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	3304      	adds	r3, #4
 8010e16:	4619      	mov	r1, r3
 8010e18:	4610      	mov	r0, r2
 8010e1a:	f7fd f9b6 	bl	800e18a <vListInsert>
 8010e1e:	e011      	b.n	8010e44 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e20:	2300      	movs	r3, #0
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	2300      	movs	r3, #0
 8010e26:	693a      	ldr	r2, [r7, #16]
 8010e28:	2100      	movs	r1, #0
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7ff fd66 	bl	80108fc <xTimerGenericCommand>
 8010e30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d105      	bne.n	8010e44 <prvSwitchTimerLists+0x90>
 8010e38:	f240 329d 	movw	r2, #925	; 0x39d
 8010e3c:	490c      	ldr	r1, [pc, #48]	; (8010e70 <prvSwitchTimerLists+0xbc>)
 8010e3e:	480d      	ldr	r0, [pc, #52]	; (8010e74 <prvSwitchTimerLists+0xc0>)
 8010e40:	f7f2 fd26 	bl	8003890 <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e44:	4b09      	ldr	r3, [pc, #36]	; (8010e6c <prvSwitchTimerLists+0xb8>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1b6      	bne.n	8010dbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e4e:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <prvSwitchTimerLists+0xb8>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e54:	4b08      	ldr	r3, [pc, #32]	; (8010e78 <prvSwitchTimerLists+0xc4>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a04      	ldr	r2, [pc, #16]	; (8010e6c <prvSwitchTimerLists+0xb8>)
 8010e5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e5c:	4a06      	ldr	r2, [pc, #24]	; (8010e78 <prvSwitchTimerLists+0xc4>)
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	6013      	str	r3, [r2, #0]
}
 8010e62:	bf00      	nop
 8010e64:	3718      	adds	r7, #24
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	200054a0 	.word	0x200054a0
 8010e70:	08016318 	.word	0x08016318
 8010e74:	080163c4 	.word	0x080163c4
 8010e78:	200054a4 	.word	0x200054a4

08010e7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e82:	f000 f98d 	bl	80111a0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e86:	4b15      	ldr	r3, [pc, #84]	; (8010edc <prvCheckForValidListAndQueue+0x60>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d120      	bne.n	8010ed0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e8e:	4814      	ldr	r0, [pc, #80]	; (8010ee0 <prvCheckForValidListAndQueue+0x64>)
 8010e90:	f7fd f92a 	bl	800e0e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e94:	4813      	ldr	r0, [pc, #76]	; (8010ee4 <prvCheckForValidListAndQueue+0x68>)
 8010e96:	f7fd f927 	bl	800e0e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e9a:	4b13      	ldr	r3, [pc, #76]	; (8010ee8 <prvCheckForValidListAndQueue+0x6c>)
 8010e9c:	4a10      	ldr	r2, [pc, #64]	; (8010ee0 <prvCheckForValidListAndQueue+0x64>)
 8010e9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ea0:	4b12      	ldr	r3, [pc, #72]	; (8010eec <prvCheckForValidListAndQueue+0x70>)
 8010ea2:	4a10      	ldr	r2, [pc, #64]	; (8010ee4 <prvCheckForValidListAndQueue+0x68>)
 8010ea4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	9300      	str	r3, [sp, #0]
 8010eaa:	4b11      	ldr	r3, [pc, #68]	; (8010ef0 <prvCheckForValidListAndQueue+0x74>)
 8010eac:	4a11      	ldr	r2, [pc, #68]	; (8010ef4 <prvCheckForValidListAndQueue+0x78>)
 8010eae:	2110      	movs	r1, #16
 8010eb0:	2014      	movs	r0, #20
 8010eb2:	f7fd fa35 	bl	800e320 <xQueueGenericCreateStatic>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	4a08      	ldr	r2, [pc, #32]	; (8010edc <prvCheckForValidListAndQueue+0x60>)
 8010eba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ebc:	4b07      	ldr	r3, [pc, #28]	; (8010edc <prvCheckForValidListAndQueue+0x60>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d005      	beq.n	8010ed0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ec4:	4b05      	ldr	r3, [pc, #20]	; (8010edc <prvCheckForValidListAndQueue+0x60>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	490b      	ldr	r1, [pc, #44]	; (8010ef8 <prvCheckForValidListAndQueue+0x7c>)
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fe f8fe 	bl	800f0cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ed0:	f000 f994 	bl	80111fc <vPortExitCritical>
}
 8010ed4:	bf00      	nop
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	200054a8 	.word	0x200054a8
 8010ee0:	20005478 	.word	0x20005478
 8010ee4:	2000548c 	.word	0x2000548c
 8010ee8:	200054a0 	.word	0x200054a0
 8010eec:	200054a4 	.word	0x200054a4
 8010ef0:	200055f4 	.word	0x200055f4
 8010ef4:	200054b4 	.word	0x200054b4
 8010ef8:	08016400 	.word	0x08016400

08010efc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d105      	bne.n	8010f1a <pvTimerGetTimerID+0x1e>
 8010f0e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010f12:	4908      	ldr	r1, [pc, #32]	; (8010f34 <pvTimerGetTimerID+0x38>)
 8010f14:	4808      	ldr	r0, [pc, #32]	; (8010f38 <pvTimerGetTimerID+0x3c>)
 8010f16:	f7f2 fcbb 	bl	8003890 <assertFail>

	taskENTER_CRITICAL();
 8010f1a:	f000 f941 	bl	80111a0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	69db      	ldr	r3, [r3, #28]
 8010f22:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8010f24:	f000 f96a 	bl	80111fc <vPortExitCritical>

	return pvReturn;
 8010f28:	68bb      	ldr	r3, [r7, #8]
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	08016318 	.word	0x08016318
 8010f38:	0801639c 	.word	0x0801639c

08010f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	3b04      	subs	r3, #4
 8010f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3b04      	subs	r3, #4
 8010f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f023 0201 	bic.w	r2, r3, #1
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	3b04      	subs	r3, #4
 8010f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f6c:	4a0c      	ldr	r2, [pc, #48]	; (8010fa0 <pxPortInitialiseStack+0x64>)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3b14      	subs	r3, #20
 8010f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	3b04      	subs	r3, #4
 8010f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f06f 0202 	mvn.w	r2, #2
 8010f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	3b20      	subs	r3, #32
 8010f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f92:	68fb      	ldr	r3, [r7, #12]
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	08010fa5 	.word	0x08010fa5

08010fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010fae:	4b0e      	ldr	r3, [pc, #56]	; (8010fe8 <prvTaskExitError+0x44>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fb6:	d004      	beq.n	8010fc2 <prvTaskExitError+0x1e>
 8010fb8:	22e3      	movs	r2, #227	; 0xe3
 8010fba:	490c      	ldr	r1, [pc, #48]	; (8010fec <prvTaskExitError+0x48>)
 8010fbc:	480c      	ldr	r0, [pc, #48]	; (8010ff0 <prvTaskExitError+0x4c>)
 8010fbe:	f7f2 fc67 	bl	8003890 <assertFail>
	__asm volatile
 8010fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc6:	f383 8811 	msr	BASEPRI, r3
 8010fca:	f3bf 8f6f 	isb	sy
 8010fce:	f3bf 8f4f 	dsb	sy
 8010fd2:	607b      	str	r3, [r7, #4]
}
 8010fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010fd6:	bf00      	nop
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d0fc      	beq.n	8010fd8 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010fde:	bf00      	nop
 8010fe0:	bf00      	nop
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	2000037c 	.word	0x2000037c
 8010fec:	08016414 	.word	0x08016414
 8010ff0:	0801645c 	.word	0x0801645c
	...

08011000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011000:	4b07      	ldr	r3, [pc, #28]	; (8011020 <pxCurrentTCBConst2>)
 8011002:	6819      	ldr	r1, [r3, #0]
 8011004:	6808      	ldr	r0, [r1, #0]
 8011006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100a:	f380 8809 	msr	PSP, r0
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	f04f 0000 	mov.w	r0, #0
 8011016:	f380 8811 	msr	BASEPRI, r0
 801101a:	4770      	bx	lr
 801101c:	f3af 8000 	nop.w

08011020 <pxCurrentTCBConst2>:
 8011020:	2000523c 	.word	0x2000523c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011024:	bf00      	nop
 8011026:	bf00      	nop

08011028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011028:	4808      	ldr	r0, [pc, #32]	; (801104c <prvPortStartFirstTask+0x24>)
 801102a:	6800      	ldr	r0, [r0, #0]
 801102c:	6800      	ldr	r0, [r0, #0]
 801102e:	f380 8808 	msr	MSP, r0
 8011032:	f04f 0000 	mov.w	r0, #0
 8011036:	f380 8814 	msr	CONTROL, r0
 801103a:	b662      	cpsie	i
 801103c:	b661      	cpsie	f
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	df00      	svc	0
 8011048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801104a:	bf00      	nop
 801104c:	e000ed08 	.word	0xe000ed08

08011050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011056:	4b44      	ldr	r3, [pc, #272]	; (8011168 <xPortStartScheduler+0x118>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4a44      	ldr	r2, [pc, #272]	; (801116c <xPortStartScheduler+0x11c>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d105      	bne.n	801106c <xPortStartScheduler+0x1c>
 8011060:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011064:	4942      	ldr	r1, [pc, #264]	; (8011170 <xPortStartScheduler+0x120>)
 8011066:	4843      	ldr	r0, [pc, #268]	; (8011174 <xPortStartScheduler+0x124>)
 8011068:	f7f2 fc12 	bl	8003890 <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801106c:	4b3e      	ldr	r3, [pc, #248]	; (8011168 <xPortStartScheduler+0x118>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a41      	ldr	r2, [pc, #260]	; (8011178 <xPortStartScheduler+0x128>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d105      	bne.n	8011082 <xPortStartScheduler+0x32>
 8011076:	f240 1229 	movw	r2, #297	; 0x129
 801107a:	493d      	ldr	r1, [pc, #244]	; (8011170 <xPortStartScheduler+0x120>)
 801107c:	483f      	ldr	r0, [pc, #252]	; (801117c <xPortStartScheduler+0x12c>)
 801107e:	f7f2 fc07 	bl	8003890 <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011082:	4b3f      	ldr	r3, [pc, #252]	; (8011180 <xPortStartScheduler+0x130>)
 8011084:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	b2db      	uxtb	r3, r3
 801108c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	22ff      	movs	r2, #255	; 0xff
 8011092:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	b2db      	uxtb	r3, r3
 801109a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801109c:	79fb      	ldrb	r3, [r7, #7]
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	4b37      	ldr	r3, [pc, #220]	; (8011184 <xPortStartScheduler+0x134>)
 80110a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80110aa:	4b37      	ldr	r3, [pc, #220]	; (8011188 <xPortStartScheduler+0x138>)
 80110ac:	2207      	movs	r2, #7
 80110ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110b0:	e009      	b.n	80110c6 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 80110b2:	4b35      	ldr	r3, [pc, #212]	; (8011188 <xPortStartScheduler+0x138>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	3b01      	subs	r3, #1
 80110b8:	4a33      	ldr	r2, [pc, #204]	; (8011188 <xPortStartScheduler+0x138>)
 80110ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80110bc:	79fb      	ldrb	r3, [r7, #7]
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	005b      	lsls	r3, r3, #1
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110c6:	79fb      	ldrb	r3, [r7, #7]
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ce:	2b80      	cmp	r3, #128	; 0x80
 80110d0:	d0ef      	beq.n	80110b2 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80110d2:	4b2d      	ldr	r3, [pc, #180]	; (8011188 <xPortStartScheduler+0x138>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f1c3 0307 	rsb	r3, r3, #7
 80110da:	2b04      	cmp	r3, #4
 80110dc:	d005      	beq.n	80110ea <xPortStartScheduler+0x9a>
 80110de:	f240 1251 	movw	r2, #337	; 0x151
 80110e2:	4923      	ldr	r1, [pc, #140]	; (8011170 <xPortStartScheduler+0x120>)
 80110e4:	4829      	ldr	r0, [pc, #164]	; (801118c <xPortStartScheduler+0x13c>)
 80110e6:	f7f2 fbd3 	bl	8003890 <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80110ea:	4b27      	ldr	r3, [pc, #156]	; (8011188 <xPortStartScheduler+0x138>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f1c3 0307 	rsb	r3, r3, #7
 80110f2:	2b04      	cmp	r3, #4
 80110f4:	d005      	beq.n	8011102 <xPortStartScheduler+0xb2>
 80110f6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80110fa:	491d      	ldr	r1, [pc, #116]	; (8011170 <xPortStartScheduler+0x120>)
 80110fc:	4824      	ldr	r0, [pc, #144]	; (8011190 <xPortStartScheduler+0x140>)
 80110fe:	f7f2 fbc7 	bl	8003890 <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011102:	4b21      	ldr	r3, [pc, #132]	; (8011188 <xPortStartScheduler+0x138>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	021b      	lsls	r3, r3, #8
 8011108:	4a1f      	ldr	r2, [pc, #124]	; (8011188 <xPortStartScheduler+0x138>)
 801110a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801110c:	4b1e      	ldr	r3, [pc, #120]	; (8011188 <xPortStartScheduler+0x138>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011114:	4a1c      	ldr	r2, [pc, #112]	; (8011188 <xPortStartScheduler+0x138>)
 8011116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	b2da      	uxtb	r2, r3
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011120:	4b1c      	ldr	r3, [pc, #112]	; (8011194 <xPortStartScheduler+0x144>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4a1b      	ldr	r2, [pc, #108]	; (8011194 <xPortStartScheduler+0x144>)
 8011126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801112a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801112c:	4b19      	ldr	r3, [pc, #100]	; (8011194 <xPortStartScheduler+0x144>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a18      	ldr	r2, [pc, #96]	; (8011194 <xPortStartScheduler+0x144>)
 8011132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011138:	f000 f8e0 	bl	80112fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801113c:	4b16      	ldr	r3, [pc, #88]	; (8011198 <xPortStartScheduler+0x148>)
 801113e:	2200      	movs	r2, #0
 8011140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011142:	f000 f8f9 	bl	8011338 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011146:	4b15      	ldr	r3, [pc, #84]	; (801119c <xPortStartScheduler+0x14c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4a14      	ldr	r2, [pc, #80]	; (801119c <xPortStartScheduler+0x14c>)
 801114c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011152:	f7ff ff69 	bl	8011028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011156:	f7fe fd07 	bl	800fb68 <vTaskSwitchContext>
	prvTaskExitError();
 801115a:	f7ff ff23 	bl	8010fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801115e:	2300      	movs	r3, #0
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	e000ed00 	.word	0xe000ed00
 801116c:	410fc271 	.word	0x410fc271
 8011170:	08016414 	.word	0x08016414
 8011174:	08016478 	.word	0x08016478
 8011178:	410fc270 	.word	0x410fc270
 801117c:	0801649c 	.word	0x0801649c
 8011180:	e000e400 	.word	0xe000e400
 8011184:	20005644 	.word	0x20005644
 8011188:	20005648 	.word	0x20005648
 801118c:	080164c0 	.word	0x080164c0
 8011190:	08016504 	.word	0x08016504
 8011194:	e000ed20 	.word	0xe000ed20
 8011198:	2000037c 	.word	0x2000037c
 801119c:	e000ef34 	.word	0xe000ef34

080111a0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
	__asm volatile
 80111a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111aa:	f383 8811 	msr	BASEPRI, r3
 80111ae:	f3bf 8f6f 	isb	sy
 80111b2:	f3bf 8f4f 	dsb	sy
 80111b6:	607b      	str	r3, [r7, #4]
}
 80111b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80111ba:	4b0c      	ldr	r3, [pc, #48]	; (80111ec <vPortEnterCritical+0x4c>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	3301      	adds	r3, #1
 80111c0:	4a0a      	ldr	r2, [pc, #40]	; (80111ec <vPortEnterCritical+0x4c>)
 80111c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80111c4:	4b09      	ldr	r3, [pc, #36]	; (80111ec <vPortEnterCritical+0x4c>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d10a      	bne.n	80111e2 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80111cc:	4b08      	ldr	r3, [pc, #32]	; (80111f0 <vPortEnterCritical+0x50>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d005      	beq.n	80111e2 <vPortEnterCritical+0x42>
 80111d6:	f240 129f 	movw	r2, #415	; 0x19f
 80111da:	4906      	ldr	r1, [pc, #24]	; (80111f4 <vPortEnterCritical+0x54>)
 80111dc:	4806      	ldr	r0, [pc, #24]	; (80111f8 <vPortEnterCritical+0x58>)
 80111de:	f7f2 fb57 	bl	8003890 <assertFail>
	}
}
 80111e2:	bf00      	nop
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	2000037c 	.word	0x2000037c
 80111f0:	e000ed04 	.word	0xe000ed04
 80111f4:	08016414 	.word	0x08016414
 80111f8:	08016564 	.word	0x08016564

080111fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011202:	4b0e      	ldr	r3, [pc, #56]	; (801123c <vPortExitCritical+0x40>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d105      	bne.n	8011216 <vPortExitCritical+0x1a>
 801120a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 801120e:	490c      	ldr	r1, [pc, #48]	; (8011240 <vPortExitCritical+0x44>)
 8011210:	480c      	ldr	r0, [pc, #48]	; (8011244 <vPortExitCritical+0x48>)
 8011212:	f7f2 fb3d 	bl	8003890 <assertFail>
	uxCriticalNesting--;
 8011216:	4b09      	ldr	r3, [pc, #36]	; (801123c <vPortExitCritical+0x40>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	3b01      	subs	r3, #1
 801121c:	4a07      	ldr	r2, [pc, #28]	; (801123c <vPortExitCritical+0x40>)
 801121e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011220:	4b06      	ldr	r3, [pc, #24]	; (801123c <vPortExitCritical+0x40>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d105      	bne.n	8011234 <vPortExitCritical+0x38>
 8011228:	2300      	movs	r3, #0
 801122a:	607b      	str	r3, [r7, #4]
	__asm volatile
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f383 8811 	msr	BASEPRI, r3
}
 8011232:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011234:	bf00      	nop
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	2000037c 	.word	0x2000037c
 8011240:	08016414 	.word	0x08016414
 8011244:	0801659c 	.word	0x0801659c
	...

08011250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011250:	f3ef 8009 	mrs	r0, PSP
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	4b15      	ldr	r3, [pc, #84]	; (80112b0 <pxCurrentTCBConst>)
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	f01e 0f10 	tst.w	lr, #16
 8011260:	bf08      	it	eq
 8011262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801126a:	6010      	str	r0, [r2, #0]
 801126c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011274:	f380 8811 	msr	BASEPRI, r0
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f7fe fc72 	bl	800fb68 <vTaskSwitchContext>
 8011284:	f04f 0000 	mov.w	r0, #0
 8011288:	f380 8811 	msr	BASEPRI, r0
 801128c:	bc09      	pop	{r0, r3}
 801128e:	6819      	ldr	r1, [r3, #0]
 8011290:	6808      	ldr	r0, [r1, #0]
 8011292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011296:	f01e 0f10 	tst.w	lr, #16
 801129a:	bf08      	it	eq
 801129c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80112a0:	f380 8809 	msr	PSP, r0
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	f3af 8000 	nop.w

080112b0 <pxCurrentTCBConst>:
 80112b0:	2000523c 	.word	0x2000523c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80112b4:	bf00      	nop
 80112b6:	bf00      	nop

080112b8 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
	__asm volatile
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	607b      	str	r3, [r7, #4]
}
 80112d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80112d2:	f7fe fb6f 	bl	800f9b4 <xTaskIncrementTick>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d003      	beq.n	80112e4 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80112dc:	4b06      	ldr	r3, [pc, #24]	; (80112f8 <tickFreeRTOS+0x40>)
 80112de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112e2:	601a      	str	r2, [r3, #0]
 80112e4:	2300      	movs	r3, #0
 80112e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	f383 8811 	msr	BASEPRI, r3
}
 80112ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	e000ed04 	.word	0xe000ed04

080112fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80112fc:	b480      	push	{r7}
 80112fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011300:	4b09      	ldr	r3, [pc, #36]	; (8011328 <vPortSetupTimerInterrupt+0x2c>)
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011306:	4b09      	ldr	r3, [pc, #36]	; (801132c <vPortSetupTimerInterrupt+0x30>)
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801130c:	4b08      	ldr	r3, [pc, #32]	; (8011330 <vPortSetupTimerInterrupt+0x34>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4a08      	ldr	r2, [pc, #32]	; (8011334 <vPortSetupTimerInterrupt+0x38>)
 8011312:	3b01      	subs	r3, #1
 8011314:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011316:	4b04      	ldr	r3, [pc, #16]	; (8011328 <vPortSetupTimerInterrupt+0x2c>)
 8011318:	2207      	movs	r2, #7
 801131a:	601a      	str	r2, [r3, #0]
}
 801131c:	bf00      	nop
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	e000e010 	.word	0xe000e010
 801132c:	e000e018 	.word	0xe000e018
 8011330:	200002e4 	.word	0x200002e4
 8011334:	e000e014 	.word	0xe000e014

08011338 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011338:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011348 <vPortEnableVFP+0x10>
 801133c:	6801      	ldr	r1, [r0, #0]
 801133e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011342:	6001      	str	r1, [r0, #0]
 8011344:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011346:	bf00      	nop
 8011348:	e000ed88 	.word	0xe000ed88

0801134c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801134c:	b580      	push	{r7, lr}
 801134e:	b082      	sub	sp, #8
 8011350:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011352:	f3ef 8305 	mrs	r3, IPSR
 8011356:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b0f      	cmp	r3, #15
 801135c:	d90f      	bls.n	801137e <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801135e:	4a11      	ldr	r2, [pc, #68]	; (80113a4 <vPortValidateInterruptPriority+0x58>)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4413      	add	r3, r2
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011368:	4b0f      	ldr	r3, [pc, #60]	; (80113a8 <vPortValidateInterruptPriority+0x5c>)
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	78fa      	ldrb	r2, [r7, #3]
 801136e:	429a      	cmp	r2, r3
 8011370:	d205      	bcs.n	801137e <vPortValidateInterruptPriority+0x32>
 8011372:	f240 22f2 	movw	r2, #754	; 0x2f2
 8011376:	490d      	ldr	r1, [pc, #52]	; (80113ac <vPortValidateInterruptPriority+0x60>)
 8011378:	480d      	ldr	r0, [pc, #52]	; (80113b0 <vPortValidateInterruptPriority+0x64>)
 801137a:	f7f2 fa89 	bl	8003890 <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801137e:	4b0d      	ldr	r3, [pc, #52]	; (80113b4 <vPortValidateInterruptPriority+0x68>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011386:	4b0c      	ldr	r3, [pc, #48]	; (80113b8 <vPortValidateInterruptPriority+0x6c>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	d905      	bls.n	801139a <vPortValidateInterruptPriority+0x4e>
 801138e:	f240 3202 	movw	r2, #770	; 0x302
 8011392:	4906      	ldr	r1, [pc, #24]	; (80113ac <vPortValidateInterruptPriority+0x60>)
 8011394:	4809      	ldr	r0, [pc, #36]	; (80113bc <vPortValidateInterruptPriority+0x70>)
 8011396:	f7f2 fa7b 	bl	8003890 <assertFail>
	}
 801139a:	bf00      	nop
 801139c:	3708      	adds	r7, #8
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	e000e3f0 	.word	0xe000e3f0
 80113a8:	20005644 	.word	0x20005644
 80113ac:	08016414 	.word	0x08016414
 80113b0:	080165b0 	.word	0x080165b0
 80113b4:	e000ed0c 	.word	0xe000ed0c
 80113b8:	20005648 	.word	0x20005648
 80113bc:	080165dc 	.word	0x080165dc

080113c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b086      	sub	sp, #24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80113c8:	2300      	movs	r3, #0
 80113ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80113cc:	f7fe f9a8 	bl	800f720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80113d0:	4b52      	ldr	r3, [pc, #328]	; (801151c <pvPortMalloc+0x15c>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d101      	bne.n	80113dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80113d8:	f000 f912 	bl	8011600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80113dc:	4b50      	ldr	r3, [pc, #320]	; (8011520 <pvPortMalloc+0x160>)
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4013      	ands	r3, r2
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f040 8087 	bne.w	80114f8 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d017      	beq.n	8011420 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 80113f0:	2208      	movs	r2, #8
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4413      	add	r3, r2
 80113f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f003 0307 	and.w	r3, r3, #7
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00e      	beq.n	8011420 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f023 0307 	bic.w	r3, r3, #7
 8011408:	3308      	adds	r3, #8
 801140a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f003 0307 	and.w	r3, r3, #7
 8011412:	2b00      	cmp	r3, #0
 8011414:	d004      	beq.n	8011420 <pvPortMalloc+0x60>
 8011416:	2297      	movs	r2, #151	; 0x97
 8011418:	4942      	ldr	r1, [pc, #264]	; (8011524 <pvPortMalloc+0x164>)
 801141a:	4843      	ldr	r0, [pc, #268]	; (8011528 <pvPortMalloc+0x168>)
 801141c:	f7f2 fa38 	bl	8003890 <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d068      	beq.n	80114f8 <pvPortMalloc+0x138>
 8011426:	4b41      	ldr	r3, [pc, #260]	; (801152c <pvPortMalloc+0x16c>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	429a      	cmp	r2, r3
 801142e:	d863      	bhi.n	80114f8 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011430:	4b3f      	ldr	r3, [pc, #252]	; (8011530 <pvPortMalloc+0x170>)
 8011432:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8011434:	4b3e      	ldr	r3, [pc, #248]	; (8011530 <pvPortMalloc+0x170>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801143a:	e004      	b.n	8011446 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	429a      	cmp	r2, r3
 801144e:	d903      	bls.n	8011458 <pvPortMalloc+0x98>
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d1f1      	bne.n	801143c <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011458:	4b30      	ldr	r3, [pc, #192]	; (801151c <pvPortMalloc+0x15c>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	697a      	ldr	r2, [r7, #20]
 801145e:	429a      	cmp	r2, r3
 8011460:	d04a      	beq.n	80114f8 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2208      	movs	r2, #8
 8011468:	4413      	add	r3, r2
 801146a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	685a      	ldr	r2, [r3, #4]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	1ad2      	subs	r2, r2, r3
 801147c:	2308      	movs	r3, #8
 801147e:	005b      	lsls	r3, r3, #1
 8011480:	429a      	cmp	r2, r3
 8011482:	d919      	bls.n	80114b8 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011484:	697a      	ldr	r2, [r7, #20]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4413      	add	r3, r2
 801148a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	f003 0307 	and.w	r3, r3, #7
 8011492:	2b00      	cmp	r3, #0
 8011494:	d004      	beq.n	80114a0 <pvPortMalloc+0xe0>
 8011496:	22c4      	movs	r2, #196	; 0xc4
 8011498:	4922      	ldr	r1, [pc, #136]	; (8011524 <pvPortMalloc+0x164>)
 801149a:	4826      	ldr	r0, [pc, #152]	; (8011534 <pvPortMalloc+0x174>)
 801149c:	f7f2 f9f8 	bl	8003890 <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	685a      	ldr	r2, [r3, #4]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	1ad2      	subs	r2, r2, r3
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80114b2:	68b8      	ldr	r0, [r7, #8]
 80114b4:	f000 f906 	bl	80116c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114b8:	4b1c      	ldr	r3, [pc, #112]	; (801152c <pvPortMalloc+0x16c>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	4a1a      	ldr	r2, [pc, #104]	; (801152c <pvPortMalloc+0x16c>)
 80114c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114c6:	4b19      	ldr	r3, [pc, #100]	; (801152c <pvPortMalloc+0x16c>)
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	4b1b      	ldr	r3, [pc, #108]	; (8011538 <pvPortMalloc+0x178>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d203      	bcs.n	80114da <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80114d2:	4b16      	ldr	r3, [pc, #88]	; (801152c <pvPortMalloc+0x16c>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4a18      	ldr	r2, [pc, #96]	; (8011538 <pvPortMalloc+0x178>)
 80114d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	685a      	ldr	r2, [r3, #4]
 80114de:	4b10      	ldr	r3, [pc, #64]	; (8011520 <pvPortMalloc+0x160>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	431a      	orrs	r2, r3
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	2200      	movs	r2, #0
 80114ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80114ee:	4b13      	ldr	r3, [pc, #76]	; (801153c <pvPortMalloc+0x17c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	3301      	adds	r3, #1
 80114f4:	4a11      	ldr	r2, [pc, #68]	; (801153c <pvPortMalloc+0x17c>)
 80114f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80114f8:	f7fe f920 	bl	800f73c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f003 0307 	and.w	r3, r3, #7
 8011502:	2b00      	cmp	r3, #0
 8011504:	d005      	beq.n	8011512 <pvPortMalloc+0x152>
 8011506:	f240 1205 	movw	r2, #261	; 0x105
 801150a:	4906      	ldr	r1, [pc, #24]	; (8011524 <pvPortMalloc+0x164>)
 801150c:	480c      	ldr	r0, [pc, #48]	; (8011540 <pvPortMalloc+0x180>)
 801150e:	f7f2 f9bf 	bl	8003890 <assertFail>
	return pvReturn;
 8011512:	68fb      	ldr	r3, [r7, #12]
}
 8011514:	4618      	mov	r0, r3
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	20009254 	.word	0x20009254
 8011520:	20009268 	.word	0x20009268
 8011524:	08016620 	.word	0x08016620
 8011528:	08016668 	.word	0x08016668
 801152c:	20009258 	.word	0x20009258
 8011530:	2000924c 	.word	0x2000924c
 8011534:	08016698 	.word	0x08016698
 8011538:	2000925c 	.word	0x2000925c
 801153c:	20009260 	.word	0x20009260
 8011540:	080166dc 	.word	0x080166dc

08011544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d043      	beq.n	80115de <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011556:	2308      	movs	r3, #8
 8011558:	425b      	negs	r3, r3
 801155a:	68fa      	ldr	r2, [r7, #12]
 801155c:	4413      	add	r3, r2
 801155e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	4b1f      	ldr	r3, [pc, #124]	; (80115e8 <vPortFree+0xa4>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4013      	ands	r3, r2
 801156e:	2b00      	cmp	r3, #0
 8011570:	d105      	bne.n	801157e <vPortFree+0x3a>
 8011572:	f240 1219 	movw	r2, #281	; 0x119
 8011576:	491d      	ldr	r1, [pc, #116]	; (80115ec <vPortFree+0xa8>)
 8011578:	481d      	ldr	r0, [pc, #116]	; (80115f0 <vPortFree+0xac>)
 801157a:	f7f2 f989 	bl	8003890 <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <vPortFree+0x4e>
 8011586:	f44f 728d 	mov.w	r2, #282	; 0x11a
 801158a:	4918      	ldr	r1, [pc, #96]	; (80115ec <vPortFree+0xa8>)
 801158c:	4819      	ldr	r0, [pc, #100]	; (80115f4 <vPortFree+0xb0>)
 801158e:	f7f2 f97f 	bl	8003890 <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	685a      	ldr	r2, [r3, #4]
 8011596:	4b14      	ldr	r3, [pc, #80]	; (80115e8 <vPortFree+0xa4>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4013      	ands	r3, r2
 801159c:	2b00      	cmp	r3, #0
 801159e:	d01e      	beq.n	80115de <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d11a      	bne.n	80115de <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	4b0e      	ldr	r3, [pc, #56]	; (80115e8 <vPortFree+0xa4>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	43db      	mvns	r3, r3
 80115b2:	401a      	ands	r2, r3
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80115b8:	f7fe f8b2 	bl	800f720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	685a      	ldr	r2, [r3, #4]
 80115c0:	4b0d      	ldr	r3, [pc, #52]	; (80115f8 <vPortFree+0xb4>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4413      	add	r3, r2
 80115c6:	4a0c      	ldr	r2, [pc, #48]	; (80115f8 <vPortFree+0xb4>)
 80115c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80115ca:	68b8      	ldr	r0, [r7, #8]
 80115cc:	f000 f87a 	bl	80116c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80115d0:	4b0a      	ldr	r3, [pc, #40]	; (80115fc <vPortFree+0xb8>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	3301      	adds	r3, #1
 80115d6:	4a09      	ldr	r2, [pc, #36]	; (80115fc <vPortFree+0xb8>)
 80115d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80115da:	f7fe f8af 	bl	800f73c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80115de:	bf00      	nop
 80115e0:	3710      	adds	r7, #16
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	20009268 	.word	0x20009268
 80115ec:	08016620 	.word	0x08016620
 80115f0:	08016724 	.word	0x08016724
 80115f4:	08016758 	.word	0x08016758
 80115f8:	20009258 	.word	0x20009258
 80115fc:	20009264 	.word	0x20009264

08011600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011600:	b480      	push	{r7}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011606:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801160a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801160c:	4b27      	ldr	r3, [pc, #156]	; (80116ac <prvHeapInit+0xac>)
 801160e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f003 0307 	and.w	r3, r3, #7
 8011616:	2b00      	cmp	r3, #0
 8011618:	d00c      	beq.n	8011634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	3307      	adds	r3, #7
 801161e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	f023 0307 	bic.w	r3, r3, #7
 8011626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	4a1f      	ldr	r2, [pc, #124]	; (80116ac <prvHeapInit+0xac>)
 8011630:	4413      	add	r3, r2
 8011632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011638:	4a1d      	ldr	r2, [pc, #116]	; (80116b0 <prvHeapInit+0xb0>)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801163e:	4b1c      	ldr	r3, [pc, #112]	; (80116b0 <prvHeapInit+0xb0>)
 8011640:	2200      	movs	r2, #0
 8011642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	4413      	add	r3, r2
 801164a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801164c:	2208      	movs	r2, #8
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	1a9b      	subs	r3, r3, r2
 8011652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f023 0307 	bic.w	r3, r3, #7
 801165a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	4a15      	ldr	r2, [pc, #84]	; (80116b4 <prvHeapInit+0xb4>)
 8011660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011662:	4b14      	ldr	r3, [pc, #80]	; (80116b4 <prvHeapInit+0xb4>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	2200      	movs	r2, #0
 8011668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801166a:	4b12      	ldr	r3, [pc, #72]	; (80116b4 <prvHeapInit+0xb4>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2200      	movs	r2, #0
 8011670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	1ad2      	subs	r2, r2, r3
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011680:	4b0c      	ldr	r3, [pc, #48]	; (80116b4 <prvHeapInit+0xb4>)
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	4a0a      	ldr	r2, [pc, #40]	; (80116b8 <prvHeapInit+0xb8>)
 801168e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	4a09      	ldr	r2, [pc, #36]	; (80116bc <prvHeapInit+0xbc>)
 8011696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011698:	4b09      	ldr	r3, [pc, #36]	; (80116c0 <prvHeapInit+0xc0>)
 801169a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801169e:	601a      	str	r2, [r3, #0]
}
 80116a0:	bf00      	nop
 80116a2:	3714      	adds	r7, #20
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr
 80116ac:	2000564c 	.word	0x2000564c
 80116b0:	2000924c 	.word	0x2000924c
 80116b4:	20009254 	.word	0x20009254
 80116b8:	2000925c 	.word	0x2000925c
 80116bc:	20009258 	.word	0x20009258
 80116c0:	20009268 	.word	0x20009268

080116c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80116c4:	b480      	push	{r7}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80116cc:	4b28      	ldr	r3, [pc, #160]	; (8011770 <prvInsertBlockIntoFreeList+0xac>)
 80116ce:	60fb      	str	r3, [r7, #12]
 80116d0:	e002      	b.n	80116d8 <prvInsertBlockIntoFreeList+0x14>
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	60fb      	str	r3, [r7, #12]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d8f7      	bhi.n	80116d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	68ba      	ldr	r2, [r7, #8]
 80116ec:	4413      	add	r3, r2
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d108      	bne.n	8011706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	685a      	ldr	r2, [r3, #4]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	441a      	add	r2, r3
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	68ba      	ldr	r2, [r7, #8]
 8011710:	441a      	add	r2, r3
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	429a      	cmp	r2, r3
 8011718:	d118      	bne.n	801174c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	4b15      	ldr	r3, [pc, #84]	; (8011774 <prvInsertBlockIntoFreeList+0xb0>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	429a      	cmp	r2, r3
 8011724:	d00d      	beq.n	8011742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	685a      	ldr	r2, [r3, #4]
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	441a      	add	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	601a      	str	r2, [r3, #0]
 8011740:	e008      	b.n	8011754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011742:	4b0c      	ldr	r3, [pc, #48]	; (8011774 <prvInsertBlockIntoFreeList+0xb0>)
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	e003      	b.n	8011754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011754:	68fa      	ldr	r2, [r7, #12]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	429a      	cmp	r2, r3
 801175a:	d002      	beq.n	8011762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011762:	bf00      	nop
 8011764:	3714      	adds	r7, #20
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr
 801176e:	bf00      	nop
 8011770:	2000924c 	.word	0x2000924c
 8011774:	20009254 	.word	0x20009254

08011778 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801177c:	2200      	movs	r2, #0
 801177e:	4912      	ldr	r1, [pc, #72]	; (80117c8 <MX_USB_DEVICE_Init+0x50>)
 8011780:	4812      	ldr	r0, [pc, #72]	; (80117cc <MX_USB_DEVICE_Init+0x54>)
 8011782:	f7fb f933 	bl	800c9ec <USBD_Init>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d001      	beq.n	8011790 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801178c:	f7f3 f8a0 	bl	80048d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011790:	490f      	ldr	r1, [pc, #60]	; (80117d0 <MX_USB_DEVICE_Init+0x58>)
 8011792:	480e      	ldr	r0, [pc, #56]	; (80117cc <MX_USB_DEVICE_Init+0x54>)
 8011794:	f7fb f95a 	bl	800ca4c <USBD_RegisterClass>
 8011798:	4603      	mov	r3, r0
 801179a:	2b00      	cmp	r3, #0
 801179c:	d001      	beq.n	80117a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801179e:	f7f3 f897 	bl	80048d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80117a2:	490c      	ldr	r1, [pc, #48]	; (80117d4 <MX_USB_DEVICE_Init+0x5c>)
 80117a4:	4809      	ldr	r0, [pc, #36]	; (80117cc <MX_USB_DEVICE_Init+0x54>)
 80117a6:	f7fb f891 	bl	800c8cc <USBD_CDC_RegisterInterface>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80117b0:	f7f3 f88e 	bl	80048d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80117b4:	4805      	ldr	r0, [pc, #20]	; (80117cc <MX_USB_DEVICE_Init+0x54>)
 80117b6:	f7fb f97f 	bl	800cab8 <USBD_Start>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d001      	beq.n	80117c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80117c0:	f7f3 f886 	bl	80048d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80117c4:	bf00      	nop
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	20000394 	.word	0x20000394
 80117cc:	2000926c 	.word	0x2000926c
 80117d0:	200002fc 	.word	0x200002fc
 80117d4:	20000380 	.word	0x20000380

080117d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80117dc:	2200      	movs	r2, #0
 80117de:	4905      	ldr	r1, [pc, #20]	; (80117f4 <CDC_Init_FS+0x1c>)
 80117e0:	4805      	ldr	r0, [pc, #20]	; (80117f8 <CDC_Init_FS+0x20>)
 80117e2:	f7fb f88d 	bl	800c900 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80117e6:	4905      	ldr	r1, [pc, #20]	; (80117fc <CDC_Init_FS+0x24>)
 80117e8:	4803      	ldr	r0, [pc, #12]	; (80117f8 <CDC_Init_FS+0x20>)
 80117ea:	f7fb f8ab 	bl	800c944 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80117ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	20009d48 	.word	0x20009d48
 80117f8:	2000926c 	.word	0x2000926c
 80117fc:	20009548 	.word	0x20009548

08011800 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011800:	b480      	push	{r7}
 8011802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011804:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011806:	4618      	mov	r0, r3
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	4603      	mov	r3, r0
 8011818:	6039      	str	r1, [r7, #0]
 801181a:	71fb      	strb	r3, [r7, #7]
 801181c:	4613      	mov	r3, r2
 801181e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011820:	79fb      	ldrb	r3, [r7, #7]
 8011822:	2b23      	cmp	r3, #35	; 0x23
 8011824:	d84a      	bhi.n	80118bc <CDC_Control_FS+0xac>
 8011826:	a201      	add	r2, pc, #4	; (adr r2, 801182c <CDC_Control_FS+0x1c>)
 8011828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182c:	080118bd 	.word	0x080118bd
 8011830:	080118bd 	.word	0x080118bd
 8011834:	080118bd 	.word	0x080118bd
 8011838:	080118bd 	.word	0x080118bd
 801183c:	080118bd 	.word	0x080118bd
 8011840:	080118bd 	.word	0x080118bd
 8011844:	080118bd 	.word	0x080118bd
 8011848:	080118bd 	.word	0x080118bd
 801184c:	080118bd 	.word	0x080118bd
 8011850:	080118bd 	.word	0x080118bd
 8011854:	080118bd 	.word	0x080118bd
 8011858:	080118bd 	.word	0x080118bd
 801185c:	080118bd 	.word	0x080118bd
 8011860:	080118bd 	.word	0x080118bd
 8011864:	080118bd 	.word	0x080118bd
 8011868:	080118bd 	.word	0x080118bd
 801186c:	080118bd 	.word	0x080118bd
 8011870:	080118bd 	.word	0x080118bd
 8011874:	080118bd 	.word	0x080118bd
 8011878:	080118bd 	.word	0x080118bd
 801187c:	080118bd 	.word	0x080118bd
 8011880:	080118bd 	.word	0x080118bd
 8011884:	080118bd 	.word	0x080118bd
 8011888:	080118bd 	.word	0x080118bd
 801188c:	080118bd 	.word	0x080118bd
 8011890:	080118bd 	.word	0x080118bd
 8011894:	080118bd 	.word	0x080118bd
 8011898:	080118bd 	.word	0x080118bd
 801189c:	080118bd 	.word	0x080118bd
 80118a0:	080118bd 	.word	0x080118bd
 80118a4:	080118bd 	.word	0x080118bd
 80118a8:	080118bd 	.word	0x080118bd
 80118ac:	080118bd 	.word	0x080118bd
 80118b0:	080118bd 	.word	0x080118bd
 80118b4:	080118bd 	.word	0x080118bd
 80118b8:	080118bd 	.word	0x080118bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80118bc:	bf00      	nop
  }

  return (USBD_OK);
 80118be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80118d6:	6879      	ldr	r1, [r7, #4]
 80118d8:	4805      	ldr	r0, [pc, #20]	; (80118f0 <CDC_Receive_FS+0x24>)
 80118da:	f7fb f833 	bl	800c944 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80118de:	4804      	ldr	r0, [pc, #16]	; (80118f0 <CDC_Receive_FS+0x24>)
 80118e0:	f7fb f84e 	bl	800c980 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80118e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	2000926c 	.word	0x2000926c

080118f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b087      	sub	sp, #28
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	4613      	mov	r3, r2
 8011900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801190a:	4618      	mov	r0, r3
 801190c:	371c      	adds	r7, #28
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
	...

08011918 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	6039      	str	r1, [r7, #0]
 8011922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2212      	movs	r2, #18
 8011928:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801192a:	4b03      	ldr	r3, [pc, #12]	; (8011938 <USBD_FS_DeviceDescriptor+0x20>)
}
 801192c:	4618      	mov	r0, r3
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr
 8011938:	200003b0 	.word	0x200003b0

0801193c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	6039      	str	r1, [r7, #0]
 8011946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	2204      	movs	r2, #4
 801194c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801194e:	4b03      	ldr	r3, [pc, #12]	; (801195c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011950:	4618      	mov	r0, r3
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	200003c4 	.word	0x200003c4

08011960 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	4603      	mov	r3, r0
 8011968:	6039      	str	r1, [r7, #0]
 801196a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801196c:	79fb      	ldrb	r3, [r7, #7]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d105      	bne.n	801197e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011972:	683a      	ldr	r2, [r7, #0]
 8011974:	4907      	ldr	r1, [pc, #28]	; (8011994 <USBD_FS_ProductStrDescriptor+0x34>)
 8011976:	4808      	ldr	r0, [pc, #32]	; (8011998 <USBD_FS_ProductStrDescriptor+0x38>)
 8011978:	f7fc fa50 	bl	800de1c <USBD_GetString>
 801197c:	e004      	b.n	8011988 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	4904      	ldr	r1, [pc, #16]	; (8011994 <USBD_FS_ProductStrDescriptor+0x34>)
 8011982:	4805      	ldr	r0, [pc, #20]	; (8011998 <USBD_FS_ProductStrDescriptor+0x38>)
 8011984:	f7fc fa4a 	bl	800de1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011988:	4b02      	ldr	r3, [pc, #8]	; (8011994 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801198a:	4618      	mov	r0, r3
 801198c:	3708      	adds	r7, #8
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	2000a548 	.word	0x2000a548
 8011998:	08016778 	.word	0x08016778

0801199c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	4603      	mov	r3, r0
 80119a4:	6039      	str	r1, [r7, #0]
 80119a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80119a8:	683a      	ldr	r2, [r7, #0]
 80119aa:	4904      	ldr	r1, [pc, #16]	; (80119bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80119ac:	4804      	ldr	r0, [pc, #16]	; (80119c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80119ae:	f7fc fa35 	bl	800de1c <USBD_GetString>
  return USBD_StrDesc;
 80119b2:	4b02      	ldr	r3, [pc, #8]	; (80119bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	2000a548 	.word	0x2000a548
 80119c0:	08016790 	.word	0x08016790

080119c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	4603      	mov	r3, r0
 80119cc:	6039      	str	r1, [r7, #0]
 80119ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	221a      	movs	r2, #26
 80119d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80119d6:	f000 f843 	bl	8011a60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80119da:	4b02      	ldr	r3, [pc, #8]	; (80119e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	200003c8 	.word	0x200003c8

080119e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	4603      	mov	r3, r0
 80119f0:	6039      	str	r1, [r7, #0]
 80119f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80119f4:	79fb      	ldrb	r3, [r7, #7]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d105      	bne.n	8011a06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80119fa:	683a      	ldr	r2, [r7, #0]
 80119fc:	4907      	ldr	r1, [pc, #28]	; (8011a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 80119fe:	4808      	ldr	r0, [pc, #32]	; (8011a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011a00:	f7fc fa0c 	bl	800de1c <USBD_GetString>
 8011a04:	e004      	b.n	8011a10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011a06:	683a      	ldr	r2, [r7, #0]
 8011a08:	4904      	ldr	r1, [pc, #16]	; (8011a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011a0a:	4805      	ldr	r0, [pc, #20]	; (8011a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011a0c:	f7fc fa06 	bl	800de1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a10:	4b02      	ldr	r3, [pc, #8]	; (8011a1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	2000a548 	.word	0x2000a548
 8011a20:	080167a4 	.word	0x080167a4

08011a24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	6039      	str	r1, [r7, #0]
 8011a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a30:	79fb      	ldrb	r3, [r7, #7]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d105      	bne.n	8011a42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a36:	683a      	ldr	r2, [r7, #0]
 8011a38:	4907      	ldr	r1, [pc, #28]	; (8011a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a3a:	4808      	ldr	r0, [pc, #32]	; (8011a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a3c:	f7fc f9ee 	bl	800de1c <USBD_GetString>
 8011a40:	e004      	b.n	8011a4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a42:	683a      	ldr	r2, [r7, #0]
 8011a44:	4904      	ldr	r1, [pc, #16]	; (8011a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a46:	4805      	ldr	r0, [pc, #20]	; (8011a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a48:	f7fc f9e8 	bl	800de1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a4c:	4b02      	ldr	r3, [pc, #8]	; (8011a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop
 8011a58:	2000a548 	.word	0x2000a548
 8011a5c:	080167b0 	.word	0x080167b0

08011a60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011a66:	4b0f      	ldr	r3, [pc, #60]	; (8011aa4 <Get_SerialNum+0x44>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011a6c:	4b0e      	ldr	r3, [pc, #56]	; (8011aa8 <Get_SerialNum+0x48>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011a72:	4b0e      	ldr	r3, [pc, #56]	; (8011aac <Get_SerialNum+0x4c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011a78:	68fa      	ldr	r2, [r7, #12]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d009      	beq.n	8011a9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011a86:	2208      	movs	r2, #8
 8011a88:	4909      	ldr	r1, [pc, #36]	; (8011ab0 <Get_SerialNum+0x50>)
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f000 f814 	bl	8011ab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011a90:	2204      	movs	r2, #4
 8011a92:	4908      	ldr	r1, [pc, #32]	; (8011ab4 <Get_SerialNum+0x54>)
 8011a94:	68b8      	ldr	r0, [r7, #8]
 8011a96:	f000 f80f 	bl	8011ab8 <IntToUnicode>
  }
}
 8011a9a:	bf00      	nop
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	1fff7a10 	.word	0x1fff7a10
 8011aa8:	1fff7a14 	.word	0x1fff7a14
 8011aac:	1fff7a18 	.word	0x1fff7a18
 8011ab0:	200003ca 	.word	0x200003ca
 8011ab4:	200003da 	.word	0x200003da

08011ab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b087      	sub	sp, #28
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011aca:	2300      	movs	r3, #0
 8011acc:	75fb      	strb	r3, [r7, #23]
 8011ace:	e027      	b.n	8011b20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	0f1b      	lsrs	r3, r3, #28
 8011ad4:	2b09      	cmp	r3, #9
 8011ad6:	d80b      	bhi.n	8011af0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	0f1b      	lsrs	r3, r3, #28
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	7dfb      	ldrb	r3, [r7, #23]
 8011ae0:	005b      	lsls	r3, r3, #1
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	440b      	add	r3, r1
 8011ae8:	3230      	adds	r2, #48	; 0x30
 8011aea:	b2d2      	uxtb	r2, r2
 8011aec:	701a      	strb	r2, [r3, #0]
 8011aee:	e00a      	b.n	8011b06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	0f1b      	lsrs	r3, r3, #28
 8011af4:	b2da      	uxtb	r2, r3
 8011af6:	7dfb      	ldrb	r3, [r7, #23]
 8011af8:	005b      	lsls	r3, r3, #1
 8011afa:	4619      	mov	r1, r3
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	440b      	add	r3, r1
 8011b00:	3237      	adds	r2, #55	; 0x37
 8011b02:	b2d2      	uxtb	r2, r2
 8011b04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	011b      	lsls	r3, r3, #4
 8011b0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011b0c:	7dfb      	ldrb	r3, [r7, #23]
 8011b0e:	005b      	lsls	r3, r3, #1
 8011b10:	3301      	adds	r3, #1
 8011b12:	68ba      	ldr	r2, [r7, #8]
 8011b14:	4413      	add	r3, r2
 8011b16:	2200      	movs	r2, #0
 8011b18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011b1a:	7dfb      	ldrb	r3, [r7, #23]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	75fb      	strb	r3, [r7, #23]
 8011b20:	7dfa      	ldrb	r2, [r7, #23]
 8011b22:	79fb      	ldrb	r3, [r7, #7]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d3d3      	bcc.n	8011ad0 <IntToUnicode+0x18>
  }
}
 8011b28:	bf00      	nop
 8011b2a:	bf00      	nop
 8011b2c:	371c      	adds	r7, #28
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr
	...

08011b38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b08a      	sub	sp, #40	; 0x28
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b40:	f107 0314 	add.w	r3, r7, #20
 8011b44:	2200      	movs	r2, #0
 8011b46:	601a      	str	r2, [r3, #0]
 8011b48:	605a      	str	r2, [r3, #4]
 8011b4a:	609a      	str	r2, [r3, #8]
 8011b4c:	60da      	str	r2, [r3, #12]
 8011b4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011b58:	d13a      	bne.n	8011bd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	613b      	str	r3, [r7, #16]
 8011b5e:	4b1e      	ldr	r3, [pc, #120]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b62:	4a1d      	ldr	r2, [pc, #116]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011b64:	f043 0301 	orr.w	r3, r3, #1
 8011b68:	6313      	str	r3, [r2, #48]	; 0x30
 8011b6a:	4b1b      	ldr	r3, [pc, #108]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b6e:	f003 0301 	and.w	r3, r3, #1
 8011b72:	613b      	str	r3, [r7, #16]
 8011b74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b80:	2300      	movs	r3, #0
 8011b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b84:	2303      	movs	r3, #3
 8011b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011b88:	230a      	movs	r3, #10
 8011b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b8c:	f107 0314 	add.w	r3, r7, #20
 8011b90:	4619      	mov	r1, r3
 8011b92:	4812      	ldr	r0, [pc, #72]	; (8011bdc <HAL_PCD_MspInit+0xa4>)
 8011b94:	f7f4 fc82 	bl	800649c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011b98:	4b0f      	ldr	r3, [pc, #60]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b9c:	4a0e      	ldr	r2, [pc, #56]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ba2:	6353      	str	r3, [r2, #52]	; 0x34
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	60fb      	str	r3, [r7, #12]
 8011ba8:	4b0b      	ldr	r3, [pc, #44]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bac:	4a0a      	ldr	r2, [pc, #40]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8011bb4:	4b08      	ldr	r3, [pc, #32]	; (8011bd8 <HAL_PCD_MspInit+0xa0>)
 8011bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011bbc:	60fb      	str	r3, [r7, #12]
 8011bbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	2105      	movs	r1, #5
 8011bc4:	2043      	movs	r0, #67	; 0x43
 8011bc6:	f7f4 f830 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011bca:	2043      	movs	r0, #67	; 0x43
 8011bcc:	f7f4 f849 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011bd0:	bf00      	nop
 8011bd2:	3728      	adds	r7, #40	; 0x28
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	40023800 	.word	0x40023800
 8011bdc:	40020000 	.word	0x40020000

08011be0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fa ffab 	bl	800cb52 <USBD_LL_SetupStage>
}
 8011bfc:	bf00      	nop
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011c16:	78fa      	ldrb	r2, [r7, #3]
 8011c18:	6879      	ldr	r1, [r7, #4]
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	00db      	lsls	r3, r3, #3
 8011c1e:	4413      	add	r3, r2
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	440b      	add	r3, r1
 8011c24:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	78fb      	ldrb	r3, [r7, #3]
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	f7fa ffe5 	bl	800cbfc <USBD_LL_DataOutStage>
}
 8011c32:	bf00      	nop
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b082      	sub	sp, #8
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
 8011c42:	460b      	mov	r3, r1
 8011c44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011c4c:	78fa      	ldrb	r2, [r7, #3]
 8011c4e:	6879      	ldr	r1, [r7, #4]
 8011c50:	4613      	mov	r3, r2
 8011c52:	00db      	lsls	r3, r3, #3
 8011c54:	4413      	add	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	440b      	add	r3, r1
 8011c5a:	3320      	adds	r3, #32
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	78fb      	ldrb	r3, [r7, #3]
 8011c60:	4619      	mov	r1, r3
 8011c62:	f7fb f87e 	bl	800cd62 <USBD_LL_DataInStage>
}
 8011c66:	bf00      	nop
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}

08011c6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b082      	sub	sp, #8
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fb f9b8 	bl	800cff2 <USBD_LL_SOF>
}
 8011c82:	bf00      	nop
 8011c84:	3708      	adds	r7, #8
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}

08011c8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c8a:	b580      	push	{r7, lr}
 8011c8c:	b084      	sub	sp, #16
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011c92:	2301      	movs	r3, #1
 8011c94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	79db      	ldrb	r3, [r3, #7]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d102      	bne.n	8011ca4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	73fb      	strb	r3, [r7, #15]
 8011ca2:	e008      	b.n	8011cb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	79db      	ldrb	r3, [r3, #7]
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	d102      	bne.n	8011cb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011cac:	2301      	movs	r3, #1
 8011cae:	73fb      	strb	r3, [r7, #15]
 8011cb0:	e001      	b.n	8011cb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011cb2:	f7f2 fe0d 	bl	80048d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011cbc:	7bfa      	ldrb	r2, [r7, #15]
 8011cbe:	4611      	mov	r1, r2
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fb f952 	bl	800cf6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fb f8fa 	bl	800cec6 <USBD_LL_Reset>
}
 8011cd2:	bf00      	nop
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fb f94d 	bl	800cf8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	6812      	ldr	r2, [r2, #0]
 8011cfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d02:	f043 0301 	orr.w	r3, r3, #1
 8011d06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	7adb      	ldrb	r3, [r3, #11]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d005      	beq.n	8011d1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d10:	4b04      	ldr	r3, [pc, #16]	; (8011d24 <HAL_PCD_SuspendCallback+0x48>)
 8011d12:	691b      	ldr	r3, [r3, #16]
 8011d14:	4a03      	ldr	r2, [pc, #12]	; (8011d24 <HAL_PCD_SuspendCallback+0x48>)
 8011d16:	f043 0306 	orr.w	r3, r3, #6
 8011d1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011d1c:	bf00      	nop
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	e000ed00 	.word	0xe000ed00

08011d28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fb f943 	bl	800cfc2 <USBD_LL_Resume>
}
 8011d3c:	bf00      	nop
 8011d3e:	3708      	adds	r7, #8
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d56:	78fa      	ldrb	r2, [r7, #3]
 8011d58:	4611      	mov	r1, r2
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fb f99b 	bl	800d096 <USBD_LL_IsoOUTIncomplete>
}
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	460b      	mov	r3, r1
 8011d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d7a:	78fa      	ldrb	r2, [r7, #3]
 8011d7c:	4611      	mov	r1, r2
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fb f957 	bl	800d032 <USBD_LL_IsoINIncomplete>
}
 8011d84:	bf00      	nop
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7fb f9ad 	bl	800d0fa <USBD_LL_DevConnected>
}
 8011da0:	bf00      	nop
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fb f9aa 	bl	800d110 <USBD_LL_DevDisconnected>
}
 8011dbc:	bf00      	nop
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d13c      	bne.n	8011e4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011dd4:	4a20      	ldr	r2, [pc, #128]	; (8011e58 <USBD_LL_Init+0x94>)
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	4a1e      	ldr	r2, [pc, #120]	; (8011e58 <USBD_LL_Init+0x94>)
 8011de0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011de4:	4b1c      	ldr	r3, [pc, #112]	; (8011e58 <USBD_LL_Init+0x94>)
 8011de6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011dea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011dec:	4b1a      	ldr	r3, [pc, #104]	; (8011e58 <USBD_LL_Init+0x94>)
 8011dee:	2204      	movs	r2, #4
 8011df0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011df2:	4b19      	ldr	r3, [pc, #100]	; (8011e58 <USBD_LL_Init+0x94>)
 8011df4:	2202      	movs	r2, #2
 8011df6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011df8:	4b17      	ldr	r3, [pc, #92]	; (8011e58 <USBD_LL_Init+0x94>)
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011dfe:	4b16      	ldr	r3, [pc, #88]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e00:	2202      	movs	r2, #2
 8011e02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011e04:	4b14      	ldr	r3, [pc, #80]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e06:	2200      	movs	r2, #0
 8011e08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011e0a:	4b13      	ldr	r3, [pc, #76]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011e10:	4b11      	ldr	r3, [pc, #68]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011e16:	4b10      	ldr	r3, [pc, #64]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011e1c:	4b0e      	ldr	r3, [pc, #56]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011e22:	480d      	ldr	r0, [pc, #52]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e24:	f7f4 fcef 	bl	8006806 <HAL_PCD_Init>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011e2e:	f7f2 fd4f 	bl	80048d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011e32:	2180      	movs	r1, #128	; 0x80
 8011e34:	4808      	ldr	r0, [pc, #32]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e36:	f7f5 ff1a 	bl	8007c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011e3a:	2240      	movs	r2, #64	; 0x40
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	4806      	ldr	r0, [pc, #24]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e40:	f7f5 fece 	bl	8007be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011e44:	2280      	movs	r2, #128	; 0x80
 8011e46:	2101      	movs	r1, #1
 8011e48:	4803      	ldr	r0, [pc, #12]	; (8011e58 <USBD_LL_Init+0x94>)
 8011e4a:	f7f5 fec9 	bl	8007be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011e4e:	2300      	movs	r3, #0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	2000a748 	.word	0x2000a748

08011e5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7f4 fdd6 	bl	8006a24 <HAL_PCD_Start>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 f942 	bl	8012108 <USBD_Get_USB_Status>
 8011e84:	4603      	mov	r3, r0
 8011e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3710      	adds	r7, #16
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b084      	sub	sp, #16
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	4608      	mov	r0, r1
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	70fb      	strb	r3, [r7, #3]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	70bb      	strb	r3, [r7, #2]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011eba:	78bb      	ldrb	r3, [r7, #2]
 8011ebc:	883a      	ldrh	r2, [r7, #0]
 8011ebe:	78f9      	ldrb	r1, [r7, #3]
 8011ec0:	f7f5 faaa 	bl	8007418 <HAL_PCD_EP_Open>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ec8:	7bfb      	ldrb	r3, [r7, #15]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 f91c 	bl	8012108 <USBD_Get_USB_Status>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b084      	sub	sp, #16
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ef8:	78fa      	ldrb	r2, [r7, #3]
 8011efa:	4611      	mov	r1, r2
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7f5 faf3 	bl	80074e8 <HAL_PCD_EP_Close>
 8011f02:	4603      	mov	r3, r0
 8011f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f06:	7bfb      	ldrb	r3, [r7, #15]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f000 f8fd 	bl	8012108 <USBD_Get_USB_Status>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	460b      	mov	r3, r1
 8011f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f36:	78fa      	ldrb	r2, [r7, #3]
 8011f38:	4611      	mov	r1, r2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7f5 fbab 	bl	8007696 <HAL_PCD_EP_SetStall>
 8011f40:	4603      	mov	r3, r0
 8011f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 f8de 	bl	8012108 <USBD_Get_USB_Status>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b084      	sub	sp, #16
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
 8011f62:	460b      	mov	r3, r1
 8011f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f74:	78fa      	ldrb	r2, [r7, #3]
 8011f76:	4611      	mov	r1, r2
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7f5 fbef 	bl	800775c <HAL_PCD_EP_ClrStall>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 f8bf 	bl	8012108 <USBD_Get_USB_Status>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011faa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	da0b      	bge.n	8011fcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011fb4:	78fb      	ldrb	r3, [r7, #3]
 8011fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fba:	68f9      	ldr	r1, [r7, #12]
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	00db      	lsls	r3, r3, #3
 8011fc0:	4413      	add	r3, r2
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	440b      	add	r3, r1
 8011fc6:	3316      	adds	r3, #22
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	e00b      	b.n	8011fe4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011fcc:	78fb      	ldrb	r3, [r7, #3]
 8011fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fd2:	68f9      	ldr	r1, [r7, #12]
 8011fd4:	4613      	mov	r3, r2
 8011fd6:	00db      	lsls	r3, r3, #3
 8011fd8:	4413      	add	r3, r2
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	440b      	add	r3, r1
 8011fde:	f203 2356 	addw	r3, r3, #598	; 0x256
 8011fe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3714      	adds	r7, #20
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012000:	2300      	movs	r3, #0
 8012002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801200a:	78fa      	ldrb	r2, [r7, #3]
 801200c:	4611      	mov	r1, r2
 801200e:	4618      	mov	r0, r3
 8012010:	f7f5 f9de 	bl	80073d0 <HAL_PCD_SetAddress>
 8012014:	4603      	mov	r3, r0
 8012016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012018:	7bfb      	ldrb	r3, [r7, #15]
 801201a:	4618      	mov	r0, r3
 801201c:	f000 f874 	bl	8012108 <USBD_Get_USB_Status>
 8012020:	4603      	mov	r3, r0
 8012022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012024:	7bbb      	ldrb	r3, [r7, #14]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3710      	adds	r7, #16
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b086      	sub	sp, #24
 8012032:	af00      	add	r7, sp, #0
 8012034:	60f8      	str	r0, [r7, #12]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
 801203a:	460b      	mov	r3, r1
 801203c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801203e:	2300      	movs	r3, #0
 8012040:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012042:	2300      	movs	r3, #0
 8012044:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801204c:	7af9      	ldrb	r1, [r7, #11]
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	f7f5 fae6 	bl	8007622 <HAL_PCD_EP_Transmit>
 8012056:	4603      	mov	r3, r0
 8012058:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801205a:	7dfb      	ldrb	r3, [r7, #23]
 801205c:	4618      	mov	r0, r3
 801205e:	f000 f853 	bl	8012108 <USBD_Get_USB_Status>
 8012062:	4603      	mov	r3, r0
 8012064:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012066:	7dbb      	ldrb	r3, [r7, #22]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3718      	adds	r7, #24
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b086      	sub	sp, #24
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	607a      	str	r2, [r7, #4]
 801207a:	603b      	str	r3, [r7, #0]
 801207c:	460b      	mov	r3, r1
 801207e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012084:	2300      	movs	r3, #0
 8012086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801208e:	7af9      	ldrb	r1, [r7, #11]
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	f7f5 fa72 	bl	800757c <HAL_PCD_EP_Receive>
 8012098:	4603      	mov	r3, r0
 801209a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801209c:	7dfb      	ldrb	r3, [r7, #23]
 801209e:	4618      	mov	r0, r3
 80120a0:	f000 f832 	bl	8012108 <USBD_Get_USB_Status>
 80120a4:	4603      	mov	r3, r0
 80120a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b082      	sub	sp, #8
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
 80120ba:	460b      	mov	r3, r1
 80120bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80120c4:	78fa      	ldrb	r2, [r7, #3]
 80120c6:	4611      	mov	r1, r2
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7f5 fa92 	bl	80075f2 <HAL_PCD_EP_GetRxCount>
 80120ce:	4603      	mov	r3, r0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80120e0:	4b03      	ldr	r3, [pc, #12]	; (80120f0 <USBD_static_malloc+0x18>)
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	370c      	adds	r7, #12
 80120e6:	46bd      	mov	sp, r7
 80120e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop
 80120f0:	2000ac2c 	.word	0x2000ac2c

080120f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]

}
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012108:	b480      	push	{r7}
 801210a:	b085      	sub	sp, #20
 801210c:	af00      	add	r7, sp, #0
 801210e:	4603      	mov	r3, r0
 8012110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012112:	2300      	movs	r3, #0
 8012114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	2b03      	cmp	r3, #3
 801211a:	d817      	bhi.n	801214c <USBD_Get_USB_Status+0x44>
 801211c:	a201      	add	r2, pc, #4	; (adr r2, 8012124 <USBD_Get_USB_Status+0x1c>)
 801211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012122:	bf00      	nop
 8012124:	08012135 	.word	0x08012135
 8012128:	0801213b 	.word	0x0801213b
 801212c:	08012141 	.word	0x08012141
 8012130:	08012147 	.word	0x08012147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012134:	2300      	movs	r3, #0
 8012136:	73fb      	strb	r3, [r7, #15]
    break;
 8012138:	e00b      	b.n	8012152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801213a:	2303      	movs	r3, #3
 801213c:	73fb      	strb	r3, [r7, #15]
    break;
 801213e:	e008      	b.n	8012152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012140:	2301      	movs	r3, #1
 8012142:	73fb      	strb	r3, [r7, #15]
    break;
 8012144:	e005      	b.n	8012152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012146:	2303      	movs	r3, #3
 8012148:	73fb      	strb	r3, [r7, #15]
    break;
 801214a:	e002      	b.n	8012152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801214c:	2303      	movs	r3, #3
 801214e:	73fb      	strb	r3, [r7, #15]
    break;
 8012150:	bf00      	nop
  }
  return usb_status;
 8012152:	7bfb      	ldrb	r3, [r7, #15]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3714      	adds	r7, #20
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr

08012160 <__cvt>:
 8012160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012164:	ec55 4b10 	vmov	r4, r5, d0
 8012168:	2d00      	cmp	r5, #0
 801216a:	460e      	mov	r6, r1
 801216c:	4619      	mov	r1, r3
 801216e:	462b      	mov	r3, r5
 8012170:	bfbb      	ittet	lt
 8012172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012176:	461d      	movlt	r5, r3
 8012178:	2300      	movge	r3, #0
 801217a:	232d      	movlt	r3, #45	; 0x2d
 801217c:	700b      	strb	r3, [r1, #0]
 801217e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012180:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012184:	4691      	mov	r9, r2
 8012186:	f023 0820 	bic.w	r8, r3, #32
 801218a:	bfbc      	itt	lt
 801218c:	4622      	movlt	r2, r4
 801218e:	4614      	movlt	r4, r2
 8012190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012194:	d005      	beq.n	80121a2 <__cvt+0x42>
 8012196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801219a:	d100      	bne.n	801219e <__cvt+0x3e>
 801219c:	3601      	adds	r6, #1
 801219e:	2102      	movs	r1, #2
 80121a0:	e000      	b.n	80121a4 <__cvt+0x44>
 80121a2:	2103      	movs	r1, #3
 80121a4:	ab03      	add	r3, sp, #12
 80121a6:	9301      	str	r3, [sp, #4]
 80121a8:	ab02      	add	r3, sp, #8
 80121aa:	9300      	str	r3, [sp, #0]
 80121ac:	ec45 4b10 	vmov	d0, r4, r5
 80121b0:	4653      	mov	r3, sl
 80121b2:	4632      	mov	r2, r6
 80121b4:	f001 f830 	bl	8013218 <_dtoa_r>
 80121b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80121bc:	4607      	mov	r7, r0
 80121be:	d102      	bne.n	80121c6 <__cvt+0x66>
 80121c0:	f019 0f01 	tst.w	r9, #1
 80121c4:	d022      	beq.n	801220c <__cvt+0xac>
 80121c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80121ca:	eb07 0906 	add.w	r9, r7, r6
 80121ce:	d110      	bne.n	80121f2 <__cvt+0x92>
 80121d0:	783b      	ldrb	r3, [r7, #0]
 80121d2:	2b30      	cmp	r3, #48	; 0x30
 80121d4:	d10a      	bne.n	80121ec <__cvt+0x8c>
 80121d6:	2200      	movs	r2, #0
 80121d8:	2300      	movs	r3, #0
 80121da:	4620      	mov	r0, r4
 80121dc:	4629      	mov	r1, r5
 80121de:	f7ee fc83 	bl	8000ae8 <__aeabi_dcmpeq>
 80121e2:	b918      	cbnz	r0, 80121ec <__cvt+0x8c>
 80121e4:	f1c6 0601 	rsb	r6, r6, #1
 80121e8:	f8ca 6000 	str.w	r6, [sl]
 80121ec:	f8da 3000 	ldr.w	r3, [sl]
 80121f0:	4499      	add	r9, r3
 80121f2:	2200      	movs	r2, #0
 80121f4:	2300      	movs	r3, #0
 80121f6:	4620      	mov	r0, r4
 80121f8:	4629      	mov	r1, r5
 80121fa:	f7ee fc75 	bl	8000ae8 <__aeabi_dcmpeq>
 80121fe:	b108      	cbz	r0, 8012204 <__cvt+0xa4>
 8012200:	f8cd 900c 	str.w	r9, [sp, #12]
 8012204:	2230      	movs	r2, #48	; 0x30
 8012206:	9b03      	ldr	r3, [sp, #12]
 8012208:	454b      	cmp	r3, r9
 801220a:	d307      	bcc.n	801221c <__cvt+0xbc>
 801220c:	9b03      	ldr	r3, [sp, #12]
 801220e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012210:	1bdb      	subs	r3, r3, r7
 8012212:	4638      	mov	r0, r7
 8012214:	6013      	str	r3, [r2, #0]
 8012216:	b004      	add	sp, #16
 8012218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801221c:	1c59      	adds	r1, r3, #1
 801221e:	9103      	str	r1, [sp, #12]
 8012220:	701a      	strb	r2, [r3, #0]
 8012222:	e7f0      	b.n	8012206 <__cvt+0xa6>

08012224 <__exponent>:
 8012224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012226:	4603      	mov	r3, r0
 8012228:	2900      	cmp	r1, #0
 801222a:	bfb8      	it	lt
 801222c:	4249      	neglt	r1, r1
 801222e:	f803 2b02 	strb.w	r2, [r3], #2
 8012232:	bfb4      	ite	lt
 8012234:	222d      	movlt	r2, #45	; 0x2d
 8012236:	222b      	movge	r2, #43	; 0x2b
 8012238:	2909      	cmp	r1, #9
 801223a:	7042      	strb	r2, [r0, #1]
 801223c:	dd2a      	ble.n	8012294 <__exponent+0x70>
 801223e:	f10d 0207 	add.w	r2, sp, #7
 8012242:	4617      	mov	r7, r2
 8012244:	260a      	movs	r6, #10
 8012246:	4694      	mov	ip, r2
 8012248:	fb91 f5f6 	sdiv	r5, r1, r6
 801224c:	fb06 1415 	mls	r4, r6, r5, r1
 8012250:	3430      	adds	r4, #48	; 0x30
 8012252:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012256:	460c      	mov	r4, r1
 8012258:	2c63      	cmp	r4, #99	; 0x63
 801225a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801225e:	4629      	mov	r1, r5
 8012260:	dcf1      	bgt.n	8012246 <__exponent+0x22>
 8012262:	3130      	adds	r1, #48	; 0x30
 8012264:	f1ac 0402 	sub.w	r4, ip, #2
 8012268:	f802 1c01 	strb.w	r1, [r2, #-1]
 801226c:	1c41      	adds	r1, r0, #1
 801226e:	4622      	mov	r2, r4
 8012270:	42ba      	cmp	r2, r7
 8012272:	d30a      	bcc.n	801228a <__exponent+0x66>
 8012274:	f10d 0209 	add.w	r2, sp, #9
 8012278:	eba2 020c 	sub.w	r2, r2, ip
 801227c:	42bc      	cmp	r4, r7
 801227e:	bf88      	it	hi
 8012280:	2200      	movhi	r2, #0
 8012282:	4413      	add	r3, r2
 8012284:	1a18      	subs	r0, r3, r0
 8012286:	b003      	add	sp, #12
 8012288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801228a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801228e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012292:	e7ed      	b.n	8012270 <__exponent+0x4c>
 8012294:	2330      	movs	r3, #48	; 0x30
 8012296:	3130      	adds	r1, #48	; 0x30
 8012298:	7083      	strb	r3, [r0, #2]
 801229a:	70c1      	strb	r1, [r0, #3]
 801229c:	1d03      	adds	r3, r0, #4
 801229e:	e7f1      	b.n	8012284 <__exponent+0x60>

080122a0 <_printf_float>:
 80122a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	ed2d 8b02 	vpush	{d8}
 80122a8:	b08d      	sub	sp, #52	; 0x34
 80122aa:	460c      	mov	r4, r1
 80122ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80122b0:	4616      	mov	r6, r2
 80122b2:	461f      	mov	r7, r3
 80122b4:	4605      	mov	r5, r0
 80122b6:	f000 fe4b 	bl	8012f50 <_localeconv_r>
 80122ba:	f8d0 a000 	ldr.w	sl, [r0]
 80122be:	4650      	mov	r0, sl
 80122c0:	f7ed ffe6 	bl	8000290 <strlen>
 80122c4:	2300      	movs	r3, #0
 80122c6:	930a      	str	r3, [sp, #40]	; 0x28
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	9305      	str	r3, [sp, #20]
 80122cc:	f8d8 3000 	ldr.w	r3, [r8]
 80122d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80122d4:	3307      	adds	r3, #7
 80122d6:	f023 0307 	bic.w	r3, r3, #7
 80122da:	f103 0208 	add.w	r2, r3, #8
 80122de:	f8c8 2000 	str.w	r2, [r8]
 80122e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80122e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80122ea:	9307      	str	r3, [sp, #28]
 80122ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80122f0:	ee08 0a10 	vmov	s16, r0
 80122f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80122f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122fc:	4b9e      	ldr	r3, [pc, #632]	; (8012578 <_printf_float+0x2d8>)
 80122fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012302:	f7ee fc23 	bl	8000b4c <__aeabi_dcmpun>
 8012306:	bb88      	cbnz	r0, 801236c <_printf_float+0xcc>
 8012308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801230c:	4b9a      	ldr	r3, [pc, #616]	; (8012578 <_printf_float+0x2d8>)
 801230e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012312:	f7ee fbfd 	bl	8000b10 <__aeabi_dcmple>
 8012316:	bb48      	cbnz	r0, 801236c <_printf_float+0xcc>
 8012318:	2200      	movs	r2, #0
 801231a:	2300      	movs	r3, #0
 801231c:	4640      	mov	r0, r8
 801231e:	4649      	mov	r1, r9
 8012320:	f7ee fbec 	bl	8000afc <__aeabi_dcmplt>
 8012324:	b110      	cbz	r0, 801232c <_printf_float+0x8c>
 8012326:	232d      	movs	r3, #45	; 0x2d
 8012328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801232c:	4a93      	ldr	r2, [pc, #588]	; (801257c <_printf_float+0x2dc>)
 801232e:	4b94      	ldr	r3, [pc, #592]	; (8012580 <_printf_float+0x2e0>)
 8012330:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012334:	bf94      	ite	ls
 8012336:	4690      	movls	r8, r2
 8012338:	4698      	movhi	r8, r3
 801233a:	2303      	movs	r3, #3
 801233c:	6123      	str	r3, [r4, #16]
 801233e:	9b05      	ldr	r3, [sp, #20]
 8012340:	f023 0304 	bic.w	r3, r3, #4
 8012344:	6023      	str	r3, [r4, #0]
 8012346:	f04f 0900 	mov.w	r9, #0
 801234a:	9700      	str	r7, [sp, #0]
 801234c:	4633      	mov	r3, r6
 801234e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012350:	4621      	mov	r1, r4
 8012352:	4628      	mov	r0, r5
 8012354:	f000 f9da 	bl	801270c <_printf_common>
 8012358:	3001      	adds	r0, #1
 801235a:	f040 8090 	bne.w	801247e <_printf_float+0x1de>
 801235e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012362:	b00d      	add	sp, #52	; 0x34
 8012364:	ecbd 8b02 	vpop	{d8}
 8012368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801236c:	4642      	mov	r2, r8
 801236e:	464b      	mov	r3, r9
 8012370:	4640      	mov	r0, r8
 8012372:	4649      	mov	r1, r9
 8012374:	f7ee fbea 	bl	8000b4c <__aeabi_dcmpun>
 8012378:	b140      	cbz	r0, 801238c <_printf_float+0xec>
 801237a:	464b      	mov	r3, r9
 801237c:	2b00      	cmp	r3, #0
 801237e:	bfbc      	itt	lt
 8012380:	232d      	movlt	r3, #45	; 0x2d
 8012382:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012386:	4a7f      	ldr	r2, [pc, #508]	; (8012584 <_printf_float+0x2e4>)
 8012388:	4b7f      	ldr	r3, [pc, #508]	; (8012588 <_printf_float+0x2e8>)
 801238a:	e7d1      	b.n	8012330 <_printf_float+0x90>
 801238c:	6863      	ldr	r3, [r4, #4]
 801238e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012392:	9206      	str	r2, [sp, #24]
 8012394:	1c5a      	adds	r2, r3, #1
 8012396:	d13f      	bne.n	8012418 <_printf_float+0x178>
 8012398:	2306      	movs	r3, #6
 801239a:	6063      	str	r3, [r4, #4]
 801239c:	9b05      	ldr	r3, [sp, #20]
 801239e:	6861      	ldr	r1, [r4, #4]
 80123a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80123a4:	2300      	movs	r3, #0
 80123a6:	9303      	str	r3, [sp, #12]
 80123a8:	ab0a      	add	r3, sp, #40	; 0x28
 80123aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80123ae:	ab09      	add	r3, sp, #36	; 0x24
 80123b0:	ec49 8b10 	vmov	d0, r8, r9
 80123b4:	9300      	str	r3, [sp, #0]
 80123b6:	6022      	str	r2, [r4, #0]
 80123b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80123bc:	4628      	mov	r0, r5
 80123be:	f7ff fecf 	bl	8012160 <__cvt>
 80123c2:	9b06      	ldr	r3, [sp, #24]
 80123c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123c6:	2b47      	cmp	r3, #71	; 0x47
 80123c8:	4680      	mov	r8, r0
 80123ca:	d108      	bne.n	80123de <_printf_float+0x13e>
 80123cc:	1cc8      	adds	r0, r1, #3
 80123ce:	db02      	blt.n	80123d6 <_printf_float+0x136>
 80123d0:	6863      	ldr	r3, [r4, #4]
 80123d2:	4299      	cmp	r1, r3
 80123d4:	dd41      	ble.n	801245a <_printf_float+0x1ba>
 80123d6:	f1ab 0302 	sub.w	r3, fp, #2
 80123da:	fa5f fb83 	uxtb.w	fp, r3
 80123de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80123e2:	d820      	bhi.n	8012426 <_printf_float+0x186>
 80123e4:	3901      	subs	r1, #1
 80123e6:	465a      	mov	r2, fp
 80123e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80123ec:	9109      	str	r1, [sp, #36]	; 0x24
 80123ee:	f7ff ff19 	bl	8012224 <__exponent>
 80123f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123f4:	1813      	adds	r3, r2, r0
 80123f6:	2a01      	cmp	r2, #1
 80123f8:	4681      	mov	r9, r0
 80123fa:	6123      	str	r3, [r4, #16]
 80123fc:	dc02      	bgt.n	8012404 <_printf_float+0x164>
 80123fe:	6822      	ldr	r2, [r4, #0]
 8012400:	07d2      	lsls	r2, r2, #31
 8012402:	d501      	bpl.n	8012408 <_printf_float+0x168>
 8012404:	3301      	adds	r3, #1
 8012406:	6123      	str	r3, [r4, #16]
 8012408:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801240c:	2b00      	cmp	r3, #0
 801240e:	d09c      	beq.n	801234a <_printf_float+0xaa>
 8012410:	232d      	movs	r3, #45	; 0x2d
 8012412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012416:	e798      	b.n	801234a <_printf_float+0xaa>
 8012418:	9a06      	ldr	r2, [sp, #24]
 801241a:	2a47      	cmp	r2, #71	; 0x47
 801241c:	d1be      	bne.n	801239c <_printf_float+0xfc>
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1bc      	bne.n	801239c <_printf_float+0xfc>
 8012422:	2301      	movs	r3, #1
 8012424:	e7b9      	b.n	801239a <_printf_float+0xfa>
 8012426:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801242a:	d118      	bne.n	801245e <_printf_float+0x1be>
 801242c:	2900      	cmp	r1, #0
 801242e:	6863      	ldr	r3, [r4, #4]
 8012430:	dd0b      	ble.n	801244a <_printf_float+0x1aa>
 8012432:	6121      	str	r1, [r4, #16]
 8012434:	b913      	cbnz	r3, 801243c <_printf_float+0x19c>
 8012436:	6822      	ldr	r2, [r4, #0]
 8012438:	07d0      	lsls	r0, r2, #31
 801243a:	d502      	bpl.n	8012442 <_printf_float+0x1a2>
 801243c:	3301      	adds	r3, #1
 801243e:	440b      	add	r3, r1
 8012440:	6123      	str	r3, [r4, #16]
 8012442:	65a1      	str	r1, [r4, #88]	; 0x58
 8012444:	f04f 0900 	mov.w	r9, #0
 8012448:	e7de      	b.n	8012408 <_printf_float+0x168>
 801244a:	b913      	cbnz	r3, 8012452 <_printf_float+0x1b2>
 801244c:	6822      	ldr	r2, [r4, #0]
 801244e:	07d2      	lsls	r2, r2, #31
 8012450:	d501      	bpl.n	8012456 <_printf_float+0x1b6>
 8012452:	3302      	adds	r3, #2
 8012454:	e7f4      	b.n	8012440 <_printf_float+0x1a0>
 8012456:	2301      	movs	r3, #1
 8012458:	e7f2      	b.n	8012440 <_printf_float+0x1a0>
 801245a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801245e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012460:	4299      	cmp	r1, r3
 8012462:	db05      	blt.n	8012470 <_printf_float+0x1d0>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	6121      	str	r1, [r4, #16]
 8012468:	07d8      	lsls	r0, r3, #31
 801246a:	d5ea      	bpl.n	8012442 <_printf_float+0x1a2>
 801246c:	1c4b      	adds	r3, r1, #1
 801246e:	e7e7      	b.n	8012440 <_printf_float+0x1a0>
 8012470:	2900      	cmp	r1, #0
 8012472:	bfd4      	ite	le
 8012474:	f1c1 0202 	rsble	r2, r1, #2
 8012478:	2201      	movgt	r2, #1
 801247a:	4413      	add	r3, r2
 801247c:	e7e0      	b.n	8012440 <_printf_float+0x1a0>
 801247e:	6823      	ldr	r3, [r4, #0]
 8012480:	055a      	lsls	r2, r3, #21
 8012482:	d407      	bmi.n	8012494 <_printf_float+0x1f4>
 8012484:	6923      	ldr	r3, [r4, #16]
 8012486:	4642      	mov	r2, r8
 8012488:	4631      	mov	r1, r6
 801248a:	4628      	mov	r0, r5
 801248c:	47b8      	blx	r7
 801248e:	3001      	adds	r0, #1
 8012490:	d12c      	bne.n	80124ec <_printf_float+0x24c>
 8012492:	e764      	b.n	801235e <_printf_float+0xbe>
 8012494:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012498:	f240 80e0 	bls.w	801265c <_printf_float+0x3bc>
 801249c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80124a0:	2200      	movs	r2, #0
 80124a2:	2300      	movs	r3, #0
 80124a4:	f7ee fb20 	bl	8000ae8 <__aeabi_dcmpeq>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d034      	beq.n	8012516 <_printf_float+0x276>
 80124ac:	4a37      	ldr	r2, [pc, #220]	; (801258c <_printf_float+0x2ec>)
 80124ae:	2301      	movs	r3, #1
 80124b0:	4631      	mov	r1, r6
 80124b2:	4628      	mov	r0, r5
 80124b4:	47b8      	blx	r7
 80124b6:	3001      	adds	r0, #1
 80124b8:	f43f af51 	beq.w	801235e <_printf_float+0xbe>
 80124bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80124c0:	429a      	cmp	r2, r3
 80124c2:	db02      	blt.n	80124ca <_printf_float+0x22a>
 80124c4:	6823      	ldr	r3, [r4, #0]
 80124c6:	07d8      	lsls	r0, r3, #31
 80124c8:	d510      	bpl.n	80124ec <_printf_float+0x24c>
 80124ca:	ee18 3a10 	vmov	r3, s16
 80124ce:	4652      	mov	r2, sl
 80124d0:	4631      	mov	r1, r6
 80124d2:	4628      	mov	r0, r5
 80124d4:	47b8      	blx	r7
 80124d6:	3001      	adds	r0, #1
 80124d8:	f43f af41 	beq.w	801235e <_printf_float+0xbe>
 80124dc:	f04f 0800 	mov.w	r8, #0
 80124e0:	f104 091a 	add.w	r9, r4, #26
 80124e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124e6:	3b01      	subs	r3, #1
 80124e8:	4543      	cmp	r3, r8
 80124ea:	dc09      	bgt.n	8012500 <_printf_float+0x260>
 80124ec:	6823      	ldr	r3, [r4, #0]
 80124ee:	079b      	lsls	r3, r3, #30
 80124f0:	f100 8107 	bmi.w	8012702 <_printf_float+0x462>
 80124f4:	68e0      	ldr	r0, [r4, #12]
 80124f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124f8:	4298      	cmp	r0, r3
 80124fa:	bfb8      	it	lt
 80124fc:	4618      	movlt	r0, r3
 80124fe:	e730      	b.n	8012362 <_printf_float+0xc2>
 8012500:	2301      	movs	r3, #1
 8012502:	464a      	mov	r2, r9
 8012504:	4631      	mov	r1, r6
 8012506:	4628      	mov	r0, r5
 8012508:	47b8      	blx	r7
 801250a:	3001      	adds	r0, #1
 801250c:	f43f af27 	beq.w	801235e <_printf_float+0xbe>
 8012510:	f108 0801 	add.w	r8, r8, #1
 8012514:	e7e6      	b.n	80124e4 <_printf_float+0x244>
 8012516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012518:	2b00      	cmp	r3, #0
 801251a:	dc39      	bgt.n	8012590 <_printf_float+0x2f0>
 801251c:	4a1b      	ldr	r2, [pc, #108]	; (801258c <_printf_float+0x2ec>)
 801251e:	2301      	movs	r3, #1
 8012520:	4631      	mov	r1, r6
 8012522:	4628      	mov	r0, r5
 8012524:	47b8      	blx	r7
 8012526:	3001      	adds	r0, #1
 8012528:	f43f af19 	beq.w	801235e <_printf_float+0xbe>
 801252c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012530:	4313      	orrs	r3, r2
 8012532:	d102      	bne.n	801253a <_printf_float+0x29a>
 8012534:	6823      	ldr	r3, [r4, #0]
 8012536:	07d9      	lsls	r1, r3, #31
 8012538:	d5d8      	bpl.n	80124ec <_printf_float+0x24c>
 801253a:	ee18 3a10 	vmov	r3, s16
 801253e:	4652      	mov	r2, sl
 8012540:	4631      	mov	r1, r6
 8012542:	4628      	mov	r0, r5
 8012544:	47b8      	blx	r7
 8012546:	3001      	adds	r0, #1
 8012548:	f43f af09 	beq.w	801235e <_printf_float+0xbe>
 801254c:	f04f 0900 	mov.w	r9, #0
 8012550:	f104 0a1a 	add.w	sl, r4, #26
 8012554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012556:	425b      	negs	r3, r3
 8012558:	454b      	cmp	r3, r9
 801255a:	dc01      	bgt.n	8012560 <_printf_float+0x2c0>
 801255c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801255e:	e792      	b.n	8012486 <_printf_float+0x1e6>
 8012560:	2301      	movs	r3, #1
 8012562:	4652      	mov	r2, sl
 8012564:	4631      	mov	r1, r6
 8012566:	4628      	mov	r0, r5
 8012568:	47b8      	blx	r7
 801256a:	3001      	adds	r0, #1
 801256c:	f43f aef7 	beq.w	801235e <_printf_float+0xbe>
 8012570:	f109 0901 	add.w	r9, r9, #1
 8012574:	e7ee      	b.n	8012554 <_printf_float+0x2b4>
 8012576:	bf00      	nop
 8012578:	7fefffff 	.word	0x7fefffff
 801257c:	0801691d 	.word	0x0801691d
 8012580:	08016921 	.word	0x08016921
 8012584:	08016925 	.word	0x08016925
 8012588:	08016929 	.word	0x08016929
 801258c:	0801692d 	.word	0x0801692d
 8012590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012594:	429a      	cmp	r2, r3
 8012596:	bfa8      	it	ge
 8012598:	461a      	movge	r2, r3
 801259a:	2a00      	cmp	r2, #0
 801259c:	4691      	mov	r9, r2
 801259e:	dc37      	bgt.n	8012610 <_printf_float+0x370>
 80125a0:	f04f 0b00 	mov.w	fp, #0
 80125a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80125a8:	f104 021a 	add.w	r2, r4, #26
 80125ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80125ae:	9305      	str	r3, [sp, #20]
 80125b0:	eba3 0309 	sub.w	r3, r3, r9
 80125b4:	455b      	cmp	r3, fp
 80125b6:	dc33      	bgt.n	8012620 <_printf_float+0x380>
 80125b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125bc:	429a      	cmp	r2, r3
 80125be:	db3b      	blt.n	8012638 <_printf_float+0x398>
 80125c0:	6823      	ldr	r3, [r4, #0]
 80125c2:	07da      	lsls	r2, r3, #31
 80125c4:	d438      	bmi.n	8012638 <_printf_float+0x398>
 80125c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80125ca:	eba2 0903 	sub.w	r9, r2, r3
 80125ce:	9b05      	ldr	r3, [sp, #20]
 80125d0:	1ad2      	subs	r2, r2, r3
 80125d2:	4591      	cmp	r9, r2
 80125d4:	bfa8      	it	ge
 80125d6:	4691      	movge	r9, r2
 80125d8:	f1b9 0f00 	cmp.w	r9, #0
 80125dc:	dc35      	bgt.n	801264a <_printf_float+0x3aa>
 80125de:	f04f 0800 	mov.w	r8, #0
 80125e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80125e6:	f104 0a1a 	add.w	sl, r4, #26
 80125ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125ee:	1a9b      	subs	r3, r3, r2
 80125f0:	eba3 0309 	sub.w	r3, r3, r9
 80125f4:	4543      	cmp	r3, r8
 80125f6:	f77f af79 	ble.w	80124ec <_printf_float+0x24c>
 80125fa:	2301      	movs	r3, #1
 80125fc:	4652      	mov	r2, sl
 80125fe:	4631      	mov	r1, r6
 8012600:	4628      	mov	r0, r5
 8012602:	47b8      	blx	r7
 8012604:	3001      	adds	r0, #1
 8012606:	f43f aeaa 	beq.w	801235e <_printf_float+0xbe>
 801260a:	f108 0801 	add.w	r8, r8, #1
 801260e:	e7ec      	b.n	80125ea <_printf_float+0x34a>
 8012610:	4613      	mov	r3, r2
 8012612:	4631      	mov	r1, r6
 8012614:	4642      	mov	r2, r8
 8012616:	4628      	mov	r0, r5
 8012618:	47b8      	blx	r7
 801261a:	3001      	adds	r0, #1
 801261c:	d1c0      	bne.n	80125a0 <_printf_float+0x300>
 801261e:	e69e      	b.n	801235e <_printf_float+0xbe>
 8012620:	2301      	movs	r3, #1
 8012622:	4631      	mov	r1, r6
 8012624:	4628      	mov	r0, r5
 8012626:	9205      	str	r2, [sp, #20]
 8012628:	47b8      	blx	r7
 801262a:	3001      	adds	r0, #1
 801262c:	f43f ae97 	beq.w	801235e <_printf_float+0xbe>
 8012630:	9a05      	ldr	r2, [sp, #20]
 8012632:	f10b 0b01 	add.w	fp, fp, #1
 8012636:	e7b9      	b.n	80125ac <_printf_float+0x30c>
 8012638:	ee18 3a10 	vmov	r3, s16
 801263c:	4652      	mov	r2, sl
 801263e:	4631      	mov	r1, r6
 8012640:	4628      	mov	r0, r5
 8012642:	47b8      	blx	r7
 8012644:	3001      	adds	r0, #1
 8012646:	d1be      	bne.n	80125c6 <_printf_float+0x326>
 8012648:	e689      	b.n	801235e <_printf_float+0xbe>
 801264a:	9a05      	ldr	r2, [sp, #20]
 801264c:	464b      	mov	r3, r9
 801264e:	4442      	add	r2, r8
 8012650:	4631      	mov	r1, r6
 8012652:	4628      	mov	r0, r5
 8012654:	47b8      	blx	r7
 8012656:	3001      	adds	r0, #1
 8012658:	d1c1      	bne.n	80125de <_printf_float+0x33e>
 801265a:	e680      	b.n	801235e <_printf_float+0xbe>
 801265c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801265e:	2a01      	cmp	r2, #1
 8012660:	dc01      	bgt.n	8012666 <_printf_float+0x3c6>
 8012662:	07db      	lsls	r3, r3, #31
 8012664:	d53a      	bpl.n	80126dc <_printf_float+0x43c>
 8012666:	2301      	movs	r3, #1
 8012668:	4642      	mov	r2, r8
 801266a:	4631      	mov	r1, r6
 801266c:	4628      	mov	r0, r5
 801266e:	47b8      	blx	r7
 8012670:	3001      	adds	r0, #1
 8012672:	f43f ae74 	beq.w	801235e <_printf_float+0xbe>
 8012676:	ee18 3a10 	vmov	r3, s16
 801267a:	4652      	mov	r2, sl
 801267c:	4631      	mov	r1, r6
 801267e:	4628      	mov	r0, r5
 8012680:	47b8      	blx	r7
 8012682:	3001      	adds	r0, #1
 8012684:	f43f ae6b 	beq.w	801235e <_printf_float+0xbe>
 8012688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801268c:	2200      	movs	r2, #0
 801268e:	2300      	movs	r3, #0
 8012690:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012694:	f7ee fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 8012698:	b9d8      	cbnz	r0, 80126d2 <_printf_float+0x432>
 801269a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801269e:	f108 0201 	add.w	r2, r8, #1
 80126a2:	4631      	mov	r1, r6
 80126a4:	4628      	mov	r0, r5
 80126a6:	47b8      	blx	r7
 80126a8:	3001      	adds	r0, #1
 80126aa:	d10e      	bne.n	80126ca <_printf_float+0x42a>
 80126ac:	e657      	b.n	801235e <_printf_float+0xbe>
 80126ae:	2301      	movs	r3, #1
 80126b0:	4652      	mov	r2, sl
 80126b2:	4631      	mov	r1, r6
 80126b4:	4628      	mov	r0, r5
 80126b6:	47b8      	blx	r7
 80126b8:	3001      	adds	r0, #1
 80126ba:	f43f ae50 	beq.w	801235e <_printf_float+0xbe>
 80126be:	f108 0801 	add.w	r8, r8, #1
 80126c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126c4:	3b01      	subs	r3, #1
 80126c6:	4543      	cmp	r3, r8
 80126c8:	dcf1      	bgt.n	80126ae <_printf_float+0x40e>
 80126ca:	464b      	mov	r3, r9
 80126cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80126d0:	e6da      	b.n	8012488 <_printf_float+0x1e8>
 80126d2:	f04f 0800 	mov.w	r8, #0
 80126d6:	f104 0a1a 	add.w	sl, r4, #26
 80126da:	e7f2      	b.n	80126c2 <_printf_float+0x422>
 80126dc:	2301      	movs	r3, #1
 80126de:	4642      	mov	r2, r8
 80126e0:	e7df      	b.n	80126a2 <_printf_float+0x402>
 80126e2:	2301      	movs	r3, #1
 80126e4:	464a      	mov	r2, r9
 80126e6:	4631      	mov	r1, r6
 80126e8:	4628      	mov	r0, r5
 80126ea:	47b8      	blx	r7
 80126ec:	3001      	adds	r0, #1
 80126ee:	f43f ae36 	beq.w	801235e <_printf_float+0xbe>
 80126f2:	f108 0801 	add.w	r8, r8, #1
 80126f6:	68e3      	ldr	r3, [r4, #12]
 80126f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80126fa:	1a5b      	subs	r3, r3, r1
 80126fc:	4543      	cmp	r3, r8
 80126fe:	dcf0      	bgt.n	80126e2 <_printf_float+0x442>
 8012700:	e6f8      	b.n	80124f4 <_printf_float+0x254>
 8012702:	f04f 0800 	mov.w	r8, #0
 8012706:	f104 0919 	add.w	r9, r4, #25
 801270a:	e7f4      	b.n	80126f6 <_printf_float+0x456>

0801270c <_printf_common>:
 801270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012710:	4616      	mov	r6, r2
 8012712:	4699      	mov	r9, r3
 8012714:	688a      	ldr	r2, [r1, #8]
 8012716:	690b      	ldr	r3, [r1, #16]
 8012718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801271c:	4293      	cmp	r3, r2
 801271e:	bfb8      	it	lt
 8012720:	4613      	movlt	r3, r2
 8012722:	6033      	str	r3, [r6, #0]
 8012724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012728:	4607      	mov	r7, r0
 801272a:	460c      	mov	r4, r1
 801272c:	b10a      	cbz	r2, 8012732 <_printf_common+0x26>
 801272e:	3301      	adds	r3, #1
 8012730:	6033      	str	r3, [r6, #0]
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	0699      	lsls	r1, r3, #26
 8012736:	bf42      	ittt	mi
 8012738:	6833      	ldrmi	r3, [r6, #0]
 801273a:	3302      	addmi	r3, #2
 801273c:	6033      	strmi	r3, [r6, #0]
 801273e:	6825      	ldr	r5, [r4, #0]
 8012740:	f015 0506 	ands.w	r5, r5, #6
 8012744:	d106      	bne.n	8012754 <_printf_common+0x48>
 8012746:	f104 0a19 	add.w	sl, r4, #25
 801274a:	68e3      	ldr	r3, [r4, #12]
 801274c:	6832      	ldr	r2, [r6, #0]
 801274e:	1a9b      	subs	r3, r3, r2
 8012750:	42ab      	cmp	r3, r5
 8012752:	dc26      	bgt.n	80127a2 <_printf_common+0x96>
 8012754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012758:	1e13      	subs	r3, r2, #0
 801275a:	6822      	ldr	r2, [r4, #0]
 801275c:	bf18      	it	ne
 801275e:	2301      	movne	r3, #1
 8012760:	0692      	lsls	r2, r2, #26
 8012762:	d42b      	bmi.n	80127bc <_printf_common+0xb0>
 8012764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012768:	4649      	mov	r1, r9
 801276a:	4638      	mov	r0, r7
 801276c:	47c0      	blx	r8
 801276e:	3001      	adds	r0, #1
 8012770:	d01e      	beq.n	80127b0 <_printf_common+0xa4>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	6922      	ldr	r2, [r4, #16]
 8012776:	f003 0306 	and.w	r3, r3, #6
 801277a:	2b04      	cmp	r3, #4
 801277c:	bf02      	ittt	eq
 801277e:	68e5      	ldreq	r5, [r4, #12]
 8012780:	6833      	ldreq	r3, [r6, #0]
 8012782:	1aed      	subeq	r5, r5, r3
 8012784:	68a3      	ldr	r3, [r4, #8]
 8012786:	bf0c      	ite	eq
 8012788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801278c:	2500      	movne	r5, #0
 801278e:	4293      	cmp	r3, r2
 8012790:	bfc4      	itt	gt
 8012792:	1a9b      	subgt	r3, r3, r2
 8012794:	18ed      	addgt	r5, r5, r3
 8012796:	2600      	movs	r6, #0
 8012798:	341a      	adds	r4, #26
 801279a:	42b5      	cmp	r5, r6
 801279c:	d11a      	bne.n	80127d4 <_printf_common+0xc8>
 801279e:	2000      	movs	r0, #0
 80127a0:	e008      	b.n	80127b4 <_printf_common+0xa8>
 80127a2:	2301      	movs	r3, #1
 80127a4:	4652      	mov	r2, sl
 80127a6:	4649      	mov	r1, r9
 80127a8:	4638      	mov	r0, r7
 80127aa:	47c0      	blx	r8
 80127ac:	3001      	adds	r0, #1
 80127ae:	d103      	bne.n	80127b8 <_printf_common+0xac>
 80127b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b8:	3501      	adds	r5, #1
 80127ba:	e7c6      	b.n	801274a <_printf_common+0x3e>
 80127bc:	18e1      	adds	r1, r4, r3
 80127be:	1c5a      	adds	r2, r3, #1
 80127c0:	2030      	movs	r0, #48	; 0x30
 80127c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80127c6:	4422      	add	r2, r4
 80127c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80127cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80127d0:	3302      	adds	r3, #2
 80127d2:	e7c7      	b.n	8012764 <_printf_common+0x58>
 80127d4:	2301      	movs	r3, #1
 80127d6:	4622      	mov	r2, r4
 80127d8:	4649      	mov	r1, r9
 80127da:	4638      	mov	r0, r7
 80127dc:	47c0      	blx	r8
 80127de:	3001      	adds	r0, #1
 80127e0:	d0e6      	beq.n	80127b0 <_printf_common+0xa4>
 80127e2:	3601      	adds	r6, #1
 80127e4:	e7d9      	b.n	801279a <_printf_common+0x8e>
	...

080127e8 <_printf_i>:
 80127e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127ec:	7e0f      	ldrb	r7, [r1, #24]
 80127ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80127f0:	2f78      	cmp	r7, #120	; 0x78
 80127f2:	4691      	mov	r9, r2
 80127f4:	4680      	mov	r8, r0
 80127f6:	460c      	mov	r4, r1
 80127f8:	469a      	mov	sl, r3
 80127fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80127fe:	d807      	bhi.n	8012810 <_printf_i+0x28>
 8012800:	2f62      	cmp	r7, #98	; 0x62
 8012802:	d80a      	bhi.n	801281a <_printf_i+0x32>
 8012804:	2f00      	cmp	r7, #0
 8012806:	f000 80d4 	beq.w	80129b2 <_printf_i+0x1ca>
 801280a:	2f58      	cmp	r7, #88	; 0x58
 801280c:	f000 80c0 	beq.w	8012990 <_printf_i+0x1a8>
 8012810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012818:	e03a      	b.n	8012890 <_printf_i+0xa8>
 801281a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801281e:	2b15      	cmp	r3, #21
 8012820:	d8f6      	bhi.n	8012810 <_printf_i+0x28>
 8012822:	a101      	add	r1, pc, #4	; (adr r1, 8012828 <_printf_i+0x40>)
 8012824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012828:	08012881 	.word	0x08012881
 801282c:	08012895 	.word	0x08012895
 8012830:	08012811 	.word	0x08012811
 8012834:	08012811 	.word	0x08012811
 8012838:	08012811 	.word	0x08012811
 801283c:	08012811 	.word	0x08012811
 8012840:	08012895 	.word	0x08012895
 8012844:	08012811 	.word	0x08012811
 8012848:	08012811 	.word	0x08012811
 801284c:	08012811 	.word	0x08012811
 8012850:	08012811 	.word	0x08012811
 8012854:	08012999 	.word	0x08012999
 8012858:	080128c1 	.word	0x080128c1
 801285c:	08012953 	.word	0x08012953
 8012860:	08012811 	.word	0x08012811
 8012864:	08012811 	.word	0x08012811
 8012868:	080129bb 	.word	0x080129bb
 801286c:	08012811 	.word	0x08012811
 8012870:	080128c1 	.word	0x080128c1
 8012874:	08012811 	.word	0x08012811
 8012878:	08012811 	.word	0x08012811
 801287c:	0801295b 	.word	0x0801295b
 8012880:	682b      	ldr	r3, [r5, #0]
 8012882:	1d1a      	adds	r2, r3, #4
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	602a      	str	r2, [r5, #0]
 8012888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801288c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012890:	2301      	movs	r3, #1
 8012892:	e09f      	b.n	80129d4 <_printf_i+0x1ec>
 8012894:	6820      	ldr	r0, [r4, #0]
 8012896:	682b      	ldr	r3, [r5, #0]
 8012898:	0607      	lsls	r7, r0, #24
 801289a:	f103 0104 	add.w	r1, r3, #4
 801289e:	6029      	str	r1, [r5, #0]
 80128a0:	d501      	bpl.n	80128a6 <_printf_i+0xbe>
 80128a2:	681e      	ldr	r6, [r3, #0]
 80128a4:	e003      	b.n	80128ae <_printf_i+0xc6>
 80128a6:	0646      	lsls	r6, r0, #25
 80128a8:	d5fb      	bpl.n	80128a2 <_printf_i+0xba>
 80128aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80128ae:	2e00      	cmp	r6, #0
 80128b0:	da03      	bge.n	80128ba <_printf_i+0xd2>
 80128b2:	232d      	movs	r3, #45	; 0x2d
 80128b4:	4276      	negs	r6, r6
 80128b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128ba:	485a      	ldr	r0, [pc, #360]	; (8012a24 <_printf_i+0x23c>)
 80128bc:	230a      	movs	r3, #10
 80128be:	e012      	b.n	80128e6 <_printf_i+0xfe>
 80128c0:	682b      	ldr	r3, [r5, #0]
 80128c2:	6820      	ldr	r0, [r4, #0]
 80128c4:	1d19      	adds	r1, r3, #4
 80128c6:	6029      	str	r1, [r5, #0]
 80128c8:	0605      	lsls	r5, r0, #24
 80128ca:	d501      	bpl.n	80128d0 <_printf_i+0xe8>
 80128cc:	681e      	ldr	r6, [r3, #0]
 80128ce:	e002      	b.n	80128d6 <_printf_i+0xee>
 80128d0:	0641      	lsls	r1, r0, #25
 80128d2:	d5fb      	bpl.n	80128cc <_printf_i+0xe4>
 80128d4:	881e      	ldrh	r6, [r3, #0]
 80128d6:	4853      	ldr	r0, [pc, #332]	; (8012a24 <_printf_i+0x23c>)
 80128d8:	2f6f      	cmp	r7, #111	; 0x6f
 80128da:	bf0c      	ite	eq
 80128dc:	2308      	moveq	r3, #8
 80128de:	230a      	movne	r3, #10
 80128e0:	2100      	movs	r1, #0
 80128e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128e6:	6865      	ldr	r5, [r4, #4]
 80128e8:	60a5      	str	r5, [r4, #8]
 80128ea:	2d00      	cmp	r5, #0
 80128ec:	bfa2      	ittt	ge
 80128ee:	6821      	ldrge	r1, [r4, #0]
 80128f0:	f021 0104 	bicge.w	r1, r1, #4
 80128f4:	6021      	strge	r1, [r4, #0]
 80128f6:	b90e      	cbnz	r6, 80128fc <_printf_i+0x114>
 80128f8:	2d00      	cmp	r5, #0
 80128fa:	d04b      	beq.n	8012994 <_printf_i+0x1ac>
 80128fc:	4615      	mov	r5, r2
 80128fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8012902:	fb03 6711 	mls	r7, r3, r1, r6
 8012906:	5dc7      	ldrb	r7, [r0, r7]
 8012908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801290c:	4637      	mov	r7, r6
 801290e:	42bb      	cmp	r3, r7
 8012910:	460e      	mov	r6, r1
 8012912:	d9f4      	bls.n	80128fe <_printf_i+0x116>
 8012914:	2b08      	cmp	r3, #8
 8012916:	d10b      	bne.n	8012930 <_printf_i+0x148>
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	07de      	lsls	r6, r3, #31
 801291c:	d508      	bpl.n	8012930 <_printf_i+0x148>
 801291e:	6923      	ldr	r3, [r4, #16]
 8012920:	6861      	ldr	r1, [r4, #4]
 8012922:	4299      	cmp	r1, r3
 8012924:	bfde      	ittt	le
 8012926:	2330      	movle	r3, #48	; 0x30
 8012928:	f805 3c01 	strble.w	r3, [r5, #-1]
 801292c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012930:	1b52      	subs	r2, r2, r5
 8012932:	6122      	str	r2, [r4, #16]
 8012934:	f8cd a000 	str.w	sl, [sp]
 8012938:	464b      	mov	r3, r9
 801293a:	aa03      	add	r2, sp, #12
 801293c:	4621      	mov	r1, r4
 801293e:	4640      	mov	r0, r8
 8012940:	f7ff fee4 	bl	801270c <_printf_common>
 8012944:	3001      	adds	r0, #1
 8012946:	d14a      	bne.n	80129de <_printf_i+0x1f6>
 8012948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801294c:	b004      	add	sp, #16
 801294e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012952:	6823      	ldr	r3, [r4, #0]
 8012954:	f043 0320 	orr.w	r3, r3, #32
 8012958:	6023      	str	r3, [r4, #0]
 801295a:	4833      	ldr	r0, [pc, #204]	; (8012a28 <_printf_i+0x240>)
 801295c:	2778      	movs	r7, #120	; 0x78
 801295e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012962:	6823      	ldr	r3, [r4, #0]
 8012964:	6829      	ldr	r1, [r5, #0]
 8012966:	061f      	lsls	r7, r3, #24
 8012968:	f851 6b04 	ldr.w	r6, [r1], #4
 801296c:	d402      	bmi.n	8012974 <_printf_i+0x18c>
 801296e:	065f      	lsls	r7, r3, #25
 8012970:	bf48      	it	mi
 8012972:	b2b6      	uxthmi	r6, r6
 8012974:	07df      	lsls	r7, r3, #31
 8012976:	bf48      	it	mi
 8012978:	f043 0320 	orrmi.w	r3, r3, #32
 801297c:	6029      	str	r1, [r5, #0]
 801297e:	bf48      	it	mi
 8012980:	6023      	strmi	r3, [r4, #0]
 8012982:	b91e      	cbnz	r6, 801298c <_printf_i+0x1a4>
 8012984:	6823      	ldr	r3, [r4, #0]
 8012986:	f023 0320 	bic.w	r3, r3, #32
 801298a:	6023      	str	r3, [r4, #0]
 801298c:	2310      	movs	r3, #16
 801298e:	e7a7      	b.n	80128e0 <_printf_i+0xf8>
 8012990:	4824      	ldr	r0, [pc, #144]	; (8012a24 <_printf_i+0x23c>)
 8012992:	e7e4      	b.n	801295e <_printf_i+0x176>
 8012994:	4615      	mov	r5, r2
 8012996:	e7bd      	b.n	8012914 <_printf_i+0x12c>
 8012998:	682b      	ldr	r3, [r5, #0]
 801299a:	6826      	ldr	r6, [r4, #0]
 801299c:	6961      	ldr	r1, [r4, #20]
 801299e:	1d18      	adds	r0, r3, #4
 80129a0:	6028      	str	r0, [r5, #0]
 80129a2:	0635      	lsls	r5, r6, #24
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	d501      	bpl.n	80129ac <_printf_i+0x1c4>
 80129a8:	6019      	str	r1, [r3, #0]
 80129aa:	e002      	b.n	80129b2 <_printf_i+0x1ca>
 80129ac:	0670      	lsls	r0, r6, #25
 80129ae:	d5fb      	bpl.n	80129a8 <_printf_i+0x1c0>
 80129b0:	8019      	strh	r1, [r3, #0]
 80129b2:	2300      	movs	r3, #0
 80129b4:	6123      	str	r3, [r4, #16]
 80129b6:	4615      	mov	r5, r2
 80129b8:	e7bc      	b.n	8012934 <_printf_i+0x14c>
 80129ba:	682b      	ldr	r3, [r5, #0]
 80129bc:	1d1a      	adds	r2, r3, #4
 80129be:	602a      	str	r2, [r5, #0]
 80129c0:	681d      	ldr	r5, [r3, #0]
 80129c2:	6862      	ldr	r2, [r4, #4]
 80129c4:	2100      	movs	r1, #0
 80129c6:	4628      	mov	r0, r5
 80129c8:	f7ed fc12 	bl	80001f0 <memchr>
 80129cc:	b108      	cbz	r0, 80129d2 <_printf_i+0x1ea>
 80129ce:	1b40      	subs	r0, r0, r5
 80129d0:	6060      	str	r0, [r4, #4]
 80129d2:	6863      	ldr	r3, [r4, #4]
 80129d4:	6123      	str	r3, [r4, #16]
 80129d6:	2300      	movs	r3, #0
 80129d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129dc:	e7aa      	b.n	8012934 <_printf_i+0x14c>
 80129de:	6923      	ldr	r3, [r4, #16]
 80129e0:	462a      	mov	r2, r5
 80129e2:	4649      	mov	r1, r9
 80129e4:	4640      	mov	r0, r8
 80129e6:	47d0      	blx	sl
 80129e8:	3001      	adds	r0, #1
 80129ea:	d0ad      	beq.n	8012948 <_printf_i+0x160>
 80129ec:	6823      	ldr	r3, [r4, #0]
 80129ee:	079b      	lsls	r3, r3, #30
 80129f0:	d413      	bmi.n	8012a1a <_printf_i+0x232>
 80129f2:	68e0      	ldr	r0, [r4, #12]
 80129f4:	9b03      	ldr	r3, [sp, #12]
 80129f6:	4298      	cmp	r0, r3
 80129f8:	bfb8      	it	lt
 80129fa:	4618      	movlt	r0, r3
 80129fc:	e7a6      	b.n	801294c <_printf_i+0x164>
 80129fe:	2301      	movs	r3, #1
 8012a00:	4632      	mov	r2, r6
 8012a02:	4649      	mov	r1, r9
 8012a04:	4640      	mov	r0, r8
 8012a06:	47d0      	blx	sl
 8012a08:	3001      	adds	r0, #1
 8012a0a:	d09d      	beq.n	8012948 <_printf_i+0x160>
 8012a0c:	3501      	adds	r5, #1
 8012a0e:	68e3      	ldr	r3, [r4, #12]
 8012a10:	9903      	ldr	r1, [sp, #12]
 8012a12:	1a5b      	subs	r3, r3, r1
 8012a14:	42ab      	cmp	r3, r5
 8012a16:	dcf2      	bgt.n	80129fe <_printf_i+0x216>
 8012a18:	e7eb      	b.n	80129f2 <_printf_i+0x20a>
 8012a1a:	2500      	movs	r5, #0
 8012a1c:	f104 0619 	add.w	r6, r4, #25
 8012a20:	e7f5      	b.n	8012a0e <_printf_i+0x226>
 8012a22:	bf00      	nop
 8012a24:	0801692f 	.word	0x0801692f
 8012a28:	08016940 	.word	0x08016940

08012a2c <__sflush_r>:
 8012a2c:	898a      	ldrh	r2, [r1, #12]
 8012a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a32:	4605      	mov	r5, r0
 8012a34:	0710      	lsls	r0, r2, #28
 8012a36:	460c      	mov	r4, r1
 8012a38:	d458      	bmi.n	8012aec <__sflush_r+0xc0>
 8012a3a:	684b      	ldr	r3, [r1, #4]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	dc05      	bgt.n	8012a4c <__sflush_r+0x20>
 8012a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	dc02      	bgt.n	8012a4c <__sflush_r+0x20>
 8012a46:	2000      	movs	r0, #0
 8012a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a4e:	2e00      	cmp	r6, #0
 8012a50:	d0f9      	beq.n	8012a46 <__sflush_r+0x1a>
 8012a52:	2300      	movs	r3, #0
 8012a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a58:	682f      	ldr	r7, [r5, #0]
 8012a5a:	6a21      	ldr	r1, [r4, #32]
 8012a5c:	602b      	str	r3, [r5, #0]
 8012a5e:	d032      	beq.n	8012ac6 <__sflush_r+0x9a>
 8012a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	075a      	lsls	r2, r3, #29
 8012a66:	d505      	bpl.n	8012a74 <__sflush_r+0x48>
 8012a68:	6863      	ldr	r3, [r4, #4]
 8012a6a:	1ac0      	subs	r0, r0, r3
 8012a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a6e:	b10b      	cbz	r3, 8012a74 <__sflush_r+0x48>
 8012a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a72:	1ac0      	subs	r0, r0, r3
 8012a74:	2300      	movs	r3, #0
 8012a76:	4602      	mov	r2, r0
 8012a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a7a:	6a21      	ldr	r1, [r4, #32]
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	47b0      	blx	r6
 8012a80:	1c43      	adds	r3, r0, #1
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	d106      	bne.n	8012a94 <__sflush_r+0x68>
 8012a86:	6829      	ldr	r1, [r5, #0]
 8012a88:	291d      	cmp	r1, #29
 8012a8a:	d82b      	bhi.n	8012ae4 <__sflush_r+0xb8>
 8012a8c:	4a29      	ldr	r2, [pc, #164]	; (8012b34 <__sflush_r+0x108>)
 8012a8e:	410a      	asrs	r2, r1
 8012a90:	07d6      	lsls	r6, r2, #31
 8012a92:	d427      	bmi.n	8012ae4 <__sflush_r+0xb8>
 8012a94:	2200      	movs	r2, #0
 8012a96:	6062      	str	r2, [r4, #4]
 8012a98:	04d9      	lsls	r1, r3, #19
 8012a9a:	6922      	ldr	r2, [r4, #16]
 8012a9c:	6022      	str	r2, [r4, #0]
 8012a9e:	d504      	bpl.n	8012aaa <__sflush_r+0x7e>
 8012aa0:	1c42      	adds	r2, r0, #1
 8012aa2:	d101      	bne.n	8012aa8 <__sflush_r+0x7c>
 8012aa4:	682b      	ldr	r3, [r5, #0]
 8012aa6:	b903      	cbnz	r3, 8012aaa <__sflush_r+0x7e>
 8012aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8012aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aac:	602f      	str	r7, [r5, #0]
 8012aae:	2900      	cmp	r1, #0
 8012ab0:	d0c9      	beq.n	8012a46 <__sflush_r+0x1a>
 8012ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ab6:	4299      	cmp	r1, r3
 8012ab8:	d002      	beq.n	8012ac0 <__sflush_r+0x94>
 8012aba:	4628      	mov	r0, r5
 8012abc:	f001 f99e 	bl	8013dfc <_free_r>
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8012ac4:	e7c0      	b.n	8012a48 <__sflush_r+0x1c>
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	4628      	mov	r0, r5
 8012aca:	47b0      	blx	r6
 8012acc:	1c41      	adds	r1, r0, #1
 8012ace:	d1c8      	bne.n	8012a62 <__sflush_r+0x36>
 8012ad0:	682b      	ldr	r3, [r5, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d0c5      	beq.n	8012a62 <__sflush_r+0x36>
 8012ad6:	2b1d      	cmp	r3, #29
 8012ad8:	d001      	beq.n	8012ade <__sflush_r+0xb2>
 8012ada:	2b16      	cmp	r3, #22
 8012adc:	d101      	bne.n	8012ae2 <__sflush_r+0xb6>
 8012ade:	602f      	str	r7, [r5, #0]
 8012ae0:	e7b1      	b.n	8012a46 <__sflush_r+0x1a>
 8012ae2:	89a3      	ldrh	r3, [r4, #12]
 8012ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ae8:	81a3      	strh	r3, [r4, #12]
 8012aea:	e7ad      	b.n	8012a48 <__sflush_r+0x1c>
 8012aec:	690f      	ldr	r7, [r1, #16]
 8012aee:	2f00      	cmp	r7, #0
 8012af0:	d0a9      	beq.n	8012a46 <__sflush_r+0x1a>
 8012af2:	0793      	lsls	r3, r2, #30
 8012af4:	680e      	ldr	r6, [r1, #0]
 8012af6:	bf08      	it	eq
 8012af8:	694b      	ldreq	r3, [r1, #20]
 8012afa:	600f      	str	r7, [r1, #0]
 8012afc:	bf18      	it	ne
 8012afe:	2300      	movne	r3, #0
 8012b00:	eba6 0807 	sub.w	r8, r6, r7
 8012b04:	608b      	str	r3, [r1, #8]
 8012b06:	f1b8 0f00 	cmp.w	r8, #0
 8012b0a:	dd9c      	ble.n	8012a46 <__sflush_r+0x1a>
 8012b0c:	6a21      	ldr	r1, [r4, #32]
 8012b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b10:	4643      	mov	r3, r8
 8012b12:	463a      	mov	r2, r7
 8012b14:	4628      	mov	r0, r5
 8012b16:	47b0      	blx	r6
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	dc06      	bgt.n	8012b2a <__sflush_r+0xfe>
 8012b1c:	89a3      	ldrh	r3, [r4, #12]
 8012b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b22:	81a3      	strh	r3, [r4, #12]
 8012b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b28:	e78e      	b.n	8012a48 <__sflush_r+0x1c>
 8012b2a:	4407      	add	r7, r0
 8012b2c:	eba8 0800 	sub.w	r8, r8, r0
 8012b30:	e7e9      	b.n	8012b06 <__sflush_r+0xda>
 8012b32:	bf00      	nop
 8012b34:	dfbffffe 	.word	0xdfbffffe

08012b38 <_fflush_r>:
 8012b38:	b538      	push	{r3, r4, r5, lr}
 8012b3a:	690b      	ldr	r3, [r1, #16]
 8012b3c:	4605      	mov	r5, r0
 8012b3e:	460c      	mov	r4, r1
 8012b40:	b913      	cbnz	r3, 8012b48 <_fflush_r+0x10>
 8012b42:	2500      	movs	r5, #0
 8012b44:	4628      	mov	r0, r5
 8012b46:	bd38      	pop	{r3, r4, r5, pc}
 8012b48:	b118      	cbz	r0, 8012b52 <_fflush_r+0x1a>
 8012b4a:	6a03      	ldr	r3, [r0, #32]
 8012b4c:	b90b      	cbnz	r3, 8012b52 <_fflush_r+0x1a>
 8012b4e:	f000 f8bb 	bl	8012cc8 <__sinit>
 8012b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d0f3      	beq.n	8012b42 <_fflush_r+0xa>
 8012b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b5c:	07d0      	lsls	r0, r2, #31
 8012b5e:	d404      	bmi.n	8012b6a <_fflush_r+0x32>
 8012b60:	0599      	lsls	r1, r3, #22
 8012b62:	d402      	bmi.n	8012b6a <_fflush_r+0x32>
 8012b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b66:	f000 fabe 	bl	80130e6 <__retarget_lock_acquire_recursive>
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	f7ff ff5d 	bl	8012a2c <__sflush_r>
 8012b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b74:	07da      	lsls	r2, r3, #31
 8012b76:	4605      	mov	r5, r0
 8012b78:	d4e4      	bmi.n	8012b44 <_fflush_r+0xc>
 8012b7a:	89a3      	ldrh	r3, [r4, #12]
 8012b7c:	059b      	lsls	r3, r3, #22
 8012b7e:	d4e1      	bmi.n	8012b44 <_fflush_r+0xc>
 8012b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b82:	f000 fab1 	bl	80130e8 <__retarget_lock_release_recursive>
 8012b86:	e7dd      	b.n	8012b44 <_fflush_r+0xc>

08012b88 <fflush>:
 8012b88:	4601      	mov	r1, r0
 8012b8a:	b920      	cbnz	r0, 8012b96 <fflush+0xe>
 8012b8c:	4a04      	ldr	r2, [pc, #16]	; (8012ba0 <fflush+0x18>)
 8012b8e:	4905      	ldr	r1, [pc, #20]	; (8012ba4 <fflush+0x1c>)
 8012b90:	4805      	ldr	r0, [pc, #20]	; (8012ba8 <fflush+0x20>)
 8012b92:	f000 b8b1 	b.w	8012cf8 <_fwalk_sglue>
 8012b96:	4b05      	ldr	r3, [pc, #20]	; (8012bac <fflush+0x24>)
 8012b98:	6818      	ldr	r0, [r3, #0]
 8012b9a:	f7ff bfcd 	b.w	8012b38 <_fflush_r>
 8012b9e:	bf00      	nop
 8012ba0:	200003e4 	.word	0x200003e4
 8012ba4:	08012b39 	.word	0x08012b39
 8012ba8:	200003f0 	.word	0x200003f0
 8012bac:	2000043c 	.word	0x2000043c

08012bb0 <std>:
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8012bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bbe:	6083      	str	r3, [r0, #8]
 8012bc0:	8181      	strh	r1, [r0, #12]
 8012bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8012bc4:	81c2      	strh	r2, [r0, #14]
 8012bc6:	6183      	str	r3, [r0, #24]
 8012bc8:	4619      	mov	r1, r3
 8012bca:	2208      	movs	r2, #8
 8012bcc:	305c      	adds	r0, #92	; 0x5c
 8012bce:	f000 f9a3 	bl	8012f18 <memset>
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	; (8012c08 <std+0x58>)
 8012bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8012bd6:	4b0d      	ldr	r3, [pc, #52]	; (8012c0c <std+0x5c>)
 8012bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bda:	4b0d      	ldr	r3, [pc, #52]	; (8012c10 <std+0x60>)
 8012bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bde:	4b0d      	ldr	r3, [pc, #52]	; (8012c14 <std+0x64>)
 8012be0:	6323      	str	r3, [r4, #48]	; 0x30
 8012be2:	4b0d      	ldr	r3, [pc, #52]	; (8012c18 <std+0x68>)
 8012be4:	6224      	str	r4, [r4, #32]
 8012be6:	429c      	cmp	r4, r3
 8012be8:	d006      	beq.n	8012bf8 <std+0x48>
 8012bea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012bee:	4294      	cmp	r4, r2
 8012bf0:	d002      	beq.n	8012bf8 <std+0x48>
 8012bf2:	33d0      	adds	r3, #208	; 0xd0
 8012bf4:	429c      	cmp	r4, r3
 8012bf6:	d105      	bne.n	8012c04 <std+0x54>
 8012bf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c00:	f000 ba70 	b.w	80130e4 <__retarget_lock_init_recursive>
 8012c04:	bd10      	pop	{r4, pc}
 8012c06:	bf00      	nop
 8012c08:	08012d69 	.word	0x08012d69
 8012c0c:	08012d8b 	.word	0x08012d8b
 8012c10:	08012dc3 	.word	0x08012dc3
 8012c14:	08012de7 	.word	0x08012de7
 8012c18:	2000ae4c 	.word	0x2000ae4c

08012c1c <stdio_exit_handler>:
 8012c1c:	4a02      	ldr	r2, [pc, #8]	; (8012c28 <stdio_exit_handler+0xc>)
 8012c1e:	4903      	ldr	r1, [pc, #12]	; (8012c2c <stdio_exit_handler+0x10>)
 8012c20:	4803      	ldr	r0, [pc, #12]	; (8012c30 <stdio_exit_handler+0x14>)
 8012c22:	f000 b869 	b.w	8012cf8 <_fwalk_sglue>
 8012c26:	bf00      	nop
 8012c28:	200003e4 	.word	0x200003e4
 8012c2c:	08012b39 	.word	0x08012b39
 8012c30:	200003f0 	.word	0x200003f0

08012c34 <cleanup_stdio>:
 8012c34:	6841      	ldr	r1, [r0, #4]
 8012c36:	4b0c      	ldr	r3, [pc, #48]	; (8012c68 <cleanup_stdio+0x34>)
 8012c38:	4299      	cmp	r1, r3
 8012c3a:	b510      	push	{r4, lr}
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	d001      	beq.n	8012c44 <cleanup_stdio+0x10>
 8012c40:	f7ff ff7a 	bl	8012b38 <_fflush_r>
 8012c44:	68a1      	ldr	r1, [r4, #8]
 8012c46:	4b09      	ldr	r3, [pc, #36]	; (8012c6c <cleanup_stdio+0x38>)
 8012c48:	4299      	cmp	r1, r3
 8012c4a:	d002      	beq.n	8012c52 <cleanup_stdio+0x1e>
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f7ff ff73 	bl	8012b38 <_fflush_r>
 8012c52:	68e1      	ldr	r1, [r4, #12]
 8012c54:	4b06      	ldr	r3, [pc, #24]	; (8012c70 <cleanup_stdio+0x3c>)
 8012c56:	4299      	cmp	r1, r3
 8012c58:	d004      	beq.n	8012c64 <cleanup_stdio+0x30>
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c60:	f7ff bf6a 	b.w	8012b38 <_fflush_r>
 8012c64:	bd10      	pop	{r4, pc}
 8012c66:	bf00      	nop
 8012c68:	2000ae4c 	.word	0x2000ae4c
 8012c6c:	2000aeb4 	.word	0x2000aeb4
 8012c70:	2000af1c 	.word	0x2000af1c

08012c74 <global_stdio_init.part.0>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	4b0b      	ldr	r3, [pc, #44]	; (8012ca4 <global_stdio_init.part.0+0x30>)
 8012c78:	4c0b      	ldr	r4, [pc, #44]	; (8012ca8 <global_stdio_init.part.0+0x34>)
 8012c7a:	4a0c      	ldr	r2, [pc, #48]	; (8012cac <global_stdio_init.part.0+0x38>)
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	4620      	mov	r0, r4
 8012c80:	2200      	movs	r2, #0
 8012c82:	2104      	movs	r1, #4
 8012c84:	f7ff ff94 	bl	8012bb0 <std>
 8012c88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	2109      	movs	r1, #9
 8012c90:	f7ff ff8e 	bl	8012bb0 <std>
 8012c94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012c98:	2202      	movs	r2, #2
 8012c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c9e:	2112      	movs	r1, #18
 8012ca0:	f7ff bf86 	b.w	8012bb0 <std>
 8012ca4:	2000af84 	.word	0x2000af84
 8012ca8:	2000ae4c 	.word	0x2000ae4c
 8012cac:	08012c1d 	.word	0x08012c1d

08012cb0 <__sfp_lock_acquire>:
 8012cb0:	4801      	ldr	r0, [pc, #4]	; (8012cb8 <__sfp_lock_acquire+0x8>)
 8012cb2:	f000 ba18 	b.w	80130e6 <__retarget_lock_acquire_recursive>
 8012cb6:	bf00      	nop
 8012cb8:	2000af8d 	.word	0x2000af8d

08012cbc <__sfp_lock_release>:
 8012cbc:	4801      	ldr	r0, [pc, #4]	; (8012cc4 <__sfp_lock_release+0x8>)
 8012cbe:	f000 ba13 	b.w	80130e8 <__retarget_lock_release_recursive>
 8012cc2:	bf00      	nop
 8012cc4:	2000af8d 	.word	0x2000af8d

08012cc8 <__sinit>:
 8012cc8:	b510      	push	{r4, lr}
 8012cca:	4604      	mov	r4, r0
 8012ccc:	f7ff fff0 	bl	8012cb0 <__sfp_lock_acquire>
 8012cd0:	6a23      	ldr	r3, [r4, #32]
 8012cd2:	b11b      	cbz	r3, 8012cdc <__sinit+0x14>
 8012cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cd8:	f7ff bff0 	b.w	8012cbc <__sfp_lock_release>
 8012cdc:	4b04      	ldr	r3, [pc, #16]	; (8012cf0 <__sinit+0x28>)
 8012cde:	6223      	str	r3, [r4, #32]
 8012ce0:	4b04      	ldr	r3, [pc, #16]	; (8012cf4 <__sinit+0x2c>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d1f5      	bne.n	8012cd4 <__sinit+0xc>
 8012ce8:	f7ff ffc4 	bl	8012c74 <global_stdio_init.part.0>
 8012cec:	e7f2      	b.n	8012cd4 <__sinit+0xc>
 8012cee:	bf00      	nop
 8012cf0:	08012c35 	.word	0x08012c35
 8012cf4:	2000af84 	.word	0x2000af84

08012cf8 <_fwalk_sglue>:
 8012cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cfc:	4607      	mov	r7, r0
 8012cfe:	4688      	mov	r8, r1
 8012d00:	4614      	mov	r4, r2
 8012d02:	2600      	movs	r6, #0
 8012d04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d08:	f1b9 0901 	subs.w	r9, r9, #1
 8012d0c:	d505      	bpl.n	8012d1a <_fwalk_sglue+0x22>
 8012d0e:	6824      	ldr	r4, [r4, #0]
 8012d10:	2c00      	cmp	r4, #0
 8012d12:	d1f7      	bne.n	8012d04 <_fwalk_sglue+0xc>
 8012d14:	4630      	mov	r0, r6
 8012d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d1a:	89ab      	ldrh	r3, [r5, #12]
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d907      	bls.n	8012d30 <_fwalk_sglue+0x38>
 8012d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d24:	3301      	adds	r3, #1
 8012d26:	d003      	beq.n	8012d30 <_fwalk_sglue+0x38>
 8012d28:	4629      	mov	r1, r5
 8012d2a:	4638      	mov	r0, r7
 8012d2c:	47c0      	blx	r8
 8012d2e:	4306      	orrs	r6, r0
 8012d30:	3568      	adds	r5, #104	; 0x68
 8012d32:	e7e9      	b.n	8012d08 <_fwalk_sglue+0x10>

08012d34 <iprintf>:
 8012d34:	b40f      	push	{r0, r1, r2, r3}
 8012d36:	b507      	push	{r0, r1, r2, lr}
 8012d38:	4906      	ldr	r1, [pc, #24]	; (8012d54 <iprintf+0x20>)
 8012d3a:	ab04      	add	r3, sp, #16
 8012d3c:	6808      	ldr	r0, [r1, #0]
 8012d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d42:	6881      	ldr	r1, [r0, #8]
 8012d44:	9301      	str	r3, [sp, #4]
 8012d46:	f001 fcff 	bl	8014748 <_vfiprintf_r>
 8012d4a:	b003      	add	sp, #12
 8012d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d50:	b004      	add	sp, #16
 8012d52:	4770      	bx	lr
 8012d54:	2000043c 	.word	0x2000043c

08012d58 <putchar>:
 8012d58:	4b02      	ldr	r3, [pc, #8]	; (8012d64 <putchar+0xc>)
 8012d5a:	4601      	mov	r1, r0
 8012d5c:	6818      	ldr	r0, [r3, #0]
 8012d5e:	6882      	ldr	r2, [r0, #8]
 8012d60:	f001 be6e 	b.w	8014a40 <_putc_r>
 8012d64:	2000043c 	.word	0x2000043c

08012d68 <__sread>:
 8012d68:	b510      	push	{r4, lr}
 8012d6a:	460c      	mov	r4, r1
 8012d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d70:	f000 f96a 	bl	8013048 <_read_r>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	bfab      	itete	ge
 8012d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8012d7c:	181b      	addge	r3, r3, r0
 8012d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d82:	bfac      	ite	ge
 8012d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d86:	81a3      	strhlt	r3, [r4, #12]
 8012d88:	bd10      	pop	{r4, pc}

08012d8a <__swrite>:
 8012d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8e:	461f      	mov	r7, r3
 8012d90:	898b      	ldrh	r3, [r1, #12]
 8012d92:	05db      	lsls	r3, r3, #23
 8012d94:	4605      	mov	r5, r0
 8012d96:	460c      	mov	r4, r1
 8012d98:	4616      	mov	r6, r2
 8012d9a:	d505      	bpl.n	8012da8 <__swrite+0x1e>
 8012d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012da0:	2302      	movs	r3, #2
 8012da2:	2200      	movs	r2, #0
 8012da4:	f000 f93e 	bl	8013024 <_lseek_r>
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	4632      	mov	r2, r6
 8012db6:	463b      	mov	r3, r7
 8012db8:	4628      	mov	r0, r5
 8012dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbe:	f000 b955 	b.w	801306c <_write_r>

08012dc2 <__sseek>:
 8012dc2:	b510      	push	{r4, lr}
 8012dc4:	460c      	mov	r4, r1
 8012dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dca:	f000 f92b 	bl	8013024 <_lseek_r>
 8012dce:	1c43      	adds	r3, r0, #1
 8012dd0:	89a3      	ldrh	r3, [r4, #12]
 8012dd2:	bf15      	itete	ne
 8012dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012dde:	81a3      	strheq	r3, [r4, #12]
 8012de0:	bf18      	it	ne
 8012de2:	81a3      	strhne	r3, [r4, #12]
 8012de4:	bd10      	pop	{r4, pc}

08012de6 <__sclose>:
 8012de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dea:	f000 b8b5 	b.w	8012f58 <_close_r>

08012dee <__swbuf_r>:
 8012dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df0:	460e      	mov	r6, r1
 8012df2:	4614      	mov	r4, r2
 8012df4:	4605      	mov	r5, r0
 8012df6:	b118      	cbz	r0, 8012e00 <__swbuf_r+0x12>
 8012df8:	6a03      	ldr	r3, [r0, #32]
 8012dfa:	b90b      	cbnz	r3, 8012e00 <__swbuf_r+0x12>
 8012dfc:	f7ff ff64 	bl	8012cc8 <__sinit>
 8012e00:	69a3      	ldr	r3, [r4, #24]
 8012e02:	60a3      	str	r3, [r4, #8]
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	071a      	lsls	r2, r3, #28
 8012e08:	d525      	bpl.n	8012e56 <__swbuf_r+0x68>
 8012e0a:	6923      	ldr	r3, [r4, #16]
 8012e0c:	b31b      	cbz	r3, 8012e56 <__swbuf_r+0x68>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	6922      	ldr	r2, [r4, #16]
 8012e12:	1a98      	subs	r0, r3, r2
 8012e14:	6963      	ldr	r3, [r4, #20]
 8012e16:	b2f6      	uxtb	r6, r6
 8012e18:	4283      	cmp	r3, r0
 8012e1a:	4637      	mov	r7, r6
 8012e1c:	dc04      	bgt.n	8012e28 <__swbuf_r+0x3a>
 8012e1e:	4621      	mov	r1, r4
 8012e20:	4628      	mov	r0, r5
 8012e22:	f7ff fe89 	bl	8012b38 <_fflush_r>
 8012e26:	b9e0      	cbnz	r0, 8012e62 <__swbuf_r+0x74>
 8012e28:	68a3      	ldr	r3, [r4, #8]
 8012e2a:	3b01      	subs	r3, #1
 8012e2c:	60a3      	str	r3, [r4, #8]
 8012e2e:	6823      	ldr	r3, [r4, #0]
 8012e30:	1c5a      	adds	r2, r3, #1
 8012e32:	6022      	str	r2, [r4, #0]
 8012e34:	701e      	strb	r6, [r3, #0]
 8012e36:	6962      	ldr	r2, [r4, #20]
 8012e38:	1c43      	adds	r3, r0, #1
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d004      	beq.n	8012e48 <__swbuf_r+0x5a>
 8012e3e:	89a3      	ldrh	r3, [r4, #12]
 8012e40:	07db      	lsls	r3, r3, #31
 8012e42:	d506      	bpl.n	8012e52 <__swbuf_r+0x64>
 8012e44:	2e0a      	cmp	r6, #10
 8012e46:	d104      	bne.n	8012e52 <__swbuf_r+0x64>
 8012e48:	4621      	mov	r1, r4
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	f7ff fe74 	bl	8012b38 <_fflush_r>
 8012e50:	b938      	cbnz	r0, 8012e62 <__swbuf_r+0x74>
 8012e52:	4638      	mov	r0, r7
 8012e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e56:	4621      	mov	r1, r4
 8012e58:	4628      	mov	r0, r5
 8012e5a:	f000 f805 	bl	8012e68 <__swsetup_r>
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	d0d5      	beq.n	8012e0e <__swbuf_r+0x20>
 8012e62:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012e66:	e7f4      	b.n	8012e52 <__swbuf_r+0x64>

08012e68 <__swsetup_r>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	4b2a      	ldr	r3, [pc, #168]	; (8012f14 <__swsetup_r+0xac>)
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	6818      	ldr	r0, [r3, #0]
 8012e70:	460c      	mov	r4, r1
 8012e72:	b118      	cbz	r0, 8012e7c <__swsetup_r+0x14>
 8012e74:	6a03      	ldr	r3, [r0, #32]
 8012e76:	b90b      	cbnz	r3, 8012e7c <__swsetup_r+0x14>
 8012e78:	f7ff ff26 	bl	8012cc8 <__sinit>
 8012e7c:	89a3      	ldrh	r3, [r4, #12]
 8012e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e82:	0718      	lsls	r0, r3, #28
 8012e84:	d422      	bmi.n	8012ecc <__swsetup_r+0x64>
 8012e86:	06d9      	lsls	r1, r3, #27
 8012e88:	d407      	bmi.n	8012e9a <__swsetup_r+0x32>
 8012e8a:	2309      	movs	r3, #9
 8012e8c:	602b      	str	r3, [r5, #0]
 8012e8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e92:	81a3      	strh	r3, [r4, #12]
 8012e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e98:	e034      	b.n	8012f04 <__swsetup_r+0x9c>
 8012e9a:	0758      	lsls	r0, r3, #29
 8012e9c:	d512      	bpl.n	8012ec4 <__swsetup_r+0x5c>
 8012e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ea0:	b141      	cbz	r1, 8012eb4 <__swsetup_r+0x4c>
 8012ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ea6:	4299      	cmp	r1, r3
 8012ea8:	d002      	beq.n	8012eb0 <__swsetup_r+0x48>
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f000 ffa6 	bl	8013dfc <_free_r>
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	6363      	str	r3, [r4, #52]	; 0x34
 8012eb4:	89a3      	ldrh	r3, [r4, #12]
 8012eb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012eba:	81a3      	strh	r3, [r4, #12]
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	6063      	str	r3, [r4, #4]
 8012ec0:	6923      	ldr	r3, [r4, #16]
 8012ec2:	6023      	str	r3, [r4, #0]
 8012ec4:	89a3      	ldrh	r3, [r4, #12]
 8012ec6:	f043 0308 	orr.w	r3, r3, #8
 8012eca:	81a3      	strh	r3, [r4, #12]
 8012ecc:	6923      	ldr	r3, [r4, #16]
 8012ece:	b94b      	cbnz	r3, 8012ee4 <__swsetup_r+0x7c>
 8012ed0:	89a3      	ldrh	r3, [r4, #12]
 8012ed2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012eda:	d003      	beq.n	8012ee4 <__swsetup_r+0x7c>
 8012edc:	4621      	mov	r1, r4
 8012ede:	4628      	mov	r0, r5
 8012ee0:	f001 fd72 	bl	80149c8 <__smakebuf_r>
 8012ee4:	89a0      	ldrh	r0, [r4, #12]
 8012ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012eea:	f010 0301 	ands.w	r3, r0, #1
 8012eee:	d00a      	beq.n	8012f06 <__swsetup_r+0x9e>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60a3      	str	r3, [r4, #8]
 8012ef4:	6963      	ldr	r3, [r4, #20]
 8012ef6:	425b      	negs	r3, r3
 8012ef8:	61a3      	str	r3, [r4, #24]
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	b943      	cbnz	r3, 8012f10 <__swsetup_r+0xa8>
 8012efe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f02:	d1c4      	bne.n	8012e8e <__swsetup_r+0x26>
 8012f04:	bd38      	pop	{r3, r4, r5, pc}
 8012f06:	0781      	lsls	r1, r0, #30
 8012f08:	bf58      	it	pl
 8012f0a:	6963      	ldrpl	r3, [r4, #20]
 8012f0c:	60a3      	str	r3, [r4, #8]
 8012f0e:	e7f4      	b.n	8012efa <__swsetup_r+0x92>
 8012f10:	2000      	movs	r0, #0
 8012f12:	e7f7      	b.n	8012f04 <__swsetup_r+0x9c>
 8012f14:	2000043c 	.word	0x2000043c

08012f18 <memset>:
 8012f18:	4402      	add	r2, r0
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d100      	bne.n	8012f22 <memset+0xa>
 8012f20:	4770      	bx	lr
 8012f22:	f803 1b01 	strb.w	r1, [r3], #1
 8012f26:	e7f9      	b.n	8012f1c <memset+0x4>

08012f28 <strncpy>:
 8012f28:	b510      	push	{r4, lr}
 8012f2a:	3901      	subs	r1, #1
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	b132      	cbz	r2, 8012f3e <strncpy+0x16>
 8012f30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f34:	f803 4b01 	strb.w	r4, [r3], #1
 8012f38:	3a01      	subs	r2, #1
 8012f3a:	2c00      	cmp	r4, #0
 8012f3c:	d1f7      	bne.n	8012f2e <strncpy+0x6>
 8012f3e:	441a      	add	r2, r3
 8012f40:	2100      	movs	r1, #0
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d100      	bne.n	8012f48 <strncpy+0x20>
 8012f46:	bd10      	pop	{r4, pc}
 8012f48:	f803 1b01 	strb.w	r1, [r3], #1
 8012f4c:	e7f9      	b.n	8012f42 <strncpy+0x1a>
	...

08012f50 <_localeconv_r>:
 8012f50:	4800      	ldr	r0, [pc, #0]	; (8012f54 <_localeconv_r+0x4>)
 8012f52:	4770      	bx	lr
 8012f54:	20000530 	.word	0x20000530

08012f58 <_close_r>:
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	4d06      	ldr	r5, [pc, #24]	; (8012f74 <_close_r+0x1c>)
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4604      	mov	r4, r0
 8012f60:	4608      	mov	r0, r1
 8012f62:	602b      	str	r3, [r5, #0]
 8012f64:	f7f2 f827 	bl	8004fb6 <_close>
 8012f68:	1c43      	adds	r3, r0, #1
 8012f6a:	d102      	bne.n	8012f72 <_close_r+0x1a>
 8012f6c:	682b      	ldr	r3, [r5, #0]
 8012f6e:	b103      	cbz	r3, 8012f72 <_close_r+0x1a>
 8012f70:	6023      	str	r3, [r4, #0]
 8012f72:	bd38      	pop	{r3, r4, r5, pc}
 8012f74:	2000af88 	.word	0x2000af88

08012f78 <_reclaim_reent>:
 8012f78:	4b29      	ldr	r3, [pc, #164]	; (8013020 <_reclaim_reent+0xa8>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4283      	cmp	r3, r0
 8012f7e:	b570      	push	{r4, r5, r6, lr}
 8012f80:	4604      	mov	r4, r0
 8012f82:	d04b      	beq.n	801301c <_reclaim_reent+0xa4>
 8012f84:	69c3      	ldr	r3, [r0, #28]
 8012f86:	b143      	cbz	r3, 8012f9a <_reclaim_reent+0x22>
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d144      	bne.n	8013018 <_reclaim_reent+0xa0>
 8012f8e:	69e3      	ldr	r3, [r4, #28]
 8012f90:	6819      	ldr	r1, [r3, #0]
 8012f92:	b111      	cbz	r1, 8012f9a <_reclaim_reent+0x22>
 8012f94:	4620      	mov	r0, r4
 8012f96:	f000 ff31 	bl	8013dfc <_free_r>
 8012f9a:	6961      	ldr	r1, [r4, #20]
 8012f9c:	b111      	cbz	r1, 8012fa4 <_reclaim_reent+0x2c>
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f000 ff2c 	bl	8013dfc <_free_r>
 8012fa4:	69e1      	ldr	r1, [r4, #28]
 8012fa6:	b111      	cbz	r1, 8012fae <_reclaim_reent+0x36>
 8012fa8:	4620      	mov	r0, r4
 8012faa:	f000 ff27 	bl	8013dfc <_free_r>
 8012fae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012fb0:	b111      	cbz	r1, 8012fb8 <_reclaim_reent+0x40>
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f000 ff22 	bl	8013dfc <_free_r>
 8012fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fba:	b111      	cbz	r1, 8012fc2 <_reclaim_reent+0x4a>
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f000 ff1d 	bl	8013dfc <_free_r>
 8012fc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012fc4:	b111      	cbz	r1, 8012fcc <_reclaim_reent+0x54>
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	f000 ff18 	bl	8013dfc <_free_r>
 8012fcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012fce:	b111      	cbz	r1, 8012fd6 <_reclaim_reent+0x5e>
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f000 ff13 	bl	8013dfc <_free_r>
 8012fd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012fd8:	b111      	cbz	r1, 8012fe0 <_reclaim_reent+0x68>
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f000 ff0e 	bl	8013dfc <_free_r>
 8012fe0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012fe2:	b111      	cbz	r1, 8012fea <_reclaim_reent+0x72>
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f000 ff09 	bl	8013dfc <_free_r>
 8012fea:	6a23      	ldr	r3, [r4, #32]
 8012fec:	b1b3      	cbz	r3, 801301c <_reclaim_reent+0xa4>
 8012fee:	4620      	mov	r0, r4
 8012ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ff4:	4718      	bx	r3
 8012ff6:	5949      	ldr	r1, [r1, r5]
 8012ff8:	b941      	cbnz	r1, 801300c <_reclaim_reent+0x94>
 8012ffa:	3504      	adds	r5, #4
 8012ffc:	69e3      	ldr	r3, [r4, #28]
 8012ffe:	2d80      	cmp	r5, #128	; 0x80
 8013000:	68d9      	ldr	r1, [r3, #12]
 8013002:	d1f8      	bne.n	8012ff6 <_reclaim_reent+0x7e>
 8013004:	4620      	mov	r0, r4
 8013006:	f000 fef9 	bl	8013dfc <_free_r>
 801300a:	e7c0      	b.n	8012f8e <_reclaim_reent+0x16>
 801300c:	680e      	ldr	r6, [r1, #0]
 801300e:	4620      	mov	r0, r4
 8013010:	f000 fef4 	bl	8013dfc <_free_r>
 8013014:	4631      	mov	r1, r6
 8013016:	e7ef      	b.n	8012ff8 <_reclaim_reent+0x80>
 8013018:	2500      	movs	r5, #0
 801301a:	e7ef      	b.n	8012ffc <_reclaim_reent+0x84>
 801301c:	bd70      	pop	{r4, r5, r6, pc}
 801301e:	bf00      	nop
 8013020:	2000043c 	.word	0x2000043c

08013024 <_lseek_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4d07      	ldr	r5, [pc, #28]	; (8013044 <_lseek_r+0x20>)
 8013028:	4604      	mov	r4, r0
 801302a:	4608      	mov	r0, r1
 801302c:	4611      	mov	r1, r2
 801302e:	2200      	movs	r2, #0
 8013030:	602a      	str	r2, [r5, #0]
 8013032:	461a      	mov	r2, r3
 8013034:	f7f1 ffe6 	bl	8005004 <_lseek>
 8013038:	1c43      	adds	r3, r0, #1
 801303a:	d102      	bne.n	8013042 <_lseek_r+0x1e>
 801303c:	682b      	ldr	r3, [r5, #0]
 801303e:	b103      	cbz	r3, 8013042 <_lseek_r+0x1e>
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	bd38      	pop	{r3, r4, r5, pc}
 8013044:	2000af88 	.word	0x2000af88

08013048 <_read_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4d07      	ldr	r5, [pc, #28]	; (8013068 <_read_r+0x20>)
 801304c:	4604      	mov	r4, r0
 801304e:	4608      	mov	r0, r1
 8013050:	4611      	mov	r1, r2
 8013052:	2200      	movs	r2, #0
 8013054:	602a      	str	r2, [r5, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	f7f1 ff74 	bl	8004f44 <_read>
 801305c:	1c43      	adds	r3, r0, #1
 801305e:	d102      	bne.n	8013066 <_read_r+0x1e>
 8013060:	682b      	ldr	r3, [r5, #0]
 8013062:	b103      	cbz	r3, 8013066 <_read_r+0x1e>
 8013064:	6023      	str	r3, [r4, #0]
 8013066:	bd38      	pop	{r3, r4, r5, pc}
 8013068:	2000af88 	.word	0x2000af88

0801306c <_write_r>:
 801306c:	b538      	push	{r3, r4, r5, lr}
 801306e:	4d07      	ldr	r5, [pc, #28]	; (801308c <_write_r+0x20>)
 8013070:	4604      	mov	r4, r0
 8013072:	4608      	mov	r0, r1
 8013074:	4611      	mov	r1, r2
 8013076:	2200      	movs	r2, #0
 8013078:	602a      	str	r2, [r5, #0]
 801307a:	461a      	mov	r2, r3
 801307c:	f7f1 ff7f 	bl	8004f7e <_write>
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	d102      	bne.n	801308a <_write_r+0x1e>
 8013084:	682b      	ldr	r3, [r5, #0]
 8013086:	b103      	cbz	r3, 801308a <_write_r+0x1e>
 8013088:	6023      	str	r3, [r4, #0]
 801308a:	bd38      	pop	{r3, r4, r5, pc}
 801308c:	2000af88 	.word	0x2000af88

08013090 <__errno>:
 8013090:	4b01      	ldr	r3, [pc, #4]	; (8013098 <__errno+0x8>)
 8013092:	6818      	ldr	r0, [r3, #0]
 8013094:	4770      	bx	lr
 8013096:	bf00      	nop
 8013098:	2000043c 	.word	0x2000043c

0801309c <__libc_init_array>:
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	4d0d      	ldr	r5, [pc, #52]	; (80130d4 <__libc_init_array+0x38>)
 80130a0:	4c0d      	ldr	r4, [pc, #52]	; (80130d8 <__libc_init_array+0x3c>)
 80130a2:	1b64      	subs	r4, r4, r5
 80130a4:	10a4      	asrs	r4, r4, #2
 80130a6:	2600      	movs	r6, #0
 80130a8:	42a6      	cmp	r6, r4
 80130aa:	d109      	bne.n	80130c0 <__libc_init_array+0x24>
 80130ac:	4d0b      	ldr	r5, [pc, #44]	; (80130dc <__libc_init_array+0x40>)
 80130ae:	4c0c      	ldr	r4, [pc, #48]	; (80130e0 <__libc_init_array+0x44>)
 80130b0:	f001 fdde 	bl	8014c70 <_init>
 80130b4:	1b64      	subs	r4, r4, r5
 80130b6:	10a4      	asrs	r4, r4, #2
 80130b8:	2600      	movs	r6, #0
 80130ba:	42a6      	cmp	r6, r4
 80130bc:	d105      	bne.n	80130ca <__libc_init_array+0x2e>
 80130be:	bd70      	pop	{r4, r5, r6, pc}
 80130c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c4:	4798      	blx	r3
 80130c6:	3601      	adds	r6, #1
 80130c8:	e7ee      	b.n	80130a8 <__libc_init_array+0xc>
 80130ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ce:	4798      	blx	r3
 80130d0:	3601      	adds	r6, #1
 80130d2:	e7f2      	b.n	80130ba <__libc_init_array+0x1e>
 80130d4:	08016b94 	.word	0x08016b94
 80130d8:	08016b94 	.word	0x08016b94
 80130dc:	08016b94 	.word	0x08016b94
 80130e0:	08016b98 	.word	0x08016b98

080130e4 <__retarget_lock_init_recursive>:
 80130e4:	4770      	bx	lr

080130e6 <__retarget_lock_acquire_recursive>:
 80130e6:	4770      	bx	lr

080130e8 <__retarget_lock_release_recursive>:
 80130e8:	4770      	bx	lr

080130ea <memcpy>:
 80130ea:	440a      	add	r2, r1
 80130ec:	4291      	cmp	r1, r2
 80130ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80130f2:	d100      	bne.n	80130f6 <memcpy+0xc>
 80130f4:	4770      	bx	lr
 80130f6:	b510      	push	{r4, lr}
 80130f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013100:	4291      	cmp	r1, r2
 8013102:	d1f9      	bne.n	80130f8 <memcpy+0xe>
 8013104:	bd10      	pop	{r4, pc}

08013106 <quorem>:
 8013106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310a:	6903      	ldr	r3, [r0, #16]
 801310c:	690c      	ldr	r4, [r1, #16]
 801310e:	42a3      	cmp	r3, r4
 8013110:	4607      	mov	r7, r0
 8013112:	db7e      	blt.n	8013212 <quorem+0x10c>
 8013114:	3c01      	subs	r4, #1
 8013116:	f101 0814 	add.w	r8, r1, #20
 801311a:	f100 0514 	add.w	r5, r0, #20
 801311e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013122:	9301      	str	r3, [sp, #4]
 8013124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801312c:	3301      	adds	r3, #1
 801312e:	429a      	cmp	r2, r3
 8013130:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013138:	fbb2 f6f3 	udiv	r6, r2, r3
 801313c:	d331      	bcc.n	80131a2 <quorem+0x9c>
 801313e:	f04f 0e00 	mov.w	lr, #0
 8013142:	4640      	mov	r0, r8
 8013144:	46ac      	mov	ip, r5
 8013146:	46f2      	mov	sl, lr
 8013148:	f850 2b04 	ldr.w	r2, [r0], #4
 801314c:	b293      	uxth	r3, r2
 801314e:	fb06 e303 	mla	r3, r6, r3, lr
 8013152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013156:	0c1a      	lsrs	r2, r3, #16
 8013158:	b29b      	uxth	r3, r3
 801315a:	ebaa 0303 	sub.w	r3, sl, r3
 801315e:	f8dc a000 	ldr.w	sl, [ip]
 8013162:	fa13 f38a 	uxtah	r3, r3, sl
 8013166:	fb06 220e 	mla	r2, r6, lr, r2
 801316a:	9300      	str	r3, [sp, #0]
 801316c:	9b00      	ldr	r3, [sp, #0]
 801316e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013172:	b292      	uxth	r2, r2
 8013174:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801317c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013180:	4581      	cmp	r9, r0
 8013182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013186:	f84c 3b04 	str.w	r3, [ip], #4
 801318a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801318e:	d2db      	bcs.n	8013148 <quorem+0x42>
 8013190:	f855 300b 	ldr.w	r3, [r5, fp]
 8013194:	b92b      	cbnz	r3, 80131a2 <quorem+0x9c>
 8013196:	9b01      	ldr	r3, [sp, #4]
 8013198:	3b04      	subs	r3, #4
 801319a:	429d      	cmp	r5, r3
 801319c:	461a      	mov	r2, r3
 801319e:	d32c      	bcc.n	80131fa <quorem+0xf4>
 80131a0:	613c      	str	r4, [r7, #16]
 80131a2:	4638      	mov	r0, r7
 80131a4:	f001 f9a6 	bl	80144f4 <__mcmp>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	db22      	blt.n	80131f2 <quorem+0xec>
 80131ac:	3601      	adds	r6, #1
 80131ae:	4629      	mov	r1, r5
 80131b0:	2000      	movs	r0, #0
 80131b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80131b6:	f8d1 c000 	ldr.w	ip, [r1]
 80131ba:	b293      	uxth	r3, r2
 80131bc:	1ac3      	subs	r3, r0, r3
 80131be:	0c12      	lsrs	r2, r2, #16
 80131c0:	fa13 f38c 	uxtah	r3, r3, ip
 80131c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80131c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131d2:	45c1      	cmp	r9, r8
 80131d4:	f841 3b04 	str.w	r3, [r1], #4
 80131d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80131dc:	d2e9      	bcs.n	80131b2 <quorem+0xac>
 80131de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131e6:	b922      	cbnz	r2, 80131f2 <quorem+0xec>
 80131e8:	3b04      	subs	r3, #4
 80131ea:	429d      	cmp	r5, r3
 80131ec:	461a      	mov	r2, r3
 80131ee:	d30a      	bcc.n	8013206 <quorem+0x100>
 80131f0:	613c      	str	r4, [r7, #16]
 80131f2:	4630      	mov	r0, r6
 80131f4:	b003      	add	sp, #12
 80131f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fa:	6812      	ldr	r2, [r2, #0]
 80131fc:	3b04      	subs	r3, #4
 80131fe:	2a00      	cmp	r2, #0
 8013200:	d1ce      	bne.n	80131a0 <quorem+0x9a>
 8013202:	3c01      	subs	r4, #1
 8013204:	e7c9      	b.n	801319a <quorem+0x94>
 8013206:	6812      	ldr	r2, [r2, #0]
 8013208:	3b04      	subs	r3, #4
 801320a:	2a00      	cmp	r2, #0
 801320c:	d1f0      	bne.n	80131f0 <quorem+0xea>
 801320e:	3c01      	subs	r4, #1
 8013210:	e7eb      	b.n	80131ea <quorem+0xe4>
 8013212:	2000      	movs	r0, #0
 8013214:	e7ee      	b.n	80131f4 <quorem+0xee>
	...

08013218 <_dtoa_r>:
 8013218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801321c:	ed2d 8b04 	vpush	{d8-d9}
 8013220:	69c5      	ldr	r5, [r0, #28]
 8013222:	b093      	sub	sp, #76	; 0x4c
 8013224:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013228:	ec57 6b10 	vmov	r6, r7, d0
 801322c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013230:	9107      	str	r1, [sp, #28]
 8013232:	4604      	mov	r4, r0
 8013234:	920a      	str	r2, [sp, #40]	; 0x28
 8013236:	930d      	str	r3, [sp, #52]	; 0x34
 8013238:	b975      	cbnz	r5, 8013258 <_dtoa_r+0x40>
 801323a:	2010      	movs	r0, #16
 801323c:	f000 fe2a 	bl	8013e94 <malloc>
 8013240:	4602      	mov	r2, r0
 8013242:	61e0      	str	r0, [r4, #28]
 8013244:	b920      	cbnz	r0, 8013250 <_dtoa_r+0x38>
 8013246:	4bae      	ldr	r3, [pc, #696]	; (8013500 <_dtoa_r+0x2e8>)
 8013248:	21ef      	movs	r1, #239	; 0xef
 801324a:	48ae      	ldr	r0, [pc, #696]	; (8013504 <_dtoa_r+0x2ec>)
 801324c:	f001 fc5e 	bl	8014b0c <__assert_func>
 8013250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013254:	6005      	str	r5, [r0, #0]
 8013256:	60c5      	str	r5, [r0, #12]
 8013258:	69e3      	ldr	r3, [r4, #28]
 801325a:	6819      	ldr	r1, [r3, #0]
 801325c:	b151      	cbz	r1, 8013274 <_dtoa_r+0x5c>
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	604a      	str	r2, [r1, #4]
 8013262:	2301      	movs	r3, #1
 8013264:	4093      	lsls	r3, r2
 8013266:	608b      	str	r3, [r1, #8]
 8013268:	4620      	mov	r0, r4
 801326a:	f000 ff07 	bl	801407c <_Bfree>
 801326e:	69e3      	ldr	r3, [r4, #28]
 8013270:	2200      	movs	r2, #0
 8013272:	601a      	str	r2, [r3, #0]
 8013274:	1e3b      	subs	r3, r7, #0
 8013276:	bfbb      	ittet	lt
 8013278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801327c:	9303      	strlt	r3, [sp, #12]
 801327e:	2300      	movge	r3, #0
 8013280:	2201      	movlt	r2, #1
 8013282:	bfac      	ite	ge
 8013284:	f8c8 3000 	strge.w	r3, [r8]
 8013288:	f8c8 2000 	strlt.w	r2, [r8]
 801328c:	4b9e      	ldr	r3, [pc, #632]	; (8013508 <_dtoa_r+0x2f0>)
 801328e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013292:	ea33 0308 	bics.w	r3, r3, r8
 8013296:	d11b      	bne.n	80132d0 <_dtoa_r+0xb8>
 8013298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801329a:	f242 730f 	movw	r3, #9999	; 0x270f
 801329e:	6013      	str	r3, [r2, #0]
 80132a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80132a4:	4333      	orrs	r3, r6
 80132a6:	f000 8593 	beq.w	8013dd0 <_dtoa_r+0xbb8>
 80132aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132ac:	b963      	cbnz	r3, 80132c8 <_dtoa_r+0xb0>
 80132ae:	4b97      	ldr	r3, [pc, #604]	; (801350c <_dtoa_r+0x2f4>)
 80132b0:	e027      	b.n	8013302 <_dtoa_r+0xea>
 80132b2:	4b97      	ldr	r3, [pc, #604]	; (8013510 <_dtoa_r+0x2f8>)
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	3308      	adds	r3, #8
 80132b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132ba:	6013      	str	r3, [r2, #0]
 80132bc:	9800      	ldr	r0, [sp, #0]
 80132be:	b013      	add	sp, #76	; 0x4c
 80132c0:	ecbd 8b04 	vpop	{d8-d9}
 80132c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c8:	4b90      	ldr	r3, [pc, #576]	; (801350c <_dtoa_r+0x2f4>)
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	3303      	adds	r3, #3
 80132ce:	e7f3      	b.n	80132b8 <_dtoa_r+0xa0>
 80132d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132d4:	2200      	movs	r2, #0
 80132d6:	ec51 0b17 	vmov	r0, r1, d7
 80132da:	eeb0 8a47 	vmov.f32	s16, s14
 80132de:	eef0 8a67 	vmov.f32	s17, s15
 80132e2:	2300      	movs	r3, #0
 80132e4:	f7ed fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 80132e8:	4681      	mov	r9, r0
 80132ea:	b160      	cbz	r0, 8013306 <_dtoa_r+0xee>
 80132ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132ee:	2301      	movs	r3, #1
 80132f0:	6013      	str	r3, [r2, #0]
 80132f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	f000 8568 	beq.w	8013dca <_dtoa_r+0xbb2>
 80132fa:	4b86      	ldr	r3, [pc, #536]	; (8013514 <_dtoa_r+0x2fc>)
 80132fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	3b01      	subs	r3, #1
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	e7da      	b.n	80132bc <_dtoa_r+0xa4>
 8013306:	aa10      	add	r2, sp, #64	; 0x40
 8013308:	a911      	add	r1, sp, #68	; 0x44
 801330a:	4620      	mov	r0, r4
 801330c:	eeb0 0a48 	vmov.f32	s0, s16
 8013310:	eef0 0a68 	vmov.f32	s1, s17
 8013314:	f001 f994 	bl	8014640 <__d2b>
 8013318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801331c:	4682      	mov	sl, r0
 801331e:	2d00      	cmp	r5, #0
 8013320:	d07f      	beq.n	8013422 <_dtoa_r+0x20a>
 8013322:	ee18 3a90 	vmov	r3, s17
 8013326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801332a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801332e:	ec51 0b18 	vmov	r0, r1, d8
 8013332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801333a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801333e:	4619      	mov	r1, r3
 8013340:	2200      	movs	r2, #0
 8013342:	4b75      	ldr	r3, [pc, #468]	; (8013518 <_dtoa_r+0x300>)
 8013344:	f7ec ffb0 	bl	80002a8 <__aeabi_dsub>
 8013348:	a367      	add	r3, pc, #412	; (adr r3, 80134e8 <_dtoa_r+0x2d0>)
 801334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334e:	f7ed f963 	bl	8000618 <__aeabi_dmul>
 8013352:	a367      	add	r3, pc, #412	; (adr r3, 80134f0 <_dtoa_r+0x2d8>)
 8013354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013358:	f7ec ffa8 	bl	80002ac <__adddf3>
 801335c:	4606      	mov	r6, r0
 801335e:	4628      	mov	r0, r5
 8013360:	460f      	mov	r7, r1
 8013362:	f7ed f8ef 	bl	8000544 <__aeabi_i2d>
 8013366:	a364      	add	r3, pc, #400	; (adr r3, 80134f8 <_dtoa_r+0x2e0>)
 8013368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336c:	f7ed f954 	bl	8000618 <__aeabi_dmul>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4630      	mov	r0, r6
 8013376:	4639      	mov	r1, r7
 8013378:	f7ec ff98 	bl	80002ac <__adddf3>
 801337c:	4606      	mov	r6, r0
 801337e:	460f      	mov	r7, r1
 8013380:	f7ed fbfa 	bl	8000b78 <__aeabi_d2iz>
 8013384:	2200      	movs	r2, #0
 8013386:	4683      	mov	fp, r0
 8013388:	2300      	movs	r3, #0
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ed fbb5 	bl	8000afc <__aeabi_dcmplt>
 8013392:	b148      	cbz	r0, 80133a8 <_dtoa_r+0x190>
 8013394:	4658      	mov	r0, fp
 8013396:	f7ed f8d5 	bl	8000544 <__aeabi_i2d>
 801339a:	4632      	mov	r2, r6
 801339c:	463b      	mov	r3, r7
 801339e:	f7ed fba3 	bl	8000ae8 <__aeabi_dcmpeq>
 80133a2:	b908      	cbnz	r0, 80133a8 <_dtoa_r+0x190>
 80133a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80133a8:	f1bb 0f16 	cmp.w	fp, #22
 80133ac:	d857      	bhi.n	801345e <_dtoa_r+0x246>
 80133ae:	4b5b      	ldr	r3, [pc, #364]	; (801351c <_dtoa_r+0x304>)
 80133b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	ec51 0b18 	vmov	r0, r1, d8
 80133bc:	f7ed fb9e 	bl	8000afc <__aeabi_dcmplt>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d04e      	beq.n	8013462 <_dtoa_r+0x24a>
 80133c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80133c8:	2300      	movs	r3, #0
 80133ca:	930c      	str	r3, [sp, #48]	; 0x30
 80133cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133ce:	1b5b      	subs	r3, r3, r5
 80133d0:	1e5a      	subs	r2, r3, #1
 80133d2:	bf45      	ittet	mi
 80133d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80133d8:	9305      	strmi	r3, [sp, #20]
 80133da:	2300      	movpl	r3, #0
 80133dc:	2300      	movmi	r3, #0
 80133de:	9206      	str	r2, [sp, #24]
 80133e0:	bf54      	ite	pl
 80133e2:	9305      	strpl	r3, [sp, #20]
 80133e4:	9306      	strmi	r3, [sp, #24]
 80133e6:	f1bb 0f00 	cmp.w	fp, #0
 80133ea:	db3c      	blt.n	8013466 <_dtoa_r+0x24e>
 80133ec:	9b06      	ldr	r3, [sp, #24]
 80133ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80133f2:	445b      	add	r3, fp
 80133f4:	9306      	str	r3, [sp, #24]
 80133f6:	2300      	movs	r3, #0
 80133f8:	9308      	str	r3, [sp, #32]
 80133fa:	9b07      	ldr	r3, [sp, #28]
 80133fc:	2b09      	cmp	r3, #9
 80133fe:	d868      	bhi.n	80134d2 <_dtoa_r+0x2ba>
 8013400:	2b05      	cmp	r3, #5
 8013402:	bfc4      	itt	gt
 8013404:	3b04      	subgt	r3, #4
 8013406:	9307      	strgt	r3, [sp, #28]
 8013408:	9b07      	ldr	r3, [sp, #28]
 801340a:	f1a3 0302 	sub.w	r3, r3, #2
 801340e:	bfcc      	ite	gt
 8013410:	2500      	movgt	r5, #0
 8013412:	2501      	movle	r5, #1
 8013414:	2b03      	cmp	r3, #3
 8013416:	f200 8085 	bhi.w	8013524 <_dtoa_r+0x30c>
 801341a:	e8df f003 	tbb	[pc, r3]
 801341e:	3b2e      	.short	0x3b2e
 8013420:	5839      	.short	0x5839
 8013422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013426:	441d      	add	r5, r3
 8013428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801342c:	2b20      	cmp	r3, #32
 801342e:	bfc1      	itttt	gt
 8013430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013434:	fa08 f803 	lslgt.w	r8, r8, r3
 8013438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801343c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013440:	bfd6      	itet	le
 8013442:	f1c3 0320 	rsble	r3, r3, #32
 8013446:	ea48 0003 	orrgt.w	r0, r8, r3
 801344a:	fa06 f003 	lslle.w	r0, r6, r3
 801344e:	f7ed f869 	bl	8000524 <__aeabi_ui2d>
 8013452:	2201      	movs	r2, #1
 8013454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013458:	3d01      	subs	r5, #1
 801345a:	920e      	str	r2, [sp, #56]	; 0x38
 801345c:	e76f      	b.n	801333e <_dtoa_r+0x126>
 801345e:	2301      	movs	r3, #1
 8013460:	e7b3      	b.n	80133ca <_dtoa_r+0x1b2>
 8013462:	900c      	str	r0, [sp, #48]	; 0x30
 8013464:	e7b2      	b.n	80133cc <_dtoa_r+0x1b4>
 8013466:	9b05      	ldr	r3, [sp, #20]
 8013468:	eba3 030b 	sub.w	r3, r3, fp
 801346c:	9305      	str	r3, [sp, #20]
 801346e:	f1cb 0300 	rsb	r3, fp, #0
 8013472:	9308      	str	r3, [sp, #32]
 8013474:	2300      	movs	r3, #0
 8013476:	930b      	str	r3, [sp, #44]	; 0x2c
 8013478:	e7bf      	b.n	80133fa <_dtoa_r+0x1e2>
 801347a:	2300      	movs	r3, #0
 801347c:	9309      	str	r3, [sp, #36]	; 0x24
 801347e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013480:	2b00      	cmp	r3, #0
 8013482:	dc52      	bgt.n	801352a <_dtoa_r+0x312>
 8013484:	2301      	movs	r3, #1
 8013486:	9301      	str	r3, [sp, #4]
 8013488:	9304      	str	r3, [sp, #16]
 801348a:	461a      	mov	r2, r3
 801348c:	920a      	str	r2, [sp, #40]	; 0x28
 801348e:	e00b      	b.n	80134a8 <_dtoa_r+0x290>
 8013490:	2301      	movs	r3, #1
 8013492:	e7f3      	b.n	801347c <_dtoa_r+0x264>
 8013494:	2300      	movs	r3, #0
 8013496:	9309      	str	r3, [sp, #36]	; 0x24
 8013498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801349a:	445b      	add	r3, fp
 801349c:	9301      	str	r3, [sp, #4]
 801349e:	3301      	adds	r3, #1
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	9304      	str	r3, [sp, #16]
 80134a4:	bfb8      	it	lt
 80134a6:	2301      	movlt	r3, #1
 80134a8:	69e0      	ldr	r0, [r4, #28]
 80134aa:	2100      	movs	r1, #0
 80134ac:	2204      	movs	r2, #4
 80134ae:	f102 0614 	add.w	r6, r2, #20
 80134b2:	429e      	cmp	r6, r3
 80134b4:	d93d      	bls.n	8013532 <_dtoa_r+0x31a>
 80134b6:	6041      	str	r1, [r0, #4]
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 fd9f 	bl	8013ffc <_Balloc>
 80134be:	9000      	str	r0, [sp, #0]
 80134c0:	2800      	cmp	r0, #0
 80134c2:	d139      	bne.n	8013538 <_dtoa_r+0x320>
 80134c4:	4b16      	ldr	r3, [pc, #88]	; (8013520 <_dtoa_r+0x308>)
 80134c6:	4602      	mov	r2, r0
 80134c8:	f240 11af 	movw	r1, #431	; 0x1af
 80134cc:	e6bd      	b.n	801324a <_dtoa_r+0x32>
 80134ce:	2301      	movs	r3, #1
 80134d0:	e7e1      	b.n	8013496 <_dtoa_r+0x27e>
 80134d2:	2501      	movs	r5, #1
 80134d4:	2300      	movs	r3, #0
 80134d6:	9307      	str	r3, [sp, #28]
 80134d8:	9509      	str	r5, [sp, #36]	; 0x24
 80134da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134de:	9301      	str	r3, [sp, #4]
 80134e0:	9304      	str	r3, [sp, #16]
 80134e2:	2200      	movs	r2, #0
 80134e4:	2312      	movs	r3, #18
 80134e6:	e7d1      	b.n	801348c <_dtoa_r+0x274>
 80134e8:	636f4361 	.word	0x636f4361
 80134ec:	3fd287a7 	.word	0x3fd287a7
 80134f0:	8b60c8b3 	.word	0x8b60c8b3
 80134f4:	3fc68a28 	.word	0x3fc68a28
 80134f8:	509f79fb 	.word	0x509f79fb
 80134fc:	3fd34413 	.word	0x3fd34413
 8013500:	0801695e 	.word	0x0801695e
 8013504:	08016975 	.word	0x08016975
 8013508:	7ff00000 	.word	0x7ff00000
 801350c:	0801695a 	.word	0x0801695a
 8013510:	08016951 	.word	0x08016951
 8013514:	0801692e 	.word	0x0801692e
 8013518:	3ff80000 	.word	0x3ff80000
 801351c:	08016a60 	.word	0x08016a60
 8013520:	080169cd 	.word	0x080169cd
 8013524:	2301      	movs	r3, #1
 8013526:	9309      	str	r3, [sp, #36]	; 0x24
 8013528:	e7d7      	b.n	80134da <_dtoa_r+0x2c2>
 801352a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	9304      	str	r3, [sp, #16]
 8013530:	e7ba      	b.n	80134a8 <_dtoa_r+0x290>
 8013532:	3101      	adds	r1, #1
 8013534:	0052      	lsls	r2, r2, #1
 8013536:	e7ba      	b.n	80134ae <_dtoa_r+0x296>
 8013538:	69e3      	ldr	r3, [r4, #28]
 801353a:	9a00      	ldr	r2, [sp, #0]
 801353c:	601a      	str	r2, [r3, #0]
 801353e:	9b04      	ldr	r3, [sp, #16]
 8013540:	2b0e      	cmp	r3, #14
 8013542:	f200 80a8 	bhi.w	8013696 <_dtoa_r+0x47e>
 8013546:	2d00      	cmp	r5, #0
 8013548:	f000 80a5 	beq.w	8013696 <_dtoa_r+0x47e>
 801354c:	f1bb 0f00 	cmp.w	fp, #0
 8013550:	dd38      	ble.n	80135c4 <_dtoa_r+0x3ac>
 8013552:	4bc0      	ldr	r3, [pc, #768]	; (8013854 <_dtoa_r+0x63c>)
 8013554:	f00b 020f 	and.w	r2, fp, #15
 8013558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801355c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013560:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013564:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013568:	d019      	beq.n	801359e <_dtoa_r+0x386>
 801356a:	4bbb      	ldr	r3, [pc, #748]	; (8013858 <_dtoa_r+0x640>)
 801356c:	ec51 0b18 	vmov	r0, r1, d8
 8013570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013574:	f7ed f97a 	bl	800086c <__aeabi_ddiv>
 8013578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801357c:	f008 080f 	and.w	r8, r8, #15
 8013580:	2503      	movs	r5, #3
 8013582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013858 <_dtoa_r+0x640>
 8013586:	f1b8 0f00 	cmp.w	r8, #0
 801358a:	d10a      	bne.n	80135a2 <_dtoa_r+0x38a>
 801358c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013590:	4632      	mov	r2, r6
 8013592:	463b      	mov	r3, r7
 8013594:	f7ed f96a 	bl	800086c <__aeabi_ddiv>
 8013598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801359c:	e02b      	b.n	80135f6 <_dtoa_r+0x3de>
 801359e:	2502      	movs	r5, #2
 80135a0:	e7ef      	b.n	8013582 <_dtoa_r+0x36a>
 80135a2:	f018 0f01 	tst.w	r8, #1
 80135a6:	d008      	beq.n	80135ba <_dtoa_r+0x3a2>
 80135a8:	4630      	mov	r0, r6
 80135aa:	4639      	mov	r1, r7
 80135ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80135b0:	f7ed f832 	bl	8000618 <__aeabi_dmul>
 80135b4:	3501      	adds	r5, #1
 80135b6:	4606      	mov	r6, r0
 80135b8:	460f      	mov	r7, r1
 80135ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135be:	f109 0908 	add.w	r9, r9, #8
 80135c2:	e7e0      	b.n	8013586 <_dtoa_r+0x36e>
 80135c4:	f000 809f 	beq.w	8013706 <_dtoa_r+0x4ee>
 80135c8:	f1cb 0600 	rsb	r6, fp, #0
 80135cc:	4ba1      	ldr	r3, [pc, #644]	; (8013854 <_dtoa_r+0x63c>)
 80135ce:	4fa2      	ldr	r7, [pc, #648]	; (8013858 <_dtoa_r+0x640>)
 80135d0:	f006 020f 	and.w	r2, r6, #15
 80135d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135dc:	ec51 0b18 	vmov	r0, r1, d8
 80135e0:	f7ed f81a 	bl	8000618 <__aeabi_dmul>
 80135e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135e8:	1136      	asrs	r6, r6, #4
 80135ea:	2300      	movs	r3, #0
 80135ec:	2502      	movs	r5, #2
 80135ee:	2e00      	cmp	r6, #0
 80135f0:	d17e      	bne.n	80136f0 <_dtoa_r+0x4d8>
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1d0      	bne.n	8013598 <_dtoa_r+0x380>
 80135f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 8084 	beq.w	801370a <_dtoa_r+0x4f2>
 8013602:	4b96      	ldr	r3, [pc, #600]	; (801385c <_dtoa_r+0x644>)
 8013604:	2200      	movs	r2, #0
 8013606:	4640      	mov	r0, r8
 8013608:	4649      	mov	r1, r9
 801360a:	f7ed fa77 	bl	8000afc <__aeabi_dcmplt>
 801360e:	2800      	cmp	r0, #0
 8013610:	d07b      	beq.n	801370a <_dtoa_r+0x4f2>
 8013612:	9b04      	ldr	r3, [sp, #16]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d078      	beq.n	801370a <_dtoa_r+0x4f2>
 8013618:	9b01      	ldr	r3, [sp, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	dd39      	ble.n	8013692 <_dtoa_r+0x47a>
 801361e:	4b90      	ldr	r3, [pc, #576]	; (8013860 <_dtoa_r+0x648>)
 8013620:	2200      	movs	r2, #0
 8013622:	4640      	mov	r0, r8
 8013624:	4649      	mov	r1, r9
 8013626:	f7ec fff7 	bl	8000618 <__aeabi_dmul>
 801362a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801362e:	9e01      	ldr	r6, [sp, #4]
 8013630:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8013634:	3501      	adds	r5, #1
 8013636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801363a:	4628      	mov	r0, r5
 801363c:	f7ec ff82 	bl	8000544 <__aeabi_i2d>
 8013640:	4642      	mov	r2, r8
 8013642:	464b      	mov	r3, r9
 8013644:	f7ec ffe8 	bl	8000618 <__aeabi_dmul>
 8013648:	4b86      	ldr	r3, [pc, #536]	; (8013864 <_dtoa_r+0x64c>)
 801364a:	2200      	movs	r2, #0
 801364c:	f7ec fe2e 	bl	80002ac <__adddf3>
 8013650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013658:	9303      	str	r3, [sp, #12]
 801365a:	2e00      	cmp	r6, #0
 801365c:	d158      	bne.n	8013710 <_dtoa_r+0x4f8>
 801365e:	4b82      	ldr	r3, [pc, #520]	; (8013868 <_dtoa_r+0x650>)
 8013660:	2200      	movs	r2, #0
 8013662:	4640      	mov	r0, r8
 8013664:	4649      	mov	r1, r9
 8013666:	f7ec fe1f 	bl	80002a8 <__aeabi_dsub>
 801366a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801366e:	4680      	mov	r8, r0
 8013670:	4689      	mov	r9, r1
 8013672:	f7ed fa61 	bl	8000b38 <__aeabi_dcmpgt>
 8013676:	2800      	cmp	r0, #0
 8013678:	f040 8296 	bne.w	8013ba8 <_dtoa_r+0x990>
 801367c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013680:	4640      	mov	r0, r8
 8013682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013686:	4649      	mov	r1, r9
 8013688:	f7ed fa38 	bl	8000afc <__aeabi_dcmplt>
 801368c:	2800      	cmp	r0, #0
 801368e:	f040 8289 	bne.w	8013ba4 <_dtoa_r+0x98c>
 8013692:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013698:	2b00      	cmp	r3, #0
 801369a:	f2c0 814e 	blt.w	801393a <_dtoa_r+0x722>
 801369e:	f1bb 0f0e 	cmp.w	fp, #14
 80136a2:	f300 814a 	bgt.w	801393a <_dtoa_r+0x722>
 80136a6:	4b6b      	ldr	r3, [pc, #428]	; (8013854 <_dtoa_r+0x63c>)
 80136a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	f280 80dc 	bge.w	8013870 <_dtoa_r+0x658>
 80136b8:	9b04      	ldr	r3, [sp, #16]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f300 80d8 	bgt.w	8013870 <_dtoa_r+0x658>
 80136c0:	f040 826f 	bne.w	8013ba2 <_dtoa_r+0x98a>
 80136c4:	4b68      	ldr	r3, [pc, #416]	; (8013868 <_dtoa_r+0x650>)
 80136c6:	2200      	movs	r2, #0
 80136c8:	4640      	mov	r0, r8
 80136ca:	4649      	mov	r1, r9
 80136cc:	f7ec ffa4 	bl	8000618 <__aeabi_dmul>
 80136d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136d4:	f7ed fa26 	bl	8000b24 <__aeabi_dcmpge>
 80136d8:	9e04      	ldr	r6, [sp, #16]
 80136da:	4637      	mov	r7, r6
 80136dc:	2800      	cmp	r0, #0
 80136de:	f040 8245 	bne.w	8013b6c <_dtoa_r+0x954>
 80136e2:	9d00      	ldr	r5, [sp, #0]
 80136e4:	2331      	movs	r3, #49	; 0x31
 80136e6:	f805 3b01 	strb.w	r3, [r5], #1
 80136ea:	f10b 0b01 	add.w	fp, fp, #1
 80136ee:	e241      	b.n	8013b74 <_dtoa_r+0x95c>
 80136f0:	07f2      	lsls	r2, r6, #31
 80136f2:	d505      	bpl.n	8013700 <_dtoa_r+0x4e8>
 80136f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136f8:	f7ec ff8e 	bl	8000618 <__aeabi_dmul>
 80136fc:	3501      	adds	r5, #1
 80136fe:	2301      	movs	r3, #1
 8013700:	1076      	asrs	r6, r6, #1
 8013702:	3708      	adds	r7, #8
 8013704:	e773      	b.n	80135ee <_dtoa_r+0x3d6>
 8013706:	2502      	movs	r5, #2
 8013708:	e775      	b.n	80135f6 <_dtoa_r+0x3de>
 801370a:	9e04      	ldr	r6, [sp, #16]
 801370c:	465f      	mov	r7, fp
 801370e:	e792      	b.n	8013636 <_dtoa_r+0x41e>
 8013710:	9900      	ldr	r1, [sp, #0]
 8013712:	4b50      	ldr	r3, [pc, #320]	; (8013854 <_dtoa_r+0x63c>)
 8013714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013718:	4431      	add	r1, r6
 801371a:	9102      	str	r1, [sp, #8]
 801371c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801371e:	eeb0 9a47 	vmov.f32	s18, s14
 8013722:	eef0 9a67 	vmov.f32	s19, s15
 8013726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801372a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801372e:	2900      	cmp	r1, #0
 8013730:	d044      	beq.n	80137bc <_dtoa_r+0x5a4>
 8013732:	494e      	ldr	r1, [pc, #312]	; (801386c <_dtoa_r+0x654>)
 8013734:	2000      	movs	r0, #0
 8013736:	f7ed f899 	bl	800086c <__aeabi_ddiv>
 801373a:	ec53 2b19 	vmov	r2, r3, d9
 801373e:	f7ec fdb3 	bl	80002a8 <__aeabi_dsub>
 8013742:	9d00      	ldr	r5, [sp, #0]
 8013744:	ec41 0b19 	vmov	d9, r0, r1
 8013748:	4649      	mov	r1, r9
 801374a:	4640      	mov	r0, r8
 801374c:	f7ed fa14 	bl	8000b78 <__aeabi_d2iz>
 8013750:	4606      	mov	r6, r0
 8013752:	f7ec fef7 	bl	8000544 <__aeabi_i2d>
 8013756:	4602      	mov	r2, r0
 8013758:	460b      	mov	r3, r1
 801375a:	4640      	mov	r0, r8
 801375c:	4649      	mov	r1, r9
 801375e:	f7ec fda3 	bl	80002a8 <__aeabi_dsub>
 8013762:	3630      	adds	r6, #48	; 0x30
 8013764:	f805 6b01 	strb.w	r6, [r5], #1
 8013768:	ec53 2b19 	vmov	r2, r3, d9
 801376c:	4680      	mov	r8, r0
 801376e:	4689      	mov	r9, r1
 8013770:	f7ed f9c4 	bl	8000afc <__aeabi_dcmplt>
 8013774:	2800      	cmp	r0, #0
 8013776:	d164      	bne.n	8013842 <_dtoa_r+0x62a>
 8013778:	4642      	mov	r2, r8
 801377a:	464b      	mov	r3, r9
 801377c:	4937      	ldr	r1, [pc, #220]	; (801385c <_dtoa_r+0x644>)
 801377e:	2000      	movs	r0, #0
 8013780:	f7ec fd92 	bl	80002a8 <__aeabi_dsub>
 8013784:	ec53 2b19 	vmov	r2, r3, d9
 8013788:	f7ed f9b8 	bl	8000afc <__aeabi_dcmplt>
 801378c:	2800      	cmp	r0, #0
 801378e:	f040 80b6 	bne.w	80138fe <_dtoa_r+0x6e6>
 8013792:	9b02      	ldr	r3, [sp, #8]
 8013794:	429d      	cmp	r5, r3
 8013796:	f43f af7c 	beq.w	8013692 <_dtoa_r+0x47a>
 801379a:	4b31      	ldr	r3, [pc, #196]	; (8013860 <_dtoa_r+0x648>)
 801379c:	ec51 0b19 	vmov	r0, r1, d9
 80137a0:	2200      	movs	r2, #0
 80137a2:	f7ec ff39 	bl	8000618 <__aeabi_dmul>
 80137a6:	4b2e      	ldr	r3, [pc, #184]	; (8013860 <_dtoa_r+0x648>)
 80137a8:	ec41 0b19 	vmov	d9, r0, r1
 80137ac:	2200      	movs	r2, #0
 80137ae:	4640      	mov	r0, r8
 80137b0:	4649      	mov	r1, r9
 80137b2:	f7ec ff31 	bl	8000618 <__aeabi_dmul>
 80137b6:	4680      	mov	r8, r0
 80137b8:	4689      	mov	r9, r1
 80137ba:	e7c5      	b.n	8013748 <_dtoa_r+0x530>
 80137bc:	ec51 0b17 	vmov	r0, r1, d7
 80137c0:	f7ec ff2a 	bl	8000618 <__aeabi_dmul>
 80137c4:	9b02      	ldr	r3, [sp, #8]
 80137c6:	9d00      	ldr	r5, [sp, #0]
 80137c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80137ca:	ec41 0b19 	vmov	d9, r0, r1
 80137ce:	4649      	mov	r1, r9
 80137d0:	4640      	mov	r0, r8
 80137d2:	f7ed f9d1 	bl	8000b78 <__aeabi_d2iz>
 80137d6:	4606      	mov	r6, r0
 80137d8:	f7ec feb4 	bl	8000544 <__aeabi_i2d>
 80137dc:	3630      	adds	r6, #48	; 0x30
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec fd5f 	bl	80002a8 <__aeabi_dsub>
 80137ea:	f805 6b01 	strb.w	r6, [r5], #1
 80137ee:	9b02      	ldr	r3, [sp, #8]
 80137f0:	429d      	cmp	r5, r3
 80137f2:	4680      	mov	r8, r0
 80137f4:	4689      	mov	r9, r1
 80137f6:	f04f 0200 	mov.w	r2, #0
 80137fa:	d124      	bne.n	8013846 <_dtoa_r+0x62e>
 80137fc:	4b1b      	ldr	r3, [pc, #108]	; (801386c <_dtoa_r+0x654>)
 80137fe:	ec51 0b19 	vmov	r0, r1, d9
 8013802:	f7ec fd53 	bl	80002ac <__adddf3>
 8013806:	4602      	mov	r2, r0
 8013808:	460b      	mov	r3, r1
 801380a:	4640      	mov	r0, r8
 801380c:	4649      	mov	r1, r9
 801380e:	f7ed f993 	bl	8000b38 <__aeabi_dcmpgt>
 8013812:	2800      	cmp	r0, #0
 8013814:	d173      	bne.n	80138fe <_dtoa_r+0x6e6>
 8013816:	ec53 2b19 	vmov	r2, r3, d9
 801381a:	4914      	ldr	r1, [pc, #80]	; (801386c <_dtoa_r+0x654>)
 801381c:	2000      	movs	r0, #0
 801381e:	f7ec fd43 	bl	80002a8 <__aeabi_dsub>
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	4640      	mov	r0, r8
 8013828:	4649      	mov	r1, r9
 801382a:	f7ed f967 	bl	8000afc <__aeabi_dcmplt>
 801382e:	2800      	cmp	r0, #0
 8013830:	f43f af2f 	beq.w	8013692 <_dtoa_r+0x47a>
 8013834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013836:	1e6b      	subs	r3, r5, #1
 8013838:	930f      	str	r3, [sp, #60]	; 0x3c
 801383a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801383e:	2b30      	cmp	r3, #48	; 0x30
 8013840:	d0f8      	beq.n	8013834 <_dtoa_r+0x61c>
 8013842:	46bb      	mov	fp, r7
 8013844:	e04a      	b.n	80138dc <_dtoa_r+0x6c4>
 8013846:	4b06      	ldr	r3, [pc, #24]	; (8013860 <_dtoa_r+0x648>)
 8013848:	f7ec fee6 	bl	8000618 <__aeabi_dmul>
 801384c:	4680      	mov	r8, r0
 801384e:	4689      	mov	r9, r1
 8013850:	e7bd      	b.n	80137ce <_dtoa_r+0x5b6>
 8013852:	bf00      	nop
 8013854:	08016a60 	.word	0x08016a60
 8013858:	08016a38 	.word	0x08016a38
 801385c:	3ff00000 	.word	0x3ff00000
 8013860:	40240000 	.word	0x40240000
 8013864:	401c0000 	.word	0x401c0000
 8013868:	40140000 	.word	0x40140000
 801386c:	3fe00000 	.word	0x3fe00000
 8013870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013874:	9d00      	ldr	r5, [sp, #0]
 8013876:	4642      	mov	r2, r8
 8013878:	464b      	mov	r3, r9
 801387a:	4630      	mov	r0, r6
 801387c:	4639      	mov	r1, r7
 801387e:	f7ec fff5 	bl	800086c <__aeabi_ddiv>
 8013882:	f7ed f979 	bl	8000b78 <__aeabi_d2iz>
 8013886:	9001      	str	r0, [sp, #4]
 8013888:	f7ec fe5c 	bl	8000544 <__aeabi_i2d>
 801388c:	4642      	mov	r2, r8
 801388e:	464b      	mov	r3, r9
 8013890:	f7ec fec2 	bl	8000618 <__aeabi_dmul>
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	4630      	mov	r0, r6
 801389a:	4639      	mov	r1, r7
 801389c:	f7ec fd04 	bl	80002a8 <__aeabi_dsub>
 80138a0:	9e01      	ldr	r6, [sp, #4]
 80138a2:	9f04      	ldr	r7, [sp, #16]
 80138a4:	3630      	adds	r6, #48	; 0x30
 80138a6:	f805 6b01 	strb.w	r6, [r5], #1
 80138aa:	9e00      	ldr	r6, [sp, #0]
 80138ac:	1bae      	subs	r6, r5, r6
 80138ae:	42b7      	cmp	r7, r6
 80138b0:	4602      	mov	r2, r0
 80138b2:	460b      	mov	r3, r1
 80138b4:	d134      	bne.n	8013920 <_dtoa_r+0x708>
 80138b6:	f7ec fcf9 	bl	80002ac <__adddf3>
 80138ba:	4642      	mov	r2, r8
 80138bc:	464b      	mov	r3, r9
 80138be:	4606      	mov	r6, r0
 80138c0:	460f      	mov	r7, r1
 80138c2:	f7ed f939 	bl	8000b38 <__aeabi_dcmpgt>
 80138c6:	b9c8      	cbnz	r0, 80138fc <_dtoa_r+0x6e4>
 80138c8:	4642      	mov	r2, r8
 80138ca:	464b      	mov	r3, r9
 80138cc:	4630      	mov	r0, r6
 80138ce:	4639      	mov	r1, r7
 80138d0:	f7ed f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 80138d4:	b110      	cbz	r0, 80138dc <_dtoa_r+0x6c4>
 80138d6:	9b01      	ldr	r3, [sp, #4]
 80138d8:	07db      	lsls	r3, r3, #31
 80138da:	d40f      	bmi.n	80138fc <_dtoa_r+0x6e4>
 80138dc:	4651      	mov	r1, sl
 80138de:	4620      	mov	r0, r4
 80138e0:	f000 fbcc 	bl	801407c <_Bfree>
 80138e4:	2300      	movs	r3, #0
 80138e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80138e8:	702b      	strb	r3, [r5, #0]
 80138ea:	f10b 0301 	add.w	r3, fp, #1
 80138ee:	6013      	str	r3, [r2, #0]
 80138f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f43f ace2 	beq.w	80132bc <_dtoa_r+0xa4>
 80138f8:	601d      	str	r5, [r3, #0]
 80138fa:	e4df      	b.n	80132bc <_dtoa_r+0xa4>
 80138fc:	465f      	mov	r7, fp
 80138fe:	462b      	mov	r3, r5
 8013900:	461d      	mov	r5, r3
 8013902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013906:	2a39      	cmp	r2, #57	; 0x39
 8013908:	d106      	bne.n	8013918 <_dtoa_r+0x700>
 801390a:	9a00      	ldr	r2, [sp, #0]
 801390c:	429a      	cmp	r2, r3
 801390e:	d1f7      	bne.n	8013900 <_dtoa_r+0x6e8>
 8013910:	9900      	ldr	r1, [sp, #0]
 8013912:	2230      	movs	r2, #48	; 0x30
 8013914:	3701      	adds	r7, #1
 8013916:	700a      	strb	r2, [r1, #0]
 8013918:	781a      	ldrb	r2, [r3, #0]
 801391a:	3201      	adds	r2, #1
 801391c:	701a      	strb	r2, [r3, #0]
 801391e:	e790      	b.n	8013842 <_dtoa_r+0x62a>
 8013920:	4ba3      	ldr	r3, [pc, #652]	; (8013bb0 <_dtoa_r+0x998>)
 8013922:	2200      	movs	r2, #0
 8013924:	f7ec fe78 	bl	8000618 <__aeabi_dmul>
 8013928:	2200      	movs	r2, #0
 801392a:	2300      	movs	r3, #0
 801392c:	4606      	mov	r6, r0
 801392e:	460f      	mov	r7, r1
 8013930:	f7ed f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 8013934:	2800      	cmp	r0, #0
 8013936:	d09e      	beq.n	8013876 <_dtoa_r+0x65e>
 8013938:	e7d0      	b.n	80138dc <_dtoa_r+0x6c4>
 801393a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801393c:	2a00      	cmp	r2, #0
 801393e:	f000 80ca 	beq.w	8013ad6 <_dtoa_r+0x8be>
 8013942:	9a07      	ldr	r2, [sp, #28]
 8013944:	2a01      	cmp	r2, #1
 8013946:	f300 80ad 	bgt.w	8013aa4 <_dtoa_r+0x88c>
 801394a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801394c:	2a00      	cmp	r2, #0
 801394e:	f000 80a5 	beq.w	8013a9c <_dtoa_r+0x884>
 8013952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013956:	9e08      	ldr	r6, [sp, #32]
 8013958:	9d05      	ldr	r5, [sp, #20]
 801395a:	9a05      	ldr	r2, [sp, #20]
 801395c:	441a      	add	r2, r3
 801395e:	9205      	str	r2, [sp, #20]
 8013960:	9a06      	ldr	r2, [sp, #24]
 8013962:	2101      	movs	r1, #1
 8013964:	441a      	add	r2, r3
 8013966:	4620      	mov	r0, r4
 8013968:	9206      	str	r2, [sp, #24]
 801396a:	f000 fc3d 	bl	80141e8 <__i2b>
 801396e:	4607      	mov	r7, r0
 8013970:	b165      	cbz	r5, 801398c <_dtoa_r+0x774>
 8013972:	9b06      	ldr	r3, [sp, #24]
 8013974:	2b00      	cmp	r3, #0
 8013976:	dd09      	ble.n	801398c <_dtoa_r+0x774>
 8013978:	42ab      	cmp	r3, r5
 801397a:	9a05      	ldr	r2, [sp, #20]
 801397c:	bfa8      	it	ge
 801397e:	462b      	movge	r3, r5
 8013980:	1ad2      	subs	r2, r2, r3
 8013982:	9205      	str	r2, [sp, #20]
 8013984:	9a06      	ldr	r2, [sp, #24]
 8013986:	1aed      	subs	r5, r5, r3
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	9306      	str	r3, [sp, #24]
 801398c:	9b08      	ldr	r3, [sp, #32]
 801398e:	b1f3      	cbz	r3, 80139ce <_dtoa_r+0x7b6>
 8013990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013992:	2b00      	cmp	r3, #0
 8013994:	f000 80a3 	beq.w	8013ade <_dtoa_r+0x8c6>
 8013998:	2e00      	cmp	r6, #0
 801399a:	dd10      	ble.n	80139be <_dtoa_r+0x7a6>
 801399c:	4639      	mov	r1, r7
 801399e:	4632      	mov	r2, r6
 80139a0:	4620      	mov	r0, r4
 80139a2:	f000 fce1 	bl	8014368 <__pow5mult>
 80139a6:	4652      	mov	r2, sl
 80139a8:	4601      	mov	r1, r0
 80139aa:	4607      	mov	r7, r0
 80139ac:	4620      	mov	r0, r4
 80139ae:	f000 fc31 	bl	8014214 <__multiply>
 80139b2:	4651      	mov	r1, sl
 80139b4:	4680      	mov	r8, r0
 80139b6:	4620      	mov	r0, r4
 80139b8:	f000 fb60 	bl	801407c <_Bfree>
 80139bc:	46c2      	mov	sl, r8
 80139be:	9b08      	ldr	r3, [sp, #32]
 80139c0:	1b9a      	subs	r2, r3, r6
 80139c2:	d004      	beq.n	80139ce <_dtoa_r+0x7b6>
 80139c4:	4651      	mov	r1, sl
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 fcce 	bl	8014368 <__pow5mult>
 80139cc:	4682      	mov	sl, r0
 80139ce:	2101      	movs	r1, #1
 80139d0:	4620      	mov	r0, r4
 80139d2:	f000 fc09 	bl	80141e8 <__i2b>
 80139d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139d8:	2b00      	cmp	r3, #0
 80139da:	4606      	mov	r6, r0
 80139dc:	f340 8081 	ble.w	8013ae2 <_dtoa_r+0x8ca>
 80139e0:	461a      	mov	r2, r3
 80139e2:	4601      	mov	r1, r0
 80139e4:	4620      	mov	r0, r4
 80139e6:	f000 fcbf 	bl	8014368 <__pow5mult>
 80139ea:	9b07      	ldr	r3, [sp, #28]
 80139ec:	2b01      	cmp	r3, #1
 80139ee:	4606      	mov	r6, r0
 80139f0:	dd7a      	ble.n	8013ae8 <_dtoa_r+0x8d0>
 80139f2:	f04f 0800 	mov.w	r8, #0
 80139f6:	6933      	ldr	r3, [r6, #16]
 80139f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80139fc:	6918      	ldr	r0, [r3, #16]
 80139fe:	f000 fba5 	bl	801414c <__hi0bits>
 8013a02:	f1c0 0020 	rsb	r0, r0, #32
 8013a06:	9b06      	ldr	r3, [sp, #24]
 8013a08:	4418      	add	r0, r3
 8013a0a:	f010 001f 	ands.w	r0, r0, #31
 8013a0e:	f000 8094 	beq.w	8013b3a <_dtoa_r+0x922>
 8013a12:	f1c0 0320 	rsb	r3, r0, #32
 8013a16:	2b04      	cmp	r3, #4
 8013a18:	f340 8085 	ble.w	8013b26 <_dtoa_r+0x90e>
 8013a1c:	9b05      	ldr	r3, [sp, #20]
 8013a1e:	f1c0 001c 	rsb	r0, r0, #28
 8013a22:	4403      	add	r3, r0
 8013a24:	9305      	str	r3, [sp, #20]
 8013a26:	9b06      	ldr	r3, [sp, #24]
 8013a28:	4403      	add	r3, r0
 8013a2a:	4405      	add	r5, r0
 8013a2c:	9306      	str	r3, [sp, #24]
 8013a2e:	9b05      	ldr	r3, [sp, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	dd05      	ble.n	8013a40 <_dtoa_r+0x828>
 8013a34:	4651      	mov	r1, sl
 8013a36:	461a      	mov	r2, r3
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f000 fcef 	bl	801441c <__lshift>
 8013a3e:	4682      	mov	sl, r0
 8013a40:	9b06      	ldr	r3, [sp, #24]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	dd05      	ble.n	8013a52 <_dtoa_r+0x83a>
 8013a46:	4631      	mov	r1, r6
 8013a48:	461a      	mov	r2, r3
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f000 fce6 	bl	801441c <__lshift>
 8013a50:	4606      	mov	r6, r0
 8013a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d072      	beq.n	8013b3e <_dtoa_r+0x926>
 8013a58:	4631      	mov	r1, r6
 8013a5a:	4650      	mov	r0, sl
 8013a5c:	f000 fd4a 	bl	80144f4 <__mcmp>
 8013a60:	2800      	cmp	r0, #0
 8013a62:	da6c      	bge.n	8013b3e <_dtoa_r+0x926>
 8013a64:	2300      	movs	r3, #0
 8013a66:	4651      	mov	r1, sl
 8013a68:	220a      	movs	r2, #10
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 fb28 	bl	80140c0 <__multadd>
 8013a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013a76:	4682      	mov	sl, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f000 81b0 	beq.w	8013dde <_dtoa_r+0xbc6>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	4639      	mov	r1, r7
 8013a82:	220a      	movs	r2, #10
 8013a84:	4620      	mov	r0, r4
 8013a86:	f000 fb1b 	bl	80140c0 <__multadd>
 8013a8a:	9b01      	ldr	r3, [sp, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	4607      	mov	r7, r0
 8013a90:	f300 8096 	bgt.w	8013bc0 <_dtoa_r+0x9a8>
 8013a94:	9b07      	ldr	r3, [sp, #28]
 8013a96:	2b02      	cmp	r3, #2
 8013a98:	dc59      	bgt.n	8013b4e <_dtoa_r+0x936>
 8013a9a:	e091      	b.n	8013bc0 <_dtoa_r+0x9a8>
 8013a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013aa2:	e758      	b.n	8013956 <_dtoa_r+0x73e>
 8013aa4:	9b04      	ldr	r3, [sp, #16]
 8013aa6:	1e5e      	subs	r6, r3, #1
 8013aa8:	9b08      	ldr	r3, [sp, #32]
 8013aaa:	42b3      	cmp	r3, r6
 8013aac:	bfbf      	itttt	lt
 8013aae:	9b08      	ldrlt	r3, [sp, #32]
 8013ab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013ab2:	9608      	strlt	r6, [sp, #32]
 8013ab4:	1af3      	sublt	r3, r6, r3
 8013ab6:	bfb4      	ite	lt
 8013ab8:	18d2      	addlt	r2, r2, r3
 8013aba:	1b9e      	subge	r6, r3, r6
 8013abc:	9b04      	ldr	r3, [sp, #16]
 8013abe:	bfbc      	itt	lt
 8013ac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013ac2:	2600      	movlt	r6, #0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	bfb7      	itett	lt
 8013ac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013acc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013ad0:	1a9d      	sublt	r5, r3, r2
 8013ad2:	2300      	movlt	r3, #0
 8013ad4:	e741      	b.n	801395a <_dtoa_r+0x742>
 8013ad6:	9e08      	ldr	r6, [sp, #32]
 8013ad8:	9d05      	ldr	r5, [sp, #20]
 8013ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013adc:	e748      	b.n	8013970 <_dtoa_r+0x758>
 8013ade:	9a08      	ldr	r2, [sp, #32]
 8013ae0:	e770      	b.n	80139c4 <_dtoa_r+0x7ac>
 8013ae2:	9b07      	ldr	r3, [sp, #28]
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	dc19      	bgt.n	8013b1c <_dtoa_r+0x904>
 8013ae8:	9b02      	ldr	r3, [sp, #8]
 8013aea:	b9bb      	cbnz	r3, 8013b1c <_dtoa_r+0x904>
 8013aec:	9b03      	ldr	r3, [sp, #12]
 8013aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013af2:	b99b      	cbnz	r3, 8013b1c <_dtoa_r+0x904>
 8013af4:	9b03      	ldr	r3, [sp, #12]
 8013af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013afa:	0d1b      	lsrs	r3, r3, #20
 8013afc:	051b      	lsls	r3, r3, #20
 8013afe:	b183      	cbz	r3, 8013b22 <_dtoa_r+0x90a>
 8013b00:	9b05      	ldr	r3, [sp, #20]
 8013b02:	3301      	adds	r3, #1
 8013b04:	9305      	str	r3, [sp, #20]
 8013b06:	9b06      	ldr	r3, [sp, #24]
 8013b08:	3301      	adds	r3, #1
 8013b0a:	9306      	str	r3, [sp, #24]
 8013b0c:	f04f 0801 	mov.w	r8, #1
 8013b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f47f af6f 	bne.w	80139f6 <_dtoa_r+0x7de>
 8013b18:	2001      	movs	r0, #1
 8013b1a:	e774      	b.n	8013a06 <_dtoa_r+0x7ee>
 8013b1c:	f04f 0800 	mov.w	r8, #0
 8013b20:	e7f6      	b.n	8013b10 <_dtoa_r+0x8f8>
 8013b22:	4698      	mov	r8, r3
 8013b24:	e7f4      	b.n	8013b10 <_dtoa_r+0x8f8>
 8013b26:	d082      	beq.n	8013a2e <_dtoa_r+0x816>
 8013b28:	9a05      	ldr	r2, [sp, #20]
 8013b2a:	331c      	adds	r3, #28
 8013b2c:	441a      	add	r2, r3
 8013b2e:	9205      	str	r2, [sp, #20]
 8013b30:	9a06      	ldr	r2, [sp, #24]
 8013b32:	441a      	add	r2, r3
 8013b34:	441d      	add	r5, r3
 8013b36:	9206      	str	r2, [sp, #24]
 8013b38:	e779      	b.n	8013a2e <_dtoa_r+0x816>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	e7f4      	b.n	8013b28 <_dtoa_r+0x910>
 8013b3e:	9b04      	ldr	r3, [sp, #16]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	dc37      	bgt.n	8013bb4 <_dtoa_r+0x99c>
 8013b44:	9b07      	ldr	r3, [sp, #28]
 8013b46:	2b02      	cmp	r3, #2
 8013b48:	dd34      	ble.n	8013bb4 <_dtoa_r+0x99c>
 8013b4a:	9b04      	ldr	r3, [sp, #16]
 8013b4c:	9301      	str	r3, [sp, #4]
 8013b4e:	9b01      	ldr	r3, [sp, #4]
 8013b50:	b963      	cbnz	r3, 8013b6c <_dtoa_r+0x954>
 8013b52:	4631      	mov	r1, r6
 8013b54:	2205      	movs	r2, #5
 8013b56:	4620      	mov	r0, r4
 8013b58:	f000 fab2 	bl	80140c0 <__multadd>
 8013b5c:	4601      	mov	r1, r0
 8013b5e:	4606      	mov	r6, r0
 8013b60:	4650      	mov	r0, sl
 8013b62:	f000 fcc7 	bl	80144f4 <__mcmp>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f73f adbb 	bgt.w	80136e2 <_dtoa_r+0x4ca>
 8013b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b6e:	9d00      	ldr	r5, [sp, #0]
 8013b70:	ea6f 0b03 	mvn.w	fp, r3
 8013b74:	f04f 0800 	mov.w	r8, #0
 8013b78:	4631      	mov	r1, r6
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f000 fa7e 	bl	801407c <_Bfree>
 8013b80:	2f00      	cmp	r7, #0
 8013b82:	f43f aeab 	beq.w	80138dc <_dtoa_r+0x6c4>
 8013b86:	f1b8 0f00 	cmp.w	r8, #0
 8013b8a:	d005      	beq.n	8013b98 <_dtoa_r+0x980>
 8013b8c:	45b8      	cmp	r8, r7
 8013b8e:	d003      	beq.n	8013b98 <_dtoa_r+0x980>
 8013b90:	4641      	mov	r1, r8
 8013b92:	4620      	mov	r0, r4
 8013b94:	f000 fa72 	bl	801407c <_Bfree>
 8013b98:	4639      	mov	r1, r7
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f000 fa6e 	bl	801407c <_Bfree>
 8013ba0:	e69c      	b.n	80138dc <_dtoa_r+0x6c4>
 8013ba2:	2600      	movs	r6, #0
 8013ba4:	4637      	mov	r7, r6
 8013ba6:	e7e1      	b.n	8013b6c <_dtoa_r+0x954>
 8013ba8:	46bb      	mov	fp, r7
 8013baa:	4637      	mov	r7, r6
 8013bac:	e599      	b.n	80136e2 <_dtoa_r+0x4ca>
 8013bae:	bf00      	nop
 8013bb0:	40240000 	.word	0x40240000
 8013bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f000 80c8 	beq.w	8013d4c <_dtoa_r+0xb34>
 8013bbc:	9b04      	ldr	r3, [sp, #16]
 8013bbe:	9301      	str	r3, [sp, #4]
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	dd05      	ble.n	8013bd0 <_dtoa_r+0x9b8>
 8013bc4:	4639      	mov	r1, r7
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f000 fc27 	bl	801441c <__lshift>
 8013bce:	4607      	mov	r7, r0
 8013bd0:	f1b8 0f00 	cmp.w	r8, #0
 8013bd4:	d05b      	beq.n	8013c8e <_dtoa_r+0xa76>
 8013bd6:	6879      	ldr	r1, [r7, #4]
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f000 fa0f 	bl	8013ffc <_Balloc>
 8013bde:	4605      	mov	r5, r0
 8013be0:	b928      	cbnz	r0, 8013bee <_dtoa_r+0x9d6>
 8013be2:	4b83      	ldr	r3, [pc, #524]	; (8013df0 <_dtoa_r+0xbd8>)
 8013be4:	4602      	mov	r2, r0
 8013be6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013bea:	f7ff bb2e 	b.w	801324a <_dtoa_r+0x32>
 8013bee:	693a      	ldr	r2, [r7, #16]
 8013bf0:	3202      	adds	r2, #2
 8013bf2:	0092      	lsls	r2, r2, #2
 8013bf4:	f107 010c 	add.w	r1, r7, #12
 8013bf8:	300c      	adds	r0, #12
 8013bfa:	f7ff fa76 	bl	80130ea <memcpy>
 8013bfe:	2201      	movs	r2, #1
 8013c00:	4629      	mov	r1, r5
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 fc0a 	bl	801441c <__lshift>
 8013c08:	9b00      	ldr	r3, [sp, #0]
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	9304      	str	r3, [sp, #16]
 8013c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c12:	4413      	add	r3, r2
 8013c14:	9308      	str	r3, [sp, #32]
 8013c16:	9b02      	ldr	r3, [sp, #8]
 8013c18:	f003 0301 	and.w	r3, r3, #1
 8013c1c:	46b8      	mov	r8, r7
 8013c1e:	9306      	str	r3, [sp, #24]
 8013c20:	4607      	mov	r7, r0
 8013c22:	9b04      	ldr	r3, [sp, #16]
 8013c24:	4631      	mov	r1, r6
 8013c26:	3b01      	subs	r3, #1
 8013c28:	4650      	mov	r0, sl
 8013c2a:	9301      	str	r3, [sp, #4]
 8013c2c:	f7ff fa6b 	bl	8013106 <quorem>
 8013c30:	4641      	mov	r1, r8
 8013c32:	9002      	str	r0, [sp, #8]
 8013c34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c38:	4650      	mov	r0, sl
 8013c3a:	f000 fc5b 	bl	80144f4 <__mcmp>
 8013c3e:	463a      	mov	r2, r7
 8013c40:	9005      	str	r0, [sp, #20]
 8013c42:	4631      	mov	r1, r6
 8013c44:	4620      	mov	r0, r4
 8013c46:	f000 fc71 	bl	801452c <__mdiff>
 8013c4a:	68c2      	ldr	r2, [r0, #12]
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	bb02      	cbnz	r2, 8013c92 <_dtoa_r+0xa7a>
 8013c50:	4601      	mov	r1, r0
 8013c52:	4650      	mov	r0, sl
 8013c54:	f000 fc4e 	bl	80144f4 <__mcmp>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8013c60:	f000 fa0c 	bl	801407c <_Bfree>
 8013c64:	9b07      	ldr	r3, [sp, #28]
 8013c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c68:	9d04      	ldr	r5, [sp, #16]
 8013c6a:	ea43 0102 	orr.w	r1, r3, r2
 8013c6e:	9b06      	ldr	r3, [sp, #24]
 8013c70:	4319      	orrs	r1, r3
 8013c72:	d110      	bne.n	8013c96 <_dtoa_r+0xa7e>
 8013c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013c78:	d029      	beq.n	8013cce <_dtoa_r+0xab6>
 8013c7a:	9b05      	ldr	r3, [sp, #20]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	dd02      	ble.n	8013c86 <_dtoa_r+0xa6e>
 8013c80:	9b02      	ldr	r3, [sp, #8]
 8013c82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013c86:	9b01      	ldr	r3, [sp, #4]
 8013c88:	f883 9000 	strb.w	r9, [r3]
 8013c8c:	e774      	b.n	8013b78 <_dtoa_r+0x960>
 8013c8e:	4638      	mov	r0, r7
 8013c90:	e7ba      	b.n	8013c08 <_dtoa_r+0x9f0>
 8013c92:	2201      	movs	r2, #1
 8013c94:	e7e1      	b.n	8013c5a <_dtoa_r+0xa42>
 8013c96:	9b05      	ldr	r3, [sp, #20]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	db04      	blt.n	8013ca6 <_dtoa_r+0xa8e>
 8013c9c:	9907      	ldr	r1, [sp, #28]
 8013c9e:	430b      	orrs	r3, r1
 8013ca0:	9906      	ldr	r1, [sp, #24]
 8013ca2:	430b      	orrs	r3, r1
 8013ca4:	d120      	bne.n	8013ce8 <_dtoa_r+0xad0>
 8013ca6:	2a00      	cmp	r2, #0
 8013ca8:	dded      	ble.n	8013c86 <_dtoa_r+0xa6e>
 8013caa:	4651      	mov	r1, sl
 8013cac:	2201      	movs	r2, #1
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f000 fbb4 	bl	801441c <__lshift>
 8013cb4:	4631      	mov	r1, r6
 8013cb6:	4682      	mov	sl, r0
 8013cb8:	f000 fc1c 	bl	80144f4 <__mcmp>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	dc03      	bgt.n	8013cc8 <_dtoa_r+0xab0>
 8013cc0:	d1e1      	bne.n	8013c86 <_dtoa_r+0xa6e>
 8013cc2:	f019 0f01 	tst.w	r9, #1
 8013cc6:	d0de      	beq.n	8013c86 <_dtoa_r+0xa6e>
 8013cc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013ccc:	d1d8      	bne.n	8013c80 <_dtoa_r+0xa68>
 8013cce:	9a01      	ldr	r2, [sp, #4]
 8013cd0:	2339      	movs	r3, #57	; 0x39
 8013cd2:	7013      	strb	r3, [r2, #0]
 8013cd4:	462b      	mov	r3, r5
 8013cd6:	461d      	mov	r5, r3
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013cde:	2a39      	cmp	r2, #57	; 0x39
 8013ce0:	d06c      	beq.n	8013dbc <_dtoa_r+0xba4>
 8013ce2:	3201      	adds	r2, #1
 8013ce4:	701a      	strb	r2, [r3, #0]
 8013ce6:	e747      	b.n	8013b78 <_dtoa_r+0x960>
 8013ce8:	2a00      	cmp	r2, #0
 8013cea:	dd07      	ble.n	8013cfc <_dtoa_r+0xae4>
 8013cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013cf0:	d0ed      	beq.n	8013cce <_dtoa_r+0xab6>
 8013cf2:	9a01      	ldr	r2, [sp, #4]
 8013cf4:	f109 0301 	add.w	r3, r9, #1
 8013cf8:	7013      	strb	r3, [r2, #0]
 8013cfa:	e73d      	b.n	8013b78 <_dtoa_r+0x960>
 8013cfc:	9b04      	ldr	r3, [sp, #16]
 8013cfe:	9a08      	ldr	r2, [sp, #32]
 8013d00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d043      	beq.n	8013d90 <_dtoa_r+0xb78>
 8013d08:	4651      	mov	r1, sl
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	220a      	movs	r2, #10
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f000 f9d6 	bl	80140c0 <__multadd>
 8013d14:	45b8      	cmp	r8, r7
 8013d16:	4682      	mov	sl, r0
 8013d18:	f04f 0300 	mov.w	r3, #0
 8013d1c:	f04f 020a 	mov.w	r2, #10
 8013d20:	4641      	mov	r1, r8
 8013d22:	4620      	mov	r0, r4
 8013d24:	d107      	bne.n	8013d36 <_dtoa_r+0xb1e>
 8013d26:	f000 f9cb 	bl	80140c0 <__multadd>
 8013d2a:	4680      	mov	r8, r0
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	9b04      	ldr	r3, [sp, #16]
 8013d30:	3301      	adds	r3, #1
 8013d32:	9304      	str	r3, [sp, #16]
 8013d34:	e775      	b.n	8013c22 <_dtoa_r+0xa0a>
 8013d36:	f000 f9c3 	bl	80140c0 <__multadd>
 8013d3a:	4639      	mov	r1, r7
 8013d3c:	4680      	mov	r8, r0
 8013d3e:	2300      	movs	r3, #0
 8013d40:	220a      	movs	r2, #10
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 f9bc 	bl	80140c0 <__multadd>
 8013d48:	4607      	mov	r7, r0
 8013d4a:	e7f0      	b.n	8013d2e <_dtoa_r+0xb16>
 8013d4c:	9b04      	ldr	r3, [sp, #16]
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	9d00      	ldr	r5, [sp, #0]
 8013d52:	4631      	mov	r1, r6
 8013d54:	4650      	mov	r0, sl
 8013d56:	f7ff f9d6 	bl	8013106 <quorem>
 8013d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013d5e:	9b00      	ldr	r3, [sp, #0]
 8013d60:	f805 9b01 	strb.w	r9, [r5], #1
 8013d64:	1aea      	subs	r2, r5, r3
 8013d66:	9b01      	ldr	r3, [sp, #4]
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	dd07      	ble.n	8013d7c <_dtoa_r+0xb64>
 8013d6c:	4651      	mov	r1, sl
 8013d6e:	2300      	movs	r3, #0
 8013d70:	220a      	movs	r2, #10
 8013d72:	4620      	mov	r0, r4
 8013d74:	f000 f9a4 	bl	80140c0 <__multadd>
 8013d78:	4682      	mov	sl, r0
 8013d7a:	e7ea      	b.n	8013d52 <_dtoa_r+0xb3a>
 8013d7c:	9b01      	ldr	r3, [sp, #4]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	bfc8      	it	gt
 8013d82:	461d      	movgt	r5, r3
 8013d84:	9b00      	ldr	r3, [sp, #0]
 8013d86:	bfd8      	it	le
 8013d88:	2501      	movle	r5, #1
 8013d8a:	441d      	add	r5, r3
 8013d8c:	f04f 0800 	mov.w	r8, #0
 8013d90:	4651      	mov	r1, sl
 8013d92:	2201      	movs	r2, #1
 8013d94:	4620      	mov	r0, r4
 8013d96:	f000 fb41 	bl	801441c <__lshift>
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	4682      	mov	sl, r0
 8013d9e:	f000 fba9 	bl	80144f4 <__mcmp>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	dc96      	bgt.n	8013cd4 <_dtoa_r+0xabc>
 8013da6:	d102      	bne.n	8013dae <_dtoa_r+0xb96>
 8013da8:	f019 0f01 	tst.w	r9, #1
 8013dac:	d192      	bne.n	8013cd4 <_dtoa_r+0xabc>
 8013dae:	462b      	mov	r3, r5
 8013db0:	461d      	mov	r5, r3
 8013db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013db6:	2a30      	cmp	r2, #48	; 0x30
 8013db8:	d0fa      	beq.n	8013db0 <_dtoa_r+0xb98>
 8013dba:	e6dd      	b.n	8013b78 <_dtoa_r+0x960>
 8013dbc:	9a00      	ldr	r2, [sp, #0]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d189      	bne.n	8013cd6 <_dtoa_r+0xabe>
 8013dc2:	f10b 0b01 	add.w	fp, fp, #1
 8013dc6:	2331      	movs	r3, #49	; 0x31
 8013dc8:	e796      	b.n	8013cf8 <_dtoa_r+0xae0>
 8013dca:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <_dtoa_r+0xbdc>)
 8013dcc:	f7ff ba99 	b.w	8013302 <_dtoa_r+0xea>
 8013dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f47f aa6d 	bne.w	80132b2 <_dtoa_r+0x9a>
 8013dd8:	4b07      	ldr	r3, [pc, #28]	; (8013df8 <_dtoa_r+0xbe0>)
 8013dda:	f7ff ba92 	b.w	8013302 <_dtoa_r+0xea>
 8013dde:	9b01      	ldr	r3, [sp, #4]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	dcb5      	bgt.n	8013d50 <_dtoa_r+0xb38>
 8013de4:	9b07      	ldr	r3, [sp, #28]
 8013de6:	2b02      	cmp	r3, #2
 8013de8:	f73f aeb1 	bgt.w	8013b4e <_dtoa_r+0x936>
 8013dec:	e7b0      	b.n	8013d50 <_dtoa_r+0xb38>
 8013dee:	bf00      	nop
 8013df0:	080169cd 	.word	0x080169cd
 8013df4:	0801692d 	.word	0x0801692d
 8013df8:	08016951 	.word	0x08016951

08013dfc <_free_r>:
 8013dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dfe:	2900      	cmp	r1, #0
 8013e00:	d044      	beq.n	8013e8c <_free_r+0x90>
 8013e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e06:	9001      	str	r0, [sp, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8013e0e:	bfb8      	it	lt
 8013e10:	18e4      	addlt	r4, r4, r3
 8013e12:	f000 f8e7 	bl	8013fe4 <__malloc_lock>
 8013e16:	4a1e      	ldr	r2, [pc, #120]	; (8013e90 <_free_r+0x94>)
 8013e18:	9801      	ldr	r0, [sp, #4]
 8013e1a:	6813      	ldr	r3, [r2, #0]
 8013e1c:	b933      	cbnz	r3, 8013e2c <_free_r+0x30>
 8013e1e:	6063      	str	r3, [r4, #4]
 8013e20:	6014      	str	r4, [r2, #0]
 8013e22:	b003      	add	sp, #12
 8013e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e28:	f000 b8e2 	b.w	8013ff0 <__malloc_unlock>
 8013e2c:	42a3      	cmp	r3, r4
 8013e2e:	d908      	bls.n	8013e42 <_free_r+0x46>
 8013e30:	6825      	ldr	r5, [r4, #0]
 8013e32:	1961      	adds	r1, r4, r5
 8013e34:	428b      	cmp	r3, r1
 8013e36:	bf01      	itttt	eq
 8013e38:	6819      	ldreq	r1, [r3, #0]
 8013e3a:	685b      	ldreq	r3, [r3, #4]
 8013e3c:	1949      	addeq	r1, r1, r5
 8013e3e:	6021      	streq	r1, [r4, #0]
 8013e40:	e7ed      	b.n	8013e1e <_free_r+0x22>
 8013e42:	461a      	mov	r2, r3
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	b10b      	cbz	r3, 8013e4c <_free_r+0x50>
 8013e48:	42a3      	cmp	r3, r4
 8013e4a:	d9fa      	bls.n	8013e42 <_free_r+0x46>
 8013e4c:	6811      	ldr	r1, [r2, #0]
 8013e4e:	1855      	adds	r5, r2, r1
 8013e50:	42a5      	cmp	r5, r4
 8013e52:	d10b      	bne.n	8013e6c <_free_r+0x70>
 8013e54:	6824      	ldr	r4, [r4, #0]
 8013e56:	4421      	add	r1, r4
 8013e58:	1854      	adds	r4, r2, r1
 8013e5a:	42a3      	cmp	r3, r4
 8013e5c:	6011      	str	r1, [r2, #0]
 8013e5e:	d1e0      	bne.n	8013e22 <_free_r+0x26>
 8013e60:	681c      	ldr	r4, [r3, #0]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	6053      	str	r3, [r2, #4]
 8013e66:	440c      	add	r4, r1
 8013e68:	6014      	str	r4, [r2, #0]
 8013e6a:	e7da      	b.n	8013e22 <_free_r+0x26>
 8013e6c:	d902      	bls.n	8013e74 <_free_r+0x78>
 8013e6e:	230c      	movs	r3, #12
 8013e70:	6003      	str	r3, [r0, #0]
 8013e72:	e7d6      	b.n	8013e22 <_free_r+0x26>
 8013e74:	6825      	ldr	r5, [r4, #0]
 8013e76:	1961      	adds	r1, r4, r5
 8013e78:	428b      	cmp	r3, r1
 8013e7a:	bf04      	itt	eq
 8013e7c:	6819      	ldreq	r1, [r3, #0]
 8013e7e:	685b      	ldreq	r3, [r3, #4]
 8013e80:	6063      	str	r3, [r4, #4]
 8013e82:	bf04      	itt	eq
 8013e84:	1949      	addeq	r1, r1, r5
 8013e86:	6021      	streq	r1, [r4, #0]
 8013e88:	6054      	str	r4, [r2, #4]
 8013e8a:	e7ca      	b.n	8013e22 <_free_r+0x26>
 8013e8c:	b003      	add	sp, #12
 8013e8e:	bd30      	pop	{r4, r5, pc}
 8013e90:	2000af90 	.word	0x2000af90

08013e94 <malloc>:
 8013e94:	4b02      	ldr	r3, [pc, #8]	; (8013ea0 <malloc+0xc>)
 8013e96:	4601      	mov	r1, r0
 8013e98:	6818      	ldr	r0, [r3, #0]
 8013e9a:	f000 b823 	b.w	8013ee4 <_malloc_r>
 8013e9e:	bf00      	nop
 8013ea0:	2000043c 	.word	0x2000043c

08013ea4 <sbrk_aligned>:
 8013ea4:	b570      	push	{r4, r5, r6, lr}
 8013ea6:	4e0e      	ldr	r6, [pc, #56]	; (8013ee0 <sbrk_aligned+0x3c>)
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	6831      	ldr	r1, [r6, #0]
 8013eac:	4605      	mov	r5, r0
 8013eae:	b911      	cbnz	r1, 8013eb6 <sbrk_aligned+0x12>
 8013eb0:	f000 fe1c 	bl	8014aec <_sbrk_r>
 8013eb4:	6030      	str	r0, [r6, #0]
 8013eb6:	4621      	mov	r1, r4
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f000 fe17 	bl	8014aec <_sbrk_r>
 8013ebe:	1c43      	adds	r3, r0, #1
 8013ec0:	d00a      	beq.n	8013ed8 <sbrk_aligned+0x34>
 8013ec2:	1cc4      	adds	r4, r0, #3
 8013ec4:	f024 0403 	bic.w	r4, r4, #3
 8013ec8:	42a0      	cmp	r0, r4
 8013eca:	d007      	beq.n	8013edc <sbrk_aligned+0x38>
 8013ecc:	1a21      	subs	r1, r4, r0
 8013ece:	4628      	mov	r0, r5
 8013ed0:	f000 fe0c 	bl	8014aec <_sbrk_r>
 8013ed4:	3001      	adds	r0, #1
 8013ed6:	d101      	bne.n	8013edc <sbrk_aligned+0x38>
 8013ed8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013edc:	4620      	mov	r0, r4
 8013ede:	bd70      	pop	{r4, r5, r6, pc}
 8013ee0:	2000af94 	.word	0x2000af94

08013ee4 <_malloc_r>:
 8013ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ee8:	1ccd      	adds	r5, r1, #3
 8013eea:	f025 0503 	bic.w	r5, r5, #3
 8013eee:	3508      	adds	r5, #8
 8013ef0:	2d0c      	cmp	r5, #12
 8013ef2:	bf38      	it	cc
 8013ef4:	250c      	movcc	r5, #12
 8013ef6:	2d00      	cmp	r5, #0
 8013ef8:	4607      	mov	r7, r0
 8013efa:	db01      	blt.n	8013f00 <_malloc_r+0x1c>
 8013efc:	42a9      	cmp	r1, r5
 8013efe:	d905      	bls.n	8013f0c <_malloc_r+0x28>
 8013f00:	230c      	movs	r3, #12
 8013f02:	603b      	str	r3, [r7, #0]
 8013f04:	2600      	movs	r6, #0
 8013f06:	4630      	mov	r0, r6
 8013f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013fe0 <_malloc_r+0xfc>
 8013f10:	f000 f868 	bl	8013fe4 <__malloc_lock>
 8013f14:	f8d8 3000 	ldr.w	r3, [r8]
 8013f18:	461c      	mov	r4, r3
 8013f1a:	bb5c      	cbnz	r4, 8013f74 <_malloc_r+0x90>
 8013f1c:	4629      	mov	r1, r5
 8013f1e:	4638      	mov	r0, r7
 8013f20:	f7ff ffc0 	bl	8013ea4 <sbrk_aligned>
 8013f24:	1c43      	adds	r3, r0, #1
 8013f26:	4604      	mov	r4, r0
 8013f28:	d155      	bne.n	8013fd6 <_malloc_r+0xf2>
 8013f2a:	f8d8 4000 	ldr.w	r4, [r8]
 8013f2e:	4626      	mov	r6, r4
 8013f30:	2e00      	cmp	r6, #0
 8013f32:	d145      	bne.n	8013fc0 <_malloc_r+0xdc>
 8013f34:	2c00      	cmp	r4, #0
 8013f36:	d048      	beq.n	8013fca <_malloc_r+0xe6>
 8013f38:	6823      	ldr	r3, [r4, #0]
 8013f3a:	4631      	mov	r1, r6
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	eb04 0903 	add.w	r9, r4, r3
 8013f42:	f000 fdd3 	bl	8014aec <_sbrk_r>
 8013f46:	4581      	cmp	r9, r0
 8013f48:	d13f      	bne.n	8013fca <_malloc_r+0xe6>
 8013f4a:	6821      	ldr	r1, [r4, #0]
 8013f4c:	1a6d      	subs	r5, r5, r1
 8013f4e:	4629      	mov	r1, r5
 8013f50:	4638      	mov	r0, r7
 8013f52:	f7ff ffa7 	bl	8013ea4 <sbrk_aligned>
 8013f56:	3001      	adds	r0, #1
 8013f58:	d037      	beq.n	8013fca <_malloc_r+0xe6>
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	442b      	add	r3, r5
 8013f5e:	6023      	str	r3, [r4, #0]
 8013f60:	f8d8 3000 	ldr.w	r3, [r8]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d038      	beq.n	8013fda <_malloc_r+0xf6>
 8013f68:	685a      	ldr	r2, [r3, #4]
 8013f6a:	42a2      	cmp	r2, r4
 8013f6c:	d12b      	bne.n	8013fc6 <_malloc_r+0xe2>
 8013f6e:	2200      	movs	r2, #0
 8013f70:	605a      	str	r2, [r3, #4]
 8013f72:	e00f      	b.n	8013f94 <_malloc_r+0xb0>
 8013f74:	6822      	ldr	r2, [r4, #0]
 8013f76:	1b52      	subs	r2, r2, r5
 8013f78:	d41f      	bmi.n	8013fba <_malloc_r+0xd6>
 8013f7a:	2a0b      	cmp	r2, #11
 8013f7c:	d917      	bls.n	8013fae <_malloc_r+0xca>
 8013f7e:	1961      	adds	r1, r4, r5
 8013f80:	42a3      	cmp	r3, r4
 8013f82:	6025      	str	r5, [r4, #0]
 8013f84:	bf18      	it	ne
 8013f86:	6059      	strne	r1, [r3, #4]
 8013f88:	6863      	ldr	r3, [r4, #4]
 8013f8a:	bf08      	it	eq
 8013f8c:	f8c8 1000 	streq.w	r1, [r8]
 8013f90:	5162      	str	r2, [r4, r5]
 8013f92:	604b      	str	r3, [r1, #4]
 8013f94:	4638      	mov	r0, r7
 8013f96:	f104 060b 	add.w	r6, r4, #11
 8013f9a:	f000 f829 	bl	8013ff0 <__malloc_unlock>
 8013f9e:	f026 0607 	bic.w	r6, r6, #7
 8013fa2:	1d23      	adds	r3, r4, #4
 8013fa4:	1af2      	subs	r2, r6, r3
 8013fa6:	d0ae      	beq.n	8013f06 <_malloc_r+0x22>
 8013fa8:	1b9b      	subs	r3, r3, r6
 8013faa:	50a3      	str	r3, [r4, r2]
 8013fac:	e7ab      	b.n	8013f06 <_malloc_r+0x22>
 8013fae:	42a3      	cmp	r3, r4
 8013fb0:	6862      	ldr	r2, [r4, #4]
 8013fb2:	d1dd      	bne.n	8013f70 <_malloc_r+0x8c>
 8013fb4:	f8c8 2000 	str.w	r2, [r8]
 8013fb8:	e7ec      	b.n	8013f94 <_malloc_r+0xb0>
 8013fba:	4623      	mov	r3, r4
 8013fbc:	6864      	ldr	r4, [r4, #4]
 8013fbe:	e7ac      	b.n	8013f1a <_malloc_r+0x36>
 8013fc0:	4634      	mov	r4, r6
 8013fc2:	6876      	ldr	r6, [r6, #4]
 8013fc4:	e7b4      	b.n	8013f30 <_malloc_r+0x4c>
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	e7cc      	b.n	8013f64 <_malloc_r+0x80>
 8013fca:	230c      	movs	r3, #12
 8013fcc:	603b      	str	r3, [r7, #0]
 8013fce:	4638      	mov	r0, r7
 8013fd0:	f000 f80e 	bl	8013ff0 <__malloc_unlock>
 8013fd4:	e797      	b.n	8013f06 <_malloc_r+0x22>
 8013fd6:	6025      	str	r5, [r4, #0]
 8013fd8:	e7dc      	b.n	8013f94 <_malloc_r+0xb0>
 8013fda:	605b      	str	r3, [r3, #4]
 8013fdc:	deff      	udf	#255	; 0xff
 8013fde:	bf00      	nop
 8013fe0:	2000af90 	.word	0x2000af90

08013fe4 <__malloc_lock>:
 8013fe4:	4801      	ldr	r0, [pc, #4]	; (8013fec <__malloc_lock+0x8>)
 8013fe6:	f7ff b87e 	b.w	80130e6 <__retarget_lock_acquire_recursive>
 8013fea:	bf00      	nop
 8013fec:	2000af8c 	.word	0x2000af8c

08013ff0 <__malloc_unlock>:
 8013ff0:	4801      	ldr	r0, [pc, #4]	; (8013ff8 <__malloc_unlock+0x8>)
 8013ff2:	f7ff b879 	b.w	80130e8 <__retarget_lock_release_recursive>
 8013ff6:	bf00      	nop
 8013ff8:	2000af8c 	.word	0x2000af8c

08013ffc <_Balloc>:
 8013ffc:	b570      	push	{r4, r5, r6, lr}
 8013ffe:	69c6      	ldr	r6, [r0, #28]
 8014000:	4604      	mov	r4, r0
 8014002:	460d      	mov	r5, r1
 8014004:	b976      	cbnz	r6, 8014024 <_Balloc+0x28>
 8014006:	2010      	movs	r0, #16
 8014008:	f7ff ff44 	bl	8013e94 <malloc>
 801400c:	4602      	mov	r2, r0
 801400e:	61e0      	str	r0, [r4, #28]
 8014010:	b920      	cbnz	r0, 801401c <_Balloc+0x20>
 8014012:	4b18      	ldr	r3, [pc, #96]	; (8014074 <_Balloc+0x78>)
 8014014:	4818      	ldr	r0, [pc, #96]	; (8014078 <_Balloc+0x7c>)
 8014016:	216b      	movs	r1, #107	; 0x6b
 8014018:	f000 fd78 	bl	8014b0c <__assert_func>
 801401c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014020:	6006      	str	r6, [r0, #0]
 8014022:	60c6      	str	r6, [r0, #12]
 8014024:	69e6      	ldr	r6, [r4, #28]
 8014026:	68f3      	ldr	r3, [r6, #12]
 8014028:	b183      	cbz	r3, 801404c <_Balloc+0x50>
 801402a:	69e3      	ldr	r3, [r4, #28]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014032:	b9b8      	cbnz	r0, 8014064 <_Balloc+0x68>
 8014034:	2101      	movs	r1, #1
 8014036:	fa01 f605 	lsl.w	r6, r1, r5
 801403a:	1d72      	adds	r2, r6, #5
 801403c:	0092      	lsls	r2, r2, #2
 801403e:	4620      	mov	r0, r4
 8014040:	f000 fd82 	bl	8014b48 <_calloc_r>
 8014044:	b160      	cbz	r0, 8014060 <_Balloc+0x64>
 8014046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801404a:	e00e      	b.n	801406a <_Balloc+0x6e>
 801404c:	2221      	movs	r2, #33	; 0x21
 801404e:	2104      	movs	r1, #4
 8014050:	4620      	mov	r0, r4
 8014052:	f000 fd79 	bl	8014b48 <_calloc_r>
 8014056:	69e3      	ldr	r3, [r4, #28]
 8014058:	60f0      	str	r0, [r6, #12]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d1e4      	bne.n	801402a <_Balloc+0x2e>
 8014060:	2000      	movs	r0, #0
 8014062:	bd70      	pop	{r4, r5, r6, pc}
 8014064:	6802      	ldr	r2, [r0, #0]
 8014066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801406a:	2300      	movs	r3, #0
 801406c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014070:	e7f7      	b.n	8014062 <_Balloc+0x66>
 8014072:	bf00      	nop
 8014074:	0801695e 	.word	0x0801695e
 8014078:	080169de 	.word	0x080169de

0801407c <_Bfree>:
 801407c:	b570      	push	{r4, r5, r6, lr}
 801407e:	69c6      	ldr	r6, [r0, #28]
 8014080:	4605      	mov	r5, r0
 8014082:	460c      	mov	r4, r1
 8014084:	b976      	cbnz	r6, 80140a4 <_Bfree+0x28>
 8014086:	2010      	movs	r0, #16
 8014088:	f7ff ff04 	bl	8013e94 <malloc>
 801408c:	4602      	mov	r2, r0
 801408e:	61e8      	str	r0, [r5, #28]
 8014090:	b920      	cbnz	r0, 801409c <_Bfree+0x20>
 8014092:	4b09      	ldr	r3, [pc, #36]	; (80140b8 <_Bfree+0x3c>)
 8014094:	4809      	ldr	r0, [pc, #36]	; (80140bc <_Bfree+0x40>)
 8014096:	218f      	movs	r1, #143	; 0x8f
 8014098:	f000 fd38 	bl	8014b0c <__assert_func>
 801409c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140a0:	6006      	str	r6, [r0, #0]
 80140a2:	60c6      	str	r6, [r0, #12]
 80140a4:	b13c      	cbz	r4, 80140b6 <_Bfree+0x3a>
 80140a6:	69eb      	ldr	r3, [r5, #28]
 80140a8:	6862      	ldr	r2, [r4, #4]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80140b0:	6021      	str	r1, [r4, #0]
 80140b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80140b6:	bd70      	pop	{r4, r5, r6, pc}
 80140b8:	0801695e 	.word	0x0801695e
 80140bc:	080169de 	.word	0x080169de

080140c0 <__multadd>:
 80140c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c4:	690d      	ldr	r5, [r1, #16]
 80140c6:	4607      	mov	r7, r0
 80140c8:	460c      	mov	r4, r1
 80140ca:	461e      	mov	r6, r3
 80140cc:	f101 0c14 	add.w	ip, r1, #20
 80140d0:	2000      	movs	r0, #0
 80140d2:	f8dc 3000 	ldr.w	r3, [ip]
 80140d6:	b299      	uxth	r1, r3
 80140d8:	fb02 6101 	mla	r1, r2, r1, r6
 80140dc:	0c1e      	lsrs	r6, r3, #16
 80140de:	0c0b      	lsrs	r3, r1, #16
 80140e0:	fb02 3306 	mla	r3, r2, r6, r3
 80140e4:	b289      	uxth	r1, r1
 80140e6:	3001      	adds	r0, #1
 80140e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80140ec:	4285      	cmp	r5, r0
 80140ee:	f84c 1b04 	str.w	r1, [ip], #4
 80140f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80140f6:	dcec      	bgt.n	80140d2 <__multadd+0x12>
 80140f8:	b30e      	cbz	r6, 801413e <__multadd+0x7e>
 80140fa:	68a3      	ldr	r3, [r4, #8]
 80140fc:	42ab      	cmp	r3, r5
 80140fe:	dc19      	bgt.n	8014134 <__multadd+0x74>
 8014100:	6861      	ldr	r1, [r4, #4]
 8014102:	4638      	mov	r0, r7
 8014104:	3101      	adds	r1, #1
 8014106:	f7ff ff79 	bl	8013ffc <_Balloc>
 801410a:	4680      	mov	r8, r0
 801410c:	b928      	cbnz	r0, 801411a <__multadd+0x5a>
 801410e:	4602      	mov	r2, r0
 8014110:	4b0c      	ldr	r3, [pc, #48]	; (8014144 <__multadd+0x84>)
 8014112:	480d      	ldr	r0, [pc, #52]	; (8014148 <__multadd+0x88>)
 8014114:	21ba      	movs	r1, #186	; 0xba
 8014116:	f000 fcf9 	bl	8014b0c <__assert_func>
 801411a:	6922      	ldr	r2, [r4, #16]
 801411c:	3202      	adds	r2, #2
 801411e:	f104 010c 	add.w	r1, r4, #12
 8014122:	0092      	lsls	r2, r2, #2
 8014124:	300c      	adds	r0, #12
 8014126:	f7fe ffe0 	bl	80130ea <memcpy>
 801412a:	4621      	mov	r1, r4
 801412c:	4638      	mov	r0, r7
 801412e:	f7ff ffa5 	bl	801407c <_Bfree>
 8014132:	4644      	mov	r4, r8
 8014134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014138:	3501      	adds	r5, #1
 801413a:	615e      	str	r6, [r3, #20]
 801413c:	6125      	str	r5, [r4, #16]
 801413e:	4620      	mov	r0, r4
 8014140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014144:	080169cd 	.word	0x080169cd
 8014148:	080169de 	.word	0x080169de

0801414c <__hi0bits>:
 801414c:	0c03      	lsrs	r3, r0, #16
 801414e:	041b      	lsls	r3, r3, #16
 8014150:	b9d3      	cbnz	r3, 8014188 <__hi0bits+0x3c>
 8014152:	0400      	lsls	r0, r0, #16
 8014154:	2310      	movs	r3, #16
 8014156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801415a:	bf04      	itt	eq
 801415c:	0200      	lsleq	r0, r0, #8
 801415e:	3308      	addeq	r3, #8
 8014160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014164:	bf04      	itt	eq
 8014166:	0100      	lsleq	r0, r0, #4
 8014168:	3304      	addeq	r3, #4
 801416a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801416e:	bf04      	itt	eq
 8014170:	0080      	lsleq	r0, r0, #2
 8014172:	3302      	addeq	r3, #2
 8014174:	2800      	cmp	r0, #0
 8014176:	db05      	blt.n	8014184 <__hi0bits+0x38>
 8014178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801417c:	f103 0301 	add.w	r3, r3, #1
 8014180:	bf08      	it	eq
 8014182:	2320      	moveq	r3, #32
 8014184:	4618      	mov	r0, r3
 8014186:	4770      	bx	lr
 8014188:	2300      	movs	r3, #0
 801418a:	e7e4      	b.n	8014156 <__hi0bits+0xa>

0801418c <__lo0bits>:
 801418c:	6803      	ldr	r3, [r0, #0]
 801418e:	f013 0207 	ands.w	r2, r3, #7
 8014192:	d00c      	beq.n	80141ae <__lo0bits+0x22>
 8014194:	07d9      	lsls	r1, r3, #31
 8014196:	d422      	bmi.n	80141de <__lo0bits+0x52>
 8014198:	079a      	lsls	r2, r3, #30
 801419a:	bf49      	itett	mi
 801419c:	085b      	lsrmi	r3, r3, #1
 801419e:	089b      	lsrpl	r3, r3, #2
 80141a0:	6003      	strmi	r3, [r0, #0]
 80141a2:	2201      	movmi	r2, #1
 80141a4:	bf5c      	itt	pl
 80141a6:	6003      	strpl	r3, [r0, #0]
 80141a8:	2202      	movpl	r2, #2
 80141aa:	4610      	mov	r0, r2
 80141ac:	4770      	bx	lr
 80141ae:	b299      	uxth	r1, r3
 80141b0:	b909      	cbnz	r1, 80141b6 <__lo0bits+0x2a>
 80141b2:	0c1b      	lsrs	r3, r3, #16
 80141b4:	2210      	movs	r2, #16
 80141b6:	b2d9      	uxtb	r1, r3
 80141b8:	b909      	cbnz	r1, 80141be <__lo0bits+0x32>
 80141ba:	3208      	adds	r2, #8
 80141bc:	0a1b      	lsrs	r3, r3, #8
 80141be:	0719      	lsls	r1, r3, #28
 80141c0:	bf04      	itt	eq
 80141c2:	091b      	lsreq	r3, r3, #4
 80141c4:	3204      	addeq	r2, #4
 80141c6:	0799      	lsls	r1, r3, #30
 80141c8:	bf04      	itt	eq
 80141ca:	089b      	lsreq	r3, r3, #2
 80141cc:	3202      	addeq	r2, #2
 80141ce:	07d9      	lsls	r1, r3, #31
 80141d0:	d403      	bmi.n	80141da <__lo0bits+0x4e>
 80141d2:	085b      	lsrs	r3, r3, #1
 80141d4:	f102 0201 	add.w	r2, r2, #1
 80141d8:	d003      	beq.n	80141e2 <__lo0bits+0x56>
 80141da:	6003      	str	r3, [r0, #0]
 80141dc:	e7e5      	b.n	80141aa <__lo0bits+0x1e>
 80141de:	2200      	movs	r2, #0
 80141e0:	e7e3      	b.n	80141aa <__lo0bits+0x1e>
 80141e2:	2220      	movs	r2, #32
 80141e4:	e7e1      	b.n	80141aa <__lo0bits+0x1e>
	...

080141e8 <__i2b>:
 80141e8:	b510      	push	{r4, lr}
 80141ea:	460c      	mov	r4, r1
 80141ec:	2101      	movs	r1, #1
 80141ee:	f7ff ff05 	bl	8013ffc <_Balloc>
 80141f2:	4602      	mov	r2, r0
 80141f4:	b928      	cbnz	r0, 8014202 <__i2b+0x1a>
 80141f6:	4b05      	ldr	r3, [pc, #20]	; (801420c <__i2b+0x24>)
 80141f8:	4805      	ldr	r0, [pc, #20]	; (8014210 <__i2b+0x28>)
 80141fa:	f240 1145 	movw	r1, #325	; 0x145
 80141fe:	f000 fc85 	bl	8014b0c <__assert_func>
 8014202:	2301      	movs	r3, #1
 8014204:	6144      	str	r4, [r0, #20]
 8014206:	6103      	str	r3, [r0, #16]
 8014208:	bd10      	pop	{r4, pc}
 801420a:	bf00      	nop
 801420c:	080169cd 	.word	0x080169cd
 8014210:	080169de 	.word	0x080169de

08014214 <__multiply>:
 8014214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014218:	4691      	mov	r9, r2
 801421a:	690a      	ldr	r2, [r1, #16]
 801421c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014220:	429a      	cmp	r2, r3
 8014222:	bfb8      	it	lt
 8014224:	460b      	movlt	r3, r1
 8014226:	460c      	mov	r4, r1
 8014228:	bfbc      	itt	lt
 801422a:	464c      	movlt	r4, r9
 801422c:	4699      	movlt	r9, r3
 801422e:	6927      	ldr	r7, [r4, #16]
 8014230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014234:	68a3      	ldr	r3, [r4, #8]
 8014236:	6861      	ldr	r1, [r4, #4]
 8014238:	eb07 060a 	add.w	r6, r7, sl
 801423c:	42b3      	cmp	r3, r6
 801423e:	b085      	sub	sp, #20
 8014240:	bfb8      	it	lt
 8014242:	3101      	addlt	r1, #1
 8014244:	f7ff feda 	bl	8013ffc <_Balloc>
 8014248:	b930      	cbnz	r0, 8014258 <__multiply+0x44>
 801424a:	4602      	mov	r2, r0
 801424c:	4b44      	ldr	r3, [pc, #272]	; (8014360 <__multiply+0x14c>)
 801424e:	4845      	ldr	r0, [pc, #276]	; (8014364 <__multiply+0x150>)
 8014250:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014254:	f000 fc5a 	bl	8014b0c <__assert_func>
 8014258:	f100 0514 	add.w	r5, r0, #20
 801425c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014260:	462b      	mov	r3, r5
 8014262:	2200      	movs	r2, #0
 8014264:	4543      	cmp	r3, r8
 8014266:	d321      	bcc.n	80142ac <__multiply+0x98>
 8014268:	f104 0314 	add.w	r3, r4, #20
 801426c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014270:	f109 0314 	add.w	r3, r9, #20
 8014274:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014278:	9202      	str	r2, [sp, #8]
 801427a:	1b3a      	subs	r2, r7, r4
 801427c:	3a15      	subs	r2, #21
 801427e:	f022 0203 	bic.w	r2, r2, #3
 8014282:	3204      	adds	r2, #4
 8014284:	f104 0115 	add.w	r1, r4, #21
 8014288:	428f      	cmp	r7, r1
 801428a:	bf38      	it	cc
 801428c:	2204      	movcc	r2, #4
 801428e:	9201      	str	r2, [sp, #4]
 8014290:	9a02      	ldr	r2, [sp, #8]
 8014292:	9303      	str	r3, [sp, #12]
 8014294:	429a      	cmp	r2, r3
 8014296:	d80c      	bhi.n	80142b2 <__multiply+0x9e>
 8014298:	2e00      	cmp	r6, #0
 801429a:	dd03      	ble.n	80142a4 <__multiply+0x90>
 801429c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d05b      	beq.n	801435c <__multiply+0x148>
 80142a4:	6106      	str	r6, [r0, #16]
 80142a6:	b005      	add	sp, #20
 80142a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ac:	f843 2b04 	str.w	r2, [r3], #4
 80142b0:	e7d8      	b.n	8014264 <__multiply+0x50>
 80142b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80142b6:	f1ba 0f00 	cmp.w	sl, #0
 80142ba:	d024      	beq.n	8014306 <__multiply+0xf2>
 80142bc:	f104 0e14 	add.w	lr, r4, #20
 80142c0:	46a9      	mov	r9, r5
 80142c2:	f04f 0c00 	mov.w	ip, #0
 80142c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80142ca:	f8d9 1000 	ldr.w	r1, [r9]
 80142ce:	fa1f fb82 	uxth.w	fp, r2
 80142d2:	b289      	uxth	r1, r1
 80142d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80142d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80142dc:	f8d9 2000 	ldr.w	r2, [r9]
 80142e0:	4461      	add	r1, ip
 80142e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80142ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80142ee:	b289      	uxth	r1, r1
 80142f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80142f4:	4577      	cmp	r7, lr
 80142f6:	f849 1b04 	str.w	r1, [r9], #4
 80142fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142fe:	d8e2      	bhi.n	80142c6 <__multiply+0xb2>
 8014300:	9a01      	ldr	r2, [sp, #4]
 8014302:	f845 c002 	str.w	ip, [r5, r2]
 8014306:	9a03      	ldr	r2, [sp, #12]
 8014308:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801430c:	3304      	adds	r3, #4
 801430e:	f1b9 0f00 	cmp.w	r9, #0
 8014312:	d021      	beq.n	8014358 <__multiply+0x144>
 8014314:	6829      	ldr	r1, [r5, #0]
 8014316:	f104 0c14 	add.w	ip, r4, #20
 801431a:	46ae      	mov	lr, r5
 801431c:	f04f 0a00 	mov.w	sl, #0
 8014320:	f8bc b000 	ldrh.w	fp, [ip]
 8014324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014328:	fb09 220b 	mla	r2, r9, fp, r2
 801432c:	4452      	add	r2, sl
 801432e:	b289      	uxth	r1, r1
 8014330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014334:	f84e 1b04 	str.w	r1, [lr], #4
 8014338:	f85c 1b04 	ldr.w	r1, [ip], #4
 801433c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014340:	f8be 1000 	ldrh.w	r1, [lr]
 8014344:	fb09 110a 	mla	r1, r9, sl, r1
 8014348:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801434c:	4567      	cmp	r7, ip
 801434e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014352:	d8e5      	bhi.n	8014320 <__multiply+0x10c>
 8014354:	9a01      	ldr	r2, [sp, #4]
 8014356:	50a9      	str	r1, [r5, r2]
 8014358:	3504      	adds	r5, #4
 801435a:	e799      	b.n	8014290 <__multiply+0x7c>
 801435c:	3e01      	subs	r6, #1
 801435e:	e79b      	b.n	8014298 <__multiply+0x84>
 8014360:	080169cd 	.word	0x080169cd
 8014364:	080169de 	.word	0x080169de

08014368 <__pow5mult>:
 8014368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801436c:	4615      	mov	r5, r2
 801436e:	f012 0203 	ands.w	r2, r2, #3
 8014372:	4606      	mov	r6, r0
 8014374:	460f      	mov	r7, r1
 8014376:	d007      	beq.n	8014388 <__pow5mult+0x20>
 8014378:	4c25      	ldr	r4, [pc, #148]	; (8014410 <__pow5mult+0xa8>)
 801437a:	3a01      	subs	r2, #1
 801437c:	2300      	movs	r3, #0
 801437e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014382:	f7ff fe9d 	bl	80140c0 <__multadd>
 8014386:	4607      	mov	r7, r0
 8014388:	10ad      	asrs	r5, r5, #2
 801438a:	d03d      	beq.n	8014408 <__pow5mult+0xa0>
 801438c:	69f4      	ldr	r4, [r6, #28]
 801438e:	b97c      	cbnz	r4, 80143b0 <__pow5mult+0x48>
 8014390:	2010      	movs	r0, #16
 8014392:	f7ff fd7f 	bl	8013e94 <malloc>
 8014396:	4602      	mov	r2, r0
 8014398:	61f0      	str	r0, [r6, #28]
 801439a:	b928      	cbnz	r0, 80143a8 <__pow5mult+0x40>
 801439c:	4b1d      	ldr	r3, [pc, #116]	; (8014414 <__pow5mult+0xac>)
 801439e:	481e      	ldr	r0, [pc, #120]	; (8014418 <__pow5mult+0xb0>)
 80143a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80143a4:	f000 fbb2 	bl	8014b0c <__assert_func>
 80143a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143ac:	6004      	str	r4, [r0, #0]
 80143ae:	60c4      	str	r4, [r0, #12]
 80143b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80143b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143b8:	b94c      	cbnz	r4, 80143ce <__pow5mult+0x66>
 80143ba:	f240 2171 	movw	r1, #625	; 0x271
 80143be:	4630      	mov	r0, r6
 80143c0:	f7ff ff12 	bl	80141e8 <__i2b>
 80143c4:	2300      	movs	r3, #0
 80143c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80143ca:	4604      	mov	r4, r0
 80143cc:	6003      	str	r3, [r0, #0]
 80143ce:	f04f 0900 	mov.w	r9, #0
 80143d2:	07eb      	lsls	r3, r5, #31
 80143d4:	d50a      	bpl.n	80143ec <__pow5mult+0x84>
 80143d6:	4639      	mov	r1, r7
 80143d8:	4622      	mov	r2, r4
 80143da:	4630      	mov	r0, r6
 80143dc:	f7ff ff1a 	bl	8014214 <__multiply>
 80143e0:	4639      	mov	r1, r7
 80143e2:	4680      	mov	r8, r0
 80143e4:	4630      	mov	r0, r6
 80143e6:	f7ff fe49 	bl	801407c <_Bfree>
 80143ea:	4647      	mov	r7, r8
 80143ec:	106d      	asrs	r5, r5, #1
 80143ee:	d00b      	beq.n	8014408 <__pow5mult+0xa0>
 80143f0:	6820      	ldr	r0, [r4, #0]
 80143f2:	b938      	cbnz	r0, 8014404 <__pow5mult+0x9c>
 80143f4:	4622      	mov	r2, r4
 80143f6:	4621      	mov	r1, r4
 80143f8:	4630      	mov	r0, r6
 80143fa:	f7ff ff0b 	bl	8014214 <__multiply>
 80143fe:	6020      	str	r0, [r4, #0]
 8014400:	f8c0 9000 	str.w	r9, [r0]
 8014404:	4604      	mov	r4, r0
 8014406:	e7e4      	b.n	80143d2 <__pow5mult+0x6a>
 8014408:	4638      	mov	r0, r7
 801440a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801440e:	bf00      	nop
 8014410:	08016b28 	.word	0x08016b28
 8014414:	0801695e 	.word	0x0801695e
 8014418:	080169de 	.word	0x080169de

0801441c <__lshift>:
 801441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014420:	460c      	mov	r4, r1
 8014422:	6849      	ldr	r1, [r1, #4]
 8014424:	6923      	ldr	r3, [r4, #16]
 8014426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801442a:	68a3      	ldr	r3, [r4, #8]
 801442c:	4607      	mov	r7, r0
 801442e:	4691      	mov	r9, r2
 8014430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014434:	f108 0601 	add.w	r6, r8, #1
 8014438:	42b3      	cmp	r3, r6
 801443a:	db0b      	blt.n	8014454 <__lshift+0x38>
 801443c:	4638      	mov	r0, r7
 801443e:	f7ff fddd 	bl	8013ffc <_Balloc>
 8014442:	4605      	mov	r5, r0
 8014444:	b948      	cbnz	r0, 801445a <__lshift+0x3e>
 8014446:	4602      	mov	r2, r0
 8014448:	4b28      	ldr	r3, [pc, #160]	; (80144ec <__lshift+0xd0>)
 801444a:	4829      	ldr	r0, [pc, #164]	; (80144f0 <__lshift+0xd4>)
 801444c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014450:	f000 fb5c 	bl	8014b0c <__assert_func>
 8014454:	3101      	adds	r1, #1
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	e7ee      	b.n	8014438 <__lshift+0x1c>
 801445a:	2300      	movs	r3, #0
 801445c:	f100 0114 	add.w	r1, r0, #20
 8014460:	f100 0210 	add.w	r2, r0, #16
 8014464:	4618      	mov	r0, r3
 8014466:	4553      	cmp	r3, sl
 8014468:	db33      	blt.n	80144d2 <__lshift+0xb6>
 801446a:	6920      	ldr	r0, [r4, #16]
 801446c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014470:	f104 0314 	add.w	r3, r4, #20
 8014474:	f019 091f 	ands.w	r9, r9, #31
 8014478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801447c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014480:	d02b      	beq.n	80144da <__lshift+0xbe>
 8014482:	f1c9 0e20 	rsb	lr, r9, #32
 8014486:	468a      	mov	sl, r1
 8014488:	2200      	movs	r2, #0
 801448a:	6818      	ldr	r0, [r3, #0]
 801448c:	fa00 f009 	lsl.w	r0, r0, r9
 8014490:	4310      	orrs	r0, r2
 8014492:	f84a 0b04 	str.w	r0, [sl], #4
 8014496:	f853 2b04 	ldr.w	r2, [r3], #4
 801449a:	459c      	cmp	ip, r3
 801449c:	fa22 f20e 	lsr.w	r2, r2, lr
 80144a0:	d8f3      	bhi.n	801448a <__lshift+0x6e>
 80144a2:	ebac 0304 	sub.w	r3, ip, r4
 80144a6:	3b15      	subs	r3, #21
 80144a8:	f023 0303 	bic.w	r3, r3, #3
 80144ac:	3304      	adds	r3, #4
 80144ae:	f104 0015 	add.w	r0, r4, #21
 80144b2:	4584      	cmp	ip, r0
 80144b4:	bf38      	it	cc
 80144b6:	2304      	movcc	r3, #4
 80144b8:	50ca      	str	r2, [r1, r3]
 80144ba:	b10a      	cbz	r2, 80144c0 <__lshift+0xa4>
 80144bc:	f108 0602 	add.w	r6, r8, #2
 80144c0:	3e01      	subs	r6, #1
 80144c2:	4638      	mov	r0, r7
 80144c4:	612e      	str	r6, [r5, #16]
 80144c6:	4621      	mov	r1, r4
 80144c8:	f7ff fdd8 	bl	801407c <_Bfree>
 80144cc:	4628      	mov	r0, r5
 80144ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80144d6:	3301      	adds	r3, #1
 80144d8:	e7c5      	b.n	8014466 <__lshift+0x4a>
 80144da:	3904      	subs	r1, #4
 80144dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80144e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80144e4:	459c      	cmp	ip, r3
 80144e6:	d8f9      	bhi.n	80144dc <__lshift+0xc0>
 80144e8:	e7ea      	b.n	80144c0 <__lshift+0xa4>
 80144ea:	bf00      	nop
 80144ec:	080169cd 	.word	0x080169cd
 80144f0:	080169de 	.word	0x080169de

080144f4 <__mcmp>:
 80144f4:	b530      	push	{r4, r5, lr}
 80144f6:	6902      	ldr	r2, [r0, #16]
 80144f8:	690c      	ldr	r4, [r1, #16]
 80144fa:	1b12      	subs	r2, r2, r4
 80144fc:	d10e      	bne.n	801451c <__mcmp+0x28>
 80144fe:	f100 0314 	add.w	r3, r0, #20
 8014502:	3114      	adds	r1, #20
 8014504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801450c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014514:	42a5      	cmp	r5, r4
 8014516:	d003      	beq.n	8014520 <__mcmp+0x2c>
 8014518:	d305      	bcc.n	8014526 <__mcmp+0x32>
 801451a:	2201      	movs	r2, #1
 801451c:	4610      	mov	r0, r2
 801451e:	bd30      	pop	{r4, r5, pc}
 8014520:	4283      	cmp	r3, r0
 8014522:	d3f3      	bcc.n	801450c <__mcmp+0x18>
 8014524:	e7fa      	b.n	801451c <__mcmp+0x28>
 8014526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801452a:	e7f7      	b.n	801451c <__mcmp+0x28>

0801452c <__mdiff>:
 801452c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014530:	460c      	mov	r4, r1
 8014532:	4606      	mov	r6, r0
 8014534:	4611      	mov	r1, r2
 8014536:	4620      	mov	r0, r4
 8014538:	4690      	mov	r8, r2
 801453a:	f7ff ffdb 	bl	80144f4 <__mcmp>
 801453e:	1e05      	subs	r5, r0, #0
 8014540:	d110      	bne.n	8014564 <__mdiff+0x38>
 8014542:	4629      	mov	r1, r5
 8014544:	4630      	mov	r0, r6
 8014546:	f7ff fd59 	bl	8013ffc <_Balloc>
 801454a:	b930      	cbnz	r0, 801455a <__mdiff+0x2e>
 801454c:	4b3a      	ldr	r3, [pc, #232]	; (8014638 <__mdiff+0x10c>)
 801454e:	4602      	mov	r2, r0
 8014550:	f240 2137 	movw	r1, #567	; 0x237
 8014554:	4839      	ldr	r0, [pc, #228]	; (801463c <__mdiff+0x110>)
 8014556:	f000 fad9 	bl	8014b0c <__assert_func>
 801455a:	2301      	movs	r3, #1
 801455c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014564:	bfa4      	itt	ge
 8014566:	4643      	movge	r3, r8
 8014568:	46a0      	movge	r8, r4
 801456a:	4630      	mov	r0, r6
 801456c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014570:	bfa6      	itte	ge
 8014572:	461c      	movge	r4, r3
 8014574:	2500      	movge	r5, #0
 8014576:	2501      	movlt	r5, #1
 8014578:	f7ff fd40 	bl	8013ffc <_Balloc>
 801457c:	b920      	cbnz	r0, 8014588 <__mdiff+0x5c>
 801457e:	4b2e      	ldr	r3, [pc, #184]	; (8014638 <__mdiff+0x10c>)
 8014580:	4602      	mov	r2, r0
 8014582:	f240 2145 	movw	r1, #581	; 0x245
 8014586:	e7e5      	b.n	8014554 <__mdiff+0x28>
 8014588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801458c:	6926      	ldr	r6, [r4, #16]
 801458e:	60c5      	str	r5, [r0, #12]
 8014590:	f104 0914 	add.w	r9, r4, #20
 8014594:	f108 0514 	add.w	r5, r8, #20
 8014598:	f100 0e14 	add.w	lr, r0, #20
 801459c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80145a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80145a4:	f108 0210 	add.w	r2, r8, #16
 80145a8:	46f2      	mov	sl, lr
 80145aa:	2100      	movs	r1, #0
 80145ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80145b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80145b4:	fa11 f88b 	uxtah	r8, r1, fp
 80145b8:	b299      	uxth	r1, r3
 80145ba:	0c1b      	lsrs	r3, r3, #16
 80145bc:	eba8 0801 	sub.w	r8, r8, r1
 80145c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80145c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80145c8:	fa1f f888 	uxth.w	r8, r8
 80145cc:	1419      	asrs	r1, r3, #16
 80145ce:	454e      	cmp	r6, r9
 80145d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80145d4:	f84a 3b04 	str.w	r3, [sl], #4
 80145d8:	d8e8      	bhi.n	80145ac <__mdiff+0x80>
 80145da:	1b33      	subs	r3, r6, r4
 80145dc:	3b15      	subs	r3, #21
 80145de:	f023 0303 	bic.w	r3, r3, #3
 80145e2:	3304      	adds	r3, #4
 80145e4:	3415      	adds	r4, #21
 80145e6:	42a6      	cmp	r6, r4
 80145e8:	bf38      	it	cc
 80145ea:	2304      	movcc	r3, #4
 80145ec:	441d      	add	r5, r3
 80145ee:	4473      	add	r3, lr
 80145f0:	469e      	mov	lr, r3
 80145f2:	462e      	mov	r6, r5
 80145f4:	4566      	cmp	r6, ip
 80145f6:	d30e      	bcc.n	8014616 <__mdiff+0xea>
 80145f8:	f10c 0203 	add.w	r2, ip, #3
 80145fc:	1b52      	subs	r2, r2, r5
 80145fe:	f022 0203 	bic.w	r2, r2, #3
 8014602:	3d03      	subs	r5, #3
 8014604:	45ac      	cmp	ip, r5
 8014606:	bf38      	it	cc
 8014608:	2200      	movcc	r2, #0
 801460a:	4413      	add	r3, r2
 801460c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014610:	b17a      	cbz	r2, 8014632 <__mdiff+0x106>
 8014612:	6107      	str	r7, [r0, #16]
 8014614:	e7a4      	b.n	8014560 <__mdiff+0x34>
 8014616:	f856 8b04 	ldr.w	r8, [r6], #4
 801461a:	fa11 f288 	uxtah	r2, r1, r8
 801461e:	1414      	asrs	r4, r2, #16
 8014620:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014624:	b292      	uxth	r2, r2
 8014626:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801462a:	f84e 2b04 	str.w	r2, [lr], #4
 801462e:	1421      	asrs	r1, r4, #16
 8014630:	e7e0      	b.n	80145f4 <__mdiff+0xc8>
 8014632:	3f01      	subs	r7, #1
 8014634:	e7ea      	b.n	801460c <__mdiff+0xe0>
 8014636:	bf00      	nop
 8014638:	080169cd 	.word	0x080169cd
 801463c:	080169de 	.word	0x080169de

08014640 <__d2b>:
 8014640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014644:	460f      	mov	r7, r1
 8014646:	2101      	movs	r1, #1
 8014648:	ec59 8b10 	vmov	r8, r9, d0
 801464c:	4616      	mov	r6, r2
 801464e:	f7ff fcd5 	bl	8013ffc <_Balloc>
 8014652:	4604      	mov	r4, r0
 8014654:	b930      	cbnz	r0, 8014664 <__d2b+0x24>
 8014656:	4602      	mov	r2, r0
 8014658:	4b24      	ldr	r3, [pc, #144]	; (80146ec <__d2b+0xac>)
 801465a:	4825      	ldr	r0, [pc, #148]	; (80146f0 <__d2b+0xb0>)
 801465c:	f240 310f 	movw	r1, #783	; 0x30f
 8014660:	f000 fa54 	bl	8014b0c <__assert_func>
 8014664:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801466c:	bb2d      	cbnz	r5, 80146ba <__d2b+0x7a>
 801466e:	9301      	str	r3, [sp, #4]
 8014670:	f1b8 0300 	subs.w	r3, r8, #0
 8014674:	d026      	beq.n	80146c4 <__d2b+0x84>
 8014676:	4668      	mov	r0, sp
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	f7ff fd87 	bl	801418c <__lo0bits>
 801467e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014682:	b1e8      	cbz	r0, 80146c0 <__d2b+0x80>
 8014684:	f1c0 0320 	rsb	r3, r0, #32
 8014688:	fa02 f303 	lsl.w	r3, r2, r3
 801468c:	430b      	orrs	r3, r1
 801468e:	40c2      	lsrs	r2, r0
 8014690:	6163      	str	r3, [r4, #20]
 8014692:	9201      	str	r2, [sp, #4]
 8014694:	9b01      	ldr	r3, [sp, #4]
 8014696:	61a3      	str	r3, [r4, #24]
 8014698:	2b00      	cmp	r3, #0
 801469a:	bf14      	ite	ne
 801469c:	2202      	movne	r2, #2
 801469e:	2201      	moveq	r2, #1
 80146a0:	6122      	str	r2, [r4, #16]
 80146a2:	b1bd      	cbz	r5, 80146d4 <__d2b+0x94>
 80146a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80146a8:	4405      	add	r5, r0
 80146aa:	603d      	str	r5, [r7, #0]
 80146ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80146b0:	6030      	str	r0, [r6, #0]
 80146b2:	4620      	mov	r0, r4
 80146b4:	b003      	add	sp, #12
 80146b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146be:	e7d6      	b.n	801466e <__d2b+0x2e>
 80146c0:	6161      	str	r1, [r4, #20]
 80146c2:	e7e7      	b.n	8014694 <__d2b+0x54>
 80146c4:	a801      	add	r0, sp, #4
 80146c6:	f7ff fd61 	bl	801418c <__lo0bits>
 80146ca:	9b01      	ldr	r3, [sp, #4]
 80146cc:	6163      	str	r3, [r4, #20]
 80146ce:	3020      	adds	r0, #32
 80146d0:	2201      	movs	r2, #1
 80146d2:	e7e5      	b.n	80146a0 <__d2b+0x60>
 80146d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80146d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80146dc:	6038      	str	r0, [r7, #0]
 80146de:	6918      	ldr	r0, [r3, #16]
 80146e0:	f7ff fd34 	bl	801414c <__hi0bits>
 80146e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80146e8:	e7e2      	b.n	80146b0 <__d2b+0x70>
 80146ea:	bf00      	nop
 80146ec:	080169cd 	.word	0x080169cd
 80146f0:	080169de 	.word	0x080169de

080146f4 <__sfputc_r>:
 80146f4:	6893      	ldr	r3, [r2, #8]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	b410      	push	{r4}
 80146fc:	6093      	str	r3, [r2, #8]
 80146fe:	da08      	bge.n	8014712 <__sfputc_r+0x1e>
 8014700:	6994      	ldr	r4, [r2, #24]
 8014702:	42a3      	cmp	r3, r4
 8014704:	db01      	blt.n	801470a <__sfputc_r+0x16>
 8014706:	290a      	cmp	r1, #10
 8014708:	d103      	bne.n	8014712 <__sfputc_r+0x1e>
 801470a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801470e:	f7fe bb6e 	b.w	8012dee <__swbuf_r>
 8014712:	6813      	ldr	r3, [r2, #0]
 8014714:	1c58      	adds	r0, r3, #1
 8014716:	6010      	str	r0, [r2, #0]
 8014718:	7019      	strb	r1, [r3, #0]
 801471a:	4608      	mov	r0, r1
 801471c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014720:	4770      	bx	lr

08014722 <__sfputs_r>:
 8014722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014724:	4606      	mov	r6, r0
 8014726:	460f      	mov	r7, r1
 8014728:	4614      	mov	r4, r2
 801472a:	18d5      	adds	r5, r2, r3
 801472c:	42ac      	cmp	r4, r5
 801472e:	d101      	bne.n	8014734 <__sfputs_r+0x12>
 8014730:	2000      	movs	r0, #0
 8014732:	e007      	b.n	8014744 <__sfputs_r+0x22>
 8014734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014738:	463a      	mov	r2, r7
 801473a:	4630      	mov	r0, r6
 801473c:	f7ff ffda 	bl	80146f4 <__sfputc_r>
 8014740:	1c43      	adds	r3, r0, #1
 8014742:	d1f3      	bne.n	801472c <__sfputs_r+0xa>
 8014744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014748 <_vfiprintf_r>:
 8014748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801474c:	460d      	mov	r5, r1
 801474e:	b09d      	sub	sp, #116	; 0x74
 8014750:	4614      	mov	r4, r2
 8014752:	4698      	mov	r8, r3
 8014754:	4606      	mov	r6, r0
 8014756:	b118      	cbz	r0, 8014760 <_vfiprintf_r+0x18>
 8014758:	6a03      	ldr	r3, [r0, #32]
 801475a:	b90b      	cbnz	r3, 8014760 <_vfiprintf_r+0x18>
 801475c:	f7fe fab4 	bl	8012cc8 <__sinit>
 8014760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014762:	07d9      	lsls	r1, r3, #31
 8014764:	d405      	bmi.n	8014772 <_vfiprintf_r+0x2a>
 8014766:	89ab      	ldrh	r3, [r5, #12]
 8014768:	059a      	lsls	r2, r3, #22
 801476a:	d402      	bmi.n	8014772 <_vfiprintf_r+0x2a>
 801476c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801476e:	f7fe fcba 	bl	80130e6 <__retarget_lock_acquire_recursive>
 8014772:	89ab      	ldrh	r3, [r5, #12]
 8014774:	071b      	lsls	r3, r3, #28
 8014776:	d501      	bpl.n	801477c <_vfiprintf_r+0x34>
 8014778:	692b      	ldr	r3, [r5, #16]
 801477a:	b99b      	cbnz	r3, 80147a4 <_vfiprintf_r+0x5c>
 801477c:	4629      	mov	r1, r5
 801477e:	4630      	mov	r0, r6
 8014780:	f7fe fb72 	bl	8012e68 <__swsetup_r>
 8014784:	b170      	cbz	r0, 80147a4 <_vfiprintf_r+0x5c>
 8014786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014788:	07dc      	lsls	r4, r3, #31
 801478a:	d504      	bpl.n	8014796 <_vfiprintf_r+0x4e>
 801478c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014790:	b01d      	add	sp, #116	; 0x74
 8014792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014796:	89ab      	ldrh	r3, [r5, #12]
 8014798:	0598      	lsls	r0, r3, #22
 801479a:	d4f7      	bmi.n	801478c <_vfiprintf_r+0x44>
 801479c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801479e:	f7fe fca3 	bl	80130e8 <__retarget_lock_release_recursive>
 80147a2:	e7f3      	b.n	801478c <_vfiprintf_r+0x44>
 80147a4:	2300      	movs	r3, #0
 80147a6:	9309      	str	r3, [sp, #36]	; 0x24
 80147a8:	2320      	movs	r3, #32
 80147aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80147b2:	2330      	movs	r3, #48	; 0x30
 80147b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014968 <_vfiprintf_r+0x220>
 80147b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147bc:	f04f 0901 	mov.w	r9, #1
 80147c0:	4623      	mov	r3, r4
 80147c2:	469a      	mov	sl, r3
 80147c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147c8:	b10a      	cbz	r2, 80147ce <_vfiprintf_r+0x86>
 80147ca:	2a25      	cmp	r2, #37	; 0x25
 80147cc:	d1f9      	bne.n	80147c2 <_vfiprintf_r+0x7a>
 80147ce:	ebba 0b04 	subs.w	fp, sl, r4
 80147d2:	d00b      	beq.n	80147ec <_vfiprintf_r+0xa4>
 80147d4:	465b      	mov	r3, fp
 80147d6:	4622      	mov	r2, r4
 80147d8:	4629      	mov	r1, r5
 80147da:	4630      	mov	r0, r6
 80147dc:	f7ff ffa1 	bl	8014722 <__sfputs_r>
 80147e0:	3001      	adds	r0, #1
 80147e2:	f000 80a9 	beq.w	8014938 <_vfiprintf_r+0x1f0>
 80147e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147e8:	445a      	add	r2, fp
 80147ea:	9209      	str	r2, [sp, #36]	; 0x24
 80147ec:	f89a 3000 	ldrb.w	r3, [sl]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f000 80a1 	beq.w	8014938 <_vfiprintf_r+0x1f0>
 80147f6:	2300      	movs	r3, #0
 80147f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014800:	f10a 0a01 	add.w	sl, sl, #1
 8014804:	9304      	str	r3, [sp, #16]
 8014806:	9307      	str	r3, [sp, #28]
 8014808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801480c:	931a      	str	r3, [sp, #104]	; 0x68
 801480e:	4654      	mov	r4, sl
 8014810:	2205      	movs	r2, #5
 8014812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014816:	4854      	ldr	r0, [pc, #336]	; (8014968 <_vfiprintf_r+0x220>)
 8014818:	f7eb fcea 	bl	80001f0 <memchr>
 801481c:	9a04      	ldr	r2, [sp, #16]
 801481e:	b9d8      	cbnz	r0, 8014858 <_vfiprintf_r+0x110>
 8014820:	06d1      	lsls	r1, r2, #27
 8014822:	bf44      	itt	mi
 8014824:	2320      	movmi	r3, #32
 8014826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801482a:	0713      	lsls	r3, r2, #28
 801482c:	bf44      	itt	mi
 801482e:	232b      	movmi	r3, #43	; 0x2b
 8014830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014834:	f89a 3000 	ldrb.w	r3, [sl]
 8014838:	2b2a      	cmp	r3, #42	; 0x2a
 801483a:	d015      	beq.n	8014868 <_vfiprintf_r+0x120>
 801483c:	9a07      	ldr	r2, [sp, #28]
 801483e:	4654      	mov	r4, sl
 8014840:	2000      	movs	r0, #0
 8014842:	f04f 0c0a 	mov.w	ip, #10
 8014846:	4621      	mov	r1, r4
 8014848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801484c:	3b30      	subs	r3, #48	; 0x30
 801484e:	2b09      	cmp	r3, #9
 8014850:	d94d      	bls.n	80148ee <_vfiprintf_r+0x1a6>
 8014852:	b1b0      	cbz	r0, 8014882 <_vfiprintf_r+0x13a>
 8014854:	9207      	str	r2, [sp, #28]
 8014856:	e014      	b.n	8014882 <_vfiprintf_r+0x13a>
 8014858:	eba0 0308 	sub.w	r3, r0, r8
 801485c:	fa09 f303 	lsl.w	r3, r9, r3
 8014860:	4313      	orrs	r3, r2
 8014862:	9304      	str	r3, [sp, #16]
 8014864:	46a2      	mov	sl, r4
 8014866:	e7d2      	b.n	801480e <_vfiprintf_r+0xc6>
 8014868:	9b03      	ldr	r3, [sp, #12]
 801486a:	1d19      	adds	r1, r3, #4
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	9103      	str	r1, [sp, #12]
 8014870:	2b00      	cmp	r3, #0
 8014872:	bfbb      	ittet	lt
 8014874:	425b      	neglt	r3, r3
 8014876:	f042 0202 	orrlt.w	r2, r2, #2
 801487a:	9307      	strge	r3, [sp, #28]
 801487c:	9307      	strlt	r3, [sp, #28]
 801487e:	bfb8      	it	lt
 8014880:	9204      	strlt	r2, [sp, #16]
 8014882:	7823      	ldrb	r3, [r4, #0]
 8014884:	2b2e      	cmp	r3, #46	; 0x2e
 8014886:	d10c      	bne.n	80148a2 <_vfiprintf_r+0x15a>
 8014888:	7863      	ldrb	r3, [r4, #1]
 801488a:	2b2a      	cmp	r3, #42	; 0x2a
 801488c:	d134      	bne.n	80148f8 <_vfiprintf_r+0x1b0>
 801488e:	9b03      	ldr	r3, [sp, #12]
 8014890:	1d1a      	adds	r2, r3, #4
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	9203      	str	r2, [sp, #12]
 8014896:	2b00      	cmp	r3, #0
 8014898:	bfb8      	it	lt
 801489a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801489e:	3402      	adds	r4, #2
 80148a0:	9305      	str	r3, [sp, #20]
 80148a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014978 <_vfiprintf_r+0x230>
 80148a6:	7821      	ldrb	r1, [r4, #0]
 80148a8:	2203      	movs	r2, #3
 80148aa:	4650      	mov	r0, sl
 80148ac:	f7eb fca0 	bl	80001f0 <memchr>
 80148b0:	b138      	cbz	r0, 80148c2 <_vfiprintf_r+0x17a>
 80148b2:	9b04      	ldr	r3, [sp, #16]
 80148b4:	eba0 000a 	sub.w	r0, r0, sl
 80148b8:	2240      	movs	r2, #64	; 0x40
 80148ba:	4082      	lsls	r2, r0
 80148bc:	4313      	orrs	r3, r2
 80148be:	3401      	adds	r4, #1
 80148c0:	9304      	str	r3, [sp, #16]
 80148c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c6:	4829      	ldr	r0, [pc, #164]	; (801496c <_vfiprintf_r+0x224>)
 80148c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148cc:	2206      	movs	r2, #6
 80148ce:	f7eb fc8f 	bl	80001f0 <memchr>
 80148d2:	2800      	cmp	r0, #0
 80148d4:	d03f      	beq.n	8014956 <_vfiprintf_r+0x20e>
 80148d6:	4b26      	ldr	r3, [pc, #152]	; (8014970 <_vfiprintf_r+0x228>)
 80148d8:	bb1b      	cbnz	r3, 8014922 <_vfiprintf_r+0x1da>
 80148da:	9b03      	ldr	r3, [sp, #12]
 80148dc:	3307      	adds	r3, #7
 80148de:	f023 0307 	bic.w	r3, r3, #7
 80148e2:	3308      	adds	r3, #8
 80148e4:	9303      	str	r3, [sp, #12]
 80148e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e8:	443b      	add	r3, r7
 80148ea:	9309      	str	r3, [sp, #36]	; 0x24
 80148ec:	e768      	b.n	80147c0 <_vfiprintf_r+0x78>
 80148ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80148f2:	460c      	mov	r4, r1
 80148f4:	2001      	movs	r0, #1
 80148f6:	e7a6      	b.n	8014846 <_vfiprintf_r+0xfe>
 80148f8:	2300      	movs	r3, #0
 80148fa:	3401      	adds	r4, #1
 80148fc:	9305      	str	r3, [sp, #20]
 80148fe:	4619      	mov	r1, r3
 8014900:	f04f 0c0a 	mov.w	ip, #10
 8014904:	4620      	mov	r0, r4
 8014906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801490a:	3a30      	subs	r2, #48	; 0x30
 801490c:	2a09      	cmp	r2, #9
 801490e:	d903      	bls.n	8014918 <_vfiprintf_r+0x1d0>
 8014910:	2b00      	cmp	r3, #0
 8014912:	d0c6      	beq.n	80148a2 <_vfiprintf_r+0x15a>
 8014914:	9105      	str	r1, [sp, #20]
 8014916:	e7c4      	b.n	80148a2 <_vfiprintf_r+0x15a>
 8014918:	fb0c 2101 	mla	r1, ip, r1, r2
 801491c:	4604      	mov	r4, r0
 801491e:	2301      	movs	r3, #1
 8014920:	e7f0      	b.n	8014904 <_vfiprintf_r+0x1bc>
 8014922:	ab03      	add	r3, sp, #12
 8014924:	9300      	str	r3, [sp, #0]
 8014926:	462a      	mov	r2, r5
 8014928:	4b12      	ldr	r3, [pc, #72]	; (8014974 <_vfiprintf_r+0x22c>)
 801492a:	a904      	add	r1, sp, #16
 801492c:	4630      	mov	r0, r6
 801492e:	f7fd fcb7 	bl	80122a0 <_printf_float>
 8014932:	4607      	mov	r7, r0
 8014934:	1c78      	adds	r0, r7, #1
 8014936:	d1d6      	bne.n	80148e6 <_vfiprintf_r+0x19e>
 8014938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801493a:	07d9      	lsls	r1, r3, #31
 801493c:	d405      	bmi.n	801494a <_vfiprintf_r+0x202>
 801493e:	89ab      	ldrh	r3, [r5, #12]
 8014940:	059a      	lsls	r2, r3, #22
 8014942:	d402      	bmi.n	801494a <_vfiprintf_r+0x202>
 8014944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014946:	f7fe fbcf 	bl	80130e8 <__retarget_lock_release_recursive>
 801494a:	89ab      	ldrh	r3, [r5, #12]
 801494c:	065b      	lsls	r3, r3, #25
 801494e:	f53f af1d 	bmi.w	801478c <_vfiprintf_r+0x44>
 8014952:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014954:	e71c      	b.n	8014790 <_vfiprintf_r+0x48>
 8014956:	ab03      	add	r3, sp, #12
 8014958:	9300      	str	r3, [sp, #0]
 801495a:	462a      	mov	r2, r5
 801495c:	4b05      	ldr	r3, [pc, #20]	; (8014974 <_vfiprintf_r+0x22c>)
 801495e:	a904      	add	r1, sp, #16
 8014960:	4630      	mov	r0, r6
 8014962:	f7fd ff41 	bl	80127e8 <_printf_i>
 8014966:	e7e4      	b.n	8014932 <_vfiprintf_r+0x1ea>
 8014968:	08016b34 	.word	0x08016b34
 801496c:	08016b3e 	.word	0x08016b3e
 8014970:	080122a1 	.word	0x080122a1
 8014974:	08014723 	.word	0x08014723
 8014978:	08016b3a 	.word	0x08016b3a

0801497c <__swhatbuf_r>:
 801497c:	b570      	push	{r4, r5, r6, lr}
 801497e:	460c      	mov	r4, r1
 8014980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014984:	2900      	cmp	r1, #0
 8014986:	b096      	sub	sp, #88	; 0x58
 8014988:	4615      	mov	r5, r2
 801498a:	461e      	mov	r6, r3
 801498c:	da0d      	bge.n	80149aa <__swhatbuf_r+0x2e>
 801498e:	89a3      	ldrh	r3, [r4, #12]
 8014990:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014994:	f04f 0100 	mov.w	r1, #0
 8014998:	bf0c      	ite	eq
 801499a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801499e:	2340      	movne	r3, #64	; 0x40
 80149a0:	2000      	movs	r0, #0
 80149a2:	6031      	str	r1, [r6, #0]
 80149a4:	602b      	str	r3, [r5, #0]
 80149a6:	b016      	add	sp, #88	; 0x58
 80149a8:	bd70      	pop	{r4, r5, r6, pc}
 80149aa:	466a      	mov	r2, sp
 80149ac:	f000 f87c 	bl	8014aa8 <_fstat_r>
 80149b0:	2800      	cmp	r0, #0
 80149b2:	dbec      	blt.n	801498e <__swhatbuf_r+0x12>
 80149b4:	9901      	ldr	r1, [sp, #4]
 80149b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80149ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80149be:	4259      	negs	r1, r3
 80149c0:	4159      	adcs	r1, r3
 80149c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149c6:	e7eb      	b.n	80149a0 <__swhatbuf_r+0x24>

080149c8 <__smakebuf_r>:
 80149c8:	898b      	ldrh	r3, [r1, #12]
 80149ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149cc:	079d      	lsls	r5, r3, #30
 80149ce:	4606      	mov	r6, r0
 80149d0:	460c      	mov	r4, r1
 80149d2:	d507      	bpl.n	80149e4 <__smakebuf_r+0x1c>
 80149d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	6123      	str	r3, [r4, #16]
 80149dc:	2301      	movs	r3, #1
 80149de:	6163      	str	r3, [r4, #20]
 80149e0:	b002      	add	sp, #8
 80149e2:	bd70      	pop	{r4, r5, r6, pc}
 80149e4:	ab01      	add	r3, sp, #4
 80149e6:	466a      	mov	r2, sp
 80149e8:	f7ff ffc8 	bl	801497c <__swhatbuf_r>
 80149ec:	9900      	ldr	r1, [sp, #0]
 80149ee:	4605      	mov	r5, r0
 80149f0:	4630      	mov	r0, r6
 80149f2:	f7ff fa77 	bl	8013ee4 <_malloc_r>
 80149f6:	b948      	cbnz	r0, 8014a0c <__smakebuf_r+0x44>
 80149f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149fc:	059a      	lsls	r2, r3, #22
 80149fe:	d4ef      	bmi.n	80149e0 <__smakebuf_r+0x18>
 8014a00:	f023 0303 	bic.w	r3, r3, #3
 8014a04:	f043 0302 	orr.w	r3, r3, #2
 8014a08:	81a3      	strh	r3, [r4, #12]
 8014a0a:	e7e3      	b.n	80149d4 <__smakebuf_r+0xc>
 8014a0c:	89a3      	ldrh	r3, [r4, #12]
 8014a0e:	6020      	str	r0, [r4, #0]
 8014a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a14:	81a3      	strh	r3, [r4, #12]
 8014a16:	9b00      	ldr	r3, [sp, #0]
 8014a18:	6163      	str	r3, [r4, #20]
 8014a1a:	9b01      	ldr	r3, [sp, #4]
 8014a1c:	6120      	str	r0, [r4, #16]
 8014a1e:	b15b      	cbz	r3, 8014a38 <__smakebuf_r+0x70>
 8014a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a24:	4630      	mov	r0, r6
 8014a26:	f000 f851 	bl	8014acc <_isatty_r>
 8014a2a:	b128      	cbz	r0, 8014a38 <__smakebuf_r+0x70>
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	f023 0303 	bic.w	r3, r3, #3
 8014a32:	f043 0301 	orr.w	r3, r3, #1
 8014a36:	81a3      	strh	r3, [r4, #12]
 8014a38:	89a3      	ldrh	r3, [r4, #12]
 8014a3a:	431d      	orrs	r5, r3
 8014a3c:	81a5      	strh	r5, [r4, #12]
 8014a3e:	e7cf      	b.n	80149e0 <__smakebuf_r+0x18>

08014a40 <_putc_r>:
 8014a40:	b570      	push	{r4, r5, r6, lr}
 8014a42:	460d      	mov	r5, r1
 8014a44:	4614      	mov	r4, r2
 8014a46:	4606      	mov	r6, r0
 8014a48:	b118      	cbz	r0, 8014a52 <_putc_r+0x12>
 8014a4a:	6a03      	ldr	r3, [r0, #32]
 8014a4c:	b90b      	cbnz	r3, 8014a52 <_putc_r+0x12>
 8014a4e:	f7fe f93b 	bl	8012cc8 <__sinit>
 8014a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a54:	07d8      	lsls	r0, r3, #31
 8014a56:	d405      	bmi.n	8014a64 <_putc_r+0x24>
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	0599      	lsls	r1, r3, #22
 8014a5c:	d402      	bmi.n	8014a64 <_putc_r+0x24>
 8014a5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a60:	f7fe fb41 	bl	80130e6 <__retarget_lock_acquire_recursive>
 8014a64:	68a3      	ldr	r3, [r4, #8]
 8014a66:	3b01      	subs	r3, #1
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	60a3      	str	r3, [r4, #8]
 8014a6c:	da05      	bge.n	8014a7a <_putc_r+0x3a>
 8014a6e:	69a2      	ldr	r2, [r4, #24]
 8014a70:	4293      	cmp	r3, r2
 8014a72:	db12      	blt.n	8014a9a <_putc_r+0x5a>
 8014a74:	b2eb      	uxtb	r3, r5
 8014a76:	2b0a      	cmp	r3, #10
 8014a78:	d00f      	beq.n	8014a9a <_putc_r+0x5a>
 8014a7a:	6823      	ldr	r3, [r4, #0]
 8014a7c:	1c5a      	adds	r2, r3, #1
 8014a7e:	6022      	str	r2, [r4, #0]
 8014a80:	701d      	strb	r5, [r3, #0]
 8014a82:	b2ed      	uxtb	r5, r5
 8014a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a86:	07da      	lsls	r2, r3, #31
 8014a88:	d405      	bmi.n	8014a96 <_putc_r+0x56>
 8014a8a:	89a3      	ldrh	r3, [r4, #12]
 8014a8c:	059b      	lsls	r3, r3, #22
 8014a8e:	d402      	bmi.n	8014a96 <_putc_r+0x56>
 8014a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a92:	f7fe fb29 	bl	80130e8 <__retarget_lock_release_recursive>
 8014a96:	4628      	mov	r0, r5
 8014a98:	bd70      	pop	{r4, r5, r6, pc}
 8014a9a:	4629      	mov	r1, r5
 8014a9c:	4622      	mov	r2, r4
 8014a9e:	4630      	mov	r0, r6
 8014aa0:	f7fe f9a5 	bl	8012dee <__swbuf_r>
 8014aa4:	4605      	mov	r5, r0
 8014aa6:	e7ed      	b.n	8014a84 <_putc_r+0x44>

08014aa8 <_fstat_r>:
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	4d07      	ldr	r5, [pc, #28]	; (8014ac8 <_fstat_r+0x20>)
 8014aac:	2300      	movs	r3, #0
 8014aae:	4604      	mov	r4, r0
 8014ab0:	4608      	mov	r0, r1
 8014ab2:	4611      	mov	r1, r2
 8014ab4:	602b      	str	r3, [r5, #0]
 8014ab6:	f7f0 fa8a 	bl	8004fce <_fstat>
 8014aba:	1c43      	adds	r3, r0, #1
 8014abc:	d102      	bne.n	8014ac4 <_fstat_r+0x1c>
 8014abe:	682b      	ldr	r3, [r5, #0]
 8014ac0:	b103      	cbz	r3, 8014ac4 <_fstat_r+0x1c>
 8014ac2:	6023      	str	r3, [r4, #0]
 8014ac4:	bd38      	pop	{r3, r4, r5, pc}
 8014ac6:	bf00      	nop
 8014ac8:	2000af88 	.word	0x2000af88

08014acc <_isatty_r>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	4d06      	ldr	r5, [pc, #24]	; (8014ae8 <_isatty_r+0x1c>)
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	4604      	mov	r4, r0
 8014ad4:	4608      	mov	r0, r1
 8014ad6:	602b      	str	r3, [r5, #0]
 8014ad8:	f7f0 fa89 	bl	8004fee <_isatty>
 8014adc:	1c43      	adds	r3, r0, #1
 8014ade:	d102      	bne.n	8014ae6 <_isatty_r+0x1a>
 8014ae0:	682b      	ldr	r3, [r5, #0]
 8014ae2:	b103      	cbz	r3, 8014ae6 <_isatty_r+0x1a>
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	bd38      	pop	{r3, r4, r5, pc}
 8014ae8:	2000af88 	.word	0x2000af88

08014aec <_sbrk_r>:
 8014aec:	b538      	push	{r3, r4, r5, lr}
 8014aee:	4d06      	ldr	r5, [pc, #24]	; (8014b08 <_sbrk_r+0x1c>)
 8014af0:	2300      	movs	r3, #0
 8014af2:	4604      	mov	r4, r0
 8014af4:	4608      	mov	r0, r1
 8014af6:	602b      	str	r3, [r5, #0]
 8014af8:	f7f0 fa92 	bl	8005020 <_sbrk>
 8014afc:	1c43      	adds	r3, r0, #1
 8014afe:	d102      	bne.n	8014b06 <_sbrk_r+0x1a>
 8014b00:	682b      	ldr	r3, [r5, #0]
 8014b02:	b103      	cbz	r3, 8014b06 <_sbrk_r+0x1a>
 8014b04:	6023      	str	r3, [r4, #0]
 8014b06:	bd38      	pop	{r3, r4, r5, pc}
 8014b08:	2000af88 	.word	0x2000af88

08014b0c <__assert_func>:
 8014b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b0e:	4614      	mov	r4, r2
 8014b10:	461a      	mov	r2, r3
 8014b12:	4b09      	ldr	r3, [pc, #36]	; (8014b38 <__assert_func+0x2c>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4605      	mov	r5, r0
 8014b18:	68d8      	ldr	r0, [r3, #12]
 8014b1a:	b14c      	cbz	r4, 8014b30 <__assert_func+0x24>
 8014b1c:	4b07      	ldr	r3, [pc, #28]	; (8014b3c <__assert_func+0x30>)
 8014b1e:	9100      	str	r1, [sp, #0]
 8014b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b24:	4906      	ldr	r1, [pc, #24]	; (8014b40 <__assert_func+0x34>)
 8014b26:	462b      	mov	r3, r5
 8014b28:	f000 f844 	bl	8014bb4 <fiprintf>
 8014b2c:	f000 f854 	bl	8014bd8 <abort>
 8014b30:	4b04      	ldr	r3, [pc, #16]	; (8014b44 <__assert_func+0x38>)
 8014b32:	461c      	mov	r4, r3
 8014b34:	e7f3      	b.n	8014b1e <__assert_func+0x12>
 8014b36:	bf00      	nop
 8014b38:	2000043c 	.word	0x2000043c
 8014b3c:	08016b4f 	.word	0x08016b4f
 8014b40:	08016b5c 	.word	0x08016b5c
 8014b44:	08016b8a 	.word	0x08016b8a

08014b48 <_calloc_r>:
 8014b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b4a:	fba1 2402 	umull	r2, r4, r1, r2
 8014b4e:	b94c      	cbnz	r4, 8014b64 <_calloc_r+0x1c>
 8014b50:	4611      	mov	r1, r2
 8014b52:	9201      	str	r2, [sp, #4]
 8014b54:	f7ff f9c6 	bl	8013ee4 <_malloc_r>
 8014b58:	9a01      	ldr	r2, [sp, #4]
 8014b5a:	4605      	mov	r5, r0
 8014b5c:	b930      	cbnz	r0, 8014b6c <_calloc_r+0x24>
 8014b5e:	4628      	mov	r0, r5
 8014b60:	b003      	add	sp, #12
 8014b62:	bd30      	pop	{r4, r5, pc}
 8014b64:	220c      	movs	r2, #12
 8014b66:	6002      	str	r2, [r0, #0]
 8014b68:	2500      	movs	r5, #0
 8014b6a:	e7f8      	b.n	8014b5e <_calloc_r+0x16>
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	f7fe f9d3 	bl	8012f18 <memset>
 8014b72:	e7f4      	b.n	8014b5e <_calloc_r+0x16>

08014b74 <__ascii_mbtowc>:
 8014b74:	b082      	sub	sp, #8
 8014b76:	b901      	cbnz	r1, 8014b7a <__ascii_mbtowc+0x6>
 8014b78:	a901      	add	r1, sp, #4
 8014b7a:	b142      	cbz	r2, 8014b8e <__ascii_mbtowc+0x1a>
 8014b7c:	b14b      	cbz	r3, 8014b92 <__ascii_mbtowc+0x1e>
 8014b7e:	7813      	ldrb	r3, [r2, #0]
 8014b80:	600b      	str	r3, [r1, #0]
 8014b82:	7812      	ldrb	r2, [r2, #0]
 8014b84:	1e10      	subs	r0, r2, #0
 8014b86:	bf18      	it	ne
 8014b88:	2001      	movne	r0, #1
 8014b8a:	b002      	add	sp, #8
 8014b8c:	4770      	bx	lr
 8014b8e:	4610      	mov	r0, r2
 8014b90:	e7fb      	b.n	8014b8a <__ascii_mbtowc+0x16>
 8014b92:	f06f 0001 	mvn.w	r0, #1
 8014b96:	e7f8      	b.n	8014b8a <__ascii_mbtowc+0x16>

08014b98 <__ascii_wctomb>:
 8014b98:	b149      	cbz	r1, 8014bae <__ascii_wctomb+0x16>
 8014b9a:	2aff      	cmp	r2, #255	; 0xff
 8014b9c:	bf85      	ittet	hi
 8014b9e:	238a      	movhi	r3, #138	; 0x8a
 8014ba0:	6003      	strhi	r3, [r0, #0]
 8014ba2:	700a      	strbls	r2, [r1, #0]
 8014ba4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014ba8:	bf98      	it	ls
 8014baa:	2001      	movls	r0, #1
 8014bac:	4770      	bx	lr
 8014bae:	4608      	mov	r0, r1
 8014bb0:	4770      	bx	lr
	...

08014bb4 <fiprintf>:
 8014bb4:	b40e      	push	{r1, r2, r3}
 8014bb6:	b503      	push	{r0, r1, lr}
 8014bb8:	4601      	mov	r1, r0
 8014bba:	ab03      	add	r3, sp, #12
 8014bbc:	4805      	ldr	r0, [pc, #20]	; (8014bd4 <fiprintf+0x20>)
 8014bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bc2:	6800      	ldr	r0, [r0, #0]
 8014bc4:	9301      	str	r3, [sp, #4]
 8014bc6:	f7ff fdbf 	bl	8014748 <_vfiprintf_r>
 8014bca:	b002      	add	sp, #8
 8014bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bd0:	b003      	add	sp, #12
 8014bd2:	4770      	bx	lr
 8014bd4:	2000043c 	.word	0x2000043c

08014bd8 <abort>:
 8014bd8:	b508      	push	{r3, lr}
 8014bda:	2006      	movs	r0, #6
 8014bdc:	f000 f82c 	bl	8014c38 <raise>
 8014be0:	2001      	movs	r0, #1
 8014be2:	f7f0 f9a5 	bl	8004f30 <_exit>

08014be6 <_raise_r>:
 8014be6:	291f      	cmp	r1, #31
 8014be8:	b538      	push	{r3, r4, r5, lr}
 8014bea:	4604      	mov	r4, r0
 8014bec:	460d      	mov	r5, r1
 8014bee:	d904      	bls.n	8014bfa <_raise_r+0x14>
 8014bf0:	2316      	movs	r3, #22
 8014bf2:	6003      	str	r3, [r0, #0]
 8014bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bf8:	bd38      	pop	{r3, r4, r5, pc}
 8014bfa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014bfc:	b112      	cbz	r2, 8014c04 <_raise_r+0x1e>
 8014bfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c02:	b94b      	cbnz	r3, 8014c18 <_raise_r+0x32>
 8014c04:	4620      	mov	r0, r4
 8014c06:	f000 f831 	bl	8014c6c <_getpid_r>
 8014c0a:	462a      	mov	r2, r5
 8014c0c:	4601      	mov	r1, r0
 8014c0e:	4620      	mov	r0, r4
 8014c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c14:	f000 b818 	b.w	8014c48 <_kill_r>
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d00a      	beq.n	8014c32 <_raise_r+0x4c>
 8014c1c:	1c59      	adds	r1, r3, #1
 8014c1e:	d103      	bne.n	8014c28 <_raise_r+0x42>
 8014c20:	2316      	movs	r3, #22
 8014c22:	6003      	str	r3, [r0, #0]
 8014c24:	2001      	movs	r0, #1
 8014c26:	e7e7      	b.n	8014bf8 <_raise_r+0x12>
 8014c28:	2400      	movs	r4, #0
 8014c2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c2e:	4628      	mov	r0, r5
 8014c30:	4798      	blx	r3
 8014c32:	2000      	movs	r0, #0
 8014c34:	e7e0      	b.n	8014bf8 <_raise_r+0x12>
	...

08014c38 <raise>:
 8014c38:	4b02      	ldr	r3, [pc, #8]	; (8014c44 <raise+0xc>)
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	6818      	ldr	r0, [r3, #0]
 8014c3e:	f7ff bfd2 	b.w	8014be6 <_raise_r>
 8014c42:	bf00      	nop
 8014c44:	2000043c 	.word	0x2000043c

08014c48 <_kill_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4d07      	ldr	r5, [pc, #28]	; (8014c68 <_kill_r+0x20>)
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	f7f0 f95b 	bl	8004f10 <_kill>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_kill_r+0x1c>
 8014c5e:	682b      	ldr	r3, [r5, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_kill_r+0x1c>
 8014c62:	6023      	str	r3, [r4, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	2000af88 	.word	0x2000af88

08014c6c <_getpid_r>:
 8014c6c:	f7f0 b948 	b.w	8004f00 <_getpid>

08014c70 <_init>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	bf00      	nop
 8014c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c76:	bc08      	pop	{r3}
 8014c78:	469e      	mov	lr, r3
 8014c7a:	4770      	bx	lr

08014c7c <_fini>:
 8014c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7e:	bf00      	nop
 8014c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c82:	bc08      	pop	{r3}
 8014c84:	469e      	mov	lr, r3
 8014c86:	4770      	bx	lr
