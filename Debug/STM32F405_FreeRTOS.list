
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056e8  0802a9d0  0802a9d0  0003a9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080300b8  080300b8  00056490  2**0
                  CONTENTS
  4 .ARM          00000008  080300b8  080300b8  000400b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080300c0  080300c0  00056490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080300c0  080300c0  000400c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080300c4  080300c4  000400c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011c0  20000000  080300c8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       000052a8  200011c0  08031288  000511c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20006468  08036530  00056468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00056490  2**0
                  CONTENTS
 12 .bss          0000cd84  20006490  20006490  00056490  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20013214  20013214  00056490  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00056490  2**0
                  CONTENTS, READONLY
 15 .comment      000000b8  00000000  00000000  000564c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00067057  00000000  00000000  00056578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00013f2d  00000000  00000000  000bd5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004540  00000000  00000000  000d1500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003370  00000000  00000000  000d5a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001ff48  00000000  00000000  000d8db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0006ed92  00000000  00000000  000f8cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001008db  00000000  00000000  00167a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000126ac  00000000  00000000  00268368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  0027aa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000015c0  00000000  00000000  0027aa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00000060  00000000  00000000  0027c033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20006490 	.word	0x20006490
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08028658 	.word	0x08028658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20006494 	.word	0x20006494
 80001cc:	08028658 	.word	0x08028658

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <peerLocalizationTellPosition>:

// array of other's position
static peerLocalizationOtherPosition_t other_positions[PEER_LOCALIZATION_MAX_NEIGHBORS];

bool peerLocalizationTellPosition(int cfid, positionMeasurement_t const *pos)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e052      	b.n	800102a <peerLocalizationTellPosition+0xb6>
    if (other_positions[i].id == 0 || other_positions[i].id == cfid) {
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	492d      	ldr	r1, [pc, #180]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <peerLocalizationTellPosition+0x3c>
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	4928      	ldr	r1, [pc, #160]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d139      	bne.n	8001024 <peerLocalizationTellPosition+0xb0>
      other_positions[i].id = cfid;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	b2d8      	uxtb	r0, r3
 8000fb6:	4921      	ldr	r1, [pc, #132]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	701a      	strb	r2, [r3, #0]
      other_positions[i].pos.x = pos->x;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6819      	ldr	r1, [r3, #0]
 8000fcc:	481b      	ldr	r0, [pc, #108]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3308      	adds	r3, #8
 8000fda:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.y = pos->y;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	6859      	ldr	r1, [r3, #4]
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4403      	add	r3, r0
 8000fee:	330c      	adds	r3, #12
 8000ff0:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.z = pos->z;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6899      	ldr	r1, [r3, #8]
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4403      	add	r3, r0
 8001004:	3310      	adds	r3, #16
 8001006:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.timestamp = xTaskGetTickCount();
 8001008:	7bfc      	ldrb	r4, [r7, #15]
 800100a:	f01f fee7 	bl	8020ddc <xTaskGetTickCount>
 800100e:	4602      	mov	r2, r0
 8001010:	490a      	ldr	r1, [pc, #40]	; (800103c <peerLocalizationTellPosition+0xc8>)
 8001012:	4623      	mov	r3, r4
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4423      	add	r3, r4
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3304      	adds	r3, #4
 800101e:	601a      	str	r2, [r3, #0]
      return true;
 8001020:	2301      	movs	r3, #1
 8001022:	e006      	b.n	8001032 <peerLocalizationTellPosition+0xbe>
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3301      	adds	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b09      	cmp	r3, #9
 800102e:	d9a9      	bls.n	8000f84 <peerLocalizationTellPosition+0x10>
    }
  }
  return false;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	200064ac 	.word	0x200064ac

08001040 <appchannelInit>:
bool appchannelHasOverflowOccured() {
    return appchannelHasOverflowOccurred();
}

void appchannelInit()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  sendMutex = xSemaphoreCreateMutex();
 8001044:	2001      	movs	r0, #1
 8001046:	f01e fd26 	bl	801fa96 <xQueueCreateMutex>
 800104a:	4603      	mov	r3, r0
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <appchannelInit+0x2c>)
 800104e:	6013      	str	r3, [r2, #0]

  rxQueue = xQueueCreate(10, sizeof(CRTPPacket));
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	200a      	movs	r0, #10
 8001056:	f01e fca7 	bl	801f9a8 <xQueueGenericCreate>
 800105a:	4603      	mov	r3, r0
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <appchannelInit+0x30>)
 800105e:	6013      	str	r3, [r2, #0]

  overflow = false;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <appchannelInit+0x34>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20006574 	.word	0x20006574
 8001070:	20006578 	.word	0x20006578
 8001074:	2000657c 	.word	0x2000657c

08001078 <appchannelIncomingPacket>:

void appchannelIncomingPacket(CRTPPacket *p)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  int res = xQueueSend(rxQueue, p, 0);
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <appchannelIncomingPacket+0x2c>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2200      	movs	r2, #0
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	f01e fd37 	bl	801fafc <xQueueGenericSend>
 800108e:	60f8      	str	r0, [r7, #12]

  if (res != pdTRUE) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d002      	beq.n	800109c <appchannelIncomingPacket+0x24>
    overflow = true;
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <appchannelIncomingPacket+0x30>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
  }
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20006578 	.word	0x20006578
 80010a8:	2000657c 	.word	0x2000657c

080010ac <appInit>:

static void appTask(void *param);


void __attribute__((weak)) appInit()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af04      	add	r7, sp, #16
  if (isInit) {
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <appInit+0x38>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d111      	bne.n	80010de <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 80010ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010be:	461a      	mov	r2, r3
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <appInit+0x3c>)
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <appInit+0x40>)
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2300      	movs	r3, #0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <appInit+0x44>)
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <appInit+0x48>)
 80010d2:	f01f fb0d 	bl	80206f0 <xTaskCreateStatic>
  isInit = true;
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <appInit+0x38>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e000      	b.n	80010e0 <appInit+0x34>
    return;
 80010de:	bf00      	nop
}
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000657d 	.word	0x2000657d
 80010e8:	200011c0 	.word	0x200011c0
 80010ec:	20006580 	.word	0x20006580
 80010f0:	0802a9d0 	.word	0x0802a9d0
 80010f4:	080010f9 	.word	0x080010f9

080010f8 <appTask>:

static void appTask(void *param)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001100:	f004 fdee 	bl	8005ce0 <systemWaitStart>

  appMain();
 8001104:	f000 f806 	bl	8001114 <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 8001108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110c:	f01f fca8 	bl	8020a60 <vTaskDelay>
 8001110:	e7fa      	b.n	8001108 <appTask+0x10>
	...

08001114 <appMain>:
    int myNum;
    std::string myString;
};
*/
void appMain()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <appMain+0x20>)
 800111a:	2000      	movs	r0, #0
 800111c:	f010 fec2 	bl	8011ea4 <SEGGER_RTT_printf>
  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */
//  assert(cl->myNum + cl->myString.size() == 0);

  while(1) {
    vTaskDelay(M2T(2000));
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f01f fc9c 	bl	8020a60 <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 8001128:	4903      	ldr	r1, [pc, #12]	; (8001138 <appMain+0x24>)
 800112a:	2000      	movs	r0, #0
 800112c:	f010 feba 	bl	8011ea4 <SEGGER_RTT_printf>
    vTaskDelay(M2T(2000));
 8001130:	e7f6      	b.n	8001120 <appMain+0xc>
 8001132:	bf00      	nop
 8001134:	0802a9d4 	.word	0x0802a9d4
 8001138:	0802a9f0 	.word	0x0802a9f0

0800113c <commInit>:
#include "crtp_localization_service.h"

static bool isInit;

void commInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  if (isInit)
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <commInit+0x64>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d128      	bne.n	800119a <commInit+0x5e>
    return;

  uartslkInit();
 8001148:	f004 fee6 	bl	8005f18 <uartslkInit>
  radiolinkInit();
 800114c:	f002 fe2a 	bl	8003da4 <radiolinkInit>

  if (usbTest())
 8001150:	f005 f920 	bl	8006394 <usbTest>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <commInit+0x2c>
    crtpSetLink(usblinkGetLink());
 800115a:	f005 f9f7 	bl	800654c <usblinkGetLink>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9f3 	bl	800154c <crtpSetLink>
 8001166:	e00a      	b.n	800117e <commInit+0x42>
  else if(radiolinkTest())
 8001168:	f002 fe72 	bl	8003e50 <radiolinkTest>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <commInit+0x42>
    crtpSetLink(radiolinkGetLink());
 8001172:	f002 ff6f 	bl	8004054 <radiolinkGetLink>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f9e7 	bl	800154c <crtpSetLink>

  crtpserviceInit();
 800117e:	f002 fca3 	bl	8003ac8 <crtpserviceInit>
  platformserviceInit();
 8001182:	f002 fd15 	bl	8003bb0 <platformserviceInit>
  logInit();
 8001186:	f011 f947 	bl	8012418 <logInit>
  paramInit();
 800118a:	f013 fd79 	bl	8014c80 <paramInit>
  locSrvInit();
 800118e:	f002 f9b7 	bl	8003500 <locSrvInit>


  isInit = true;
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <commInit+0x64>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e000      	b.n	800119c <commInit+0x60>
    return;
 800119a:	bf00      	nop
}
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20006a30 	.word	0x20006a30

080011a4 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af04      	add	r7, sp, #16
  if(isInit)
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <crtpInit+0x70>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d12d      	bne.n	800120e <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	2078      	movs	r0, #120	; 0x78
 80011b8:	f01e fbf6 	bl	801f9a8 <xQueueGenericCreate>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <crtpInit+0x74>)
 80011c0:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <crtpInit+0x74>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <crtpInit+0x78>)
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <crtpInit+0x7c>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f013 fe6c 	bl	8014ea8 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <crtpInit+0x80>)
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <crtpInit+0x84>)
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2302      	movs	r3, #2
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	4912      	ldr	r1, [pc, #72]	; (800122c <crtpInit+0x88>)
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <crtpInit+0x8c>)
 80011e6:	f01f fa83 	bl	80206f0 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 80011ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <crtpInit+0x90>)
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <crtpInit+0x94>)
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2302      	movs	r3, #2
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	490f      	ldr	r1, [pc, #60]	; (800123c <crtpInit+0x98>)
 8001200:	480f      	ldr	r0, [pc, #60]	; (8001240 <crtpInit+0x9c>)
 8001202:	f01f fa75 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8001206:	4b03      	ldr	r3, [pc, #12]	; (8001214 <crtpInit+0x70>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e000      	b.n	8001210 <crtpInit+0x6c>
    return;
 800120e:	bf00      	nop
}
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20006a31 	.word	0x20006a31
 8001218:	20006a48 	.word	0x20006a48
 800121c:	0802aa00 	.word	0x0802aa00
 8001220:	0802aa08 	.word	0x0802aa08
 8001224:	20001478 	.word	0x20001478
 8001228:	20001278 	.word	0x20001278
 800122c:	0802aa24 	.word	0x0802aa24
 8001230:	08001305 	.word	0x08001305
 8001234:	20001930 	.word	0x20001930
 8001238:	20001530 	.word	0x20001530
 800123c:	0802aa2c 	.word	0x0802aa2c
 8001240:	08001375 	.word	0x08001375

08001244 <crtpInitTaskQueue>:
{
  return isInit;
}

void crtpInitTaskQueue(CRTPPort portId)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId] == NULL);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <crtpInitTaskQueue+0x50>)
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <crtpInitTaskQueue+0x20>
 800125a:	226b      	movs	r2, #107	; 0x6b
 800125c:	490e      	ldr	r1, [pc, #56]	; (8001298 <crtpInitTaskQueue+0x54>)
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <crtpInitTaskQueue+0x58>)
 8001260:	f010 fee4 	bl	801202c <assertFail>

  queues[portId] = xQueueCreate(CRTP_RX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001264:	79fc      	ldrb	r4, [r7, #7]
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	2010      	movs	r0, #16
 800126c:	f01e fb9c 	bl	801f9a8 <xQueueGenericCreate>
 8001270:	4603      	mov	r3, r0
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <crtpInitTaskQueue+0x50>)
 8001274:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  DEBUG_QUEUE_MONITOR_REGISTER(queues[portId]);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <crtpInitTaskQueue+0x50>)
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <crtpInitTaskQueue+0x5c>)
 8001282:	4905      	ldr	r1, [pc, #20]	; (8001298 <crtpInitTaskQueue+0x54>)
 8001284:	4618      	mov	r0, r3
 8001286:	f013 fe0f 	bl	8014ea8 <qmRegisterQueue>
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	20006a4c 	.word	0x20006a4c
 8001298:	0802aa08 	.word	0x0802aa08
 800129c:	0802aa34 	.word	0x0802aa34
 80012a0:	0802aa4c 	.word	0x0802aa4c

080012a4 <crtpReceivePacketBlock>:

  return xQueueReceive(queues[portId], p, 0);
}

int crtpReceivePacketBlock(CRTPPort portId, CRTPPacket *p)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId]);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <crtpReceivePacketBlock+0x50>)
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d104      	bne.n	80012c6 <crtpReceivePacketBlock+0x22>
 80012bc:	227b      	movs	r2, #123	; 0x7b
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <crtpReceivePacketBlock+0x54>)
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <crtpReceivePacketBlock+0x58>)
 80012c2:	f010 feb3 	bl	801202c <assertFail>
  ASSERT(p);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d104      	bne.n	80012d6 <crtpReceivePacketBlock+0x32>
 80012cc:	227c      	movs	r2, #124	; 0x7c
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <crtpReceivePacketBlock+0x54>)
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <crtpReceivePacketBlock+0x5c>)
 80012d2:	f010 feab 	bl	801202c <assertFail>

  return xQueueReceive(queues[portId], p, portMAX_DELAY);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <crtpReceivePacketBlock+0x50>)
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f01e fdab 	bl	801fe40 <xQueueReceive>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20006a4c 	.word	0x20006a4c
 80012f8:	0802aa08 	.word	0x0802aa08
 80012fc:	0802aa4c 	.word	0x0802aa4c
 8001300:	0802aa5c 	.word	0x0802aa5c

08001304 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <crtpTxTask+0x60>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a15      	ldr	r2, [pc, #84]	; (8001368 <crtpTxTask+0x64>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d021      	beq.n	800135a <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <crtpTxTask+0x68>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f107 0108 	add.w	r1, r7, #8
 800131e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001322:	4618      	mov	r0, r3
 8001324:	f01e fd8c 	bl	801fe40 <xQueueReceive>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d1ee      	bne.n	800130c <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 800132e:	e002      	b.n	8001336 <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 8001330:	200a      	movs	r0, #10
 8001332:	f01f fb95 	bl	8020a60 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <crtpTxTask+0x60>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f107 0208 	add.w	r2, r7, #8
 8001340:	4610      	mov	r0, r2
 8001342:	4798      	blx	r3
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f2      	beq.n	8001330 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <crtpTxTask+0x6c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <crtpTxTask+0x6c>)
 8001352:	6053      	str	r3, [r2, #4]
        updateStats();
 8001354:	f000 f936 	bl	80015c4 <updateStats>
 8001358:	e7d8      	b.n	800130c <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 800135a:	200a      	movs	r0, #10
 800135c:	f01f fb80 	bl	8020a60 <vTaskDelay>
    if (link != &nopLink)
 8001360:	e7d4      	b.n	800130c <crtpTxTask+0x8>
 8001362:	bf00      	nop
 8001364:	20000014 	.word	0x20000014
 8001368:	20000000 	.word	0x20000000
 800136c:	20006a48 	.word	0x20006a48
 8001370:	20006a34 	.word	0x20006a34

08001374 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <crtpRxTask+0x9c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a24      	ldr	r2, [pc, #144]	; (8001414 <crtpRxTask+0xa0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d040      	beq.n	8001408 <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <crtpRxTask+0x9c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f107 0208 	add.w	r2, r7, #8
 8001390:	4610      	mov	r0, r2
 8001392:	4798      	blx	r3
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <crtpRxTask+0x8>
      {
        if (queues[p.port])
 800139a:	7a7b      	ldrb	r3, [r7, #9]
 800139c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <crtpRxTask+0xa4>)
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00e      	beq.n	80013cc <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 80013ae:	7a7b      	ldrb	r3, [r7, #9]
 80013b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <crtpRxTask+0xa4>)
 80013ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80013be:	f107 0108 	add.w	r1, r7, #8
 80013c2:	2300      	movs	r3, #0
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c8:	f01e fb98 	bl	801fafc <xQueueGenericSend>
        }

        if (callbacks[p.port])
 80013cc:	7a7b      	ldrb	r3, [r7, #9]
 80013ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <crtpRxTask+0xa8>)
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 80013e0:	7a7b      	ldrb	r3, [r7, #9]
 80013e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <crtpRxTask+0xa8>)
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	f107 0208 	add.w	r2, r7, #8
 80013f4:	4610      	mov	r0, r2
 80013f6:	4798      	blx	r3
        }

        stats.rxCount++;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <crtpRxTask+0xac>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <crtpRxTask+0xac>)
 8001400:	6013      	str	r3, [r2, #0]
        updateStats();
 8001402:	f000 f8df 	bl	80015c4 <updateStats>
 8001406:	e7b9      	b.n	800137c <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 8001408:	200a      	movs	r0, #10
 800140a:	f01f fb29 	bl	8020a60 <vTaskDelay>
    if (link != &nopLink)
 800140e:	e7b5      	b.n	800137c <crtpRxTask+0x8>
 8001410:	20000014 	.word	0x20000014
 8001414:	20000000 	.word	0x20000000
 8001418:	20006a4c 	.word	0x20006a4c
 800141c:	20006a8c 	.word	0x20006a8c
 8001420:	20006a34 	.word	0x20006a34

08001424 <crtpRegisterPortCB>:
    }
  }
}

void crtpRegisterPortCB(int port, CrtpCallback cb)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  if (port>CRTP_NBR_OF_PORTS)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b10      	cmp	r3, #16
 8001432:	dc05      	bgt.n	8001440 <crtpRegisterPortCB+0x1c>
    return;

  callbacks[port] = cb;
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <crtpRegisterPortCB+0x28>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800143e:	e000      	b.n	8001442 <crtpRegisterPortCB+0x1e>
    return;
 8001440:	bf00      	nop
}
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20006a8c 	.word	0x20006a8c

08001450 <crtpSendPacket>:

int crtpSendPacket(CRTPPacket *p)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <crtpSendPacket+0x18>
 800145e:	22d4      	movs	r2, #212	; 0xd4
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <crtpSendPacket+0x44>)
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <crtpSendPacket+0x48>)
 8001464:	f010 fde2 	bl	801202c <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b1e      	cmp	r3, #30
 800146e:	d904      	bls.n	800147a <crtpSendPacket+0x2a>
 8001470:	22d5      	movs	r2, #213	; 0xd5
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <crtpSendPacket+0x44>)
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <crtpSendPacket+0x4c>)
 8001476:	f010 fdd9 	bl	801202c <assertFail>

  return xQueueSend(txQueue, p, 0);
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <crtpSendPacket+0x50>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f01e fb3a 	bl	801fafc <xQueueGenericSend>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	0802aa08 	.word	0x0802aa08
 8001498:	0802aa5c 	.word	0x0802aa5c
 800149c:	0802aa60 	.word	0x0802aa60
 80014a0:	20006a48 	.word	0x20006a48

080014a4 <crtpSendPacketBlock>:

int crtpSendPacketBlock(CRTPPacket *p)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <crtpSendPacketBlock+0x18>
 80014b2:	22dc      	movs	r2, #220	; 0xdc
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <crtpSendPacketBlock+0x44>)
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <crtpSendPacketBlock+0x48>)
 80014b8:	f010 fdb8 	bl	801202c <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b1e      	cmp	r3, #30
 80014c2:	d904      	bls.n	80014ce <crtpSendPacketBlock+0x2a>
 80014c4:	22dd      	movs	r2, #221	; 0xdd
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <crtpSendPacketBlock+0x44>)
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <crtpSendPacketBlock+0x4c>)
 80014ca:	f010 fdaf 	bl	801202c <assertFail>

  return xQueueSend(txQueue, p, portMAX_DELAY);
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <crtpSendPacketBlock+0x50>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f01e fb0f 	bl	801fafc <xQueueGenericSend>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0802aa08 	.word	0x0802aa08
 80014ec:	0802aa5c 	.word	0x0802aa5c
 80014f0:	0802aa60 	.word	0x0802aa60
 80014f4:	20006a48 	.word	0x20006a48

080014f8 <crtpReset>:

int crtpReset(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  xQueueReset(txQueue);
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <crtpReset+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f01e f97c 	bl	801f800 <xQueueGenericReset>
  if (link->reset) {
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <crtpReset+0x2c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <crtpReset+0x22>
    link->reset();
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <crtpReset+0x2c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	4798      	blx	r3
  }

  return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20006a48 	.word	0x20006a48
 8001524:	20000014 	.word	0x20000014

08001528 <crtpIsConnected>:

bool crtpIsConnected(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  if (link->isConnected)
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <crtpIsConnected+0x20>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <crtpIsConnected+0x1a>
    return link->isConnected();
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <crtpIsConnected+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4798      	blx	r3
 800153e:	4603      	mov	r3, r0
 8001540:	e000      	b.n	8001544 <crtpIsConnected+0x1c>
  return true;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000014 	.word	0x20000014

0800154c <crtpSetLink>:

void crtpSetLink(struct crtpLinkOperations * lk)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(link)
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <crtpSetLink+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <crtpSetLink+0x1a>
    link->setEnable(false);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <crtpSetLink+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2000      	movs	r0, #0
 8001564:	4798      	blx	r3

  if (lk)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <crtpSetLink+0x28>
    link = lk;
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <crtpSetLink+0x40>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e002      	b.n	800157a <crtpSetLink+0x2e>
  else
    link = &nopLink;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <crtpSetLink+0x40>)
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <crtpSetLink+0x44>)
 8001578:	601a      	str	r2, [r3, #0]

  link->setEnable(true);
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <crtpSetLink+0x40>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2001      	movs	r0, #1
 8001582:	4798      	blx	r3
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000014 	.word	0x20000014
 8001590:	20000000 	.word	0x20000000

08001594 <nopFunc>:

static int nopFunc(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ENETDOWN;
 8001598:	2373      	movs	r3, #115	; 0x73
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <clearStats>:

static void clearStats()
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <clearStats+0x1c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <clearStats+0x1c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20006a34 	.word	0x20006a34

080015c4 <updateStats>:

static void updateStats()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 80015ca:	f01f fc07 	bl	8020ddc <xTaskGetTickCount>
 80015ce:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <updateStats+0x9c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d93d      	bls.n	8001656 <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <updateStats+0x9c>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ea:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <updateStats+0x9c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001664 <updateStats+0xa0>
 80015fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001602:	ed97 7a00 	vldr	s14, [r7]
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <updateStats+0x9c>)
 8001616:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <updateStats+0x9c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001624:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001664 <updateStats+0xa0>
 8001628:	ee67 6a87 	vmul.f32	s13, s15, s14
 800162c:	ed97 7a00 	vldr	s14, [r7]
 8001630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001638:	ee17 3a90 	vmov	r3, s15
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <updateStats+0x9c>)
 8001640:	815a      	strh	r2, [r3, #10]

    clearStats();
 8001642:	f7ff ffaf 	bl	80015a4 <clearStats>
    stats.previousStatisticsTime = now;
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <updateStats+0x9c>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001652:	4a03      	ldr	r2, [pc, #12]	; (8001660 <updateStats+0x9c>)
 8001654:	60d3      	str	r3, [r2, #12]
  }
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20006a34 	.word	0x20006a34
 8001664:	447a0000 	.word	0x447a0000

08001668 <crtpCommanderInit>:
static bool isInit;

static void commanderCrtpCB(CRTPPacket* pk);

void crtpCommanderInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  if(isInit) {
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <crtpCommanderInit+0x2c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <crtpCommanderInit+0x28>
    return;
  }

  crtpInit();
 8001674:	f7ff fd96 	bl	80011a4 <crtpInit>
  crtpRegisterPortCB(CRTP_PORT_SETPOINT, commanderCrtpCB);
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <crtpCommanderInit+0x30>)
 800167a:	2003      	movs	r0, #3
 800167c:	f7ff fed2 	bl	8001424 <crtpRegisterPortCB>
  crtpRegisterPortCB(CRTP_PORT_SETPOINT_GENERIC, commanderCrtpCB);
 8001680:	4905      	ldr	r1, [pc, #20]	; (8001698 <crtpCommanderInit+0x30>)
 8001682:	2007      	movs	r0, #7
 8001684:	f7ff fece 	bl	8001424 <crtpRegisterPortCB>
  isInit = true;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <crtpCommanderInit+0x2c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e000      	b.n	8001692 <crtpCommanderInit+0x2a>
    return;
 8001690:	bf00      	nop
}
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20006acc 	.word	0x20006acc
 8001698:	080016cd 	.word	0x080016cd

0800169c <notifySetpointsStopDecoder>:
 */
struct notifySetpointsStopPacket {
  uint32_t remainValidMillisecs;
} __attribute__((packed));
void notifySetpointsStopDecoder(const void *data, size_t datalen)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  ASSERT(datalen == sizeof(struct notifySetpointsStopPacket));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d004      	beq.n	80016b6 <notifySetpointsStopDecoder+0x1a>
 80016ac:	2263      	movs	r2, #99	; 0x63
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <notifySetpointsStopDecoder+0x28>)
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <notifySetpointsStopDecoder+0x2c>)
 80016b2:	f010 fcbb 	bl	801202c <assertFail>
  // Note: The remainValidMillisecs argument is an artifact of the old
  // pull-based high-level commander architecture, and is no longer needed.
  commanderRelaxPriority();
 80016b6:	f005 f86b 	bl	8006790 <commanderRelaxPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0802aa80 	.word	0x0802aa80
 80016c8:	0802aaa4 	.word	0x0802aaa4

080016cc <commanderCrtpCB>:
  [metaNotifySetpointsStop] = notifySetpointsStopDecoder,
};

/* Decoder switch */
static void commanderCrtpCB(CRTPPacket* pk)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  static setpoint_t setpoint;

  if(pk->port == CRTP_PORT_SETPOINT && pk->channel == 0) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	f023 030f 	bic.w	r3, r3, #15
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b30      	cmp	r3, #48	; 0x30
 80016e0:	d10f      	bne.n	8001702 <commanderCrtpCB+0x36>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d108      	bne.n	8001702 <commanderCrtpCB+0x36>
    crtpCommanderRpytDecodeSetpoint(&setpoint, pk);
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	481d      	ldr	r0, [pc, #116]	; (8001768 <commanderCrtpCB+0x9c>)
 80016f4:	f001 fce0 	bl	80030b8 <crtpCommanderRpytDecodeSetpoint>
    commanderSetSetpoint(&setpoint, COMMANDER_PRIORITY_CRTP);
 80016f8:	2102      	movs	r1, #2
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <commanderCrtpCB+0x9c>)
 80016fc:	f005 f80a 	bl	8006714 <commanderSetSetpoint>
 8001700:	e02d      	b.n	800175e <commanderCrtpCB+0x92>
  } else if (pk->port == CRTP_PORT_SETPOINT_GENERIC) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	f023 030f 	bic.w	r3, r3, #15
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b70      	cmp	r3, #112	; 0x70
 800170e:	d126      	bne.n	800175e <commanderCrtpCB+0x92>
    switch (pk->channel) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <commanderCrtpCB+0x58>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d009      	beq.n	8001736 <commanderCrtpCB+0x6a>
        }
      }
      break;
    default:
      /* Do nothing */
      break;
 8001722:	e01c      	b.n	800175e <commanderCrtpCB+0x92>
      crtpCommanderGenericDecodeSetpoint(&setpoint, pk);
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4810      	ldr	r0, [pc, #64]	; (8001768 <commanderCrtpCB+0x9c>)
 8001728:	f000 fc0c 	bl	8001f44 <crtpCommanderGenericDecodeSetpoint>
      commanderSetSetpoint(&setpoint, COMMANDER_PRIORITY_CRTP);
 800172c:	2102      	movs	r1, #2
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <commanderCrtpCB+0x9c>)
 8001730:	f004 fff0 	bl	8006714 <commanderSetSetpoint>
      break;
 8001734:	e013      	b.n	800175e <commanderCrtpCB+0x92>
        uint8_t metaCmd = pk->data[0];
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	789b      	ldrb	r3, [r3, #2]
 800173a:	73fb      	strb	r3, [r7, #15]
        if (metaCmd < nMetaCommands && (metaCommandDecoders[metaCmd] != NULL)) {
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <commanderCrtpCB+0x90>
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <commanderCrtpCB+0xa0>)
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <commanderCrtpCB+0x90>
          metaCommandDecoders[metaCmd](pk->data + 1, pk->size - 1);
 8001748:	4c08      	ldr	r4, [pc, #32]	; (800176c <commanderCrtpCB+0xa0>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3302      	adds	r3, #2
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	47a0      	blx	r4
      break;
 800175c:	bf00      	nop
    }
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	20006ad0 	.word	0x20006ad0
 800176c:	0800169d 	.word	0x0800169d

08001770 <quatdecompress>:

	return comp;
}

static inline void quatdecompress(uint32_t comp, float q[4])
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 800177a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800177e:	617b      	str	r3, [r7, #20]

	int const i_largest = comp >> 30;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0f9b      	lsrs	r3, r3, #30
 8001784:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 800178c:	2303      	movs	r3, #3
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e04d      	b.n	800182e <quatdecompress+0xbe>
		if (i != i_largest) {
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	429a      	cmp	r2, r3
 8001798:	d046      	beq.n	8001828 <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0a5b      	lsrs	r3, r3, #9
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0a9b      	lsrs	r3, r3, #10
 80017b0:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001860 <quatdecompress+0xf0>
 80017c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017da:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10d      	bne.n	8001800 <quatdecompress+0x90>
				q[i] = -q[i];
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	eef1 7a67 	vneg.f32	s15, s15
 80017fc:	edc3 7a00 	vstr	s15, [r3]
			}
			sum_squares += q[i] * q[i];
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4413      	add	r3, r2
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3b01      	subs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	daae      	bge.n	8001792 <quatdecompress+0x22>
		}
	}
	q[i_largest] = sqrtf(1.0f - sum_squares);
 8001834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001838:	edd7 7a07 	vldr	s15, [r7, #28]
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	18d4      	adds	r4, r2, r3
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	f025 f932 	bl	8026ab4 <sqrtf>
 8001850:	eef0 7a40 	vmov.f32	s15, s0
 8001854:	edc4 7a00 	vstr	s15, [r4]
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	3f3504f3 	.word	0x3f3504f3

08001864 <stopDecoder>:

/* stopDecoder
 * Keeps setpoint to 0: stops the motors and fall
 */
static void stopDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	72fb      	strb	r3, [r7, #11]
  return;
 8001874:	bf00      	nop
}
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <velocityDecoder>:
  float vy;        // ...
  float vz;        // ...
  float yawrate;  // deg/s
} __attribute__((packed));
static void velocityDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	460b      	mov	r3, r1
 800188e:	72fb      	strb	r3, [r7, #11]
  const struct velocityPacket_s *values = data;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct velocityPacket_s));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d004      	beq.n	80018a4 <velocityDecoder+0x24>
 800189a:	2266      	movs	r2, #102	; 0x66
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <velocityDecoder+0x78>)
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <velocityDecoder+0x7c>)
 80018a0:	f010 fbc4 	bl	801202c <assertFail>

  setpoint->mode.x = modeVelocity;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeVelocity;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeVelocity;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->velocity.x = values->vx;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  setpoint->velocity.y = values->vy;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	6513      	str	r3, [r2, #80]	; 0x50
  setpoint->velocity.z = values->vz;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6553      	str	r3, [r2, #84]	; 0x54

  setpoint->mode.yaw = modeVelocity;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef1 7a67 	vneg.f32	s15, s15
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0802aad8 	.word	0x0802aad8
 80018fc:	0802ab04 	.word	0x0802ab04

08001900 <zDistanceDecoder>:
  float pitch;           // ...
  float yawrate;         // deg/s
  float zDistance;        // m in the world frame of reference
} __attribute__((packed));
static void zDistanceDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	460b      	mov	r3, r1
 800190e:	72fb      	strb	r3, [r7, #11]
  const struct zDistancePacket_s *values = data;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	617b      	str	r3, [r7, #20]


  ASSERT(datalen == sizeof(struct zDistancePacket_s));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d004      	beq.n	8001924 <zDistanceDecoder+0x24>
 800191a:	2283      	movs	r2, #131	; 0x83
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <zDistanceDecoder+0x78>)
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <zDistanceDecoder+0x7c>)
 8001920:	f010 fb84 	bl	801202c <assertFail>

  setpoint->mode.z = modeAbs;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->position.z = values->zDistance;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeVelocity;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef1 7a67 	vneg.f32	s15, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.roll = modeAbs;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeAbs;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  setpoint->attitude.roll = values->roll;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	6093      	str	r3, [r2, #8]
  setpoint->attitude.pitch = values->pitch;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	60d3      	str	r3, [r2, #12]
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	0802aad8 	.word	0x0802aad8
 800197c:	0802ab30 	.word	0x0802ab30

08001980 <getChannelUnitMultiplier>:
  uint16_t channelThrust;
  uint16_t channelAux[MAX_AUX_RC_CHANNELS];
} __attribute__((packed));

static inline float getChannelUnitMultiplier(uint16_t channelValue, uint16_t channelMidpoint, uint16_t channelRange)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	460b      	mov	r3, r1
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	807b      	strh	r3, [r7, #2]
  // Compute a float from -1 to 1 based on the RC channel value, midpoint, and total range magnitude
  return ((float)channelValue - (float)channelMidpoint) / (float)channelRange;
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <cppmEmuDecoder>:
{
  return s_CppmEmuYawMaxRateDps;
}

static void cppmEmuDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	460b      	mov	r3, r1
 80019da:	72fb      	strb	r3, [r7, #11]
  bool isSelfLevelEnabled = true;
 80019dc:	2301      	movs	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]

  ASSERT(datalen >= 9); // minimum 9 bytes expected - 1byte header + four 2byte channels
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d804      	bhi.n	80019f0 <cppmEmuDecoder+0x24>
 80019e6:	22dd      	movs	r2, #221	; 0xdd
 80019e8:	4975      	ldr	r1, [pc, #468]	; (8001bc0 <cppmEmuDecoder+0x1f4>)
 80019ea:	4876      	ldr	r0, [pc, #472]	; (8001bc4 <cppmEmuDecoder+0x1f8>)
 80019ec:	f010 fb1e 	bl	801202c <assertFail>
  const struct cppmEmuPacket_s *values = data;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	613b      	str	r3, [r7, #16]
  ASSERT(datalen == 9 + (2*values->hdr.numAuxChannels)); // Total size is 9 + number of active aux channels
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	3309      	adds	r3, #9
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d004      	beq.n	8001a14 <cppmEmuDecoder+0x48>
 8001a0a:	22df      	movs	r2, #223	; 0xdf
 8001a0c:	496c      	ldr	r1, [pc, #432]	; (8001bc0 <cppmEmuDecoder+0x1f4>)
 8001a0e:	486e      	ldr	r0, [pc, #440]	; (8001bc8 <cppmEmuDecoder+0x1fc>)
 8001a10:	f010 fb0c 	bl	801202c <assertFail>

  // Aux channel 0 is reserved for enabling/disabling self-leveling
  // If it's in use, check and see if it's set and enable self-leveling.
  // If aux channel 0 is not in use, default to self-leveling enabled.
  isSelfLevelEnabled = !(values->hdr.numAuxChannels >= 1 && values->channelAux[0] < 1500);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <cppmEmuDecoder+0x66>
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	f240 52db 	movw	r2, #1499	; 0x5db
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <cppmEmuDecoder+0x6a>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <cppmEmuDecoder+0x6c>
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]

  // Set the modes

  // Position is disabled
  setpoint->mode.x = modeDisable;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeDisable;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeDisable;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  // Yaw is always velocity
  setpoint->mode.yaw = modeVelocity;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  // Roll/Pitch mode is either velocity or abs based on isSelfLevelEnabled
  setpoint->mode.roll = isSelfLevelEnabled ? modeAbs : modeVelocity;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <cppmEmuDecoder+0xa0>
 8001a68:	2201      	movs	r2, #1
 8001a6a:	e000      	b.n	8001a6e <cppmEmuDecoder+0xa2>
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = isSelfLevelEnabled ? modeAbs : modeVelocity;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <cppmEmuDecoder+0xb2>
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	e000      	b.n	8001a80 <cppmEmuDecoder+0xb4>
 8001a7e:	2202      	movs	r2, #2
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  // Rescale the CPPM values into angles to build the setpoint packet
  if(isSelfLevelEnabled)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d02e      	beq.n	8001aea <cppmEmuDecoder+0x11e>
  {
    setpoint->attitude.roll = -1 * getChannelUnitMultiplier(values->channelRoll, 1500, 500) * s_CppmEmuRollMaxAngleDeg; // roll inverted
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a98:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff6f 	bl	8001980 <getChannelUnitMultiplier>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	eeb1 7a67 	vneg.f32	s14, s15
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <cppmEmuDecoder+0x200>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	edc3 7a02 	vstr	s15, [r3, #8]
    setpoint->attitude.pitch = -1 * getChannelUnitMultiplier(values->channelPitch, 1500, 500) * s_CppmEmuPitchMaxAngleDeg; // pitch inverted
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ac6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff58 	bl	8001980 <getChannelUnitMultiplier>
 8001ad0:	eef0 7a40 	vmov.f32	s15, s0
 8001ad4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <cppmEmuDecoder+0x204>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ae8:	e02d      	b.n	8001b46 <cppmEmuDecoder+0x17a>
  }
  else
  {
    setpoint->attitudeRate.roll = -1 * getChannelUnitMultiplier(values->channelRoll, 1500, 500) * s_CppmEmuRollMaxRateDps; // roll inverted
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001af6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff40 	bl	8001980 <getChannelUnitMultiplier>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	eeb1 7a67 	vneg.f32	s14, s15
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <cppmEmuDecoder+0x208>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	edc3 7a06 	vstr	s15, [r3, #24]
    setpoint->attitudeRate.pitch = -1 * getChannelUnitMultiplier(values->channelPitch, 1500, 500) * s_CppmEmuPitchMaxRateDps; // pitch inverted
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b24:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff29 	bl	8001980 <getChannelUnitMultiplier>
 8001b2e:	eef0 7a40 	vmov.f32	s15, s0
 8001b32:	eeb1 7a67 	vneg.f32	s14, s15
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <cppmEmuDecoder+0x20c>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edc3 7a07 	vstr	s15, [r3, #28]
  }

  setpoint->attitudeRate.yaw = -1 * getChannelUnitMultiplier(values->channelYaw, 1500, 500) * s_CppmEmuYawMaxRateDps; // yaw inverted
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b52:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff12 	bl	8001980 <getChannelUnitMultiplier>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	eeb1 7a67 	vneg.f32	s14, s15
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <cppmEmuDecoder+0x210>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edc3 7a08 	vstr	s15, [r3, #32]
  setpoint->thrust = getChannelUnitMultiplier(values->channelThrust, 1000, 1000) * (float)UINT16_MAX; // Thrust is positive only - uses the full 1000-2000 range
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fefb 	bl	8001980 <getChannelUnitMultiplier>
 8001b8a:	eef0 7a40 	vmov.f32	s15, s0
 8001b8e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001be0 <cppmEmuDecoder+0x214>
 8001b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Make sure thrust isn't negative
  if(setpoint->thrust < 0)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d400      	bmi.n	8001bae <cppmEmuDecoder+0x1e2>
  {
    setpoint->thrust = 0;
  }
}
 8001bac:	e003      	b.n	8001bb6 <cppmEmuDecoder+0x1ea>
    setpoint->thrust = 0;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	0802aad8 	.word	0x0802aad8
 8001bc4:	0802ab5c 	.word	0x0802ab5c
 8001bc8:	0802ab6c 	.word	0x0802ab6c
 8001bcc:	20000020 	.word	0x20000020
 8001bd0:	20000024 	.word	0x20000024
 8001bd4:	20000018 	.word	0x20000018
 8001bd8:	2000001c 	.word	0x2000001c
 8001bdc:	20000028 	.word	0x20000028
 8001be0:	477fff00 	.word	0x477fff00

08001be4 <altHoldDecoder>:
  float pitch;           // ...
  float yawrate;         // deg/s
  float zVelocity;       // m/s in the world frame of reference
} __attribute__((packed));
static void altHoldDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	72fb      	strb	r3, [r7, #11]
  const struct altHoldPacket_s *values = data;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct altHoldPacket_s));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d005      	beq.n	8001c0a <altHoldDecoder+0x26>
 8001bfe:	f240 1217 	movw	r2, #279	; 0x117
 8001c02:	4916      	ldr	r1, [pc, #88]	; (8001c5c <altHoldDecoder+0x78>)
 8001c04:	4816      	ldr	r0, [pc, #88]	; (8001c60 <altHoldDecoder+0x7c>)
 8001c06:	f010 fa11 	bl	801202c <assertFail>


  setpoint->mode.z = modeVelocity;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->velocity.z = values->zVelocity;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	6553      	str	r3, [r2, #84]	; 0x54


  setpoint->mode.yaw = modeVelocity;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef1 7a67 	vneg.f32	s15, s15
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.roll = modeAbs;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeAbs;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  setpoint->attitude.roll = values->roll;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6093      	str	r3, [r2, #8]
  setpoint->attitude.pitch = values->pitch;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	0802aad8 	.word	0x0802aad8
 8001c60:	0802ab9c 	.word	0x0802ab9c

08001c64 <hoverDecoder>:
  float vy;           // ...
  float yawrate;      // deg/s
  float zDistance;    // m in the world frame of reference
} __attribute__((packed));
static void hoverDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	72fb      	strb	r3, [r7, #11]
  const struct hoverPacket_s *values = data;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct hoverPacket_s));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d005      	beq.n	8001c8a <hoverDecoder+0x26>
 8001c7e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001c82:	4918      	ldr	r1, [pc, #96]	; (8001ce4 <hoverDecoder+0x80>)
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <hoverDecoder+0x84>)
 8001c86:	f010 f9d1 	bl	801202c <assertFail>

  setpoint->mode.z = modeAbs;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  setpoint->position.z = values->zDistance;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeVelocity;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  setpoint->attitudeRate.yaw = -values->yawrate;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef1 7a67 	vneg.f32	s15, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.x = modeVelocity;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeVelocity;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->velocity.x = values->vx;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
  setpoint->velocity.y = values->vy;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	6513      	str	r3, [r2, #80]	; 0x50

  setpoint->velocity_body = true;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0802aad8 	.word	0x0802aad8
 8001ce8:	0802abc8 	.word	0x0802abc8

08001cec <fullStateDecoder>:
  int16_t rateRoll;  // angular velocity - milliradians / sec
  int16_t ratePitch; //  (NOTE: limits to about 5 full circles per sec.
  int16_t rateYaw;   //   may not be enough for extremely aggressive flight.)
} __attribute__((packed));
static void fullStateDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
  const struct fullStatePacket_s *values = data;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct fullStatePacket_s));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b1c      	cmp	r3, #28
 8001d04:	d005      	beq.n	8001d12 <fullStateDecoder+0x26>
 8001d06:	f240 125d 	movw	r2, #349	; 0x15d
 8001d0a:	4972      	ldr	r1, [pc, #456]	; (8001ed4 <fullStateDecoder+0x1e8>)
 8001d0c:	4872      	ldr	r0, [pc, #456]	; (8001ed8 <fullStateDecoder+0x1ec>)
 8001d0e:	f010 f98d 	bl	801202c <assertFail>
  setpoint->mode.x = modeAbs; \
  setpoint->position.x = values->x / 1000.0f; \
  setpoint->velocity.x = (values->v ## x) / 1000.0f; \
  setpoint->acceleration.x = (values->a ## x) / 1000.0f; \

  UNPACK(x)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001edc <fullStateDecoder+0x1f0>
 8001d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d48:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001edc <fullStateDecoder+0x1f0>
 8001d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001edc <fullStateDecoder+0x1f0>
 8001d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
  UNPACK(y)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d8c:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001edc <fullStateDecoder+0x1f0>
 8001d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001daa:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8001edc <fullStateDecoder+0x1f0>
 8001dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc8:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001edc <fullStateDecoder+0x1f0>
 8001dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  UNPACK(z)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dee:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001edc <fullStateDecoder+0x1f0>
 8001df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0c:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001edc <fullStateDecoder+0x1f0>
 8001e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001edc <fullStateDecoder+0x1f0>
 8001e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  #undef UNPACK

  float const millirad2deg = 180.0f / ((float)M_PI * 1000.0f);
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <fullStateDecoder+0x1f4>)
 8001e3a:	613b      	str	r3, [r7, #16]
  setpoint->attitudeRate.roll = millirad2deg * values->rateRoll;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	edc3 7a06 	vstr	s15, [r3, #24]
  setpoint->attitudeRate.pitch = millirad2deg * values->ratePitch;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edc3 7a07 	vstr	s15, [r3, #28]
  setpoint->attitudeRate.yaw = millirad2deg * values->rateYaw;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	edc3 7a08 	vstr	s15, [r3, #32]

  quatdecompress(values->quat, (float *)&setpoint->attitudeQuaternion.q0);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3324      	adds	r3, #36	; 0x24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7ff fc63 	bl	8001770 <quatdecompress>
  setpoint->mode.quat = modeAbs;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  setpoint->mode.roll = modeDisable;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeDisable;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  setpoint->mode.yaw = modeDisable;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	0802aad8 	.word	0x0802aad8
 8001ed8:	0802abf0 	.word	0x0802abf0
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	3d6aaefa 	.word	0x3d6aaefa

08001ee4 <positionDecoder>:
   float y;
   float z;
   float yaw;   // Orientation in degree
 } __attribute__((packed));
static void positionDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	72fb      	strb	r3, [r7, #11]
  const struct positionPacket_s *values = data;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	617b      	str	r3, [r7, #20]

  setpoint->mode.x = modeAbs;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeAbs;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeAbs;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->position.x = values->x;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	63d3      	str	r3, [r2, #60]	; 0x3c
  setpoint->position.y = values->y;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
  setpoint->position.z = values->z;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeAbs;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitude.yaw = values->yaw;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6113      	str	r3, [r2, #16]
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <crtpCommanderGenericDecodeSetpoint>:
  [positionType]      = positionDecoder,
};

/* Decoder switch */
void crtpCommanderGenericDecodeSetpoint(setpoint_t *setpoint, CRTPPacket *pk)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  static int nTypes = -1;

  ASSERT(pk->size > 0);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <crtpCommanderGenericDecodeSetpoint+0x1e>
 8001f56:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001f5a:	4917      	ldr	r1, [pc, #92]	; (8001fb8 <crtpCommanderGenericDecodeSetpoint+0x74>)
 8001f5c:	4817      	ldr	r0, [pc, #92]	; (8001fbc <crtpCommanderGenericDecodeSetpoint+0x78>)
 8001f5e:	f010 f865 	bl	801202c <assertFail>

  if (nTypes<0) {
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da02      	bge.n	8001f70 <crtpCommanderGenericDecodeSetpoint+0x2c>
    nTypes = sizeof(packetDecoders)/sizeof(packetDecoders[0]);
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  uint8_t type = pk->data[0];
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	789b      	ldrb	r3, [r3, #2]
 8001f74:	73fb      	strb	r3, [r7, #15]

  memset(setpoint, 0, sizeof(setpoint_t));
 8001f76:	2270      	movs	r2, #112	; 0x70
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f022 fd80 	bl	8024a80 <memset>

  if (type<nTypes && (packetDecoders[type] != NULL)) {
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	da12      	bge.n	8001fb0 <crtpCommanderGenericDecodeSetpoint+0x6c>
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <crtpCommanderGenericDecodeSetpoint+0x80>)
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <crtpCommanderGenericDecodeSetpoint+0x6c>
    packetDecoders[type](setpoint, type, ((char*)pk->data)+1, pk->size-1);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <crtpCommanderGenericDecodeSetpoint+0x80>)
 8001f9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	7bf9      	ldrb	r1, [r7, #15]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	47a0      	blx	r4
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	0802aad8 	.word	0x0802aad8
 8001fbc:	0802ac1c 	.word	0x0802ac1c
 8001fc0:	2000002c 	.word	0x2000002c
 8001fc4:	0802eed8 	.word	0x0802eed8

08001fc8 <radians>:


// ----------------------------- scalars --------------------------------

static inline float fsqr(float x) { return x * x; }
static inline float radians(float degrees) { return (M_PI_F / 180.0f) * degrees; }
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001fec <radians+0x24>
 8001fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	3c8efa35 	.word	0x3c8efa35

08001ff0 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08f      	sub	sp, #60	; 0x3c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	ed87 0a07 	vstr	s0, [r7, #28]
 8001ffa:	edc7 0a06 	vstr	s1, [r7, #24]
 8001ffe:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800200e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002012:	f107 0220 	add.w	r2, r7, #32
 8002016:	ca07      	ldmia	r2, {r0, r1, r2}
 8002018:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800201c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800201e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	ee06 1a90 	vmov	s13, r1
 8002026:	ee07 2a10 	vmov	s14, r2
 800202a:	ee07 3a90 	vmov	s15, r3
}
 800202e:	eeb0 0a66 	vmov.f32	s0, s13
 8002032:	eef0 0a47 	vmov.f32	s1, s14
 8002036:	eeb0 1a67 	vmov.f32	s2, s15
 800203a:	373c      	adds	r7, #60	; 0x3c
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <vrepeat>:
// construct a vector with the same value repeated for x, y, and z.
static inline struct vec vrepeat(float x) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800204e:	ed97 1a05 	vldr	s2, [r7, #20]
 8002052:	edd7 0a05 	vldr	s1, [r7, #20]
 8002056:	ed97 0a05 	vldr	s0, [r7, #20]
 800205a:	f7ff ffc9 	bl	8001ff0 <mkvec>
 800205e:	eef0 6a40 	vmov.f32	s13, s0
 8002062:	eeb0 7a60 	vmov.f32	s14, s1
 8002066:	eef0 7a41 	vmov.f32	s15, s2
 800206a:	edc7 6a07 	vstr	s13, [r7, #28]
 800206e:	ed87 7a08 	vstr	s14, [r7, #32]
 8002072:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8002076:	69f9      	ldr	r1, [r7, #28]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	ee06 1a90 	vmov	s13, r1
 8002080:	ee07 2a10 	vmov	s14, r2
 8002084:	ee07 3a90 	vmov	s15, r3
}
 8002088:	eeb0 0a66 	vmov.f32	s0, s13
 800208c:	eef0 0a47 	vmov.f32	s1, s14
 8002090:	eeb0 1a67 	vmov.f32	s2, s15
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <vzero>:
// construct a zero-vector.
static inline struct vec vzero(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 80020a2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80020e8 <vzero+0x4c>
 80020a6:	f7ff ffcd 	bl	8002044 <vrepeat>
 80020aa:	eef0 6a40 	vmov.f32	s13, s0
 80020ae:	eeb0 7a60 	vmov.f32	s14, s1
 80020b2:	eef0 7a41 	vmov.f32	s15, s2
 80020b6:	edc7 6a05 	vstr	s13, [r7, #20]
 80020ba:	ed87 7a06 	vstr	s14, [r7, #24]
 80020be:	edc7 7a07 	vstr	s15, [r7, #28]
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	ee06 1a90 	vmov	s13, r1
 80020cc:	ee07 2a10 	vmov	s14, r2
 80020d0:	ee07 3a90 	vmov	s15, r3
}
 80020d4:	eeb0 0a66 	vmov.f32	s0, s13
 80020d8:	eef0 0a47 	vmov.f32	s1, s14
 80020dc:	eeb0 1a67 	vmov.f32	s2, s15
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	00000000 	.word	0x00000000

080020ec <handleMemGetSize>:
// safe default settings for takeoff and landing velocity
static float defaultTakeoffVelocity = 0.5f;
static float defaultLandingVelocity = 0.5f;

// Trajectory memory handling from the memory module
static uint32_t handleMemGetSize(void) { return crtpCommanderHighLevelTrajectoryMemSize(); }
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f000 ff35 	bl	8002f5e <crtpCommanderHighLevelTrajectoryMemSize>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}

080020fa <state2vec>:
static int start_trajectory(const struct data_start_trajectory* data);
static int define_trajectory(const struct data_define_trajectory* data);

// Helper functions
static struct vec state2vec(struct vec3_s v)
{
 80020fa:	b590      	push	{r4, r7, lr}
 80020fc:	b08d      	sub	sp, #52	; 0x34
 80020fe:	af00      	add	r7, sp, #0
 8002100:	f107 0410 	add.w	r4, r7, #16
 8002104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return mkvec(v.x, v.y, v.z);
 8002108:	edd7 7a05 	vldr	s15, [r7, #20]
 800210c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002110:	edd7 6a07 	vldr	s13, [r7, #28]
 8002114:	eeb0 1a66 	vmov.f32	s2, s13
 8002118:	eef0 0a47 	vmov.f32	s1, s14
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	f7ff ff66 	bl	8001ff0 <mkvec>
 8002124:	eef0 6a40 	vmov.f32	s13, s0
 8002128:	eeb0 7a60 	vmov.f32	s14, s1
 800212c:	eef0 7a41 	vmov.f32	s15, s2
 8002130:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8002134:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8002138:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800213c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	ee06 1a90 	vmov	s13, r1
 8002146:	ee07 2a10 	vmov	s14, r2
 800214a:	ee07 3a90 	vmov	s15, r3
}
 800214e:	eeb0 0a66 	vmov.f32	s0, s13
 8002152:	eef0 0a47 	vmov.f32	s1, s14
 8002156:	eeb0 1a67 	vmov.f32	s2, s15
 800215a:	3734      	adds	r7, #52	; 0x34
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <isInGroup>:

bool isInGroup(uint8_t g) {
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  return g == ALL_GROUPS || (g & group_mask) != 0;
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <isInGroup+0x1e>
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <isInGroup+0x38>)
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4013      	ands	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <isInGroup+0x22>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <isInGroup+0x24>
 8002182:	2300      	movs	r3, #0
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20007c30 	.word	0x20007c30

0800219c <crtpCommanderHighLevelInit>:

void crtpCommanderHighLevelInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af04      	add	r7, sp, #16
  if (isInit) {
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <crtpCommanderHighLevelInit+0x9c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d143      	bne.n	8002232 <crtpCommanderHighLevelInit+0x96>
    return;
  }

  memoryRegisterHandler(&memDef);
 80021aa:	4824      	ldr	r0, [pc, #144]	; (800223c <crtpCommanderHighLevelInit+0xa0>)
 80021ac:	f002 ff7c 	bl	80050a8 <memoryRegisterHandler>
  plan_init(&planner);
 80021b0:	4823      	ldr	r0, [pc, #140]	; (8002240 <crtpCommanderHighLevelInit+0xa4>)
 80021b2:	f00c f93b 	bl	800e42c <plan_init>

  //Start the trajectory task
  STATIC_MEM_TASK_CREATE(crtpCommanderHighLevelTask, crtpCommanderHighLevelTask, CMD_HIGH_LEVEL_TASK_NAME, NULL, CMD_HIGH_LEVEL_TASK_PRI);
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <crtpCommanderHighLevelInit+0xa8>)
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <crtpCommanderHighLevelInit+0xac>)
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	4920      	ldr	r1, [pc, #128]	; (800224c <crtpCommanderHighLevelInit+0xb0>)
 80021cc:	4820      	ldr	r0, [pc, #128]	; (8002250 <crtpCommanderHighLevelInit+0xb4>)
 80021ce:	f01e fa8f 	bl	80206f0 <xTaskCreateStatic>

  lockTraj = xSemaphoreCreateMutexStatic(&lockTrajBuffer);
 80021d2:	4920      	ldr	r1, [pc, #128]	; (8002254 <crtpCommanderHighLevelInit+0xb8>)
 80021d4:	2001      	movs	r0, #1
 80021d6:	f01d fc76 	bl	801fac6 <xQueueCreateMutexStatic>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <crtpCommanderHighLevelInit+0xbc>)
 80021de:	6013      	str	r3, [r2, #0]

  pos = vzero();
 80021e0:	f7ff ff5c 	bl	800209c <vzero>
 80021e4:	eef0 6a40 	vmov.f32	s13, s0
 80021e8:	eeb0 7a60 	vmov.f32	s14, s1
 80021ec:	eef0 7a41 	vmov.f32	s15, s2
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <crtpCommanderHighLevelInit+0xc0>)
 80021f2:	edc3 6a00 	vstr	s13, [r3]
 80021f6:	ed83 7a01 	vstr	s14, [r3, #4]
 80021fa:	edc3 7a02 	vstr	s15, [r3, #8]
  vel = vzero();
 80021fe:	f7ff ff4d 	bl	800209c <vzero>
 8002202:	eef0 6a40 	vmov.f32	s13, s0
 8002206:	eeb0 7a60 	vmov.f32	s14, s1
 800220a:	eef0 7a41 	vmov.f32	s15, s2
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <crtpCommanderHighLevelInit+0xc4>)
 8002210:	edc3 6a00 	vstr	s13, [r3]
 8002214:	ed83 7a01 	vstr	s14, [r3, #4]
 8002218:	edc3 7a02 	vstr	s15, [r3, #8]
  yaw = 0;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <crtpCommanderHighLevelInit+0xc8>)
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

  isBlocked = false;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <crtpCommanderHighLevelInit+0xcc>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

  isInit = true;
 800222a:	4b03      	ldr	r3, [pc, #12]	; (8002238 <crtpCommanderHighLevelInit+0x9c>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e000      	b.n	8002234 <crtpCommanderHighLevelInit+0x98>
    return;
 8002232:	bf00      	nop
}
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20007b86 	.word	0x20007b86
 800223c:	0802eef8 	.word	0x0802eef8
 8002240:	20007b88 	.word	0x20007b88
 8002244:	200019e8 	.word	0x200019e8
 8002248:	20007d68 	.word	0x20007d68
 800224c:	0802ac74 	.word	0x0802ac74
 8002250:	080023d1 	.word	0x080023d1
 8002254:	20007d18 	.word	0x20007d18
 8002258:	20007d14 	.word	0x20007d14
 800225c:	20007c34 	.word	0x20007c34
 8002260:	20007c40 	.word	0x20007c40
 8002264:	20007c4c 	.word	0x20007c4c
 8002268:	20007c31 	.word	0x20007c31

0800226c <crtpCommanderHighLevelTellState>:
{
  return plan_is_stopped(&planner);
}

void crtpCommanderHighLevelTellState(const state_t *state)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <crtpCommanderHighLevelTellState+0x8c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800227c:	4618      	mov	r0, r3
 800227e:	f01d febf 	bl	8020000 <xQueueSemaphoreTake>
  pos = state2vec(state->position);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3320      	adds	r3, #32
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	f7ff ff37 	bl	80020fa <state2vec>
 800228c:	eef0 6a40 	vmov.f32	s13, s0
 8002290:	eeb0 7a60 	vmov.f32	s14, s1
 8002294:	eef0 7a41 	vmov.f32	s15, s2
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <crtpCommanderHighLevelTellState+0x90>)
 800229a:	edc3 6a00 	vstr	s13, [r3]
 800229e:	ed83 7a01 	vstr	s14, [r3, #4]
 80022a2:	edc3 7a02 	vstr	s15, [r3, #8]
  vel = state2vec(state->velocity);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3330      	adds	r3, #48	; 0x30
 80022aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ac:	f7ff ff25 	bl	80020fa <state2vec>
 80022b0:	eef0 6a40 	vmov.f32	s13, s0
 80022b4:	eeb0 7a60 	vmov.f32	s14, s1
 80022b8:	eef0 7a41 	vmov.f32	s15, s2
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <crtpCommanderHighLevelTellState+0x94>)
 80022be:	edc3 6a00 	vstr	s13, [r3]
 80022c2:	ed83 7a01 	vstr	s14, [r3, #4]
 80022c6:	edc3 7a02 	vstr	s15, [r3, #8]
  yaw = radians(state->attitude.yaw);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f7ff fe78 	bl	8001fc8 <radians>
 80022d8:	eef0 7a40 	vmov.f32	s15, s0
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <crtpCommanderHighLevelTellState+0x98>)
 80022de:	edc3 7a00 	vstr	s15, [r3]
  xSemaphoreGive(lockTraj);
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <crtpCommanderHighLevelTellState+0x8c>)
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	f01d fc06 	bl	801fafc <xQueueGenericSend>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20007d14 	.word	0x20007d14
 80022fc:	20007c34 	.word	0x20007c34
 8002300:	20007c40 	.word	0x20007c40
 8002304:	20007c4c 	.word	0x20007c4c

08002308 <handleCommand>:
    return false;
  }
}

static int handleCommand(const enum TrajectoryCommand_e command, const uint8_t* data)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]

  switch(command)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d84f      	bhi.n	80023be <handleCommand+0xb6>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <handleCommand+0x1c>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002351 	.word	0x08002351
 8002328:	0800235b 	.word	0x0800235b
 800232c:	08002365 	.word	0x08002365
 8002330:	08002397 	.word	0x08002397
 8002334:	080023a1 	.word	0x080023a1
 8002338:	080023ab 	.word	0x080023ab
 800233c:	080023b5 	.word	0x080023b5
 8002340:	0800236f 	.word	0x0800236f
 8002344:	08002379 	.word	0x08002379
 8002348:	08002383 	.word	0x08002383
 800234c:	0800238d 	.word	0x0800238d
  {
    case COMMAND_SET_GROUP_MASK:
      ret = set_group_mask((const struct data_set_group_mask*)data);
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	f000 f85f 	bl	8002414 <set_group_mask>
 8002356:	60f8      	str	r0, [r7, #12]
      break;
 8002358:	e034      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_TAKEOFF:
      ret = takeoff((const struct data_takeoff*)data);
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	f000 f86c 	bl	8002438 <takeoff>
 8002360:	60f8      	str	r0, [r7, #12]
      break;
 8002362:	e02f      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_LAND:
      ret = land((const struct data_land*)data);
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f000 fa03 	bl	8002770 <land>
 800236a:	60f8      	str	r0, [r7, #12]
      break;
 800236c:	e02a      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_TAKEOFF_2:
      ret = takeoff2((const struct data_takeoff_2*)data);
 800236e:	6838      	ldr	r0, [r7, #0]
 8002370:	f000 f8d6 	bl	8002520 <takeoff2>
 8002374:	60f8      	str	r0, [r7, #12]
      break;
 8002376:	e025      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_LAND_2:
      ret = land2((const struct data_land_2*)data);
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f000 fa6d 	bl	8002858 <land2>
 800237e:	60f8      	str	r0, [r7, #12]
      break;
 8002380:	e020      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_TAKEOFF_WITH_VELOCITY:
      ret = takeoff_with_velocity((const struct data_takeoff_with_velocity*)data);
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f000 f94c 	bl	8002620 <takeoff_with_velocity>
 8002388:	60f8      	str	r0, [r7, #12]
      break;
 800238a:	e01b      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_LAND_WITH_VELOCITY:
      ret = land_with_velocity((const struct data_land_with_velocity*)data);
 800238c:	6838      	ldr	r0, [r7, #0]
 800238e:	f000 fae3 	bl	8002958 <land_with_velocity>
 8002392:	60f8      	str	r0, [r7, #12]
      break;
 8002394:	e016      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_STOP:
      ret = stop((const struct data_stop*)data);
 8002396:	6838      	ldr	r0, [r7, #0]
 8002398:	f000 fb86 	bl	8002aa8 <stop>
 800239c:	60f8      	str	r0, [r7, #12]
      break;
 800239e:	e011      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_GO_TO:
      ret = go_to((const struct data_go_to*)data);
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f000 fba9 	bl	8002af8 <go_to>
 80023a6:	60f8      	str	r0, [r7, #12]
      break;
 80023a8:	e00c      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_START_TRAJECTORY:
      ret = start_trajectory((const struct data_start_trajectory*)data);
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f000 fc80 	bl	8002cb0 <start_trajectory>
 80023b0:	60f8      	str	r0, [r7, #12]
      break;
 80023b2:	e007      	b.n	80023c4 <handleCommand+0xbc>
    case COMMAND_DEFINE_TRAJECTORY:
      ret = define_trajectory((const struct data_define_trajectory*)data);
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f000 fd7b 	bl	8002eb0 <define_trajectory>
 80023ba:	60f8      	str	r0, [r7, #12]
      break;
 80023bc:	e002      	b.n	80023c4 <handleCommand+0xbc>
    default:
      ret = ENOEXEC;
 80023be:	2308      	movs	r3, #8
 80023c0:	60fb      	str	r3, [r7, #12]
      break;
 80023c2:	bf00      	nop
  }

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <crtpCommanderHighLevelTask>:

void crtpCommanderHighLevelTask(void * prm)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  CRTPPacket p;
  crtpInitTaskQueue(CRTP_PORT_SETPOINT_HL);
 80023d8:	2008      	movs	r0, #8
 80023da:	f7fe ff33 	bl	8001244 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_SETPOINT_HL, &p);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	2008      	movs	r0, #8
 80023e6:	f7fe ff5d 	bl	80012a4 <crtpReceivePacketBlock>

    int ret = handleCommand(p.data[0], &p.data[1]);
 80023ea:	7bba      	ldrb	r2, [r7, #14]
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	3303      	adds	r3, #3
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f7ff ff87 	bl	8002308 <handleCommand>
 80023fa:	62f8      	str	r0, [r7, #44]	; 0x2c

    //answer
    p.data[3] = ret;
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	747b      	strb	r3, [r7, #17]
    p.size = 4;
 8002402:	2304      	movs	r3, #4
 8002404:	733b      	strb	r3, [r7, #12]
    crtpSendPacketBlock(&p);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f84a 	bl	80014a4 <crtpSendPacketBlock>
  while(1) {
 8002410:	e7e5      	b.n	80023de <crtpCommanderHighLevelTask+0xe>
	...

08002414 <set_group_mask>:
  }
}

int set_group_mask(const struct data_set_group_mask* data)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  group_mask = data->groupMask;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <set_group_mask+0x20>)
 8002422:	701a      	strb	r2, [r3, #0]

  return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20007c30 	.word	0x20007c30

08002438 <takeoff>:

// Deprecated (removed after August 2023)
int takeoff(const struct data_takeoff* data)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002440:	4b31      	ldr	r3, [pc, #196]	; (8002508 <takeoff+0xd0>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <takeoff+0x14>
    return EBUSY;
 8002448:	2310      	movs	r3, #16
 800244a:	e055      	b.n	80024f8 <takeoff+0xc0>
  }

  int result = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe83 	bl	8002160 <isInGroup>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d04a      	beq.n	80024f6 <takeoff+0xbe>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <takeoff+0xd4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002468:	4618      	mov	r0, r3
 800246a:	f01d fdc9 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800246e:	f012 ff9d 	bl	80153ac <usecTimestamp>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe f897 	bl	80005ac <__aeabi_ul2d>
 800247e:	a320      	add	r3, pc, #128	; (adr r3, 8002500 <takeoff+0xc8>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f9f2 	bl	800086c <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fb9a 	bl	8000bc8 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
 8002496:	60bb      	str	r3, [r7, #8]
    result = plan_takeoff(&planner, pos, yaw, data->height, 0.0f, data->duration, t);
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <takeoff+0xd8>)
 800249a:	ed93 6a00 	vldr	s12, [r3]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80024a4:	4613      	mov	r3, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 1005 	ldr.w	r1, [r3, #5]
 80024ae:	460b      	mov	r3, r1
 80024b0:	4619      	mov	r1, r3
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <takeoff+0xdc>)
 80024b4:	edd3 6a00 	vldr	s13, [r3]
 80024b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80024bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80024c0:	edd7 3a02 	vldr	s7, [r7, #8]
 80024c4:	ee03 1a10 	vmov	s6, r1
 80024c8:	eddf 2a13 	vldr	s5, [pc, #76]	; 8002518 <takeoff+0xe0>
 80024cc:	ee02 2a10 	vmov	s4, r2
 80024d0:	eef0 1a46 	vmov.f32	s3, s12
 80024d4:	eeb0 0a66 	vmov.f32	s0, s13
 80024d8:	eef0 0a47 	vmov.f32	s1, s14
 80024dc:	eeb0 1a67 	vmov.f32	s2, s15
 80024e0:	480e      	ldr	r0, [pc, #56]	; (800251c <takeoff+0xe4>)
 80024e2:	f00c f87d 	bl	800e5e0 <plan_takeoff>
 80024e6:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(lockTraj);
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <takeoff+0xd4>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	f01d fb03 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00000000 	.word	0x00000000
 8002504:	412e8480 	.word	0x412e8480
 8002508:	20007c31 	.word	0x20007c31
 800250c:	20007d14 	.word	0x20007d14
 8002510:	20007c4c 	.word	0x20007c4c
 8002514:	20007c34 	.word	0x20007c34
 8002518:	00000000 	.word	0x00000000
 800251c:	20007b88 	.word	0x20007b88

08002520 <takeoff2>:

int takeoff2(const struct data_takeoff_2* data)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002528:	4b37      	ldr	r3, [pc, #220]	; (8002608 <takeoff2+0xe8>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <takeoff2+0x14>
    return EBUSY;
 8002530:	2310      	movs	r3, #16
 8002532:	e060      	b.n	80025f6 <takeoff2+0xd6>
  }

  int result = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fe0f 	bl	8002160 <isInGroup>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d055      	beq.n	80025f4 <takeoff2+0xd4>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <takeoff2+0xec>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002550:	4618      	mov	r0, r3
 8002552:	f01d fd55 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002556:	f012 ff29 	bl	80153ac <usecTimestamp>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe f823 	bl	80005ac <__aeabi_ul2d>
 8002566:	a326      	add	r3, pc, #152	; (adr r3, 8002600 <takeoff2+0xe0>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe f97e 	bl	800086c <__aeabi_ddiv>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe fb26 	bl	8000bc8 <__aeabi_d2f>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    float hover_yaw = data->yaw;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002586:	613b      	str	r3, [r7, #16]
    if (data->useCurrentYaw) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7a5b      	ldrb	r3, [r3, #9]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <takeoff2+0x76>
      hover_yaw = yaw;
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <takeoff2+0xf0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
    }

    result = plan_takeoff(&planner, pos, yaw, data->height, hover_yaw, data->duration, t);
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <takeoff2+0xf0>)
 8002598:	ed93 6a00 	vldr	s12, [r3]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80025a2:	4613      	mov	r3, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 100a 	ldr.w	r1, [r3, #10]
 80025ac:	460b      	mov	r3, r1
 80025ae:	4619      	mov	r1, r3
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <takeoff2+0xf4>)
 80025b2:	edd3 6a00 	vldr	s13, [r3]
 80025b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80025be:	edd7 3a03 	vldr	s7, [r7, #12]
 80025c2:	ee03 1a10 	vmov	s6, r1
 80025c6:	edd7 2a04 	vldr	s5, [r7, #16]
 80025ca:	ee02 2a10 	vmov	s4, r2
 80025ce:	eef0 1a46 	vmov.f32	s3, s12
 80025d2:	eeb0 0a66 	vmov.f32	s0, s13
 80025d6:	eef0 0a47 	vmov.f32	s1, s14
 80025da:	eeb0 1a67 	vmov.f32	s2, s15
 80025de:	480e      	ldr	r0, [pc, #56]	; (8002618 <takeoff2+0xf8>)
 80025e0:	f00b fffe 	bl	800e5e0 <plan_takeoff>
 80025e4:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(lockTraj);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <takeoff2+0xec>)
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	f01d fa84 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 80025f4:	697b      	ldr	r3, [r7, #20]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	00000000 	.word	0x00000000
 8002604:	412e8480 	.word	0x412e8480
 8002608:	20007c31 	.word	0x20007c31
 800260c:	20007d14 	.word	0x20007d14
 8002610:	20007c4c 	.word	0x20007c4c
 8002614:	20007c34 	.word	0x20007c34
 8002618:	20007b88 	.word	0x20007b88
 800261c:	00000000 	.word	0x00000000

08002620 <takeoff_with_velocity>:

int takeoff_with_velocity(const struct data_takeoff_with_velocity* data)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <takeoff_with_velocity+0x138>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <takeoff_with_velocity+0x14>
    return EBUSY;
 8002630:	2310      	movs	r3, #16
 8002632:	e087      	b.n	8002744 <takeoff_with_velocity+0x124>
  }

  int result = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fd8f 	bl	8002160 <isInGroup>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d07c      	beq.n	8002742 <takeoff_with_velocity+0x122>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <takeoff_with_velocity+0x13c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002650:	4618      	mov	r0, r3
 8002652:	f01d fcd5 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002656:	f012 fea9 	bl	80153ac <usecTimestamp>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fd ffa3 	bl	80005ac <__aeabi_ul2d>
 8002666:	a33a      	add	r3, pc, #232	; (adr r3, 8002750 <takeoff_with_velocity+0x130>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe f8fe 	bl	800086c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe faa6 	bl	8000bc8 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

    float hover_yaw = data->yaw;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002686:	61bb      	str	r3, [r7, #24]
    if (data->useCurrentYaw) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7a9b      	ldrb	r3, [r3, #10]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <takeoff_with_velocity+0x76>
      hover_yaw = yaw;
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <takeoff_with_velocity+0x140>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
    }

    float height = data->height;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800269c:	617b      	str	r3, [r7, #20]
    if (data->heightIsRelative) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	795b      	ldrb	r3, [r3, #5]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <takeoff_with_velocity+0x98>
      height += pos.z;
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <takeoff_with_velocity+0x144>)
 80026a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    float velocity = data->velocity > 0 ? data->velocity : defaultTakeoffVelocity;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	dd03      	ble.n	80026d4 <takeoff_with_velocity+0xb4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80026d2:	e001      	b.n	80026d8 <takeoff_with_velocity+0xb8>
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <takeoff_with_velocity+0x148>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
    float duration = fabsf(height - pos.z) / velocity;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <takeoff_with_velocity+0x144>)
 80026dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80026e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80026e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e8:	eef0 6ae7 	vabs.f32	s13, s15
 80026ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80026f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f4:	edc7 7a02 	vstr	s15, [r7, #8]
    result = plan_takeoff(&planner, pos, yaw, height, hover_yaw, duration, t);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <takeoff_with_velocity+0x140>)
 80026fa:	ed93 6a00 	vldr	s12, [r3]
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <takeoff_with_velocity+0x144>)
 8002700:	edd3 6a00 	vldr	s13, [r3]
 8002704:	ed93 7a01 	vldr	s14, [r3, #4]
 8002708:	edd3 7a02 	vldr	s15, [r3, #8]
 800270c:	edd7 3a04 	vldr	s7, [r7, #16]
 8002710:	ed97 3a02 	vldr	s6, [r7, #8]
 8002714:	edd7 2a06 	vldr	s5, [r7, #24]
 8002718:	ed97 2a05 	vldr	s4, [r7, #20]
 800271c:	eef0 1a46 	vmov.f32	s3, s12
 8002720:	eeb0 0a66 	vmov.f32	s0, s13
 8002724:	eef0 0a47 	vmov.f32	s1, s14
 8002728:	eeb0 1a67 	vmov.f32	s2, s15
 800272c:	480f      	ldr	r0, [pc, #60]	; (800276c <takeoff_with_velocity+0x14c>)
 800272e:	f00b ff57 	bl	800e5e0 <plan_takeoff>
 8002732:	61f8      	str	r0, [r7, #28]
    xSemaphoreGive(lockTraj);
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <takeoff_with_velocity+0x13c>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	f01d f9dd 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 8002742:	69fb      	ldr	r3, [r7, #28]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	f3af 8000 	nop.w
 8002750:	00000000 	.word	0x00000000
 8002754:	412e8480 	.word	0x412e8480
 8002758:	20007c31 	.word	0x20007c31
 800275c:	20007d14 	.word	0x20007d14
 8002760:	20007c4c 	.word	0x20007c4c
 8002764:	20007c34 	.word	0x20007c34
 8002768:	20000030 	.word	0x20000030
 800276c:	20007b88 	.word	0x20007b88

08002770 <land>:

// Deprecated (removed after August 2023)
int land(const struct data_land* data)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <land+0xd0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <land+0x14>
    return EBUSY;
 8002780:	2310      	movs	r3, #16
 8002782:	e055      	b.n	8002830 <land+0xc0>
  }

  int result = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fce7 	bl	8002160 <isInGroup>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d04a      	beq.n	800282e <land+0xbe>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <land+0xd4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027a0:	4618      	mov	r0, r3
 80027a2:	f01d fc2d 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 80027a6:	f012 fe01 	bl	80153ac <usecTimestamp>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fd fefb 	bl	80005ac <__aeabi_ul2d>
 80027b6:	a320      	add	r3, pc, #128	; (adr r3, 8002838 <land+0xc8>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f856 	bl	800086c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f9fe 	bl	8000bc8 <__aeabi_d2f>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60bb      	str	r3, [r7, #8]
    result = plan_land(&planner, pos, yaw, data->height, 0.0f, data->duration, t);
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <land+0xd8>)
 80027d2:	ed93 6a00 	vldr	s12, [r3]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80027dc:	4613      	mov	r3, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 1005 	ldr.w	r1, [r3, #5]
 80027e6:	460b      	mov	r3, r1
 80027e8:	4619      	mov	r1, r3
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <land+0xdc>)
 80027ec:	edd3 6a00 	vldr	s13, [r3]
 80027f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027f8:	edd7 3a02 	vldr	s7, [r7, #8]
 80027fc:	ee03 1a10 	vmov	s6, r1
 8002800:	eddf 2a13 	vldr	s5, [pc, #76]	; 8002850 <land+0xe0>
 8002804:	ee02 2a10 	vmov	s4, r2
 8002808:	eef0 1a46 	vmov.f32	s3, s12
 800280c:	eeb0 0a66 	vmov.f32	s0, s13
 8002810:	eef0 0a47 	vmov.f32	s1, s14
 8002814:	eeb0 1a67 	vmov.f32	s2, s15
 8002818:	480e      	ldr	r0, [pc, #56]	; (8002854 <land+0xe4>)
 800281a:	f00b ff2e 	bl	800e67a <plan_land>
 800281e:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(lockTraj);
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <land+0xd4>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	f01d f967 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00000000 	.word	0x00000000
 800283c:	412e8480 	.word	0x412e8480
 8002840:	20007c31 	.word	0x20007c31
 8002844:	20007d14 	.word	0x20007d14
 8002848:	20007c4c 	.word	0x20007c4c
 800284c:	20007c34 	.word	0x20007c34
 8002850:	00000000 	.word	0x00000000
 8002854:	20007b88 	.word	0x20007b88

08002858 <land2>:

int land2(const struct data_land_2* data)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <land2+0xe8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <land2+0x14>
    return EBUSY;
 8002868:	2310      	movs	r3, #16
 800286a:	e060      	b.n	800292e <land2+0xd6>
  }

  int result = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fc73 	bl	8002160 <isInGroup>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d055      	beq.n	800292c <land2+0xd4>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <land2+0xec>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002888:	4618      	mov	r0, r3
 800288a:	f01d fbb9 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800288e:	f012 fd8d 	bl	80153ac <usecTimestamp>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fd fe87 	bl	80005ac <__aeabi_ul2d>
 800289e:	a326      	add	r3, pc, #152	; (adr r3, 8002938 <land2+0xe0>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd ffe2 	bl	800086c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f98a 	bl	8000bc8 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]

    float hover_yaw = data->yaw;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80028be:	613b      	str	r3, [r7, #16]
    if (data->useCurrentYaw) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7a5b      	ldrb	r3, [r3, #9]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <land2+0x76>
      hover_yaw = yaw;
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <land2+0xf0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	613b      	str	r3, [r7, #16]
    }

    result = plan_land(&planner, pos, yaw, data->height, hover_yaw, data->duration, t);
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <land2+0xf0>)
 80028d0:	ed93 6a00 	vldr	s12, [r3]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80028da:	4613      	mov	r3, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 100a 	ldr.w	r1, [r3, #10]
 80028e4:	460b      	mov	r3, r1
 80028e6:	4619      	mov	r1, r3
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <land2+0xf4>)
 80028ea:	edd3 6a00 	vldr	s13, [r3]
 80028ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80028f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028f6:	edd7 3a03 	vldr	s7, [r7, #12]
 80028fa:	ee03 1a10 	vmov	s6, r1
 80028fe:	edd7 2a04 	vldr	s5, [r7, #16]
 8002902:	ee02 2a10 	vmov	s4, r2
 8002906:	eef0 1a46 	vmov.f32	s3, s12
 800290a:	eeb0 0a66 	vmov.f32	s0, s13
 800290e:	eef0 0a47 	vmov.f32	s1, s14
 8002912:	eeb0 1a67 	vmov.f32	s2, s15
 8002916:	480e      	ldr	r0, [pc, #56]	; (8002950 <land2+0xf8>)
 8002918:	f00b feaf 	bl	800e67a <plan_land>
 800291c:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(lockTraj);
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <land2+0xec>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	2300      	movs	r3, #0
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	f01d f8e8 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 800292c:	697b      	ldr	r3, [r7, #20]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00000000 	.word	0x00000000
 800293c:	412e8480 	.word	0x412e8480
 8002940:	20007c31 	.word	0x20007c31
 8002944:	20007d14 	.word	0x20007d14
 8002948:	20007c4c 	.word	0x20007c4c
 800294c:	20007c34 	.word	0x20007c34
 8002950:	20007b88 	.word	0x20007b88
 8002954:	00000000 	.word	0x00000000

08002958 <land_with_velocity>:

int land_with_velocity(const struct data_land_with_velocity* data)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <land_with_velocity+0x138>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <land_with_velocity+0x14>
    return EBUSY;
 8002968:	2310      	movs	r3, #16
 800296a:	e087      	b.n	8002a7c <land_with_velocity+0x124>
  }

  int result = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fbf3 	bl	8002160 <isInGroup>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d07c      	beq.n	8002a7a <land_with_velocity+0x122>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002980:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <land_with_velocity+0x13c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002988:	4618      	mov	r0, r3
 800298a:	f01d fb39 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800298e:	f012 fd0d 	bl	80153ac <usecTimestamp>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fd fe07 	bl	80005ac <__aeabi_ul2d>
 800299e:	a33a      	add	r3, pc, #232	; (adr r3, 8002a88 <land_with_velocity+0x130>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd ff62 	bl	800086c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f90a 	bl	8000bc8 <__aeabi_d2f>
 80029b4:	4603      	mov	r3, r0
 80029b6:	613b      	str	r3, [r7, #16]

    float hover_yaw = data->yaw;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80029be:	61bb      	str	r3, [r7, #24]
    if (data->useCurrentYaw) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7a9b      	ldrb	r3, [r3, #10]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <land_with_velocity+0x76>
      hover_yaw = yaw;
 80029c8:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <land_with_velocity+0x140>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
    }

    float height = data->height;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80029d4:	617b      	str	r3, [r7, #20]
    if (data->heightIsRelative) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	795b      	ldrb	r3, [r3, #5]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <land_with_velocity+0x98>
      height = pos.z - height;
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <land_with_velocity+0x144>)
 80029e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80029e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ec:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    float velocity = data->velocity > 0 ? data->velocity : defaultLandingVelocity;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	dd03      	ble.n	8002a0c <land_with_velocity+0xb4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002a0a:	e001      	b.n	8002a10 <land_with_velocity+0xb8>
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <land_with_velocity+0x148>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
    float duration = fabsf(height - pos.z) / velocity;
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <land_with_velocity+0x144>)
 8002a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	eef0 6ae7 	vabs.f32	s13, s15
 8002a24:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a2c:	edc7 7a02 	vstr	s15, [r7, #8]
    result = plan_land(&planner, pos, yaw, height, hover_yaw, duration, t);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <land_with_velocity+0x140>)
 8002a32:	ed93 6a00 	vldr	s12, [r3]
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <land_with_velocity+0x144>)
 8002a38:	edd3 6a00 	vldr	s13, [r3]
 8002a3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a40:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a44:	edd7 3a04 	vldr	s7, [r7, #16]
 8002a48:	ed97 3a02 	vldr	s6, [r7, #8]
 8002a4c:	edd7 2a06 	vldr	s5, [r7, #24]
 8002a50:	ed97 2a05 	vldr	s4, [r7, #20]
 8002a54:	eef0 1a46 	vmov.f32	s3, s12
 8002a58:	eeb0 0a66 	vmov.f32	s0, s13
 8002a5c:	eef0 0a47 	vmov.f32	s1, s14
 8002a60:	eeb0 1a67 	vmov.f32	s2, s15
 8002a64:	480f      	ldr	r0, [pc, #60]	; (8002aa4 <land_with_velocity+0x14c>)
 8002a66:	f00b fe08 	bl	800e67a <plan_land>
 8002a6a:	61f8      	str	r0, [r7, #28]
    xSemaphoreGive(lockTraj);
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <land_with_velocity+0x13c>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	f01d f841 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	f3af 8000 	nop.w
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	412e8480 	.word	0x412e8480
 8002a90:	20007c31 	.word	0x20007c31
 8002a94:	20007d14 	.word	0x20007d14
 8002a98:	20007c4c 	.word	0x20007c4c
 8002a9c:	20007c34 	.word	0x20007c34
 8002aa0:	20000034 	.word	0x20000034
 8002aa4:	20007b88 	.word	0x20007b88

08002aa8 <stop>:

int stop(const struct data_stop* data)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  int result = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fb51 	bl	8002160 <isInGroup>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d010      	beq.n	8002ae6 <stop+0x3e>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <stop+0x48>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002acc:	4618      	mov	r0, r3
 8002ace:	f01d fa97 	bl	8020000 <xQueueSemaphoreTake>
    plan_stop(&planner);
 8002ad2:	4808      	ldr	r0, [pc, #32]	; (8002af4 <stop+0x4c>)
 8002ad4:	f00b fcc8 	bl	800e468 <plan_stop>
    xSemaphoreGive(lockTraj);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <stop+0x48>)
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	2300      	movs	r3, #0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f01d f80b 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20007d14 	.word	0x20007d14
 8002af4:	20007b88 	.word	0x20007b88

08002af8 <go_to>:

int go_to(const struct data_go_to* data)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    // pos, vel, yaw will be filled before using
    .acc = {0.0f, 0.0f, 0.0f},
    .omega = {0.0f, 0.0f, 0.0f},
  };

  if (isBlocked) {
 8002b00:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <go_to+0x198>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <go_to+0x14>
    return EBUSY;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	e0b7      	b.n	8002c7c <go_to+0x184>
  }

  int result = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fb23 	bl	8002160 <isInGroup>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80ac 	beq.w	8002c7a <go_to+0x182>
    struct vec hover_pos = mkvec(data->x, data->y, data->z);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8002b32:	460b      	mov	r3, r1
 8002b34:	4619      	mov	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002b3c:	ee01 3a10 	vmov	s2, r3
 8002b40:	ee00 1a90 	vmov	s1, r1
 8002b44:	ee00 2a10 	vmov	s0, r2
 8002b48:	f7ff fa52 	bl	8001ff0 <mkvec>
 8002b4c:	eef0 6a40 	vmov.f32	s13, s0
 8002b50:	eeb0 7a60 	vmov.f32	s14, s1
 8002b54:	eef0 7a41 	vmov.f32	s15, s2
 8002b58:	edc7 6a03 	vstr	s13, [r7, #12]
 8002b5c:	ed87 7a04 	vstr	s14, [r7, #16]
 8002b60:	edc7 7a05 	vstr	s15, [r7, #20]
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002b64:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <go_to+0x19c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f01d fa47 	bl	8020000 <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002b72:	f012 fc1b 	bl	80153ac <usecTimestamp>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fd fd15 	bl	80005ac <__aeabi_ul2d>
 8002b82:	a341      	add	r3, pc, #260	; (adr r3, 8002c88 <go_to+0x190>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fe70 	bl	800086c <__aeabi_ddiv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f818 	bl	8000bc8 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]
    if (plan_is_disabled(&planner) || plan_is_stopped(&planner)) {
 8002b9c:	483e      	ldr	r0, [pc, #248]	; (8002c98 <go_to+0x1a0>)
 8002b9e:	f00b fca5 	bl	800e4ec <plan_is_disabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <go_to+0xbc>
 8002ba8:	483b      	ldr	r0, [pc, #236]	; (8002c98 <go_to+0x1a0>)
 8002baa:	f00b fc8e 	bl	800e4ca <plan_is_stopped>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d035      	beq.n	8002c20 <go_to+0x128>
      ev.pos = pos;
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <go_to+0x1a4>)
 8002bb6:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <go_to+0x1a8>)
 8002bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ev.vel = vel;
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <go_to+0x1a4>)
 8002bc0:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <go_to+0x1ac>)
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ev.yaw = yaw;
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <go_to+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <go_to+0x1a4>)
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
      result = plan_go_to_from(&planner, &ev, data->relative, hover_pos, data->yaw, data->duration, t);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8002be6:	460b      	mov	r3, r1
 8002be8:	4619      	mov	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002bf0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bfc:	edd7 2a06 	vldr	s5, [r7, #24]
 8002c00:	ee02 3a10 	vmov	s4, r3
 8002c04:	ee01 1a90 	vmov	s3, r1
 8002c08:	eeb0 0a66 	vmov.f32	s0, s13
 8002c0c:	eef0 0a47 	vmov.f32	s1, s14
 8002c10:	eeb0 1a67 	vmov.f32	s2, s15
 8002c14:	4921      	ldr	r1, [pc, #132]	; (8002c9c <go_to+0x1a4>)
 8002c16:	4820      	ldr	r0, [pc, #128]	; (8002c98 <go_to+0x1a0>)
 8002c18:	f00b fd7c 	bl	800e714 <plan_go_to_from>
 8002c1c:	61f8      	str	r0, [r7, #28]
 8002c1e:	e025      	b.n	8002c6c <go_to+0x174>
    }
    else {
      result = plan_go_to(&planner, data->relative, hover_pos, data->yaw, data->duration, t);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8002c34:	460b      	mov	r3, r1
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002c3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c42:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c4a:	edd7 2a06 	vldr	s5, [r7, #24]
 8002c4e:	ee02 3a10 	vmov	s4, r3
 8002c52:	ee01 1a90 	vmov	s3, r1
 8002c56:	eeb0 0a66 	vmov.f32	s0, s13
 8002c5a:	eef0 0a47 	vmov.f32	s1, s14
 8002c5e:	eeb0 1a67 	vmov.f32	s2, s15
 8002c62:	4611      	mov	r1, r2
 8002c64:	480c      	ldr	r0, [pc, #48]	; (8002c98 <go_to+0x1a0>)
 8002c66:	f00b fe31 	bl	800e8cc <plan_go_to>
 8002c6a:	61f8      	str	r0, [r7, #28]
    }
    xSemaphoreGive(lockTraj);
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <go_to+0x19c>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	2300      	movs	r3, #0
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	f01c ff41 	bl	801fafc <xQueueGenericSend>
  }
  return result;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	f3af 8000 	nop.w
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	412e8480 	.word	0x412e8480
 8002c90:	20007c31 	.word	0x20007c31
 8002c94:	20007d14 	.word	0x20007d14
 8002c98:	20007b88 	.word	0x20007b88
 8002c9c:	20008168 	.word	0x20008168
 8002ca0:	20007c34 	.word	0x20007c34
 8002ca4:	20007c40 	.word	0x20007c40
 8002ca8:	20007c4c 	.word	0x20007c4c
 8002cac:	00000000 	.word	0x00000000

08002cb0 <start_trajectory>:

int start_trajectory(const struct data_start_trajectory* data)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <start_trajectory+0x1e0>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <start_trajectory+0x14>
    return EBUSY;
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	e0da      	b.n	8002e7a <start_trajectory+0x1ca>
  }

  int result = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fa47 	bl	8002160 <isInGroup>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80cf 	beq.w	8002e78 <start_trajectory+0x1c8>
    if (data->trajectoryId < NUM_TRAJECTORY_DEFINITIONS) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	78db      	ldrb	r3, [r3, #3]
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	f200 80ca 	bhi.w	8002e78 <start_trajectory+0x1c8>
      struct trajectoryDescription* trajDesc = &trajectory_descriptions[data->trajectoryId];
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	78db      	ldrb	r3, [r3, #3]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	4a68      	ldr	r2, [pc, #416]	; (8002e94 <start_trajectory+0x1e4>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
      if (   trajDesc->trajectoryLocation == TRAJECTORY_LOCATION_MEM
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d15a      	bne.n	8002db4 <start_trajectory+0x104>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D) {
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d156      	bne.n	8002db4 <start_trajectory+0x104>
        xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002d06:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <start_trajectory+0x1e8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f01d f976 	bl	8020000 <xQueueSemaphoreTake>
        float t = usecTimestamp() / 1e6;
 8002d14:	f012 fb4a 	bl	80153ac <usecTimestamp>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fc44 	bl	80005ac <__aeabi_ul2d>
 8002d24:	a358      	add	r3, pc, #352	; (adr r3, 8002e88 <start_trajectory+0x1d8>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fd9f 	bl	800086c <__aeabi_ddiv>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd ff47 	bl	8000bc8 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60fb      	str	r3, [r7, #12]
        trajectory.t_begin = t;
 8002d3e:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <start_trajectory+0x1ec>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6013      	str	r3, [r2, #0]
        trajectory.timescale = data->timescale;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <start_trajectory+0x1ec>)
 8002d4a:	6053      	str	r3, [r2, #4]
        trajectory.n_pieces = trajDesc->trajectoryIdentifier.mem.n_pieces;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	799a      	ldrb	r2, [r3, #6]
 8002d50:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <start_trajectory+0x1ec>)
 8002d52:	751a      	strb	r2, [r3, #20]
        trajectory.pieces = (struct poly4d*)&trajectories_memory[trajDesc->trajectoryIdentifier.mem.offset];
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002d5a:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <start_trajectory+0x1f0>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <start_trajectory+0x1ec>)
 8002d60:	6193      	str	r3, [r2, #24]
        result = plan_start_trajectory(&planner, &trajectory, data->reversed, data->relative, pos);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	789b      	ldrb	r3, [r3, #2]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2d9      	uxtb	r1, r3
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <start_trajectory+0x1f4>)
 8002d80:	edd3 6a00 	vldr	s13, [r3]
 8002d84:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d8c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d90:	eef0 0a47 	vmov.f32	s1, s14
 8002d94:	eeb0 1a67 	vmov.f32	s2, s15
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4940      	ldr	r1, [pc, #256]	; (8002e9c <start_trajectory+0x1ec>)
 8002d9c:	4842      	ldr	r0, [pc, #264]	; (8002ea8 <start_trajectory+0x1f8>)
 8002d9e:	f00b fdd3 	bl	800e948 <plan_start_trajectory>
 8002da2:	6178      	str	r0, [r7, #20]
        xSemaphoreGive(lockTraj);
 8002da4:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <start_trajectory+0x1e8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	f01c fea5 	bl	801fafc <xQueueGenericSend>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D) {
 8002db2:	e061      	b.n	8002e78 <start_trajectory+0x1c8>
      } else if (trajDesc->trajectoryLocation == TRAJECTORY_LOCATION_MEM
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d15d      	bne.n	8002e78 <start_trajectory+0x1c8>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D_COMPRESSED) {
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d159      	bne.n	8002e78 <start_trajectory+0x1c8>

        if (data->timescale != 1 || data->reversed) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002dcc:	ee07 3a10 	vmov	s14, r3
 8002dd0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d103      	bne.n	8002de2 <start_trajectory+0x132>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	789b      	ldrb	r3, [r3, #2]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <start_trajectory+0x138>
          result = ENOEXEC;
 8002de2:	2308      	movs	r3, #8
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e047      	b.n	8002e78 <start_trajectory+0x1c8>
        } else {
          xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <start_trajectory+0x1e8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002df0:	4618      	mov	r0, r3
 8002df2:	f01d f905 	bl	8020000 <xQueueSemaphoreTake>
          float t = usecTimestamp() / 1e6;
 8002df6:	f012 fad9 	bl	80153ac <usecTimestamp>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7fd fbd3 	bl	80005ac <__aeabi_ul2d>
 8002e06:	a320      	add	r3, pc, #128	; (adr r3, 8002e88 <start_trajectory+0x1d8>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fd2e 	bl	800086c <__aeabi_ddiv>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd fed6 	bl	8000bc8 <__aeabi_d2f>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60bb      	str	r3, [r7, #8]
          piecewise_compressed_load(
            &compressed_trajectory,
            &trajectories_memory[trajDesc->trajectoryIdentifier.mem.offset]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <start_trajectory+0x1f0>)
 8002e28:	4413      	add	r3, r2
          piecewise_compressed_load(
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	481f      	ldr	r0, [pc, #124]	; (8002eac <start_trajectory+0x1fc>)
 8002e2e:	f00d ff0f 	bl	8010c50 <piecewise_compressed_load>
          );
          compressed_trajectory.t_begin = t;
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <start_trajectory+0x1fc>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6013      	str	r3, [r2, #0]
          result = plan_start_compressed_trajectory(&planner, &compressed_trajectory, data->relative, pos);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <start_trajectory+0x1f4>)
 8002e48:	edd3 6a00 	vldr	s13, [r3]
 8002e4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e50:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e54:	eeb0 0a66 	vmov.f32	s0, s13
 8002e58:	eef0 0a47 	vmov.f32	s1, s14
 8002e5c:	eeb0 1a67 	vmov.f32	s2, s15
 8002e60:	4912      	ldr	r1, [pc, #72]	; (8002eac <start_trajectory+0x1fc>)
 8002e62:	4811      	ldr	r0, [pc, #68]	; (8002ea8 <start_trajectory+0x1f8>)
 8002e64:	f00b fe10 	bl	800ea88 <plan_start_compressed_trajectory>
 8002e68:	6178      	str	r0, [r7, #20]
          xSemaphoreGive(lockTraj);
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <start_trajectory+0x1e8>)
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	f01c fe42 	bl	801fafc <xQueueGenericSend>
        }
      }
    }
  }
  return result;
 8002e78:	697b      	ldr	r3, [r7, #20]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	412e8480 	.word	0x412e8480
 8002e90:	20007c31 	.word	0x20007c31
 8002e94:	20007b40 	.word	0x20007b40
 8002e98:	20007d14 	.word	0x20007d14
 8002e9c:	20007c50 	.word	0x20007c50
 8002ea0:	20006b40 	.word	0x20006b40
 8002ea4:	20007c34 	.word	0x20007c34
 8002ea8:	20007b88 	.word	0x20007b88
 8002eac:	20007c6c 	.word	0x20007c6c

08002eb0 <define_trajectory>:

int define_trajectory(const struct data_define_trajectory* data)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if (data->trajectoryId >= NUM_TRAJECTORY_DEFINITIONS) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d901      	bls.n	8002ec4 <define_trajectory+0x14>
    return ENOEXEC;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	e010      	b.n	8002ee6 <define_trajectory+0x36>
  }
  trajectory_descriptions[data->trajectoryId] = data->description;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <define_trajectory+0x44>)
 8002ecc:	460b      	mov	r3, r1
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a5b      	subs	r3, r3, r1
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	6011      	str	r1, [r2, #0]
 8002edc:	8899      	ldrh	r1, [r3, #4]
 8002ede:	799b      	ldrb	r3, [r3, #6]
 8002ee0:	8091      	strh	r1, [r2, #4]
 8002ee2:	7193      	strb	r3, [r2, #6]
  return 0;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20007b40 	.word	0x20007b40

08002ef8 <handleMemRead>:

static bool handleMemRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* buffer) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	460b      	mov	r3, r1
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	72fb      	strb	r3, [r7, #11]
  return crtpCommanderHighLevelReadTrajectory(memAddr, readLen, buffer);
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f84f 	bl	8002fb0 <crtpCommanderHighLevelReadTrajectory>
 8002f12:	4603      	mov	r3, r0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <handleMemWrite>:

static bool handleMemWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* buffer) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	460b      	mov	r3, r1
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	72fb      	strb	r3, [r7, #11]
  return crtpCommanderHighLevelWriteTrajectory(memAddr, writeLen, buffer);
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f81d 	bl	8002f70 <crtpCommanderHighLevelWriteTrajectory>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <crtpCommanderHighLevelStop>:

  return handleCommand(COMMAND_LAND_2, (const uint8_t*)&data);
}

int crtpCommanderHighLevelStop()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  struct data_stop data =
 8002f46:	2300      	movs	r3, #0
 8002f48:	713b      	strb	r3, [r7, #4]
  {
    .groupMask = ALL_GROUPS,
  };

  return handleCommand(COMMAND_STOP, (const uint8_t*)&data);
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	2003      	movs	r0, #3
 8002f50:	f7ff f9da 	bl	8002308 <handleCommand>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <crtpCommanderHighLevelTrajectoryMemSize>:

  return handleCommand(COMMAND_DEFINE_TRAJECTORY, (const uint8_t*)&data);
}

uint32_t crtpCommanderHighLevelTrajectoryMemSize()
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  return sizeof(trajectories_memory);
 8002f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <crtpCommanderHighLevelWriteTrajectory>:

bool crtpCommanderHighLevelWriteTrajectory(const uint32_t offset, const uint32_t length, const uint8_t* data)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  bool result = false;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]

  if ((offset + length) <= sizeof(trajectories_memory)) {
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4413      	add	r3, r2
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d809      	bhi.n	8002fa0 <crtpCommanderHighLevelWriteTrajectory+0x30>
    memcpy(&(trajectories_memory[offset]), data, length);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <crtpCommanderHighLevelWriteTrajectory+0x3c>)
 8002f90:	4413      	add	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f021 feed 	bl	8024d76 <memcpy>
    result = true;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20006b40 	.word	0x20006b40

08002fb0 <crtpCommanderHighLevelReadTrajectory>:

bool crtpCommanderHighLevelReadTrajectory(const uint32_t offset, const uint32_t length, uint8_t* destination)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  bool result = false;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]

  if (offset + length <= sizeof(trajectories_memory) && memcpy(destination, &(trajectories_memory[offset]), length)) {
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d80c      	bhi.n	8002fe6 <crtpCommanderHighLevelReadTrajectory+0x36>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <crtpCommanderHighLevelReadTrajectory+0x40>)
 8002fd0:	4413      	add	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f021 fecd 	bl	8024d76 <memcpy>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <crtpCommanderHighLevelReadTrajectory+0x36>
    result = true;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20006b40 	.word	0x20006b40

08002ff4 <rotateYaw>:
 * Rotate Yaw so that the Crazyflie will change what is considered front.
 *
 * @param yawRad Amount of radians to rotate yaw.
 */
static void rotateYaw(setpoint_t *setpoint, float yawRad)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	ed87 0a00 	vstr	s0, [r7]
  float cosy = cosf(yawRad);
 8003000:	ed97 0a00 	vldr	s0, [r7]
 8003004:	f023 fd74 	bl	8026af0 <cosf>
 8003008:	ed87 0a05 	vstr	s0, [r7, #20]
  float siny = sinf(yawRad);
 800300c:	ed97 0a00 	vldr	s0, [r7]
 8003010:	f023 fdba 	bl	8026b88 <sinf>
 8003014:	ed87 0a04 	vstr	s0, [r7, #16]
  float originalRoll = setpoint->attitude.roll;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60fb      	str	r3, [r7, #12]
  float originalPitch = setpoint->attitude.pitch;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	60bb      	str	r3, [r7, #8]

  setpoint->attitude.roll = originalRoll * cosy - originalPitch * siny;
 8003024:	ed97 7a03 	vldr	s14, [r7, #12]
 8003028:	edd7 7a05 	vldr	s15, [r7, #20]
 800302c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003030:	edd7 6a02 	vldr	s13, [r7, #8]
 8003034:	edd7 7a04 	vldr	s15, [r7, #16]
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edc3 7a02 	vstr	s15, [r3, #8]
  setpoint->attitude.pitch = originalPitch * cosy + originalRoll * siny;
 8003046:	ed97 7a02 	vldr	s14, [r7, #8]
 800304a:	edd7 7a05 	vldr	s15, [r7, #20]
 800304e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003052:	edd7 6a03 	vldr	s13, [r7, #12]
 8003056:	edd7 7a04 	vldr	s15, [r7, #16]
 800305a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <yawModeUpdate>:

/**
 * Update Yaw according to current setting
 */
static void yawModeUpdate(setpoint_t *setpoint)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  switch (yawMode)
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <yawModeUpdate+0x38>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <yawModeUpdate+0x16>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d006      	beq.n	8003092 <yawModeUpdate+0x22>
      rotateYaw(setpoint, 45 * M_PI / 180);
      break;
    case XMODE: // Fall through
    default:
      // Default in x-mode. Do nothing
      break;
 8003084:	e00b      	b.n	800309e <yawModeUpdate+0x2e>
      ASSERT(false);
 8003086:	226c      	movs	r2, #108	; 0x6c
 8003088:	4908      	ldr	r1, [pc, #32]	; (80030ac <yawModeUpdate+0x3c>)
 800308a:	4809      	ldr	r0, [pc, #36]	; (80030b0 <yawModeUpdate+0x40>)
 800308c:	f00e ffce 	bl	801202c <assertFail>
      break;
 8003090:	e005      	b.n	800309e <yawModeUpdate+0x2e>
      rotateYaw(setpoint, 45 * M_PI / 180);
 8003092:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80030b4 <yawModeUpdate+0x44>
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffac 	bl	8002ff4 <rotateYaw>
      break;
 800309c:	bf00      	nop
  }
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000003a 	.word	0x2000003a
 80030ac:	0802acb8 	.word	0x0802acb8
 80030b0:	0802ace0 	.word	0x0802ace0
 80030b4:	3f490fdb 	.word	0x3f490fdb

080030b8 <crtpCommanderRpytDecodeSetpoint>:

void crtpCommanderRpytDecodeSetpoint(setpoint_t *setpoint, CRTPPacket *pk)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  struct CommanderCrtpLegacyValues *values = (struct CommanderCrtpLegacyValues*)pk->data;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3302      	adds	r3, #2
 80030c6:	60fb      	str	r3, [r7, #12]

  if (commanderGetActivePriority() == COMMANDER_PRIORITY_DISABLE) {
 80030c8:	f003 fb7a 	bl	80067c0 <commanderGetActivePriority>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <crtpCommanderRpytDecodeSetpoint+0x20>
    thrustLocked = true;
 80030d2:	4bab      	ldr	r3, [pc, #684]	; (8003380 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
  }
  if (values->thrust == 0) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	899b      	ldrh	r3, [r3, #12]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <crtpCommanderRpytDecodeSetpoint+0x30>
    thrustLocked = false;
 80030e2:	4ba7      	ldr	r3, [pc, #668]	; (8003380 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
  }

  // Thrust
  uint16_t rawThrust = values->thrust;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	7b1a      	ldrb	r2, [r3, #12]
 80030ec:	7b5b      	ldrb	r3, [r3, #13]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	4313      	orrs	r3, r2
 80030f2:	817b      	strh	r3, [r7, #10]

  if (thrustLocked || (rawThrust < MIN_THRUST)) {
 80030f4:	4ba2      	ldr	r3, [pc, #648]	; (8003380 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <crtpCommanderRpytDecodeSetpoint+0x4c>
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003102:	d204      	bcs.n	800310e <crtpCommanderRpytDecodeSetpoint+0x56>
    setpoint->thrust = 0;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
 800310c:	e00f      	b.n	800312e <crtpCommanderRpytDecodeSetpoint+0x76>
  } else {
    setpoint->thrust = fminf(rawThrust, MAX_THRUST);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003118:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003384 <crtpCommanderRpytDecodeSetpoint+0x2cc>
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	f023 fdd3 	bl	8026cca <fminf>
 8003124:	eef0 7a40 	vmov.f32	s15, s0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  if (altHoldMode) {
 800312e:	4b96      	ldr	r3, [pc, #600]	; (8003388 <crtpCommanderRpytDecodeSetpoint+0x2d0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d026      	beq.n	8003184 <crtpCommanderRpytDecodeSetpoint+0xcc>
    if (!modeSet) {             //Reset filter and PID values on first initiation of assist mode to prevent sudden reactions.
 8003136:	4b95      	ldr	r3, [pc, #596]	; (800338c <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f083 0301 	eor.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <crtpCommanderRpytDecodeSetpoint+0x9a>
      modeSet = true;
 8003144:	4b91      	ldr	r3, [pc, #580]	; (800338c <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
      positionControllerResetAllPID();
 800314a:	f00b fd1b 	bl	800eb84 <positionControllerResetAllPID>
      positionControllerResetAllfilters();
 800314e:	f00b fd3b 	bl	800ebc8 <positionControllerResetAllfilters>
    }
    setpoint->thrust = 0;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	635a      	str	r2, [r3, #52]	; 0x34
    setpoint->mode.z = modeVelocity;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

    setpoint->velocity.z = ((float) rawThrust - 32767.f) / 32767.f;
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003390 <crtpCommanderRpytDecodeSetpoint+0x2d8>
 8003170:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003174:	eddf 6a86 	vldr	s13, [pc, #536]	; 8003390 <crtpCommanderRpytDecodeSetpoint+0x2d8>
 8003178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8003182:	e006      	b.n	8003192 <crtpCommanderRpytDecodeSetpoint+0xda>
  } else {
    setpoint->mode.z = modeDisable;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    modeSet = false;
 800318c:	4b7f      	ldr	r3, [pc, #508]	; (800338c <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
  }

  // roll/pitch
  if (posHoldMode) {
 8003192:	4b80      	ldr	r3, [pc, #512]	; (8003394 <crtpCommanderRpytDecodeSetpoint+0x2dc>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02e      	beq.n	80031f8 <crtpCommanderRpytDecodeSetpoint+0x140>
    setpoint->mode.x = modeVelocity;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeVelocity;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    setpoint->mode.roll = modeDisable;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    setpoint->mode.pitch = modeDisable;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

    setpoint->velocity.x = values->pitch/30.0f;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    setpoint->velocity.y = values->roll/30.0f;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    setpoint->attitude.roll  = 0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
    setpoint->attitude.pitch = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e096      	b.n	8003326 <crtpCommanderRpytDecodeSetpoint+0x26e>
  } else if (posSetMode && values->thrust != 0) {
 80031f8:	4b67      	ldr	r3, [pc, #412]	; (8003398 <crtpCommanderRpytDecodeSetpoint+0x2e0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d048      	beq.n	8003292 <crtpCommanderRpytDecodeSetpoint+0x1da>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	899b      	ldrh	r3, [r3, #12]
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d043      	beq.n	8003292 <crtpCommanderRpytDecodeSetpoint+0x1da>
    setpoint->mode.x = modeAbs;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeAbs;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    setpoint->mode.z = modeAbs;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    setpoint->mode.roll = modeDisable;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    setpoint->mode.pitch = modeDisable;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    setpoint->mode.yaw = modeAbs;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    setpoint->position.x = -values->pitch;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef1 7a67 	vneg.f32	s15, s15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    setpoint->position.y = values->roll;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
    setpoint->position.z = values->thrust/1000.0f;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	899b      	ldrh	r3, [r3, #12]
 8003258:	b29b      	uxth	r3, r3
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003262:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800339c <crtpCommanderRpytDecodeSetpoint+0x2e4>
 8003266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    setpoint->attitude.roll  = 0;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
    setpoint->attitude.pitch = 0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
    setpoint->attitude.yaw = values->yaw;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6113      	str	r3, [r2, #16]
    setpoint->thrust = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	635a      	str	r2, [r3, #52]	; 0x34
 8003290:	e049      	b.n	8003326 <crtpCommanderRpytDecodeSetpoint+0x26e>
  } else {
    setpoint->mode.x = modeDisable;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeDisable;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    if (stabilizationModeRoll == RATE) {
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <crtpCommanderRpytDecodeSetpoint+0x2e8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <crtpCommanderRpytDecodeSetpoint+0x20c>
      setpoint->mode.roll = modeVelocity;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      setpoint->attitudeRate.roll = values->roll;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6193      	str	r3, [r2, #24]
      setpoint->attitude.roll = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	e00b      	b.n	80032dc <crtpCommanderRpytDecodeSetpoint+0x224>
    } else {
      setpoint->mode.roll = modeAbs;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      setpoint->attitudeRate.roll = 0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
      setpoint->attitude.roll = values->roll;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6093      	str	r3, [r2, #8]
    }

    if (stabilizationModePitch == RATE) {
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <crtpCommanderRpytDecodeSetpoint+0x2ec>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10c      	bne.n	80032fe <crtpCommanderRpytDecodeSetpoint+0x246>
      setpoint->mode.pitch = modeVelocity;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      setpoint->attitudeRate.pitch = values->pitch;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	61d3      	str	r3, [r2, #28]
      setpoint->attitude.pitch = 0;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e00b      	b.n	8003316 <crtpCommanderRpytDecodeSetpoint+0x25e>
    } else {
      setpoint->mode.pitch = modeAbs;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      setpoint->attitudeRate.pitch = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
      setpoint->attitude.pitch = values->pitch;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	60d3      	str	r3, [r2, #12]
    }

    setpoint->velocity.x = 0;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	64da      	str	r2, [r3, #76]	; 0x4c
    setpoint->velocity.y = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	651a      	str	r2, [r3, #80]	; 0x50
  }

  // Yaw
  if (!posSetMode) {
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <crtpCommanderRpytDecodeSetpoint+0x2e0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <crtpCommanderRpytDecodeSetpoint+0x2be>
    if (stabilizationModeYaw == RATE) {
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <crtpCommanderRpytDecodeSetpoint+0x2f0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d110      	bne.n	800335e <crtpCommanderRpytDecodeSetpoint+0x2a6>
      // legacy rate input is inverted
      setpoint->attitudeRate.yaw = -values->yaw;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef1 7a67 	vneg.f32	s15, s15
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edc3 7a08 	vstr	s15, [r3, #32]
      yawModeUpdate(setpoint);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fe8e 	bl	8003070 <yawModeUpdate>

      setpoint->mode.yaw = modeVelocity;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
      setpoint->mode.yaw = modeAbs;
      setpoint->attitudeRate.yaw = 0;
      setpoint->attitude.yaw = values->yaw;
    }
  }
}
 800335c:	e00b      	b.n	8003376 <crtpCommanderRpytDecodeSetpoint+0x2be>
      setpoint->mode.yaw = modeAbs;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
      setpoint->attitudeRate.yaw = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	621a      	str	r2, [r3, #32]
      setpoint->attitude.yaw = values->yaw;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6113      	str	r3, [r2, #16]
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000003b 	.word	0x2000003b
 8003384:	476a6000 	.word	0x476a6000
 8003388:	2000819d 	.word	0x2000819d
 800338c:	200081a0 	.word	0x200081a0
 8003390:	46fffe00 	.word	0x46fffe00
 8003394:	2000819e 	.word	0x2000819e
 8003398:	2000819f 	.word	0x2000819f
 800339c:	447a0000 	.word	0x447a0000
 80033a0:	20000038 	.word	0x20000038
 80033a4:	20000039 	.word	0x20000039
 80033a8:	2000819c 	.word	0x2000819c

080033ac <estimatorEnqueuePosition>:
  m.data.tdoa = *tdoa;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueuePosition(const positionMeasurement_t *position)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePosition;
 80033b4:	2301      	movs	r3, #1
 80033b6:	723b      	strb	r3, [r7, #8]
  m.data.position = *position;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f107 040c 	add.w	r4, r7, #12
 80033be:	461d      	mov	r5, r3
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 fab9 	bl	8007944 <estimatorEnqueue>
}
 80033d2:	bf00      	nop
 80033d4:	3738      	adds	r7, #56	; 0x38
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}

080033da <estimatorEnqueuePose>:

static inline void estimatorEnqueuePose(const poseMeasurement_t *pose)
{
 80033da:	b5b0      	push	{r4, r5, r7, lr}
 80033dc:	b08e      	sub	sp, #56	; 0x38
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePose;
 80033e2:	2302      	movs	r3, #2
 80033e4:	723b      	strb	r3, [r7, #8]
  m.data.pose = *pose;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f107 040c 	add.w	r4, r7, #12
 80033ec:	461d      	mov	r5, r3
 80033ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 faa0 	bl	8007944 <estimatorEnqueue>
}
 8003404:	bf00      	nop
 8003406:	3738      	adds	r7, #56	; 0x38
 8003408:	46bd      	mov	sp, r7
 800340a:	bdb0      	pop	{r4, r5, r7, pc}

0800340c <quatdecompress>:
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 8003416:	f240 13ff 	movw	r3, #511	; 0x1ff
 800341a:	617b      	str	r3, [r7, #20]
	int const i_largest = comp >> 30;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0f9b      	lsrs	r3, r3, #30
 8003420:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8003428:	2303      	movs	r3, #3
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e04d      	b.n	80034ca <quatdecompress+0xbe>
		if (i != i_largest) {
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	d046      	beq.n	80034c4 <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0a5b      	lsrs	r3, r3, #9
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80034fc <quatdecompress+0xf0>
 800345c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10d      	bne.n	800349c <quatdecompress+0x90>
				q[i] = -q[i];
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4413      	add	r3, r2
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	4413      	add	r3, r2
 8003494:	eef1 7a67 	vneg.f32	s15, s15
 8003498:	edc3 7a00 	vstr	s15, [r3]
			sum_squares += q[i] * q[i];
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	ed93 7a00 	vldr	s14, [r3]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	daae      	bge.n	800342e <quatdecompress+0x22>
	q[i_largest] = sqrtf(1.0f - sum_squares);
 80034d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	18d4      	adds	r4, r2, r3
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	f023 fae4 	bl	8026ab4 <sqrtf>
 80034ec:	eef0 7a40 	vmov.f32	s15, s0
 80034f0:	edc4 7a00 	vstr	s15, [r4]
}
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	3f3504f3 	.word	0x3f3504f3

08003500 <locSrvInit>:

static bool isEmergencyStopRequested = false;
static uint32_t emergencyStopWatchdogNotificationTick = 0;

void locSrvInit()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  if (isInit) {
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <locSrvInit+0x38>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d110      	bne.n	8003530 <locSrvInit+0x30>
    return;
  }

  //  uint64_t address = configblockGetRadioAddress();
  uint64_t address = RADIO_CHANNEL_ADDRESS;
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9c7 2300 	strd	r2, r3, [r7]
  my_id = address & 0xFF;
 800351a:	783a      	ldrb	r2, [r7, #0]
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <locSrvInit+0x3c>)
 800351e:	701a      	strb	r2, [r3, #0]

  crtpRegisterPortCB(CRTP_PORT_LOCALIZATION, locSrvCrtpCB);
 8003520:	4907      	ldr	r1, [pc, #28]	; (8003540 <locSrvInit+0x40>)
 8003522:	2006      	movs	r0, #6
 8003524:	f7fd ff7e 	bl	8001424 <crtpRegisterPortCB>
  isInit = true;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <locSrvInit+0x38>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e000      	b.n	8003532 <locSrvInit+0x32>
    return;
 8003530:	bf00      	nop
}
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200081de 	.word	0x200081de
 800353c:	200081df 	.word	0x200081df
 8003540:	08003545 	.word	0x08003545

08003544 <locSrvCrtpCB>:

static void locSrvCrtpCB(CRTPPacket* pk)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  switch (pk->channel)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d00e      	beq.n	8003578 <locSrvCrtpCB+0x34>
 800355a:	2b02      	cmp	r3, #2
 800355c:	dc10      	bgt.n	8003580 <locSrvCrtpCB+0x3c>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <locSrvCrtpCB+0x24>
 8003562:	2b01      	cmp	r3, #1
 8003564:	d004      	beq.n	8003570 <locSrvCrtpCB+0x2c>
      break;
    case EXT_POSITION_PACKED:
      extPositionPackedHandler(pk);
      break;
    default:
      break;
 8003566:	e00b      	b.n	8003580 <locSrvCrtpCB+0x3c>
      extPositionHandler(pk);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f827 	bl	80035bc <extPositionHandler>
      break;
 800356e:	e008      	b.n	8003582 <locSrvCrtpCB+0x3e>
      genericLocHandle(pk);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f9e1 	bl	8003938 <genericLocHandle>
      break;
 8003576:	e004      	b.n	8003582 <locSrvCrtpCB+0x3e>
      extPositionPackedHandler(pk);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fa27 	bl	80039cc <extPositionPackedHandler>
      break;
 800357e:	e000      	b.n	8003582 <locSrvCrtpCB+0x3e>
      break;
 8003580:	bf00      	nop
  }
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <updateLogFromExtPos>:

static void updateLogFromExtPos()
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  ext_pose.x = ext_pos.x;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <updateLogFromExtPos+0x28>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <updateLogFromExtPos+0x2c>)
 8003596:	6013      	str	r3, [r2, #0]
  ext_pose.y = ext_pos.y;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <updateLogFromExtPos+0x28>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <updateLogFromExtPos+0x2c>)
 800359e:	6053      	str	r3, [r2, #4]
  ext_pose.z = ext_pos.z;
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <updateLogFromExtPos+0x28>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <updateLogFromExtPos+0x2c>)
 80035a6:	6093      	str	r3, [r2, #8]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	200081a4 	.word	0x200081a4
 80035b8:	200081b8 	.word	0x200081b8

080035bc <extPositionHandler>:

static void extPositionHandler(CRTPPacket* pk) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPosition* data = (const struct CrtpExtPosition*)pk->data;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3302      	adds	r3, #2
 80035c8:	60fb      	str	r3, [r7, #12]

  ext_pos.x = data->x;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <extPositionHandler+0x54>)
 80035d0:	6013      	str	r3, [r2, #0]
  ext_pos.y = data->y;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <extPositionHandler+0x54>)
 80035d8:	6053      	str	r3, [r2, #4]
  ext_pos.z = data->z;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <extPositionHandler+0x54>)
 80035e0:	6093      	str	r3, [r2, #8]
  ext_pos.stdDev = extPosStdDev;
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <extPositionHandler+0x58>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <extPositionHandler+0x54>)
 80035e8:	60d3      	str	r3, [r2, #12]
  ext_pos.source = MeasurementSourceLocationService;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <extPositionHandler+0x54>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	741a      	strb	r2, [r3, #16]
  updateLogFromExtPos();
 80035f0:	f7ff ffcc 	bl	800358c <updateLogFromExtPos>

  estimatorEnqueuePosition(&ext_pos);
 80035f4:	4806      	ldr	r0, [pc, #24]	; (8003610 <extPositionHandler+0x54>)
 80035f6:	f7ff fed9 	bl	80033ac <estimatorEnqueuePosition>
  tickOfLastPacket = xTaskGetTickCount();
 80035fa:	f01d fbef 	bl	8020ddc <xTaskGetTickCount>
 80035fe:	4603      	mov	r3, r0
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <extPositionHandler+0x5c>)
 8003604:	801a      	strh	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200081a4 	.word	0x200081a4
 8003614:	2000003c 	.word	0x2000003c
 8003618:	200081e0 	.word	0x200081e0

0800361c <extPoseHandler>:

static void extPoseHandler(const CRTPPacket* pk) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPose* data = (const struct CrtpExtPose*)&pk->data[1];
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3303      	adds	r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

  ext_pose.x = data->x;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <extPoseHandler+0x70>)
 8003630:	6013      	str	r3, [r2, #0]
  ext_pose.y = data->y;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <extPoseHandler+0x70>)
 8003638:	6053      	str	r3, [r2, #4]
  ext_pose.z = data->z;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <extPoseHandler+0x70>)
 8003640:	6093      	str	r3, [r2, #8]
  ext_pose.quat.x = data->qx;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a11      	ldr	r2, [pc, #68]	; (800368c <extPoseHandler+0x70>)
 8003648:	60d3      	str	r3, [r2, #12]
  ext_pose.quat.y = data->qy;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	4a0f      	ldr	r2, [pc, #60]	; (800368c <extPoseHandler+0x70>)
 8003650:	6113      	str	r3, [r2, #16]
  ext_pose.quat.z = data->qz;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <extPoseHandler+0x70>)
 8003658:	6153      	str	r3, [r2, #20]
  ext_pose.quat.w = data->qw;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <extPoseHandler+0x70>)
 8003660:	6193      	str	r3, [r2, #24]
  ext_pose.stdDevPos = extPosStdDev;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <extPoseHandler+0x74>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <extPoseHandler+0x70>)
 8003668:	61d3      	str	r3, [r2, #28]
  ext_pose.stdDevQuat = extQuatStdDev;
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <extPoseHandler+0x78>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <extPoseHandler+0x70>)
 8003670:	6213      	str	r3, [r2, #32]

  estimatorEnqueuePose(&ext_pose);
 8003672:	4806      	ldr	r0, [pc, #24]	; (800368c <extPoseHandler+0x70>)
 8003674:	f7ff feb1 	bl	80033da <estimatorEnqueuePose>
  tickOfLastPacket = xTaskGetTickCount();
 8003678:	f01d fbb0 	bl	8020ddc <xTaskGetTickCount>
 800367c:	4603      	mov	r3, r0
 800367e:	b29a      	uxth	r2, r3
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <extPoseHandler+0x7c>)
 8003682:	801a      	strh	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200081b8 	.word	0x200081b8
 8003690:	2000003c 	.word	0x2000003c
 8003694:	20000040 	.word	0x20000040
 8003698:	200081e0 	.word	0x200081e0

0800369c <extPosePackedHandler>:

static void extPosePackedHandler(const CRTPPacket* pk) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint8_t numItems = (pk->size - 1) / sizeof(extPosePackedItem);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <extPosePackedHandler+0x158>)
 80036ae:	fba3 2302 	umull	r2, r3, r3, r2
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e090      	b.n	80037de <extPosePackedHandler+0x142>
    const extPosePackedItem* item = (const extPosePackedItem*)&pk->data[1 + i * sizeof(extPosePackedItem)];
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	3301      	adds	r3, #1
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3302      	adds	r3, #2
 80036d0:	60bb      	str	r3, [r7, #8]
    if (item->id == my_id) {
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <extPosePackedHandler+0x15c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d145      	bne.n	800376a <extPosePackedHandler+0xce>
      ext_pose.x = item->x / 1000.0f;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ee:	eddf 6a43 	vldr	s13, [pc, #268]	; 80037fc <extPosePackedHandler+0x160>
 80036f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <extPosePackedHandler+0x164>)
 80036f8:	edc3 7a00 	vstr	s15, [r3]
      ext_pose.y = item->y / 1000.0f;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003702:	b21b      	sxth	r3, r3
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80037fc <extPosePackedHandler+0x160>
 8003710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <extPosePackedHandler+0x164>)
 8003716:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pose.z = item->z / 1000.0f;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003720:	b21b      	sxth	r3, r3
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372a:	eddf 6a34 	vldr	s13, [pc, #208]	; 80037fc <extPosePackedHandler+0x160>
 800372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003732:	4b33      	ldr	r3, [pc, #204]	; (8003800 <extPosePackedHandler+0x164>)
 8003734:	edc3 7a02 	vstr	s15, [r3, #8]
      quatdecompress(item->quat, (float *)&ext_pose.quat.q0);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800373e:	4931      	ldr	r1, [pc, #196]	; (8003804 <extPosePackedHandler+0x168>)
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe63 	bl	800340c <quatdecompress>
      ext_pose.stdDevPos = extPosStdDev;
 8003746:	4b30      	ldr	r3, [pc, #192]	; (8003808 <extPosePackedHandler+0x16c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <extPosePackedHandler+0x164>)
 800374c:	61d3      	str	r3, [r2, #28]
      ext_pose.stdDevQuat = extQuatStdDev;
 800374e:	4b2f      	ldr	r3, [pc, #188]	; (800380c <extPosePackedHandler+0x170>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <extPosePackedHandler+0x164>)
 8003754:	6213      	str	r3, [r2, #32]
      estimatorEnqueuePose(&ext_pose);
 8003756:	482a      	ldr	r0, [pc, #168]	; (8003800 <extPosePackedHandler+0x164>)
 8003758:	f7ff fe3f 	bl	80033da <estimatorEnqueuePose>
      tickOfLastPacket = xTaskGetTickCount();
 800375c:	f01d fb3e 	bl	8020ddc <xTaskGetTickCount>
 8003760:	4603      	mov	r3, r0
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <extPosePackedHandler+0x174>)
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e036      	b.n	80037d8 <extPosePackedHandler+0x13c>
    } else {
      ext_pos.x = item->x / 1000.0f;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003770:	b21b      	sxth	r3, r3
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80037fc <extPosePackedHandler+0x160>
 800377e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <extPosePackedHandler+0x178>)
 8003784:	edc3 7a00 	vstr	s15, [r3]
      ext_pos.y = item->y / 1000.0f;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800378e:	b21b      	sxth	r3, r3
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003798:	eddf 6a18 	vldr	s13, [pc, #96]	; 80037fc <extPosePackedHandler+0x160>
 800379c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a0:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <extPosePackedHandler+0x178>)
 80037a2:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pos.z = item->z / 1000.0f;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b6:	eddf 6a11 	vldr	s13, [pc, #68]	; 80037fc <extPosePackedHandler+0x160>
 80037ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <extPosePackedHandler+0x178>)
 80037c0:	edc3 7a02 	vstr	s15, [r3, #8]
      ext_pos.stdDev = extPosStdDev;
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <extPosePackedHandler+0x16c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <extPosePackedHandler+0x178>)
 80037ca:	60d3      	str	r3, [r2, #12]
      peerLocalizationTellPosition(item->id, &ext_pos);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4910      	ldr	r1, [pc, #64]	; (8003814 <extPosePackedHandler+0x178>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fbce 	bl	8000f74 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3301      	adds	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f4ff af6a 	bcc.w	80036bc <extPosePackedHandler+0x20>
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	ba2e8ba3 	.word	0xba2e8ba3
 80037f8:	200081df 	.word	0x200081df
 80037fc:	447a0000 	.word	0x447a0000
 8003800:	200081b8 	.word	0x200081b8
 8003804:	200081c4 	.word	0x200081c4
 8003808:	2000003c 	.word	0x2000003c
 800380c:	20000040 	.word	0x20000040
 8003810:	200081e0 	.word	0x200081e0
 8003814:	200081a4 	.word	0x200081a4

08003818 <lpsShortLppPacketHandler>:

static void lpsShortLppPacketHandler(CRTPPacket* pk) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  bool success = false;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
  if (pk->size >= 2) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d918      	bls.n	800385e <lpsShortLppPacketHandler+0x46>
#ifdef CONFIG_DECK_LOCO
//    bool success = lpsSendLppShort(pk->data[1], &pk->data[2], pk->size-2);
#else
    bool success = false;
#endif
    pk->port = CRTP_PORT_LOCALIZATION;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	7853      	ldrb	r3, [r2, #1]
 8003830:	2106      	movs	r1, #6
 8003832:	f361 1307 	bfi	r3, r1, #4, #4
 8003836:	7053      	strb	r3, [r2, #1]
    pk->channel = GENERIC_TYPE;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	7853      	ldrb	r3, [r2, #1]
 800383c:	2101      	movs	r1, #1
 800383e:	f361 0301 	bfi	r3, r1, #0, #2
 8003842:	7053      	strb	r3, [r2, #1]
    pk->size = 3;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	701a      	strb	r2, [r3, #0]
    pk->data[0] = LPS_SHORT_LPP_PACKET;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	709a      	strb	r2, [r3, #2]
    pk->data[2] = success?1:0;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	711a      	strb	r2, [r3, #4]
    // This is best effort, i.e. the blocking version is not needed
    crtpSendPacket(pk);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd fdf9 	bl	8001450 <crtpSendPacket>
  }
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <lhPersistDataWorker>:
    uint16_t calibrationDataBsField;
  } __attribute__((packed));
  uint32_t combinedField;
} __attribute__((packed)) LhPersistArgs_t;

static void lhPersistDataWorker(void* arg) {
 8003866:	b580      	push	{r7, lr}
 8003868:	b08e      	sub	sp, #56	; 0x38
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DECK_LIGHTHOUSE
  LhPersistArgs_t* args = (LhPersistArgs_t*) &arg;
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	633b      	str	r3, [r7, #48]	; 0x30

  bool result = true;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8003878:	2300      	movs	r3, #0
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	e01f      	b.n	80038be <lhPersistDataWorker+0x58>
    uint16_t mask = 1 << baseStation;
 800387e:	2201      	movs	r2, #1
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	85bb      	strh	r3, [r7, #44]	; 0x2c
    bool storeGeo = (args->geoDataBsField & mask) != 0;
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29a      	uxth	r2, r3
 800388e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool storeCalibration = (args->calibrationDataBsField & mask) != 0;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	885b      	ldrh	r3, [r3, #2]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	3301      	adds	r3, #1
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	dddc      	ble.n	800387e <lhPersistDataWorker+0x18>

  }
#else
  bool result = false;
#endif
  CRTPPacket response = {
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	2220      	movs	r2, #32
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f021 f8d7 	bl	8024a80 <memset>
 80038d2:	2302      	movs	r3, #2
 80038d4:	723b      	strb	r3, [r7, #8]
 80038d6:	7a7b      	ldrb	r3, [r7, #9]
 80038d8:	2201      	movs	r2, #1
 80038da:	f362 0301 	bfi	r3, r2, #0, #2
 80038de:	727b      	strb	r3, [r7, #9]
 80038e0:	7a7b      	ldrb	r3, [r7, #9]
 80038e2:	2206      	movs	r2, #6
 80038e4:	f362 1307 	bfi	r3, r2, #4, #4
 80038e8:	727b      	strb	r3, [r7, #9]
 80038ea:	230b      	movs	r3, #11
 80038ec:	72bb      	strb	r3, [r7, #10]
 80038ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038f2:	72fb      	strb	r3, [r7, #11]
    .channel = GENERIC_TYPE,
    .size = 2,
    .data = {LH_PERSIST_DATA, result}
  };

  crtpSendPacketBlock(&response);
 80038f4:	f107 0308 	add.w	r3, r7, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fdd3 	bl	80014a4 <crtpSendPacketBlock>
}
 80038fe:	bf00      	nop
 8003900:	3738      	adds	r7, #56	; 0x38
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <lhPersistDataHandler>:

static void lhPersistDataHandler(CRTPPacket* pk) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if (pk->size >= (1 + sizeof(LhPersistArgs_t))) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d908      	bls.n	800392a <lhPersistDataHandler+0x22>
    LhPersistArgs_t* args = (LhPersistArgs_t*) &pk->data[1];
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3303      	adds	r3, #3
 800391c:	60fb      	str	r3, [r7, #12]
    workerSchedule(lhPersistDataWorker, (void*)args->combinedField);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4803      	ldr	r0, [pc, #12]	; (8003934 <lhPersistDataHandler+0x2c>)
 8003926:	f011 fde1 	bl	80154ec <workerSchedule>
  }
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08003867 	.word	0x08003867

08003938 <genericLocHandle>:

static void genericLocHandle(CRTPPacket* pk)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  const uint8_t type = pk->data[0];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	789b      	ldrb	r3, [r3, #2]
 8003944:	73fb      	strb	r3, [r7, #15]
  if (pk->size < 1) return;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d034      	beq.n	80039b8 <genericLocHandle+0x80>

  switch (type) {
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	3b02      	subs	r3, #2
 8003952:	2b09      	cmp	r3, #9
 8003954:	d832      	bhi.n	80039bc <genericLocHandle+0x84>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <genericLocHandle+0x24>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	08003995 	.word	0x08003995
 8003968:	080039bd 	.word	0x080039bd
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039a1 	.word	0x080039a1
 8003978:	080039a9 	.word	0x080039a9
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039b1 	.word	0x080039b1
    case LPS_SHORT_LPP_PACKET:
      lpsShortLppPacketHandler(pk);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff47 	bl	8003818 <lpsShortLppPacketHandler>
      break;
 800398a:	e018      	b.n	80039be <genericLocHandle+0x86>
    case EMERGENCY_STOP:
      isEmergencyStopRequested = true;
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <genericLocHandle+0x8c>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
      break;
 8003992:	e014      	b.n	80039be <genericLocHandle+0x86>
    case EMERGENCY_STOP_WATCHDOG:
      emergencyStopWatchdogNotificationTick = xTaskGetTickCount();
 8003994:	f01d fa22 	bl	8020ddc <xTaskGetTickCount>
 8003998:	4603      	mov	r3, r0
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <genericLocHandle+0x90>)
 800399c:	6013      	str	r3, [r2, #0]
      break;
 800399e:	e00e      	b.n	80039be <genericLocHandle+0x86>
    case EXT_POSE:
      extPoseHandler(pk);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fe3b 	bl	800361c <extPoseHandler>
      break;
 80039a6:	e00a      	b.n	80039be <genericLocHandle+0x86>
    case EXT_POSE_PACKED:
      extPosePackedHandler(pk);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fe77 	bl	800369c <extPosePackedHandler>
      break;
 80039ae:	e006      	b.n	80039be <genericLocHandle+0x86>
    case LH_PERSIST_DATA:
      lhPersistDataHandler(pk);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ffa9 	bl	8003908 <lhPersistDataHandler>
      break;
 80039b6:	e002      	b.n	80039be <genericLocHandle+0x86>
  if (pk->size < 1) return;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <genericLocHandle+0x86>
    default:
      // Nothing here
      break;
 80039bc:	bf00      	nop
  }
}
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200081e2 	.word	0x200081e2
 80039c8:	200081e4 	.word	0x200081e4

080039cc <extPositionPackedHandler>:

static void extPositionPackedHandler(CRTPPacket* pk)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint8_t numItems = pk->size / sizeof(extPositionPackedItem);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <extPositionPackedHandler+0xe4>)
 80039da:	fba3 1302 	umull	r1, r3, r3, r2
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e056      	b.n	8003a9c <extPositionPackedHandler+0xd0>
    const extPositionPackedItem* item = (const extPositionPackedItem*)&pk->data[i * sizeof(extPositionPackedItem)];
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	3302      	adds	r3, #2
 80039fc:	60bb      	str	r3, [r7, #8]
    ext_pos.x = item->x / 1000.0f;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003a04:	b21b      	sxth	r3, r3
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003ab4 <extPositionPackedHandler+0xe8>
 8003a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
    ext_pos.y = item->y / 1000.0f;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a2c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003ab4 <extPositionPackedHandler+0xe8>
 8003a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a34:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a36:	edc3 7a01 	vstr	s15, [r3, #4]
    ext_pos.z = item->z / 1000.0f;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003ab4 <extPositionPackedHandler+0xe8>
 8003a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a54:	edc3 7a02 	vstr	s15, [r3, #8]
    ext_pos.stdDev = extPosStdDev;
 8003a58:	4b18      	ldr	r3, [pc, #96]	; (8003abc <extPositionPackedHandler+0xf0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a5e:	60d3      	str	r3, [r2, #12]
    ext_pos.source = MeasurementSourceLocationService;
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	741a      	strb	r2, [r3, #16]
    if (item->id == my_id) {
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <extPositionPackedHandler+0xf4>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10b      	bne.n	8003a8a <extPositionPackedHandler+0xbe>
      updateLogFromExtPos();
 8003a72:	f7ff fd8b 	bl	800358c <updateLogFromExtPos>
      estimatorEnqueuePosition(&ext_pos);
 8003a76:	4810      	ldr	r0, [pc, #64]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a78:	f7ff fc98 	bl	80033ac <estimatorEnqueuePosition>
      tickOfLastPacket = xTaskGetTickCount();
 8003a7c:	f01d f9ae 	bl	8020ddc <xTaskGetTickCount>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <extPositionPackedHandler+0xf8>)
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	e005      	b.n	8003a96 <extPositionPackedHandler+0xca>
    }
    else {
      peerLocalizationTellPosition(item->id, &ext_pos);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	490a      	ldr	r1, [pc, #40]	; (8003ab8 <extPositionPackedHandler+0xec>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fa6f 	bl	8000f74 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3a4      	bcc.n	80039ee <extPositionPackedHandler+0x22>
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	24924925 	.word	0x24924925
 8003ab4:	447a0000 	.word	0x447a0000
 8003ab8:	200081a4 	.word	0x200081a4
 8003abc:	2000003c 	.word	0x2000003c
 8003ac0:	200081df 	.word	0x200081df
 8003ac4:	200081e0 	.word	0x200081e0

08003ac8 <crtpserviceInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpSrvTask, CRTP_SRV_TASK_STACKSIZE);

static void crtpSrvTask(void*);

void crtpserviceInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af04      	add	r7, sp, #16
  if (isInit)
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <crtpserviceInit+0x38>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d110      	bne.n	8003af8 <crtpserviceInit+0x30>
    return;

  //Start the task
  STATIC_MEM_TASK_CREATE(crtpSrvTask, crtpSrvTask, CRTP_SRV_TASK_NAME, NULL, CRTP_SRV_TASK_PRI);
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <crtpserviceInit+0x3c>)
 8003adc:	9302      	str	r3, [sp, #8]
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <crtpserviceInit+0x40>)
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4908      	ldr	r1, [pc, #32]	; (8003b0c <crtpserviceInit+0x44>)
 8003aea:	4809      	ldr	r0, [pc, #36]	; (8003b10 <crtpserviceInit+0x48>)
 8003aec:	f01c fe00 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <crtpserviceInit+0x38>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e000      	b.n	8003afa <crtpserviceInit+0x32>
    return;
 8003af8:	bf00      	nop
}
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200081e8 	.word	0x200081e8
 8003b04:	20001ca0 	.word	0x20001ca0
 8003b08:	20001aa0 	.word	0x20001aa0
 8003b0c:	0802ae60 	.word	0x0802ae60
 8003b10:	08003b15 	.word	0x08003b15

08003b14 <crtpSrvTask>:
{
  return isInit;
}

static void crtpSrvTask(void* prm)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_LINK);
 8003b1c:	200f      	movs	r0, #15
 8003b1e:	f7fd fb91 	bl	8001244 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8003b22:	491f      	ldr	r1, [pc, #124]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b24:	200f      	movs	r0, #15
 8003b26:	f7fd fbbd 	bl	80012a4 <crtpReceivePacketBlock>

    switch (p.channel)
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d02f      	beq.n	8003b98 <crtpSrvTask+0x84>
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	dc2f      	bgt.n	8003b9c <crtpSrvTask+0x88>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <crtpSrvTask+0x32>
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d00d      	beq.n	8003b60 <crtpSrvTask+0x4c>
        break;
      case linkSink:
        /* Ignore packet */
        break;
      default:
        break;
 8003b44:	e02a      	b.n	8003b9c <crtpSrvTask+0x88>
        if (echoDelay > 0) {
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <crtpSrvTask+0x90>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <crtpSrvTask+0x44>
          vTaskDelay(M2T(echoDelay));
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <crtpSrvTask+0x90>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f01c ff84 	bl	8020a60 <vTaskDelay>
        crtpSendPacketBlock(&p);
 8003b58:	4811      	ldr	r0, [pc, #68]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b5a:	f7fd fca3 	bl	80014a4 <crtpSendPacketBlock>
        break;
 8003b5e:	e01e      	b.n	8003b9e <crtpSrvTask+0x8a>
        p.size = CRTP_MAX_DATA_SIZE;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b62:	221e      	movs	r2, #30
 8003b64:	701a      	strb	r2, [r3, #0]
        bzero(p.data, CRTP_MAX_DATA_SIZE);
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <crtpSrvTask+0x94>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	231e      	movs	r3, #30
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f020 ff86 	bl	8024a80 <memset>
        strcpy((char*)p.data, "Bitcraze Crazyflie");
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <crtpSrvTask+0x94>)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <crtpSrvTask+0x98>)
 8003b78:	4615      	mov	r5, r2
 8003b7a:	461c      	mov	r4, r3
 8003b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7e:	6028      	str	r0, [r5, #0]
 8003b80:	6069      	str	r1, [r5, #4]
 8003b82:	60aa      	str	r2, [r5, #8]
 8003b84:	60eb      	str	r3, [r5, #12]
 8003b86:	8823      	ldrh	r3, [r4, #0]
 8003b88:	78a2      	ldrb	r2, [r4, #2]
 8003b8a:	822b      	strh	r3, [r5, #16]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	74ab      	strb	r3, [r5, #18]
        crtpSendPacketBlock(&p);
 8003b90:	4803      	ldr	r0, [pc, #12]	; (8003ba0 <crtpSrvTask+0x8c>)
 8003b92:	f7fd fc87 	bl	80014a4 <crtpSendPacketBlock>
        break;
 8003b96:	e002      	b.n	8003b9e <crtpSrvTask+0x8a>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e7c2      	b.n	8003b22 <crtpSrvTask+0xe>
        break;
 8003b9c:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8003b9e:	e7c0      	b.n	8003b22 <crtpSrvTask+0xe>
 8003ba0:	200081ec 	.word	0x200081ec
 8003ba4:	200081ea 	.word	0x200081ea
 8003ba8:	200081ee 	.word	0x200081ee
 8003bac:	0802ae6c 	.word	0x0802ae6c

08003bb0 <platformserviceInit>:
static void platformSrvTask(void*);
static void platformCommandProcess(CRTPPacket *p);
static void versionCommandProcess(CRTPPacket *p);

void platformserviceInit(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af04      	add	r7, sp, #16
  if (isInit)
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <platformserviceInit+0x3c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d112      	bne.n	8003be4 <platformserviceInit+0x34>
    return;

  appchannelInit();
 8003bbe:	f7fd fa3f 	bl	8001040 <appchannelInit>

  //Start the task
  STATIC_MEM_TASK_CREATE(platformSrvTask, platformSrvTask, PLATFORM_SRV_TASK_NAME, NULL, PLATFORM_SRV_TASK_PRI);
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <platformserviceInit+0x40>)
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <platformserviceInit+0x44>)
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4908      	ldr	r1, [pc, #32]	; (8003bf8 <platformserviceInit+0x48>)
 8003bd6:	4809      	ldr	r0, [pc, #36]	; (8003bfc <platformserviceInit+0x4c>)
 8003bd8:	f01c fd8a 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <platformserviceInit+0x3c>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e000      	b.n	8003be6 <platformserviceInit+0x36>
    return;
 8003be4:	bf00      	nop
}
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000820c 	.word	0x2000820c
 8003bf0:	20001f58 	.word	0x20001f58
 8003bf4:	20001d58 	.word	0x20001d58
 8003bf8:	0802aea4 	.word	0x0802aea4
 8003bfc:	08003c01 	.word	0x08003c01

08003c00 <platformSrvTask>:
{
  return isInit;
}

static void platformSrvTask(void* prm)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_PLATFORM);
 8003c08:	200d      	movs	r0, #13
 8003c0a:	f7fd fb1b 	bl	8001244 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8003c0e:	4911      	ldr	r1, [pc, #68]	; (8003c54 <platformSrvTask+0x54>)
 8003c10:	200d      	movs	r0, #13
 8003c12:	f7fd fb47 	bl	80012a4 <crtpReceivePacketBlock>

    switch (p.channel)
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <platformSrvTask+0x54>)
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d011      	beq.n	8003c48 <platformSrvTask+0x48>
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	dc13      	bgt.n	8003c50 <platformSrvTask+0x50>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <platformSrvTask+0x32>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d007      	beq.n	8003c40 <platformSrvTask+0x40>
        break;
      case appChannel:
        appchannelIncomingPacket(&p);
        break;
      default:
        break;
 8003c30:	e00e      	b.n	8003c50 <platformSrvTask+0x50>
        platformCommandProcess(&p);
 8003c32:	4808      	ldr	r0, [pc, #32]	; (8003c54 <platformSrvTask+0x54>)
 8003c34:	f000 f810 	bl	8003c58 <platformCommandProcess>
        crtpSendPacketBlock(&p);
 8003c38:	4806      	ldr	r0, [pc, #24]	; (8003c54 <platformSrvTask+0x54>)
 8003c3a:	f7fd fc33 	bl	80014a4 <crtpSendPacketBlock>
        break;
 8003c3e:	e008      	b.n	8003c52 <platformSrvTask+0x52>
        versionCommandProcess(&p);
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <platformSrvTask+0x54>)
 8003c42:	f000 f839 	bl	8003cb8 <versionCommandProcess>
        break;
 8003c46:	e004      	b.n	8003c52 <platformSrvTask+0x52>
        appchannelIncomingPacket(&p);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <platformSrvTask+0x54>)
 8003c4a:	f7fd fa15 	bl	8001078 <appchannelIncomingPacket>
        break;
 8003c4e:	e000      	b.n	8003c52 <platformSrvTask+0x52>
        break;
 8003c50:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8003c52:	e7dc      	b.n	8003c0e <platformSrvTask+0xe>
 8003c54:	20008210 	.word	0x20008210

08003c58 <platformCommandProcess>:
    }
  }
}

static void platformCommandProcess(CRTPPacket *p)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint8_t command = p->data[0];
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	789b      	ldrb	r3, [r3, #2]
 8003c64:	75fb      	strb	r3, [r7, #23]
  uint8_t *data = &p->data[1];
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	613b      	str	r3, [r7, #16]

  switch (command) {
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <platformCommandProcess+0x20>
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d00e      	beq.n	8003c94 <platformCommandProcess+0x3c>
//      data[1] = supervisorIsArmed();
      p->size = 2;
      break;
    }
    default:
      break;
 8003c76:	e018      	b.n	8003caa <platformCommandProcess+0x52>
      slp.type = SYSLINK_RADIO_CONTWAVE;
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	701a      	strb	r2, [r3, #0]
      slp.length = 1;
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	705a      	strb	r2, [r3, #1]
      slp.data[0] = data[0];
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c8a:	709a      	strb	r2, [r3, #2]
      syslinkSendPacket(&slp);
 8003c8c:	4809      	ldr	r0, [pc, #36]	; (8003cb4 <platformCommandProcess+0x5c>)
 8003c8e:	f000 faad 	bl	80041ec <syslinkSendPacket>
      break;
 8003c92:	e00a      	b.n	8003caa <platformCommandProcess+0x52>
      const bool doArm = data[0];
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
      p->size = 2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	701a      	strb	r2, [r3, #0]
      break;
 8003ca8:	bf00      	nop
  }
}
 8003caa:	bf00      	nop
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20008230 	.word	0x20008230

08003cb8 <versionCommandProcess>:
  p->channel = appChannel;
  return crtpSendPacketBlock(p);
}

static void versionCommandProcess(CRTPPacket *p)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  switch (p->data[0]) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	789b      	ldrb	r3, [r3, #2]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d032      	beq.n	8003d2e <versionCommandProcess+0x76>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	dc4f      	bgt.n	8003d6c <versionCommandProcess+0xb4>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <versionCommandProcess+0x1e>
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00b      	beq.n	8003cec <versionCommandProcess+0x34>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
      crtpSendPacketBlock(p);
      }
      break;
    default:
      break;
 8003cd4:	e04a      	b.n	8003d6c <versionCommandProcess+0xb4>
      *(int*)&p->data[1] = CRTP_PROTOCOL_VERSION;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	2207      	movs	r2, #7
 8003cdc:	601a      	str	r2, [r3, #0]
      p->size = 5;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fd fbdd 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8003cea:	e040      	b.n	8003d6e <versionCommandProcess+0xb6>
      strncpy((char*)&p->data[1], V_STAG, CRTP_MAX_DATA_SIZE-1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3303      	adds	r3, #3
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <versionCommandProcess+0xc0>)
 8003cf2:	6811      	ldr	r1, [r2, #0]
 8003cf4:	221d      	movs	r2, #29
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f020 fef8 	bl	8024aec <strncpy>
      p->size = (strlen(V_STAG)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(V_STAG)+1;
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <versionCommandProcess+0xc0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fac5 	bl	8000290 <strlen>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b1d      	cmp	r3, #29
 8003d0a:	d809      	bhi.n	8003d20 <versionCommandProcess+0x68>
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <versionCommandProcess+0xc0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fabd 	bl	8000290 <strlen>
 8003d16:	4603      	mov	r3, r0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	e000      	b.n	8003d22 <versionCommandProcess+0x6a>
 8003d20:	221e      	movs	r2, #30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fbbc 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8003d2c:	e01f      	b.n	8003d6e <versionCommandProcess+0xb6>
      const char* name = platformConfigGetDeviceTypeName();
 8003d2e:	f00d fa19 	bl	8011164 <platformConfigGetDeviceTypeName>
 8003d32:	60f8      	str	r0, [r7, #12]
      strncpy((char*)&p->data[1], name, CRTP_MAX_DATA_SIZE-1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3303      	adds	r3, #3
 8003d38:	221d      	movs	r2, #29
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f020 fed5 	bl	8024aec <strncpy>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fc faa4 	bl	8000290 <strlen>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b1d      	cmp	r3, #29
 8003d4c:	d807      	bhi.n	8003d5e <versionCommandProcess+0xa6>
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7fc fa9e 	bl	8000290 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	e000      	b.n	8003d60 <versionCommandProcess+0xa8>
 8003d5e:	221e      	movs	r2, #30
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd fb9d 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8003d6a:	e000      	b.n	8003d6e <versionCommandProcess+0xb6>
      break;
 8003d6c:	bf00      	nop
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000ef4 	.word	0x20000ef4

08003d7c <radiolinkIsConnected>:
static bool isConnected;
static uint32_t lastPacketTick;

static volatile P2PCallback p2p_callback;

static bool radiolinkIsConnected(void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  return (xTaskGetTickCount() - lastPacketTick) < M2T(RADIO_ACTIVITY_TIMEOUT_MS);
 8003d80:	f01d f82c 	bl	8020ddc <xTaskGetTickCount>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <radiolinkIsConnected+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d90:	4293      	cmp	r3, r2
 8003d92:	bf94      	ite	ls
 8003d94:	2301      	movls	r3, #1
 8003d96:	2300      	movhi	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20008280 	.word	0x20008280

08003da4 <radiolinkInit>:
  .receivePacket     = radiolinkReceiveCRTPPacket,
  .isConnected       = radiolinkIsConnected
};

void radiolinkInit(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af02      	add	r7, sp, #8
  if (isInit)
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <radiolinkInit+0x84>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d136      	bne.n	8003e20 <radiolinkInit+0x7c>
    return;

  txQueue = STATIC_MEM_QUEUE_CREATE(txQueue);
 8003db2:	2301      	movs	r3, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	2342      	movs	r3, #66	; 0x42
 8003db8:	4619      	mov	r1, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <radiolinkInit+0x88>)
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <radiolinkInit+0x8c>)
 8003dc2:	f01b fd85 	bl	801f8d0 <xQueueGenericCreateStatic>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <radiolinkInit+0x90>)
 8003dca:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <radiolinkInit+0x90>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <radiolinkInit+0x94>)
 8003dd2:	491a      	ldr	r1, [pc, #104]	; (8003e3c <radiolinkInit+0x98>)
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f011 f867 	bl	8014ea8 <qmRegisterQueue>
  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8003dda:	2305      	movs	r3, #5
 8003ddc:	4618      	mov	r0, r3
 8003dde:	2320      	movs	r3, #32
 8003de0:	4619      	mov	r1, r3
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <radiolinkInit+0x9c>)
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <radiolinkInit+0xa0>)
 8003dea:	f01b fd71 	bl	801f8d0 <xQueueGenericCreateStatic>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <radiolinkInit+0xa4>)
 8003df2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <radiolinkInit+0xa4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <radiolinkInit+0xa8>)
 8003dfa:	4910      	ldr	r1, [pc, #64]	; (8003e3c <radiolinkInit+0x98>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f011 f853 	bl	8014ea8 <qmRegisterQueue>

  ASSERT(crtpPacketDelivery);
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <radiolinkInit+0xa4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <radiolinkInit+0x70>
 8003e0a:	225f      	movs	r2, #95	; 0x5f
 8003e0c:	490b      	ldr	r1, [pc, #44]	; (8003e3c <radiolinkInit+0x98>)
 8003e0e:	480f      	ldr	r0, [pc, #60]	; (8003e4c <radiolinkInit+0xa8>)
 8003e10:	f00e f90c 	bl	801202c <assertFail>

  syslinkInit();
 8003e14:	f000 f982 	bl	800411c <syslinkInit>

//  radiolinkSetChannel(configblockGetRadioChannel());
//  radiolinkSetDatarate(configblockGetRadioSpeed());
//  radiolinkSetAddress(configblockGetRadioAddress());

  isInit = true;
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <radiolinkInit+0x84>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e000      	b.n	8003e22 <radiolinkInit+0x7e>
    return;
 8003e20:	bf00      	nop
}
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000827c 	.word	0x2000827c
 8003e2c:	20002054 	.word	0x20002054
 8003e30:	20002010 	.word	0x20002010
 8003e34:	20008274 	.word	0x20008274
 8003e38:	0802aeb4 	.word	0x0802aeb4
 8003e3c:	0802aebc 	.word	0x0802aebc
 8003e40:	20002144 	.word	0x20002144
 8003e44:	200020a4 	.word	0x200020a4
 8003e48:	20008278 	.word	0x20008278
 8003e4c:	0802aedc 	.word	0x0802aedc

08003e50 <radiolinkTest>:

bool radiolinkTest(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  return syslinkTest();
 8003e54:	f000 f9be 	bl	80041d4 <syslinkTest>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <radiolinkSyslinkDispatch>:
  syslinkSendPacket(&slp);
}


void radiolinkSyslinkDispatch(SyslinkPacket *slp)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b092      	sub	sp, #72	; 0x48
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (slp->type == SYSLINK_RADIO_RAW || slp->type == SYSLINK_RADIO_RAW_BROADCAST) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <radiolinkSyslinkDispatch+0x18>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d104      	bne.n	8003e82 <radiolinkSyslinkDispatch+0x22>
    lastPacketTick = xTaskGetTickCount();
 8003e78:	f01c ffb0 	bl	8020ddc <xTaskGetTickCount>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <radiolinkSyslinkDispatch+0x124>)
 8003e80:	6013      	str	r3, [r2, #0]
  }

  if (slp->type == SYSLINK_RADIO_RAW)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d129      	bne.n	8003ede <radiolinkSyslinkDispatch+0x7e>
  {
    slp->length--; // Decrease to get CRTP size.
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	705a      	strb	r2, [r3, #1]
    // Assert that we are not dropping any packets
    ASSERT(xQueueSend(crtpPacketDelivery, &slp->length, 0) == pdPASS);
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <radiolinkSyslinkDispatch+0x128>)
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1c59      	adds	r1, r3, #1
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f01b fe2b 	bl	801fafc <xQueueGenericSend>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d004      	beq.n	8003eb6 <radiolinkSyslinkDispatch+0x56>
 8003eac:	22a4      	movs	r2, #164	; 0xa4
 8003eae:	4937      	ldr	r1, [pc, #220]	; (8003f8c <radiolinkSyslinkDispatch+0x12c>)
 8003eb0:	4837      	ldr	r0, [pc, #220]	; (8003f90 <radiolinkSyslinkDispatch+0x130>)
 8003eb2:	f00e f8bb 	bl	801202c <assertFail>
    ledseqRun(&seq_linkUp);
 8003eb6:	4837      	ldr	r0, [pc, #220]	; (8003f94 <radiolinkSyslinkDispatch+0x134>)
 8003eb8:	f000 ff26 	bl	8004d08 <ledseqRun>
    // If a radio packet is received, one can be sent
    if (xQueueReceive(txQueue, &txPacket, 0) == pdTRUE)
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <radiolinkSyslinkDispatch+0x138>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4936      	ldr	r1, [pc, #216]	; (8003f9c <radiolinkSyslinkDispatch+0x13c>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f01b ffbb 	bl	801fe40 <xQueueReceive>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d14f      	bne.n	8003f70 <radiolinkSyslinkDispatch+0x110>
    {
      ledseqRun(&seq_linkDown);
 8003ed0:	4833      	ldr	r0, [pc, #204]	; (8003fa0 <radiolinkSyslinkDispatch+0x140>)
 8003ed2:	f000 ff19 	bl	8004d08 <ledseqRun>
      syslinkSendPacket(&txPacket);
 8003ed6:	4831      	ldr	r0, [pc, #196]	; (8003f9c <radiolinkSyslinkDispatch+0x13c>)
 8003ed8:	f000 f988 	bl	80041ec <syslinkSendPacket>
 8003edc:	e048      	b.n	8003f70 <radiolinkSyslinkDispatch+0x110>
    }
  } else if (slp->type == SYSLINK_RADIO_RAW_BROADCAST)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d111      	bne.n	8003f0a <radiolinkSyslinkDispatch+0xaa>
  {
    slp->length--; // Decrease to get CRTP size.
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	705a      	strb	r2, [r3, #1]
    // broadcasts are best effort, so no need to handle the case where the queue is full
    xQueueSend(crtpPacketDelivery, &slp->length, 0);
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <radiolinkSyslinkDispatch+0x128>)
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1c59      	adds	r1, r3, #1
 8003efa:	2300      	movs	r3, #0
 8003efc:	2200      	movs	r2, #0
 8003efe:	f01b fdfd 	bl	801fafc <xQueueGenericSend>
    ledseqRun(&seq_linkUp);
 8003f02:	4824      	ldr	r0, [pc, #144]	; (8003f94 <radiolinkSyslinkDispatch+0x134>)
 8003f04:	f000 ff00 	bl	8004d08 <ledseqRun>
 8003f08:	e032      	b.n	8003f70 <radiolinkSyslinkDispatch+0x110>
    // no ack for broadcasts
  } else if (slp->type == SYSLINK_RADIO_RSSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d105      	bne.n	8003f1e <radiolinkSyslinkDispatch+0xbe>
  {
    //Extract RSSI sample sent from radio
    memcpy(&rssi, slp->data, sizeof(uint8_t)); //rssi will not change on disconnect
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3302      	adds	r3, #2
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <radiolinkSyslinkDispatch+0x144>)
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e028      	b.n	8003f70 <radiolinkSyslinkDispatch+0x110>
  } else if (slp->type == SYSLINK_RADIO_P2P_BROADCAST)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b0a      	cmp	r3, #10
 8003f24:	d124      	bne.n	8003f70 <radiolinkSyslinkDispatch+0x110>
  {
    ledseqRun(&seq_linkUp);
 8003f26:	481b      	ldr	r0, [pc, #108]	; (8003f94 <radiolinkSyslinkDispatch+0x134>)
 8003f28:	f000 feee 	bl	8004d08 <ledseqRun>
    P2PPacket p2pp;
    p2pp.port=slp->data[0];
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	789b      	ldrb	r3, [r3, #2]
 8003f30:	72bb      	strb	r3, [r7, #10]
    p2pp.rssi = slp->data[1];
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	727b      	strb	r3, [r7, #9]

    const uint8_t p2pDataLength = slp->length - 2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	3b02      	subs	r3, #2
 8003f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    memcpy(&p2pp.data[0], &slp->data[2], p2pDataLength);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	3303      	adds	r3, #3
 8003f50:	4618      	mov	r0, r3
 8003f52:	f020 ff10 	bl	8024d76 <memcpy>
    p2pp.size = p2pDataLength;
 8003f56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f5a:	723b      	strb	r3, [r7, #8]

    if (p2p_callback) {
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <radiolinkSyslinkDispatch+0x148>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <radiolinkSyslinkDispatch+0x110>
        p2p_callback(&p2pp);
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <radiolinkSyslinkDispatch+0x148>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f107 0208 	add.w	r2, r7, #8
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4798      	blx	r3
    }
  }

  isConnected = radiolinkIsConnected();
 8003f70:	f7ff ff04 	bl	8003d7c <radiolinkIsConnected>
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <radiolinkSyslinkDispatch+0x14c>)
 8003f7a:	701a      	strb	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3748      	adds	r7, #72	; 0x48
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20008280 	.word	0x20008280
 8003f88:	20008278 	.word	0x20008278
 8003f8c:	0802aebc 	.word	0x0802aebc
 8003f90:	0802aef0 	.word	0x0802aef0
 8003f94:	20000198 	.word	0x20000198
 8003f98:	20008274 	.word	0x20008274
 8003f9c:	20008288 	.word	0x20008288
 8003fa0:	200001a8 	.word	0x200001a8
 8003fa4:	2000827d 	.word	0x2000827d
 8003fa8:	20008284 	.word	0x20008284
 8003fac:	2000827e 	.word	0x2000827e

08003fb0 <radiolinkReceiveCRTPPacket>:

static int radiolinkReceiveCRTPPacket(CRTPPacket *p)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <radiolinkReceiveCRTPPacket+0x2c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2264      	movs	r2, #100	; 0x64
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f01b ff3d 	bl	801fe40 <xQueueReceive>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <radiolinkReceiveCRTPPacket+0x20>
  {
    return 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e001      	b.n	8003fd4 <radiolinkReceiveCRTPPacket+0x24>
  }

  return -1;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20008278 	.word	0x20008278

08003fe0 <radiolinkSendCRTPPacket>:
{
    p2p_callback = cb;
}

static int radiolinkSendCRTPPacket(CRTPPacket *p)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  static SyslinkPacket slp;

  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b1e      	cmp	r3, #30
 8003fee:	d904      	bls.n	8003ffa <radiolinkSendCRTPPacket+0x1a>
 8003ff0:	22dd      	movs	r2, #221	; 0xdd
 8003ff2:	4913      	ldr	r1, [pc, #76]	; (8004040 <radiolinkSendCRTPPacket+0x60>)
 8003ff4:	4813      	ldr	r0, [pc, #76]	; (8004044 <radiolinkSendCRTPPacket+0x64>)
 8003ff6:	f00e f819 	bl	801202c <assertFail>

  slp.type = SYSLINK_RADIO_RAW;
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <radiolinkSendCRTPPacket+0x68>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
  slp.length = p->size + 1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <radiolinkSendCRTPPacket+0x68>)
 800400a:	705a      	strb	r2, [r3, #1]
  memcpy(slp.data, &p->header, p->size + 1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1c59      	adds	r1, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	461a      	mov	r2, r3
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <radiolinkSendCRTPPacket+0x6c>)
 800401a:	f020 feac 	bl	8024d76 <memcpy>

  if (xQueueSend(txQueue, &slp, M2T(100)) == pdTRUE)
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <radiolinkSendCRTPPacket+0x70>)
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	2264      	movs	r2, #100	; 0x64
 8004026:	4908      	ldr	r1, [pc, #32]	; (8004048 <radiolinkSendCRTPPacket+0x68>)
 8004028:	f01b fd68 	bl	801fafc <xQueueGenericSend>
 800402c:	4603      	mov	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <radiolinkSendCRTPPacket+0x56>
  {
    return true;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <radiolinkSendCRTPPacket+0x58>
  }

  return false;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	0802aebc 	.word	0x0802aebc
 8004044:	0802af2c 	.word	0x0802af2c
 8004048:	200082cc 	.word	0x200082cc
 800404c:	200082ce 	.word	0x200082ce
 8004050:	20008274 	.word	0x20008274

08004054 <radiolinkGetLink>:
  return true;
}


struct crtpLinkOperations * radiolinkGetLink()
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return &radiolinkOp;
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <radiolinkGetLink+0x10>)
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	20000044 	.word	0x20000044

08004068 <radiolinkSetEnable>:

static int radiolinkSetEnable(bool enable)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  return 0;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <syslinkTask>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(syslinkTask, SYSLINK_TASK_STACKSIZE);

/* Syslink task, handles communication between nrf and stm and dispatch messages
 */
static void syslinkTask(void *param)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b094      	sub	sp, #80	; 0x50
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  SyslinkPacket slp;
  while(1)
  {
    uartslkGetPacketBlocking(&slp);
 8004088:	f107 030c 	add.w	r3, r7, #12
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fff7 	bl	8006080 <uartslkGetPacketBlocking>
    syslinkRouteIncommingPacket(&slp);
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f802 	bl	80040a0 <syslinkRouteIncommingPacket>
    uartslkGetPacketBlocking(&slp);
 800409c:	e7f4      	b.n	8004088 <syslinkTask+0x8>
	...

080040a0 <syslinkRouteIncommingPacket>:
  }
}

static void syslinkRouteIncommingPacket(SyslinkPacket *slp)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint8_t groupType;

  groupType = slp->type & SYSLINK_GROUP_MASK;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f023 030f 	bic.w	r3, r3, #15
 80040b0:	73fb      	strb	r3, [r7, #15]

  switch (groupType)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2bf0      	cmp	r3, #240	; 0xf0
 80040b6:	d01e      	beq.n	80040f6 <syslinkRouteIncommingPacket+0x56>
 80040b8:	2bf0      	cmp	r3, #240	; 0xf0
 80040ba:	dc20      	bgt.n	80040fe <syslinkRouteIncommingPacket+0x5e>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d016      	beq.n	80040ee <syslinkRouteIncommingPacket+0x4e>
 80040c0:	2b30      	cmp	r3, #48	; 0x30
 80040c2:	dc1c      	bgt.n	80040fe <syslinkRouteIncommingPacket+0x5e>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d00e      	beq.n	80040e6 <syslinkRouteIncommingPacket+0x46>
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	dc18      	bgt.n	80040fe <syslinkRouteIncommingPacket+0x5e>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <syslinkRouteIncommingPacket+0x36>
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d004      	beq.n	80040de <syslinkRouteIncommingPacket+0x3e>
 80040d4:	e013      	b.n	80040fe <syslinkRouteIncommingPacket+0x5e>
  {
    case SYSLINK_RADIO_GROUP:
      radiolinkSyslinkDispatch(slp);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fec2 	bl	8003e60 <radiolinkSyslinkDispatch>
      break;
 80040dc:	e017      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_PM_GROUP:
      pmSyslinkUpdate(slp);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 fa7e 	bl	80055e0 <pmSyslinkUpdate>
      break;
 80040e4:	e013      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_OW_GROUP:
      owSyslinkReceive(slp);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 f936 	bl	8005358 <owSyslinkReceive>
      break;
 80040ec:	e00f      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_SYS_GROUP:
      systemSyslinkReceive(slp);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f001 fede 	bl	8005eb0 <systemSyslinkReceive>
      break;
 80040f4:	e00b      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_DEBUG_GROUP:
      debugSyslinkReceive(slp);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f90c 	bl	8004314 <debugSyslinkReceive>
      break;
 80040fc:	e007      	b.n	800410e <syslinkRouteIncommingPacket+0x6e>
    default:
      DEBUG_PRINT("Unknown packet:%X.\n", slp->type);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4904      	ldr	r1, [pc, #16]	; (8004118 <syslinkRouteIncommingPacket+0x78>)
 8004106:	2000      	movs	r0, #0
 8004108:	f00d fecc 	bl	8011ea4 <SEGGER_RTT_printf>
      break;
 800410c:	bf00      	nop
  }
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	0802af94 	.word	0x0802af94

0800411c <syslinkInit>:
/*
 * Public functions
 */

void syslinkInit()
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b085      	sub	sp, #20
 8004120:	af04      	add	r7, sp, #16
  if(isInit) {
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <syslinkInit+0x94>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13d      	bne.n	80041a6 <syslinkInit+0x8a>
    return;
  }

  vSemaphoreCreateBinary(syslinkAccess);
 800412a:	2203      	movs	r2, #3
 800412c:	2100      	movs	r1, #0
 800412e:	2001      	movs	r0, #1
 8004130:	f01b fc3a 	bl	801f9a8 <xQueueGenericCreate>
 8004134:	4603      	mov	r3, r0
 8004136:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <syslinkInit+0x98>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <syslinkInit+0x98>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <syslinkInit+0x34>
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <syslinkInit+0x98>)
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	2300      	movs	r3, #0
 8004148:	2200      	movs	r2, #0
 800414a:	2100      	movs	r1, #0
 800414c:	f01b fcd6 	bl	801fafc <xQueueGenericSend>

  STATIC_MEM_TASK_CREATE(syslinkTask, syslinkTask, SYSLINK_TASK_NAME, NULL, SYSLINK_TASK_PRI);
 8004150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004154:	461a      	mov	r2, r3
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <syslinkInit+0x9c>)
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <syslinkInit+0xa0>)
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	2303      	movs	r3, #3
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	4916      	ldr	r1, [pc, #88]	; (80041c0 <syslinkInit+0xa4>)
 8004166:	4817      	ldr	r0, [pc, #92]	; (80041c4 <syslinkInit+0xa8>)
 8004168:	f01c fac2 	bl	80206f0 <xTaskCreateStatic>

  debugTimer = xTimerCreate( "syslinkTimer", M2T(1000), pdTRUE, NULL, debugHandler );
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <syslinkInit+0xac>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2300      	movs	r3, #0
 8004172:	2201      	movs	r2, #1
 8004174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004178:	4814      	ldr	r0, [pc, #80]	; (80041cc <syslinkInit+0xb0>)
 800417a:	f01d fdff 	bl	8021d7c <xTimerCreate>
 800417e:	4603      	mov	r3, r0
 8004180:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <syslinkInit+0xb4>)
 8004182:	6013      	str	r3, [r2, #0]
  xTimerStart(debugTimer, M2T(1000));
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <syslinkInit+0xb4>)
 8004186:	681c      	ldr	r4, [r3, #0]
 8004188:	f01c fe28 	bl	8020ddc <xTaskGetTickCount>
 800418c:	4602      	mov	r2, r0
 800418e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	2101      	movs	r1, #1
 8004198:	4620      	mov	r0, r4
 800419a:	f01d fe85 	bl	8021ea8 <xTimerGenericCommand>

  isInit = true;
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <syslinkInit+0x94>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e000      	b.n	80041a8 <syslinkInit+0x8c>
    return;
 80041a6:	bf00      	nop
}
 80041a8:	3704      	adds	r7, #4
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000830e 	.word	0x2000830e
 80041b4:	20008360 	.word	0x20008360
 80041b8:	20002594 	.word	0x20002594
 80041bc:	20002194 	.word	0x20002194
 80041c0:	0802afa8 	.word	0x0802afa8
 80041c4:	08004081 	.word	0x08004081
 80041c8:	080042cd 	.word	0x080042cd
 80041cc:	0802afb0 	.word	0x0802afb0
 80041d0:	20008358 	.word	0x20008358

080041d4 <syslinkTest>:

bool syslinkTest()
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return isInit;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <syslinkTest+0x14>)
 80041da:	781b      	ldrb	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000830e 	.word	0x2000830e

080041ec <syslinkSendPacket>:
  return isInit;
}


int syslinkSendPacket(SyslinkPacket *slp)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  int i = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  int dataSize;
  uint8_t cksum[2] = {0};
 80041f8:	2300      	movs	r3, #0
 80041fa:	81bb      	strh	r3, [r7, #12]

  xSemaphoreTake(syslinkAccess, portMAX_DELAY);
 80041fc:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <syslinkSendPacket+0xcc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004204:	4618      	mov	r0, r3
 8004206:	f01b fefb 	bl	8020000 <xQueueSemaphoreTake>

  ASSERT(slp->length <= SYSLINK_MTU);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d904      	bls.n	800421c <syslinkSendPacket+0x30>
 8004212:	2291      	movs	r2, #145	; 0x91
 8004214:	4929      	ldr	r1, [pc, #164]	; (80042bc <syslinkSendPacket+0xd0>)
 8004216:	482a      	ldr	r0, [pc, #168]	; (80042c0 <syslinkSendPacket+0xd4>)
 8004218:	f00d ff08 	bl	801202c <assertFail>

  sendBuffer[0] = SYSLINK_START_BYTE1;
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <syslinkSendPacket+0xd8>)
 800421e:	22bc      	movs	r2, #188	; 0xbc
 8004220:	701a      	strb	r2, [r3, #0]
  sendBuffer[1] = SYSLINK_START_BYTE2;
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004224:	22cf      	movs	r2, #207	; 0xcf
 8004226:	705a      	strb	r2, [r3, #1]
  sendBuffer[2] = slp->type;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <syslinkSendPacket+0xd8>)
 800422e:	709a      	strb	r2, [r3, #2]
  sendBuffer[3] = slp->length;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	785a      	ldrb	r2, [r3, #1]
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004236:	70da      	strb	r2, [r3, #3]

  memcpy(&sendBuffer[4], slp->data, slp->length);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1c99      	adds	r1, r3, #2
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	461a      	mov	r2, r3
 8004242:	4821      	ldr	r0, [pc, #132]	; (80042c8 <syslinkSendPacket+0xdc>)
 8004244:	f020 fd97 	bl	8024d76 <memcpy>
  dataSize = slp->length + 6;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	3306      	adds	r3, #6
 800424e:	613b      	str	r3, [r7, #16]
  // Calculate checksum delux
  for (i = 2; i < dataSize - 2; i++)
 8004250:	2302      	movs	r3, #2
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e00f      	b.n	8004276 <syslinkSendPacket+0x8a>
  {
    cksum[0] += sendBuffer[i];
 8004256:	7b3a      	ldrb	r2, [r7, #12]
 8004258:	491a      	ldr	r1, [pc, #104]	; (80042c4 <syslinkSendPacket+0xd8>)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	440b      	add	r3, r1
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	4413      	add	r3, r2
 8004262:	b2db      	uxtb	r3, r3
 8004264:	733b      	strb	r3, [r7, #12]
    cksum[1] += cksum[0];
 8004266:	7b7a      	ldrb	r2, [r7, #13]
 8004268:	7b3b      	ldrb	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	b2db      	uxtb	r3, r3
 800426e:	737b      	strb	r3, [r7, #13]
  for (i = 2; i < dataSize - 2; i++)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3301      	adds	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3b02      	subs	r3, #2
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbea      	blt.n	8004256 <syslinkSendPacket+0x6a>
  }
  sendBuffer[dataSize-2] = cksum[0];
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3b02      	subs	r3, #2
 8004284:	7b39      	ldrb	r1, [r7, #12]
 8004286:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004288:	54d1      	strb	r1, [r2, r3]
  sendBuffer[dataSize-1] = cksum[1];
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3b01      	subs	r3, #1
 800428e:	7b79      	ldrb	r1, [r7, #13]
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004292:	54d1      	strb	r1, [r2, r3]

  uartslkSendDataDmaBlocking(dataSize, sendBuffer);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	490b      	ldr	r1, [pc, #44]	; (80042c4 <syslinkSendPacket+0xd8>)
 8004298:	4618      	mov	r0, r3
 800429a:	f001 ff03 	bl	80060a4 <uartslkSendDataDmaBlocking>

  xSemaphoreGive(syslinkAccess);
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <syslinkSendPacket+0xcc>)
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	2200      	movs	r2, #0
 80042a6:	2100      	movs	r1, #0
 80042a8:	f01b fc28 	bl	801fafc <xQueueGenericSend>

  return 0;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20008360 	.word	0x20008360
 80042bc:	0802afc0 	.word	0x0802afc0
 80042c0:	0802afdc 	.word	0x0802afdc
 80042c4:	20008310 	.word	0x20008310
 80042c8:	20008314 	.word	0x20008314

080042cc <debugHandler>:

static void debugHandler(xTimerHandle timer) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (triggerDebugProbe) {
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <debugHandler+0x3c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <debugHandler+0x34>
    triggerDebugProbe = 0;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <debugHandler+0x3c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]

    uartSyslinkDumpDebugProbe();
 80042e2:	f001 ff3d 	bl	8006160 <uartSyslinkDumpDebugProbe>
    DEBUG_PRINT("Syslink NRF debug probe initialized\n");
 80042e6:	4909      	ldr	r1, [pc, #36]	; (800430c <debugHandler+0x40>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f00d fddb 	bl	8011ea4 <SEGGER_RTT_printf>

    txPacket.type = SYSLINK_DEBUG_PROBE;
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <debugHandler+0x44>)
 80042f0:	22f0      	movs	r2, #240	; 0xf0
 80042f2:	701a      	strb	r2, [r3, #0]
    txPacket.length = 0;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <debugHandler+0x44>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	705a      	strb	r2, [r3, #1]
    syslinkSendPacket(&txPacket);
 80042fa:	4805      	ldr	r0, [pc, #20]	; (8004310 <debugHandler+0x44>)
 80042fc:	f7ff ff76 	bl	80041ec <syslinkSendPacket>
  }
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000835c 	.word	0x2000835c
 800430c:	0802aff8 	.word	0x0802aff8
 8004310:	20008364 	.word	0x20008364

08004314 <debugSyslinkReceive>:

static void debugSyslinkReceive(SyslinkPacket *slp) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_DEBUG_PROBE) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2bf0      	cmp	r3, #240	; 0xf0
 8004322:	d137      	bne.n	8004394 <debugSyslinkReceive+0x80>
    DEBUG_PRINT("NRF Address received: %d\n", slp->data[0]);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	789b      	ldrb	r3, [r3, #2]
 8004328:	461a      	mov	r2, r3
 800432a:	491c      	ldr	r1, [pc, #112]	; (800439c <debugSyslinkReceive+0x88>)
 800432c:	2000      	movs	r0, #0
 800432e:	f00d fdb9 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Chan received: %d\n", slp->data[1]);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	78db      	ldrb	r3, [r3, #3]
 8004336:	461a      	mov	r2, r3
 8004338:	4919      	ldr	r1, [pc, #100]	; (80043a0 <debugSyslinkReceive+0x8c>)
 800433a:	2000      	movs	r0, #0
 800433c:	f00d fdb2 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Rate received: %d\n", slp->data[2]);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	4917      	ldr	r1, [pc, #92]	; (80043a4 <debugSyslinkReceive+0x90>)
 8004348:	2000      	movs	r0, #0
 800434a:	f00d fdab 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Dropped: %d\n", slp->data[3]);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	461a      	mov	r2, r3
 8004354:	4914      	ldr	r1, [pc, #80]	; (80043a8 <debugSyslinkReceive+0x94>)
 8004356:	2000      	movs	r0, #0
 8004358:	f00d fda4 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error code: %d\n", slp->data[4]);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	799b      	ldrb	r3, [r3, #6]
 8004360:	461a      	mov	r2, r3
 8004362:	4912      	ldr	r1, [pc, #72]	; (80043ac <debugSyslinkReceive+0x98>)
 8004364:	2000      	movs	r0, #0
 8004366:	f00d fd9d 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error count: %d\n", slp->data[5]);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	79db      	ldrb	r3, [r3, #7]
 800436e:	461a      	mov	r2, r3
 8004370:	490f      	ldr	r1, [pc, #60]	; (80043b0 <debugSyslinkReceive+0x9c>)
 8004372:	2000      	movs	r0, #0
 8004374:	f00d fd96 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 1 fail count: %d\n", slp->data[6]);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7a1b      	ldrb	r3, [r3, #8]
 800437c:	461a      	mov	r2, r3
 800437e:	490d      	ldr	r1, [pc, #52]	; (80043b4 <debugSyslinkReceive+0xa0>)
 8004380:	2000      	movs	r0, #0
 8004382:	f00d fd8f 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 2 fail count: %d\n", slp->data[7]);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7a5b      	ldrb	r3, [r3, #9]
 800438a:	461a      	mov	r2, r3
 800438c:	490a      	ldr	r1, [pc, #40]	; (80043b8 <debugSyslinkReceive+0xa4>)
 800438e:	2000      	movs	r0, #0
 8004390:	f00d fd88 	bl	8011ea4 <SEGGER_RTT_printf>
  }
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	0802b020 	.word	0x0802b020
 80043a0:	0802b03c 	.word	0x0802b03c
 80043a4:	0802b054 	.word	0x0802b054
 80043a8:	0802b06c 	.word	0x0802b06c
 80043ac:	0802b080 	.word	0x0802b080
 80043b0:	0802b09c 	.word	0x0802b09c
 80043b4:	0802b0b8 	.word	0x0802b0b8
 80043b8:	0802b0dc 	.word	0x0802b0dc

080043bc <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d101      	bne.n	80043fa <LL_SPI_IsActiveFlag_TXE+0x18>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <LL_SPI_IsActiveFlag_TXE+0x1a>
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	330c      	adds	r3, #12
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	330c      	adds	r3, #12
 8004434:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	619a      	str	r2, [r3, #24]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	041a      	lsls	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	619a      	str	r2, [r3, #24]
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
	
	GPIO_InitTypeDef GPIO_InitStruct;
	
	__HAL_RCC_SPI1_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <ICM20602_GPIO_SPI_Initialization+0x16c>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a57      	ldr	r2, [pc, #348]	; (80045f0 <ICM20602_GPIO_SPI_Initialization+0x16c>)
 8004494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b55      	ldr	r3, [pc, #340]	; (80045f0 <ICM20602_GPIO_SPI_Initialization+0x16c>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <ICM20602_GPIO_SPI_Initialization+0x16c>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4a50      	ldr	r2, [pc, #320]	; (80045f0 <ICM20602_GPIO_SPI_Initialization+0x16c>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6313      	str	r3, [r2, #48]	; 0x30
 80044b6:	4b4e      	ldr	r3, [pc, #312]	; (80045f0 <ICM20602_GPIO_SPI_Initialization+0x16c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
    GPIO_InitStruct.Pin = SPI1_SCK_PIN_Pin|SPI1_MISO_PIN_Pin|SPI1_MOSI_PIN_Pin;
 80044c2:	23e0      	movs	r3, #224	; 0xe0
 80044c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ce:	2303      	movs	r3, #3
 80044d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044d2:	2305      	movs	r3, #5
 80044d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	4619      	mov	r1, r3
 80044dc:	4845      	ldr	r0, [pc, #276]	; (80045f4 <ICM20602_GPIO_SPI_Initialization+0x170>)
 80044de:	f013 fb29 	bl	8017b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 80044e2:	2310      	movs	r3, #16
 80044e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e6:	2301      	movs	r3, #1
 80044e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ee:	2303      	movs	r3, #3
 80044f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	4619      	mov	r1, r3
 80044f8:	483e      	ldr	r0, [pc, #248]	; (80045f4 <ICM20602_GPIO_SPI_Initialization+0x170>)
 80044fa:	f013 fb1b 	bl	8017b34 <HAL_GPIO_Init>

	
    GPIO_InitStruct.Pin = SPI1_INT_Pin;
 80044fe:	2310      	movs	r3, #16
 8004500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004502:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	4619      	mov	r1, r3
 8004512:	4839      	ldr	r0, [pc, #228]	; (80045f8 <ICM20602_GPIO_SPI_Initialization+0x174>)
 8004514:	f013 fb0e 	bl	8017b34 <HAL_GPIO_Init>


    hspi1.Instance = SPI1;
 8004518:	4b38      	ldr	r3, [pc, #224]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 800451a:	4a39      	ldr	r2, [pc, #228]	; (8004600 <ICM20602_GPIO_SPI_Initialization+0x17c>)
 800451c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004524:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004526:	4b35      	ldr	r3, [pc, #212]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 800452e:	2200      	movs	r2, #0
 8004530:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004534:	2202      	movs	r2, #2
 8004536:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004538:	4b30      	ldr	r3, [pc, #192]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004544:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004546:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004548:	2210      	movs	r2, #16
 800454a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 800454e:	2200      	movs	r2, #0
 8004550:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004554:	2200      	movs	r2, #0
 8004556:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004558:	4b28      	ldr	r3, [pc, #160]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 800455a:	2200      	movs	r2, #0
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 800455e:	4b27      	ldr	r3, [pc, #156]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004560:	220a      	movs	r2, #10
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004564:	4825      	ldr	r0, [pc, #148]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 8004566:	f015 fb83 	bl	8019c70 <HAL_SPI_Init>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <ICM20602_GPIO_SPI_Initialization+0xf0>
    {
      Error_Handler();
 8004570:	f011 fc48 	bl	8015e04 <Error_Handler>
    }

    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004574:	4b23      	ldr	r3, [pc, #140]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 8004576:	4a24      	ldr	r2, [pc, #144]	; (8004608 <ICM20602_GPIO_SPI_Initialization+0x184>)
 8004578:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800457a:	4b22      	ldr	r3, [pc, #136]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 800457c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004580:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 8004590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004594:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 8004598:	2200      	movs	r2, #0
 800459a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 800459e:	2200      	movs	r2, #0
 80045a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80045b4:	4813      	ldr	r0, [pc, #76]	; (8004604 <ICM20602_GPIO_SPI_Initialization+0x180>)
 80045b6:	f012 fead 	bl	8017314 <HAL_DMA_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <ICM20602_GPIO_SPI_Initialization+0x140>
    {
      Error_Handler();
 80045c0:	f011 fc20 	bl	8015e04 <Error_Handler>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
    HAL_GPIO_WritePin(GPIOA, SPI1_NSS_PIN_Pin, GPIO_PIN_RESET);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2110      	movs	r1, #16
 80045c8:	480a      	ldr	r0, [pc, #40]	; (80045f4 <ICM20602_GPIO_SPI_Initialization+0x170>)
 80045ca:	f013 fc4f 	bl	8017e6c <HAL_GPIO_WritePin>
	

    __HAL_SPI_ENABLE(&hspi1);
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <ICM20602_GPIO_SPI_Initialization+0x178>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045dc:	601a      	str	r2, [r3, #0]

	CHIP_DESELECT(ICM20602);
 80045de:	2110      	movs	r1, #16
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <ICM20602_GPIO_SPI_Initialization+0x170>)
 80045e2:	f7ff ff31 	bl	8004448 <LL_GPIO_SetOutputPin>
}
 80045e6:	bf00      	nop
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40020000 	.word	0x40020000
 80045f8:	40020800 	.word	0x40020800
 80045fc:	2000d198 	.word	0x2000d198
 8004600:	40013000 	.word	0x40013000
 8004604:	2000d1f0 	.word	0x2000d1f0
 8004608:	40026410 	.word	0x40026410

0800460c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8004616:	bf00      	nop
 8004618:	480c      	ldr	r0, [pc, #48]	; (800464c <SPI1_SendByte+0x40>)
 800461a:	f7ff fee2 	bl	80043e2 <LL_SPI_IsActiveFlag_TXE>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f9      	beq.n	8004618 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	4619      	mov	r1, r3
 8004628:	4808      	ldr	r0, [pc, #32]	; (800464c <SPI1_SendByte+0x40>)
 800462a:	f7ff fefb 	bl	8004424 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800462e:	bf00      	nop
 8004630:	4806      	ldr	r0, [pc, #24]	; (800464c <SPI1_SendByte+0x40>)
 8004632:	f7ff fec3 	bl	80043bc <LL_SPI_IsActiveFlag_RXNE>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f9      	beq.n	8004630 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800463c:	4803      	ldr	r0, [pc, #12]	; (800464c <SPI1_SendByte+0x40>)
 800463e:	f7ff fee3 	bl	8004408 <LL_SPI_ReceiveData8>
 8004642:	4603      	mov	r3, r0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40013000 	.word	0x40013000

08004650 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800465a:	2110      	movs	r1, #16
 800465c:	480b      	ldr	r0, [pc, #44]	; (800468c <ICM20602_Readbyte+0x3c>)
 800465e:	f7ff ff01 	bl	8004464 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ffce 	bl	800460c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8004670:	2000      	movs	r0, #0
 8004672:	f7ff ffcb 	bl	800460c <SPI1_SendByte>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800467a:	2110      	movs	r1, #16
 800467c:	4803      	ldr	r0, [pc, #12]	; (800468c <ICM20602_Readbyte+0x3c>)
 800467e:	f7ff fee3 	bl	8004448 <LL_GPIO_SetOutputPin>
	
	return val;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40020000 	.word	0x40020000

08004690 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	460a      	mov	r2, r1
 800469a:	71fb      	strb	r3, [r7, #7]
 800469c:	4613      	mov	r3, r2
 800469e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80046a0:	2110      	movs	r1, #16
 80046a2:	480b      	ldr	r0, [pc, #44]	; (80046d0 <ICM20602_Writebyte+0x40>)
 80046a4:	f7ff fede 	bl	8004464 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ffab 	bl	800460c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80046b6:	79bb      	ldrb	r3, [r7, #6]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ffa7 	bl	800460c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80046be:	2110      	movs	r1, #16
 80046c0:	4803      	ldr	r0, [pc, #12]	; (80046d0 <ICM20602_Writebyte+0x40>)
 80046c2:	f7ff fec1 	bl	8004448 <LL_GPIO_SetOutputPin>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40020000 	.word	0x40020000

080046d4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80046e8:	463b      	mov	r3, r7
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80046f0:	f7ff fec8 	bl	8004484 <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 80046f4:	4934      	ldr	r1, [pc, #208]	; (80047c8 <ICM20602_Initialization+0xf4>)
 80046f6:	2000      	movs	r0, #0
 80046f8:	f00d fbd4 	bl	8011ea4 <SEGGER_RTT_printf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80046fc:	2075      	movs	r0, #117	; 0x75
 80046fe:	f7ff ffa7 	bl	8004650 <ICM20602_Readbyte>
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b12      	cmp	r3, #18
 800470a:	d106      	bne.n	800471a <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	461a      	mov	r2, r3
 8004710:	492e      	ldr	r1, [pc, #184]	; (80047cc <ICM20602_Initialization+0xf8>)
 8004712:	2000      	movs	r0, #0
 8004714:	f00d fbc6 	bl	8011ea4 <SEGGER_RTT_printf>
 8004718:	e012      	b.n	8004740 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b12      	cmp	r3, #18
 800471e:	d00f      	beq.n	8004740 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8004720:	2075      	movs	r0, #117	; 0x75
 8004722:	f7ff ff95 	bl	8004650 <ICM20602_Readbyte>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b12      	cmp	r3, #18
 800472e:	d007      	beq.n	8004740 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	2312      	movs	r3, #18
 8004734:	4926      	ldr	r1, [pc, #152]	; (80047d0 <ICM20602_Initialization+0xfc>)
 8004736:	2000      	movs	r0, #0
 8004738:	f00d fbb4 	bl	8011ea4 <SEGGER_RTT_printf>
			return 1; //ERROR
 800473c:	2301      	movs	r3, #1
 800473e:	e03f      	b.n	80047c0 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	206b      	movs	r0, #107	; 0x6b
 8004744:	f7ff ffa4 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 8004748:	4822      	ldr	r0, [pc, #136]	; (80047d4 <ICM20602_Initialization+0x100>)
 800474a:	f011 fb2f 	bl	8015dac <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800474e:	2101      	movs	r1, #1
 8004750:	206b      	movs	r0, #107	; 0x6b
 8004752:	f7ff ff9d 	bl	8004690 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 8004756:	481f      	ldr	r0, [pc, #124]	; (80047d4 <ICM20602_Initialization+0x100>)
 8004758:	f011 fb28 	bl	8015dac <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 800475c:	2100      	movs	r1, #0
 800475e:	206c      	movs	r0, #108	; 0x6c
 8004760:	f7ff ff96 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 8004764:	481b      	ldr	r0, [pc, #108]	; (80047d4 <ICM20602_Initialization+0x100>)
 8004766:	f011 fb21 	bl	8015dac <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800476a:	2100      	movs	r1, #0
 800476c:	2019      	movs	r0, #25
 800476e:	f7ff ff8f 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 8004772:	4818      	ldr	r0, [pc, #96]	; (80047d4 <ICM20602_Initialization+0x100>)
 8004774:	f011 fb1a 	bl	8015dac <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8004778:	2105      	movs	r1, #5
 800477a:	201a      	movs	r0, #26
 800477c:	f7ff ff88 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 8004780:	4814      	ldr	r0, [pc, #80]	; (80047d4 <ICM20602_Initialization+0x100>)
 8004782:	f011 fb13 	bl	8015dac <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8004786:	2118      	movs	r1, #24
 8004788:	201b      	movs	r0, #27
 800478a:	f7ff ff81 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 800478e:	4811      	ldr	r0, [pc, #68]	; (80047d4 <ICM20602_Initialization+0x100>)
 8004790:	f011 fb0c 	bl	8015dac <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8004794:	2118      	movs	r1, #24
 8004796:	201c      	movs	r0, #28
 8004798:	f7ff ff7a 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 800479c:	480d      	ldr	r0, [pc, #52]	; (80047d4 <ICM20602_Initialization+0x100>)
 800479e:	f011 fb05 	bl	8015dac <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80047a2:	2103      	movs	r1, #3
 80047a4:	201d      	movs	r0, #29
 80047a6:	f7ff ff73 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 80047aa:	480a      	ldr	r0, [pc, #40]	; (80047d4 <ICM20602_Initialization+0x100>)
 80047ac:	f011 fafe 	bl	8015dac <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80047b0:	2101      	movs	r1, #1
 80047b2:	2038      	movs	r0, #56	; 0x38
 80047b4:	f7ff ff6c 	bl	8004690 <ICM20602_Writebyte>
	delay_us(5000000);
 80047b8:	4806      	ldr	r0, [pc, #24]	; (80047d4 <ICM20602_Initialization+0x100>)
 80047ba:	f011 faf7 	bl	8015dac <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	0802b120 	.word	0x0802b120
 80047cc:	0802b138 	.word	0x0802b138
 80047d0:	0802b16c 	.word	0x0802b16c
 80047d4:	004c4b40 	.word	0x004c4b40

080047d8 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80047e2:	680a      	ldr	r2, [r1, #0]
 80047e4:	f382 8808 	msr	MSP, r2
 80047e8:	684a      	ldr	r2, [r1, #4]
 80047ea:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 80047ec:	e7fe      	b.n	80047ec <branch_to_bootloader+0x14>
	...

080047f0 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 80047f0:	b5b0      	push	{r4, r5, r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 80047f6:	491d      	ldr	r1, [pc, #116]	; (800486c <check_enter_bootloader+0x7c>)
 80047f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047fc:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8004800:	4c1a      	ldr	r4, [pc, #104]	; (800486c <check_enter_bootloader+0x7c>)
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 800480e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	0028      	movs	r0, r5
 800481c:	2100      	movs	r1, #0
 800481e:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8004822:	2300      	movs	r3, #0
 8004824:	4912      	ldr	r1, [pc, #72]	; (8004870 <check_enter_bootloader+0x80>)
 8004826:	4411      	add	r1, r2
 8004828:	430b      	orrs	r3, r1
 800482a:	d11a      	bne.n	8004862 <check_enter_bootloader+0x72>
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <check_enter_bootloader+0x84>)
 800482e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d014      	beq.n	8004862 <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <check_enter_bootloader+0x88>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 800483e:	683c      	ldr	r4, [r7, #0]
 8004840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	000a      	movs	r2, r1
 800484e:	2300      	movs	r3, #0
 8004850:	4613      	mov	r3, r2
 8004852:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004856:	f023 030f 	bic.w	r3, r3, #15
 800485a:	4619      	mov	r1, r3
 800485c:	4620      	mov	r0, r4
 800485e:	f7ff ffbb 	bl	80047d8 <branch_to_bootloader>
    }
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bdb0      	pop	{r4, r5, r7, pc}
 800486a:	bf00      	nop
 800486c:	2001c000 	.word	0x2001c000
 8004870:	fffffa5b 	.word	0xfffffa5b
 8004874:	40023800 	.word	0x40023800
 8004878:	40013800 	.word	0x40013800

0800487c <buzzerInit>:




void buzzerInit()
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004880:	2100      	movs	r1, #0
 8004882:	4804      	ldr	r0, [pc, #16]	; (8004894 <buzzerInit+0x18>)
 8004884:	f015 fbc4 	bl	801a010 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <buzzerInit+0x1c>)
 800488a:	2200      	movs	r2, #0
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	2000d2b0 	.word	0x2000d2b0
 8004898:	40000400 	.word	0x40000400

0800489c <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 80048a0:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <buzzerOff+0x18>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80048a6:	2100      	movs	r1, #0
 80048a8:	4803      	ldr	r0, [pc, #12]	; (80048b8 <buzzerOff+0x1c>)
 80048aa:	f015 fc79 	bl	801a1a0 <HAL_TIM_PWM_Stop>
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40000400 	.word	0x40000400
 80048b8:	2000d2b0 	.word	0x2000d2b0

080048bc <ledRestoreSavedState>:
static uint8_t ledControlBitmask;
static uint8_t ledLastState[LED_NUM];
ledSwitch_t ledSwitchState;

static void ledRestoreSavedState(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  for (int i = 0; i < LED_NUM; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	e011      	b.n	80048ec <ledRestoreSavedState+0x30>
  {
    ledSet(i, ledLastState[i]);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	490b      	ldr	r1, [pc, #44]	; (80048fc <ledRestoreSavedState+0x40>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	440b      	add	r3, r1
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 f917 	bl	8004b14 <ledSet>
  for (int i = 0; i < LED_NUM; i++)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3301      	adds	r3, #1
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	ddea      	ble.n	80048c8 <ledRestoreSavedState+0xc>
  }
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	200083a8 	.word	0x200083a8

08004900 <ledSetForce>:

static void ledSetForce(led_t led, bool value)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	460a      	mov	r2, r1
 800490a:	71fb      	strb	r3, [r7, #7]
 800490c:	4613      	mov	r3, r2
 800490e:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d832      	bhi.n	800497c <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	4a1a      	ldr	r2, [pc, #104]	; (8004984 <ledSetForce+0x84>)
 800491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10d      	bne.n	800493e <ledSetForce+0x3e>
  {
    value = !value;
 8004922:	79bb      	ldrb	r3, [r7, #6]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f083 0301 	eor.w	r3, r3, #1
 8004932:	b2db      	uxtb	r3, r3
 8004934:	71bb      	strb	r3, [r7, #6]
 8004936:	79bb      	ldrb	r3, [r7, #6]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 800493e:	79bb      	ldrb	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <ledSetForce+0x88>)
 8004948:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	4a0f      	ldr	r2, [pc, #60]	; (800498c <ledSetForce+0x8c>)
 8004950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	2201      	movs	r2, #1
 8004958:	4619      	mov	r1, r3
 800495a:	f013 fa87 	bl	8017e6c <HAL_GPIO_WritePin>
 800495e:	e00e      	b.n	800497e <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <ledSetForce+0x88>)
 8004964:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4a08      	ldr	r2, [pc, #32]	; (800498c <ledSetForce+0x8c>)
 800496c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004970:	b29b      	uxth	r3, r3
 8004972:	2200      	movs	r2, #0
 8004974:	4619      	mov	r1, r3
 8004976:	f013 fa79 	bl	8017e6c <HAL_GPIO_WritePin>
 800497a:	e000      	b.n	800497e <ledSetForce+0x7e>
    return;
 800497c:	bf00      	nop
    }

//  }

}
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000088 	.word	0x20000088
 8004988:	20000058 	.word	0x20000058
 800498c:	20000070 	.word	0x20000070

08004990 <ledSetSwitch>:

static void ledSetSwitch(ledSwitch_t ledSwitch)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  if (ledSwitchState != ledSwitch)
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <ledSetSwitch+0x38>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	79fa      	ldrb	r2, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00c      	beq.n	80049be <ledSetSwitch+0x2e>
  {
    ledSwitchState = ledSwitch;
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <ledSetSwitch+0x38>)
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	7013      	strb	r3, [r2, #0]
    switch (ledSwitch)
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <ledSetSwitch+0x26>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d003      	beq.n	80049bc <ledSetSwitch+0x2c>
        ledRestoreSavedState();
        break;
      case LED_PARAM_BITMASK:
        break;
      default:
        break;
 80049b4:	e003      	b.n	80049be <ledSetSwitch+0x2e>
        ledRestoreSavedState();
 80049b6:	f7ff ff81 	bl	80048bc <ledRestoreSavedState>
        break;
 80049ba:	e000      	b.n	80049be <ledSetSwitch+0x2e>
        break;
 80049bc:	bf00      	nop
    }
  }
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200083ae 	.word	0x200083ae

080049cc <ledBitmaskParamCallback>:

static void ledBitmaskParamCallback(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0

  if (ledControlBitmask & (1 << LED_ENABLE_BITMASK_BIT))
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <ledBitmaskParamCallback+0x60>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da1f      	bge.n	8004a1c <ledBitmaskParamCallback+0x50>
  {
    ledSetSwitch(LED_PARAM_BITMASK);
 80049dc:	2001      	movs	r0, #1
 80049de:	f7ff ffd7 	bl	8004990 <ledSetSwitch>
    for (int i = 0; i < LED_NUM; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	e015      	b.n	8004a14 <ledBitmaskParamCallback+0x48>
    {
      ledSetForce(i, ledControlBitmask & (1<<i));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <ledBitmaskParamCallback+0x60>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	2101      	movs	r1, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	4003      	ands	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7ff ff79 	bl	8004900 <ledSetForce>
    for (int i = 0; i < LED_NUM; i++)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3301      	adds	r3, #1
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	dde6      	ble.n	80049e8 <ledBitmaskParamCallback+0x1c>
  }
  else
  {
    ledSetSwitch(LED_LEDSEQ);
  }
}
 8004a1a:	e002      	b.n	8004a22 <ledBitmaskParamCallback+0x56>
    ledSetSwitch(LED_LEDSEQ);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7ff ffb7 	bl	8004990 <ledSetSwitch>
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200083a7 	.word	0x200083a7

08004a30 <ledInit>:

void ledInit(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8004a36:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <ledInit+0xd0>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d15b      	bne.n	8004af6 <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	609a      	str	r2, [r3, #8]
 8004a4a:	60da      	str	r2, [r3, #12]
 8004a4c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <ledInit+0xd4>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	4a2b      	ldr	r2, [pc, #172]	; (8004b04 <ledInit+0xd4>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5e:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <ledInit+0xd4>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <ledInit+0xd4>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <ledInit+0xd4>)
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7a:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <ledInit+0xd4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e02a      	b.n	8004ae2 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8004a8c:	4a1e      	ldr	r2, [pc, #120]	; (8004b08 <ledInit+0xd8>)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <ledInit+0xdc>)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f013 f9e3 	bl	8017e6c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 8004aa6:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <ledInit+0xdc>)
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <ledInit+0xd8>)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac4:	f107 0208 	add.w	r2, r7, #8
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f013 f832 	bl	8017b34 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f81c 	bl	8004b14 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	ddd1      	ble.n	8004a8c <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <ledInit+0xe0>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <ledInit+0xd0>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e000      	b.n	8004af8 <ledInit+0xc8>
    return;
 8004af6:	bf00      	nop
}
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200083a6 	.word	0x200083a6
 8004b04:	40023800 	.word	0x40023800
 8004b08:	20000058 	.word	0x20000058
 8004b0c:	20000070 	.word	0x20000070
 8004b10:	200083ae 	.word	0x200083ae

08004b14 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	71fb      	strb	r3, [r7, #7]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d904      	bls.n	8004b34 <ledSet+0x20>
 8004b2a:	22e4      	movs	r2, #228	; 0xe4
 8004b2c:	490a      	ldr	r1, [pc, #40]	; (8004b58 <ledSet+0x44>)
 8004b2e:	480b      	ldr	r0, [pc, #44]	; (8004b5c <ledSet+0x48>)
 8004b30:	f00d fa7c 	bl	801202c <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <ledSet+0x4c>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8004b3c:	79ba      	ldrb	r2, [r7, #6]
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fedc 	bl	8004900 <ledSetForce>
  }

  ledLastState[led] = value;
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	79b9      	ldrb	r1, [r7, #6]
 8004b4c:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <ledSet+0x50>)
 8004b4e:	54d1      	strb	r1, [r2, r3]
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	0802b19c 	.word	0x0802b19c
 8004b5c:	0802b1b8 	.word	0x0802b1b8
 8004b60:	200083ae 	.word	0x200083ae
 8004b64:	200083a8 	.word	0x200083a8

08004b68 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7ff ffd0 	bl	8004b14 <ledSet>
  ledSet(LED_GREEN_R, 0);
 8004b74:	2100      	movs	r1, #0
 8004b76:	2003      	movs	r0, #3
 8004b78:	f7ff ffcc 	bl	8004b14 <ledSet>
  ledSet(LED_RED_L, 1);
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	2002      	movs	r0, #2
 8004b80:	f7ff ffc8 	bl	8004b14 <ledSet>
  ledSet(LED_RED_R, 1);
 8004b84:	2101      	movs	r1, #1
 8004b86:	2004      	movs	r0, #4
 8004b88:	f7ff ffc4 	bl	8004b14 <ledSet>
  ledSet(LED_BLUE_L, 0);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7ff ffc0 	bl	8004b14 <ledSet>
}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af02      	add	r7, sp, #8
  if(isInit) {
 8004b9e:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <ledseqInit+0xe4>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d165      	bne.n	8004c72 <ledseqInit+0xda>
    return;
  }

  ledInit();
 8004ba6:	f7ff ff43 	bl	8004a30 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 8004baa:	4835      	ldr	r0, [pc, #212]	; (8004c80 <ledseqInit+0xe8>)
 8004bac:	f000 f9f8 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 8004bb0:	4834      	ldr	r0, [pc, #208]	; (8004c84 <ledseqInit+0xec>)
 8004bb2:	f000 f9f5 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 8004bb6:	4834      	ldr	r0, [pc, #208]	; (8004c88 <ledseqInit+0xf0>)
 8004bb8:	f000 f9f2 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8004bbc:	4833      	ldr	r0, [pc, #204]	; (8004c8c <ledseqInit+0xf4>)
 8004bbe:	f000 f9ef 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 8004bc2:	4833      	ldr	r0, [pc, #204]	; (8004c90 <ledseqInit+0xf8>)
 8004bc4:	f000 f9ec 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8004bc8:	4832      	ldr	r0, [pc, #200]	; (8004c94 <ledseqInit+0xfc>)
 8004bca:	f000 f9e9 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8004bce:	4832      	ldr	r0, [pc, #200]	; (8004c98 <ledseqInit+0x100>)
 8004bd0:	f000 f9e6 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8004bd4:	4831      	ldr	r0, [pc, #196]	; (8004c9c <ledseqInit+0x104>)
 8004bd6:	f000 f9e3 	bl	8004fa0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8004bda:	4831      	ldr	r0, [pc, #196]	; (8004ca0 <ledseqInit+0x108>)
 8004bdc:	f000 f9e0 	bl	8004fa0 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 8004be0:	2300      	movs	r3, #0
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	e007      	b.n	8004bf6 <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8004be6:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <ledseqInit+0x10c>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2100      	movs	r1, #0
 8004bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	ddf4      	ble.n	8004be6 <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	e018      	b.n	8004c34 <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4926      	ldr	r1, [pc, #152]	; (8004ca8 <ledseqInit+0x110>)
 8004c0e:	440b      	add	r3, r1
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	4b26      	ldr	r3, [pc, #152]	; (8004cac <ledseqInit+0x114>)
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c1e:	4824      	ldr	r0, [pc, #144]	; (8004cb0 <ledseqInit+0x118>)
 8004c20:	f01d f8ce 	bl	8021dc0 <xTimerCreateStatic>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4923      	ldr	r1, [pc, #140]	; (8004cb4 <ledseqInit+0x11c>)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	3301      	adds	r3, #1
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	dde3      	ble.n	8004c02 <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	f01a ff2b 	bl	801fa96 <xQueueCreateMutex>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <ledseqInit+0x120>)
 8004c44:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 8004c46:	2200      	movs	r2, #0
 8004c48:	2108      	movs	r1, #8
 8004c4a:	200a      	movs	r0, #10
 8004c4c:	f01a feac 	bl	801f9a8 <xQueueGenericCreate>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <ledseqInit+0x124>)
 8004c54:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 8004c56:	2300      	movs	r3, #0
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	4917      	ldr	r1, [pc, #92]	; (8004cc0 <ledseqInit+0x128>)
 8004c64:	4817      	ldr	r0, [pc, #92]	; (8004cc4 <ledseqInit+0x12c>)
 8004c66:	f01b fd99 	bl	802079c <xTaskCreate>

  isInit = true;
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <ledseqInit+0xe4>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e000      	b.n	8004c74 <ledseqInit+0xdc>
    return;
 8004c72:	bf00      	nop
}
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200083bc 	.word	0x200083bc
 8004c80:	20000278 	.word	0x20000278
 8004c84:	20000288 	.word	0x20000288
 8004c88:	200000b0 	.word	0x200000b0
 8004c8c:	200001c8 	.word	0x200001c8
 8004c90:	200001f0 	.word	0x200001f0
 8004c94:	20000148 	.word	0x20000148
 8004c98:	20000170 	.word	0x20000170
 8004c9c:	20000198 	.word	0x20000198
 8004ca0:	200001a8 	.word	0x200001a8
 8004ca4:	2000264c 	.word	0x2000264c
 8004ca8:	2000267c 	.word	0x2000267c
 8004cac:	08004e89 	.word	0x08004e89
 8004cb0:	0802b1e0 	.word	0x0802b1e0
 8004cb4:	20002664 	.word	0x20002664
 8004cb8:	200083b4 	.word	0x200083b4
 8004cbc:	200083b8 	.word	0x200083b8
 8004cc0:	0802b1ec 	.word	0x0802b1ec
 8004cc4:	08004cc9 	.word	0x08004cc9

08004cc8 <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <lesdeqCmdTask+0x3c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f107 0108 	add.w	r1, r7, #8
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f01b f8af 	bl	801fe40 <xQueueReceive>

    switch(command.command) {
 8004ce2:	7a3b      	ldrb	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <lesdeqCmdTask+0x26>
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d005      	beq.n	8004cf8 <lesdeqCmdTask+0x30>
 8004cec:	e009      	b.n	8004d02 <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f825 	bl	8004d40 <ledseqRunBlocking>
        break;
 8004cf6:	e004      	b.n	8004d02 <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f898 	bl	8004e30 <ledseqStopBlocking>
        break;
 8004d00:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8004d02:	e7e5      	b.n	8004cd0 <lesdeqCmdTask+0x8>
 8004d04:	200083b8 	.word	0x200083b8

08004d08 <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 8004d10:	2300      	movs	r3, #0
 8004d12:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8004d18:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <ledseqRun+0x34>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	f107 0108 	add.w	r1, r7, #8
 8004d20:	2300      	movs	r3, #0
 8004d22:	2200      	movs	r2, #0
 8004d24:	f01a feea 	bl	801fafc <xQueueGenericSend>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <ledseqRun+0x2a>
    return true;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <ledseqRun+0x2c>
  }
  return false;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	200083b8 	.word	0x200083b8

08004d40 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7b1b      	ldrb	r3, [r3, #12]
 8004d4c:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <ledseqRunBlocking+0x5c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d56:	4618      	mov	r0, r3
 8004d58:	f01b f952 	bl	8020000 <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f94f 	bl	8005008 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <ledseqRunBlocking+0x5c>)
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	f01a fec2 	bl	801fafc <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <ledseqRunBlocking+0x60>)
 8004d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d106      	bne.n	8004d94 <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	4a06      	ldr	r2, [pc, #24]	; (8004da4 <ledseqRunBlocking+0x64>)
 8004d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f87a 	bl	8004e88 <runLedseq>
  }
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200083b4 	.word	0x200083b4
 8004da0:	2000264c 	.word	0x2000264c
 8004da4:	20002664 	.word	0x20002664

08004da8 <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 8004db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004db6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004df0 <ledseqSetChargeLevel+0x48>
 8004dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc2:	ee17 3a90 	vmov	r3, s15
 8004dc6:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004dce:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <ledseqSetChargeLevel+0x4c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <ledseqSetChargeLevel+0x4c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	605a      	str	r2, [r3, #4]
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	447a0000 	.word	0x447a0000
 8004df4:	200001f0 	.word	0x200001f0

08004df8 <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 8004e00:	2301      	movs	r3, #1
 8004e02:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <ledseqStop+0x34>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	2300      	movs	r3, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	f01a fe72 	bl	801fafc <xQueueGenericSend>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <ledseqStop+0x2a>
    return true;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <ledseqStop+0x2c>
  }
  return false;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	200083b8 	.word	0x200083b8

08004e30 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7b1b      	ldrb	r3, [r3, #12]
 8004e3c:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <ledseqStopBlocking+0x50>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e46:	4618      	mov	r0, r3
 8004e48:	f01b f8da 	bl	8020000 <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e52:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f8d6 	bl	8005008 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <ledseqStopBlocking+0x50>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	2300      	movs	r3, #0
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	f01a fe49 	bl	801fafc <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <ledseqStopBlocking+0x54>)
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f808 	bl	8004e88 <runLedseq>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200083b4 	.word	0x200083b4
 8004e84:	20002664 	.word	0x20002664

08004e88 <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 8004e90:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <runLedseq+0x10c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f083 0301 	eor.w	r3, r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d171      	bne.n	8004f82 <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f01d fb02 	bl	80224a8 <pvTimerGetTimerID>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8004ea8:	7dbb      	ldrb	r3, [r7, #22]
 8004eaa:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <runLedseq+0x110>)
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d066      	beq.n	8004f86 <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8004ebc:	e05a      	b.n	8004f74 <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec6:	d060      	beq.n	8004f8a <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <runLedseq+0x114>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f01b f88e 	bl	8020000 <xQueueSemaphoreTake>
    context->state++;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	7b1b      	ldrb	r3, [r3, #12]
 8004ef2:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f113 0f02 	cmn.w	r3, #2
 8004efc:	d003      	beq.n	8004f06 <runLedseq+0x7e>
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f02:	d004      	beq.n	8004f0e <runLedseq+0x86>
 8004f04:	e00c      	b.n	8004f20 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	609a      	str	r2, [r3, #8]
        break;
 8004f0c:	e02b      	b.n	8004f66 <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f14:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8004f16:	7afb      	ldrb	r3, [r7, #11]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f875 	bl	8005008 <updateActive>
        break;
 8004f1e:	e022      	b.n	8004f66 <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fdf3 	bl	8004b14 <ledSet>
        if (step->action == 0) {
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d016      	beq.n	8004f64 <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2300      	movs	r3, #0
 8004f42:	2104      	movs	r1, #4
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f01c ffaf 	bl	8021ea8 <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 8004f4a:	f01b ff47 	bl	8020ddc <xTaskGetTickCount>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	2300      	movs	r3, #0
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	2101      	movs	r1, #1
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f01c ffa5 	bl	8021ea8 <xTimerGenericCommand>
        leave = true;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
        break;
 8004f62:	e000      	b.n	8004f66 <runLedseq+0xde>
          break;
 8004f64:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <runLedseq+0x114>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2100      	movs	r1, #0
 8004f70:	f01a fdc4 	bl	801fafc <xQueueGenericSend>
  while(!leave) {
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	f083 0301 	eor.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d19e      	bne.n	8004ebe <runLedseq+0x36>
 8004f80:	e004      	b.n	8004f8c <runLedseq+0x104>
    return;
 8004f82:	bf00      	nop
 8004f84:	e002      	b.n	8004f8c <runLedseq+0x104>
    return;
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <runLedseq+0x104>
      return;
 8004f8a:	bf00      	nop
  }
}
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	200083bd 	.word	0x200083bd
 8004f98:	2000264c 	.word	0x2000264c
 8004f9c:	200083b4 	.word	0x200083b4

08004fa0 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fae:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <ledseqRegisterSequence+0x64>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <ledseqRegisterSequence+0x26>
    sequences = context;
 8004fbe:	4a11      	ldr	r2, [pc, #68]	; (8005004 <ledseqRegisterSequence+0x64>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e019      	b.n	8004ffa <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <ledseqRegisterSequence+0x64>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d00f      	beq.n	8004ff4 <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 8004fd4:	e006      	b.n	8004fe4 <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d009      	beq.n	8004ff8 <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f4      	bne.n	8004fd6 <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e002      	b.n	8004ffa <ledseqRegisterSequence+0x5a>
      return;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <ledseqRegisterSequence+0x5a>
        return;
 8004ff8:	bf00      	nop
  }
}
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	200083b0 	.word	0x200083b0

08005008 <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <updateActive+0x5c>)
 8005016:	2100      	movs	r1, #0
 8005018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fd77 	bl	8004b14 <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <updateActive+0x60>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e012      	b.n	8005054 <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	7b1b      	ldrb	r3, [r3, #12]
 8005032:	79fa      	ldrb	r2, [r7, #7]
 8005034:	429a      	cmp	r2, r3
 8005036:	d10a      	bne.n	800504e <updateActive+0x46>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005040:	d005      	beq.n	800504e <updateActive+0x46>
      activeSeq[led] = sequence;
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	4907      	ldr	r1, [pc, #28]	; (8005064 <updateActive+0x5c>)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 800504c:	e006      	b.n	800505c <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e9      	bne.n	800502e <updateActive+0x26>
    }
  }
}
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	2000264c 	.word	0x2000264c
 8005068:	200083b0 	.word	0x200083b0

0800506c <handleMemTesterGetSize>:
#include "param.h"

#define MEM_TESTER_SIZE            0x1000

// Private functions, mem tester
static uint32_t handleMemTesterGetSize(void) { return MEM_TESTER_SIZE; }
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
 8005070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <memInit>:
static uint8_t nrOfHandlers = 0;
static const MemoryOwHandlerDef_t* owMemHandler = 0;


void memInit(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  if(isInit) {
 8005084:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <memInit+0x20>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <memInit+0x1a>
    return;
  }

  memoryRegisterHandler(&memTesterDef);
 800508c:	4805      	ldr	r0, [pc, #20]	; (80050a4 <memInit+0x24>)
 800508e:	f000 f80b 	bl	80050a8 <memoryRegisterHandler>

  isInit = true;
 8005092:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <memInit+0x20>)
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e000      	b.n	800509c <memInit+0x1c>
    return;
 800509a:	bf00      	nop
}
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	200083c5 	.word	0x200083c5
 80050a4:	0802ef08 	.word	0x0802ef08

080050a8 <memoryRegisterHandler>:
  nrOfHandlers = 0;
  owMemHandler = 0;
}
#endif

void memoryRegisterHandler(const MemoryHandlerDef_t* handlerDef){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < nrOfHandlers; i++) {
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e010      	b.n	80050d8 <memoryRegisterHandler+0x30>
    ASSERT(handlerDef->type != handlers[i]->type);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	491c      	ldr	r1, [pc, #112]	; (800512c <memoryRegisterHandler+0x84>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d104      	bne.n	80050d2 <memoryRegisterHandler+0x2a>
 80050c8:	225f      	movs	r2, #95	; 0x5f
 80050ca:	4919      	ldr	r1, [pc, #100]	; (8005130 <memoryRegisterHandler+0x88>)
 80050cc:	4819      	ldr	r0, [pc, #100]	; (8005134 <memoryRegisterHandler+0x8c>)
 80050ce:	f00c ffad 	bl	801202c <assertFail>
  for (int i = 0; i < nrOfHandlers; i++) {
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <memoryRegisterHandler+0x90>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4293      	cmp	r3, r2
 80050e2:	dbe8      	blt.n	80050b6 <memoryRegisterHandler+0xe>
  }
  ASSERT(nrOfHandlers < MAX_NR_HANDLERS);
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <memoryRegisterHandler+0x90>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b13      	cmp	r3, #19
 80050ea:	d904      	bls.n	80050f6 <memoryRegisterHandler+0x4e>
 80050ec:	2261      	movs	r2, #97	; 0x61
 80050ee:	4910      	ldr	r1, [pc, #64]	; (8005130 <memoryRegisterHandler+0x88>)
 80050f0:	4812      	ldr	r0, [pc, #72]	; (800513c <memoryRegisterHandler+0x94>)
 80050f2:	f00c ff9b 	bl	801202c <assertFail>
  ASSERT(registrationEnabled);
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <memoryRegisterHandler+0x98>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d104      	bne.n	8005108 <memoryRegisterHandler+0x60>
 80050fe:	2262      	movs	r2, #98	; 0x62
 8005100:	490b      	ldr	r1, [pc, #44]	; (8005130 <memoryRegisterHandler+0x88>)
 8005102:	4810      	ldr	r0, [pc, #64]	; (8005144 <memoryRegisterHandler+0x9c>)
 8005104:	f00c ff92 	bl	801202c <assertFail>
  handlers[nrOfHandlers] = handlerDef;
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <memoryRegisterHandler+0x90>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	4619      	mov	r1, r3
 800510e:	4a07      	ldr	r2, [pc, #28]	; (800512c <memoryRegisterHandler+0x84>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  nrOfHandlers++;
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <memoryRegisterHandler+0x90>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <memoryRegisterHandler+0x90>)
 8005120:	701a      	strb	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200083c8 	.word	0x200083c8
 8005130:	0802b1f8 	.word	0x0802b1f8
 8005134:	0802b214 	.word	0x0802b214
 8005138:	20008418 	.word	0x20008418
 800513c:	0802b23c 	.word	0x0802b23c
 8005140:	20000298 	.word	0x20000298
 8005144:	0802b25c 	.word	0x0802b25c

08005148 <memoryRegisterOwHandler>:

void memoryRegisterOwHandler(const MemoryOwHandlerDef_t* handlerDef){
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  ASSERT(owMemHandler == 0);
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <memoryRegisterOwHandler+0x44>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <memoryRegisterOwHandler+0x1a>
 8005158:	2268      	movs	r2, #104	; 0x68
 800515a:	490d      	ldr	r1, [pc, #52]	; (8005190 <memoryRegisterOwHandler+0x48>)
 800515c:	480d      	ldr	r0, [pc, #52]	; (8005194 <memoryRegisterOwHandler+0x4c>)
 800515e:	f00c ff65 	bl	801202c <assertFail>
  ASSERT(registrationEnabled);
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <memoryRegisterOwHandler+0x50>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <memoryRegisterOwHandler+0x2c>
 800516a:	2269      	movs	r2, #105	; 0x69
 800516c:	4908      	ldr	r1, [pc, #32]	; (8005190 <memoryRegisterOwHandler+0x48>)
 800516e:	480b      	ldr	r0, [pc, #44]	; (800519c <memoryRegisterOwHandler+0x54>)
 8005170:	f00c ff5c 	bl	801202c <assertFail>
  owMemHandler = handlerDef;
 8005174:	4a05      	ldr	r2, [pc, #20]	; (800518c <memoryRegisterOwHandler+0x44>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6013      	str	r3, [r2, #0]

  nrOfOwMems = handlerDef->nrOfMems;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <memoryRegisterOwHandler+0x58>)
 8005180:	701a      	strb	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2000841c 	.word	0x2000841c
 8005190:	0802b1f8 	.word	0x0802b1f8
 8005194:	0802b270 	.word	0x0802b270
 8005198:	20000298 	.word	0x20000298
 800519c:	0802b25c 	.word	0x0802b25c
 80051a0:	200083c6 	.word	0x200083c6

080051a4 <handleMemTesterRead>:
 * @param memAddr - the virtual address to read from
 * @param readLen - nr of bytes to read
 * @param startOfData - address to write result to
 * @return Always returns true
 */
static bool handleMemTesterRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* startOfData) {
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	460b      	mov	r3, r1
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	72fb      	strb	r3, [r7, #11]
  for (int i = 0; i < readLen; i++) {
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	e00d      	b.n	80051d4 <handleMemTesterRead+0x30>
    uint32_t addr = memAddr + i;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
    uint8_t data = addr & 0xff;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	75fb      	strb	r3, [r7, #23]
    startOfData[i] = data;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	7dfa      	ldrb	r2, [r7, #23]
 80051cc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < readLen; i++) {
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3301      	adds	r3, #1
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	7afb      	ldrb	r3, [r7, #11]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dbed      	blt.n	80051b8 <handleMemTesterRead+0x14>
  }

  return true;
 80051dc:	2301      	movs	r3, #1
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <handleMemTesterWrite>:
 * @param memAddr - the virtual address to write to
 * @param writeLen - nr of bytes to write
 * @param startOfData - pointer to the data in the packet that is provided by the client
 * @return Always returns true
 */
static bool handleMemTesterWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* startOfData) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	460b      	mov	r3, r1
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	72fb      	strb	r3, [r7, #11]
  if (memTesterWriteReset) {
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <handleMemTesterWrite+0x84>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <handleMemTesterWrite+0x22>
    memTesterWriteReset = 0;
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <handleMemTesterWrite+0x84>)
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
    memTesterWriteErrorCount = 0;
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <handleMemTesterWrite+0x88>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
  }

  for (int i = 0; i < writeLen; i++) {
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e024      	b.n	800525e <handleMemTesterWrite+0x72>
    uint32_t addr = memAddr + i;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
    uint8_t expectedData = addr & 0xff;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	75fb      	strb	r3, [r7, #23]
    uint8_t actualData = startOfData[i];
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	75bb      	strb	r3, [r7, #22]
    if (actualData != expectedData) {
 800522a:	7dba      	ldrb	r2, [r7, #22]
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	429a      	cmp	r2, r3
 8005230:	d012      	beq.n	8005258 <handleMemTesterWrite+0x6c>
      // Log first error
      if (memTesterWriteErrorCount == 0) {
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <handleMemTesterWrite+0x88>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d108      	bne.n	800524c <handleMemTesterWrite+0x60>
        DEBUG_PRINT("Verification failed: expected: %d, actual: %d, addr: %lu\n", expectedData, actualData, addr);
 800523a:	7dfa      	ldrb	r2, [r7, #23]
 800523c:	7db9      	ldrb	r1, [r7, #22]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	460b      	mov	r3, r1
 8005244:	490c      	ldr	r1, [pc, #48]	; (8005278 <handleMemTesterWrite+0x8c>)
 8005246:	2000      	movs	r0, #0
 8005248:	f00c fe2c 	bl	8011ea4 <SEGGER_RTT_printf>
      }

      memTesterWriteErrorCount++;
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <handleMemTesterWrite+0x88>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	4a08      	ldr	r2, [pc, #32]	; (8005274 <handleMemTesterWrite+0x88>)
 8005254:	6013      	str	r3, [r2, #0]
      break;
 8005256:	e006      	b.n	8005266 <handleMemTesterWrite+0x7a>
  for (int i = 0; i < writeLen; i++) {
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	3301      	adds	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	7afb      	ldrb	r3, [r7, #11]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	429a      	cmp	r2, r3
 8005264:	dbd6      	blt.n	8005214 <handleMemTesterWrite+0x28>
    }
  }

  return true;
 8005266:	2301      	movs	r3, #1
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	200083c4 	.word	0x200083c4
 8005274:	200083c0 	.word	0x200083c0
 8005278:	0802b2ac 	.word	0x0802b2ac

0800527c <owCommonInit>:
  .write = handleMemWrite,
};

static bool isInit = false;

void owCommonInit() {
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  if (isInit) {
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <owCommonInit+0x24>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <owCommonInit+0x20>
    return;
  }

  owScan(&memHandlerDef.nrOfMems);
 8005288:	4806      	ldr	r0, [pc, #24]	; (80052a4 <owCommonInit+0x28>)
 800528a:	f000 f86f 	bl	800536c <owScan>
  memoryRegisterOwHandler(&memHandlerDef);
 800528e:	4805      	ldr	r0, [pc, #20]	; (80052a4 <owCommonInit+0x28>)
 8005290:	f7ff ff5a 	bl	8005148 <memoryRegisterOwHandler>

  isInit = true;
 8005294:	4b02      	ldr	r3, [pc, #8]	; (80052a0 <owCommonInit+0x24>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e000      	b.n	800529e <owCommonInit+0x22>
    return;
 800529c:	bf00      	nop
}
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20008420 	.word	0x20008420
 80052a4:	2000029c 	.word	0x2000029c

080052a8 <handleMemGetSerialNr>:

bool owCommonTest() {
  return isInit;
}

static bool handleMemGetSerialNr(const uint8_t selectedMem, uint8_t* serialNr) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	71fb      	strb	r3, [r7, #7]
  return owGetinfo(selectedMem, (OwSerialNum*)serialNr);
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f862 	bl	8005382 <owGetinfo>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <handleMemRead>:

static bool handleMemRead(const uint8_t selectedMem, const uint32_t memAddr, const uint8_t readLen, uint8_t* startOfData) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	4603      	mov	r3, r0
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	4613      	mov	r3, r2
 80052d8:	73bb      	strb	r3, [r7, #14]
  bool result = false;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]

  if (memAddr + readLen <= OW_MAX_SIZE) {
 80052de:	7bba      	ldrb	r2, [r7, #14]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4413      	add	r3, r2
 80052e4:	2b70      	cmp	r3, #112	; 0x70
 80052e6:	d80b      	bhi.n	8005300 <handleMemRead+0x38>
    if (owRead(selectedMem, memAddr, readLen, startOfData)) {
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	b299      	uxth	r1, r3
 80052ec:	7bba      	ldrb	r2, [r7, #14]
 80052ee:	7bf8      	ldrb	r0, [r7, #15]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f000 f853 	bl	800539c <owRead>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <handleMemRead+0x38>
      result = true;
 80052fc:	2301      	movs	r3, #1
 80052fe:	75fb      	strb	r3, [r7, #23]
    }
  }

  return result;
 8005300:	7dfb      	ldrb	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <handleMemWrite>:

static bool handleMemWrite(const uint8_t selectedMem, const uint32_t memAddr, const uint8_t writeLen, const uint8_t* startOfData) {
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	4613      	mov	r3, r2
 800531a:	73bb      	strb	r3, [r7, #14]
  bool result = false;
 800531c:	2300      	movs	r3, #0
 800531e:	75fb      	strb	r3, [r7, #23]

  if (memAddr + writeLen <= OW_MAX_SIZE) {
 8005320:	7bba      	ldrb	r2, [r7, #14]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4413      	add	r3, r2
 8005326:	2b70      	cmp	r3, #112	; 0x70
 8005328:	d80b      	bhi.n	8005342 <handleMemWrite+0x38>
    if (owWrite(selectedMem, memAddr, writeLen, startOfData)) {
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	b299      	uxth	r1, r3
 800532e:	7bba      	ldrb	r2, [r7, #14]
 8005330:	7bf8      	ldrb	r0, [r7, #15]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f000 f843 	bl	80053be <owWrite>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <handleMemWrite+0x38>
      result = true;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
    }
  }

  return result;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <owInit>:

#include "ow.h"


void owInit()
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  owCommonInit();
 8005350:	f7ff ff94 	bl	800527c <owCommonInit>
}
 8005354:	bf00      	nop
 8005356:	bd80      	pop	{r7, pc}

08005358 <owSyslinkReceive>:
{
  return owCommonTest();
}

void owSyslinkReceive(SyslinkPacket *slp)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <owScan>:

bool owScan(uint8_t *nMem)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return true;
 8005374:	2301      	movs	r3, #1
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <owGetinfo>:

bool owGetinfo(uint8_t selectMem, OwSerialNum *serialNum)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	4603      	mov	r3, r0
 800538a:	6039      	str	r1, [r7, #0]
 800538c:	71fb      	strb	r3, [r7, #7]
  return false;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <owRead>:

bool owRead(uint8_t selectMem, uint16_t address, uint8_t length, uint8_t *data)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4603      	mov	r3, r0
 80053a6:	71fb      	strb	r3, [r7, #7]
 80053a8:	460b      	mov	r3, r1
 80053aa:	80bb      	strh	r3, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71bb      	strb	r3, [r7, #6]
  return false;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <owWrite>:

bool owWrite(uint8_t selectMem, uint16_t address, uint8_t length, const uint8_t *data)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
 80053ca:	460b      	mov	r3, r1
 80053cc:	80bb      	strh	r3, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	71bb      	strb	r3, [r7, #6]
  return false;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af04      	add	r7, sp, #16
  if(isInit) {
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <pmInit+0x60>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d125      	bne.n	800543a <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 80053ee:	2201      	movs	r2, #1
 80053f0:	4914      	ldr	r1, [pc, #80]	; (8005444 <pmInit+0x64>)
 80053f2:	4815      	ldr	r0, [pc, #84]	; (8005448 <pmInit+0x68>)
 80053f4:	f011 faae 	bl	8016954 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 80053f8:	2201      	movs	r2, #1
 80053fa:	4914      	ldr	r1, [pc, #80]	; (800544c <pmInit+0x6c>)
 80053fc:	4814      	ldr	r0, [pc, #80]	; (8005450 <pmInit+0x70>)
 80053fe:	f011 faa9 	bl	8016954 <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	461a      	mov	r2, r3
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <pmInit+0x74>)
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <pmInit+0x78>)
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	4911      	ldr	r1, [pc, #68]	; (800545c <pmInit+0x7c>)
 8005416:	4812      	ldr	r0, [pc, #72]	; (8005460 <pmInit+0x80>)
 8005418:	f01b f96a 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <pmInit+0x60>)
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 8005422:	4b10      	ldr	r3, [pc, #64]	; (8005464 <pmInit+0x84>)
 8005424:	4a10      	ldr	r2, [pc, #64]	; (8005468 <pmInit+0x88>)
 8005426:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 800542a:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <pmInit+0x84>)
 800542c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8005430:	ee00 3a10 	vmov	s0, r3
 8005434:	f000 f81a 	bl	800546c <pmSetBatteryVoltage>
 8005438:	e000      	b.n	800543c <pmInit+0x5c>
    return;
 800543a:	bf00      	nop
}
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20008450 	.word	0x20008450
 8005444:	20008460 	.word	0x20008460
 8005448:	2000d048 	.word	0x2000d048
 800544c:	20008462 	.word	0x20008462
 8005450:	2000d090 	.word	0x2000d090
 8005454:	20002784 	.word	0x20002784
 8005458:	20008464 	.word	0x20008464
 800545c:	0802b30c 	.word	0x0802b30c
 8005460:	080057ad 	.word	0x080057ad
 8005464:	20008454 	.word	0x20008454
 8005468:	406ccccd 	.word	0x406ccccd

0800546c <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <pmSetBatteryVoltage+0x6c>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 800547c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005480:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80054dc <pmSetBatteryVoltage+0x70>
 8005484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548c:	ee17 3a90 	vmov	r3, s15
 8005490:	b29a      	uxth	r2, r3
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <pmSetBatteryVoltage+0x74>)
 8005494:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <pmSetBatteryVoltage+0x78>)
 8005498:	edd3 7a00 	vldr	s15, [r3]
 800549c:	ed97 7a01 	vldr	s14, [r7, #4]
 80054a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	dd02      	ble.n	80054b0 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 80054aa:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <pmSetBatteryVoltage+0x78>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <pmSetBatteryVoltage+0x7c>)
 80054b2:	edd3 7a00 	vldr	s15, [r3]
 80054b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80054ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	d400      	bmi.n	80054c6 <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 80054c4:	e002      	b.n	80054cc <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <pmSetBatteryVoltage+0x7c>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	20008424 	.word	0x20008424
 80054dc:	447a0000 	.word	0x447a0000
 80054e0:	20008428 	.word	0x20008428
 80054e4:	2000842c 	.word	0x2000842c
 80054e8:	200002b0 	.word	0x200002b0

080054ec <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 800550a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800550e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	d501      	bpl.n	8005520 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 800551c:	2300      	movs	r3, #0
 800551e:	e01c      	b.n	800555a <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8005520:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005568 <pmBatteryChargeFromVoltage+0x6c>
 8005524:	edd7 7a01 	vldr	s15, [r7, #4]
 8005528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005530:	dd01      	ble.n	8005536 <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 8005532:	2309      	movs	r3, #9
 8005534:	e011      	b.n	800555a <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8005536:	e002      	b.n	800553e <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 800553e:	4a0b      	ldr	r2, [pc, #44]	; (800556c <pmBatteryChargeFromVoltage+0x70>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	edd3 7a00 	vldr	s15, [r3]
 800554a:	ed97 7a01 	vldr	s14, [r7, #4]
 800554e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005556:	dcef      	bgt.n	8005538 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40833333 	.word	0x40833333
 800556c:	0802ef18 	.word	0x0802ef18

08005570 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return batteryVoltage;
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <pmGetBatteryVoltage+0x18>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	ee07 3a90 	vmov	s15, r3
}
 800557c:	eeb0 0a67 	vmov.f32	s0, s15
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20008424 	.word	0x20008424

0800558c <pmGracefulShutdown>:
/*
 * Iterate through all registered shutdown callbacks and call them one after
 * the other, when all is done, send the ACK back to nrf to allow power off.
 */
static void pmGracefulShutdown()
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b094      	sub	sp, #80	; 0x50
 8005590:	af00      	add	r7, sp, #0
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 8005592:	2300      	movs	r3, #0
 8005594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005596:	e009      	b.n	80055ac <pmGracefulShutdown+0x20>
    graceful_shutdown_callback_t callback = graceful_shutdown_callbacks[i];
 8005598:	4a0f      	ldr	r2, [pc, #60]	; (80055d8 <pmGracefulShutdown+0x4c>)
 800559a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	64bb      	str	r3, [r7, #72]	; 0x48

    callback();
 80055a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a4:	4798      	blx	r3
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80055a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a8:	3301      	adds	r3, #1
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <pmGracefulShutdown+0x50>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	dbf0      	blt.n	8005598 <pmGracefulShutdown+0xc>
  }

  SyslinkPacket slp = {
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	2242      	movs	r2, #66	; 0x42
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f01f fa5f 	bl	8024a80 <memset>
 80055c2:	2316      	movs	r3, #22
 80055c4:	713b      	strb	r3, [r7, #4]
    .type = SYSLINK_PM_SHUTDOWN_ACK,
  };

  syslinkSendPacket(&slp);
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fe0f 	bl	80041ec <syslinkSendPacket>
}
 80055ce:	bf00      	nop
 80055d0:	3750      	adds	r7, #80	; 0x50
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20008668 	.word	0x20008668
 80055dc:	20008664 	.word	0x20008664

080055e0 <pmSyslinkUpdate>:

  syslinkSendPacket(&slp);
}
*/
void pmSyslinkUpdate(SyslinkPacket *slp)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_PM_BATTERY_STATE) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b13      	cmp	r3, #19
 80055ee:	d11b      	bne.n	8005628 <pmSyslinkUpdate+0x48>
    // First byte of the packet contains some PM flags such as USB power, charging etc.
    memcpy(&pmSyslinkInfo, &slp->data[0], sizeof(pmSyslinkInfo));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <pmSyslinkUpdate+0x60>)
 80055f6:	6810      	ldr	r0, [r2, #0]
 80055f8:	6851      	ldr	r1, [r2, #4]
 80055fa:	c303      	stmia	r3!, {r0, r1}
 80055fc:	7a12      	ldrb	r2, [r2, #8]
 80055fe:	701a      	strb	r2, [r3, #0]

    // If using voltage measurements from external battery, we'll set the
    // voltage to this instead of the one sent from syslink.
    if (isExtBatVoltDeckPinSet) {
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <pmSyslinkUpdate+0x64>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <pmSyslinkUpdate+0x38>
      pmSetBatteryVoltage(extBatteryVoltage);
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <pmSyslinkUpdate+0x68>)
 800560a:	edd3 7a00 	vldr	s15, [r3]
 800560e:	eeb0 0a67 	vmov.f32	s0, s15
 8005612:	f7ff ff2b 	bl	800546c <pmSetBatteryVoltage>
    temp = pmSyslinkInfo.temp;
#endif
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
    workerSchedule(pmGracefulShutdown, NULL);
  }
}
 8005616:	e00f      	b.n	8005638 <pmSyslinkUpdate+0x58>
      pmSetBatteryVoltage(pmSyslinkInfo.vBat);
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <pmSyslinkUpdate+0x60>)
 800561a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800561e:	ee00 3a10 	vmov	s0, r3
 8005622:	f7ff ff23 	bl	800546c <pmSetBatteryVoltage>
}
 8005626:	e007      	b.n	8005638 <pmSyslinkUpdate+0x58>
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b15      	cmp	r3, #21
 800562e:	d103      	bne.n	8005638 <pmSyslinkUpdate+0x58>
    workerSchedule(pmGracefulShutdown, NULL);
 8005630:	2100      	movs	r1, #0
 8005632:	4806      	ldr	r0, [pc, #24]	; (800564c <pmSyslinkUpdate+0x6c>)
 8005634:	f00f ff5a 	bl	80154ec <workerSchedule>
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20008454 	.word	0x20008454
 8005644:	20008436 	.word	0x20008436
 8005648:	20008430 	.word	0x20008430
 800564c:	0800558d 	.word	0x0800558d

08005650 <pmSetChargeState>:

void pmSetChargeState(PMChargeStates chgState)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <pmUpdateState>:

PMStates pmUpdateState()
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <pmUpdateState+0x98>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 8005682:	4b1f      	ldr	r3, [pc, #124]	; (8005700 <pmUpdateState+0x98>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 8005696:	f01b fba1 	bl	8020ddc <xTaskGetTickCount>
 800569a:	4602      	mov	r2, r0
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <pmUpdateState+0x9c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 80056a4:	4b18      	ldr	r3, [pc, #96]	; (8005708 <pmUpdateState+0xa0>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 80056ac:	2300      	movs	r3, #0
 80056ae:	71fb      	strb	r3, [r7, #7]
 80056b0:	e016      	b.n	80056e0 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 80056b2:	79bb      	ldrb	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <pmUpdateState+0x62>
 80056b8:	797b      	ldrb	r3, [r7, #5]
 80056ba:	f083 0301 	eor.w	r3, r3, #1
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <pmUpdateState+0x62>
  {
    nextState = charged;
 80056c4:	2302      	movs	r3, #2
 80056c6:	71fb      	strb	r3, [r7, #7]
 80056c8:	e00a      	b.n	80056e0 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 80056ca:	79bb      	ldrb	r3, [r7, #6]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <pmUpdateState+0x74>
 80056d0:	797b      	ldrb	r3, [r7, #5]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <pmUpdateState+0x74>
  {
    nextState = charging;
 80056d6:	2301      	movs	r3, #1
 80056d8:	71fb      	strb	r3, [r7, #7]
 80056da:	e001      	b.n	80056e0 <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 80056dc:	2300      	movs	r3, #0
 80056de:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <pmUpdateState+0x8c>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 80056f0:	2303      	movs	r3, #3
 80056f2:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 80056f4:	79fb      	ldrb	r3, [r7, #7]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20008454 	.word	0x20008454
 8005704:	20008448 	.word	0x20008448
 8005708:	2000845e 	.word	0x2000845e

0800570c <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <pmMeasureExtBatteryCurrent+0x44>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <pmMeasureExtBatteryCurrent+0x48>)
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <pmMeasureExtBatteryCurrent+0x4c>)
 8005728:	edd3 7a00 	vldr	s15, [r3]
 800572c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005730:	edc7 7a01 	vstr	s15, [r7, #4]
 8005734:	e002      	b.n	800573c <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	607b      	str	r3, [r7, #4]
  }

  return current;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	ee07 3a90 	vmov	s15, r3
}
 8005742:	eeb0 0a67 	vmov.f32	s0, s15
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20008440 	.word	0x20008440
 8005754:	20008460 	.word	0x20008460
 8005758:	20008444 	.word	0x20008444

0800575c <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <pmMeasureExtBatteryVoltage+0x44>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <pmMeasureExtBatteryVoltage+0x48>)
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <pmMeasureExtBatteryVoltage+0x4c>)
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005780:	edc7 7a01 	vstr	s15, [r7, #4]
 8005784:	e002      	b.n	800578c <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	ee07 3a90 	vmov	s15, r3
}
 8005792:	eeb0 0a67 	vmov.f32	s0, s15
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20008436 	.word	0x20008436
 80057a4:	20008462 	.word	0x20008462
 80057a8:	20008438 	.word	0x20008438

080057ac <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 80057b4:	2300      	movs	r3, #0
 80057b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 80057b8:	2105      	movs	r1, #5
 80057ba:	2000      	movs	r0, #0
 80057bc:	f01b fc6c 	bl	8021098 <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 80057c0:	f01b fb0c 	bl	8020ddc <xTaskGetTickCount>
 80057c4:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 80057c6:	4a6f      	ldr	r2, [pc, #444]	; (8005984 <pmTask+0x1d8>)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 80057cc:	4a6e      	ldr	r2, [pc, #440]	; (8005988 <pmTask+0x1dc>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 80057d2:	2001      	movs	r0, #1
 80057d4:	f7ff ff3c 	bl	8005650 <pmSetChargeState>
  systemWaitStart();
 80057d8:	f000 fa82 	bl	8005ce0 <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 80057dc:	2064      	movs	r0, #100	; 0x64
 80057de:	f01b f93f 	bl	8020a60 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 80057e2:	f01b fafb 	bl	8020ddc <xTaskGetTickCount>
 80057e6:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 80057e8:	f7ff ffb8 	bl	800575c <pmMeasureExtBatteryVoltage>
 80057ec:	eef0 7a40 	vmov.f32	s15, s0
 80057f0:	4b66      	ldr	r3, [pc, #408]	; (800598c <pmTask+0x1e0>)
 80057f2:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 80057f6:	4b65      	ldr	r3, [pc, #404]	; (800598c <pmTask+0x1e0>)
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005990 <pmTask+0x1e4>
 8005800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005808:	ee17 3a90 	vmov	r3, s15
 800580c:	b29a      	uxth	r2, r3
 800580e:	4b61      	ldr	r3, [pc, #388]	; (8005994 <pmTask+0x1e8>)
 8005810:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 8005812:	f7ff ff7b 	bl	800570c <pmMeasureExtBatteryCurrent>
 8005816:	eef0 7a40 	vmov.f32	s15, s0
 800581a:	4b5f      	ldr	r3, [pc, #380]	; (8005998 <pmTask+0x1ec>)
 800581c:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 8005820:	f7ff fea6 	bl	8005570 <pmGetBatteryVoltage>
 8005824:	eef0 7a40 	vmov.f32	s15, s0
 8005828:	eeb0 0a67 	vmov.f32	s0, s15
 800582c:	f7ff fe66 	bl	80054fc <pmBatteryChargeFromVoltage>
 8005830:	4603      	mov	r3, r0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	0092      	lsls	r2, r2, #2
 8005838:	4413      	add	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b57      	ldr	r3, [pc, #348]	; (800599c <pmTask+0x1f0>)
 8005840:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 8005842:	f7ff fe95 	bl	8005570 <pmGetBatteryVoltage>
 8005846:	eeb0 7a40 	vmov.f32	s14, s0
 800584a:	4b55      	ldr	r3, [pc, #340]	; (80059a0 <pmTask+0x1f4>)
 800584c:	edd3 7a00 	vldr	s15, [r3]
 8005850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005858:	dd02      	ble.n	8005860 <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 800585a:	4a4a      	ldr	r2, [pc, #296]	; (8005984 <pmTask+0x1d8>)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 8005860:	f7ff fe86 	bl	8005570 <pmGetBatteryVoltage>
 8005864:	eeb0 7a40 	vmov.f32	s14, s0
 8005868:	4b4e      	ldr	r3, [pc, #312]	; (80059a4 <pmTask+0x1f8>)
 800586a:	edd3 7a00 	vldr	s15, [r3]
 800586e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005876:	dd02      	ble.n	800587e <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 8005878:	4a43      	ldr	r2, [pc, #268]	; (8005988 <pmTask+0x1dc>)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 800587e:	f7ff fef3 	bl	8005668 <pmUpdateState>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <pmTask+0x1fc>)
 8005888:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <pmTask+0x1fc>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	7dfa      	ldrb	r2, [r7, #23]
 8005890:	429a      	cmp	r2, r3
 8005892:	d03b      	beq.n	800590c <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 8005894:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <pmTask+0x1fc>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d833      	bhi.n	8005904 <pmTask+0x158>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <pmTask+0xf8>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058f1 	.word	0x080058f1
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	080058b5 	.word	0x080058b5
 80058b0:	080058e3 	.word	0x080058e3
      {
        case charged:
          ledseqStop(&seq_charging);
 80058b4:	483d      	ldr	r0, [pc, #244]	; (80059ac <pmTask+0x200>)
 80058b6:	f7ff fa9f 	bl	8004df8 <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 80058ba:	483d      	ldr	r0, [pc, #244]	; (80059b0 <pmTask+0x204>)
 80058bc:	f7ff fa40 	bl	8004d40 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 80058c0:	2004      	movs	r0, #4
 80058c2:	f000 f879 	bl	80059b8 <soundSetEffect>
          break;
 80058c6:	e01e      	b.n	8005906 <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 80058c8:	483a      	ldr	r0, [pc, #232]	; (80059b4 <pmTask+0x208>)
 80058ca:	f7ff fa95 	bl	8004df8 <ledseqStop>
          ledseqStop(&seq_charged);
 80058ce:	4838      	ldr	r0, [pc, #224]	; (80059b0 <pmTask+0x204>)
 80058d0:	f7ff fa92 	bl	8004df8 <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 80058d4:	4835      	ldr	r0, [pc, #212]	; (80059ac <pmTask+0x200>)
 80058d6:	f7ff fa33 	bl	8004d40 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 80058da:	2003      	movs	r0, #3
 80058dc:	f000 f86c 	bl	80059b8 <soundSetEffect>
          break;
 80058e0:	e011      	b.n	8005906 <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 80058e2:	4834      	ldr	r0, [pc, #208]	; (80059b4 <pmTask+0x208>)
 80058e4:	f7ff fa2c 	bl	8004d40 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 80058e8:	2005      	movs	r0, #5
 80058ea:	f000 f865 	bl	80059b8 <soundSetEffect>
          break;
 80058ee:	e00a      	b.n	8005906 <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 80058f0:	482e      	ldr	r0, [pc, #184]	; (80059ac <pmTask+0x200>)
 80058f2:	f7ff fa25 	bl	8004d40 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 80058f6:	482e      	ldr	r0, [pc, #184]	; (80059b0 <pmTask+0x204>)
 80058f8:	f7ff fa06 	bl	8004d08 <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 80058fc:	2002      	movs	r0, #2
 80058fe:	f000 f85b 	bl	80059b8 <soundSetEffect>
          break;
 8005902:	e000      	b.n	8005906 <pmTask+0x15a>
        default:
          break;
 8005904:	bf00      	nop
      }
      pmStateOld = pmState;
 8005906:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <pmTask+0x1fc>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 800590c:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <pmTask+0x1fc>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d832      	bhi.n	800597a <pmTask+0x1ce>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <pmTask+0x170>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005975 	.word	0x08005975
 8005920:	0800592d 	.word	0x0800592d
 8005924:	0800597b 	.word	0x0800597b
 8005928:	0800595b 	.word	0x0800595b
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 800592c:	f7ff fe20 	bl	8005570 <pmGetBatteryVoltage>
 8005930:	eef0 7a40 	vmov.f32	s15, s0
 8005934:	eeb0 0a67 	vmov.f32	s0, s15
 8005938:	f7ff fde0 	bl	80054fc <pmBatteryChargeFromVoltage>
 800593c:	ee07 0a90 	vmov	s15, r0
 8005940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005944:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800594c:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 8005950:	ed97 0a02 	vldr	s0, [r7, #8]
 8005954:	f7ff fa28 	bl	8004da8 <ledseqSetChargeLevel>
        }
        break;
 8005958:	e012      	b.n	8005980 <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <pmTask+0x1dc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d907      	bls.n	800597e <pmTask+0x1d2>
          {
            pmSystemShutdown();
 800596e:	f7ff fdbd 	bl	80054ec <pmSystemShutdown>
          }
        }
        break;
 8005972:	e004      	b.n	800597e <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 8005974:	f7ff fdba 	bl	80054ec <pmSystemShutdown>
          }
        }
        break;
 8005978:	e002      	b.n	8005980 <pmTask+0x1d4>
      default:
        break;
 800597a:	bf00      	nop
 800597c:	e72e      	b.n	80057dc <pmTask+0x30>
        break;
 800597e:	bf00      	nop
    vTaskDelay(100);
 8005980:	e72c      	b.n	80057dc <pmTask+0x30>
 8005982:	bf00      	nop
 8005984:	20008448 	.word	0x20008448
 8005988:	2000844c 	.word	0x2000844c
 800598c:	20008430 	.word	0x20008430
 8005990:	447a0000 	.word	0x447a0000
 8005994:	20008434 	.word	0x20008434
 8005998:	2000843c 	.word	0x2000843c
 800599c:	2000845d 	.word	0x2000845d
 80059a0:	200002b8 	.word	0x200002b8
 80059a4:	200002b4 	.word	0x200002b4
 80059a8:	20008451 	.word	0x20008451
 80059ac:	200001f0 	.word	0x200001f0
 80059b0:	200001c8 	.word	0x200001c8
 80059b4:	200000b0 	.word	0x200000b0

080059b8 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <soundSetEffect+0x1c>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20008684 	.word	0x20008684

080059d8 <storageStore>:

  return pass;
}

bool storageStore(const char* key, const void* buffer, size_t length)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <storageStore+0x48>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f083 0301 	eor.w	r3, r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <storageStore+0x1e>
    return false;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e010      	b.n	8005a18 <storageStore+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <storageStore+0x4c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059fe:	4618      	mov	r0, r3
 8005a00:	f01a fafe 	bl	8020000 <xQueueSemaphoreTake>

//  bool result = kveStore(&kve, key, buffer, length);

  bool result = true;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]

  xSemaphoreGive(storageMutex);
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <storageStore+0x4c>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	f01a f873 	bl	801fafc <xQueueGenericSend>

  return result;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20008690 	.word	0x20008690
 8005a24:	2000868c 	.word	0x2000868c

08005a28 <storageForeach>:


bool storageForeach(const char *prefix, storageFunc_t func)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
   if (!isInit) {
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <storageForeach+0x48>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f083 0301 	eor.w	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <storageForeach+0x1c>
    return 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e010      	b.n	8005a66 <storageForeach+0x3e>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <storageForeach+0x4c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f01a fad7 	bl	8020000 <xQueueSemaphoreTake>

//  bool success = kveForeach(&kve, prefix, func);

  bool success = true;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <storageForeach+0x4c>)
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f01a f84c 	bl	801fafc <xQueueGenericSend>

  return success;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20008690 	.word	0x20008690
 8005a74:	2000868c 	.word	0x2000868c

08005a78 <storageFetch>:

size_t storageFetch(const char *key, void* buffer, size_t length)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <storageFetch+0x48>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f083 0301 	eor.w	r3, r3, #1
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <storageFetch+0x1e>
    return 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e010      	b.n	8005ab8 <storageFetch+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <storageFetch+0x4c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f01a faae 	bl	8020000 <xQueueSemaphoreTake>

//  size_t result = kveFetch(&kve, key, buffer, length);


  size_t result = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]

  xSemaphoreGive(storageMutex);
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <storageFetch+0x4c>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f01a f823 	bl	801fafc <xQueueGenericSend>

  return result;
 8005ab6:	697b      	ldr	r3, [r7, #20]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20008690 	.word	0x20008690
 8005ac4:	2000868c 	.word	0x2000868c

08005ac8 <storageDelete>:

bool storageDelete(const char* key)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  if (!isInit) {
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <storageDelete+0x44>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f083 0301 	eor.w	r3, r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <storageDelete+0x1a>
    return false;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e010      	b.n	8005b04 <storageDelete+0x3c>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <storageDelete+0x48>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aea:	4618      	mov	r0, r3
 8005aec:	f01a fa88 	bl	8020000 <xQueueSemaphoreTake>

//  bool result = kveDelete(&kve, key);

  bool result = true;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <storageDelete+0x48>)
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	2200      	movs	r2, #0
 8005afc:	2100      	movs	r1, #0
 8005afe:	f019 fffd 	bl	801fafc <xQueueGenericSend>

  return result;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20008690 	.word	0x20008690
 8005b10:	2000868c 	.word	0x2000868c

08005b14 <storageReformat>:

bool storageReformat() {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Reformatting storage ...\n");
 8005b1a:	4917      	ldr	r1, [pc, #92]	; (8005b78 <storageReformat+0x64>)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f00c f9c1 	bl	8011ea4 <SEGGER_RTT_printf>

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005b22:	4b16      	ldr	r3, [pc, #88]	; (8005b7c <storageReformat+0x68>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f01a fa68 	bl	8020000 <xQueueSemaphoreTake>

//  kveFormat(&kve);
//  bool pass = kveCheck(&kve);

  bool pass = true;
 8005b30:	2301      	movs	r3, #1
 8005b32:	71fb      	strb	r3, [r7, #7]

  xSemaphoreGive(storageMutex);
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <storageReformat+0x68>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f019 ffdd 	bl	801fafc <xQueueGenericSend>

  DEBUG_PRINT("Storage check %s.\n", pass?"[OK]":"[FAIL]");
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <storageReformat+0x38>
 8005b48:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <storageReformat+0x6c>)
 8005b4a:	e000      	b.n	8005b4e <storageReformat+0x3a>
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <storageReformat+0x70>)
 8005b4e:	461a      	mov	r2, r3
 8005b50:	490d      	ldr	r1, [pc, #52]	; (8005b88 <storageReformat+0x74>)
 8005b52:	2000      	movs	r0, #0
 8005b54:	f00c f9a6 	bl	8011ea4 <SEGGER_RTT_printf>

  if (pass == false) {
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <storageReformat+0x58>
    DEBUG_PRINT("Error: Cannot format storage!\n");
 8005b64:	4909      	ldr	r1, [pc, #36]	; (8005b8c <storageReformat+0x78>)
 8005b66:	2000      	movs	r0, #0
 8005b68:	f00c f99c 	bl	8011ea4 <SEGGER_RTT_printf>
  }

  return pass;
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	0802b4b0 	.word	0x0802b4b0
 8005b7c:	2000868c 	.word	0x2000868c
 8005b80:	0802b48c 	.word	0x0802b48c
 8005b84:	0802b494 	.word	0x0802b494
 8005b88:	0802b49c 	.word	0x0802b49c
 8005b8c:	0802b4cc 	.word	0x0802b4cc

08005b90 <storagePrintStats>:

void storagePrintStats()
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Efficiency: Data: %d Bytes (%d%%), Keys: %d Bytes (%d%%), Metadata: %d Bytes (%d%%)\n",
    stats.dataSize, (stats.dataSize*100)/stats.totalSize,
    stats.keySize, (stats.keySize*100)/stats.totalSize,
    stats.metadataSize, (stats.metadataSize*100)/stats.totalSize);
    */
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <printStats>:

static bool storageStats;

static void printStats(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  if (storageStats) {
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <printStats+0x1c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <printStats+0x16>
    storagePrintStats();
 8005bac:	f7ff fff0 	bl	8005b90 <storagePrintStats>

    storageStats = false;
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <printStats+0x1c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20008691 	.word	0x20008691

08005bc0 <doReformat>:

static bool reformatValue;

static void doReformat(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  if (reformatValue) {
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <doReformat+0x14>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <doReformat+0x10>
    storageReformat();
 8005bcc:	f7ff ffa2 	bl	8005b14 <storageReformat>
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20008692 	.word	0x20008692

08005bd8 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8005bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be2:	461a      	mov	r2, r3
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <systemLaunch+0x30>)
 8005be6:	9302      	str	r3, [sp, #8]
 8005be8:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <systemLaunch+0x34>)
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	2302      	movs	r3, #2
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4907      	ldr	r1, [pc, #28]	; (8005c10 <systemLaunch+0x38>)
 8005bf4:	4807      	ldr	r0, [pc, #28]	; (8005c14 <systemLaunch+0x3c>)
 8005bf6:	f01a fd7b 	bl	80206f0 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8005bfa:	4907      	ldr	r1, [pc, #28]	; (8005c18 <systemLaunch+0x40>)
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f00c f951 	bl	8011ea4 <SEGGER_RTT_printf>

}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	2000283c 	.word	0x2000283c
 8005c0c:	200086ac 	.word	0x200086ac
 8005c10:	0802b520 	.word	0x0802b520
 8005c14:	08005c1d 	.word	0x08005c1d
 8005c18:	0802b528 	.word	0x0802b528

08005c1c <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  bool pass = true;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]


  uint32_t ld = SysTick->LOAD;
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <systemTask+0xa0>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]
  time1 = DWT->CYCCNT;
 8005c2e:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <systemTask+0xa4>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <systemTask+0xa8>)
 8005c34:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8005c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c3a:	f010 f8b7 	bl	8015dac <delay_us>
  time2 = DWT->CYCCNT;
 8005c3e:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <systemTask+0xa4>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <systemTask+0xac>)
 8005c44:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(time2-time1)/CLOCK_PER_USEC);
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <systemTask+0xac>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <systemTask+0xa8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <systemTask+0xb0>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	461a      	mov	r2, r3
 8005c5a:	491d      	ldr	r1, [pc, #116]	; (8005cd0 <systemTask+0xb4>)
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f00c f921 	bl	8011ea4 <SEGGER_RTT_printf>


  ledInit();
 8005c62:	f7fe fee5 	bl	8004a30 <ledInit>
  ledSet(CHG_LED, SET);
 8005c66:	2101      	movs	r1, #1
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f7fe ff53 	bl	8004b14 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8005c6e:	f00f f8d3 	bl	8014e18 <queueMonitorInit>

  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8005c72:	f7fe fd2f 	bl	80046d4 <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 8005c76:	f000 fc73 	bl	8006560 <passthroughInit>

  systemInit();
 8005c7a:	f000 f853 	bl	8005d24 <systemInit>
  DEBUG_PRINT("System drivers are Initialized!\n");
 8005c7e:	4915      	ldr	r1, [pc, #84]	; (8005cd4 <systemTask+0xb8>)
 8005c80:	2000      	movs	r0, #0
 8005c82:	f00c f90f 	bl	8011ea4 <SEGGER_RTT_printf>



  commInit();
 8005c86:	f7fb fa59 	bl	800113c <commInit>
  DEBUG_PRINT("System communications are Initialized!\n");
 8005c8a:	4913      	ldr	r1, [pc, #76]	; (8005cd8 <systemTask+0xbc>)
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f00c f909 	bl	8011ea4 <SEGGER_RTT_printf>

  commanderInit();
 8005c92:	f000 fcd9 	bl	8006648 <commanderInit>
  DEBUG_PRINT("System commander are Initialized!\n");
 8005c96:	4911      	ldr	r1, [pc, #68]	; (8005cdc <systemTask+0xc0>)
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f00c f903 	bl	8011ea4 <SEGGER_RTT_printf>


  StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]

  #ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE
  estimatorKalmanTaskInit();
 8005ca2:	f001 ff61 	bl	8007b68 <estimatorKalmanTaskInit>

  #ifdef CONFIG_ESTIMATOR_UKF_ENABLE
  errorEstimatorUkfTaskInit();
  #endif

  uartslkEnableIncoming();
 8005ca6:	f000 f9df 	bl	8006068 <uartslkEnableIncoming>

  memInit();
 8005caa:	f7ff f9e9 	bl	8005080 <memInit>
  deckInit();
 8005cae:	f000 fda5 	bl	80067fc <deckInit>
    vTaskDelay(portMAX_DELAY);


    */

}
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	e000e010 	.word	0xe000e010
 8005cc0:	e0001000 	.word	0xe0001000
 8005cc4:	200086a4 	.word	0x200086a4
 8005cc8:	200086a8 	.word	0x200086a8
 8005ccc:	38e38e39 	.word	0x38e38e39
 8005cd0:	0802b548 	.word	0x0802b548
 8005cd4:	0802b558 	.word	0x0802b558
 8005cd8:	0802b57c 	.word	0x0802b57c
 8005cdc:	0802b5a4 	.word	0x0802b5a4

08005ce0 <systemWaitStart>:



void systemWaitStart(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8005ce4:	e002      	b.n	8005cec <systemWaitStart+0xc>
    vTaskDelay(2);
 8005ce6:	2002      	movs	r0, #2
 8005ce8:	f01a feba 	bl	8020a60 <vTaskDelay>
  while(!isInit)
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <systemWaitStart+0x3c>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f5      	bne.n	8005ce6 <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <systemWaitStart+0x40>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d02:	4618      	mov	r0, r3
 8005d04:	f01a f97c 	bl	8020000 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <systemWaitStart+0x40>)
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	f019 fef3 	bl	801fafc <xQueueGenericSend>
}
 8005d16:	bf00      	nop
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20008693 	.word	0x20008693
 8005d20:	20008aac 	.word	0x20008aac

08005d24 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af02      	add	r7, sp, #8
  if(isInit)
 8005d2a:	4b46      	ldr	r3, [pc, #280]	; (8005e44 <systemInit+0x120>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f040 8085 	bne.w	8005e3e <systemInit+0x11a>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8005d34:	4944      	ldr	r1, [pc, #272]	; (8005e48 <systemInit+0x124>)
 8005d36:	2001      	movs	r0, #1
 8005d38:	f019 fec5 	bl	801fac6 <xQueueCreateMutexStatic>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a43      	ldr	r2, [pc, #268]	; (8005e4c <systemInit+0x128>)
 8005d40:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8005d42:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <systemInit+0x128>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f01a f958 	bl	8020000 <xQueueSemaphoreTake>

  usblinkInit();
 8005d50:	f000 fbb6 	bl	80064c0 <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8005d54:	493e      	ldr	r1, [pc, #248]	; (8005e50 <systemInit+0x12c>)
 8005d56:	2000      	movs	r0, #0
 8005d58:	f00c f8a4 	bl	8011ea4 <SEGGER_RTT_printf>

  sysLoadInit();
 8005d5c:	f00f f9d2 	bl	8015104 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8005d60:	493c      	ldr	r1, [pc, #240]	; (8005e54 <systemInit+0x130>)
 8005d62:	2000      	movs	r0, #0
 8005d64:	f00c f89e 	bl	8011ea4 <SEGGER_RTT_printf>
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
  crtpInit();
 8005d68:	f7fb fa1c 	bl	80011a4 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8005d6c:	493a      	ldr	r1, [pc, #232]	; (8005e58 <systemInit+0x134>)
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f00c f898 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8005d74:	4939      	ldr	r1, [pc, #228]	; (8005e5c <systemInit+0x138>)
 8005d76:	2000      	movs	r0, #0
 8005d78:	f00c f894 	bl	8011ea4 <SEGGER_RTT_printf>

  consoleInit();
 8005d7c:	f00c f99c 	bl	80120b8 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8005d80:	f00b f9f0 	bl	8011164 <platformConfigGetDeviceTypeName>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4935      	ldr	r1, [pc, #212]	; (8005e60 <systemInit+0x13c>)
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f00c f88a 	bl	8011ea4 <SEGGER_RTT_printf>

  if (V_PRODUCTION_RELEASE) {
 8005d90:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <systemInit+0x140>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <systemInit+0x84>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8005d98:	4b33      	ldr	r3, [pc, #204]	; (8005e68 <systemInit+0x144>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4933      	ldr	r1, [pc, #204]	; (8005e6c <systemInit+0x148>)
 8005da0:	2000      	movs	r0, #0
 8005da2:	f00c f87f 	bl	8011ea4 <SEGGER_RTT_printf>
 8005da6:	e014      	b.n	8005dd2 <systemInit+0xae>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8005da8:	4b31      	ldr	r3, [pc, #196]	; (8005e70 <systemInit+0x14c>)
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <systemInit+0x150>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	4b2d      	ldr	r3, [pc, #180]	; (8005e68 <systemInit+0x144>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a30      	ldr	r2, [pc, #192]	; (8005e78 <systemInit+0x154>)
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d001      	beq.n	8005dc0 <systemInit+0x9c>
 8005dbc:	4a2f      	ldr	r2, [pc, #188]	; (8005e7c <systemInit+0x158>)
 8005dbe:	e000      	b.n	8005dc2 <systemInit+0x9e>
 8005dc0:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <systemInit+0x15c>)
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	460a      	mov	r2, r1
 8005dca:	492e      	ldr	r1, [pc, #184]	; (8005e84 <systemInit+0x160>)
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f00c f869 	bl	8011ea4 <SEGGER_RTT_printf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8005dd2:	4b2d      	ldr	r3, [pc, #180]	; (8005e88 <systemInit+0x164>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <systemInit+0x168>)
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <systemInit+0x16c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	482d      	ldr	r0, [pc, #180]	; (8005e94 <systemInit+0x170>)
 8005de0:	f9b0 0000 	ldrsh.w	r0, [r0]
 8005de4:	9001      	str	r0, [sp, #4]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	460b      	mov	r3, r1
 8005dea:	492b      	ldr	r1, [pc, #172]	; (8005e98 <systemInit+0x174>)
 8005dec:	2000      	movs	r0, #0
 8005dee:	f00c f859 	bl	8011ea4 <SEGGER_RTT_printf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 8005df2:	f00f fb51 	bl	8015498 <workerInit>
  ledseqInit();
 8005df6:	f7fe fecf 	bl	8004b98 <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 8005dfa:	4928      	ldr	r1, [pc, #160]	; (8005e9c <systemInit+0x178>)
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f00c f851 	bl	8011ea4 <SEGGER_RTT_printf>


  pmInit();
 8005e02:	f7ff faed 	bl	80053e0 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 8005e06:	4926      	ldr	r1, [pc, #152]	; (8005ea0 <systemInit+0x17c>)
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f00c f84b 	bl	8011ea4 <SEGGER_RTT_printf>

  buzzerInit();
 8005e0e:	f7fe fd35 	bl	800487c <buzzerInit>
  buzzerOn(3000);
  HAL_Delay(2);
  buzzerOn(2000);
  HAL_Delay(2);
  */
  buzzerOff();
 8005e12:	f7fe fd43 	bl	800489c <buzzerOff>

  peerLocalizationInit();
 8005e16:	f7fb f8a5 	bl	8000f64 <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 8005e1a:	4922      	ldr	r1, [pc, #136]	; (8005ea4 <systemInit+0x180>)
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f00c f841 	bl	8011ea4 <SEGGER_RTT_printf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 8005e22:	4921      	ldr	r1, [pc, #132]	; (8005ea8 <systemInit+0x184>)
 8005e24:	2000      	movs	r0, #0
 8005e26:	f00c f83d 	bl	8011ea4 <SEGGER_RTT_printf>
  appInit();
 8005e2a:	f7fb f93f 	bl	80010ac <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8005e2e:	491f      	ldr	r1, [pc, #124]	; (8005eac <systemInit+0x188>)
 8005e30:	2000      	movs	r0, #0
 8005e32:	f00c f837 	bl	8011ea4 <SEGGER_RTT_printf>
#endif

  isInit = true;
 8005e36:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <systemInit+0x120>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e000      	b.n	8005e40 <systemInit+0x11c>
    return;
 8005e3e:	bf00      	nop
}
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20008693 	.word	0x20008693
 8005e48:	20008ab0 	.word	0x20008ab0
 8005e4c:	20008aac 	.word	0x20008aac
 8005e50:	0802b5c8 	.word	0x0802b5c8
 8005e54:	0802b5e8 	.word	0x0802b5e8
 8005e58:	0802b60c 	.word	0x0802b60c
 8005e5c:	0802b62c 	.word	0x0802b62c
 8005e60:	0802b64c 	.word	0x0802b64c
 8005e64:	0802f091 	.word	0x0802f091
 8005e68:	20000ef4 	.word	0x20000ef4
 8005e6c:	0802b664 	.word	0x0802b664
 8005e70:	20000eec 	.word	0x20000eec
 8005e74:	20000ef0 	.word	0x20000ef0
 8005e78:	0802f090 	.word	0x0802f090
 8005e7c:	0802b67c 	.word	0x0802b67c
 8005e80:	0802b688 	.word	0x0802b688
 8005e84:	0802b690 	.word	0x0802b690
 8005e88:	1fff7a18 	.word	0x1fff7a18
 8005e8c:	1fff7a14 	.word	0x1fff7a14
 8005e90:	1fff7a10 	.word	0x1fff7a10
 8005e94:	1fff7a22 	.word	0x1fff7a22
 8005e98:	0802b6a8 	.word	0x0802b6a8
 8005e9c:	0802b6d8 	.word	0x0802b6d8
 8005ea0:	0802b6fc 	.word	0x0802b6fc
 8005ea4:	0802b718 	.word	0x0802b718
 8005ea8:	0802b73c 	.word	0x0802b73c
 8005eac:	0802b778 	.word	0x0802b778

08005eb0 <systemSyslinkReceive>:

void systemSyslinkReceive(SyslinkPacket *slp)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_SYS_NRF_VERSION)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d114      	bne.n	8005eea <systemSyslinkReceive+0x3a>
  {
    size_t len = slp->length - 1;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

    if (sizeof(nrf_version) - 1 <=  len) {
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b0e      	cmp	r3, #14
 8005ecc:	d901      	bls.n	8005ed2 <systemSyslinkReceive+0x22>
      len = sizeof(nrf_version) - 1;
 8005ece:	230f      	movs	r3, #15
 8005ed0:	60fb      	str	r3, [r7, #12]
    }
    memcpy(&nrf_version, &slp->data[0], len );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4806      	ldr	r0, [pc, #24]	; (8005ef4 <systemSyslinkReceive+0x44>)
 8005edc:	f01e ff4b 	bl	8024d76 <memcpy>
    DEBUG_PRINT("NRF51 version: %s\n", nrf_version);
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <systemSyslinkReceive+0x44>)
 8005ee2:	4905      	ldr	r1, [pc, #20]	; (8005ef8 <systemSyslinkReceive+0x48>)
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f00b ffdd 	bl	8011ea4 <SEGGER_RTT_printf>
  }
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20008694 	.word	0x20008694
 8005ef8:	0802b794 	.word	0x0802b794

08005efc <uartslkDmaInit>:
/**
  * Configures the UART DMA. Mainly used for FreeRTOS trace
  * data transfer.
  */
void uartslkDmaInit(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0

#ifdef CONFIG_SYSLINK_DMA

	HAL_UART_MspInit(&huart6);
 8005f00:	4803      	ldr	r0, [pc, #12]	; (8005f10 <uartslkDmaInit+0x14>)
 8005f02:	f010 f9b9 	bl	8016278 <HAL_UART_MspInit>

#endif

isUartDmaInitialized = true;
 8005f06:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <uartslkDmaInit+0x18>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]

}
 8005f0c:	bf00      	nop
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	2000d340 	.word	0x2000d340
 8005f14:	20008bf4 	.word	0x20008bf4

08005f18 <uartslkInit>:

void uartslkInit(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af02      	add	r7, sp, #8
  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8005f1e:	2303      	movs	r3, #3
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	4b42      	ldr	r3, [pc, #264]	; (800602c <uartslkInit+0x114>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f019 fcd1 	bl	801f8d0 <xQueueGenericCreateStatic>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4a3f      	ldr	r2, [pc, #252]	; (8006030 <uartslkInit+0x118>)
 8005f32:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8005f34:	2303      	movs	r3, #3
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <uartslkInit+0x11c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	2001      	movs	r0, #1
 8005f40:	f019 fcc6 	bl	801f8d0 <xQueueGenericCreateStatic>
 8005f44:	4603      	mov	r3, r0
 8005f46:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <uartslkInit+0x120>)
 8005f48:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8005f4a:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <uartslkInit+0x120>)
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2200      	movs	r2, #0
 8005f52:	2100      	movs	r1, #0
 8005f54:	f019 fdd2 	bl	801fafc <xQueueGenericSend>

  syslinkPacketDelivery = STATIC_MEM_QUEUE_CREATE(syslinkPacketDelivery);
 8005f58:	2308      	movs	r3, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	2342      	movs	r3, #66	; 0x42
 8005f5e:	4619      	mov	r1, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	4b35      	ldr	r3, [pc, #212]	; (800603c <uartslkInit+0x124>)
 8005f66:	4a36      	ldr	r2, [pc, #216]	; (8006040 <uartslkInit+0x128>)
 8005f68:	f019 fcb2 	bl	801f8d0 <xQueueGenericCreateStatic>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4a35      	ldr	r2, [pc, #212]	; (8006044 <uartslkInit+0x12c>)
 8005f70:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(syslinkPacketDelivery);
 8005f72:	4b34      	ldr	r3, [pc, #208]	; (8006044 <uartslkInit+0x12c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a34      	ldr	r2, [pc, #208]	; (8006048 <uartslkInit+0x130>)
 8005f78:	4934      	ldr	r1, [pc, #208]	; (800604c <uartslkInit+0x134>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f00e ff94 	bl	8014ea8 <qmRegisterQueue>


  GPIO_InitTypeDef GPIO_InitStruct;
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f80:	2300      	movs	r3, #0
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4b32      	ldr	r3, [pc, #200]	; (8006050 <uartslkInit+0x138>)
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	4a31      	ldr	r2, [pc, #196]	; (8006050 <uartslkInit+0x138>)
 8005f8a:	f043 0304 	orr.w	r3, r3, #4
 8005f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f90:	4b2f      	ldr	r3, [pc, #188]	; (8006050 <uartslkInit+0x138>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2140      	movs	r1, #64	; 0x40
 8005fa0:	482c      	ldr	r0, [pc, #176]	; (8006054 <uartslkInit+0x13c>)
 8005fa2:	f011 ff63 	bl	8017e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	482a      	ldr	r0, [pc, #168]	; (8006054 <uartslkInit+0x13c>)
 8005fac:	f011 ff5e 	bl	8017e6c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8005fb0:	23c0      	movs	r3, #192	; 0xc0
 8005fb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4823      	ldr	r0, [pc, #140]	; (8006054 <uartslkInit+0x13c>)
 8005fc6:	f011 fdb5 	bl	8017b34 <HAL_GPIO_Init>
  huart6.Init.BaudRate = 2000000;
  huart6.Init.Mode = UART_MODE_TX;

#else

  huart6.Instance = USART6;
 8005fca:	4b23      	ldr	r3, [pc, #140]	; (8006058 <uartslkInit+0x140>)
 8005fcc:	4a23      	ldr	r2, [pc, #140]	; (800605c <uartslkInit+0x144>)
 8005fce:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 8005fd0:	4b21      	ldr	r3, [pc, #132]	; (8006058 <uartslkInit+0x140>)
 8005fd2:	4a23      	ldr	r2, [pc, #140]	; (8006060 <uartslkInit+0x148>)
 8005fd4:	605a      	str	r2, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <uartslkInit+0x140>)
 8005fd8:	220c      	movs	r2, #12
 8005fda:	615a      	str	r2, [r3, #20]

#endif

  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005fdc:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <uartslkInit+0x140>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <uartslkInit+0x140>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <uartslkInit+0x140>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fee:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <uartslkInit+0x140>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ff4:	4b18      	ldr	r3, [pc, #96]	; (8006058 <uartslkInit+0x140>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	61da      	str	r2, [r3, #28]


  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005ffa:	4817      	ldr	r0, [pc, #92]	; (8006058 <uartslkInit+0x140>)
 8005ffc:	f014 ff98 	bl	801af30 <HAL_UART_Init>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <uartslkInit+0xf2>
  {
    Error_Handler();
 8006006:	f00f fefd 	bl	8015e04 <Error_Handler>
  }


  uartslkDmaInit();
 800600a:	f7ff ff77 	bl	8005efc <uartslkDmaInit>

  // Setting up TXEN pin (NRF flow control)
  // 향후 외부핀 PA4 연결 필요

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <uartslkInit+0x140>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <uartslkInit+0x140>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0220 	orr.w	r2, r2, #32
 800601c:	60da      	str	r2, [r3, #12]

  isInit = true;
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <uartslkInit+0x14c>)
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20008b08 	.word	0x20008b08
 8006030:	20008b04 	.word	0x20008b04
 8006034:	20008b5c 	.word	0x20008b5c
 8006038:	20008b58 	.word	0x20008b58
 800603c:	20002b04 	.word	0x20002b04
 8006040:	200028f4 	.word	0x200028f4
 8006044:	20008bac 	.word	0x20008bac
 8006048:	0802b7a8 	.word	0x0802b7a8
 800604c:	0802b7c0 	.word	0x0802b7c0
 8006050:	40023800 	.word	0x40023800
 8006054:	40020800 	.word	0x40020800
 8006058:	2000d340 	.word	0x2000d340
 800605c:	40011400 	.word	0x40011400
 8006060:	000f4240 	.word	0x000f4240
 8006064:	20008b00 	.word	0x20008b00

08006068 <uartslkEnableIncoming>:
  rxState = waitForFirstStart;
  NVIC_EnableIRQ(UARTSLK_IRQ);
}

void uartslkEnableIncoming()
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  syslinkPacketDeliveryReadyToReceive = true;
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <uartslkEnableIncoming+0x14>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
}
 8006072:	bf00      	nop
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	20008bb0 	.word	0x20008bb0

08006080 <uartslkGetPacketBlocking>:

void uartslkGetPacketBlocking(SyslinkPacket* packet)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  xQueueReceive(syslinkPacketDelivery, packet, portMAX_DELAY);
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <uartslkGetPacketBlocking+0x20>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	f019 fed4 	bl	801fe40 <xQueueReceive>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20008bac 	.word	0x20008bac

080060a4 <uartslkSendDataDmaBlocking>:

    return (unsigned char)ch;
}

void uartslkSendDataDmaBlocking(uint32_t size, uint8_t* data)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  if (dmaNrfFlowControlBufferFull) {
 80060ae:	4b22      	ldr	r3, [pc, #136]	; (8006138 <uartslkSendDataDmaBlocking+0x94>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <uartslkSendDataDmaBlocking+0x1c>
    dmaSendWhileNrfBufferFull++;
 80060b6:	4b21      	ldr	r3, [pc, #132]	; (800613c <uartslkSendDataDmaBlocking+0x98>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a1f      	ldr	r2, [pc, #124]	; (800613c <uartslkSendDataDmaBlocking+0x98>)
 80060be:	6013      	str	r3, [r2, #0]
  }

  if (isUartDmaInitialized)
 80060c0:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <uartslkSendDataDmaBlocking+0x9c>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d032      	beq.n	800612e <uartslkSendDataDmaBlocking+0x8a>
  {
    xSemaphoreTake(uartBusy, portMAX_DELAY);
 80060c8:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <uartslkSendDataDmaBlocking+0xa0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060d0:	4618      	mov	r0, r3
 80060d2:	f019 ff95 	bl	8020000 <xQueueSemaphoreTake>
    // Wait for DMA to be free
    while(HAL_DMA_GetState(&hdma_usart6_tx) != HAL_DMA_STATE_READY);
 80060d6:	bf00      	nop
 80060d8:	481b      	ldr	r0, [pc, #108]	; (8006148 <uartslkSendDataDmaBlocking+0xa4>)
 80060da:	f011 fc3d 	bl	8017958 <HAL_DMA_GetState>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d1f9      	bne.n	80060d8 <uartslkSendDataDmaBlocking+0x34>

    //Copy data in DMA buffer
    memcpy(dmaTXBuffer, data, size);
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	4818      	ldr	r0, [pc, #96]	; (800614c <uartslkSendDataDmaBlocking+0xa8>)
 80060ea:	f01e fe44 	bl	8024d76 <memcpy>
    initialDMACount = (uint16_t)size;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	4b17      	ldr	r3, [pc, #92]	; (8006150 <uartslkSendDataDmaBlocking+0xac>)
 80060f4:	801a      	strh	r2, [r3, #0]

    if(HAL_UART_Transmit_DMA(&huart6, dmaTXBuffer, size)!=HAL_OK){
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	4913      	ldr	r1, [pc, #76]	; (800614c <uartslkSendDataDmaBlocking+0xa8>)
 80060fe:	4815      	ldr	r0, [pc, #84]	; (8006154 <uartslkSendDataDmaBlocking+0xb0>)
 8006100:	f014 ff66 	bl	801afd0 <HAL_UART_Transmit_DMA>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <uartslkSendDataDmaBlocking+0x6e>
    	DEBUG_PRINT("DMA transfer failed\n");
 800610a:	4913      	ldr	r1, [pc, #76]	; (8006158 <uartslkSendDataDmaBlocking+0xb4>)
 800610c:	2000      	movs	r0, #0
 800610e:	f00b fec9 	bl	8011ea4 <SEGGER_RTT_printf>
    }
    xSemaphoreTake(waitUntilSendDone, portMAX_DELAY);
 8006112:	4b12      	ldr	r3, [pc, #72]	; (800615c <uartslkSendDataDmaBlocking+0xb8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800611a:	4618      	mov	r0, r3
 800611c:	f019 ff70 	bl	8020000 <xQueueSemaphoreTake>
    xSemaphoreGive(uartBusy);
 8006120:	4b08      	ldr	r3, [pc, #32]	; (8006144 <uartslkSendDataDmaBlocking+0xa0>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	f019 fce7 	bl	801fafc <xQueueGenericSend>

  }
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20008c08 	.word	0x20008c08
 800613c:	20008c0c 	.word	0x20008c0c
 8006140:	20008bf4 	.word	0x20008bf4
 8006144:	20008b58 	.word	0x20008b58
 8006148:	2000d388 	.word	0x2000d388
 800614c:	20008bb4 	.word	0x20008bb4
 8006150:	20008bf6 	.word	0x20008bf6
 8006154:	2000d340 	.word	0x2000d340
 8006158:	0802b7e4 	.word	0x0802b7e4
 800615c:	20008b04 	.word	0x20008b04

08006160 <uartSyslinkDumpDebugProbe>:
#endif

*/


void uartSyslinkDumpDebugProbe() {
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  DEBUG_PRINT("STM dmaPausedCounter: %ld\n",dmaPausedCounter);
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <uartSyslinkDumpDebugProbe+0x50>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	4912      	ldr	r1, [pc, #72]	; (80061b4 <uartSyslinkDumpDebugProbe+0x54>)
 800616c:	2000      	movs	r0, #0
 800616e:	f00b fe99 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamPausedCounter: %ld\n", dmaTxStreamPausedCounter);
 8006172:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <uartSyslinkDumpDebugProbe+0x58>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	4910      	ldr	r1, [pc, #64]	; (80061bc <uartSyslinkDumpDebugProbe+0x5c>)
 800617a:	2000      	movs	r0, #0
 800617c:	f00b fe92 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaResumedCounter: %ld\n", dmaResumedCounter);
 8006180:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <uartSyslinkDumpDebugProbe+0x60>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	490f      	ldr	r1, [pc, #60]	; (80061c4 <uartSyslinkDumpDebugProbe+0x64>)
 8006188:	2000      	movs	r0, #0
 800618a:	f00b fe8b 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamResumedCounter: %ld\n", dmaTxStreamResumedCounter);
 800618e:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <uartSyslinkDumpDebugProbe+0x68>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	490d      	ldr	r1, [pc, #52]	; (80061cc <uartSyslinkDumpDebugProbe+0x6c>)
 8006196:	2000      	movs	r0, #0
 8006198:	f00b fe84 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaSendWhileNrfBufferFull: %ld\n", dmaSendWhileNrfBufferFull);
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <uartSyslinkDumpDebugProbe+0x70>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	490c      	ldr	r1, [pc, #48]	; (80061d4 <uartSyslinkDumpDebugProbe+0x74>)
 80061a4:	2000      	movs	r0, #0
 80061a6:	f00b fe7d 	bl	8011ea4 <SEGGER_RTT_printf>
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20008bf8 	.word	0x20008bf8
 80061b4:	0802b7fc 	.word	0x0802b7fc
 80061b8:	20008bfc 	.word	0x20008bfc
 80061bc:	0802b818 	.word	0x0802b818
 80061c0:	20008c00 	.word	0x20008c00
 80061c4:	0802b83c 	.word	0x0802b83c
 80061c8:	20008c04 	.word	0x20008c04
 80061cc:	0802b858 	.word	0x0802b858
 80061d0:	20008c0c 	.word	0x20008c0c
 80061d4:	0802b87c 	.word	0x0802b87c

080061d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db0b      	blt.n	8006202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f003 021f 	and.w	r2, r3, #31
 80061f0:	4907      	ldr	r1, [pc, #28]	; (8006210 <__NVIC_EnableIRQ+0x38>)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2001      	movs	r0, #1
 80061fa:	fa00 f202 	lsl.w	r2, r0, r2
 80061fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e100 	.word	0xe000e100

08006214 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db12      	blt.n	800624c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	f003 021f 	and.w	r2, r3, #31
 800622c:	490a      	ldr	r1, [pc, #40]	; (8006258 <__NVIC_DisableIRQ+0x44>)
 800622e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2001      	movs	r0, #1
 8006236:	fa00 f202 	lsl.w	r2, r0, r2
 800623a:	3320      	adds	r3, #32
 800623c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006240:	f3bf 8f4f 	dsb	sy
}
 8006244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006246:	f3bf 8f6f 	isb	sy
}
 800624a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	e000e100 	.word	0xe000e100

0800625c <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8006264:	bf00      	nop
 8006266:	4b11      	ldr	r3, [pc, #68]	; (80062ac <usbGetDataBlocking+0x50>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	f019 fde5 	bl	801fe40 <xQueueReceive>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d1f4      	bne.n	8006266 <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 800627c:	2043      	movs	r0, #67	; 0x43
 800627e:	f7ff ffc9 	bl	8006214 <__NVIC_DisableIRQ>
  if (rxStopped) {
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <usbGetDataBlocking+0x54>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 800628a:	2340      	movs	r3, #64	; 0x40
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <usbGetDataBlocking+0x58>)
 800628e:	2101      	movs	r1, #1
 8006290:	4809      	ldr	r0, [pc, #36]	; (80062b8 <usbGetDataBlocking+0x5c>)
 8006292:	f01d f9bd 	bl	8023610 <USBD_LL_PrepareReceive>
    rxStopped = false;
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <usbGetDataBlocking+0x54>)
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 800629c:	2043      	movs	r0, #67	; 0x43
 800629e:	f7ff ff9b 	bl	80061d8 <__NVIC_EnableIRQ>

  return true;
 80062a2:	2301      	movs	r3, #1
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20008c14 	.word	0x20008c14
 80062b0:	200002ce 	.word	0x200002ce
 80062b4:	20008c1d 	.word	0x20008c1d
 80062b8:	200114e8 	.word	0x200114e8

080062bc <usbSendData>:


static USBPacket outStage;

bool usbSendData(uint32_t size, uint8_t* data)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  outStage.size = size;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <usbSendData+0x40>)
 80062cc:	701a      	strb	r2, [r3, #0]
  memcpy(outStage.data, data, size);
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	480b      	ldr	r0, [pc, #44]	; (8006300 <usbSendData+0x44>)
 80062d4:	f01e fd4f 	bl	8024d76 <memcpy>
  // Dont' block when sending
  return (xQueueSend(usbDataTx, &outStage, M2T(100)) == pdTRUE);
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <usbSendData+0x48>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	2300      	movs	r3, #0
 80062de:	2264      	movs	r2, #100	; 0x64
 80062e0:	4906      	ldr	r1, [pc, #24]	; (80062fc <usbSendData+0x40>)
 80062e2:	f019 fc0b 	bl	801fafc <xQueueGenericSend>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20008c60 	.word	0x20008c60
 8006300:	20008c61 	.word	0x20008c61
 8006304:	20008c18 	.word	0x20008c18

08006308 <usbInit>:


void usbInit(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 800630e:	2305      	movs	r3, #5
 8006310:	4618      	mov	r0, r3
 8006312:	2341      	movs	r3, #65	; 0x41
 8006314:	4619      	mov	r1, r3
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <usbInit+0x64>)
 800631c:	4a14      	ldr	r2, [pc, #80]	; (8006370 <usbInit+0x68>)
 800631e:	f019 fad7 	bl	801f8d0 <xQueueGenericCreateStatic>
 8006322:	4603      	mov	r3, r0
 8006324:	4a13      	ldr	r2, [pc, #76]	; (8006374 <usbInit+0x6c>)
 8006326:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 8006328:	4b12      	ldr	r3, [pc, #72]	; (8006374 <usbInit+0x6c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a12      	ldr	r2, [pc, #72]	; (8006378 <usbInit+0x70>)
 800632e:	4913      	ldr	r1, [pc, #76]	; (800637c <usbInit+0x74>)
 8006330:	4618      	mov	r0, r3
 8006332:	f00e fdb9 	bl	8014ea8 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 8006336:	2301      	movs	r3, #1
 8006338:	4618      	mov	r0, r3
 800633a:	2341      	movs	r3, #65	; 0x41
 800633c:	4619      	mov	r1, r3
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <usbInit+0x78>)
 8006344:	4a0f      	ldr	r2, [pc, #60]	; (8006384 <usbInit+0x7c>)
 8006346:	f019 fac3 	bl	801f8d0 <xQueueGenericCreateStatic>
 800634a:	4603      	mov	r3, r0
 800634c:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <usbInit+0x80>)
 800634e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 8006350:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <usbInit+0x80>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a0d      	ldr	r2, [pc, #52]	; (800638c <usbInit+0x84>)
 8006356:	4909      	ldr	r1, [pc, #36]	; (800637c <usbInit+0x74>)
 8006358:	4618      	mov	r0, r3
 800635a:	f00e fda5 	bl	8014ea8 <qmRegisterQueue>

  isInit = true;
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <usbInit+0x88>)
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20002c9c 	.word	0x20002c9c
 8006370:	20002b54 	.word	0x20002b54
 8006374:	20008c14 	.word	0x20008c14
 8006378:	0802b8a0 	.word	0x0802b8a0
 800637c:	0802b8ac 	.word	0x0802b8ac
 8006380:	20002d30 	.word	0x20002d30
 8006384:	20002cec 	.word	0x20002cec
 8006388:	20008c18 	.word	0x20008c18
 800638c:	0802b8c8 	.word	0x0802b8c8
 8006390:	20008c10 	.word	0x20008c10

08006394 <usbTest>:

bool usbTest(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return isInit;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <usbTest+0x14>)
 800639a:	781b      	ldrb	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20008c10 	.word	0x20008c10

080063ac <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 80063b4:	480c      	ldr	r0, [pc, #48]	; (80063e8 <usblinkTask+0x3c>)
 80063b6:	f7ff ff51 	bl	800625c <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <usblinkTask+0x3c>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	3b01      	subs	r3, #1
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <usblinkTask+0x40>)
 80063c4:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <usblinkTask+0x3c>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	4908      	ldr	r1, [pc, #32]	; (80063f0 <usblinkTask+0x44>)
 80063ce:	4809      	ldr	r0, [pc, #36]	; (80063f4 <usblinkTask+0x48>)
 80063d0:	f01e fcd1 	bl	8024d76 <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <usblinkTask+0x4c>)
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	2300      	movs	r3, #0
 80063da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063de:	4903      	ldr	r1, [pc, #12]	; (80063ec <usblinkTask+0x40>)
 80063e0:	f019 fb8c 	bl	801fafc <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 80063e4:	e7e6      	b.n	80063b4 <usblinkTask+0x8>
 80063e6:	bf00      	nop
 80063e8:	20008ee8 	.word	0x20008ee8
 80063ec:	20008f2c 	.word	0x20008f2c
 80063f0:	20008ee9 	.word	0x20008ee9
 80063f4:	20008f2d 	.word	0x20008f2d
 80063f8:	20008ca4 	.word	0x20008ca4

080063fc <usblinkReceivePacket>:

}


static int usblinkReceivePacket(CRTPPacket *p)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <usblinkReceivePacket+0x34>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2264      	movs	r2, #100	; 0x64
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	f019 fd17 	bl	801fe40 <xQueueReceive>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d104      	bne.n	8006422 <usblinkReceivePacket+0x26>
  {
    ledseqRun(&seq_linkUp);
 8006418:	4806      	ldr	r0, [pc, #24]	; (8006434 <usblinkReceivePacket+0x38>)
 800641a:	f7fe fc75 	bl	8004d08 <ledseqRun>
    return 0;
 800641e:	2300      	movs	r3, #0
 8006420:	e001      	b.n	8006426 <usblinkReceivePacket+0x2a>
  }

  return -1;
 8006422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20008ca4 	.word	0x20008ca4
 8006434:	20000198 	.word	0x20000198

08006438 <usblinkSendPacket>:

static int usblinkSendPacket(CRTPPacket *p)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  int dataSize;

  ASSERT(p->size < SYSLINK_MTU);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b3f      	cmp	r3, #63	; 0x3f
 8006446:	d904      	bls.n	8006452 <usblinkSendPacket+0x1a>
 8006448:	2267      	movs	r2, #103	; 0x67
 800644a:	4912      	ldr	r1, [pc, #72]	; (8006494 <usblinkSendPacket+0x5c>)
 800644c:	4812      	ldr	r0, [pc, #72]	; (8006498 <usblinkSendPacket+0x60>)
 800644e:	f00b fded 	bl	801202c <assertFail>

  sendBuffer[0] = p->header;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	785a      	ldrb	r2, [r3, #1]
 8006456:	4b11      	ldr	r3, [pc, #68]	; (800649c <usblinkSendPacket+0x64>)
 8006458:	701a      	strb	r2, [r3, #0]

  if (p->size <= CRTP_MAX_DATA_SIZE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b1e      	cmp	r3, #30
 8006460:	d807      	bhi.n	8006472 <usblinkSendPacket+0x3a>
  {
    memcpy(&sendBuffer[1], p->data, p->size);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	1c99      	adds	r1, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	480c      	ldr	r0, [pc, #48]	; (80064a0 <usblinkSendPacket+0x68>)
 800646e:	f01e fc82 	bl	8024d76 <memcpy>
  }
  dataSize = p->size + 1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]


  ledseqRun(&seq_linkDown);
 800647a:	480a      	ldr	r0, [pc, #40]	; (80064a4 <usblinkSendPacket+0x6c>)
 800647c:	f7fe fc44 	bl	8004d08 <ledseqRun>

  return usbSendData(dataSize, sendBuffer);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4906      	ldr	r1, [pc, #24]	; (800649c <usblinkSendPacket+0x64>)
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff19 	bl	80062bc <usbSendData>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	0802b8d4 	.word	0x0802b8d4
 8006498:	0802b8f4 	.word	0x0802b8f4
 800649c:	20008ca8 	.word	0x20008ca8
 80064a0:	20008ca9 	.word	0x20008ca9
 80064a4:	200001a8 	.word	0x200001a8

080064a8 <usblinkSetEnable>:



static int usblinkSetEnable(bool enable)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	71fb      	strb	r3, [r7, #7]
  return 0;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <usblinkInit>:


void usblinkInit()
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af04      	add	r7, sp, #16
  if(isInit)
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <usblinkInit+0x64>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d126      	bne.n	800651c <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 80064ce:	f7ff ff1b 	bl	8006308 <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 80064d2:	2310      	movs	r3, #16
 80064d4:	4618      	mov	r0, r3
 80064d6:	2320      	movs	r3, #32
 80064d8:	4619      	mov	r1, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4b12      	ldr	r3, [pc, #72]	; (8006528 <usblinkInit+0x68>)
 80064e0:	4a12      	ldr	r2, [pc, #72]	; (800652c <usblinkInit+0x6c>)
 80064e2:	f019 f9f5 	bl	801f8d0 <xQueueGenericCreateStatic>
 80064e6:	4603      	mov	r3, r0
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <usblinkInit+0x70>)
 80064ea:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <usblinkInit+0x70>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a10      	ldr	r2, [pc, #64]	; (8006534 <usblinkInit+0x74>)
 80064f2:	4911      	ldr	r1, [pc, #68]	; (8006538 <usblinkInit+0x78>)
 80064f4:	4618      	mov	r0, r3
 80064f6:	f00e fcd7 	bl	8014ea8 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	461a      	mov	r2, r3
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <usblinkInit+0x7c>)
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <usblinkInit+0x80>)
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2303      	movs	r3, #3
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	490d      	ldr	r1, [pc, #52]	; (8006544 <usblinkInit+0x84>)
 800650e:	480e      	ldr	r0, [pc, #56]	; (8006548 <usblinkInit+0x88>)
 8006510:	f01a f8ee 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <usblinkInit+0x64>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e000      	b.n	800651e <usblinkInit+0x5e>
    return;
 800651c:	bf00      	nop
}
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20008ca1 	.word	0x20008ca1
 8006528:	20002f80 	.word	0x20002f80
 800652c:	20002d80 	.word	0x20002d80
 8006530:	20008ca4 	.word	0x20008ca4
 8006534:	0802b90c 	.word	0x0802b90c
 8006538:	0802b8d4 	.word	0x0802b8d4
 800653c:	20002fd0 	.word	0x20002fd0
 8006540:	20008ce8 	.word	0x20008ce8
 8006544:	0802b920 	.word	0x0802b920
 8006548:	080063ad 	.word	0x080063ad

0800654c <usblinkGetLink>:
{
  return isInit;
}

struct crtpLinkOperations * usblinkGetLink()
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return &usblinkOp;
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <usblinkGetLink+0x10>)
}
 8006552:	4618      	mov	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	200002d0 	.word	0x200002d0

08006560 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af04      	add	r7, sp, #16
  if(isInit)
 8006566:	4b21      	ldr	r3, [pc, #132]	; (80065ec <passthroughInit+0x8c>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d13b      	bne.n	80065e6 <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 800656e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006572:	4618      	mov	r0, r3
 8006574:	2301      	movs	r3, #1
 8006576:	4619      	mov	r1, r3
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <passthroughInit+0x90>)
 800657e:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <passthroughInit+0x94>)
 8006580:	f019 f9a6 	bl	801f8d0 <xQueueGenericCreateStatic>
 8006584:	4603      	mov	r3, r0
 8006586:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <passthroughInit+0x98>)
 8006588:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 800658a:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <passthroughInit+0x98>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <passthroughInit+0x9c>)
 8006590:	491b      	ldr	r1, [pc, #108]	; (8006600 <passthroughInit+0xa0>)
 8006592:	4618      	mov	r0, r3
 8006594:	f00e fc88 	bl	8014ea8 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8006598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659c:	4618      	mov	r0, r3
 800659e:	2301      	movs	r3, #1
 80065a0:	4619      	mov	r1, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <passthroughInit+0xa4>)
 80065a8:	4a17      	ldr	r2, [pc, #92]	; (8006608 <passthroughInit+0xa8>)
 80065aa:	f019 f991 	bl	801f8d0 <xQueueGenericCreateStatic>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4a16      	ldr	r2, [pc, #88]	; (800660c <passthroughInit+0xac>)
 80065b2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <passthroughInit+0x98>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a10      	ldr	r2, [pc, #64]	; (80065fc <passthroughInit+0x9c>)
 80065ba:	4911      	ldr	r1, [pc, #68]	; (8006600 <passthroughInit+0xa0>)
 80065bc:	4618      	mov	r0, r3
 80065be:	f00e fc73 	bl	8014ea8 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 80065c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b11      	ldr	r3, [pc, #68]	; (8006610 <passthroughInit+0xb0>)
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <passthroughInit+0xb4>)
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	2305      	movs	r3, #5
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	4910      	ldr	r1, [pc, #64]	; (8006618 <passthroughInit+0xb8>)
 80065d8:	4810      	ldr	r0, [pc, #64]	; (800661c <passthroughInit+0xbc>)
 80065da:	f01a f889 	bl	80206f0 <xTaskCreateStatic>
 80065de:	4603      	mov	r3, r0
 80065e0:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <passthroughInit+0xc0>)
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e000      	b.n	80065e8 <passthroughInit+0x88>
    return;
 80065e6:	bf00      	nop
}
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20009350 	.word	0x20009350
 80065f0:	20003340 	.word	0x20003340
 80065f4:	20003140 	.word	0x20003140
 80065f8:	20009354 	.word	0x20009354
 80065fc:	0802b928 	.word	0x0802b928
 8006600:	0802b934 	.word	0x0802b934
 8006604:	20003590 	.word	0x20003590
 8006608:	20003390 	.word	0x20003390
 800660c:	20009358 	.word	0x20009358
 8006610:	20003088 	.word	0x20003088
 8006614:	20008f50 	.word	0x20008f50
 8006618:	0802b960 	.word	0x0802b960
 800661c:	08006625 	.word	0x08006625
 8006620:	20008f4c 	.word	0x20008f4c

08006624 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 800662c:	f7ff fb58 	bl	8005ce0 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006634:	2001      	movs	r0, #1
 8006636:	f01b fa83 	bl	8021b40 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 800663a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800663e:	2000      	movs	r0, #0
 8006640:	f01b faca 	bl	8021bd8 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006644:	e7f4      	b.n	8006630 <passthroughTask+0xc>
	...

08006648 <commanderInit>:
static xQueueHandle priorityQueue;
STATIC_MEM_QUEUE_ALLOC(priorityQueue, 1, sizeof(int));

/* Public functions */
void commanderInit(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af02      	add	r7, sp, #8
  setpointQueue = STATIC_MEM_QUEUE_CREATE(setpointQueue);
 800664e:	2301      	movs	r3, #1
 8006650:	4618      	mov	r0, r3
 8006652:	2370      	movs	r3, #112	; 0x70
 8006654:	4619      	mov	r1, r3
 8006656:	2300      	movs	r3, #0
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <commanderInit+0x98>)
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <commanderInit+0x9c>)
 800665e:	f019 f937 	bl	801f8d0 <xQueueGenericCreateStatic>
 8006662:	4603      	mov	r3, r0
 8006664:	4a20      	ldr	r2, [pc, #128]	; (80066e8 <commanderInit+0xa0>)
 8006666:	6013      	str	r3, [r2, #0]
  ASSERT(setpointQueue);
 8006668:	4b1f      	ldr	r3, [pc, #124]	; (80066e8 <commanderInit+0xa0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <commanderInit+0x32>
 8006670:	223c      	movs	r2, #60	; 0x3c
 8006672:	491e      	ldr	r1, [pc, #120]	; (80066ec <commanderInit+0xa4>)
 8006674:	481e      	ldr	r0, [pc, #120]	; (80066f0 <commanderInit+0xa8>)
 8006676:	f00b fcd9 	bl	801202c <assertFail>
  xQueueSend(setpointQueue, &nullSetpoint, 0);
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <commanderInit+0xa0>)
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	2300      	movs	r3, #0
 8006680:	2200      	movs	r2, #0
 8006682:	491c      	ldr	r1, [pc, #112]	; (80066f4 <commanderInit+0xac>)
 8006684:	f019 fa3a 	bl	801fafc <xQueueGenericSend>

  priorityQueue = STATIC_MEM_QUEUE_CREATE(priorityQueue);
 8006688:	2301      	movs	r3, #1
 800668a:	4618      	mov	r0, r3
 800668c:	2304      	movs	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	2300      	movs	r3, #0
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <commanderInit+0xb0>)
 8006696:	4a19      	ldr	r2, [pc, #100]	; (80066fc <commanderInit+0xb4>)
 8006698:	f019 f91a 	bl	801f8d0 <xQueueGenericCreateStatic>
 800669c:	4603      	mov	r3, r0
 800669e:	4a18      	ldr	r2, [pc, #96]	; (8006700 <commanderInit+0xb8>)
 80066a0:	6013      	str	r3, [r2, #0]
  ASSERT(priorityQueue);
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <commanderInit+0xb8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <commanderInit+0x6c>
 80066aa:	2240      	movs	r2, #64	; 0x40
 80066ac:	490f      	ldr	r1, [pc, #60]	; (80066ec <commanderInit+0xa4>)
 80066ae:	4815      	ldr	r0, [pc, #84]	; (8006704 <commanderInit+0xbc>)
 80066b0:	f00b fcbc 	bl	801202c <assertFail>
  xQueueSend(priorityQueue, &priorityDisable, 0);
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <commanderInit+0xb8>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	2300      	movs	r3, #0
 80066ba:	2200      	movs	r2, #0
 80066bc:	4912      	ldr	r1, [pc, #72]	; (8006708 <commanderInit+0xc0>)
 80066be:	f019 fa1d 	bl	801fafc <xQueueGenericSend>

  crtpCommanderInit();
 80066c2:	f7fa ffd1 	bl	8001668 <crtpCommanderInit>
  crtpCommanderHighLevelInit();
 80066c6:	f7fb fd69 	bl	800219c <crtpCommanderHighLevelInit>
  lastUpdate = xTaskGetTickCount();
 80066ca:	f01a fb87 	bl	8020ddc <xTaskGetTickCount>
 80066ce:	4603      	mov	r3, r0
 80066d0:	4a0e      	ldr	r2, [pc, #56]	; (800670c <commanderInit+0xc4>)
 80066d2:	6013      	str	r3, [r2, #0]

  isInit = true;
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <commanderInit+0xc8>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20003650 	.word	0x20003650
 80066e4:	200035e0 	.word	0x200035e0
 80066e8:	200093c0 	.word	0x200093c0
 80066ec:	0802bbec 	.word	0x0802bbec
 80066f0:	0802bc10 	.word	0x0802bc10
 80066f4:	0802ef40 	.word	0x0802ef40
 80066f8:	200036a4 	.word	0x200036a4
 80066fc:	200036a0 	.word	0x200036a0
 8006700:	200093c4 	.word	0x200093c4
 8006704:	0802bc20 	.word	0x0802bc20
 8006708:	0802efb0 	.word	0x0802efb0
 800670c:	200093b8 	.word	0x200093b8
 8006710:	20009364 	.word	0x20009364

08006714 <commanderSetSetpoint>:

void commanderSetSetpoint(setpoint_t *setpoint, int priority)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  int currentPriority;

  const BaseType_t peekResult = xQueuePeek(priorityQueue, &currentPriority, 0);
 800671e:	4b18      	ldr	r3, [pc, #96]	; (8006780 <commanderSetSetpoint+0x6c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f107 0108 	add.w	r1, r7, #8
 8006726:	2200      	movs	r2, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f019 fd73 	bl	8020214 <xQueuePeek>
 800672e:	60f8      	str	r0, [r7, #12]
  ASSERT(peekResult == pdTRUE);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d004      	beq.n	8006740 <commanderSetSetpoint+0x2c>
 8006736:	224f      	movs	r2, #79	; 0x4f
 8006738:	4912      	ldr	r1, [pc, #72]	; (8006784 <commanderSetSetpoint+0x70>)
 800673a:	4813      	ldr	r0, [pc, #76]	; (8006788 <commanderSetSetpoint+0x74>)
 800673c:	f00b fc76 	bl	801202c <assertFail>

  if (priority >= currentPriority) {
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	db17      	blt.n	8006778 <commanderSetSetpoint+0x64>
    setpoint->timestamp = xTaskGetTickCount();
 8006748:	f01a fb48 	bl	8020ddc <xTaskGetTickCount>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
    // This is a potential race but without effect on functionality
    xQueueOverwrite(setpointQueue, setpoint);
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <commanderSetSetpoint+0x78>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	2302      	movs	r3, #2
 8006758:	2200      	movs	r2, #0
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	f019 f9ce 	bl	801fafc <xQueueGenericSend>
    xQueueOverwrite(priorityQueue, &priority);
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <commanderSetSetpoint+0x6c>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	4639      	mov	r1, r7
 8006766:	2302      	movs	r3, #2
 8006768:	2200      	movs	r2, #0
 800676a:	f019 f9c7 	bl	801fafc <xQueueGenericSend>
    if (priority > COMMANDER_PRIORITY_HIGHLEVEL) {
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	dd01      	ble.n	8006778 <commanderSetSetpoint+0x64>
      // Stop the high-level planner so it will forget its current state
      crtpCommanderHighLevelStop();
 8006774:	f7fc fbe4 	bl	8002f40 <crtpCommanderHighLevelStop>
    }
  }
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	200093c4 	.word	0x200093c4
 8006784:	0802bbec 	.word	0x0802bbec
 8006788:	0802bc30 	.word	0x0802bc30
 800678c:	200093c0 	.word	0x200093c0

08006790 <commanderRelaxPriority>:

void commanderRelaxPriority()
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
  crtpCommanderHighLevelTellState(&lastState);
 8006796:	4808      	ldr	r0, [pc, #32]	; (80067b8 <commanderRelaxPriority+0x28>)
 8006798:	f7fb fd68 	bl	800226c <crtpCommanderHighLevelTellState>
  int priority = COMMANDER_PRIORITY_LOWEST;
 800679c:	2301      	movs	r3, #1
 800679e:	607b      	str	r3, [r7, #4]
  xQueueOverwrite(priorityQueue, &priority);
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <commanderRelaxPriority+0x2c>)
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	1d39      	adds	r1, r7, #4
 80067a6:	2302      	movs	r3, #2
 80067a8:	2200      	movs	r2, #0
 80067aa:	f019 f9a7 	bl	801fafc <xQueueGenericSend>
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20009368 	.word	0x20009368
 80067bc:	200093c4 	.word	0x200093c4

080067c0 <commanderGetActivePriority>:
{
  return xTaskGetTickCount() - lastUpdate;
}

int commanderGetActivePriority(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
  int priority;

  const BaseType_t peekResult = xQueuePeek(priorityQueue, &priority, 0);
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <commanderGetActivePriority+0x30>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4639      	mov	r1, r7
 80067cc:	2200      	movs	r2, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f019 fd20 	bl	8020214 <xQueuePeek>
 80067d4:	6078      	str	r0, [r7, #4]
  ASSERT(peekResult == pdTRUE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d004      	beq.n	80067e6 <commanderGetActivePriority+0x26>
 80067dc:	227e      	movs	r2, #126	; 0x7e
 80067de:	4905      	ldr	r1, [pc, #20]	; (80067f4 <commanderGetActivePriority+0x34>)
 80067e0:	4805      	ldr	r0, [pc, #20]	; (80067f8 <commanderGetActivePriority+0x38>)
 80067e2:	f00b fc23 	bl	801202c <assertFail>

  return priority;
 80067e6:	683b      	ldr	r3, [r7, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	200093c4 	.word	0x200093c4
 80067f4:	0802bbec 	.word	0x0802bbec
 80067f8:	0802bc30 	.word	0x0802bc30

080067fc <deckInit>:
#endif

extern void deckInfoInit();

void deckInit()
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
  deckDriverCount();
 8006802:	f000 f8bd 	bl	8006980 <deckDriverCount>
  deckInfoInit();
 8006806:	f000 f92f 	bl	8006a68 <deckInfoInit>
  deckMemoryInit();
 800680a:	f001 f891 	bl	8007930 <deckMemoryInit>

  int nDecks;
  int i;

  nDecks = deckCount();
 800680e:	f000 f93f 	bl	8006a90 <deckCount>
 8006812:	60b8      	str	r0, [r7, #8]

  DEBUG_PRINT("%d deck(s) found\n", nDecks);
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	491a      	ldr	r1, [pc, #104]	; (8006880 <deckInit+0x84>)
 8006818:	2000      	movs	r0, #0
 800681a:	f00b fb43 	bl	8011ea4 <SEGGER_RTT_printf>

  for (i=0; i<nDecks; i++) {
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e023      	b.n	800686c <deckInit+0x70>
    DeckInfo *deck = deckInfo(i);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f93f 	bl	8006aa8 <deckInfo>
 800682a:	6078      	str	r0, [r7, #4]

    if (deck->driver->init) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d017      	beq.n	8006866 <deckInit+0x6a>
      if (deck->driver->name) {
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <deckInit+0x56>
        DEBUG_PRINT("Calling INIT on driver %s for deck %i\n", deck->driver->name, i);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	490e      	ldr	r1, [pc, #56]	; (8006884 <deckInit+0x88>)
 800684a:	2000      	movs	r0, #0
 800684c:	f00b fb2a 	bl	8011ea4 <SEGGER_RTT_printf>
 8006850:	e004      	b.n	800685c <deckInit+0x60>
      } else {
        DEBUG_PRINT("Calling INIT for deck %i\n", i);
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	490c      	ldr	r1, [pc, #48]	; (8006888 <deckInit+0x8c>)
 8006856:	2000      	movs	r0, #0
 8006858:	f00b fb24 	bl	8011ea4 <SEGGER_RTT_printf>
      }

      deck->driver->init(deck);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
  for (i=0; i<nDecks; i++) {
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	dbd7      	blt.n	8006824 <deckInit+0x28>
    }
  }
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	0802c0cc 	.word	0x0802c0cc
 8006884:	0802c0e0 	.word	0x0802c0e0
 8006888:	0802c108 	.word	0x0802c108

0800688c <deckdriversInit>:
static const struct deck_driver ** drivers;
static int driversLen;

// Init the toc access variables. Lazy initialisation: it is going to be done
// the first time any api function is called.
static void deckdriversInit() {
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af02      	add	r7, sp, #8
  static bool init = false;
  if (!init) {
 8006892:	4b33      	ldr	r3, [pc, #204]	; (8006960 <deckdriversInit+0xd4>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f083 0301 	eor.w	r3, r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d05a      	beq.n	8006956 <deckdriversInit+0xca>
    int i;

    drivers = &_deckDriver_start;
 80068a0:	4b30      	ldr	r3, [pc, #192]	; (8006964 <deckdriversInit+0xd8>)
 80068a2:	4a31      	ldr	r2, [pc, #196]	; (8006968 <deckdriversInit+0xdc>)
 80068a4:	601a      	str	r2, [r3, #0]
    driversLen = &_deckDriver_stop - &_deckDriver_start;
 80068a6:	4a31      	ldr	r2, [pc, #196]	; (800696c <deckdriversInit+0xe0>)
 80068a8:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <deckdriversInit+0xdc>)
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	109b      	asrs	r3, r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <deckdriversInit+0xe4>)
 80068b2:	601a      	str	r2, [r3, #0]
    init = true;
 80068b4:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <deckdriversInit+0xd4>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]

    DECK_DRV_DBG_PRINT("Found %d drivers\n", driversLen);
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <deckdriversInit+0xe4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	492c      	ldr	r1, [pc, #176]	; (8006974 <deckdriversInit+0xe8>)
 80068c2:	2000      	movs	r0, #0
 80068c4:	f00b faee 	bl	8011ea4 <SEGGER_RTT_printf>
    for (i=0; i<driversLen; i++) {
 80068c8:	2300      	movs	r3, #0
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	e03e      	b.n	800694c <deckdriversInit+0xc0>
      if (drivers[i]->name) {
 80068ce:	4b25      	ldr	r3, [pc, #148]	; (8006964 <deckdriversInit+0xd8>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01e      	beq.n	800691e <deckdriversInit+0x92>
        DECK_DRV_DBG_PRINT("VID:PID %02x:%02x (%s)\n", drivers[i]->vid, drivers[i]->pid, drivers[i]->name);
 80068e0:	4b20      	ldr	r3, [pc, #128]	; (8006964 <deckdriversInit+0xd8>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <deckdriversInit+0xd8>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	4618      	mov	r0, r3
 8006900:	4b18      	ldr	r3, [pc, #96]	; (8006964 <deckdriversInit+0xd8>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4603      	mov	r3, r0
 8006912:	460a      	mov	r2, r1
 8006914:	4918      	ldr	r1, [pc, #96]	; (8006978 <deckdriversInit+0xec>)
 8006916:	2000      	movs	r0, #0
 8006918:	f00b fac4 	bl	8011ea4 <SEGGER_RTT_printf>
 800691c:	e013      	b.n	8006946 <deckdriversInit+0xba>
      } else {
        DECK_DRV_DBG_PRINT("VID:PID %02x:%02x\n", drivers[i]->vid, drivers[i]->pid);
 800691e:	4b11      	ldr	r3, [pc, #68]	; (8006964 <deckdriversInit+0xd8>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <deckdriversInit+0xd8>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	460a      	mov	r2, r1
 800693e:	490f      	ldr	r1, [pc, #60]	; (800697c <deckdriversInit+0xf0>)
 8006940:	2000      	movs	r0, #0
 8006942:	f00b faaf 	bl	8011ea4 <SEGGER_RTT_printf>
    for (i=0; i<driversLen; i++) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3301      	adds	r3, #1
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	4b08      	ldr	r3, [pc, #32]	; (8006970 <deckdriversInit+0xe4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	dbbb      	blt.n	80068ce <deckdriversInit+0x42>
      }

    }
  }
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20009430 	.word	0x20009430
 8006964:	20009428 	.word	0x20009428
 8006968:	0802a8e0 	.word	0x0802a8e0
 800696c:	0802a8e0 	.word	0x0802a8e0
 8006970:	2000942c 	.word	0x2000942c
 8006974:	0802c150 	.word	0x0802c150
 8006978:	0802c164 	.word	0x0802c164
 800697c:	0802c17c 	.word	0x0802c17c

08006980 <deckDriverCount>:

int deckDriverCount() {
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  deckdriversInit();
 8006984:	f7ff ff82 	bl	800688c <deckdriversInit>

  return driversLen;
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <deckDriverCount+0x10>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	bd80      	pop	{r7, pc}
 8006990:	2000942c 	.word	0x2000942c

08006994 <deckFindDriverByVidPid>:
    return drivers[i];
  }
  return NULL;
}

const DeckDriver* deckFindDriverByVidPid(uint8_t vid, uint8_t pid) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	460a      	mov	r2, r1
 800699e:	71fb      	strb	r3, [r7, #7]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71bb      	strb	r3, [r7, #6]
  int i;

  deckdriversInit();
 80069a4:	f7ff ff72 	bl	800688c <deckdriversInit>

  for (i=0; i<driversLen; i++) {
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e01d      	b.n	80069ea <deckFindDriverByVidPid+0x56>
    if ((vid == drivers[i]->vid) && (pid == drivers[i]->pid)) {
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <deckFindDriverByVidPid+0x6c>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	79fa      	ldrb	r2, [r7, #7]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d110      	bne.n	80069e4 <deckFindDriverByVidPid+0x50>
 80069c2:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <deckFindDriverByVidPid+0x6c>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	79ba      	ldrb	r2, [r7, #6]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d106      	bne.n	80069e4 <deckFindDriverByVidPid+0x50>
      return drivers[i];
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <deckFindDriverByVidPid+0x6c>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	e008      	b.n	80069f6 <deckFindDriverByVidPid+0x62>
  for (i=0; i<driversLen; i++) {
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <deckFindDriverByVidPid+0x70>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	dbdc      	blt.n	80069ae <deckFindDriverByVidPid+0x1a>
    }
  }
  return NULL;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20009428 	.word	0x20009428
 8006a04:	2000942c 	.word	0x2000942c

08006a08 <deckFindDriverByName>:

const DeckDriver* deckFindDriverByName(char* name) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  int i;

  deckdriversInit();
 8006a10:	f7ff ff3c 	bl	800688c <deckdriversInit>

  for (i=0; i<driversLen; i++) {
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e017      	b.n	8006a4a <deckFindDriverByName+0x42>
    if (!strcmp(name, drivers[i]->name)) {
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <deckFindDriverByName+0x58>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7f9 fbd0 	bl	80001d0 <strcmp>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <deckFindDriverByName+0x3c>
      return drivers[i];
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <deckFindDriverByName+0x58>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	e008      	b.n	8006a56 <deckFindDriverByName+0x4e>
  for (i=0; i<driversLen; i++) {
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <deckFindDriverByName+0x5c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	dbe2      	blt.n	8006a1a <deckFindDriverByName+0x12>
    }
  }
  return NULL;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20009428 	.word	0x20009428
 8006a64:	2000942c 	.word	0x2000942c

08006a68 <deckInfoInit>:
static bool requiredLowInterferenceRadioMode = false;

static char* deck_force = CONFIG_DECK_FORCE;

void deckInfoInit()
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  static bool isInit = false;

  if (isInit) return;
 8006a6c:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <deckInfoInit+0x24>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <deckInfoInit+0x20>

  enumerateDecks();
 8006a74:	f000 f962 	bl	8006d3c <enumerateDecks>
  checkPeriphAndGpioConflicts();
 8006a78:	f000 faac 	bl	8006fd4 <checkPeriphAndGpioConflicts>
  scanRequiredSystemProperties();
 8006a7c:	f000 fb94 	bl	80071a8 <scanRequiredSystemProperties>

  isInit = true;
 8006a80:	4b02      	ldr	r3, [pc, #8]	; (8006a8c <deckInfoInit+0x24>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e000      	b.n	8006a8a <deckInfoInit+0x22>
  if (isInit) return;
 8006a88:	bf00      	nop
}
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2000943a 	.word	0x2000943a

08006a90 <deckCount>:

int deckCount(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return count;
 8006a94:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <deckCount+0x14>)
 8006a96:	681b      	ldr	r3, [r3, #0]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20009434 	.word	0x20009434

08006aa8 <deckInfo>:

DeckInfo * deckInfo(int i)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  if (i<count) {
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <deckInfo+0x30>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	da07      	bge.n	8006aca <deckInfo+0x22>
    return &deckInfos[i];
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	015b      	lsls	r3, r3, #5
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4a05      	ldr	r2, [pc, #20]	; (8006adc <deckInfo+0x34>)
 8006ac6:	4413      	add	r3, r2
 8006ac8:	e000      	b.n	8006acc <deckInfo+0x24>
  }

  return NULL;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	20009434 	.word	0x20009434
 8006adc:	200036f4 	.word	0x200036f4

08006ae0 <findDriver>:
// Dummy driver for decks that do not have a driver implemented
static const DeckDriver dummyDriver;

#ifndef CONFIG_DEBUG_DECK_IGNORE_OWS
static const DeckDriver * findDriver(DeckInfo *deck)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	; 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  char name[30];
  const DeckDriver *driver = &dummyDriver;
 8006ae8:	4b16      	ldr	r3, [pc, #88]	; (8006b44 <findDriver+0x64>)
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c

  deckTlvGetString(&deck->tlv, DECK_INFO_NAME, name, 30);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006af2:	f107 020c 	add.w	r2, r7, #12
 8006af6:	231e      	movs	r3, #30
 8006af8:	2101      	movs	r1, #1
 8006afa:	f000 fb1c 	bl	8007136 <deckTlvGetString>

  if (deck->vid) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	795b      	ldrb	r3, [r3, #5]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <findDriver+0x3a>
    driver = deckFindDriverByVidPid(deck->vid, deck->pid);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	795a      	ldrb	r2, [r3, #5]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	799b      	ldrb	r3, [r3, #6]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7ff ff3f 	bl	8006994 <deckFindDriverByVidPid>
 8006b16:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006b18:	e00a      	b.n	8006b30 <findDriver+0x50>
  } else if (strlen(name)>0) {
 8006b1a:	f107 030c 	add.w	r3, r7, #12
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <findDriver+0x50>
    driver = deckFindDriverByName(name);
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff ff6d 	bl	8006a08 <deckFindDriverByName>
 8006b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (driver == NULL)
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <findDriver+0x5a>
    driver = &dummyDriver;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <findDriver+0x64>)
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c

  return driver;
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3730      	adds	r7, #48	; 0x30
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	0802efb4 	.word	0x0802efb4

08006b48 <printDeckInfo>:
#endif

void printDeckInfo(DeckInfo *info)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b090      	sub	sp, #64	; 0x40
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	6078      	str	r0, [r7, #4]
  char name[30] = "NoName";
 8006b50:	4a3f      	ldr	r2, [pc, #252]	; (8006c50 <printDeckInfo+0x108>)
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b5a:	6018      	str	r0, [r3, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	8019      	strh	r1, [r3, #0]
 8006b60:	3302      	adds	r3, #2
 8006b62:	0c0a      	lsrs	r2, r1, #16
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	f107 031f 	add.w	r3, r7, #31
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	609a      	str	r2, [r3, #8]
 8006b72:	60da      	str	r2, [r3, #12]
 8006b74:	611a      	str	r2, [r3, #16]
 8006b76:	f8c3 2013 	str.w	r2, [r3, #19]
  char rev[10] = "NoRev";
 8006b7a:	4a36      	ldr	r2, [pc, #216]	; (8006c54 <printDeckInfo+0x10c>)
 8006b7c:	f107 030c 	add.w	r3, r7, #12
 8006b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b84:	6018      	str	r0, [r3, #0]
 8006b86:	3304      	adds	r3, #4
 8006b88:	8019      	strh	r1, [r3, #0]
 8006b8a:	f107 0312 	add.w	r3, r7, #18
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]

  if (deckTlvHasElement(&info->tlv, DECK_INFO_NAME)) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3370      	adds	r3, #112	; 0x70
 8006b96:	2101      	movs	r1, #1
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fabb 	bl	8007114 <deckTlvHasElement>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <printDeckInfo+0x6e>
    deckTlvGetString(&info->tlv, DECK_INFO_NAME, name, 30);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006baa:	f107 0218 	add.w	r2, r7, #24
 8006bae:	231e      	movs	r3, #30
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	f000 fac0 	bl	8007136 <deckTlvGetString>
  }

  if (deckTlvHasElement(&info->tlv, DECK_INFO_REVISION)) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3370      	adds	r3, #112	; 0x70
 8006bba:	2102      	movs	r1, #2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 faa9 	bl	8007114 <deckTlvHasElement>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <printDeckInfo+0x92>
    deckTlvGetString(&info->tlv, DECK_INFO_REVISION, rev, 10);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006bce:	f107 020c 	add.w	r2, r7, #12
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	f000 faae 	bl	8007136 <deckTlvGetString>
  }

  DECK_INFO_DBG_PRINT("Deck %02x:%02x %s (Rev. %s)\n", info->vid, info->pid, name, rev);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	795b      	ldrb	r3, [r3, #5]
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	799b      	ldrb	r3, [r3, #6]
 8006be4:	4619      	mov	r1, r3
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	f107 0318 	add.w	r3, r7, #24
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4918      	ldr	r1, [pc, #96]	; (8006c58 <printDeckInfo+0x110>)
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f00b f954 	bl	8011ea4 <SEGGER_RTT_printf>
  DECK_INFO_DBG_PRINT("Used pin: %08x\n", (unsigned int)info->usedPins);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8006c02:	461a      	mov	r2, r3
 8006c04:	4915      	ldr	r1, [pc, #84]	; (8006c5c <printDeckInfo+0x114>)
 8006c06:	2000      	movs	r0, #0
 8006c08:	f00b f94c 	bl	8011ea4 <SEGGER_RTT_printf>

  if (info->driver == &dummyDriver) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c10:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <printDeckInfo+0x118>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d104      	bne.n	8006c20 <printDeckInfo+0xd8>
    DEBUG_PRINT("Warning! No driver found for deck.\n");
 8006c16:	4913      	ldr	r1, [pc, #76]	; (8006c64 <printDeckInfo+0x11c>)
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f00b f943 	bl	8011ea4 <SEGGER_RTT_printf>
  } else {
    DECK_INFO_DBG_PRINT("Driver implements: [ %s%s]\n",
                        info->driver->init?"init ":"", info->driver->test?"test ":"");
  }
}
 8006c1e:	e013      	b.n	8006c48 <printDeckInfo+0x100>
    DECK_INFO_DBG_PRINT("Driver implements: [ %s%s]\n",
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <printDeckInfo+0xe6>
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <printDeckInfo+0x120>)
 8006c2c:	e000      	b.n	8006c30 <printDeckInfo+0xe8>
 8006c2e:	4a0f      	ldr	r2, [pc, #60]	; (8006c6c <printDeckInfo+0x124>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <printDeckInfo+0xf6>
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <printDeckInfo+0x128>)
 8006c3c:	e000      	b.n	8006c40 <printDeckInfo+0xf8>
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <printDeckInfo+0x124>)
 8006c40:	490c      	ldr	r1, [pc, #48]	; (8006c74 <printDeckInfo+0x12c>)
 8006c42:	2000      	movs	r0, #0
 8006c44:	f00b f92e 	bl	8011ea4 <SEGGER_RTT_printf>
}
 8006c48:	bf00      	nop
 8006c4a:	3738      	adds	r7, #56	; 0x38
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	0802c21c 	.word	0x0802c21c
 8006c54:	0802c23c 	.word	0x0802c23c
 8006c58:	0802c198 	.word	0x0802c198
 8006c5c:	0802c1b8 	.word	0x0802c1b8
 8006c60:	0802efb4 	.word	0x0802efb4
 8006c64:	0802c1c8 	.word	0x0802c1c8
 8006c68:	0802c1ec 	.word	0x0802c1ec
 8006c6c:	0802c1f4 	.word	0x0802c1f4
 8006c70:	0802c1f8 	.word	0x0802c1f8
 8006c74:	0802c200 	.word	0x0802c200

08006c78 <infoDecode>:

#ifndef CONFIG_DEBUG_DECK_IGNORE_OWS
static bool infoDecode(DeckInfo * info)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint8_t crcHeader;
  uint8_t crcTlv;

  if (info->header != DECK_INFO_HEADER_ID) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2beb      	cmp	r3, #235	; 0xeb
 8006c86:	d005      	beq.n	8006c94 <infoDecode+0x1c>
    DEBUG_PRINT("Memory error: wrong header ID\n");
 8006c88:	4928      	ldr	r1, [pc, #160]	; (8006d2c <infoDecode+0xb4>)
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f00b f90a 	bl	8011ea4 <SEGGER_RTT_printf>
    return false;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e047      	b.n	8006d24 <infoDecode+0xac>
  }

  crcHeader = crc32CalculateBuffer(info->raw, DECK_INFO_HEADER_SIZE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2107      	movs	r1, #7
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f00b fa7e 	bl	801219a <crc32CalculateBuffer>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  if(info->crc != crcHeader) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	79db      	ldrb	r3, [r3, #7]
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d005      	beq.n	8006cb8 <infoDecode+0x40>
    DEBUG_PRINT("Memory error: incorrect header CRC\n");
 8006cac:	4920      	ldr	r1, [pc, #128]	; (8006d30 <infoDecode+0xb8>)
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f00b f8f8 	bl	8011ea4 <SEGGER_RTT_printf>
    return false;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e035      	b.n	8006d24 <infoDecode+0xac>
  }

  if(info->raw[DECK_INFO_TLV_VERSION_POS] != DECK_INFO_TLV_VERSION) {
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7a1b      	ldrb	r3, [r3, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <infoDecode+0x54>
    DEBUG_PRINT("Memory error: incorrect TLV version\n");
 8006cc0:	491c      	ldr	r1, [pc, #112]	; (8006d34 <infoDecode+0xbc>)
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f00b f8ee 	bl	8011ea4 <SEGGER_RTT_printf>
    return false;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e02b      	b.n	8006d24 <infoDecode+0xac>
  }

  crcTlv = crc32CalculateBuffer(&info->raw[DECK_INFO_TLV_VERSION_POS], info->raw[DECK_INFO_TLV_LENGTH_POS]+2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f103 0208 	add.w	r2, r3, #8
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7a5b      	ldrb	r3, [r3, #9]
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f00b fa5d 	bl	801219a <crc32CalculateBuffer>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]
  if(crcTlv != info->raw[DECK_INFO_TLV_DATA_POS + info->raw[DECK_INFO_TLV_LENGTH_POS]]) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7a5b      	ldrb	r3, [r3, #9]
 8006ce8:	330a      	adds	r3, #10
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	5cd3      	ldrb	r3, [r2, r3]
 8006cee:	7bba      	ldrb	r2, [r7, #14]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d00c      	beq.n	8006d0e <infoDecode+0x96>
    DEBUG_PRINT("Memory error: incorrect TLV CRC %x!=%x\n", (unsigned int)crcTlv,
 8006cf4:	7bb9      	ldrb	r1, [r7, #14]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7a5b      	ldrb	r3, [r3, #9]
 8006cfa:	330a      	adds	r3, #10
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	5cd3      	ldrb	r3, [r2, r3]
 8006d00:	460a      	mov	r2, r1
 8006d02:	490d      	ldr	r1, [pc, #52]	; (8006d38 <infoDecode+0xc0>)
 8006d04:	2000      	movs	r0, #0
 8006d06:	f00b f8cd 	bl	8011ea4 <SEGGER_RTT_printf>
                info->raw[DECK_INFO_TLV_DATA_POS + info->raw[DECK_INFO_TLV_LENGTH_POS]]);
    return false;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e00a      	b.n	8006d24 <infoDecode+0xac>
  }

  info->tlv.data = &info->raw[DECK_INFO_TLV_DATA_POS];
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f103 020a 	add.w	r2, r3, #10
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	671a      	str	r2, [r3, #112]	; 0x70
  info->tlv.length = info->raw[DECK_INFO_TLV_LENGTH_POS];
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7a5b      	ldrb	r3, [r3, #9]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	675a      	str	r2, [r3, #116]	; 0x74

  return true;
 8006d22:	2301      	movs	r3, #1
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	0802c248 	.word	0x0802c248
 8006d30:	0802c268 	.word	0x0802c268
 8006d34:	0802c28c 	.word	0x0802c28c
 8006d38:	0802c2b4 	.word	0x0802c2b4

08006d3c <enumerateDecks>:
#endif

static void enumerateDecks(void)
{
 8006d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d40:	b089      	sub	sp, #36	; 0x24
 8006d42:	af00      	add	r7, sp, #0
  uint8_t nDecks = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	71fb      	strb	r3, [r7, #7]
  bool noError = true;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	77fb      	strb	r3, [r7, #31]

  owInit();
 8006d4c:	f7fe fafe 	bl	800534c <owInit>

  if (owScan(&nDecks))
 8006d50:	1dfb      	adds	r3, r7, #7
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fb0a 	bl	800536c <owScan>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <enumerateDecks+0x3c>
  {
    DECK_INFO_DBG_PRINT("Found %d deck memor%s.\n", nDecks, nDecks>1?"ies":"y");
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	461a      	mov	r2, r3
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d901      	bls.n	8006d6c <enumerateDecks+0x30>
 8006d68:	4b8a      	ldr	r3, [pc, #552]	; (8006f94 <enumerateDecks+0x258>)
 8006d6a:	e000      	b.n	8006d6e <enumerateDecks+0x32>
 8006d6c:	4b8a      	ldr	r3, [pc, #552]	; (8006f98 <enumerateDecks+0x25c>)
 8006d6e:	498b      	ldr	r1, [pc, #556]	; (8006f9c <enumerateDecks+0x260>)
 8006d70:	2000      	movs	r0, #0
 8006d72:	f00b f897 	bl	8011ea4 <SEGGER_RTT_printf>
 8006d76:	e005      	b.n	8006d84 <enumerateDecks+0x48>
  } else {
    DEBUG_PRINT("Error scanning for deck memories, "
 8006d78:	4989      	ldr	r1, [pc, #548]	; (8006fa0 <enumerateDecks+0x264>)
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	f00b f892 	bl	8011ea4 <SEGGER_RTT_printf>
                "no deck drivers will be initialised\n");
    nDecks = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	71fb      	strb	r3, [r7, #7]
  }

#ifndef CONFIG_DEBUG_DECK_IGNORE_OWS
  for (int i = 0; i < nDecks; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	e05a      	b.n	8006e40 <enumerateDecks+0x104>
  {
    DECK_INFO_DBG_PRINT("Enumerating deck %i\n", i);
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	4985      	ldr	r1, [pc, #532]	; (8006fa4 <enumerateDecks+0x268>)
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f00b f888 	bl	8011ea4 <SEGGER_RTT_printf>
    if (owRead(i, 0, sizeof(deckInfos[0].raw), (uint8_t *)&deckInfos[i]))
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	b2d8      	uxtb	r0, r3
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	015b      	lsls	r3, r3, #5
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a81      	ldr	r2, [pc, #516]	; (8006fa8 <enumerateDecks+0x26c>)
 8006da4:	4413      	add	r3, r2
 8006da6:	2270      	movs	r2, #112	; 0x70
 8006da8:	2100      	movs	r1, #0
 8006daa:	f7fe faf7 	bl	800539c <owRead>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d03b      	beq.n	8006e2c <enumerateDecks+0xf0>
    {
      if (infoDecode(&deckInfos[i]))
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	4613      	mov	r3, r2
 8006db8:	015b      	lsls	r3, r3, #5
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4a7a      	ldr	r2, [pc, #488]	; (8006fa8 <enumerateDecks+0x26c>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff ff58 	bl	8006c78 <infoDecode>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01e      	beq.n	8006e0c <enumerateDecks+0xd0>
      {
        deckInfos[i].driver = findDriver(&deckInfos[i]);
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	015b      	lsls	r3, r3, #5
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4a73      	ldr	r2, [pc, #460]	; (8006fa8 <enumerateDecks+0x26c>)
 8006dda:	4413      	add	r3, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fe7f 	bl	8006ae0 <findDriver>
 8006de2:	4601      	mov	r1, r0
 8006de4:	4870      	ldr	r0, [pc, #448]	; (8006fa8 <enumerateDecks+0x26c>)
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	4613      	mov	r3, r2
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4403      	add	r3, r0
 8006df2:	3378      	adds	r3, #120	; 0x78
 8006df4:	6019      	str	r1, [r3, #0]
        printDeckInfo(&deckInfos[i]);
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	015b      	lsls	r3, r3, #5
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4a69      	ldr	r2, [pc, #420]	; (8006fa8 <enumerateDecks+0x26c>)
 8006e02:	4413      	add	r3, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fe9f 	bl	8006b48 <printDeckInfo>
 8006e0a:	e016      	b.n	8006e3a <enumerateDecks+0xfe>
      } else {
#ifdef CONFIG_DEBUG
        DEBUG_PRINT("Deck %i has corrupt OW memory. "
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	4967      	ldr	r1, [pc, #412]	; (8006fac <enumerateDecks+0x270>)
 8006e10:	2000      	movs	r0, #0
 8006e12:	f00b f847 	bl	8011ea4 <SEGGER_RTT_printf>
                    "Ignoring the deck in DEBUG mode.\n", i);
        deckInfos[i].driver = &dummyDriver;
 8006e16:	4964      	ldr	r1, [pc, #400]	; (8006fa8 <enumerateDecks+0x26c>)
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	015b      	lsls	r3, r3, #5
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3378      	adds	r3, #120	; 0x78
 8006e26:	4a62      	ldr	r2, [pc, #392]	; (8006fb0 <enumerateDecks+0x274>)
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e006      	b.n	8006e3a <enumerateDecks+0xfe>
#endif
      }
    }
    else
    {
      DEBUG_PRINT("Reading deck nr:%d [FAILED]. "
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4961      	ldr	r1, [pc, #388]	; (8006fb4 <enumerateDecks+0x278>)
 8006e30:	2000      	movs	r0, #0
 8006e32:	f00b f837 	bl	8011ea4 <SEGGER_RTT_printf>
                  "No driver will be initialized!\n", i);
      noError = false;
 8006e36:	2300      	movs	r3, #0
 8006e38:	77fb      	strb	r3, [r7, #31]
  for (int i = 0; i < nDecks; i++)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	61bb      	str	r3, [r7, #24]
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	461a      	mov	r2, r3
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	4293      	cmp	r3, r2
 8006e48:	db9f      	blt.n	8006d8a <enumerateDecks+0x4e>
  DEBUG_PRINT("Ignoring all OW decks because of compile flag.\n");
  nDecks = 0;
#endif

  // Add build-forced driver
  if (strlen(deck_force) > 0 && strncmp(deck_force, "none", 4) != 0) {
 8006e4a:	4b5b      	ldr	r3, [pc, #364]	; (8006fb8 <enumerateDecks+0x27c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8091 	beq.w	8006f78 <enumerateDecks+0x23c>
 8006e56:	4b58      	ldr	r3, [pc, #352]	; (8006fb8 <enumerateDecks+0x27c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	4957      	ldr	r1, [pc, #348]	; (8006fbc <enumerateDecks+0x280>)
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f01d fe32 	bl	8024ac8 <strncmp>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8086 	beq.w	8006f78 <enumerateDecks+0x23c>
 8006e6c:	466b      	mov	r3, sp
 8006e6e:	461e      	mov	r6, r3
    DEBUG_PRINT("CONFIG_DECK_FORCE=%s found\n", deck_force);
 8006e70:	4b51      	ldr	r3, [pc, #324]	; (8006fb8 <enumerateDecks+0x27c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	4952      	ldr	r1, [pc, #328]	; (8006fc0 <enumerateDecks+0x284>)
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f00b f813 	bl	8011ea4 <SEGGER_RTT_printf>
  	//split deck_force into multiple, separated by colons, if available
    char delim[] = ":";
 8006e7e:	233a      	movs	r3, #58	; 0x3a
 8006e80:	80bb      	strh	r3, [r7, #4]

    char temp_deck_force[strlen(deck_force) + 1];
 8006e82:	4b4d      	ldr	r3, [pc, #308]	; (8006fb8 <enumerateDecks+0x27c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7f9 fa02 	bl	8000290 <strlen>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	1c59      	adds	r1, r3, #1
 8006e90:	460b      	mov	r3, r1
 8006e92:	3b01      	subs	r3, #1
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	2300      	movs	r3, #0
 8006e98:	4688      	mov	r8, r1
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ea8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	461d      	mov	r5, r3
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	00eb      	lsls	r3, r5, #3
 8006ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ec4:	00e2      	lsls	r2, r4, #3
 8006ec6:	1dcb      	adds	r3, r1, #7
 8006ec8:	08db      	lsrs	r3, r3, #3
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	ebad 0d03 	sub.w	sp, sp, r3
 8006ed0:	466b      	mov	r3, sp
 8006ed2:	3300      	adds	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
    strcpy(temp_deck_force, deck_force);
 8006ed6:	4b38      	ldr	r3, [pc, #224]	; (8006fb8 <enumerateDecks+0x27c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f01d ff42 	bl	8024d66 <strcpy>
    char * token = strtok(temp_deck_force, delim);
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f01d fe14 	bl	8024b14 <strtok>
 8006eec:	6178      	str	r0, [r7, #20]

    while (token) {
 8006eee:	e03f      	b.n	8006f70 <enumerateDecks+0x234>
      deck_force = token;
 8006ef0:	4a31      	ldr	r2, [pc, #196]	; (8006fb8 <enumerateDecks+0x27c>)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6013      	str	r3, [r2, #0]

      const DeckDriver *driver = deckFindDriverByName(deck_force);
 8006ef6:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <enumerateDecks+0x27c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fd84 	bl	8006a08 <deckFindDriverByName>
 8006f00:	60b8      	str	r0, [r7, #8]
      if (!driver) {
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <enumerateDecks+0x1dc>
        DEBUG_PRINT("WARNING: compile-time forced driver %s not found\n", deck_force);
 8006f08:	4b2b      	ldr	r3, [pc, #172]	; (8006fb8 <enumerateDecks+0x27c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	492d      	ldr	r1, [pc, #180]	; (8006fc4 <enumerateDecks+0x288>)
 8006f10:	2000      	movs	r0, #0
 8006f12:	f00a ffc7 	bl	8011ea4 <SEGGER_RTT_printf>
 8006f16:	e025      	b.n	8006f64 <enumerateDecks+0x228>
      } else if (driver->init || driver->test) {
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d103      	bne.n	8006f28 <enumerateDecks+0x1ec>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01d      	beq.n	8006f64 <enumerateDecks+0x228>
        if (nDecks <= DECK_MAX_COUNT)
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d816      	bhi.n	8006f5c <enumerateDecks+0x220>
        {
          nDecks++;
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	3301      	adds	r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	71fb      	strb	r3, [r7, #7]
          deckInfos[nDecks - 1].driver = driver;
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	1e5a      	subs	r2, r3, #1
 8006f3a:	491b      	ldr	r1, [pc, #108]	; (8006fa8 <enumerateDecks+0x26c>)
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	015b      	lsls	r3, r3, #5
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	3378      	adds	r3, #120	; 0x78
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	601a      	str	r2, [r3, #0]
          DEBUG_PRINT("compile-time forced driver %s added\n", deck_force);
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <enumerateDecks+0x27c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	491d      	ldr	r1, [pc, #116]	; (8006fc8 <enumerateDecks+0x28c>)
 8006f54:	2000      	movs	r0, #0
 8006f56:	f00a ffa5 	bl	8011ea4 <SEGGER_RTT_printf>
 8006f5a:	e003      	b.n	8006f64 <enumerateDecks+0x228>
        } else {
          DEBUG_PRINT("WARNING: No room for compile-time forced driver\n");
 8006f5c:	491b      	ldr	r1, [pc, #108]	; (8006fcc <enumerateDecks+0x290>)
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f00a ffa0 	bl	8011ea4 <SEGGER_RTT_printf>
        }
      }
      token = strtok(NULL, delim);
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	4619      	mov	r1, r3
 8006f68:	2000      	movs	r0, #0
 8006f6a:	f01d fdd3 	bl	8024b14 <strtok>
 8006f6e:	6178      	str	r0, [r7, #20]
    while (token) {
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1bc      	bne.n	8006ef0 <enumerateDecks+0x1b4>
 8006f76:	46b5      	mov	sp, r6
    }
  }

  if (noError) {
 8006f78:	7ffb      	ldrb	r3, [r7, #31]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <enumerateDecks+0x24c>
    count = nDecks;
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <enumerateDecks+0x294>)
 8006f84:	601a      	str	r2, [r3, #0]
  }

  return;
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
}
 8006f8a:	3724      	adds	r7, #36	; 0x24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f92:	bf00      	nop
 8006f94:	0802c2dc 	.word	0x0802c2dc
 8006f98:	0802c2e0 	.word	0x0802c2e0
 8006f9c:	0802c2e4 	.word	0x0802c2e4
 8006fa0:	0802c2fc 	.word	0x0802c2fc
 8006fa4:	0802c344 	.word	0x0802c344
 8006fa8:	200036f4 	.word	0x200036f4
 8006fac:	0802c35c 	.word	0x0802c35c
 8006fb0:	0802efb4 	.word	0x0802efb4
 8006fb4:	0802c3a0 	.word	0x0802c3a0
 8006fb8:	20000738 	.word	0x20000738
 8006fbc:	0802c190 	.word	0x0802c190
 8006fc0:	0802c3e0 	.word	0x0802c3e0
 8006fc4:	0802c3fc 	.word	0x0802c3fc
 8006fc8:	0802c430 	.word	0x0802c430
 8006fcc:	0802c458 	.word	0x0802c458
 8006fd0:	20009434 	.word	0x20009434

08006fd4 <checkPeriphAndGpioConflicts>:

static void checkPeriphAndGpioConflicts(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
  bool noError = true;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t usedPeriph = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
  uint32_t usedGpio = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < count; i++)
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	e04d      	b.n	8007088 <checkPeriphAndGpioConflicts+0xb4>
  {
    uint32_t matchPeriph = usedPeriph & deckInfos[i].driver->usedPeriph;
 8006fec:	492f      	ldr	r1, [pc, #188]	; (80070ac <checkPeriphAndGpioConflicts+0xd8>)
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	015b      	lsls	r3, r3, #5
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3378      	adds	r3, #120	; 0x78
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4013      	ands	r3, r2
 8007004:	607b      	str	r3, [r7, #4]
    if (matchPeriph != 0) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <checkPeriphAndGpioConflicts+0x52>
      //
      // Here we know that two decks share a periph, that is only ok if it is a
      // bus. So, we check if the matching periphs contain a non-bus peripheral
      // by ANDing with the inverse of a mask made up with all bus peripherals.
      //
      uint32_t bus_mask = ~(DECK_USING_I2C | DECK_USING_SPI);
 800700c:	4b28      	ldr	r3, [pc, #160]	; (80070b0 <checkPeriphAndGpioConflicts+0xdc>)
 800700e:	603b      	str	r3, [r7, #0]
      if ((matchPeriph & bus_mask) != 0) {
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <checkPeriphAndGpioConflicts+0x52>
        DEBUG_PRINT("ERROR: Driver Periph usage conflicts with a "
 800701a:	4926      	ldr	r1, [pc, #152]	; (80070b4 <checkPeriphAndGpioConflicts+0xe0>)
 800701c:	2000      	movs	r0, #0
 800701e:	f00a ff41 	bl	8011ea4 <SEGGER_RTT_printf>
                    "previously enumerated deck driver. No decks will be "
                    "initialized!\n");
        noError = false;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
      }
    }

    if (usedGpio & deckInfos[i].driver->usedGpio) {
 8007026:	4921      	ldr	r1, [pc, #132]	; (80070ac <checkPeriphAndGpioConflicts+0xd8>)
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	015b      	lsls	r3, r3, #5
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	3378      	adds	r3, #120	; 0x78
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <checkPeriphAndGpioConflicts+0x7a>
      DEBUG_PRINT("ERROR: Driver Gpio usage conflicts with a "
 8007042:	491d      	ldr	r1, [pc, #116]	; (80070b8 <checkPeriphAndGpioConflicts+0xe4>)
 8007044:	2000      	movs	r0, #0
 8007046:	f00a ff2d 	bl	8011ea4 <SEGGER_RTT_printf>
                  "previously enumerated deck driver. No decks will be "
                  "initialized!\n");
      noError = false;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
    }

    usedPeriph |= deckInfos[i].driver->usedPeriph;
 800704e:	4917      	ldr	r1, [pc, #92]	; (80070ac <checkPeriphAndGpioConflicts+0xd8>)
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	015b      	lsls	r3, r3, #5
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	3378      	adds	r3, #120	; 0x78
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
    usedGpio |= deckInfos[i].driver->usedGpio;
 8007068:	4910      	ldr	r1, [pc, #64]	; (80070ac <checkPeriphAndGpioConflicts+0xd8>)
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4613      	mov	r3, r2
 800706e:	015b      	lsls	r3, r3, #5
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3378      	adds	r3, #120	; 0x78
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3301      	adds	r3, #1
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <checkPeriphAndGpioConflicts+0xe8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	dbac      	blt.n	8006fec <checkPeriphAndGpioConflicts+0x18>
  }

  if (!noError) {
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	f083 0301 	eor.w	r3, r3, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <checkPeriphAndGpioConflicts+0xd0>
    count = 0;
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <checkPeriphAndGpioConflicts+0xe8>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
  }
}
 80070a4:	bf00      	nop
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	200036f4 	.word	0x200036f4
 80070b0:	ffffe3f3 	.word	0xffffe3f3
 80070b4:	0802c48c 	.word	0x0802c48c
 80070b8:	0802c4fc 	.word	0x0802c4fc
 80070bc:	20009434 	.word	0x20009434

080070c0 <findType>:

/****** Key/value area handling ********/
static int findType(TlvArea *tlv, int type) {
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  int pos = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]

  while (pos < tlv->length) {
 80070ce:	e014      	b.n	80070fa <findType+0x3a>
    if (tlv->data[pos] == type) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4293      	cmp	r3, r2
 80070e0:	d101      	bne.n	80070e6 <findType+0x26>
      return pos;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	e010      	b.n	8007108 <findType+0x48>
    } else {
      pos += tlv->data[pos+1]+2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	4413      	add	r3, r2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	3302      	adds	r3, #2
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  while (pos < tlv->length) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	429a      	cmp	r2, r3
 8007102:	dbe5      	blt.n	80070d0 <findType+0x10>
    }
  }
  return -1;
 8007104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <deckTlvHasElement>:

bool deckTlvHasElement(TlvArea *tlv, int type) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  return findType(tlv, type) >= 0;
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff ffcd 	bl	80070c0 <findType>
 8007126:	4603      	mov	r3, r0
 8007128:	43db      	mvns	r3, r3
 800712a:	0fdb      	lsrs	r3, r3, #31
 800712c:	b2db      	uxtb	r3, r3
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <deckTlvGetString>:

int deckTlvGetString(TlvArea *tlv, int type, char *string, int length) {
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
  int pos = findType(tlv, type);
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff ffba 	bl	80070c0 <findType>
 800714c:	6138      	str	r0, [r7, #16]
  int strlength = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]

  if (pos >= 0) {
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	db1e      	blt.n	8007196 <deckTlvGetString+0x60>
    strlength = tlv->data[pos+1];
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	3301      	adds	r3, #1
 8007160:	4413      	add	r3, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]

    if (strlength > (length-1)) {
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	dc02      	bgt.n	8007174 <deckTlvGetString+0x3e>
      strlength = length-1;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	3b01      	subs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
    }

    memcpy(string, &tlv->data[pos+2], strlength);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	3302      	adds	r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f01d fdf7 	bl	8024d76 <memcpy>
    string[strlength] = '\0';
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]

    return strlength;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	e004      	b.n	80071a0 <deckTlvGetString+0x6a>
  } else {
    string[0] = '\0';
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]

    return -1;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <scanRequiredSystemProperties>:
  output->length = 0;
  output->data = (uint8_t *)deckTlvGetBuffer(tlv, type, &output->length);
}

static void scanRequiredSystemProperties(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
  bool isError = false;
 80071ae:	2300      	movs	r3, #0
 80071b0:	71fb      	strb	r3, [r7, #7]

  for (int i = 0; i < count; i++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	e032      	b.n	800721e <scanRequiredSystemProperties+0x76>
  {
    isError = isError || registerRequiredEstimator(deckInfos[i].driver->requiredEstimator);
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10f      	bne.n	80071de <scanRequiredSystemProperties+0x36>
 80071be:	491f      	ldr	r1, [pc, #124]	; (800723c <scanRequiredSystemProperties+0x94>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	015b      	lsls	r3, r3, #5
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	3378      	adds	r3, #120	; 0x78
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	7c1b      	ldrb	r3, [r3, #16]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f838 	bl	8007248 <registerRequiredEstimator>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <scanRequiredSystemProperties+0x3a>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <scanRequiredSystemProperties+0x3c>
 80071e2:	2300      	movs	r3, #0
 80071e4:	71fb      	strb	r3, [r7, #7]
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	71fb      	strb	r3, [r7, #7]
    requiredLowInterferenceRadioMode |= deckInfos[i].driver->requiredLowInterferenceRadioMode;
 80071ee:	4913      	ldr	r1, [pc, #76]	; (800723c <scanRequiredSystemProperties+0x94>)
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	4613      	mov	r3, r2
 80071f4:	015b      	lsls	r3, r3, #5
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	3378      	adds	r3, #120	; 0x78
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	7c5a      	ldrb	r2, [r3, #17]
 8007202:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <scanRequiredSystemProperties+0x98>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	bf14      	ite	ne
 800720e:	2301      	movne	r3, #1
 8007210:	2300      	moveq	r3, #0
 8007212:	b2da      	uxtb	r2, r3
 8007214:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <scanRequiredSystemProperties+0x98>)
 8007216:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < count; i++)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <scanRequiredSystemProperties+0x9c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	dbc7      	blt.n	80071b8 <scanRequiredSystemProperties+0x10>
  }

  if (isError) {
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <scanRequiredSystemProperties+0x8c>
    count = 0;
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <scanRequiredSystemProperties+0x9c>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
  }
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	200036f4 	.word	0x200036f4
 8007240:	20009439 	.word	0x20009439
 8007244:	20009434 	.word	0x20009434

08007248 <registerRequiredEstimator>:

static bool registerRequiredEstimator(StateEstimatorType estimator)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	71fb      	strb	r3, [r7, #7]
  bool isError = false;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  if (StateEstimatorTypeAutoSelect != estimator)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d012      	beq.n	8007282 <registerRequiredEstimator+0x3a>
  {
    if (StateEstimatorTypeAutoSelect == requiredEstimator)
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <registerRequiredEstimator+0x44>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d103      	bne.n	800726c <registerRequiredEstimator+0x24>
    {
      requiredEstimator = estimator;
 8007264:	4a09      	ldr	r2, [pc, #36]	; (800728c <registerRequiredEstimator+0x44>)
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	7013      	strb	r3, [r2, #0]
 800726a:	e00a      	b.n	8007282 <registerRequiredEstimator+0x3a>
    }
    else
    {
      if (requiredEstimator != estimator) {
 800726c:	4b07      	ldr	r3, [pc, #28]	; (800728c <registerRequiredEstimator+0x44>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	79fa      	ldrb	r2, [r7, #7]
 8007272:	429a      	cmp	r2, r3
 8007274:	d005      	beq.n	8007282 <registerRequiredEstimator+0x3a>
        isError = true;
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
        DEBUG_PRINT("WARNING: Two decks require different estimators\n");
 800727a:	4905      	ldr	r1, [pc, #20]	; (8007290 <registerRequiredEstimator+0x48>)
 800727c:	2000      	movs	r0, #0
 800727e:	f00a fe11 	bl	8011ea4 <SEGGER_RTT_printf>
      }
    }
  }

  return isError;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20009438 	.word	0x20009438
 8007290:	0802c568 	.word	0x0802c568

08007294 <handleMemGetSize>:
#include "test_support.h"


static const uint32_t DECK_MEM_MAX_SIZE = 0x10000000;

static uint32_t handleMemGetSize(void) { return DECK_MEM_MAX_SIZE * (DECK_MAX_COUNT + 1); }
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
 8007298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	4618      	mov	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <populateBitfield1>:
static const uint8_t DECK_MEMORY_MASK_COMMAND_RESET_TO_BOOTLOADER = 2;

static const uint32_t COMMAND_BITFIELD_ADR = 0x4;


static uint8_t populateBitfield1(const DeckMemDef_t* memDef) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
    uint8_t result = MASK_IS_VALID;
 80072b4:	2301      	movs	r3, #1
 80072b6:	73fb      	strb	r3, [r7, #15]

    const uint8_t properties = memDef->properties();
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4798      	blx	r3
 80072be:	4603      	mov	r3, r0
 80072c0:	73bb      	strb	r3, [r7, #14]
    if (properties & DECK_MEMORY_MASK_STARTED) {
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <populateBitfield1+0x28>
        result |= MASK_IS_STARTED;
 80072cc:	2202      	movs	r2, #2
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	73fb      	strb	r3, [r7, #15]
    }

    if (properties & DECK_MEMORY_MASK_UPGRADE_REQUIRED) {
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <populateBitfield1+0x3a>
        result |= MASK_UPGRADE_REQUIRED;
 80072de:	2220      	movs	r2, #32
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	73fb      	strb	r3, [r7, #15]
    }

    if (properties & DECK_MEMORY_MASK_BOOT_LOADER_ACTIVE) {
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <populateBitfield1+0x4c>
        result |= MASK_BOOTLOADER_ACTIVE;
 80072f0:	2240      	movs	r2, #64	; 0x40
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	73fb      	strb	r3, [r7, #15]
    }

    if (memDef->read) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <populateBitfield1+0x5c>
        result |= MASK_SUPPORTS_READ;
 8007300:	2204      	movs	r2, #4
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	4313      	orrs	r3, r2
 8007306:	73fb      	strb	r3, [r7, #15]
    }

    if (memDef->write) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <populateBitfield1+0x6c>
        result |= MASK_SUPPORTS_WRITE;
 8007310:	2208      	movs	r2, #8
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	4313      	orrs	r3, r2
 8007316:	73fb      	strb	r3, [r7, #15]
    }

    if (memDef->supportsUpgrade) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7b1b      	ldrb	r3, [r3, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <populateBitfield1+0x7c>
        result |= MASK_SUPPORTS_UPGRADE;
 8007320:	2210      	movs	r2, #16
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	4313      	orrs	r3, r2
 8007326:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <populateBitfield2>:

static uint8_t populateBitfield2(const DeckMemDef_t* memDef) {
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
    uint8_t result = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]

    if (memDef->commandResetToFw) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <populateBitfield2+0x1c>
        result |= DECK_MEMORY_MASK_SUPPORTS_RESET_TO_FW;
 8007346:	2201      	movs	r2, #1
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4313      	orrs	r3, r2
 800734c:	73fb      	strb	r3, [r7, #15]
    }

    if (memDef->commandResetToBootloader) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <populateBitfield2+0x2c>
        result |= DECK_MEMORY_MASK_SUPPORTS_RESET_TO_BOOTLOADER;
 8007356:	2202      	movs	r2, #2
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	4313      	orrs	r3, r2
 800735c:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <populateDeckMemoryInfoBuffer>:

static void populateDeckMemoryInfoBuffer(const DeckMemDef_t *deckMemDef,
                                         const char *name,
                                         uint32_t baseAddress,
                                         uint8_t buffer[])
{
 800736c:	b5b0      	push	{r4, r5, r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
    buffer[OFFS_BITFIELD1] = populateBitfield1(deckMemDef);
 800737a:	2300      	movs	r3, #0
 800737c:	461a      	mov	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	189c      	adds	r4, r3, r2
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff ff92 	bl	80072ac <populateBitfield1>
 8007388:	4603      	mov	r3, r0
 800738a:	7023      	strb	r3, [r4, #0]
    buffer[OFFS_BITFIELD2] = populateBitfield2(deckMemDef);
 800738c:	2301      	movs	r3, #1
 800738e:	461a      	mov	r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	189c      	adds	r4, r3, r2
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff ffcc 	bl	8007332 <populateBitfield2>
 800739a:	4603      	mov	r3, r0
 800739c:	7023      	strb	r3, [r4, #0]
    memcpy(&buffer[OFFS_REQ_HASH], &deckMemDef->requiredHash, 4);
 800739e:	2302      	movs	r3, #2
 80073a0:	461a      	mov	r2, r3
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	3214      	adds	r2, #20
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	601a      	str	r2, [r3, #0]
    memcpy(&buffer[OFFS_REQ_LEN], &deckMemDef->requiredSize, 4);
 80073ae:	2306      	movs	r3, #6
 80073b0:	461a      	mov	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	3218      	adds	r2, #24
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	601a      	str	r2, [r3, #0]
    memcpy(&buffer[OFFS_BASE_ADDR], &baseAddress, 4);
 80073be:	230a      	movs	r3, #10
 80073c0:	461a      	mov	r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	4413      	add	r3, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
    strncpy((char*)&buffer[OFFS_NAME], name, NAME_LEN_EX_ZERO_TREM);
 80073ca:	230e      	movs	r3, #14
 80073cc:	461a      	mov	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	4413      	add	r3, r2
 80073d2:	2211      	movs	r2, #17
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f01d fb88 	bl	8024aec <strncpy>
    //
    // If the memory definition has an id we append it to the name using
    // a colon:
    // name "bcAI" + id "gap8" => "bcAI:gap8"
    //
    if (deckMemDef->id) {
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01f      	beq.n	8007424 <populateDeckMemoryInfoBuffer+0xb8>
        size_t namelen = strlen(name);
 80073e4:	68b8      	ldr	r0, [r7, #8]
 80073e6:	f7f8 ff53 	bl	8000290 <strlen>
 80073ea:	6178      	str	r0, [r7, #20]
        buffer[OFFS_NAME + namelen] = ':';
 80073ec:	230e      	movs	r3, #14
 80073ee:	461a      	mov	r2, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	4413      	add	r3, r2
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	4413      	add	r3, r2
 80073f8:	223a      	movs	r2, #58	; 0x3a
 80073fa:	701a      	strb	r2, [r3, #0]
        memcpy(
            &buffer[OFFS_NAME] + namelen + 1,
 80073fc:	230e      	movs	r3, #14
 80073fe:	461a      	mov	r2, r3
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	4413      	add	r3, r2
 8007404:	3301      	adds	r3, #1
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	18d4      	adds	r4, r2, r3
            deckMemDef->id,
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	69dd      	ldr	r5, [r3, #28]
            strlen(deckMemDef->id)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	69db      	ldr	r3, [r3, #28]
        memcpy(
 8007412:	4618      	mov	r0, r3
 8007414:	f7f8 ff3c 	bl	8000290 <strlen>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	4629      	mov	r1, r5
 800741e:	4620      	mov	r0, r4
 8007420:	f01d fca9 	bl	8024d76 <memcpy>
        );
    }
}
 8007424:	bf00      	nop
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bdb0      	pop	{r4, r5, r7, pc}

0800742c <populateDeckMemoryInfos>:

//
// Fill in information to the deck memory areas primary and secondary, if
// present. The information is taken from the deck driver.
//
static void populateDeckMemoryInfos(uint8_t buffer[], const int deckNr) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
    DeckInfo* info = deckInfo(deckNr);
 8007436:	6838      	ldr	r0, [r7, #0]
 8007438:	f7ff fb36 	bl	8006aa8 <deckInfo>
 800743c:	61f8      	str	r0, [r7, #28]
    memset(buffer, 0, DECK_MEMORY_INFO_SIZE * 2); // primary plus secondary
 800743e:	2320      	movs	r3, #32
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	461a      	mov	r2, r3
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f01d fb1a 	bl	8024a80 <memset>

    const DeckMemDef_t* deckMemDef = info->driver->memoryDef;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	61bb      	str	r3, [r7, #24]
    if (deckMemDef) {
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00f      	beq.n	800747a <populateDeckMemoryInfos+0x4e>
        uint32_t baseAddress = (deckNr + 1) * DECK_MEM_MAX_SIZE;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	461a      	mov	r2, r3
 8007460:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007464:	fb02 f303 	mul.w	r3, r2, r3
 8007468:	617b      	str	r3, [r7, #20]
        populateDeckMemoryInfoBuffer(deckMemDef, info->driver->name,
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746e:	6859      	ldr	r1, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	69b8      	ldr	r0, [r7, #24]
 8007476:	f7ff ff79 	bl	800736c <populateDeckMemoryInfoBuffer>
                                     baseAddress, buffer);
    }

    const DeckMemDef_t* deckMemDefSecondary = info->driver->memoryDefSecondary;
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	613b      	str	r3, [r7, #16]
    if (deckMemDefSecondary) {
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <populateDeckMemoryInfos+0x82>
        uint32_t baseAddress = (deckNr + 2) * DECK_MEM_MAX_SIZE;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	3302      	adds	r3, #2
 800748c:	461a      	mov	r2, r3
 800748e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007492:	fb02 f303 	mul.w	r3, r2, r3
 8007496:	60fb      	str	r3, [r7, #12]
        populateDeckMemoryInfoBuffer(deckMemDefSecondary, info->driver->name,
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	2320      	movs	r3, #32
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	6938      	ldr	r0, [r7, #16]
 80074aa:	f7ff ff5f 	bl	800736c <populateDeckMemoryInfoBuffer>
                                     baseAddress, buffer + DECK_MEMORY_INFO_SIZE);
    }
}
 80074ae:	bf00      	nop
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <handleInfoSectionRead>:

static bool handleInfoSectionRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* buffer, const int nrOfDecks) {
 80074b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074ba:	b08d      	sub	sp, #52	; 0x34
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	460b      	mov	r3, r1
 80074c6:	72fb      	strb	r3, [r7, #11]
    uint32_t index = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bytesLeft = readLen;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    memset(buffer, 0, readLen);
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	461a      	mov	r2, r3
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f01d fad1 	bl	8024a80 <memset>

    // First byte is the version
    if (0 == (memAddr + index) && bytesLeft > 0) {
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	4413      	add	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f040 8083 	bne.w	80075f0 <handleInfoSectionRead+0x13a>
 80074ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d07e      	beq.n	80075f0 <handleInfoSectionRead+0x13a>
        buffer[index] = VERSION;
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	4413      	add	r3, r2
 80074f8:	2203      	movs	r2, #3
 80074fa:	701a      	strb	r2, [r3, #0]
        index++;
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	3301      	adds	r3, #1
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
        bytesLeft--;
 8007502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007506:	3b01      	subs	r3, #1
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    // Deck memory infos, it is times 2 because we can have a secondary memDef
    while (bytesLeft > 0) {
 800750c:	e070      	b.n	80075f0 <handleInfoSectionRead+0x13a>
 800750e:	466b      	mov	r3, sp
 8007510:	461e      	mov	r6, r3
        int deckNr = (memAddr + index - 1) / (DECK_MEMORY_INFO_SIZE * 2);
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	4413      	add	r3, r2
 8007518:	3b01      	subs	r3, #1
 800751a:	2220      	movs	r2, #32
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007522:	623b      	str	r3, [r7, #32]

        if (deckNr >= nrOfDecks) {
 8007524:	6a3a      	ldr	r2, [r7, #32]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	db01      	blt.n	8007530 <handleInfoSectionRead+0x7a>
            break;
 800752c:	46b5      	mov	sp, r6
 800752e:	e063      	b.n	80075f8 <handleInfoSectionRead+0x142>
        }

        uint8_t deckMemoryInfo[DECK_MEMORY_INFO_SIZE * 2];
 8007530:	2320      	movs	r3, #32
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	3b01      	subs	r3, #1
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	2320      	movs	r3, #32
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	461a      	mov	r2, r3
 800753e:	2300      	movs	r3, #0
 8007540:	4614      	mov	r4, r2
 8007542:	461d      	mov	r5, r3
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	00eb      	lsls	r3, r5, #3
 800754e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007552:	00e2      	lsls	r2, r4, #3
 8007554:	2320      	movs	r3, #32
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	4690      	mov	r8, r2
 800755e:	4699      	mov	r9, r3
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800756c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007570:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007574:	2320      	movs	r3, #32
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	3307      	adds	r3, #7
 800757a:	08db      	lsrs	r3, r3, #3
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	ebad 0d03 	sub.w	sp, sp, r3
 8007582:	466b      	mov	r3, sp
 8007584:	3300      	adds	r3, #0
 8007586:	61bb      	str	r3, [r7, #24]

        populateDeckMemoryInfos(deckMemoryInfo, deckNr);
 8007588:	6a39      	ldr	r1, [r7, #32]
 800758a:	69b8      	ldr	r0, [r7, #24]
 800758c:	f7ff ff4e 	bl	800742c <populateDeckMemoryInfos>

        int startAddrOfThisInfo = deckNr * (DECK_MEMORY_INFO_SIZE * 2) + 1;
 8007590:	2220      	movs	r2, #32
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	3301      	adds	r3, #1
 800759c:	617b      	str	r3, [r7, #20]
        int firstByteToUse = memAddr + index - startAddrOfThisInfo;
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	441a      	add	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	613b      	str	r3, [r7, #16]

        int bytesToUse = (DECK_MEMORY_INFO_SIZE * 2) - firstByteToUse;
 80075aa:	2320      	movs	r3, #32
 80075ac:	005a      	lsls	r2, r3, #1
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesLeft < bytesToUse) {
 80075b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ba:	429a      	cmp	r2, r3
 80075bc:	dd02      	ble.n	80075c4 <handleInfoSectionRead+0x10e>
            bytesToUse = bytesLeft;
 80075be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
        }

        memcpy(buffer + index, (uint8_t*)(&deckMemoryInfo) + firstByteToUse, bytesToUse);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	18d0      	adds	r0, r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4413      	add	r3, r2
 80075d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d2:	4619      	mov	r1, r3
 80075d4:	f01d fbcf 	bl	8024d76 <memcpy>
        bytesLeft -= bytesToUse;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        index += bytesToUse;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ea:	4413      	add	r3, r2
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ee:	46b5      	mov	sp, r6
    while (bytesLeft > 0) {
 80075f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d18a      	bne.n	800750e <handleInfoSectionRead+0x58>
    }

    return true;
 80075f8:	2301      	movs	r3, #1
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3734      	adds	r7, #52	; 0x34
 80075fe:	46bd      	mov	sp, r7
 8007600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007604 <handleDeckSectionRead>:

static bool handleDeckSectionRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* buffer, const int deckNr, const MemSelector selector) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b08a      	sub	sp, #40	; 0x28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	460b      	mov	r3, r1
 8007612:	72fb      	strb	r3, [r7, #11]
    bool result = false;
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    const DeckInfo* info = deckInfo(deckNr);
 800761a:	6838      	ldr	r0, [r7, #0]
 800761c:	f7ff fa44 	bl	8006aa8 <deckInfo>
 8007620:	61f8      	str	r0, [r7, #28]

    const DeckMemDef_t* deckMemDef = info->driver->memoryDef;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	623b      	str	r3, [r7, #32]
    if (selector == MEM_SECONDARY) {
 800762a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800762e:	2b01      	cmp	r3, #1
 8007630:	d103      	bne.n	800763a <handleDeckSectionRead+0x36>
        deckMemDef = info->driver->memoryDefSecondary;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	623b      	str	r3, [r7, #32]
    }

    if (deckMemDef) {
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01a      	beq.n	8007676 <handleDeckSectionRead+0x72>
        if (deckMemDef->read) {
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d016      	beq.n	8007676 <handleDeckSectionRead+0x72>
            uint32_t baseAddress = (deckNr + 1) * DECK_MEM_MAX_SIZE + selector * DECK_MEM_MAX_SIZE;
 8007648:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	4413      	add	r3, r2
 8007650:	3301      	adds	r3, #1
 8007652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007656:	fb02 f303 	mul.w	r3, r2, r3
 800765a:	61bb      	str	r3, [r7, #24]
            uint32_t deckAddress = memAddr - baseAddress;
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	617b      	str	r3, [r7, #20]
            result = deckMemDef->read(deckAddress, readLen, buffer);
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	7af9      	ldrb	r1, [r7, #11]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return result;
 8007676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800767a:	4618      	mov	r0, r3
 800767c:	3728      	adds	r7, #40	; 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <handleCommandForDevice>:

static void handleCommandForDevice(const DeckMemDef_t* memoryDef, const uint32_t adr, const uint8_t value) {
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	4613      	mov	r3, r2
 800768e:	71fb      	strb	r3, [r7, #7]
    if (adr < COMMAND_BITFIELD_ADR) {
 8007690:	2204      	movs	r2, #4
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4293      	cmp	r3, r2
 8007696:	d20c      	bcs.n	80076b2 <handleCommandForDevice+0x30>
        if (memoryDef->newFwSizeP) {
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d026      	beq.n	80076ee <handleCommandForDevice+0x6c>
            uint8_t* newFwSizePtr = (uint8_t*)memoryDef->newFwSizeP;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	617b      	str	r3, [r7, #20]
            newFwSizePtr[adr] = value;
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4413      	add	r3, r2
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	701a      	strb	r2, [r3, #0]
        }
        if (value & DECK_MEMORY_MASK_COMMAND_RESET_TO_BOOTLOADER && memoryDef->commandResetToBootloader) {
            memoryDef->commandResetToBootloader();
        }
    }
}
 80076b0:	e01d      	b.n	80076ee <handleCommandForDevice+0x6c>
    else if (adr == COMMAND_BITFIELD_ADR) {
 80076b2:	2204      	movs	r2, #4
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d119      	bne.n	80076ee <handleCommandForDevice+0x6c>
        if (value & DECK_MEMORY_MASK_COMMAND_RESET_TO_FW && memoryDef->commandResetToFw) {
 80076ba:	2201      	movs	r2, #1
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	4013      	ands	r3, r2
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <handleCommandForDevice+0x52>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <handleCommandForDevice+0x52>
            memoryDef->commandResetToFw();
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	4798      	blx	r3
        if (value & DECK_MEMORY_MASK_COMMAND_RESET_TO_BOOTLOADER && memoryDef->commandResetToBootloader) {
 80076d4:	2202      	movs	r2, #2
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	4013      	ands	r3, r2
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d006      	beq.n	80076ee <handleCommandForDevice+0x6c>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <handleCommandForDevice+0x6c>
            memoryDef->commandResetToBootloader();
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	4798      	blx	r3
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <handleCommandSectionWrite>:

static bool handleCommandSectionWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* buffer, const int nrOfDecks) {
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b08c      	sub	sp, #48	; 0x30
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	460b      	mov	r3, r1
 8007704:	72fb      	strb	r3, [r7, #11]
    for (uint32_t i = 0; i < writeLen; i++) {
 8007706:	2300      	movs	r3, #0
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770a:	e046      	b.n	800779a <handleCommandSectionWrite+0xa4>
        uint32_t adr = memAddr + i;
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	4413      	add	r3, r2
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28
        if (adr >= COMMAND_BASE_ADR) {
 8007714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	4293      	cmp	r3, r2
 800771c:	d33a      	bcc.n	8007794 <handleCommandSectionWrite+0x9e>
            uint32_t relAdr = adr - COMMAND_BASE_ADR;
 800771e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
            int deckNr = relAdr / (DECK_MEMORY_COMMAND_SIZE * 2);
 8007728:	2320      	movs	r3, #32
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	623b      	str	r3, [r7, #32]
            if (deckNr < nrOfDecks) {
 8007734:	6a3a      	ldr	r2, [r7, #32]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	da2b      	bge.n	8007794 <handleCommandSectionWrite+0x9e>
                const DeckInfo* info = deckInfo(deckNr);
 800773c:	6a38      	ldr	r0, [r7, #32]
 800773e:	f7ff f9b3 	bl	8006aa8 <deckInfo>
 8007742:	61f8      	str	r0, [r7, #28]
                uint32_t commandAdr = relAdr % DECK_MEMORY_COMMAND_SIZE;
 8007744:	2220      	movs	r2, #32
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	fbb3 f1f2 	udiv	r1, r3, r2
 800774c:	fb01 f202 	mul.w	r2, r1, r2
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
                uint32_t selector = (relAdr / DECK_MEMORY_COMMAND_SIZE) % 2;
 8007754:	2220      	movs	r2, #32
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	fbb3 f3f2 	udiv	r3, r3, r2
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	617b      	str	r3, [r7, #20]
                uint8_t value = buffer[i];
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	4413      	add	r3, r2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	74fb      	strb	r3, [r7, #19]
                if (selector == 0) {
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d108      	bne.n	8007784 <handleCommandSectionWrite+0x8e>
                    handleCommandForDevice(info->driver->memoryDef, commandAdr, value);
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	7cfa      	ldrb	r2, [r7, #19]
 800777a:	69b9      	ldr	r1, [r7, #24]
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff ff80 	bl	8007682 <handleCommandForDevice>
 8007782:	e007      	b.n	8007794 <handleCommandSectionWrite+0x9e>
                } else {
                    handleCommandForDevice(info->driver->memoryDefSecondary, commandAdr, value);
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	7cfa      	ldrb	r2, [r7, #19]
 800778c:	69b9      	ldr	r1, [r7, #24]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff ff77 	bl	8007682 <handleCommandForDevice>
    for (uint32_t i = 0; i < writeLen; i++) {
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	3301      	adds	r3, #1
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800779a:	7afb      	ldrb	r3, [r7, #11]
 800779c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779e:	429a      	cmp	r2, r3
 80077a0:	d3b4      	bcc.n	800770c <handleCommandSectionWrite+0x16>
                }
            }
        }
    }

    return true;
 80077a2:	2301      	movs	r3, #1
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3730      	adds	r7, #48	; 0x30
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <handleDeckSectionWrite>:

static bool handleDeckSectionWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* buffer, const int deckNr, const MemSelector selector) {
 80077ac:	b590      	push	{r4, r7, lr}
 80077ae:	b08b      	sub	sp, #44	; 0x2c
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	460b      	mov	r3, r1
 80077ba:	72fb      	strb	r3, [r7, #11]
    bool result = false;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    const DeckInfo* info = deckInfo(deckNr);
 80077c2:	6838      	ldr	r0, [r7, #0]
 80077c4:	f7ff f970 	bl	8006aa8 <deckInfo>
 80077c8:	61f8      	str	r0, [r7, #28]

    const DeckMemDef_t* deckMemDef = info->driver->memoryDef;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	623b      	str	r3, [r7, #32]
    if (selector == MEM_SECONDARY) {
 80077d2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d103      	bne.n	80077e2 <handleDeckSectionWrite+0x36>
        deckMemDef = info->driver->memoryDefSecondary;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	623b      	str	r3, [r7, #32]
    }

    if (deckMemDef) {
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01b      	beq.n	8007820 <handleDeckSectionWrite+0x74>
        if (deckMemDef->write) {
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d017      	beq.n	8007820 <handleDeckSectionWrite+0x74>
            uint32_t baseAddress = (deckNr + 1) * DECK_MEM_MAX_SIZE + selector * DECK_MEM_MAX_SIZE;
 80077f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4413      	add	r3, r2
 80077f8:	3301      	adds	r3, #1
 80077fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
 8007802:	61bb      	str	r3, [r7, #24]
            uint32_t deckAddress = memAddr - baseAddress;
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	617b      	str	r3, [r7, #20]
            result = deckMemDef->write(deckAddress, writeLen, buffer, deckMemDef);
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	681c      	ldr	r4, [r3, #0]
 8007810:	7af9      	ldrb	r1, [r7, #11]
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6978      	ldr	r0, [r7, #20]
 8007818:	47a0      	blx	r4
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return result;
 8007820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007824:	4618      	mov	r0, r3
 8007826:	372c      	adds	r7, #44	; 0x2c
 8007828:	46bd      	mov	sp, r7
 800782a:	bd90      	pop	{r4, r7, pc}

0800782c <handleMemRead>:

TESTABLE_STATIC bool handleMemRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* buffer) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	460b      	mov	r3, r1
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	72fb      	strb	r3, [r7, #11]
    bool result = false;
 800783a:	2300      	movs	r3, #0
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int nrOfDecks = deckCount();
 8007840:	f7ff f926 	bl	8006a90 <deckCount>
 8007844:	6238      	str	r0, [r7, #32]

    // Assume the buffer is fully within one section. It may not be true, but unlikely
    // and not an important use case to support
    const uint32_t section = memAddr / DECK_MEM_MAX_SIZE;
 8007846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007850:	61fb      	str	r3, [r7, #28]
    if (section == 0) {
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <handleMemRead+0x40>
        result = handleInfoSectionRead(memAddr, readLen, buffer, nrOfDecks);
 8007858:	7af9      	ldrb	r1, [r7, #11]
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff fe29 	bl	80074b6 <handleInfoSectionRead>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800786a:	e01a      	b.n	80078a2 <handleMemRead+0x76>
    } else {
        MemSelector selector = (section - 1) % 2;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	76fb      	strb	r3, [r7, #27]
        int deckNr = (section - 1) / 2;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	3b01      	subs	r3, #1
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	617b      	str	r3, [r7, #20]
        if (deckNr < nrOfDecks * 2) {
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	429a      	cmp	r2, r3
 800788a:	da0a      	bge.n	80078a2 <handleMemRead+0x76>
            result = handleDeckSectionRead(memAddr, readLen, buffer, deckNr, selector);
 800788c:	7af9      	ldrb	r1, [r7, #11]
 800788e:	7efb      	ldrb	r3, [r7, #27]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff feb4 	bl	8007604 <handleDeckSectionRead>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return result;
 80078a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3728      	adds	r7, #40	; 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <handleMemWrite>:

TESTABLE_STATIC bool handleMemWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* buffer) {
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b08c      	sub	sp, #48	; 0x30
 80078b2:	af02      	add	r7, sp, #8
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	460b      	mov	r3, r1
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	72fb      	strb	r3, [r7, #11]
    bool result = false;
 80078bc:	2300      	movs	r3, #0
 80078be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int nrOfDecks = deckCount();
 80078c2:	f7ff f8e5 	bl	8006a90 <deckCount>
 80078c6:	6238      	str	r0, [r7, #32]

    // Assume the buffer is fully within one section. It may not be true, but unlikely
    // and not an important use case to support
    const uint32_t section = memAddr / DECK_MEM_MAX_SIZE;
 80078c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d2:	61fb      	str	r3, [r7, #28]
    if (section == 0) {
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <handleMemWrite+0x40>
        result = handleCommandSectionWrite(memAddr, writeLen, buffer, nrOfDecks);
 80078da:	7af9      	ldrb	r1, [r7, #11]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff ff08 	bl	80076f6 <handleCommandSectionWrite>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078ec:	e01a      	b.n	8007924 <handleMemWrite+0x76>
    } else {
        MemSelector selector = (section - 1) % 2;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	76fb      	strb	r3, [r7, #27]
        int deckNr = (section - 1) / 2;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3b01      	subs	r3, #1
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	617b      	str	r3, [r7, #20]
        if (deckNr < nrOfDecks * 2) {
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	429a      	cmp	r2, r3
 800790c:	da0a      	bge.n	8007924 <handleMemWrite+0x76>
            result = handleDeckSectionWrite(memAddr, writeLen, buffer, deckNr, selector);
 800790e:	7af9      	ldrb	r1, [r7, #11]
 8007910:	7efb      	ldrb	r3, [r7, #27]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff ff47 	bl	80077ac <handleDeckSectionWrite>
 800791e:	4603      	mov	r3, r0
 8007920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return result;
 8007924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	; 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <deckMemoryInit>:

void deckMemoryInit() {
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
    memoryRegisterHandler(&memoryDef);
 8007934:	4802      	ldr	r0, [pc, #8]	; (8007940 <deckMemoryInit+0x10>)
 8007936:	f7fd fbb7 	bl	80050a8 <memoryRegisterHandler>
}
 800793a:	bf00      	nop
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	0802efd8 	.word	0x0802efd8

08007944 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 800794c:	4b64      	ldr	r3, [pc, #400]	; (8007ae0 <estimatorEnqueue+0x19c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80bf 	beq.w	8007ad4 <estimatorEnqueue+0x190>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8007956:	4b63      	ldr	r3, [pc, #396]	; (8007ae4 <estimatorEnqueue+0x1a0>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	2b00      	cmp	r3, #0
 8007960:	bf14      	ite	ne
 8007962:	2301      	movne	r3, #1
 8007964:	2300      	moveq	r3, #0
 8007966:	74fb      	strb	r3, [r7, #19]
  if (isInInterrupt) {
 8007968:	7cfb      	ldrb	r3, [r7, #19]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <estimatorEnqueue+0x58>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 8007972:	4b5b      	ldr	r3, [pc, #364]	; (8007ae0 <estimatorEnqueue+0x19c>)
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f107 020c 	add.w	r2, r7, #12
 800797a:	2300      	movs	r3, #0
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	f018 f9cb 	bl	801fd18 <xQueueGenericSendFromISR>
 8007982:	6178      	str	r0, [r7, #20]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d110      	bne.n	80079ac <estimatorEnqueue+0x68>
      portYIELD();
 800798a:	4b57      	ldr	r3, [pc, #348]	; (8007ae8 <estimatorEnqueue+0x1a4>)
 800798c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	e007      	b.n	80079ac <estimatorEnqueue+0x68>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 800799c:	4b50      	ldr	r3, [pc, #320]	; (8007ae0 <estimatorEnqueue+0x19c>)
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	2300      	movs	r3, #0
 80079a2:	2200      	movs	r2, #0
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	f018 f8a9 	bl	801fafc <xQueueGenericSend>
 80079aa:	6178      	str	r0, [r7, #20]
  }

  if (result == pdTRUE) {
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d105      	bne.n	80079be <estimatorEnqueue+0x7a>
    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
 80079b2:	4b4e      	ldr	r3, [pc, #312]	; (8007aec <estimatorEnqueue+0x1a8>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	3301      	adds	r3, #1
 80079b8:	4a4c      	ldr	r2, [pc, #304]	; (8007aec <estimatorEnqueue+0x1a8>)
 80079ba:	6093      	str	r3, [r2, #8]
 80079bc:	e004      	b.n	80079c8 <estimatorEnqueue+0x84>
  } else {
    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
 80079be:	4b4c      	ldr	r3, [pc, #304]	; (8007af0 <estimatorEnqueue+0x1ac>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a4a      	ldr	r2, [pc, #296]	; (8007af0 <estimatorEnqueue+0x1ac>)
 80079c6:	6093      	str	r3, [r2, #8]
  }

  // events
  switch (measurement->type) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b0b      	cmp	r3, #11
 80079ce:	f200 8083 	bhi.w	8007ad8 <estimatorEnqueue+0x194>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <estimatorEnqueue+0x94>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	08007a2f 	.word	0x08007a2f
 80079e0:	08007a3f 	.word	0x08007a3f
 80079e4:	08007a47 	.word	0x08007a47
 80079e8:	08007a61 	.word	0x08007a61
 80079ec:	08007a69 	.word	0x08007a69
 80079f0:	08007a71 	.word	0x08007a71
 80079f4:	08007a79 	.word	0x08007a79
 80079f8:	08007a89 	.word	0x08007a89
 80079fc:	08007abd 	.word	0x08007abd
 8007a00:	08007ac5 	.word	0x08007ac5
 8007a04:	08007acd 	.word	0x08007acd
    case MeasurementTypeTDOA:
      eventTrigger_estTDOA_payload.idA = measurement->data.tdoa.anchorIds[0];
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007a0e:	4b39      	ldr	r3, [pc, #228]	; (8007af4 <estimatorEnqueue+0x1b0>)
 8007a10:	701a      	strb	r2, [r3, #0]
      eventTrigger_estTDOA_payload.idB = measurement->data.tdoa.anchorIds[1];
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8007a18:	4b36      	ldr	r3, [pc, #216]	; (8007af4 <estimatorEnqueue+0x1b0>)
 8007a1a:	705a      	strb	r2, [r3, #1]
      eventTrigger_estTDOA_payload.distanceDiff = measurement->data.tdoa.distanceDiff;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a20:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <estimatorEnqueue+0x1b0>)
 8007a22:	f8c3 2002 	str.w	r2, [r3, #2]
      eventTrigger(&eventTrigger_estTDOA);
 8007a26:	4834      	ldr	r0, [pc, #208]	; (8007af8 <estimatorEnqueue+0x1b4>)
 8007a28:	f00a fcd6 	bl	80123d8 <eventTrigger>
      break;
 8007a2c:	e055      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypePosition:
      // for additional data, see locSrv.{x,y,z} and lighthouse.{x,y,z}
      eventTrigger_estPosition_payload.source = measurement->data.position.source;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7d1a      	ldrb	r2, [r3, #20]
 8007a32:	4b32      	ldr	r3, [pc, #200]	; (8007afc <estimatorEnqueue+0x1b8>)
 8007a34:	701a      	strb	r2, [r3, #0]
      eventTrigger(&eventTrigger_estPosition);
 8007a36:	4832      	ldr	r0, [pc, #200]	; (8007b00 <estimatorEnqueue+0x1bc>)
 8007a38:	f00a fcce 	bl	80123d8 <eventTrigger>
      break;
 8007a3c:	e04d      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypePose:
      // no payload needed, see locSrv.{x,y,z,qx,qy,qz,qw}
      eventTrigger(&eventTrigger_estPose);
 8007a3e:	4831      	ldr	r0, [pc, #196]	; (8007b04 <estimatorEnqueue+0x1c0>)
 8007a40:	f00a fcca 	bl	80123d8 <eventTrigger>
      break;
 8007a44:	e049      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeDistance:
      eventTrigger_estDistance_payload.id = measurement->data.distance.anchorId;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	7c1a      	ldrb	r2, [r3, #16]
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	; (8007b08 <estimatorEnqueue+0x1c4>)
 8007a4c:	701a      	strb	r2, [r3, #0]
      eventTrigger_estDistance_payload.distance = measurement->data.distance.distance;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	695a      	ldr	r2, [r3, #20]
 8007a52:	4b2d      	ldr	r3, [pc, #180]	; (8007b08 <estimatorEnqueue+0x1c4>)
 8007a54:	f8c3 2001 	str.w	r2, [r3, #1]
      eventTrigger(&eventTrigger_estDistance);
 8007a58:	482c      	ldr	r0, [pc, #176]	; (8007b0c <estimatorEnqueue+0x1c8>)
 8007a5a:	f00a fcbd 	bl	80123d8 <eventTrigger>
      break;
 8007a5e:	e03c      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeTOF:
      // no payload needed, see range.zrange
      eventTrigger(&eventTrigger_estTOF);
 8007a60:	482b      	ldr	r0, [pc, #172]	; (8007b10 <estimatorEnqueue+0x1cc>)
 8007a62:	f00a fcb9 	bl	80123d8 <eventTrigger>
      break;
 8007a66:	e038      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeAbsoluteHeight:
      // no payload needed, see CONFIG_DECK_LOCO_2D_POSITION
      eventTrigger(&eventTrigger_estAbsoluteHeight);
 8007a68:	482a      	ldr	r0, [pc, #168]	; (8007b14 <estimatorEnqueue+0x1d0>)
 8007a6a:	f00a fcb5 	bl	80123d8 <eventTrigger>
      break;
 8007a6e:	e034      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeFlow:
      // no payload needed, see motion.{deltaX,deltaY}
      eventTrigger(&eventTrigger_estFlow);
 8007a70:	4829      	ldr	r0, [pc, #164]	; (8007b18 <estimatorEnqueue+0x1d4>)
 8007a72:	f00a fcb1 	bl	80123d8 <eventTrigger>
      break;
 8007a76:	e030      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeYawError:
      eventTrigger_estYawError_payload.yawError = measurement->data.yawError.yawError;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a27      	ldr	r2, [pc, #156]	; (8007b1c <estimatorEnqueue+0x1d8>)
 8007a7e:	6013      	str	r3, [r2, #0]
      eventTrigger(&eventTrigger_estYawError);
 8007a80:	4827      	ldr	r0, [pc, #156]	; (8007b20 <estimatorEnqueue+0x1dc>)
 8007a82:	f00a fca9 	bl	80123d8 <eventTrigger>
      break;
 8007a86:	e028      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeSweepAngle:
      eventTrigger_estSweepAngle_payload.sensorId = measurement->data.sweepAngle.sensorId;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7e1a      	ldrb	r2, [r3, #24]
 8007a8c:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <estimatorEnqueue+0x1e0>)
 8007a8e:	701a      	strb	r2, [r3, #0]
      eventTrigger_estSweepAngle_payload.baseStationId = measurement->data.sweepAngle.baseStationId;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7e5a      	ldrb	r2, [r3, #25]
 8007a94:	4b23      	ldr	r3, [pc, #140]	; (8007b24 <estimatorEnqueue+0x1e0>)
 8007a96:	705a      	strb	r2, [r3, #1]
      eventTrigger_estSweepAngle_payload.sweepId = measurement->data.sweepAngle.sweepId;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7e9a      	ldrb	r2, [r3, #26]
 8007a9c:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <estimatorEnqueue+0x1e0>)
 8007a9e:	709a      	strb	r2, [r3, #2]
      eventTrigger_estSweepAngle_payload.t = measurement->data.sweepAngle.t;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69da      	ldr	r2, [r3, #28]
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	; (8007b24 <estimatorEnqueue+0x1e0>)
 8007aa6:	f8c3 2003 	str.w	r2, [r3, #3]
      eventTrigger_estSweepAngle_payload.sweepAngle = measurement->data.sweepAngle.measuredSweepAngle;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	4b1d      	ldr	r3, [pc, #116]	; (8007b24 <estimatorEnqueue+0x1e0>)
 8007ab0:	f8c3 2007 	str.w	r2, [r3, #7]
      eventTrigger(&eventTrigger_estSweepAngle);
 8007ab4:	481c      	ldr	r0, [pc, #112]	; (8007b28 <estimatorEnqueue+0x1e4>)
 8007ab6:	f00a fc8f 	bl	80123d8 <eventTrigger>
      break;
 8007aba:	e00e      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeGyroscope:
      // no payload needed, see gyro.{x,y,z}
      eventTrigger(&eventTrigger_estGyroscope);
 8007abc:	481b      	ldr	r0, [pc, #108]	; (8007b2c <estimatorEnqueue+0x1e8>)
 8007abe:	f00a fc8b 	bl	80123d8 <eventTrigger>
      break;
 8007ac2:	e00a      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeAcceleration:
      // no payload needed, see acc.{x,y,z}
      eventTrigger(&eventTrigger_estAcceleration);
 8007ac4:	481a      	ldr	r0, [pc, #104]	; (8007b30 <estimatorEnqueue+0x1ec>)
 8007ac6:	f00a fc87 	bl	80123d8 <eventTrigger>
      break;
 8007aca:	e006      	b.n	8007ada <estimatorEnqueue+0x196>
    case MeasurementTypeBarometer:
      // no payload needed, see baro.asl
      eventTrigger(&eventTrigger_estBarometer);
 8007acc:	4819      	ldr	r0, [pc, #100]	; (8007b34 <estimatorEnqueue+0x1f0>)
 8007ace:	f00a fc83 	bl	80123d8 <eventTrigger>
      break;
 8007ad2:	e002      	b.n	8007ada <estimatorEnqueue+0x196>
    return;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <estimatorEnqueue+0x196>
    default:
      break;
 8007ad8:	bf00      	nop
  }
}
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	2000943c 	.word	0x2000943c
 8007ae4:	e000ed00 	.word	0xe000ed00
 8007ae8:	e000ed04 	.word	0xe000ed04
 8007aec:	2000073c 	.word	0x2000073c
 8007af0:	20000758 	.word	0x20000758
 8007af4:	20009440 	.word	0x20009440
 8007af8:	0802a8e0 	.word	0x0802a8e0
 8007afc:	20009448 	.word	0x20009448
 8007b00:	0802a8f4 	.word	0x0802a8f4
 8007b04:	0802a908 	.word	0x0802a908
 8007b08:	2000944c 	.word	0x2000944c
 8007b0c:	0802a91c 	.word	0x0802a91c
 8007b10:	0802a930 	.word	0x0802a930
 8007b14:	0802a944 	.word	0x0802a944
 8007b18:	0802a958 	.word	0x0802a958
 8007b1c:	20009454 	.word	0x20009454
 8007b20:	0802a96c 	.word	0x0802a96c
 8007b24:	20009458 	.word	0x20009458
 8007b28:	0802a980 	.word	0x0802a980
 8007b2c:	0802a994 	.word	0x0802a994
 8007b30:	0802a9a8 	.word	0x0802a9a8
 8007b34:	0802a9bc 	.word	0x0802a9bc

08007b38 <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 8007b40:	4b08      	ldr	r3, [pc, #32]	; (8007b64 <estimatorDequeue+0x2c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2200      	movs	r2, #0
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f018 f979 	bl	801fe40 <xQueueReceive>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	2000943c 	.word	0x2000943c

08007b68 <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 8007b6e:	4817      	ldr	r0, [pc, #92]	; (8007bcc <estimatorKalmanTaskInit+0x64>)
 8007b70:	f000 fb7c 	bl	800826c <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 8007b74:	2203      	movs	r2, #3
 8007b76:	2100      	movs	r1, #0
 8007b78:	2001      	movs	r0, #1
 8007b7a:	f017 ff15 	bl	801f9a8 <xQueueGenericCreate>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4a13      	ldr	r2, [pc, #76]	; (8007bd0 <estimatorKalmanTaskInit+0x68>)
 8007b82:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 8007b84:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <estimatorKalmanTaskInit+0x68>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <estimatorKalmanTaskInit+0x2e>
 8007b8c:	22c4      	movs	r2, #196	; 0xc4
 8007b8e:	4911      	ldr	r1, [pc, #68]	; (8007bd4 <estimatorKalmanTaskInit+0x6c>)
 8007b90:	4811      	ldr	r0, [pc, #68]	; (8007bd8 <estimatorKalmanTaskInit+0x70>)
 8007b92:	f00a fa4b 	bl	801202c <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 8007b96:	4911      	ldr	r1, [pc, #68]	; (8007bdc <estimatorKalmanTaskInit+0x74>)
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f017 ff94 	bl	801fac6 <xQueueCreateMutexStatic>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4a0f      	ldr	r2, [pc, #60]	; (8007be0 <estimatorKalmanTaskInit+0x78>)
 8007ba2:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 8007ba4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <estimatorKalmanTaskInit+0x7c>)
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <estimatorKalmanTaskInit+0x80>)
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	490c      	ldr	r1, [pc, #48]	; (8007bec <estimatorKalmanTaskInit+0x84>)
 8007bba:	480d      	ldr	r0, [pc, #52]	; (8007bf0 <estimatorKalmanTaskInit+0x88>)
 8007bbc:	f018 fd98 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <estimatorKalmanTaskInit+0x8c>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20009530 	.word	0x20009530
 8007bd0:	20009464 	.word	0x20009464
 8007bd4:	0802c724 	.word	0x0802c724
 8007bd8:	0802c750 	.word	0x0802c750
 8007bdc:	2000946c 	.word	0x2000946c
 8007be0:	20009468 	.word	0x20009468
 8007be4:	200040a8 	.word	0x200040a8
 8007be8:	20003aa8 	.word	0x20003aa8
 8007bec:	0802c764 	.word	0x0802c764
 8007bf0:	08007bf9 	.word	0x08007bf9
 8007bf4:	200094be 	.word	0x200094be

08007bf8 <kalmanTask>:

bool estimatorKalmanTaskTest() {
  return isInit;
}

static void kalmanTask(void* parameters) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8007c00:	f7fe f86e 	bl	8005ce0 <systemWaitStart>

  uint32_t nowMs = T2M(xTaskGetTickCount());
 8007c04:	f019 f8ea 	bl	8020ddc <xTaskGetTickCount>
 8007c08:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	617b      	str	r3, [r7, #20]

  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);
 8007c0e:	2301      	movs	r3, #1
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	2365      	movs	r3, #101	; 0x65
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2363      	movs	r3, #99	; 0x63
 8007c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c1c:	6939      	ldr	r1, [r7, #16]
 8007c1e:	4848      	ldr	r0, [pc, #288]	; (8007d40 <kalmanTask+0x148>)
 8007c20:	f009 f983 	bl	8010f2a <rateSupervisorInit>

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 8007c24:	4b47      	ldr	r3, [pc, #284]	; (8007d44 <kalmanTask+0x14c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f018 f9e7 	bl	8020000 <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 8007c32:	f019 f8d3 	bl	8020ddc <xTaskGetTickCount>
 8007c36:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 8007c38:	4b43      	ldr	r3, [pc, #268]	; (8007d48 <kalmanTask+0x150>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <kalmanTask+0x52>
      estimatorKalmanInit();
 8007c40:	f000 f97e 	bl	8007f40 <estimatorKalmanInit>
      resetEstimation = false;
 8007c44:	4b40      	ldr	r3, [pc, #256]	; (8007d48 <kalmanTask+0x150>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
    }

    bool quadIsFlying = supervisorIsFlying();
 8007c4a:	f009 f9df 	bl	801100c <supervisorIsFlying>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d329      	bcc.n	8007cae <kalmanTask+0xb6>
      axis3fSubSamplerFinalize(&accSubSampler);
 8007c5a:	483c      	ldr	r0, [pc, #240]	; (8007d4c <kalmanTask+0x154>)
 8007c5c:	f00a f97d 	bl	8011f5a <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 8007c60:	483b      	ldr	r0, [pc, #236]	; (8007d50 <kalmanTask+0x158>)
 8007c62:	f00a f97a 	bl	8011f5a <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <kalmanTask+0x15c>)
 8007c6e:	493a      	ldr	r1, [pc, #232]	; (8007d58 <kalmanTask+0x160>)
 8007c70:	483a      	ldr	r0, [pc, #232]	; (8007d5c <kalmanTask+0x164>)
 8007c72:	f001 ffcb 	bl	8009c0c <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 8007c76:	220a      	movs	r2, #10
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]

      STATS_CNT_RATE_EVENT(&predictionCounter);
 8007c7e:	4b38      	ldr	r3, [pc, #224]	; (8007d60 <kalmanTask+0x168>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	3301      	adds	r3, #1
 8007c84:	4a36      	ldr	r2, [pc, #216]	; (8007d60 <kalmanTask+0x168>)
 8007c86:	6093      	str	r3, [r2, #8]

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 8007c88:	6939      	ldr	r1, [r7, #16]
 8007c8a:	482d      	ldr	r0, [pc, #180]	; (8007d40 <kalmanTask+0x148>)
 8007c8c:	f009 f971 	bl	8010f72 <rateSupervisorValidate>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f083 0301 	eor.w	r3, r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <kalmanTask+0xb6>
        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
 8007c9c:	4828      	ldr	r0, [pc, #160]	; (8007d40 <kalmanTask+0x148>)
 8007c9e:	f009 f9a8 	bl	8010ff2 <rateSupervisorLatestCount>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	492f      	ldr	r1, [pc, #188]	; (8007d64 <kalmanTask+0x16c>)
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f00a f8fb 	bl	8011ea4 <SEGGER_RTT_printf>
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	492d      	ldr	r1, [pc, #180]	; (8007d68 <kalmanTask+0x170>)
 8007cb2:	482a      	ldr	r0, [pc, #168]	; (8007d5c <kalmanTask+0x164>)
 8007cb4:	f002 f9cc 	bl	800a050 <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6938      	ldr	r0, [r7, #16]
 8007cbe:	f000 f863 	bl	8007d88 <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 8007cc2:	4826      	ldr	r0, [pc, #152]	; (8007d5c <kalmanTask+0x164>)
 8007cc4:	f002 f9f2 	bl	800a0ac <kalmanCoreFinalize>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <kalmanTask+0xe0>
    {
      STATS_CNT_RATE_EVENT(&finalizeCounter);
 8007cce:	4b27      	ldr	r3, [pc, #156]	; (8007d6c <kalmanTask+0x174>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <kalmanTask+0x174>)
 8007cd6:	6093      	str	r3, [r2, #8]
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 8007cd8:	4820      	ldr	r0, [pc, #128]	; (8007d5c <kalmanTask+0x164>)
 8007cda:	f003 f82f 	bl	800ad3c <kalmanSupervisorIsStateWithinBounds>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f083 0301 	eor.w	r3, r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d010      	beq.n	8007d0c <kalmanTask+0x114>
      resetEstimation = true;
 8007cea:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <kalmanTask+0x150>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 8007cf0:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <kalmanTask+0x178>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d908      	bls.n	8007d0c <kalmanTask+0x114>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007d00:	4a1b      	ldr	r2, [pc, #108]	; (8007d70 <kalmanTask+0x178>)
 8007d02:	6013      	str	r3, [r2, #0]
        DEBUG_PRINT("State out of bounds, resetting\n");
 8007d04:	491b      	ldr	r1, [pc, #108]	; (8007d74 <kalmanTask+0x17c>)
 8007d06:	2000      	movs	r0, #0
 8007d08:	f00a f8cc 	bl	8011ea4 <SEGGER_RTT_printf>

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <kalmanTask+0x180>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d14:	4618      	mov	r0, r3
 8007d16:	f018 f973 	bl	8020000 <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 8007d1a:	4a18      	ldr	r2, [pc, #96]	; (8007d7c <kalmanTask+0x184>)
 8007d1c:	4918      	ldr	r1, [pc, #96]	; (8007d80 <kalmanTask+0x188>)
 8007d1e:	480f      	ldr	r0, [pc, #60]	; (8007d5c <kalmanTask+0x164>)
 8007d20:	f002 fe4a 	bl	800a9b8 <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 8007d24:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <kalmanTask+0x180>)
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f017 fee5 	bl	801fafc <xQueueGenericSend>

    STATS_CNT_RATE_EVENT(&updateCounter);
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <kalmanTask+0x18c>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	3301      	adds	r3, #1
 8007d38:	4a12      	ldr	r2, [pc, #72]	; (8007d84 <kalmanTask+0x18c>)
 8007d3a:	6093      	str	r3, [r2, #8]
  while (true) {
 8007d3c:	e772      	b.n	8007c24 <kalmanTask+0x2c>
 8007d3e:	bf00      	nop
 8007d40:	200095c4 	.word	0x200095c4
 8007d44:	20009464 	.word	0x20009464
 8007d48:	2000952c 	.word	0x2000952c
 8007d4c:	200094c0 	.word	0x200094c0
 8007d50:	200094e0 	.word	0x200094e0
 8007d54:	200094f4 	.word	0x200094f4
 8007d58:	200094d4 	.word	0x200094d4
 8007d5c:	200038e4 	.word	0x200038e4
 8007d60:	20000790 	.word	0x20000790
 8007d64:	0802c76c 	.word	0x0802c76c
 8007d68:	20009530 	.word	0x20009530
 8007d6c:	200007ac 	.word	0x200007ac
 8007d70:	200095e0 	.word	0x200095e0
 8007d74:	0802c798 	.word	0x0802c798
 8007d78:	20009468 	.word	0x20009468
 8007d7c:	20009500 	.word	0x20009500
 8007d80:	20009574 	.word	0x20009574
 8007d84:	20000774 	.word	0x20000774

08007d88 <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b08f      	sub	sp, #60	; 0x3c
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 8007d94:	e0b1      	b.n	8007efa <updateQueuedMeasurements+0x172>
    switch (m.type) {
 8007d96:	7a3b      	ldrb	r3, [r7, #8]
 8007d98:	2b0b      	cmp	r3, #11
 8007d9a:	f200 80ad 	bhi.w	8007ef8 <updateQueuedMeasurements+0x170>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <updateQueuedMeasurements+0x1c>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007e01 	.word	0x08007e01
 8007dac:	08007e11 	.word	0x08007e11
 8007db0:	08007e21 	.word	0x08007e21
 8007db4:	08007e49 	.word	0x08007e49
 8007db8:	08007e59 	.word	0x08007e59
 8007dbc:	08007e69 	.word	0x08007e69
 8007dc0:	08007e7b 	.word	0x08007e7b
 8007dc4:	08007e8b 	.word	0x08007e8b
 8007dc8:	08007e9d 	.word	0x08007e9d
 8007dcc:	08007ebd 	.word	0x08007ebd
 8007dd0:	08007edd 	.word	0x08007edd
      case MeasurementTypeTDOA:
        if(robustTdoa){
 8007dd4:	4b50      	ldr	r3, [pc, #320]	; (8007f18 <updateQueuedMeasurements+0x190>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <updateQueuedMeasurements+0x66>
          // robust KF update with TDOA measurements
          kalmanCoreRobustUpdateWithTdoa(&coreData, &m.data.tdoa, &outlierFilterTdoaState);
 8007ddc:	f107 0308 	add.w	r3, r7, #8
 8007de0:	3304      	adds	r3, #4
 8007de2:	4a4e      	ldr	r2, [pc, #312]	; (8007f1c <updateQueuedMeasurements+0x194>)
 8007de4:	4619      	mov	r1, r3
 8007de6:	484e      	ldr	r0, [pc, #312]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007de8:	f005 f8f8 	bl	800cfdc <kalmanCoreRobustUpdateWithTdoa>
 8007dec:	e085      	b.n	8007efa <updateQueuedMeasurements+0x172>
        }else{
          // standard KF update
          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
 8007dee:	f107 0308 	add.w	r3, r7, #8
 8007df2:	1d19      	adds	r1, r3, #4
 8007df4:	4b49      	ldr	r3, [pc, #292]	; (8007f1c <updateQueuedMeasurements+0x194>)
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	4849      	ldr	r0, [pc, #292]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007dfa:	f004 fe1b 	bl	800ca34 <kalmanCoreUpdateWithTdoa>
        }
        break;
 8007dfe:	e07c      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 8007e00:	f107 0308 	add.w	r3, r7, #8
 8007e04:	3304      	adds	r3, #4
 8007e06:	4619      	mov	r1, r3
 8007e08:	4845      	ldr	r0, [pc, #276]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e0a:	f004 fb97 	bl	800c53c <kalmanCoreUpdateWithPosition>
        break;
 8007e0e:	e074      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 8007e10:	f107 0308 	add.w	r3, r7, #8
 8007e14:	3304      	adds	r3, #4
 8007e16:	4619      	mov	r1, r3
 8007e18:	4841      	ldr	r0, [pc, #260]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e1a:	f004 fa17 	bl	800c24c <kalmanCoreUpdateWithPose>
        break;
 8007e1e:	e06c      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeDistance:
        if(robustTwr){
 8007e20:	4b40      	ldr	r3, [pc, #256]	; (8007f24 <updateQueuedMeasurements+0x19c>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <updateQueuedMeasurements+0xb0>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 8007e28:	f107 0308 	add.w	r3, r7, #8
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	483b      	ldr	r0, [pc, #236]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e32:	f003 faeb 	bl	800b40c <kalmanCoreRobustUpdateWithDistance>
 8007e36:	e060      	b.n	8007efa <updateQueuedMeasurements+0x172>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 8007e38:	f107 0308 	add.w	r3, r7, #8
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4837      	ldr	r0, [pc, #220]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e42:	f003 f855 	bl	800aef0 <kalmanCoreUpdateWithDistance>
        }
        break;
 8007e46:	e058      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 8007e48:	f107 0308 	add.w	r3, r7, #8
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4833      	ldr	r0, [pc, #204]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e52:	f005 fd49 	bl	800d8e8 <kalmanCoreUpdateWithTof>
        break;
 8007e56:	e050      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 8007e58:	f107 0308 	add.w	r3, r7, #8
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4619      	mov	r1, r3
 8007e60:	482f      	ldr	r0, [pc, #188]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e62:	f002 ffd9 	bl	800ae18 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 8007e66:	e048      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 8007e68:	f107 0308 	add.w	r3, r7, #8
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4a2e      	ldr	r2, [pc, #184]	; (8007f28 <updateQueuedMeasurements+0x1a0>)
 8007e70:	4619      	mov	r1, r3
 8007e72:	482b      	ldr	r0, [pc, #172]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e74:	f003 fe7e 	bl	800bb74 <kalmanCoreUpdateWithFlow>
        break;
 8007e78:	e03f      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4827      	ldr	r0, [pc, #156]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e84:	f005 fdb6 	bl	800d9f4 <kalmanCoreUpdateWithYawError>
        break;
 8007e88:	e037      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeSweepAngle:
        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
 8007e8a:	f107 0308 	add.w	r3, r7, #8
 8007e8e:	1d19      	adds	r1, r3, #4
 8007e90:	4b26      	ldr	r3, [pc, #152]	; (8007f2c <updateQueuedMeasurements+0x1a4>)
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4822      	ldr	r0, [pc, #136]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007e96:	f004 fc13 	bl	800c6c0 <kalmanCoreUpdateWithSweepAngles>
        break;
 8007e9a:	e02e      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4822      	ldr	r0, [pc, #136]	; (8007f30 <updateQueuedMeasurements+0x1a8>)
 8007ea6:	f00a f827 	bl	8011ef8 <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 8007eaa:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <updateQueuedMeasurements+0x1a0>)
 8007eac:	461c      	mov	r4, r3
 8007eae:	f107 030c 	add.w	r3, r7, #12
 8007eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 8007eba:	e01e      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 8007ebc:	f107 0308 	add.w	r3, r7, #8
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	481b      	ldr	r0, [pc, #108]	; (8007f34 <updateQueuedMeasurements+0x1ac>)
 8007ec6:	f00a f817 	bl	8011ef8 <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <updateQueuedMeasurements+0x1b0>)
 8007ecc:	461c      	mov	r4, r3
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 8007eda:	e00e      	b.n	8007efa <updateQueuedMeasurements+0x172>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 8007edc:	2300      	movs	r3, #0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <updateQueuedMeasurements+0x172>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 8007ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	eeb0 0a67 	vmov.f32	s0, s15
 8007eee:	4913      	ldr	r1, [pc, #76]	; (8007f3c <updateQueuedMeasurements+0x1b4>)
 8007ef0:	480b      	ldr	r0, [pc, #44]	; (8007f20 <updateQueuedMeasurements+0x198>)
 8007ef2:	f000 ff13 	bl	8008d1c <kalmanCoreUpdateWithBaro>
        }
        break;
 8007ef6:	e000      	b.n	8007efa <updateQueuedMeasurements+0x172>
      default:
        break;
 8007ef8:	bf00      	nop
  while (estimatorDequeue(&m)) {
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff fe1a 	bl	8007b38 <estimatorDequeue>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f47f af45 	bne.w	8007d96 <updateQueuedMeasurements+0xe>
    }
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	373c      	adds	r7, #60	; 0x3c
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd90      	pop	{r4, r7, pc}
 8007f16:	bf00      	nop
 8007f18:	200094bd 	.word	0x200094bd
 8007f1c:	20009518 	.word	0x20009518
 8007f20:	200038e4 	.word	0x200038e4
 8007f24:	200094bc 	.word	0x200094bc
 8007f28:	2000950c 	.word	0x2000950c
 8007f2c:	20009524 	.word	0x20009524
 8007f30:	200094e0 	.word	0x200094e0
 8007f34:	200094c0 	.word	0x200094c0
 8007f38:	20009500 	.word	0x20009500
 8007f3c:	20009530 	.word	0x20009530

08007f40 <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 8007f46:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007f80 <estimatorKalmanInit+0x40>
 8007f4a:	480e      	ldr	r0, [pc, #56]	; (8007f84 <estimatorKalmanInit+0x44>)
 8007f4c:	f009 ffc2 	bl	8011ed4 <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 8007f50:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007f88 <estimatorKalmanInit+0x48>
 8007f54:	480d      	ldr	r0, [pc, #52]	; (8007f8c <estimatorKalmanInit+0x4c>)
 8007f56:	f009 ffbd 	bl	8011ed4 <axis3fSubSamplerInit>

  outlierFilterTdoaReset(&outlierFilterTdoaState);
 8007f5a:	480d      	ldr	r0, [pc, #52]	; (8007f90 <estimatorKalmanInit+0x50>)
 8007f5c:	f005 fdee 	bl	800db3c <outlierFilterTdoaReset>
  outlierFilterLighthouseReset(&sweepOutlierFilterState, 0);
 8007f60:	2100      	movs	r1, #0
 8007f62:	480c      	ldr	r0, [pc, #48]	; (8007f94 <estimatorKalmanInit+0x54>)
 8007f64:	f005 fd75 	bl	800da52 <outlierFilterLighthouseReset>

  uint32_t nowMs = T2M(xTaskGetTickCount());
 8007f68:	f018 ff38 	bl	8020ddc <xTaskGetTickCount>
 8007f6c:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4909      	ldr	r1, [pc, #36]	; (8007f98 <estimatorKalmanInit+0x58>)
 8007f72:	480a      	ldr	r0, [pc, #40]	; (8007f9c <estimatorKalmanInit+0x5c>)
 8007f74:	f000 f9c8 	bl	8008308 <kalmanCoreInit>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	411cf5c3 	.word	0x411cf5c3
 8007f84:	200094c0 	.word	0x200094c0
 8007f88:	3c8efa35 	.word	0x3c8efa35
 8007f8c:	200094e0 	.word	0x200094e0
 8007f90:	20009518 	.word	0x20009518
 8007f94:	20009524 	.word	0x20009524
 8007f98:	20009530 	.word	0x20009530
 8007f9c:	200038e4 	.word	0x200038e4

08007fa0 <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	ed87 0a02 	vstr	s0, [r7, #8]
 8007fac:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00e      	beq.n	8007fd4 <lpf2pInit+0x34>
 8007fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc2:	d907      	bls.n	8007fd4 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8007fc4:	edd7 0a01 	vldr	s1, [r7, #4]
 8007fc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f805 	bl	8007fdc <lpf2pSetCutoffFreq>
 8007fd2:	e000      	b.n	8007fd6 <lpf2pInit+0x36>
    return;
 8007fd4:	bf00      	nop
}
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	ed87 0a02 	vstr	s0, [r7, #8]
 8007fe8:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 8007fec:	edd7 6a02 	vldr	s13, [r7, #8]
 8007ff0:	ed97 7a01 	vldr	s14, [r7, #4]
 8007ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff8:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 8007ffc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80080d0 <lpf2pSetCutoffFreq+0xf4>
 8008000:	edd7 7a07 	vldr	s15, [r7, #28]
 8008004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008008:	eeb0 0a47 	vmov.f32	s0, s14
 800800c:	f01e fe02 	bl	8026c14 <tanf>
 8008010:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8008014:	edd7 7a06 	vldr	s15, [r7, #24]
 8008018:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80080d4 <lpf2pSetCutoffFreq+0xf8>
 800801c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008028:	edd7 7a06 	vldr	s15, [r7, #24]
 800802c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008034:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 8008038:	edd7 7a06 	vldr	s15, [r7, #24]
 800803c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8008040:	ed97 7a05 	vldr	s14, [r7, #20]
 8008044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	edd3 7a02 	vldr	s15, [r3, #8]
 8008054:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 8008066:	edd7 7a06 	vldr	s15, [r7, #24]
 800806a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800806e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008076:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800807a:	ed97 7a05 	vldr	s14, [r7, #20]
 800807e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 8008088:	edd7 7a06 	vldr	s15, [r7, #24]
 800808c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80080d4 <lpf2pSetCutoffFreq+0xf8>
 8008090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008098:	ee37 7a67 	vsub.f32	s14, s14, s15
 800809c:	edd7 7a06 	vldr	s15, [r7, #24]
 80080a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80080a4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80080a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80080ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	619a      	str	r2, [r3, #24]
}
 80080c6:	bf00      	nop
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40490fdb 	.word	0x40490fdb
 80080d4:	3fb504f3 	.word	0x3fb504f3

080080d8 <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <assert_aligned_4_bytes+0x22>
 80080f0:	223c      	movs	r2, #60	; 0x3c
 80080f2:	4904      	ldr	r1, [pc, #16]	; (8008104 <assert_aligned_4_bytes+0x2c>)
 80080f4:	4804      	ldr	r0, [pc, #16]	; (8008108 <assert_aligned_4_bytes+0x30>)
 80080f6:	f009 ff99 	bl	801202c <assertFail>
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	0802cd2c 	.word	0x0802cd2c
 8008108:	0802cd78 	.word	0x0802cd78

0800810c <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff ffde 	bl	80080d8 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800811c:	6838      	ldr	r0, [r7, #0]
 800811e:	f7ff ffdb 	bl	80080d8 <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f01b faeb 	bl	8023700 <arm_mat_trans_f32>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800812e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <mat_trans+0x34>
 8008136:	2244      	movs	r2, #68	; 0x44
 8008138:	4903      	ldr	r1, [pc, #12]	; (8008148 <mat_trans+0x3c>)
 800813a:	4804      	ldr	r0, [pc, #16]	; (800814c <mat_trans+0x40>)
 800813c:	f009 ff76 	bl	801202c <assertFail>
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	0802cd2c 	.word	0x0802cd2c
 800814c:	0802cd90 	.word	0x0802cd90

08008150 <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff ffbb 	bl	80080d8 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 8008162:	68b8      	ldr	r0, [r7, #8]
 8008164:	f7ff ffb8 	bl	80080d8 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ffb5 	bl	80080d8 <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f01b fb72 	bl	802385c <arm_mat_mult_f32>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800817c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <mat_mult+0x3e>
 8008184:	2255      	movs	r2, #85	; 0x55
 8008186:	4904      	ldr	r1, [pc, #16]	; (8008198 <mat_mult+0x48>)
 8008188:	4804      	ldr	r0, [pc, #16]	; (800819c <mat_mult+0x4c>)
 800818a:	f009 ff4f 	bl	801202c <assertFail>
}
 800818e:	bf00      	nop
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	0802cd2c 	.word	0x0802cd2c
 800819c:	0802cd90 	.word	0x0802cd90

080081a0 <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	60bb      	str	r3, [r7, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	60fb      	str	r3, [r7, #12]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80081ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80081be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c6:	db0a      	blt.n	80081de <arm_sqrt+0x3e>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80081c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80081cc:	f01e fc72 	bl	8026ab4 <sqrtf>
 80081d0:	eef0 7a40 	vmov.f32	s15, s0
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80081da:	2300      	movs	r3, #0
 80081dc:	e005      	b.n	80081ea <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 80081ea:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 80081ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <arm_sqrt+0x5e>
 80081f4:	225b      	movs	r2, #91	; 0x5b
 80081f6:	4906      	ldr	r1, [pc, #24]	; (8008210 <arm_sqrt+0x70>)
 80081f8:	4806      	ldr	r0, [pc, #24]	; (8008214 <arm_sqrt+0x74>)
 80081fa:	f009 ff17 	bl	801202c <assertFail>
  return pOut;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	ee07 3a90 	vmov	s15, r3
}
 8008204:	eeb0 0a67 	vmov.f32	s0, s15
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	0802cd2c 	.word	0x0802cd2c
 8008214:	0802cd90 	.word	0x0802cd90

08008218 <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	ed87 0a02 	vstr	s0, [r7, #8]
 8008224:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	ed97 0a02 	vldr	s0, [r7, #8]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f01b fac3 	bl	80237b8 <arm_mat_scale_f32>
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8008236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <mat_scale+0x30>
 800823e:	2275      	movs	r2, #117	; 0x75
 8008240:	4903      	ldr	r1, [pc, #12]	; (8008250 <mat_scale+0x38>)
 8008242:	4804      	ldr	r0, [pc, #16]	; (8008254 <mat_scale+0x3c>)
 8008244:	f009 fef2 	bl	801202c <assertFail>
}
 8008248:	bf00      	nop
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	0802cd2c 	.word	0x0802cd2c
 8008254:	0802cd90 	.word	0x0802cd90

08008258 <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  return;
 8008260:	bf00      	nop
}
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a21      	ldr	r2, [pc, #132]	; (80082fc <kalmanCoreDefaultParams+0x90>)
 8008278:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008280:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <kalmanCoreDefaultParams+0x94>)
 8008286:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a1d      	ldr	r2, [pc, #116]	; (8008300 <kalmanCoreDefaultParams+0x94>)
 800828c:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <kalmanCoreDefaultParams+0x94>)
 8008292:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800829a:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80082a2:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f04f 0200 	mov.w	r2, #0
 80082aa:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24
  params->measNoiseBaro = 2.0f;           // meters
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a0f      	ldr	r2, [pc, #60]	; (8008304 <kalmanCoreDefaultParams+0x98>)
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a0d      	ldr	r2, [pc, #52]	; (8008304 <kalmanCoreDefaultParams+0x98>)
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30

  params->initialX = 0.0;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	635a      	str	r2, [r3, #52]	; 0x34
  params->initialY = 0.0;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
  params->initialZ = 0.0;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	63da      	str	r2, [r3, #60]	; 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	42c80000 	.word	0x42c80000
 8008300:	3c23d70a 	.word	0x3c23d70a
 8008304:	3dcccccd 	.word	0x3dcccccd

08008308 <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 8008314:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8008318:	2100      	movs	r1, #0
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f01c fbb0 	bl	8024a80 <memset>

  this->S[KC_STATE_X] = params->initialX;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800833e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008342:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008346:	eeb0 0a47 	vmov.f32	s0, s14
 800834a:	f01b fc73 	bl	8023c34 <arm_cos_f32>
 800834e:	eef0 7a40 	vmov.f32	s15, s0
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
  this->initialQuaternion[1] = 0.0;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  this->initialQuaternion[2] = 0.0;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008372:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008376:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800837a:	eeb0 0a47 	vmov.f32	s0, s14
 800837e:	f01b fc13 	bl	8023ba8 <arm_sin_f32>
 8008382:	eef0 7a40 	vmov.f32	s15, s0
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 800838c:	2300      	movs	r3, #0
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
 8008390:	e00f      	b.n	80083b2 <kalmanCoreInit+0xaa>
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	336a      	adds	r3, #106	; 0x6a
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68f9      	ldr	r1, [r7, #12]
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	3308      	adds	r3, #8
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	3304      	adds	r3, #4
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	3301      	adds	r3, #1
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	ddec      	ble.n	8008392 <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 80083b8:	2300      	movs	r3, #0
 80083ba:	623b      	str	r3, [r7, #32]
 80083bc:	e020      	b.n	8008400 <kalmanCoreInit+0xf8>
 80083be:	2300      	movs	r3, #0
 80083c0:	61fb      	str	r3, [r7, #28]
 80083c2:	e017      	b.n	80083f4 <kalmanCoreInit+0xec>
 80083c4:	6a3a      	ldr	r2, [r7, #32]
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d102      	bne.n	80083d2 <kalmanCoreInit+0xca>
 80083cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80083d0:	e001      	b.n	80083d6 <kalmanCoreInit+0xce>
 80083d2:	f04f 0100 	mov.w	r1, #0
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	4413      	add	r3, r2
 80083e4:	330c      	adds	r3, #12
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4403      	add	r3, r0
 80083ea:	3304      	adds	r3, #4
 80083ec:	6019      	str	r1, [r3, #0]
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	3301      	adds	r3, #1
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	dde4      	ble.n	80083c4 <kalmanCoreInit+0xbc>
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	3301      	adds	r3, #1
 80083fe:	623b      	str	r3, [r7, #32]
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	2b02      	cmp	r3, #2
 8008404:	dddb      	ble.n	80083be <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 8008406:	2300      	movs	r3, #0
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	e018      	b.n	800843e <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	e00f      	b.n	8008432 <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	4613      	mov	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	4413      	add	r3, r2
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	4413      	add	r3, r2
 8008420:	3316      	adds	r3, #22
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	3301      	adds	r3, #1
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b08      	cmp	r3, #8
 8008436:	ddec      	ble.n	8008412 <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	3301      	adds	r3, #1
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b08      	cmp	r3, #8
 8008442:	dde3      	ble.n	800840c <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	edd3 7a00 	vldr	s15, [r3]
 800844a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800844e:	eeb0 0a67 	vmov.f32	s0, s15
 8008452:	f01e fad7 	bl	8026a04 <powf>
 8008456:	eef0 7a40 	vmov.f32	s15, s0
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	edd3 7a00 	vldr	s15, [r3]
 8008466:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800846a:	eeb0 0a67 	vmov.f32	s0, s15
 800846e:	f01e fac9 	bl	8026a04 <powf>
 8008472:	eef0 7a40 	vmov.f32	s15, s0
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008482:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008486:	eeb0 0a67 	vmov.f32	s0, s15
 800848a:	f01e fabb 	bl	8026a04 <powf>
 800848e:	eef0 7a40 	vmov.f32	s15, s0
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	edd3 7a02 	vldr	s15, [r3, #8]
 800849e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80084a2:	eeb0 0a67 	vmov.f32	s0, s15
 80084a6:	f01e faad 	bl	8026a04 <powf>
 80084aa:	eef0 7a40 	vmov.f32	s15, s0
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80084ba:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80084be:	eeb0 0a67 	vmov.f32	s0, s15
 80084c2:	f01e fa9f 	bl	8026a04 <powf>
 80084c6:	eef0 7a40 	vmov.f32	s15, s0
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80084d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80084da:	eeb0 0a67 	vmov.f32	s0, s15
 80084de:	f01e fa91 	bl	8026a04 <powf>
 80084e2:	eef0 7a40 	vmov.f32	s15, s0
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80084f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80084f6:	eeb0 0a67 	vmov.f32	s0, s15
 80084fa:	f01e fa83 	bl	8026a04 <powf>
 80084fe:	eef0 7a40 	vmov.f32	s15, s0
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	edd3 7a03 	vldr	s15, [r3, #12]
 800850e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008512:	eeb0 0a67 	vmov.f32	s0, s15
 8008516:	f01e fa75 	bl	8026a04 <powf>
 800851a:	eef0 7a40 	vmov.f32	s15, s0
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	edd3 7a04 	vldr	s15, [r3, #16]
 800852a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800852e:	eeb0 0a67 	vmov.f32	s0, s15
 8008532:	f01e fa67 	bl	8026a04 <powf>
 8008536:	eef0 7a40 	vmov.f32	s15, s0
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198

  this->Pm.numRows = KC_STATE_DIM;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2209      	movs	r2, #9
 8008544:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2209      	movs	r2, #9
 800854c:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
  this->Pm.pData = (float*)this->P;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

  this->baroReferenceHeight = 0.0;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

  this->isUpdated = false;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  this->lastPredictionMs = nowMs;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 800857e:	bf00      	nop
 8008580:	3728      	adds	r7, #40	; 0x28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08e      	sub	sp, #56	; 0x38
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	ed87 0a01 	vstr	s0, [r7, #4]
 8008596:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d004      	beq.n	80085ac <kalmanCoreScalarUpdate+0x24>
 80085a2:	22ea      	movs	r2, #234	; 0xea
 80085a4:	49b2      	ldr	r1, [pc, #712]	; (8008870 <kalmanCoreScalarUpdate+0x2e8>)
 80085a6:	48b3      	ldr	r0, [pc, #716]	; (8008874 <kalmanCoreScalarUpdate+0x2ec>)
 80085a8:	f009 fd40 	bl	801202c <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d004      	beq.n	80085be <kalmanCoreScalarUpdate+0x36>
 80085b4:	22eb      	movs	r2, #235	; 0xeb
 80085b6:	49ae      	ldr	r1, [pc, #696]	; (8008870 <kalmanCoreScalarUpdate+0x2e8>)
 80085b8:	48af      	ldr	r0, [pc, #700]	; (8008878 <kalmanCoreScalarUpdate+0x2f0>)
 80085ba:	f009 fd37 	bl	801202c <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 80085be:	49af      	ldr	r1, [pc, #700]	; (800887c <kalmanCoreScalarUpdate+0x2f4>)
 80085c0:	68b8      	ldr	r0, [r7, #8]
 80085c2:	f7ff fda3 	bl	800810c <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80085cc:	4aac      	ldr	r2, [pc, #688]	; (8008880 <kalmanCoreScalarUpdate+0x2f8>)
 80085ce:	49ab      	ldr	r1, [pc, #684]	; (800887c <kalmanCoreScalarUpdate+0x2f4>)
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff fdbd 	bl	8008150 <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 80085d6:	edd7 7a00 	vldr	s15, [r7]
 80085da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80085de:	edc7 7a07 	vstr	s15, [r7, #28]
  float HPHR = R; // HPH' + R
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 80085e6:	2300      	movs	r3, #0
 80085e8:	633b      	str	r3, [r7, #48]	; 0x30
 80085ea:	e017      	b.n	800861c <kalmanCoreScalarUpdate+0x94>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	ed93 7a00 	vldr	s14, [r3]
 80085fa:	4aa2      	ldr	r2, [pc, #648]	; (8008884 <kalmanCoreScalarUpdate+0x2fc>)
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	edd3 7a00 	vldr	s15, [r3]
 8008606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800860e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008612:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	3301      	adds	r3, #1
 800861a:	633b      	str	r3, [r7, #48]	; 0x30
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	2b08      	cmp	r3, #8
 8008620:	dde4      	ble.n	80085ec <kalmanCoreScalarUpdate+0x64>
  }
  ASSERT(!isnan(HPHR));
 8008622:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008626:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800862a:	eeb4 7a67 	vcmp.f32	s14, s15
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	d704      	bvc.n	800863e <kalmanCoreScalarUpdate+0xb6>
 8008634:	22f6      	movs	r2, #246	; 0xf6
 8008636:	498e      	ldr	r1, [pc, #568]	; (8008870 <kalmanCoreScalarUpdate+0x2e8>)
 8008638:	4893      	ldr	r0, [pc, #588]	; (8008888 <kalmanCoreScalarUpdate+0x300>)
 800863a:	f009 fcf7 	bl	801202c <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 800863e:	2300      	movs	r3, #0
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008642:	e02a      	b.n	800869a <kalmanCoreScalarUpdate+0x112>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 8008644:	4a8f      	ldr	r2, [pc, #572]	; (8008884 <kalmanCoreScalarUpdate+0x2fc>)
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	edd3 6a00 	vldr	s13, [r3]
 8008650:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008658:	4a8c      	ldr	r2, [pc, #560]	; (800888c <kalmanCoreScalarUpdate+0x304>)
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	edc3 7a00 	vstr	s15, [r3]
    this->S[i] = this->S[i] + K[i] * error; // state update
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	ed93 7a00 	vldr	s14, [r3]
 8008670:	4a86      	ldr	r2, [pc, #536]	; (800888c <kalmanCoreScalarUpdate+0x304>)
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	edd3 6a00 	vldr	s13, [r3]
 800867c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	3301      	adds	r3, #1
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	2b08      	cmp	r3, #8
 800869e:	ddd1      	ble.n	8008644 <kalmanCoreScalarUpdate+0xbc>
  }
  assertStateNotNaN(this);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff fdd9 	bl	8008258 <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 80086a6:	4a7a      	ldr	r2, [pc, #488]	; (8008890 <kalmanCoreScalarUpdate+0x308>)
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	487a      	ldr	r0, [pc, #488]	; (8008894 <kalmanCoreScalarUpdate+0x30c>)
 80086ac:	f7ff fd50 	bl	8008150 <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 80086b0:	2300      	movs	r3, #0
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086b4:	e01a      	b.n	80086ec <kalmanCoreScalarUpdate+0x164>
 80086b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	4a75      	ldr	r2, [pc, #468]	; (8008898 <kalmanCoreScalarUpdate+0x310>)
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	edd3 7a00 	vldr	s15, [r3]
 80086ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086dc:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <kalmanCoreScalarUpdate+0x310>)
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	edc3 7a00 	vstr	s15, [r3]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	3301      	adds	r3, #1
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	dde1      	ble.n	80086b6 <kalmanCoreScalarUpdate+0x12e>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 80086f2:	496a      	ldr	r1, [pc, #424]	; (800889c <kalmanCoreScalarUpdate+0x314>)
 80086f4:	4866      	ldr	r0, [pc, #408]	; (8008890 <kalmanCoreScalarUpdate+0x308>)
 80086f6:	f7ff fd09 	bl	800810c <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008700:	4a67      	ldr	r2, [pc, #412]	; (80088a0 <kalmanCoreScalarUpdate+0x318>)
 8008702:	4619      	mov	r1, r3
 8008704:	4862      	ldr	r0, [pc, #392]	; (8008890 <kalmanCoreScalarUpdate+0x308>)
 8008706:	f7ff fd23 	bl	8008150 <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8008710:	461a      	mov	r2, r3
 8008712:	4962      	ldr	r1, [pc, #392]	; (800889c <kalmanCoreScalarUpdate+0x314>)
 8008714:	4862      	ldr	r0, [pc, #392]	; (80088a0 <kalmanCoreScalarUpdate+0x318>)
 8008716:	f7ff fd1b 	bl	8008150 <mat_mult>
  assertStateNotNaN(this);
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff fd9c 	bl	8008258 <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 8008720:	2300      	movs	r3, #0
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
 8008724:	e0f2      	b.n	800890c <kalmanCoreScalarUpdate+0x384>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	623b      	str	r3, [r7, #32]
 800872a:	e0e8      	b.n	80088fe <kalmanCoreScalarUpdate+0x376>
      float v = K[i] * R * K[j];
 800872c:	4a57      	ldr	r2, [pc, #348]	; (800888c <kalmanCoreScalarUpdate+0x304>)
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	ed93 7a00 	vldr	s14, [r3]
 8008738:	edd7 7a07 	vldr	s15, [r7, #28]
 800873c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008740:	4a52      	ldr	r2, [pc, #328]	; (800888c <kalmanCoreScalarUpdate+0x304>)
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	edd3 7a00 	vldr	s15, [r3]
 800874c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008750:	edc7 7a06 	vstr	s15, [r7, #24]
      float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 8008754:	68f9      	ldr	r1, [r7, #12]
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	4613      	mov	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4413      	add	r3, r2
 800875e:	6a3a      	ldr	r2, [r7, #32]
 8008760:	4413      	add	r3, r2
 8008762:	3316      	adds	r3, #22
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	edd3 7a00 	vldr	s15, [r3]
 800876c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008770:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008774:	68f9      	ldr	r1, [r7, #12]
 8008776:	6a3a      	ldr	r2, [r7, #32]
 8008778:	4613      	mov	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4413      	add	r3, r2
 800877e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008780:	4413      	add	r3, r2
 8008782:	3316      	adds	r3, #22
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	edd3 7a00 	vldr	s15, [r3]
 800878c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008798:	ed97 7a06 	vldr	s14, [r7, #24]
 800879c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087a0:	edc7 7a05 	vstr	s15, [r7, #20]
      if (isnan(p) || p > MAX_COVARIANCE) {
 80087a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80087a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80087ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80087b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b4:	d608      	bvs.n	80087c8 <kalmanCoreScalarUpdate+0x240>
 80087b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80087ba:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80088a4 <kalmanCoreScalarUpdate+0x31c>
 80087be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c6:	dd22      	ble.n	800880e <kalmanCoreScalarUpdate+0x286>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	6a3a      	ldr	r2, [r7, #32]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4413      	add	r3, r2
 80087d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d4:	4413      	add	r3, r2
 80087d6:	3316      	adds	r3, #22
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	4a32      	ldr	r2, [pc, #200]	; (80088a8 <kalmanCoreScalarUpdate+0x320>)
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	68f9      	ldr	r1, [r7, #12]
 80087e2:	6a3a      	ldr	r2, [r7, #32]
 80087e4:	4613      	mov	r3, r2
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4413      	add	r3, r2
 80087ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ec:	4413      	add	r3, r2
 80087ee:	3316      	adds	r3, #22
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	4613      	mov	r3, r2
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	4413      	add	r3, r2
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	4413      	add	r3, r2
 8008804:	3316      	adds	r3, #22
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4403      	add	r3, r0
 800880a:	6019      	str	r1, [r3, #0]
 800880c:	e074      	b.n	80088f8 <kalmanCoreScalarUpdate+0x370>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800880e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	429a      	cmp	r2, r3
 8008814:	d14e      	bne.n	80088b4 <kalmanCoreScalarUpdate+0x32c>
 8008816:	edd7 7a05 	vldr	s15, [r7, #20]
 800881a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80088ac <kalmanCoreScalarUpdate+0x324>
 800881e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	d545      	bpl.n	80088b4 <kalmanCoreScalarUpdate+0x32c>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8008828:	68f9      	ldr	r1, [r7, #12]
 800882a:	6a3a      	ldr	r2, [r7, #32]
 800882c:	4613      	mov	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	4413      	add	r3, r2
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	4413      	add	r3, r2
 8008836:	3316      	adds	r3, #22
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	4a1c      	ldr	r2, [pc, #112]	; (80088b0 <kalmanCoreScalarUpdate+0x328>)
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	68f9      	ldr	r1, [r7, #12]
 8008842:	6a3a      	ldr	r2, [r7, #32]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884c:	4413      	add	r3, r2
 800884e:	3316      	adds	r3, #22
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	6819      	ldr	r1, [r3, #0]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885a:	4613      	mov	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	4413      	add	r3, r2
 8008860:	6a3a      	ldr	r2, [r7, #32]
 8008862:	4413      	add	r3, r2
 8008864:	3316      	adds	r3, #22
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4403      	add	r3, r0
 800886a:	6019      	str	r1, [r3, #0]
 800886c:	e044      	b.n	80088f8 <kalmanCoreScalarUpdate+0x370>
 800886e:	bf00      	nop
 8008870:	0802cdac 	.word	0x0802cdac
 8008874:	0802cdd0 	.word	0x0802cdd0
 8008878:	0802cde4 	.word	0x0802cde4
 800887c:	200008b0 	.word	0x200008b0
 8008880:	200008b8 	.word	0x200008b8
 8008884:	20004574 	.word	0x20004574
 8008888:	0802ce00 	.word	0x0802ce00
 800888c:	20004160 	.word	0x20004160
 8008890:	200008c8 	.word	0x200008c8
 8008894:	200008c0 	.word	0x200008c0
 8008898:	20004184 	.word	0x20004184
 800889c:	200008d0 	.word	0x200008d0
 80088a0:	200008d8 	.word	0x200008d8
 80088a4:	42c80000 	.word	0x42c80000
 80088a8:	42c80000 	.word	0x42c80000
 80088ac:	358637bd 	.word	0x358637bd
 80088b0:	358637bd 	.word	0x358637bd
      } else {
        this->P[i][j] = this->P[j][i] = p;
 80088b4:	68f9      	ldr	r1, [r7, #12]
 80088b6:	6a3a      	ldr	r2, [r7, #32]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c0:	4413      	add	r3, r2
 80088c2:	3316      	adds	r3, #22
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	6a3a      	ldr	r2, [r7, #32]
 80088d0:	4613      	mov	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	4413      	add	r3, r2
 80088d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d8:	4413      	add	r3, r2
 80088da:	3316      	adds	r3, #22
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	6819      	ldr	r1, [r3, #0]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e6:	4613      	mov	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	4413      	add	r3, r2
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	4413      	add	r3, r2
 80088f0:	3316      	adds	r3, #22
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4403      	add	r3, r0
 80088f6:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	3301      	adds	r3, #1
 80088fc:	623b      	str	r3, [r7, #32]
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	2b08      	cmp	r3, #8
 8008902:	f77f af13 	ble.w	800872c <kalmanCoreScalarUpdate+0x1a4>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	3301      	adds	r3, #1
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	2b08      	cmp	r3, #8
 8008910:	f77f af09 	ble.w	8008726 <kalmanCoreScalarUpdate+0x19e>
      }
    }
  }

  assertStateNotNaN(this);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fc9f 	bl	8008258 <assertStateNotNaN>

  this->isUpdated = true;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
}
 8008922:	bf00      	nop
 8008924:	3738      	adds	r7, #56	; 0x38
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop

0800892c <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b0df      	sub	sp, #380	; 0x17c
 8008930:	af00      	add	r7, sp, #0
 8008932:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 8008936:	f5a4 74b2 	sub.w	r4, r4, #356	; 0x164
 800893a:	6020      	str	r0, [r4, #0]
 800893c:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8008940:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
 8008944:	6001      	str	r1, [r0, #0]
 8008946:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800894a:	f5a1 71b6 	sub.w	r1, r1, #364	; 0x16c
 800894e:	600a      	str	r2, [r1, #0]
 8008950:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8008954:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800895e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008962:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static float tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 8008966:	2300      	movs	r3, #0
 8008968:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800896c:	e030      	b.n	80089d0 <kalmanCoreUpdateWithPKE+0xa4>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 800896e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008972:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	ed93 7a00 	vldr	s14, [r3]
 8008984:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008988:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	edd3 6a00 	vldr	s13, [r3]
 800899c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80089a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80089a4:	edd3 7a00 	vldr	s15, [r3]
 80089a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80089b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 80089c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80089ca:	3301      	adds	r3, #1
 80089cc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80089d0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	ddca      	ble.n	800896e <kalmanCoreUpdateWithPKE+0x42>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 80089d8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80089dc:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 80089e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80089e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80089e8:	4ac6      	ldr	r2, [pc, #792]	; (8008d04 <kalmanCoreUpdateWithPKE+0x3d8>)
 80089ea:	6809      	ldr	r1, [r1, #0]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f7ff fbaf 	bl	8008150 <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 80089f2:	49c4      	ldr	r1, [pc, #784]	; (8008d04 <kalmanCoreUpdateWithPKE+0x3d8>)
 80089f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80089f8:	48c2      	ldr	r0, [pc, #776]	; (8008d04 <kalmanCoreUpdateWithPKE+0x3d8>)
 80089fa:	f7ff fc0d 	bl	8008218 <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008a04:	e01c      	b.n	8008a40 <kalmanCoreUpdateWithPKE+0x114>
 8008a06:	49c0      	ldr	r1, [pc, #768]	; (8008d08 <kalmanCoreUpdateWithPKE+0x3dc>)
 8008a08:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	440b      	add	r3, r1
 8008a16:	edd3 7a00 	vldr	s15, [r3]
 8008a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a22:	49b9      	ldr	r1, [pc, #740]	; (8008d08 <kalmanCoreUpdateWithPKE+0x3dc>)
 8008a24:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	440b      	add	r3, r1
 8008a32:	edc3 7a00 	vstr	s15, [r3]
 8008a36:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008a40:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	ddde      	ble.n	8008a06 <kalmanCoreUpdateWithPKE+0xda>
    float Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 8008a48:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a4c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008a50:	4618      	mov	r0, r3
 8008a52:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8008a56:	461a      	mov	r2, r3
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f01c f811 	bl	8024a80 <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 8008a5e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008a66:	2209      	movs	r2, #9
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008a72:	2209      	movs	r2, #9
 8008a74:	805a      	strh	r2, [r3, #2]
 8008a76:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008a7e:	f107 0220 	add.w	r2, r7, #32
 8008a82:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 8008a84:	f107 0218 	add.w	r2, r7, #24
 8008a88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a8c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008a90:	6819      	ldr	r1, [r3, #0]
 8008a92:	489c      	ldr	r0, [pc, #624]	; (8008d04 <kalmanCoreUpdateWithPKE+0x3d8>)
 8008a94:	f7ff fb5c 	bl	8008150 <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 8008a98:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3358      	adds	r3, #88	; 0x58
 8008aa4:	f107 0120 	add.w	r1, r7, #32
 8008aa8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8008aac:	4618      	mov	r0, r3
 8008aae:	f01c f962 	bl	8024d76 <memcpy>

    assertStateNotNaN(this);
 8008ab2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008ab6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	f7ff fbcc 	bl	8008258 <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8008ac6:	e103      	b.n	8008cd0 <kalmanCoreUpdateWithPKE+0x3a4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 8008ac8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008acc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008ad0:	e0f4      	b.n	8008cbc <kalmanCoreUpdateWithPKE+0x390>
        float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8008ad2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008ad6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008ada:	6819      	ldr	r1, [r3, #0]
 8008adc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008aea:	4413      	add	r3, r2
 8008aec:	3316      	adds	r3, #22
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	edd3 7a00 	vldr	s15, [r3]
 8008af6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008afa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008afe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008b02:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008b06:	6819      	ldr	r1, [r3, #0]
 8008b08:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008b16:	4413      	add	r3, r2
 8008b18:	3316      	adds	r3, #22
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	edd3 7a00 	vldr	s15, [r3]
 8008b22:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b2e:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
        if (isnan(p) || p > MAX_COVARIANCE) {
 8008b32:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 8008b36:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8008b3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8008b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b42:	d608      	bvs.n	8008b56 <kalmanCoreUpdateWithPKE+0x22a>
 8008b44:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8008b48:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8008d0c <kalmanCoreUpdateWithPKE+0x3e0>
 8008b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b54:	dd34      	ble.n	8008bc0 <kalmanCoreUpdateWithPKE+0x294>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8008b56:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008b5a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	4413      	add	r3, r2
 8008b6a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008b6e:	4413      	add	r3, r2
 8008b70:	3316      	adds	r3, #22
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	4a66      	ldr	r2, [pc, #408]	; (8008d10 <kalmanCoreUpdateWithPKE+0x3e4>)
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008b7e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008b92:	4413      	add	r3, r2
 8008b94:	3316      	adds	r3, #22
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	6819      	ldr	r1, [r3, #0]
 8008b9c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008ba0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008baa:	4613      	mov	r3, r2
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4413      	add	r3, r2
 8008bb0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008bb4:	4413      	add	r3, r2
 8008bb6:	3316      	adds	r3, #22
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4403      	add	r3, r0
 8008bbc:	6019      	str	r1, [r3, #0]
 8008bbe:	e078      	b.n	8008cb2 <kalmanCoreUpdateWithPKE+0x386>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 8008bc0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008bc4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d13d      	bne.n	8008c48 <kalmanCoreUpdateWithPKE+0x31c>
 8008bcc:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8008bd0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8008d14 <kalmanCoreUpdateWithPKE+0x3e8>
 8008bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bdc:	d534      	bpl.n	8008c48 <kalmanCoreUpdateWithPKE+0x31c>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8008bde:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008be2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008be6:	6819      	ldr	r1, [r3, #0]
 8008be8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008bec:	4613      	mov	r3, r2
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008bf6:	4413      	add	r3, r2
 8008bf8:	3316      	adds	r3, #22
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	4a46      	ldr	r2, [pc, #280]	; (8008d18 <kalmanCoreUpdateWithPKE+0x3ec>)
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008c06:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008c0a:	6819      	ldr	r1, [r3, #0]
 8008c0c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008c10:	4613      	mov	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3316      	adds	r3, #22
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008c28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008c32:	4613      	mov	r3, r2
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	4413      	add	r3, r2
 8008c38:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3316      	adds	r3, #22
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4403      	add	r3, r0
 8008c44:	6019      	str	r1, [r3, #0]
 8008c46:	e034      	b.n	8008cb2 <kalmanCoreUpdateWithPKE+0x386>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 8008c48:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008c4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008c50:	6819      	ldr	r1, [r3, #0]
 8008c52:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008c56:	4613      	mov	r3, r2
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008c60:	4413      	add	r3, r2
 8008c62:	3316      	adds	r3, #22
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008c72:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008c76:	6819      	ldr	r1, [r3, #0]
 8008c78:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4413      	add	r3, r2
 8008c82:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008c86:	4413      	add	r3, r2
 8008c88:	3316      	adds	r3, #22
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008c94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008ca8:	4413      	add	r3, r2
 8008caa:	3316      	adds	r3, #22
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4403      	add	r3, r0
 8008cb0:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 8008cb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008cbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	f77f af06 	ble.w	8008ad2 <kalmanCoreUpdateWithPKE+0x1a6>
    for (int i=0; i<KC_STATE_DIM; i++) {
 8008cc6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8008cd0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	f77f aef7 	ble.w	8008ac8 <kalmanCoreUpdateWithPKE+0x19c>
            }
        }
    }
    assertStateNotNaN(this);
 8008cda:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008cde:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	f7ff fab8 	bl	8008258 <assertStateNotNaN>

    this->isUpdated = true;
 8008ce8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008cec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
}
 8008cf8:	bf00      	nop
 8008cfa:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd90      	pop	{r4, r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200008e0 	.word	0x200008e0
 8008d08:	200096bc 	.word	0x200096bc
 8008d0c:	42c80000 	.word	0x42c80000
 8008d10:	42c80000 	.word	0x42c80000
 8008d14:	358637bd 	.word	0x358637bd
 8008d18:	358637bd 	.word	0x358637bd

08008d1c <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b090      	sub	sp, #64	; 0x40
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	ed87 0a01 	vstr	s0, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 8008d2e:	f107 0318 	add.w	r3, r7, #24
 8008d32:	2224      	movs	r2, #36	; 0x24
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f01b fea2 	bl	8024a80 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	823b      	strh	r3, [r7, #16]
 8008d40:	2309      	movs	r3, #9
 8008d42:	827b      	strh	r3, [r7, #18]
 8008d44:	f107 0318 	add.w	r3, r7, #24
 8008d48:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 8008d4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008d4e:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	f083 0301 	eor.w	r3, r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <kalmanCoreUpdateWithBaro+0x54>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8008d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6e:	d503      	bpl.n	8008d78 <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }

  float meas = (baroAsl - this->baroReferenceHeight);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8008d7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d90:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008d9e:	f107 0310 	add.w	r3, r7, #16
 8008da2:	eef0 0a47 	vmov.f32	s1, s14
 8008da6:	eeb0 0a67 	vmov.f32	s0, s15
 8008daa:	4619      	mov	r1, r3
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff fbeb 	bl	8008588 <kalmanCoreScalarUpdate>
}
 8008db2:	bf00      	nop
 8008db4:	3740      	adds	r7, #64	; 0x40
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b0a2      	sub	sp, #136	; 0x88
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6178      	str	r0, [r7, #20]
 8008dc4:	6139      	str	r1, [r7, #16]
 8008dc6:	60fa      	str	r2, [r7, #12]
 8008dc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8008dcc:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 8008dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8008dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008dd6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 8008dda:	4bd2      	ldr	r3, [pc, #840]	; (8009124 <predictDt+0x368>)
 8008ddc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008de0:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 8008de2:	4bd0      	ldr	r3, [pc, #832]	; (8009124 <predictDt+0x368>)
 8008de4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008de8:	629a      	str	r2, [r3, #40]	; 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 8008dea:	4bce      	ldr	r3, [pc, #824]	; (8009124 <predictDt+0x368>)
 8008dec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008df0:	651a      	str	r2, [r3, #80]	; 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 8008df2:	4bcc      	ldr	r3, [pc, #816]	; (8009124 <predictDt+0x368>)
 8008df4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008df8:	679a      	str	r2, [r3, #120]	; 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 8008dfa:	4bca      	ldr	r3, [pc, #808]	; (8009124 <predictDt+0x368>)
 8008dfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 8008e04:	4bc7      	ldr	r3, [pc, #796]	; (8009124 <predictDt+0x368>)
 8008e06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 8008e0e:	4bc5      	ldr	r3, [pc, #788]	; (8009124 <predictDt+0x368>)
 8008e10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 8008e18:	4bc2      	ldr	r3, [pc, #776]	; (8009124 <predictDt+0x368>)
 8008e1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e1e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 8008e22:	4bc0      	ldr	r3, [pc, #768]	; (8009124 <predictDt+0x368>)
 8008e24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8008e32:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	4bba      	ldr	r3, [pc, #744]	; (8009124 <predictDt+0x368>)
 8008e3c:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4e:	4bb5      	ldr	r3, [pc, #724]	; (8009124 <predictDt+0x368>)
 8008e50:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8008e5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e62:	4bb0      	ldr	r3, [pc, #704]	; (8009124 <predictDt+0x368>)
 8008e64:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8008e6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	4bab      	ldr	r3, [pc, #684]	; (8009124 <predictDt+0x368>)
 8008e78:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8008e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	4ba6      	ldr	r3, [pc, #664]	; (8009124 <predictDt+0x368>)
 8008e8c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9e:	4ba1      	ldr	r3, [pc, #644]	; (8009124 <predictDt+0x368>)
 8008ea0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8008eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	4b9c      	ldr	r3, [pc, #624]	; (8009124 <predictDt+0x368>)
 8008eb4:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8008ebe:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec6:	4b97      	ldr	r3, [pc, #604]	; (8009124 <predictDt+0x368>)
 8008ec8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	4b92      	ldr	r3, [pc, #584]	; (8009124 <predictDt+0x368>)
 8008edc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ed93 7a04 	vldr	s14, [r3, #16]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8008eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	edd3 6a05 	vldr	s13, [r3, #20]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8008efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f04:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0c:	4b85      	ldr	r3, [pc, #532]	; (8009124 <predictDt+0x368>)
 8008f0e:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	ed93 7a04 	vldr	s14, [r3, #16]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	edd3 6a05 	vldr	s13, [r3, #20]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3e:	4b79      	ldr	r3, [pc, #484]	; (8009124 <predictDt+0x368>)
 8008f40:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	ed93 7a04 	vldr	s14, [r3, #16]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	edd3 6a05 	vldr	s13, [r3, #20]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f68:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f70:	4b6c      	ldr	r3, [pc, #432]	; (8009124 <predictDt+0x368>)
 8008f72:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f7c:	eeb1 7a67 	vneg.f32	s14, s15
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8008f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	edd3 6a05 	vldr	s13, [r3, #20]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	4b5f      	ldr	r3, [pc, #380]	; (8009124 <predictDt+0x368>)
 8008fa8:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	edd3 7a03 	vldr	s15, [r3, #12]
 8008fb2:	eeb1 7a67 	vneg.f32	s14, s15
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	edd3 6a05 	vldr	s13, [r3, #20]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fdc:	4b51      	ldr	r3, [pc, #324]	; (8009124 <predictDt+0x368>)
 8008fde:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	edd3 7a03 	vldr	s15, [r3, #12]
 8008fe8:	eeb1 7a67 	vneg.f32	s14, s15
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	edd3 6a05 	vldr	s13, [r3, #20]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800900a:	edd7 7a02 	vldr	s15, [r7, #8]
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	4b44      	ldr	r3, [pc, #272]	; (8009124 <predictDt+0x368>)
 8009014:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ed93 7a03 	vldr	s14, [r3, #12]
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	edd3 6a04 	vldr	s13, [r3, #16]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009038:	ee37 7a67 	vsub.f32	s14, s14, s15
 800903c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009044:	4b37      	ldr	r3, [pc, #220]	; (8009124 <predictDt+0x368>)
 8009046:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	edd3 6a04 	vldr	s13, [r3, #16]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800906a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800906e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009076:	4b2b      	ldr	r3, [pc, #172]	; (8009124 <predictDt+0x368>)
 8009078:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	ed93 7a03 	vldr	s14, [r3, #12]
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	edd3 6a04 	vldr	s13, [r3, #16]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800909c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80090a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a8:	4b1e      	ldr	r3, [pc, #120]	; (8009124 <predictDt+0x368>)
 80090aa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 80090ae:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <predictDt+0x368>)
 80090b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80090b4:	679a      	str	r2, [r3, #120]	; 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80090bc:	eeb1 7a67 	vneg.f32	s14, s15
 80090c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80090c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c8:	4b16      	ldr	r3, [pc, #88]	; (8009124 <predictDt+0x368>)
 80090ca:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80090d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80090d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090dc:	4b11      	ldr	r3, [pc, #68]	; (8009124 <predictDt+0x368>)
 80090de:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80090e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80090ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <predictDt+0x368>)
 80090f2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 80090f6:	4b0b      	ldr	r3, [pc, #44]	; (8009124 <predictDt+0x368>)
 80090f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80090fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	edd3 7a00 	vldr	s15, [r3]
 8009106:	eeb1 7a67 	vneg.f32	s14, s15
 800910a:	edd7 7a02 	vldr	s15, [r7, #8]
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	4b04      	ldr	r3, [pc, #16]	; (8009124 <predictDt+0x368>)
 8009114:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	edd3 7a01 	vldr	s15, [r3, #4]
 800911e:	eeb1 7a67 	vneg.f32	s14, s15
 8009122:	e001      	b.n	8009128 <predictDt+0x36c>
 8009124:	20004598 	.word	0x20004598
 8009128:	edd7 7a02 	vldr	s15, [r7, #8]
 800912c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009130:	4bb2      	ldr	r3, [pc, #712]	; (80093fc <predictDt+0x640>)
 8009132:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	ed93 7a00 	vldr	s14, [r3]
 800913c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009144:	4bad      	ldr	r3, [pc, #692]	; (80093fc <predictDt+0x640>)
 8009146:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 800914a:	4bac      	ldr	r3, [pc, #688]	; (80093fc <predictDt+0x640>)
 800914c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009150:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 8009154:	4ba9      	ldr	r3, [pc, #676]	; (80093fc <predictDt+0x640>)
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009164:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8009400 <predictDt+0x644>
 8009168:	ee27 7a87 	vmul.f32	s14, s15, s14
 800916c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009174:	4ba1      	ldr	r3, [pc, #644]	; (80093fc <predictDt+0x640>)
 8009176:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009180:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8009410 <predictDt+0x654>
 8009184:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009188:	edd7 7a02 	vldr	s15, [r7, #8]
 800918c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009190:	4b9a      	ldr	r3, [pc, #616]	; (80093fc <predictDt+0x640>)
 8009192:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800919c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8009410 <predictDt+0x654>
 80091a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80091a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ac:	4b93      	ldr	r3, [pc, #588]	; (80093fc <predictDt+0x640>)
 80091ae:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 80091b2:	4b92      	ldr	r3, [pc, #584]	; (80093fc <predictDt+0x640>)
 80091b4:	f04f 0200 	mov.w	r2, #0
 80091b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80091c2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8009400 <predictDt+0x644>
 80091c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	4b8a      	ldr	r3, [pc, #552]	; (80093fc <predictDt+0x640>)
 80091d4:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80091de:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8009400 <predictDt+0x644>
 80091e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	4b83      	ldr	r3, [pc, #524]	; (80093fc <predictDt+0x640>)
 80091f0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80091fa:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8009410 <predictDt+0x654>
 80091fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009202:	edd7 7a02 	vldr	s15, [r7, #8]
 8009206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800920a:	4b7c      	ldr	r3, [pc, #496]	; (80093fc <predictDt+0x640>)
 800920c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 8009210:	4b7a      	ldr	r3, [pc, #488]	; (80093fc <predictDt+0x640>)
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	ed93 7a00 	vldr	s14, [r3]
 8009220:	edd7 7a02 	vldr	s15, [r7, #8]
 8009224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009228:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800922c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009230:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
  float d1 = gyro->y*dt/2;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	ed93 7a01 	vldr	s14, [r3, #4]
 800923a:	edd7 7a02 	vldr	s15, [r7, #8]
 800923e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009242:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800924a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  float d2 = gyro->z*dt/2;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	ed93 7a02 	vldr	s14, [r3, #8]
 8009254:	edd7 7a02 	vldr	s15, [r7, #8]
 8009258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800925c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009264:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 8009268:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800926c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009270:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800927c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009280:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009284:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009288:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800928c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009294:	4b59      	ldr	r3, [pc, #356]	; (80093fc <predictDt+0x640>)
 8009296:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800929a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800929e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80092a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80092aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092ae:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80092b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092b6:	4b51      	ldr	r3, [pc, #324]	; (80093fc <predictDt+0x640>)
 80092b8:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 80092bc:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80092c0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80092c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80092cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80092d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092d8:	4b48      	ldr	r3, [pc, #288]	; (80093fc <predictDt+0x640>)
 80092da:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 80092de:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80092e2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80092e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80092ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092f2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80092f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092fa:	4b40      	ldr	r3, [pc, #256]	; (80093fc <predictDt+0x640>)
 80092fc:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 8009300:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009304:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009308:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800930c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009318:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800931c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009320:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009324:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800932c:	4b33      	ldr	r3, [pc, #204]	; (80093fc <predictDt+0x640>)
 800932e:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 8009332:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009336:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800933a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009342:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009346:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800934a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800934e:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <predictDt+0x640>)
 8009350:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 8009354:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009358:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800935c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009360:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009364:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009368:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800936c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009370:	4b22      	ldr	r3, [pc, #136]	; (80093fc <predictDt+0x640>)
 8009372:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 8009376:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800937a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800937e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009382:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009386:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800938a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800938e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <predictDt+0x640>)
 8009394:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 8009398:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800939c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80093a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80093a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093b0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80093b4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80093b8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80093bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80093c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <predictDt+0x640>)
 80093c6:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80093d0:	4a0c      	ldr	r2, [pc, #48]	; (8009404 <predictDt+0x648>)
 80093d2:	4619      	mov	r1, r3
 80093d4:	480c      	ldr	r0, [pc, #48]	; (8009408 <predictDt+0x64c>)
 80093d6:	f7fe febb 	bl	8008150 <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 80093da:	490c      	ldr	r1, [pc, #48]	; (800940c <predictDt+0x650>)
 80093dc:	480a      	ldr	r0, [pc, #40]	; (8009408 <predictDt+0x64c>)
 80093de:	f7fe fe95 	bl	800810c <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80093e8:	461a      	mov	r2, r3
 80093ea:	4908      	ldr	r1, [pc, #32]	; (800940c <predictDt+0x650>)
 80093ec:	4805      	ldr	r0, [pc, #20]	; (8009404 <predictDt+0x648>)
 80093ee:	f7fe feaf 	bl	8008150 <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8125 	beq.w	8009644 <predictDt+0x888>
 80093fa:	e00b      	b.n	8009414 <predictDt+0x658>
 80093fc:	20004598 	.word	0x20004598
 8009400:	c11cf5c3 	.word	0xc11cf5c3
 8009404:	200008f0 	.word	0x200008f0
 8009408:	200008e8 	.word	0x200008e8
 800940c:	200008f8 	.word	0x200008f8
 8009410:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	64fb      	str	r3, [r7, #76]	; 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009420:	ed97 7a02 	vldr	s14, [r7, #8]
 8009424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009428:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    dy = this->S[KC_STATE_PY] * dt;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009432:	ed97 7a02 	vldr	s14, [r7, #8]
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	ed93 7a05 	vldr	s14, [r3, #20]
 8009444:	edd7 7a02 	vldr	s15, [r7, #8]
 8009448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800944c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8009450:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009454:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009458:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800945c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009464:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	ed93 7a00 	vldr	s14, [r3]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8009474:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009478:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8009482:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009486:	ee66 7a27 	vmul.f32	s15, s12, s15
 800948a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8009494:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009498:	ee66 7a27 	vmul.f32	s15, s12, s15
 800949c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80094b6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80094ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 80094c4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80094c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80094cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 80094d6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80094da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80094f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80094fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8009506:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800950a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800950e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8009518:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800951c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009520:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009524:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009528:	ed1f 6a47 	vldr	s12, [pc, #-284]	; 8009410 <predictDt+0x654>
 800952c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8009530:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009538:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800953c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	65bb      	str	r3, [r7, #88]	; 0x58
    tmpSPY = this->S[KC_STATE_PY];
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	657b      	str	r3, [r7, #84]	; 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	653b      	str	r3, [r7, #80]	; 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	ed93 7a03 	vldr	s14, [r3, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	edd3 6a02 	vldr	s13, [r3, #8]
 8009564:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009568:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	ed93 6a01 	vldr	s12, [r3, #4]
 8009572:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009576:	ee66 7a27 	vmul.f32	s15, s12, s15
 800957a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009584:	ed1f 6a5e 	vldr	s12, [pc, #-376]	; 8009410 <predictDt+0x654>
 8009588:	ee67 7a86 	vmul.f32	s15, s15, s12
 800958c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009590:	edd7 7a02 	vldr	s15, [r7, #8]
 8009594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80095ae:	eef1 6a67 	vneg.f32	s13, s15
 80095b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80095b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	ed93 6a00 	vldr	s12, [r3]
 80095c0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80095c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80095c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80095d2:	ed1f 6a71 	vldr	s12, [pc, #-452]	; 8009410 <predictDt+0x654>
 80095d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80095da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80095de:	edd7 7a02 	vldr	s15, [r7, #8]
 80095e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80095fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009600:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009604:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009608:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	ed93 6a00 	vldr	s12, [r3]
 8009612:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009616:	ee66 7a27 	vmul.f32	s15, s12, s15
 800961a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009624:	ed1f 6a86 	vldr	s12, [pc, #-536]	; 8009410 <predictDt+0x654>
 8009628:	ee67 7a86 	vmul.f32	s15, s15, s12
 800962c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009630:	edd7 7a02 	vldr	s15, [r7, #8]
 8009634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	edc3 7a05 	vstr	s15, [r3, #20]
 8009642:	e137      	b.n	80098b4 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	ed93 7a03 	vldr	s14, [r3, #12]
 800964a:	edd7 7a02 	vldr	s15, [r7, #8]
 800964e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	edd3 6a00 	vldr	s13, [r3]
 8009658:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800965c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009660:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009664:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800966c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	ed93 7a04 	vldr	s14, [r3, #16]
 8009676:	edd7 7a02 	vldr	s15, [r7, #8]
 800967a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	edd3 6a01 	vldr	s13, [r3, #4]
 8009684:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009688:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800968c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009690:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009698:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	ed93 7a05 	vldr	s14, [r3, #20]
 80096a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80096a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80096b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80096b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80096b8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80096bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80096c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096c4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	ed93 7a00 	vldr	s14, [r3]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80096d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80096d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 80096e2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80096e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80096ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80096f4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80096f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80096fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009716:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800971a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 8009724:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009728:	ee66 7a27 	vmul.f32	s15, s12, s15
 800972c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8009736:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800973a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800973e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8009758:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800975c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8009766:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800976a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800976e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8009778:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800977c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009780:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009784:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009788:	ed9f 6ae1 	vldr	s12, [pc, #900]	; 8009b10 <predictDt+0xd54>
 800978c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8009790:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009798:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800979c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	65bb      	str	r3, [r7, #88]	; 0x58
    tmpSPY = this->S[KC_STATE_PY];
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	657b      	str	r3, [r7, #84]	; 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	653b      	str	r3, [r7, #80]	; 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	edd3 6a00 	vldr	s13, [r3]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80097ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80097ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80097d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	ed93 6a01 	vldr	s12, [r3, #4]
 80097dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80097e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80097e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80097ee:	ed9f 6ac8 	vldr	s12, [pc, #800]	; 8009b10 <predictDt+0xd54>
 80097f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80097f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80097fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80097fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	ed93 7a04 	vldr	s14, [r3, #16]
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	edd3 6a01 	vldr	s13, [r3, #4]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	ed93 6a02 	vldr	s12, [r3, #8]
 800981e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009822:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009826:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	ed93 6a00 	vldr	s12, [r3]
 8009830:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009834:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009838:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009842:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 8009b10 <predictDt+0xd54>
 8009846:	ee67 7a86 	vmul.f32	s15, s15, s12
 800984a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800984e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	ed93 7a05 	vldr	s14, [r3, #20]
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	edd3 6a02 	vldr	s13, [r3, #8]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	ed93 6a01 	vldr	s12, [r3, #4]
 8009872:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009876:	ee66 7a27 	vmul.f32	s15, s12, s15
 800987a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	ed93 6a00 	vldr	s12, [r3]
 8009884:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009888:	ee66 7a27 	vmul.f32	s15, s12, s15
 800988c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009896:	ed9f 6a9e 	vldr	s12, [pc, #632]	; 8009b10 <predictDt+0xd54>
 800989a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800989e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80098a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80098a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	edd3 7a00 	vldr	s15, [r3]
 80098ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float dtwy = dt*gyro->y;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80098cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80098d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float dtwz = dt*gyro->z;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	edd3 7a02 	vldr	s15, [r3, #8]
 80098de:	ed97 7a02 	vldr	s14, [r7, #8]
 80098e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 80098ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80098ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80098f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80098f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009902:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800990a:	eeb0 0a67 	vmov.f32	s0, s15
 800990e:	f7fe fc47 	bl	80081a0 <arm_sqrt>
 8009912:	eef0 7a40 	vmov.f32	s15, s0
 8009916:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009b1c <predictDt+0xd60>
 800991a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800991e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 8009922:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009926:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800992a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800992e:	eeb0 0a47 	vmov.f32	s0, s14
 8009932:	f01a f97f 	bl	8023c34 <arm_cos_f32>
 8009936:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
  float sa = arm_sin_f32(angle/2.0f);
 800993a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800993e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009942:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009946:	eeb0 0a47 	vmov.f32	s0, s14
 800994a:	f01a f92d 	bl	8023ba8 <arm_sin_f32>
 800994e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800995a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800995e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009962:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800996a:	edc7 7a08 	vstr	s15, [r7, #32]
 800996e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009972:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009976:	ee67 6a27 	vmul.f32	s13, s14, s15
 800997a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800997e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009982:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8009986:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800998a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800998e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009992:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800999a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 800999e:	ed97 7a07 	vldr	s14, [r7, #28]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80099a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80099b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099be:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80099c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80099da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099e2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 80099e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80099f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80099fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a06:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a2a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 8009a2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a60:	edd7 6a08 	vldr	s13, [r7, #32]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a72:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 8009a76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a84:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a96:	edd7 6a08 	vldr	s13, [r7, #32]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009aa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aba:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

  if (! quadIsFlying) {
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	f083 0301 	eor.w	r3, r3, #1
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d04e      	beq.n	8009b68 <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 8009aca:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <predictDt+0xd58>)
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 8009ace:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009ad2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8009ae0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8009b18 <predictDt+0xd5c>
 8009ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aec:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 8009af0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009af4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8009b02:	eddf 6a05 	vldr	s13, [pc, #20]	; 8009b18 <predictDt+0xd5c>
 8009b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b0e:	e007      	b.n	8009b20 <predictDt+0xd64>
 8009b10:	411cf5c3 	.word	0x411cf5c3
 8009b14:	3f7fbe77 	.word	0x3f7fbe77
 8009b18:	3a83126f 	.word	0x3a83126f
 8009b1c:	358637bd 	.word	0x358637bd
 8009b20:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 8009b24:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009b28:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8009b36:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8009b18 <predictDt+0xd5c>
 8009b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b42:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 8009b46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009b4a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8009b58:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8009b18 <predictDt+0xd5c>
 8009b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b64:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 8009b68:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009b6c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009b70:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009b74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b7c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009b80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b88:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009b8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b94:	eeb0 0a67 	vmov.f32	s0, s15
 8009b98:	f7fe fb02 	bl	80081a0 <arm_sqrt>
 8009b9c:	eef0 7a40 	vmov.f32	s15, s0
 8009ba0:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8009b1c <predictDt+0xd60>
 8009ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ba8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 8009bac:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8009bb0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8009bbe:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8009bc2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8009bd0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8009bd4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8009be2:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8009be6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  assertStateNotNaN(this);
 8009bf4:	6978      	ldr	r0, [r7, #20]
 8009bf6:	f7fe fb2f 	bl	8008258 <assertStateNotNaN>

  this->isUpdated = true;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
}
 8009c02:	bf00      	nop
 8009c04:	3788      	adds	r7, #136	; 0x88
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop

08009c0c <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c2c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8009c5c <kalmanCorePredict+0x50>
 8009c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c34:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 8009c38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c3c:	ed97 0a05 	vldr	s0, [r7, #20]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff f8b9 	bl	8008dbc <predictDt>
  this->lastPredictionMs = nowMs;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 8009c52:	bf00      	nop
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	447a0000 	.word	0x447a0000

08009c60 <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	ed93 7a05 	vldr	s14, [r3, #20]
 8009c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	edd3 6a07 	vldr	s13, [r3, #28]
 8009c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8009c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ca0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca8:	f01c feac 	bl	8026a04 <powf>
 8009cac:	eeb0 7a40 	vmov.f32	s14, s0
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	ed93 7a05 	vldr	s14, [r3, #20]
 8009cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8009cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8009cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	edd3 6a07 	vldr	s13, [r3, #28]
 8009cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	edd3 7a08 	vldr	s15, [r3, #32]
 8009cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cf2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8009cfa:	f01c fe83 	bl	8026a04 <powf>
 8009cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8009d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	ed93 7a06 	vldr	s14, [r3, #24]
 8009d18:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	edd3 6a07 	vldr	s13, [r3, #28]
 8009d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8009d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d44:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009d48:	eeb0 0a67 	vmov.f32	s0, s15
 8009d4c:	f01c fe5a 	bl	8026a04 <powf>
 8009d50:	eeb0 7a40 	vmov.f32	s14, s0
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8009d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	ed93 7a05 	vldr	s14, [r3, #20]
 8009d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	edd3 7a07 	vldr	s15, [r3, #28]
 8009d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d7c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009d80:	eeb0 0a67 	vmov.f32	s0, s15
 8009d84:	f01c fe3e 	bl	8026a04 <powf>
 8009d88:	eeb0 7a40 	vmov.f32	s14, s0
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8009d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8009da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	edd3 7a07 	vldr	s15, [r3, #28]
 8009db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009db4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009db8:	eeb0 0a67 	vmov.f32	s0, s15
 8009dbc:	f01c fe22 	bl	8026a04 <powf>
 8009dc0:	eeb0 7a40 	vmov.f32	s14, s0
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8009dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	ed93 7a06 	vldr	s14, [r3, #24]
 8009dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8009dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	edd3 7a07 	vldr	s15, [r3, #28]
 8009de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dec:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009df0:	eeb0 0a67 	vmov.f32	s0, s15
 8009df4:	f01c fe06 	bl	8026a04 <powf>
 8009df8:	eeb0 7a40 	vmov.f32	s14, s0
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8009e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e24:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009e28:	eeb0 0a67 	vmov.f32	s0, s15
 8009e2c:	f01c fdea 	bl	8026a04 <powf>
 8009e30:	eeb0 7a40 	vmov.f32	s14, s0
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8009e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e5c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009e60:	eeb0 0a67 	vmov.f32	s0, s15
 8009e64:	f01c fdce 	bl	8026a04 <powf>
 8009e68:	eeb0 7a40 	vmov.f32	s14, s0
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 8009e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8009e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e94:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009e98:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9c:	f01c fdb2 	bl	8026a04 <powf>
 8009ea0:	eeb0 7a40 	vmov.f32	s14, s0
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8009eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	61fb      	str	r3, [r7, #28]
 8009eb8:	e0b7      	b.n	800a02a <addProcessNoiseDt+0x3ca>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	61bb      	str	r3, [r7, #24]
 8009ebe:	e0ad      	b.n	800a01c <addProcessNoiseDt+0x3bc>
      float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	4413      	add	r3, r2
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	4413      	add	r3, r2
 8009ece:	3316      	adds	r3, #22
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	edd3 7a00 	vldr	s15, [r3]
 8009ed8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009edc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009ee0:	68f9      	ldr	r1, [r7, #12]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	4413      	add	r3, r2
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	4413      	add	r3, r2
 8009eee:	3316      	adds	r3, #22
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	440b      	add	r3, r1
 8009ef4:	edd3 7a00 	vldr	s15, [r3]
 8009ef8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f04:	edc7 7a05 	vstr	s15, [r7, #20]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8009f08:	ed97 7a05 	vldr	s14, [r7, #20]
 8009f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f10:	eeb4 7a67 	vcmp.f32	s14, s15
 8009f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f18:	d608      	bvs.n	8009f2c <addProcessNoiseDt+0x2cc>
 8009f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f1e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a040 <addProcessNoiseDt+0x3e0>
 8009f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2a:	dd22      	ble.n	8009f72 <addProcessNoiseDt+0x312>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8009f2c:	68f9      	ldr	r1, [r7, #12]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	4613      	mov	r3, r2
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	4413      	add	r3, r2
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	4413      	add	r3, r2
 8009f3a:	3316      	adds	r3, #22
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	4a40      	ldr	r2, [pc, #256]	; (800a044 <addProcessNoiseDt+0x3e4>)
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	68f9      	ldr	r1, [r7, #12]
 8009f46:	69ba      	ldr	r2, [r7, #24]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	3316      	adds	r3, #22
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	6819      	ldr	r1, [r3, #0]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	4413      	add	r3, r2
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	4413      	add	r3, r2
 8009f68:	3316      	adds	r3, #22
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4403      	add	r3, r0
 8009f6e:	6019      	str	r1, [r3, #0]
 8009f70:	e051      	b.n	800a016 <addProcessNoiseDt+0x3b6>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 8009f72:	69fa      	ldr	r2, [r7, #28]
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d12b      	bne.n	8009fd2 <addProcessNoiseDt+0x372>
 8009f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f7e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a048 <addProcessNoiseDt+0x3e8>
 8009f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8a:	d522      	bpl.n	8009fd2 <addProcessNoiseDt+0x372>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	4613      	mov	r3, r2
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	4413      	add	r3, r2
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	4413      	add	r3, r2
 8009f9a:	3316      	adds	r3, #22
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	4a2a      	ldr	r2, [pc, #168]	; (800a04c <addProcessNoiseDt+0x3ec>)
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	68f9      	ldr	r1, [r7, #12]
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	4413      	add	r3, r2
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3316      	adds	r3, #22
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	69fa      	ldr	r2, [r7, #28]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	4413      	add	r3, r2
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	3316      	adds	r3, #22
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4403      	add	r3, r0
 8009fce:	6019      	str	r1, [r3, #0]
 8009fd0:	e021      	b.n	800a016 <addProcessNoiseDt+0x3b6>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8009fd2:	68f9      	ldr	r1, [r7, #12]
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	4413      	add	r3, r2
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3316      	adds	r3, #22
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	69fa      	ldr	r2, [r7, #28]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3316      	adds	r3, #22
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	4613      	mov	r3, r2
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	4413      	add	r3, r2
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	4413      	add	r3, r2
 800a00e:	3316      	adds	r3, #22
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4403      	add	r3, r0
 800a014:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	3301      	adds	r3, #1
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2b08      	cmp	r3, #8
 800a020:	f77f af4e 	ble.w	8009ec0 <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	3301      	adds	r3, #1
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	f77f af44 	ble.w	8009eba <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f7fe f910 	bl	8008258 <assertStateNotNaN>
}
 800a038:	bf00      	nop
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	42c80000 	.word	0x42c80000
 800a044:	42c80000 	.word	0x42c80000
 800a048:	358637bd 	.word	0x358637bd
 800a04c:	358637bd 	.word	0x358637bd

0800a050 <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a06e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a0a8 <kalmanCoreAddProcessNoise+0x58>
 800a072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a076:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 800a07a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a07e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a086:	dc00      	bgt.n	800a08a <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 800a088:	e009      	b.n	800a09e <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 800a08a:	ed97 0a05 	vldr	s0, [r7, #20]
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fde5 	bl	8009c60 <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	447a0000 	.word	0x447a0000

0800a0ac <kalmanCoreFinalize>:

bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b098      	sub	sp, #96	; 0x60
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800a0ba:	f083 0301 	eor.w	r3, r3, #1
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <kalmanCoreFinalize+0x1e>
    return false;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f000 bc6d 	b.w	800a9a4 <kalmanCoreFinalize+0x8f8>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  float v0 = this->S[KC_STATE_D0];
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	657b      	str	r3, [r7, #84]	; 0x54
  float v1 = this->S[KC_STATE_D1];
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	653b      	str	r3, [r7, #80]	; 0x50
  float v2 = this->S[KC_STATE_D2];
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	64fb      	str	r3, [r7, #76]	; 0x4c

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 800a0dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a0e0:	eef0 7ae7 	vabs.f32	s15, s15
 800a0e4:	ed9f 7ae9 	vldr	s14, [pc, #932]	; 800a48c <kalmanCoreFinalize+0x3e0>
 800a0e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f0:	dc16      	bgt.n	800a120 <kalmanCoreFinalize+0x74>
 800a0f2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a0f6:	eef0 7ae7 	vabs.f32	s15, s15
 800a0fa:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800a48c <kalmanCoreFinalize+0x3e0>
 800a0fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a106:	dc0b      	bgt.n	800a120 <kalmanCoreFinalize+0x74>
 800a108:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a10c:	eef0 7ae7 	vabs.f32	s15, s15
 800a110:	ed9f 7ade 	vldr	s14, [pc, #888]	; 800a48c <kalmanCoreFinalize+0x3e0>
 800a114:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	f340 825e 	ble.w	800a5dc <kalmanCoreFinalize+0x530>
 800a120:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a124:	eef0 7ae7 	vabs.f32	s15, s15
 800a128:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a12c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a134:	f140 8252 	bpl.w	800a5dc <kalmanCoreFinalize+0x530>
 800a138:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a13c:	eef0 7ae7 	vabs.f32	s15, s15
 800a140:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a144:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14c:	f140 8246 	bpl.w	800a5dc <kalmanCoreFinalize+0x530>
 800a150:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a154:	eef0 7ae7 	vabs.f32	s15, s15
 800a158:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	f140 823a 	bpl.w	800a5dc <kalmanCoreFinalize+0x530>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 800a168:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a16c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a170:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a174:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a17c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a180:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a184:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a188:	eeb0 0a67 	vmov.f32	s0, s15
 800a18c:	f7fe f808 	bl	80081a0 <arm_sqrt>
 800a190:	eef0 7a40 	vmov.f32	s15, s0
 800a194:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800a490 <kalmanCoreFinalize+0x3e4>
 800a198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a19c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    float ca = arm_cos_f32(angle / 2.0f);
 800a1a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a1a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a1a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a1ac:	eeb0 0a47 	vmov.f32	s0, s14
 800a1b0:	f019 fd40 	bl	8023c34 <arm_cos_f32>
 800a1b4:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    float sa = arm_sin_f32(angle / 2.0f);
 800a1b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a1bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a1c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a1c4:	eeb0 0a47 	vmov.f32	s0, s14
 800a1c8:	f019 fcee 	bl	8023ba8 <arm_sin_f32>
 800a1cc:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 800a1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a1dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1e0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a1e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e8:	edc7 7a04 	vstr	s15, [r7, #16]
 800a1ec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a1f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a200:	edc7 7a05 	vstr	s15, [r7, #20]
 800a204:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a208:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a20c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a210:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a218:	edc7 7a06 	vstr	s15, [r7, #24]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 800a21c:	ed97 7a03 	vldr	s14, [r7, #12]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a22a:	edd7 6a04 	vldr	s13, [r7, #16]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a238:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a23c:	edd7 6a05 	vldr	s13, [r7, #20]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a24a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a24e:	edd7 6a06 	vldr	s13, [r7, #24]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a25c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a260:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 800a264:	ed97 7a04 	vldr	s14, [r7, #16]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a272:	edd7 6a03 	vldr	s13, [r7, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a27c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a280:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a284:	edd7 6a06 	vldr	s13, [r7, #24]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a28e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a292:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a296:	edd7 6a05 	vldr	s13, [r7, #20]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a2a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 800a2ac:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a2b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2ba:	edd7 6a06 	vldr	s13, [r7, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a2c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2cc:	edd7 6a03 	vldr	s13, [r7, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a2d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2de:	edd7 6a04 	vldr	s13, [r7, #16]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 800a2f4:	ed97 7a06 	vldr	s14, [r7, #24]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a2fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a302:	edd7 6a05 	vldr	s13, [r7, #20]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a30c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a310:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a314:	edd7 6a04 	vldr	s13, [r7, #16]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a31e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a322:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a326:	edd7 6a03 	vldr	s13, [r7, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a334:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a338:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 800a33c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a340:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a344:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a348:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a34c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a350:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a35c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a360:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a368:	eeb0 0a67 	vmov.f32	s0, s15
 800a36c:	f7fd ff18 	bl	80081a0 <arm_sqrt>
 800a370:	eef0 7a40 	vmov.f32	s15, s0
 800a374:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a490 <kalmanCoreFinalize+0x3e4>
 800a378:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a37c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    this->q[0] = tmpq0 / norm;
 800a380:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800a384:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    this->q[1] = tmpq1 / norm;
 800a392:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a396:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    this->q[2] = tmpq2 / norm;
 800a3a4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a3a8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a3ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    this->q[3] = tmpq3 / norm;
 800a3b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a3ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 800a3c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a3cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a3d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 800a3d8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a3dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a3e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float d2 = v2/2;
 800a3e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a3ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a3f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3f4:	edc7 7a08 	vstr	s15, [r7, #32]

    A[KC_STATE_X][KC_STATE_X] = 1;
 800a3f8:	4b26      	ldr	r3, [pc, #152]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a3fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a3fe:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 800a400:	4b24      	ldr	r3, [pc, #144]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a402:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a406:	629a      	str	r2, [r3, #40]	; 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 800a408:	4b22      	ldr	r3, [pc, #136]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a40a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a40e:	651a      	str	r2, [r3, #80]	; 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 800a410:	4b20      	ldr	r3, [pc, #128]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a412:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a416:	679a      	str	r2, [r3, #120]	; 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 800a418:	4b1e      	ldr	r3, [pc, #120]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a41a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a41e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a424:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a428:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 800a42c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a430:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a434:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a43c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a440:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a444:	edd7 7a08 	vldr	s15, [r7, #32]
 800a448:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a44c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a450:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a454:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a458:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a45a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800a45e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a462:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a46e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a472:	edd7 7a08 	vldr	s15, [r7, #32]
 800a476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a47a:	4b06      	ldr	r3, [pc, #24]	; (800a494 <kalmanCoreFinalize+0x3e8>)
 800a47c:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 800a480:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a484:	edd7 7a08 	vldr	s15, [r7, #32]
 800a488:	e006      	b.n	800a498 <kalmanCoreFinalize+0x3ec>
 800a48a:	bf00      	nop
 800a48c:	38d1b717 	.word	0x38d1b717
 800a490:	358637bd 	.word	0x358637bd
 800a494:	20004964 	.word	0x20004964
 800a498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a4a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a4a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a4a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4ac:	4b46      	ldr	r3, [pc, #280]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a4ae:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 800a4b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a4c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a4c6:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4ce:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a4d0:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 800a4d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a4dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a4e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4ec:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a4f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a4f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a4fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a500:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a502:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 800a506:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a50a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a512:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a516:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a51a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a51e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a522:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a524:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 800a528:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a52c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a534:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a538:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a53c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a540:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a544:	4b20      	ldr	r3, [pc, #128]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a546:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 800a54a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a54e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a556:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a55a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a55e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a562:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a566:	4b18      	ldr	r3, [pc, #96]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a568:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 800a56c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a570:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a574:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a57c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a580:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a584:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a588:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a58c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a590:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a594:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a598:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <kalmanCoreFinalize+0x51c>)
 800a59a:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 800a59e:	490b      	ldr	r1, [pc, #44]	; (800a5cc <kalmanCoreFinalize+0x520>)
 800a5a0:	480b      	ldr	r0, [pc, #44]	; (800a5d0 <kalmanCoreFinalize+0x524>)
 800a5a2:	f7fd fdb3 	bl	800810c <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a5ac:	4a09      	ldr	r2, [pc, #36]	; (800a5d4 <kalmanCoreFinalize+0x528>)
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	4807      	ldr	r0, [pc, #28]	; (800a5d0 <kalmanCoreFinalize+0x524>)
 800a5b2:	f7fd fdcd 	bl	8008150 <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4903      	ldr	r1, [pc, #12]	; (800a5cc <kalmanCoreFinalize+0x520>)
 800a5c0:	4804      	ldr	r0, [pc, #16]	; (800a5d4 <kalmanCoreFinalize+0x528>)
 800a5c2:	f7fd fdc5 	bl	8008150 <mat_mult>
 800a5c6:	e009      	b.n	800a5dc <kalmanCoreFinalize+0x530>
 800a5c8:	20004964 	.word	0x20004964
 800a5cc:	20000908 	.word	0x20000908
 800a5d0:	20000900 	.word	0x20000900
 800a5d4:	20000910 	.word	0x20000910
 800a5d8:	42c80000 	.word	0x42c80000
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a5e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a5f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a60c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a610:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a624:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a634:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a63e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a648:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a666:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a670:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a67a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a698:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a6a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a6ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a6b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a6d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a6e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a6f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a70c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a71c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a730:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a73a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a73e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a74e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a762:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a76c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a770:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a780:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a78a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a794:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a79e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a7b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a7c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a7dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a7f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f04f 0200 	mov.w	r2, #0
 800a804:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f04f 0200 	mov.w	r2, #0
 800a80c:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f04f 0200 	mov.w	r2, #0
 800a814:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 800a816:	2300      	movs	r3, #0
 800a818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a81a:	e0b7      	b.n	800a98c <kalmanCoreFinalize+0x8e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800a81c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a81e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a820:	e0ad      	b.n	800a97e <kalmanCoreFinalize+0x8d2>
      float p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a826:	4613      	mov	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	4413      	add	r3, r2
 800a82c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a82e:	4413      	add	r3, r2
 800a830:	3316      	adds	r3, #22
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	440b      	add	r3, r1
 800a836:	edd3 7a00 	vldr	s15, [r3]
 800a83a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a83e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a846:	4613      	mov	r3, r2
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	4413      	add	r3, r2
 800a84c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a84e:	4413      	add	r3, r2
 800a850:	3316      	adds	r3, #22
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	440b      	add	r3, r1
 800a856:	edd3 7a00 	vldr	s15, [r3]
 800a85a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a85e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a862:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a866:	edc7 7a07 	vstr	s15, [r7, #28]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800a86a:	ed97 7a07 	vldr	s14, [r7, #28]
 800a86e:	edd7 7a07 	vldr	s15, [r7, #28]
 800a872:	eeb4 7a67 	vcmp.f32	s14, s15
 800a876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87a:	d608      	bvs.n	800a88e <kalmanCoreFinalize+0x7e2>
 800a87c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a880:	ed1f 7aab 	vldr	s14, [pc, #-684]	; 800a5d8 <kalmanCoreFinalize+0x52c>
 800a884:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88c:	dd22      	ble.n	800a8d4 <kalmanCoreFinalize+0x828>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4413      	add	r3, r2
 800a898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a89a:	4413      	add	r3, r2
 800a89c:	3316      	adds	r3, #22
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	4a42      	ldr	r2, [pc, #264]	; (800a9ac <kalmanCoreFinalize+0x900>)
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3316      	adds	r3, #22
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	440b      	add	r3, r1
 800a8ba:	6819      	ldr	r1, [r3, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	4413      	add	r3, r2
 800a8c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3316      	adds	r3, #22
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4403      	add	r3, r0
 800a8d0:	6019      	str	r1, [r3, #0]
 800a8d2:	e051      	b.n	800a978 <kalmanCoreFinalize+0x8cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800a8d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d12b      	bne.n	800a934 <kalmanCoreFinalize+0x888>
 800a8dc:	edd7 7a07 	vldr	s15, [r7, #28]
 800a8e0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a9b0 <kalmanCoreFinalize+0x904>
 800a8e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ec:	d522      	bpl.n	800a934 <kalmanCoreFinalize+0x888>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8fa:	4413      	add	r3, r2
 800a8fc:	3316      	adds	r3, #22
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	440b      	add	r3, r1
 800a902:	4a2c      	ldr	r2, [pc, #176]	; (800a9b4 <kalmanCoreFinalize+0x908>)
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a90a:	4613      	mov	r3, r2
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	4413      	add	r3, r2
 800a910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a912:	4413      	add	r3, r2
 800a914:	3316      	adds	r3, #22
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a920:	4613      	mov	r3, r2
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	4413      	add	r3, r2
 800a926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a928:	4413      	add	r3, r2
 800a92a:	3316      	adds	r3, #22
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4403      	add	r3, r0
 800a930:	6019      	str	r1, [r3, #0]
 800a932:	e021      	b.n	800a978 <kalmanCoreFinalize+0x8cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a938:	4613      	mov	r3, r2
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	4413      	add	r3, r2
 800a93e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a940:	4413      	add	r3, r2
 800a942:	3316      	adds	r3, #22
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	69fa      	ldr	r2, [r7, #28]
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a950:	4613      	mov	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	4413      	add	r3, r2
 800a956:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a958:	4413      	add	r3, r2
 800a95a:	3316      	adds	r3, #22
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	440b      	add	r3, r1
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a96e:	4413      	add	r3, r2
 800a970:	3316      	adds	r3, #22
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4403      	add	r3, r0
 800a976:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800a978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a97a:	3301      	adds	r3, #1
 800a97c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a97e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a980:	2b08      	cmp	r3, #8
 800a982:	f77f af4e 	ble.w	800a822 <kalmanCoreFinalize+0x776>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800a986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a988:	3301      	adds	r3, #1
 800a98a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a98c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a98e:	2b08      	cmp	r3, #8
 800a990:	f77f af44 	ble.w	800a81c <kalmanCoreFinalize+0x770>
      }
    }
  }

  assertStateNotNaN(this);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fd fc5f 	bl	8008258 <assertStateNotNaN>

  this->isUpdated = false;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  return true;
 800a9a2:	2301      	movs	r3, #1
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3760      	adds	r7, #96	; 0x60
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	42c80000 	.word	0x42c80000
 800a9b0:	358637bd 	.word	0x358637bd
 800a9b4:	358637bd 	.word	0x358637bd

0800a9b8 <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b09d      	sub	sp, #116	; 0x74
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	3320      	adds	r3, #32
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	605a      	str	r2, [r3, #4]
 800a9da:	609a      	str	r2, [r3, #8]
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	625c      	str	r4, [r3, #36]	; 0x24
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6298      	str	r0, [r3, #40]	; 0x28
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	62d9      	str	r1, [r3, #44]	; 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	edd3 7a03 	vldr	s15, [r3, #12]
 800a9f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	edd3 7a05 	vldr	s15, [r3, #20]
 800aa1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa1e:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800aa42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	edd3 7a05 	vldr	s15, [r3, #20]
 800aa52:	ee66 7a27 	vmul.f32	s15, s12, s15
 800aa56:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa66:	ee26 6a27 	vmul.f32	s12, s12, s15
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	edd3 7a04 	vldr	s15, [r3, #16]
 800aa76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800aa7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	edd3 7a05 	vldr	s15, [r3, #20]
 800aa8a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800aa8e:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	3330      	adds	r3, #48	; 0x30
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	605a      	str	r2, [r3, #4]
 800aa9c:	609a      	str	r2, [r3, #8]
 800aa9e:	60da      	str	r2, [r3, #12]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	edd3 7a00 	vldr	s15, [r3]
 800aabe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	edd3 7a01 	vldr	s15, [r3, #4]
 800aace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	edd3 7a02 	vldr	s15, [r3, #8]
 800aae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aae6:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	edd3 7a00 	vldr	s15, [r3]
 800aaf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	edd3 7a01 	vldr	s15, [r3, #4]
 800ab06:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ab0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	edd3 7a02 	vldr	s15, [r3, #8]
 800ab1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ab1e:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	edd3 7a00 	vldr	s15, [r3]
 800ab2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ab3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ab42:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ab52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800ab56:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ab5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	3340      	adds	r3, #64	; 0x40
 800ab66:	2200      	movs	r2, #0
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	605a      	str	r2, [r3, #4]
 800ab6c:	609a      	str	r2, [r3, #8]
 800ab6e:	60da      	str	r2, [r3, #12]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	edc3 6a11 	vstr	s13, [r3, #68]	; 0x44
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ab8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ab9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aba6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800abb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800abc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800abda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abde:	ee37 7a67 	vsub.f32	s14, s14, s15
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800abee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abf6:	eef0 0a67 	vmov.f32	s1, s15
 800abfa:	eeb0 0a46 	vmov.f32	s0, s12
 800abfe:	f01b fedf 	bl	80269c0 <atan2f>
 800ac02:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ac12:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ac22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800ac2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac32:	eeb0 0a67 	vmov.f32	s0, s15
 800ac36:	f01b fe97 	bl	8026968 <asinf>
 800ac3a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ac4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ac5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac62:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ac72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ac82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ac96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800acaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acb2:	eef0 0a67 	vmov.f32	s1, s15
 800acb6:	eeb0 0a46 	vmov.f32	s0, s12
 800acba:	f01b fe81 	bl	80269c0 <atan2f>
 800acbe:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 800acc2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800acc6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800ad38 <kalmanCoreExternalizeState+0x380>
 800acca:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 800acce:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800acd2:	eef1 7a67 	vneg.f32	s15, s15
 800acd6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800ad38 <kalmanCoreExternalizeState+0x380>
 800acda:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 800acde:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ace2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ad38 <kalmanCoreExternalizeState+0x380>
 800ace6:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	461a      	mov	r2, r3
 800acee:	2300      	movs	r3, #0
 800acf0:	6013      	str	r3, [r2, #0]
 800acf2:	6053      	str	r3, [r2, #4]
 800acf4:	6093      	str	r3, [r2, #8]
 800acf6:	60d3      	str	r3, [r2, #12]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	edc3 6a01 	vstr	s13, [r3, #4]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	ed83 7a02 	vstr	s14, [r3, #8]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      .y = this->q[2],
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
      .z = this->q[3]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b19      	ldr	r1, [r3, #48]	; 0x30
      .w = this->q[0],
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  state->attitudeQuaternion = (quaternion_t){
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	611c      	str	r4, [r3, #16]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6158      	str	r0, [r3, #20]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6199      	str	r1, [r3, #24]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7fd fa94 	bl	8008258 <assertStateNotNaN>
}
 800ad30:	bf00      	nop
 800ad32:	3774      	adds	r7, #116	; 0x74
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd90      	pop	{r4, r7, pc}
 800ad38:	42652ee0 	.word	0x42652ee0

0800ad3c <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800ad44:	2300      	movs	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	e058      	b.n	800adfc <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 800ad4a:	4b31      	ldr	r3, [pc, #196]	; (800ae10 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800ad4c:	edd3 7a00 	vldr	s15, [r3]
 800ad50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad58:	dd21      	ble.n	800ad9e <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	ed93 7a00 	vldr	s14, [r3]
 800ad66:	4b2a      	ldr	r3, [pc, #168]	; (800ae10 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800ad68:	edd3 7a00 	vldr	s15, [r3]
 800ad6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad74:	dd01      	ble.n	800ad7a <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e044      	b.n	800ae04 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	ed93 7a00 	vldr	s14, [r3]
 800ad86:	4b22      	ldr	r3, [pc, #136]	; (800ae10 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800ad88:	edd3 7a00 	vldr	s15, [r3]
 800ad8c:	eef1 7a67 	vneg.f32	s15, s15
 800ad90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad98:	d501      	bpl.n	800ad9e <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e032      	b.n	800ae04 <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800ad9e:	4b1d      	ldr	r3, [pc, #116]	; (800ae14 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800ada0:	edd3 7a00 	vldr	s15, [r3]
 800ada4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	dd23      	ble.n	800adf6 <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3303      	adds	r3, #3
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	ed93 7a00 	vldr	s14, [r3]
 800adbc:	4b15      	ldr	r3, [pc, #84]	; (800ae14 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800adbe:	edd3 7a00 	vldr	s15, [r3]
 800adc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adca:	dd01      	ble.n	800add0 <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 800adcc:	2300      	movs	r3, #0
 800adce:	e019      	b.n	800ae04 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	3303      	adds	r3, #3
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	ed93 7a00 	vldr	s14, [r3]
 800adde:	4b0d      	ldr	r3, [pc, #52]	; (800ae14 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800ade0:	edd3 7a00 	vldr	s15, [r3]
 800ade4:	eef1 7a67 	vneg.f32	s15, s15
 800ade8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	d501      	bpl.n	800adf6 <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 800adf2:	2300      	movs	r3, #0
 800adf4:	e006      	b.n	800ae04 <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3301      	adds	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	dda3      	ble.n	800ad4a <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 800ae02:	2301      	movs	r3, #1
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	20000918 	.word	0x20000918
 800ae14:	2000091c 	.word	0x2000091c

0800ae18 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08e      	sub	sp, #56	; 0x38
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 800ae22:	f107 0314 	add.w	r3, r7, #20
 800ae26:	2224      	movs	r2, #36	; 0x24
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f019 fe28 	bl	8024a80 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800ae30:	2301      	movs	r3, #1
 800ae32:	81bb      	strh	r3, [r7, #12]
 800ae34:	2309      	movs	r3, #9
 800ae36:	81fb      	strh	r3, [r7, #14]
 800ae38:	f107 0314 	add.w	r3, r7, #20
 800ae3c:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 800ae3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ae42:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	ed93 7a01 	vldr	s14, [r3, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	edd3 7a02 	vldr	s15, [r3, #8]
 800ae50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae5a:	f107 030c 	add.w	r3, r7, #12
 800ae5e:	eef0 0a47 	vmov.f32	s1, s14
 800ae62:	eeb0 0a67 	vmov.f32	s0, s15
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7fd fb8d 	bl	8008588 <kalmanCoreScalarUpdate>
}
 800ae6e:	bf00      	nop
 800ae70:	3738      	adds	r7, #56	; 0x38
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800ae82:	f04f 0300 	mov.w	r3, #0
 800ae86:	60bb      	str	r3, [r7, #8]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	613b      	str	r3, [r7, #16]
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800ae92:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae9e:	db0a      	blt.n	800aeb6 <arm_sqrt+0x3e>
      *pOut = __builtin_sqrtf(in);
 800aea0:	ed97 0a04 	vldr	s0, [r7, #16]
 800aea4:	f01b fe06 	bl	8026ab4 <sqrtf>
 800aea8:	eef0 7a40 	vmov.f32	s15, s0
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e005      	b.n	800aec2 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f04f 0200 	mov.w	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800aebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 800aec2:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800aec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d004      	beq.n	800aed6 <arm_sqrt+0x5e>
 800aecc:	225b      	movs	r2, #91	; 0x5b
 800aece:	4906      	ldr	r1, [pc, #24]	; (800aee8 <arm_sqrt+0x70>)
 800aed0:	4806      	ldr	r0, [pc, #24]	; (800aeec <arm_sqrt+0x74>)
 800aed2:	f007 f8ab 	bl	801202c <assertFail>
  return pOut;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	ee07 3a90 	vmov	s15, r3
}
 800aedc:	eeb0 0a67 	vmov.f32	s0, s15
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	0802ce34 	.word	0x0802ce34
 800aeec:	0802ce80 	.word	0x0802ce80

0800aef0 <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 800aef0:	b580      	push	{r7, lr}
 800aef2:	ed2d 8b02 	vpush	{d8}
 800aef6:	b092      	sub	sp, #72	; 0x48
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 800aefe:	f107 0310 	add.w	r3, r7, #16
 800af02:	2224      	movs	r2, #36	; 0x24
 800af04:	2100      	movs	r1, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f019 fdba 	bl	8024a80 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800af0c:	2301      	movs	r3, #1
 800af0e:	813b      	strh	r3, [r7, #8]
 800af10:	2309      	movs	r3, #9
 800af12:	817b      	strh	r3, [r7, #10]
 800af14:	f107 0310 	add.w	r3, r7, #16
 800af18:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	ed93 7a00 	vldr	s14, [r3]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	edd3 7a00 	vldr	s15, [r3]
 800af26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af2a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	ed93 7a01 	vldr	s14, [r3, #4]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	edd3 7a01 	vldr	s15, [r3, #4]
 800af3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	ed93 7a02 	vldr	s14, [r3, #8]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	edd3 7a02 	vldr	s15, [r3, #8]
 800af4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

  float measuredDistance = d->distance;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	63bb      	str	r3, [r7, #56]	; 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800af5c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800af60:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800af64:	f01b fd4e 	bl	8026a04 <powf>
 800af68:	eeb0 8a40 	vmov.f32	s16, s0
 800af6c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800af70:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800af74:	f01b fd46 	bl	8026a04 <powf>
 800af78:	eef0 7a40 	vmov.f32	s15, s0
 800af7c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800af80:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800af84:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800af88:	f01b fd3c 	bl	8026a04 <powf>
 800af8c:	eef0 7a40 	vmov.f32	s15, s0
 800af90:	ee78 7a27 	vadd.f32	s15, s16, s15
 800af94:	eeb0 0a67 	vmov.f32	s0, s15
 800af98:	f7ff ff6e 	bl	800ae78 <arm_sqrt>
 800af9c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  if (predictedDistance != 0.0f) {
 800afa0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800afa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800afa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afac:	d018      	beq.n	800afe0 <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 800afae:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800afb2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afba:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 800afbe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800afc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afca:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 800afce:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800afd2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afda:	edc7 7a06 	vstr	s15, [r7, #24]
 800afde:	e008      	b.n	800aff2 <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 800afe0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800afe4:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 800afec:	f04f 0300 	mov.w	r3, #0
 800aff0:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 800aff2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800aff6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800affa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	ed93 7a05 	vldr	s14, [r3, #20]
 800b004:	f107 0308 	add.w	r3, r7, #8
 800b008:	eef0 0a47 	vmov.f32	s1, s14
 800b00c:	eeb0 0a67 	vmov.f32	s0, s15
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7fd fab8 	bl	8008588 <kalmanCoreScalarUpdate>
}
 800b018:	bf00      	nop
 800b01a:	3748      	adds	r7, #72	; 0x48
 800b01c:	46bd      	mov	sp, r7
 800b01e:	ecbd 8b02 	vpop	{d8}
 800b022:	bd80      	pop	{r7, pc}

0800b024 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f003 0303 	and.w	r3, r3, #3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d004      	beq.n	800b046 <assert_aligned_4_bytes+0x22>
 800b03c:	223c      	movs	r2, #60	; 0x3c
 800b03e:	4904      	ldr	r1, [pc, #16]	; (800b050 <assert_aligned_4_bytes+0x2c>)
 800b040:	4804      	ldr	r0, [pc, #16]	; (800b054 <assert_aligned_4_bytes+0x30>)
 800b042:	f006 fff3 	bl	801202c <assertFail>
}
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	0802ce9c 	.word	0x0802ce9c
 800b054:	0802cee8 	.word	0x0802cee8

0800b058 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff ffde 	bl	800b024 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b068:	6838      	ldr	r0, [r7, #0]
 800b06a:	f7ff ffdb 	bl	800b024 <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f018 fb45 	bl	8023700 <arm_mat_trans_f32>
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <mat_trans+0x34>
 800b082:	2244      	movs	r2, #68	; 0x44
 800b084:	4903      	ldr	r1, [pc, #12]	; (800b094 <mat_trans+0x3c>)
 800b086:	4804      	ldr	r0, [pc, #16]	; (800b098 <mat_trans+0x40>)
 800b088:	f006 ffd0 	bl	801202c <assertFail>
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	0802ce9c 	.word	0x0802ce9c
 800b098:	0802cf00 	.word	0x0802cf00

0800b09c <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7ff ffbc 	bl	800b024 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b0ac:	6838      	ldr	r0, [r7, #0]
 800b0ae:	f7ff ffb9 	bl	800b024 <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f018 fc71 	bl	802399c <arm_mat_inverse_f32>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <mat_inv+0x34>
 800b0c6:	224c      	movs	r2, #76	; 0x4c
 800b0c8:	4903      	ldr	r1, [pc, #12]	; (800b0d8 <mat_inv+0x3c>)
 800b0ca:	4804      	ldr	r0, [pc, #16]	; (800b0dc <mat_inv+0x40>)
 800b0cc:	f006 ffae 	bl	801202c <assertFail>
}
 800b0d0:	bf00      	nop
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	0802ce9c 	.word	0x0802ce9c
 800b0dc:	0802cf00 	.word	0x0802cf00

0800b0e0 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff ff99 	bl	800b024 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800b0f2:	68b8      	ldr	r0, [r7, #8]
 800b0f4:	f7ff ff96 	bl	800b024 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7ff ff93 	bl	800b024 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	68b9      	ldr	r1, [r7, #8]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f018 fbaa 	bl	802385c <arm_mat_mult_f32>
 800b108:	4603      	mov	r3, r0
 800b10a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b10c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <mat_mult+0x3e>
 800b114:	2255      	movs	r2, #85	; 0x55
 800b116:	4904      	ldr	r1, [pc, #16]	; (800b128 <mat_mult+0x48>)
 800b118:	4804      	ldr	r0, [pc, #16]	; (800b12c <mat_mult+0x4c>)
 800b11a:	f006 ff87 	bl	801202c <assertFail>
}
 800b11e:	bf00      	nop
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	0802ce9c 	.word	0x0802ce9c
 800b12c:	0802cf00 	.word	0x0802cf00

0800b130 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	60bb      	str	r3, [r7, #8]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	f107 0308 	add.w	r3, r7, #8
 800b148:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800b14a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b14e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b156:	db0a      	blt.n	800b16e <arm_sqrt+0x3e>
      *pOut = __builtin_sqrtf(in);
 800b158:	ed97 0a04 	vldr	s0, [r7, #16]
 800b15c:	f01b fcaa 	bl	8026ab4 <sqrtf>
 800b160:	eef0 7a40 	vmov.f32	s15, s0
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800b16a:	2300      	movs	r3, #0
 800b16c:	e005      	b.n	800b17a <arm_sqrt+0x4a>
      *pOut = 0.0f;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f04f 0200 	mov.w	r2, #0
 800b174:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800b176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 800b17a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800b17c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d004      	beq.n	800b18e <arm_sqrt+0x5e>
 800b184:	225b      	movs	r2, #91	; 0x5b
 800b186:	4906      	ldr	r1, [pc, #24]	; (800b1a0 <arm_sqrt+0x70>)
 800b188:	4806      	ldr	r0, [pc, #24]	; (800b1a4 <arm_sqrt+0x74>)
 800b18a:	f006 ff4f 	bl	801202c <assertFail>
  return pOut;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	ee07 3a90 	vmov	s15, r3
}
 800b194:	eeb0 0a67 	vmov.f32	s0, s15
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	0802ce9c 	.word	0x0802ce9c
 800b1a4:	0802cf00 	.word	0x0802cf00

0800b1a8 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 800b1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	b08d      	sub	sp, #52	; 0x34
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	603a      	str	r2, [r7, #0]
 800b1ba:	1e53      	subs	r3, r2, #1
 800b1bc:	61bb      	str	r3, [r7, #24]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	4690      	mov	r8, r2
 800b1c2:	4699      	mov	r9, r3
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	f04f 0300 	mov.w	r3, #0
 800b1cc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800b1d0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800b1d4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800b1d8:	68fe      	ldr	r6, [r7, #12]
 800b1da:	1e73      	subs	r3, r6, #1
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	4632      	mov	r2, r6
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4614      	mov	r4, r2
 800b1e4:	461d      	mov	r5, r3
 800b1e6:	f04f 0200 	mov.w	r2, #0
 800b1ea:	f04f 0300 	mov.w	r3, #0
 800b1ee:	016b      	lsls	r3, r5, #5
 800b1f0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800b1f4:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1fa:	e0af      	b.n	800b35c <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b200:	e0a4      	b.n	800b34c <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 800b202:	f04f 0300 	mov.w	r3, #0
 800b206:	627b      	str	r3, [r7, #36]	; 0x24
            if (j == i) // summation for diagnols 
 800b208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d146      	bne.n	800b29e <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 800b210:	2300      	movs	r3, #0
 800b212:	623b      	str	r3, [r7, #32]
 800b214:	e01c      	b.n	800b250 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 800b216:	4632      	mov	r2, r6
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	fb02 f303 	mul.w	r3, r2, r3
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	441a      	add	r2, r3
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	edd3 7a00 	vldr	s15, [r3]
 800b22e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b232:	eeb0 0a67 	vmov.f32	s0, s15
 800b236:	f01b fbe5 	bl	8026a04 <powf>
 800b23a:	eeb0 7a40 	vmov.f32	s14, s0
 800b23e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b242:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b246:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++) 
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	3301      	adds	r3, #1
 800b24e:	623b      	str	r3, [r7, #32]
 800b250:	6a3a      	ldr	r2, [r7, #32]
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	429a      	cmp	r2, r3
 800b256:	dbde      	blt.n	800b216 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	fb02 f303 	mul.w	r3, r2, r3
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	441a      	add	r2, r3
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4413      	add	r3, r2
 800b26c:	ed93 7a00 	vldr	s14, [r3]
 800b270:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b274:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b278:	4632      	mov	r2, r6
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	fb02 f303 	mul.w	r3, r2, r3
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	18d4      	adds	r4, r2, r3
 800b286:	eeb0 0a67 	vmov.f32	s0, s15
 800b28a:	f01b fc13 	bl	8026ab4 <sqrtf>
 800b28e:	eef0 7a40 	vmov.f32	s15, s0
 800b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4423      	add	r3, r4
 800b298:	edc3 7a00 	vstr	s15, [r3]
 800b29c:	e053      	b.n	800b346 <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 800b29e:	2300      	movs	r3, #0
 800b2a0:	61fb      	str	r3, [r7, #28]
 800b2a2:	e022      	b.n	800b2ea <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	441a      	add	r2, r3
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	ed93 7a00 	vldr	s14, [r3]
 800b2bc:	4632      	mov	r2, r6
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	fb02 f303 	mul.w	r3, r2, r3
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	441a      	add	r2, r3
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	edd3 7a00 	vldr	s15, [r3]
 800b2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b2dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++) 
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	61fb      	str	r3, [r7, #28]
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	dbd8      	blt.n	800b2a4 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	fb02 f303 	mul.w	r3, r2, r3
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	441a      	add	r2, r3
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	ed93 7a00 	vldr	s14, [r3]
 800b30a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b30e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b312:	4632      	mov	r2, r6
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	fb02 f303 	mul.w	r3, r2, r3
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	441a      	add	r2, r3
 800b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	ed93 7a00 	vldr	s14, [r3]
 800b32a:	4632      	mov	r2, r6
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	441a      	add	r2, r3
 800b338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 800b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b348:	3301      	adds	r3, #1
 800b34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	f77f af56 	ble.w	800b202 <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	3301      	adds	r3, #1
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	429a      	cmp	r2, r3
 800b362:	f6ff af4b 	blt.w	800b1fc <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	3734      	adds	r7, #52	; 0x34
 800b36c:	46bd      	mov	sp, r7
 800b36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b372 <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	ed87 0a01 	vstr	s0, [r7, #4]
 800b37c:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 800b37e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b382:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800b384:	edd7 7a01 	vldr	s15, [r7, #4]
 800b388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b38c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b390:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b394:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800b398:	edd7 7a03 	vldr	s15, [r7, #12]
 800b39c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b3a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b3a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	edc3 7a00 	vstr	s15, [r3]
}
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <GM_state>:

static void GM_state(float e, float * GM_e){
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	ed87 0a01 	vstr	s0, [r7, #4]
 800b3c8:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 800b3ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3ce:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800b3d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b3d8:	ed97 7a03 	vldr	s14, [r7, #12]
 800b3dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3e0:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800b3e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3e8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b3ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	edc3 7a00 	vstr	s15, [r3]
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
	...

0800b40c <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	ed2d 8b02 	vpush	{d8}
 800b412:	b0f8      	sub	sp, #480	; 0x1e0
 800b414:	af00      	add	r7, sp, #0
 800b416:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b41a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b41e:	6018      	str	r0, [r3, #0]
 800b420:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b424:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b428:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 800b42a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b42e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	ed93 7a00 	vldr	s14, [r3]
 800b438:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b43c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	edd3 7a00 	vldr	s15, [r3]
 800b446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b44a:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 800b44e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b452:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	ed93 7a01 	vldr	s14, [r3, #4]
 800b45c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b460:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	edd3 7a01 	vldr	s15, [r3, #4]
 800b46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b46e:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 800b472:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b476:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b480:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b484:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b492:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
    float measuredDistance = d->distance;
 800b496:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b49a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800b4a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b4aa:	ed97 0a6c 	vldr	s0, [r7, #432]	; 0x1b0
 800b4ae:	f01b faa9 	bl	8026a04 <powf>
 800b4b2:	eeb0 8a40 	vmov.f32	s16, s0
 800b4b6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b4ba:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 800b4be:	f01b faa1 	bl	8026a04 <powf>
 800b4c2:	eef0 7a40 	vmov.f32	s15, s0
 800b4c6:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b4ca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b4ce:	ed97 0a6a 	vldr	s0, [r7, #424]	; 0x1a8
 800b4d2:	f01b fa97 	bl	8026a04 <powf>
 800b4d6:	eef0 7a40 	vmov.f32	s15, s0
 800b4da:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b4de:	eeb0 0a67 	vmov.f32	s0, s15
 800b4e2:	f7ff fe25 	bl	800b130 <arm_sqrt>
 800b4e6:	ed87 0a68 	vstr	s0, [r7, #416]	; 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 800b4ea:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800b4ee:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800b4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4f6:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 800b4fa:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800b4fe:	2224      	movs	r2, #36	; 0x24
 800b500:	2100      	movs	r1, #0
 800b502:	4618      	mov	r0, r3
 800b504:	f019 fabc 	bl	8024a80 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 800b508:	2301      	movs	r3, #1
 800b50a:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
 800b50e:	2309      	movs	r3, #9
 800b510:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
 800b514:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800b518:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 800b51c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b520:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800b52a:	f107 0310 	add.w	r3, r7, #16
 800b52e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800b532:	4618      	mov	r0, r3
 800b534:	f019 fc1f 	bl	8024d76 <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 800b538:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b53c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	ed93 7a05 	vldr	s14, [r3, #20]
 800b546:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b54a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	edd3 7a05 	vldr	s15, [r3, #20]
 800b554:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b558:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 800b55c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2224      	movs	r2, #36	; 0x24
 800b568:	4619      	mov	r1, r3
 800b56a:	48cf      	ldr	r0, [pc, #828]	; (800b8a8 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800b56c:	f019 fc03 	bl	8024d76 <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 800b570:	2300      	movs	r3, #0
 800b572:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800b576:	e2c3      	b.n	800bb00 <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 800b578:	f107 0310 	add.w	r3, r7, #16
 800b57c:	4acb      	ldr	r2, [pc, #812]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b57e:	4619      	mov	r1, r3
 800b580:	2009      	movs	r0, #9
 800b582:	f7ff fe11 	bl	800b1a8 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 800b586:	49ca      	ldr	r1, [pc, #808]	; (800b8b0 <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 800b588:	48ca      	ldr	r0, [pc, #808]	; (800b8b4 <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 800b58a:	f7ff fd65 	bl	800b058 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 800b58e:	ed97 0a77 	vldr	s0, [r7, #476]	; 0x1dc
 800b592:	f01b fa8f 	bl	8026ab4 <sqrtf>
 800b596:	ed87 0a66 	vstr	s0, [r7, #408]	; 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 800b59a:	4bc3      	ldr	r3, [pc, #780]	; (800b8a8 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800b5a2:	4bc1      	ldr	r3, [pc, #772]	; (800b8a8 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800b5aa:	4bbf      	ldr	r3, [pc, #764]	; (800b8a8 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 800b5b2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b5b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	edd3 7a00 	vldr	s15, [r3]
 800b5c0:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800b5c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5c8:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 800b5cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b5d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	edd3 7a01 	vldr	s15, [r3, #4]
 800b5da:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 800b5de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5e2:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
 800b5e6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b5ea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	edd3 7a02 	vldr	s15, [r3, #8]
 800b5f4:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800b5f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5fc:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800b600:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b604:	ed97 0a6c 	vldr	s0, [r7, #432]	; 0x1b0
 800b608:	f01b f9fc 	bl	8026a04 <powf>
 800b60c:	eeb0 8a40 	vmov.f32	s16, s0
 800b610:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b614:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 800b618:	f01b f9f4 	bl	8026a04 <powf>
 800b61c:	eef0 7a40 	vmov.f32	s15, s0
 800b620:	ee38 8a27 	vadd.f32	s16, s16, s15
 800b624:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800b628:	ed97 0a6a 	vldr	s0, [r7, #424]	; 0x1a8
 800b62c:	f01b f9ea 	bl	8026a04 <powf>
 800b630:	eef0 7a40 	vmov.f32	s15, s0
 800b634:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b638:	eeb0 0a67 	vmov.f32	s0, s15
 800b63c:	f7ff fd78 	bl	800b130 <arm_sqrt>
 800b640:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 800b644:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800b648:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800b64c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b650:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184

        float e_y = error_iter;
 800b654:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800b658:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

        if (predicted_iter != 0.0f) {
 800b65c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800b660:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	d018      	beq.n	800b69c <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 800b66a:	edd7 6a6c 	vldr	s13, [r7, #432]	; 0x1b0
 800b66e:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800b672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b676:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 800b67a:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800b67e:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800b682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b686:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 800b68a:	edd7 6a6a 	vldr	s13, [r7, #424]	; 0x1a8
 800b68e:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800b692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b696:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
 800b69a:	e00b      	b.n	800b6b4 <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 800b69c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b6a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            h[KC_STATE_Y] = 0.0f;
 800b6a4:	f04f 0300 	mov.w	r3, #0
 800b6a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            h[KC_STATE_Z] = 0.0f;
 800b6ac:	f04f 0300 	mov.w	r3, #0
 800b6b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 800b6b4:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800b6b8:	eef0 7ae7 	vabs.f32	s15, s15
 800b6bc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b8b8 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 800b6c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c8:	d508      	bpl.n	800b6dc <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 800b6ca:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 800b6ce:	eddf 6a7a 	vldr	s13, [pc, #488]	; 800b8b8 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 800b6d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6d6:	edc7 7a75 	vstr	s15, [r7, #468]	; 0x1d4
 800b6da:	e007      	b.n	800b6ec <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 800b6dc:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 800b6e0:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800b6e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e8:	edc7 7a75 	vstr	s15, [r7, #468]	; 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800b6f2:	e095      	b.n	800b820 <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 800b6f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800b6f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800b6fc:	e086      	b.n	800b80c <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 800b6fe:	496b      	ldr	r1, [pc, #428]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b700:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b704:	4613      	mov	r3, r2
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	4413      	add	r3, r2
 800b70a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	440b      	add	r3, r1
 800b714:	edd3 7a00 	vldr	s15, [r3]
 800b718:	eef4 7a67 	vcmp.f32	s15, s15
 800b71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b720:	d613      	bvs.n	800b74a <kalmanCoreRobustUpdateWithDistance+0x33e>
 800b722:	4962      	ldr	r1, [pc, #392]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b724:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b728:	4613      	mov	r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	4413      	add	r3, r2
 800b72e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	edd3 7a00 	vldr	s15, [r3]
 800b73c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800b8bc <kalmanCoreRobustUpdateWithDistance+0x4b0>
 800b740:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b748:	dd0d      	ble.n	800b766 <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 800b74a:	4958      	ldr	r1, [pc, #352]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b74c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b750:	4613      	mov	r3, r2
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4413      	add	r3, r2
 800b756:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	440b      	add	r3, r1
 800b760:	4a57      	ldr	r2, [pc, #348]	; (800b8c0 <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	e04d      	b.n	800b802 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 800b766:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b76a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800b76e:	429a      	cmp	r2, r3
 800b770:	d021      	beq.n	800b7b6 <kalmanCoreRobustUpdateWithDistance+0x3aa>
 800b772:	494e      	ldr	r1, [pc, #312]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b774:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b778:	4613      	mov	r3, r2
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	4413      	add	r3, r2
 800b77e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	440b      	add	r3, r1
 800b788:	edd3 7a00 	vldr	s15, [r3]
 800b78c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b8c4 <kalmanCoreRobustUpdateWithDistance+0x4b8>
 800b790:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b798:	d50d      	bpl.n	800b7b6 <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 800b79a:	4944      	ldr	r1, [pc, #272]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b79c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	440b      	add	r3, r1
 800b7b0:	4a45      	ldr	r2, [pc, #276]	; (800b8c8 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	e025      	b.n	800b802 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 800b7b6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b7ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d11f      	bne.n	800b802 <kalmanCoreRobustUpdateWithDistance+0x3f6>
 800b7c2:	493a      	ldr	r1, [pc, #232]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b7c4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	edd3 7a00 	vldr	s15, [r3]
 800b7dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e4:	d50d      	bpl.n	800b802 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 800b7e6:	4931      	ldr	r1, [pc, #196]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b7e8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	440b      	add	r3, r1
 800b7fc:	f04f 0200 	mov.w	r2, #0
 800b800:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 800b802:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b806:	3301      	adds	r3, #1
 800b808:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800b80c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b810:	2b08      	cmp	r3, #8
 800b812:	f77f af74 	ble.w	800b6fe <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 800b816:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800b81a:	3301      	adds	r3, #1
 800b81c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800b820:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800b824:	2b08      	cmp	r3, #8
 800b826:	f77f af65 	ble.w	800b6f4 <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 800b82a:	4b28      	ldr	r3, [pc, #160]	; (800b8cc <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 800b82c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 800b830:	2300      	movs	r3, #0
 800b832:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800b836:	e01c      	b.n	800b872 <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 800b838:	491c      	ldr	r1, [pc, #112]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b83a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800b83e:	4613      	mov	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	00db      	lsls	r3, r3, #3
 800b846:	440b      	add	r3, r1
 800b848:	ed93 7a00 	vldr	s14, [r3]
 800b84c:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 800b850:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b854:	4915      	ldr	r1, [pc, #84]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b856:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	440b      	add	r3, r1
 800b864:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 800b868:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b86c:	3301      	adds	r3, #1
 800b86e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800b872:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b876:	2b08      	cmp	r3, #8
 800b878:	ddde      	ble.n	800b838 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 800b87a:	4a15      	ldr	r2, [pc, #84]	; (800b8d0 <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 800b87c:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800b87e:	4610      	mov	r0, r2
 800b880:	4619      	mov	r1, r3
 800b882:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800b886:	461a      	mov	r2, r3
 800b888:	f019 fa75 	bl	8024d76 <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 800b88c:	4911      	ldr	r1, [pc, #68]	; (800b8d4 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 800b88e:	4812      	ldr	r0, [pc, #72]	; (800b8d8 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 800b890:	f7ff fc04 	bl	800b09c <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 800b894:	4a11      	ldr	r2, [pc, #68]	; (800b8dc <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 800b896:	4912      	ldr	r1, [pc, #72]	; (800b8e0 <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 800b898:	480e      	ldr	r0, [pc, #56]	; (800b8d4 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 800b89a:	f7ff fc21 	bl	800b0e0 <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b8a4:	e04f      	b.n	800b946 <kalmanCoreRobustUpdateWithDistance+0x53a>
 800b8a6:	bf00      	nop
 800b8a8:	20009800 	.word	0x20009800
 800b8ac:	20009824 	.word	0x20009824
 800b8b0:	20000928 	.word	0x20000928
 800b8b4:	20000920 	.word	0x20000920
 800b8b8:	38d1b717 	.word	0x38d1b717
 800b8bc:	42c80000 	.word	0x42c80000
 800b8c0:	42c80000 	.word	0x42c80000
 800b8c4:	c2c80000 	.word	0xc2c80000
 800b8c8:	c2c80000 	.word	0xc2c80000
 800b8cc:	3089705f 	.word	0x3089705f
 800b8d0:	20009968 	.word	0x20009968
 800b8d4:	20000938 	.word	0x20000938
 800b8d8:	20000930 	.word	0x20000930
 800b8dc:	20000948 	.word	0x20000948
 800b8e0:	20000940 	.word	0x20000940
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 800b8e4:	4a93      	ldr	r2, [pc, #588]	; (800bb34 <kalmanCoreRobustUpdateWithDistance+0x728>)
 800b8e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	edd3 7a00 	vldr	s15, [r3]
 800b8f2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	4a8e      	ldr	r2, [pc, #568]	; (800bb38 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800b900:	4413      	add	r3, r2
 800b902:	4618      	mov	r0, r3
 800b904:	eeb0 0a67 	vmov.f32	s0, s15
 800b908:	f7ff fd59 	bl	800b3be <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 800b90c:	498a      	ldr	r1, [pc, #552]	; (800bb38 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800b90e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	440b      	add	r3, r1
 800b91c:	ed93 7a00 	vldr	s14, [r3]
 800b920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b928:	4983      	ldr	r1, [pc, #524]	; (800bb38 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800b92a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800b93c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b940:	3301      	adds	r3, #1
 800b942:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b946:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b94a:	2b08      	cmp	r3, #8
 800b94c:	ddca      	ble.n	800b8e4 <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 800b94e:	4a7b      	ldr	r2, [pc, #492]	; (800bb3c <kalmanCoreRobustUpdateWithDistance+0x730>)
 800b950:	497b      	ldr	r1, [pc, #492]	; (800bb40 <kalmanCoreRobustUpdateWithDistance+0x734>)
 800b952:	487c      	ldr	r0, [pc, #496]	; (800bb44 <kalmanCoreRobustUpdateWithDistance+0x738>)
 800b954:	f7ff fbc4 	bl	800b0e0 <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 800b958:	4a7b      	ldr	r2, [pc, #492]	; (800bb48 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800b95a:	497c      	ldr	r1, [pc, #496]	; (800bb4c <kalmanCoreRobustUpdateWithDistance+0x740>)
 800b95c:	4877      	ldr	r0, [pc, #476]	; (800bb3c <kalmanCoreRobustUpdateWithDistance+0x730>)
 800b95e:	f7ff fbbf 	bl	800b0e0 <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 800b962:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b966:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b96a:	f04f 0200 	mov.w	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	f04f 0300 	mov.w	r3, #0
 800b974:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 800b978:	f107 030c 	add.w	r3, r7, #12
 800b97c:	4618      	mov	r0, r3
 800b97e:	ed97 0a75 	vldr	s0, [r7, #468]	; 0x1d4
 800b982:	f7ff fcf6 	bl	800b372 <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 800b986:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b98a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b98e:	edd3 7a00 	vldr	s15, [r3]
 800b992:	eef0 7ae7 	vabs.f32	s15, s15
 800b996:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800bb50 <kalmanCoreRobustUpdateWithDistance+0x744>
 800b99a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a2:	d50a      	bpl.n	800b9ba <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 800b9a4:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800b9a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b9ac:	eddf 6a68 	vldr	s13, [pc, #416]	; 800bb50 <kalmanCoreRobustUpdateWithDistance+0x744>
 800b9b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9b4:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
 800b9b8:	e00d      	b.n	800b9d6 <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 800b9ba:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800b9be:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b9c2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b9c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b9ca:	ed93 7a00 	vldr	s14, [r3]
 800b9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d2:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 800b9d6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800b9da:	495e      	ldr	r1, [pc, #376]	; (800bb54 <kalmanCoreRobustUpdateWithDistance+0x748>)
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fb3b 	bl	800b058 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 800b9e2:	4a5d      	ldr	r2, [pc, #372]	; (800bb58 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 800b9e4:	495b      	ldr	r1, [pc, #364]	; (800bb54 <kalmanCoreRobustUpdateWithDistance+0x748>)
 800b9e6:	4858      	ldr	r0, [pc, #352]	; (800bb48 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800b9e8:	f7ff fb7a 	bl	800b0e0 <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 800b9ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b9f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800b9fa:	e01c      	b.n	800ba36 <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 800b9fc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800ba06:	443b      	add	r3, r7
 800ba08:	3b84      	subs	r3, #132	; 0x84
 800ba0a:	ed93 7a00 	vldr	s14, [r3]
 800ba0e:	4a53      	ldr	r2, [pc, #332]	; (800bb5c <kalmanCoreRobustUpdateWithDistance+0x750>)
 800ba10:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	edd3 7a00 	vldr	s15, [r3]
 800ba1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba20:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800ba24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba28:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 800ba2c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ba30:	3301      	adds	r3, #1
 800ba32:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800ba36:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ba3a:	2b08      	cmp	r3, #8
 800ba3c:	ddde      	ble.n	800b9fc <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800ba44:	e043      	b.n	800bace <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 800ba46:	4a45      	ldr	r2, [pc, #276]	; (800bb5c <kalmanCoreRobustUpdateWithDistance+0x750>)
 800ba48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	edd3 6a00 	vldr	s13, [r3]
 800ba54:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800ba58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba5c:	4a40      	ldr	r2, [pc, #256]	; (800bb60 <kalmanCoreRobustUpdateWithDistance+0x754>)
 800ba5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 800ba6a:	4a3d      	ldr	r2, [pc, #244]	; (800bb60 <kalmanCoreRobustUpdateWithDistance+0x754>)
 800ba6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	ed93 7a00 	vldr	s14, [r3]
 800ba78:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 800ba7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba80:	4a38      	ldr	r2, [pc, #224]	; (800bb64 <kalmanCoreRobustUpdateWithDistance+0x758>)
 800ba82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 800ba8e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ba92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	ed93 7a00 	vldr	s14, [r3]
 800baa4:	4a2f      	ldr	r2, [pc, #188]	; (800bb64 <kalmanCoreRobustUpdateWithDistance+0x758>)
 800baa6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	edd3 7a00 	vldr	s15, [r3]
 800bab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bab6:	4a2c      	ldr	r2, [pc, #176]	; (800bb68 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 800bab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 800bac4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800bac8:	3301      	adds	r3, #1
 800baca:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800bace:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	ddb7      	ble.n	800ba46 <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 800bad6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800bada:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800bade:	4a23      	ldr	r2, [pc, #140]	; (800bb6c <kalmanCoreRobustUpdateWithDistance+0x760>)
 800bae0:	4618      	mov	r0, r3
 800bae2:	4611      	mov	r1, r2
 800bae4:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800bae8:	461a      	mov	r2, r3
 800baea:	f019 f944 	bl	8024d76 <memcpy>
        R_iter = R_w;
 800baee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800baf2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 800baf6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800bafa:	3301      	adds	r3, #1
 800bafc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800bb00:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	f77f ad37 	ble.w	800b578 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 800bb0a:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800bb0e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800bb12:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800bb16:	ed97 0a67 	vldr	s0, [r7, #412]	; 0x19c
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800bb1c:	4a14      	ldr	r2, [pc, #80]	; (800bb70 <kalmanCoreRobustUpdateWithDistance+0x764>)
 800bb1e:	6800      	ldr	r0, [r0, #0]
 800bb20:	f7fc ff04 	bl	800892c <kalmanCoreUpdateWithPKE>

 800bb24:	bf00      	nop
 800bb26:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	ecbd 8b02 	vpop	{d8}
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20009aac 	.word	0x20009aac
 800bb38:	20009ad0 	.word	0x20009ad0
 800bb3c:	20000958 	.word	0x20000958
 800bb40:	20000950 	.word	0x20000950
 800bb44:	20000920 	.word	0x20000920
 800bb48:	20000960 	.word	0x20000960
 800bb4c:	20000928 	.word	0x20000928
 800bb50:	38d1b717 	.word	0x38d1b717
 800bb54:	20000968 	.word	0x20000968
 800bb58:	20000970 	.word	0x20000970
 800bb5c:	20009c14 	.word	0x20009c14
 800bb60:	20009c38 	.word	0x20009c38
 800bb64:	20009c5c 	.word	0x20009c5c
 800bb68:	20009800 	.word	0x20009800
 800bb6c:	20009c80 	.word	0x20009c80
 800bb70:	20000978 	.word	0x20000978

0800bb74 <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b0a2      	sub	sp, #136	; 0x88
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 800bb80:	4ba2      	ldr	r3, [pc, #648]	; (800be0c <kalmanCoreUpdateWithFlow+0x298>)
 800bb82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 800bb86:	4ba2      	ldr	r3, [pc, #648]	; (800be10 <kalmanCoreUpdateWithFlow+0x29c>)
 800bb88:	67fb      	str	r3, [r7, #124]	; 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	edd3 7a00 	vldr	s15, [r3]
 800bb90:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800be14 <kalmanCoreUpdateWithFlow+0x2a0>
 800bb94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb98:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bba2:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800be14 <kalmanCoreUpdateWithFlow+0x2a0>
 800bba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbaa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	673b      	str	r3, [r7, #112]	; 0x70
  float dy_g = this->S[KC_STATE_PY];
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  float z_g = 0.0;
 800bbba:	f04f 0300 	mov.w	r3, #0
 800bbbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bbc8:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800be18 <kalmanCoreUpdateWithFlow+0x2a4>
 800bbcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	d503      	bpl.n	800bbde <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 800bbd6:	4b91      	ldr	r3, [pc, #580]	; (800be1c <kalmanCoreUpdateWithFlow+0x2a8>)
 800bbd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbdc:	e003      	b.n	800bbe6 <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 800bbe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bbea:	2224      	movs	r2, #36	; 0x24
 800bbec:	2100      	movs	r1, #0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f018 ff46 	bl	8024a80 <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bbfa:	2309      	movs	r3, #9
 800bbfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bc00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc04:	647b      	str	r3, [r7, #68]	; 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	ed93 7a05 	vldr	s14, [r3, #20]
 800bc0c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bc10:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bc14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bc18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800bc22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800bc26:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bc2a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bc2e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800bc32:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bc36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3e:	4b78      	ldr	r3, [pc, #480]	; (800be20 <kalmanCoreUpdateWithFlow+0x2ac>)
 800bc40:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc4a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800be18 <kalmanCoreUpdateWithFlow+0x2a4>
 800bc4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc52:	4b74      	ldr	r3, [pc, #464]	; (800be24 <kalmanCoreUpdateWithFlow+0x2b0>)
 800bc54:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	ed93 7a05 	vldr	s14, [r3, #20]
 800bc5e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bc62:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bc66:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800bc74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800bc78:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bc7c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bc80:	eef1 6a67 	vneg.f32	s13, s15
 800bc84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bc88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bc8c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bc90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	ed93 7a05 	vldr	s14, [r3, #20]
 800bc9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bca2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bca6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800bcb4:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800bcb8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 800bcc4:	4b57      	ldr	r3, [pc, #348]	; (800be24 <kalmanCoreUpdateWithFlow+0x2b0>)
 800bcc6:	ed93 7a00 	vldr	s14, [r3]
 800bcca:	4b55      	ldr	r3, [pc, #340]	; (800be20 <kalmanCoreUpdateWithFlow+0x2ac>)
 800bccc:	edd3 7a00 	vldr	s15, [r3]
 800bcd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	edd3 7a03 	vldr	s15, [r3, #12]
 800bcda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be18 <kalmanCoreUpdateWithFlow+0x2a4>
 800bcde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bce6:	eef0 0a67 	vmov.f32	s1, s15
 800bcea:	eeb0 0a47 	vmov.f32	s0, s14
 800bcee:	4619      	mov	r1, r3
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f7fc fc49 	bl	8008588 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 800bcf6:	f107 031c 	add.w	r3, r7, #28
 800bcfa:	2224      	movs	r2, #36	; 0x24
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f018 febe 	bl	8024a80 <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 800bd04:	2301      	movs	r3, #1
 800bd06:	82bb      	strh	r3, [r7, #20]
 800bd08:	2309      	movs	r3, #9
 800bd0a:	82fb      	strh	r3, [r7, #22]
 800bd0c:	f107 031c 	add.w	r3, r7, #28
 800bd10:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	ed93 7a05 	vldr	s14, [r3, #20]
 800bd18:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bd1c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bd20:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bd24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800bd2e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bd32:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bd36:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd3a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800bd3e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800bd42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd4a:	4b37      	ldr	r3, [pc, #220]	; (800be28 <kalmanCoreUpdateWithFlow+0x2b4>)
 800bd4c:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd56:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800be18 <kalmanCoreUpdateWithFlow+0x2a4>
 800bd5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd5e:	4b33      	ldr	r3, [pc, #204]	; (800be2c <kalmanCoreUpdateWithFlow+0x2b8>)
 800bd60:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	ed93 7a05 	vldr	s14, [r3, #20]
 800bd6a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bd6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bd72:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bd76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800bd80:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bd84:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bd88:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd8c:	eef1 6a67 	vneg.f32	s13, s15
 800bd90:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bd98:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bd9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdaa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bdae:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bdb2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800bdc0:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800bdc4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bdc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdcc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 800bdd0:	4b16      	ldr	r3, [pc, #88]	; (800be2c <kalmanCoreUpdateWithFlow+0x2b8>)
 800bdd2:	ed93 7a00 	vldr	s14, [r3]
 800bdd6:	4b14      	ldr	r3, [pc, #80]	; (800be28 <kalmanCoreUpdateWithFlow+0x2b4>)
 800bdd8:	edd3 7a00 	vldr	s15, [r3]
 800bddc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	edd3 7a04 	vldr	s15, [r3, #16]
 800bde6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800be18 <kalmanCoreUpdateWithFlow+0x2a4>
 800bdea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bdee:	f107 0314 	add.w	r3, r7, #20
 800bdf2:	eef0 0a67 	vmov.f32	s1, s15
 800bdf6:	eeb0 0a47 	vmov.f32	s0, s14
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7fc fbc3 	bl	8008588 <kalmanCoreScalarUpdate>
}
 800be02:	bf00      	nop
 800be04:	3788      	adds	r7, #136	; 0x88
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	420c0000 	.word	0x420c0000
 800be10:	3f377c46 	.word	0x3f377c46
 800be14:	3c8efa35 	.word	0x3c8efa35
 800be18:	3dcccccd 	.word	0x3dcccccd
 800be1c:	3dcccccd 	.word	0x3dcccccd
 800be20:	2000a1b4 	.word	0x2000a1b4
 800be24:	2000a1bc 	.word	0x2000a1bc
 800be28:	2000a1b8 	.word	0x2000a1b8
 800be2c:	2000a1c0 	.word	0x2000a1c0

0800be30 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800be30:	b480      	push	{r7}
 800be32:	b08f      	sub	sp, #60	; 0x3c
 800be34:	af00      	add	r7, sp, #0
 800be36:	ed87 0a07 	vstr	s0, [r7, #28]
 800be3a:	edc7 0a06 	vstr	s1, [r7, #24]
 800be3e:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	623b      	str	r3, [r7, #32]
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800be4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be52:	f107 0220 	add.w	r2, r7, #32
 800be56:	ca07      	ldmia	r2, {r0, r1, r2}
 800be58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	ee06 1a90 	vmov	s13, r1
 800be66:	ee07 2a10 	vmov	s14, r2
 800be6a:	ee07 3a90 	vmov	s15, r3
}
 800be6e:	eeb0 0a66 	vmov.f32	s0, s13
 800be72:	eef0 0a47 	vmov.f32	s1, s14
 800be76:	eeb0 1a67 	vmov.f32	s2, s15
 800be7a:	373c      	adds	r7, #60	; 0x3c
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 800be84:	b580      	push	{r7, lr}
 800be86:	b08c      	sub	sp, #48	; 0x30
 800be88:	af00      	add	r7, sp, #0
 800be8a:	ed87 0a07 	vstr	s0, [r7, #28]
 800be8e:	eef0 6a60 	vmov.f32	s13, s1
 800be92:	eeb0 7a41 	vmov.f32	s14, s2
 800be96:	eef0 7a61 	vmov.f32	s15, s3
 800be9a:	edc7 6a04 	vstr	s13, [r7, #16]
 800be9e:	ed87 7a05 	vstr	s14, [r7, #20]
 800bea2:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 800bea6:	ed97 7a04 	vldr	s14, [r7, #16]
 800beaa:	edd7 7a07 	vldr	s15, [r7, #28]
 800beae:	ee67 6a27 	vmul.f32	s13, s14, s15
 800beb2:	ed97 7a05 	vldr	s14, [r7, #20]
 800beb6:	edd7 7a07 	vldr	s15, [r7, #28]
 800beba:	ee27 6a27 	vmul.f32	s12, s14, s15
 800bebe:	ed97 7a06 	vldr	s14, [r7, #24]
 800bec2:	edd7 7a07 	vldr	s15, [r7, #28]
 800bec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beca:	eeb0 1a67 	vmov.f32	s2, s15
 800bece:	eef0 0a46 	vmov.f32	s1, s12
 800bed2:	eeb0 0a66 	vmov.f32	s0, s13
 800bed6:	f7ff ffab 	bl	800be30 <mkvec>
 800beda:	eef0 6a40 	vmov.f32	s13, s0
 800bede:	eeb0 7a60 	vmov.f32	s14, s1
 800bee2:	eef0 7a41 	vmov.f32	s15, s2
 800bee6:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800beea:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800beee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800bef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	ee06 1a90 	vmov	s13, r1
 800befc:	ee07 2a10 	vmov	s14, r2
 800bf00:	ee07 3a90 	vmov	s15, r3
}
 800bf04:	eeb0 0a66 	vmov.f32	s0, s13
 800bf08:	eef0 0a47 	vmov.f32	s1, s14
 800bf0c:	eeb0 1a67 	vmov.f32	s2, s15
 800bf10:	3730      	adds	r7, #48	; 0x30
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 800bf16:	b490      	push	{r4, r7}
 800bf18:	b090      	sub	sp, #64	; 0x40
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	ed87 0a07 	vstr	s0, [r7, #28]
 800bf20:	edc7 0a06 	vstr	s1, [r7, #24]
 800bf24:	ed87 1a05 	vstr	s2, [r7, #20]
 800bf28:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	623b      	str	r3, [r7, #32]
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	627b      	str	r3, [r7, #36]	; 0x24
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return q;
 800bf3c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800bf40:	f107 0320 	add.w	r3, r7, #32
 800bf44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bf4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf52:	ee06 0a10 	vmov	s12, r0
 800bf56:	ee06 1a90 	vmov	s13, r1
 800bf5a:	ee07 2a10 	vmov	s14, r2
 800bf5e:	ee07 3a90 	vmov	s15, r3
}
 800bf62:	eeb0 0a46 	vmov.f32	s0, s12
 800bf66:	eef0 0a66 	vmov.f32	s1, s13
 800bf6a:	eeb0 1a47 	vmov.f32	s2, s14
 800bf6e:	eef0 1a67 	vmov.f32	s3, s15
 800bf72:	3740      	adds	r7, #64	; 0x40
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bc90      	pop	{r4, r7}
 800bf78:	4770      	bx	lr

0800bf7a <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b08c      	sub	sp, #48	; 0x30
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	eeb0 6a40 	vmov.f32	s12, s0
 800bf84:	eef0 6a60 	vmov.f32	s13, s1
 800bf88:	eeb0 7a41 	vmov.f32	s14, s2
 800bf8c:	eef0 7a61 	vmov.f32	s15, s3
 800bf90:	ed87 6a04 	vstr	s12, [r7, #16]
 800bf94:	edc7 6a05 	vstr	s13, [r7, #20]
 800bf98:	ed87 7a06 	vstr	s14, [r7, #24]
 800bf9c:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 800bfa0:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfa4:	ed97 7a05 	vldr	s14, [r7, #20]
 800bfa8:	edd7 6a06 	vldr	s13, [r7, #24]
 800bfac:	eeb0 1a66 	vmov.f32	s2, s13
 800bfb0:	eef0 0a47 	vmov.f32	s1, s14
 800bfb4:	eeb0 0a67 	vmov.f32	s0, s15
 800bfb8:	f7ff ff3a 	bl	800be30 <mkvec>
 800bfbc:	eef0 6a40 	vmov.f32	s13, s0
 800bfc0:	eeb0 7a60 	vmov.f32	s14, s1
 800bfc4:	eef0 7a41 	vmov.f32	s15, s2
 800bfc8:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800bfcc:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800bfd0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800bfd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	ee06 1a90 	vmov	s13, r1
 800bfde:	ee07 2a10 	vmov	s14, r2
 800bfe2:	ee07 3a90 	vmov	s15, r3
}
 800bfe6:	eeb0 0a66 	vmov.f32	s0, s13
 800bfea:	eef0 0a47 	vmov.f32	s1, s14
 800bfee:	eeb0 1a67 	vmov.f32	s2, s15
 800bff2:	3730      	adds	r7, #48	; 0x30
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b094      	sub	sp, #80	; 0x50
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	eeb0 4a40 	vmov.f32	s8, s0
 800c002:	eef0 4a60 	vmov.f32	s9, s1
 800c006:	eeb0 5a41 	vmov.f32	s10, s2
 800c00a:	eef0 5a61 	vmov.f32	s11, s3
 800c00e:	eeb0 6a42 	vmov.f32	s12, s4
 800c012:	eef0 6a62 	vmov.f32	s13, s5
 800c016:	eeb0 7a43 	vmov.f32	s14, s6
 800c01a:	eef0 7a63 	vmov.f32	s15, s7
 800c01e:	ed87 4a08 	vstr	s8, [r7, #32]
 800c022:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800c026:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800c02a:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800c02e:	ed87 6a04 	vstr	s12, [r7, #16]
 800c032:	edc7 6a05 	vstr	s13, [r7, #20]
 800c036:	ed87 7a06 	vstr	s14, [r7, #24]
 800c03a:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 800c03e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c042:	edd7 7a04 	vldr	s15, [r7, #16]
 800c046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c04a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c04e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c05a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c05e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c06a:	edd7 6a08 	vldr	s13, [r7, #32]
 800c06e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c07a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 800c07e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c082:	eeb1 7a67 	vneg.f32	s14, s15
 800c086:	edd7 7a04 	vldr	s15, [r7, #16]
 800c08a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c08e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c092:	edd7 7a05 	vldr	s15, [r7, #20]
 800c096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c09a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c09e:	edd7 6a08 	vldr	s13, [r7, #32]
 800c0a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0ae:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c0b2:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0be:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 800c0c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c0c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0ce:	edd7 6a08 	vldr	s13, [r7, #32]
 800c0d2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0de:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c0e2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c0f2:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0fe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 800c102:	edd7 7a08 	vldr	s15, [r7, #32]
 800c106:	eeb1 7a67 	vneg.f32	s14, s15
 800c10a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c10e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c112:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c116:	edd7 7a05 	vldr	s15, [r7, #20]
 800c11a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c11e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c122:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c126:	edd7 7a06 	vldr	s15, [r7, #24]
 800c12a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c12e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c132:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c136:	edd7 7a07 	vldr	s15, [r7, #28]
 800c13a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c13e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c142:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	return mkquat(x, y, z, w);
 800c146:	edd7 1a10 	vldr	s3, [r7, #64]	; 0x40
 800c14a:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 800c14e:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800c152:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800c156:	f7ff fede 	bl	800bf16 <mkquat>
 800c15a:	eeb0 6a40 	vmov.f32	s12, s0
 800c15e:	eef0 6a60 	vmov.f32	s13, s1
 800c162:	eeb0 7a41 	vmov.f32	s14, s2
 800c166:	eef0 7a61 	vmov.f32	s15, s3
 800c16a:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 800c16e:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800c172:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800c176:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800c17a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c17c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c17e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c182:	ee06 0a10 	vmov	s12, r0
 800c186:	ee06 1a90 	vmov	s13, r1
 800c18a:	ee07 2a10 	vmov	s14, r2
 800c18e:	ee07 3a90 	vmov	s15, r3
}
 800c192:	eeb0 0a46 	vmov.f32	s0, s12
 800c196:	eef0 0a66 	vmov.f32	s1, s13
 800c19a:	eeb0 1a47 	vmov.f32	s2, s14
 800c19e:	eef0 1a67 	vmov.f32	s3, s15
 800c1a2:	3750      	adds	r7, #80	; 0x50
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08c      	sub	sp, #48	; 0x30
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	eeb0 6a40 	vmov.f32	s12, s0
 800c1b2:	eef0 6a60 	vmov.f32	s13, s1
 800c1b6:	eeb0 7a41 	vmov.f32	s14, s2
 800c1ba:	eef0 7a61 	vmov.f32	s15, s3
 800c1be:	ed87 6a04 	vstr	s12, [r7, #16]
 800c1c2:	edc7 6a05 	vstr	s13, [r7, #20]
 800c1c6:	ed87 7a06 	vstr	s14, [r7, #24]
 800c1ca:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 800c1ce:	edd7 7a04 	vldr	s15, [r7, #16]
 800c1d2:	eeb1 7a67 	vneg.f32	s14, s15
 800c1d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c1da:	eef1 6a67 	vneg.f32	s13, s15
 800c1de:	edd7 7a06 	vldr	s15, [r7, #24]
 800c1e2:	eef1 7a67 	vneg.f32	s15, s15
 800c1e6:	ed97 6a07 	vldr	s12, [r7, #28]
 800c1ea:	eef0 1a46 	vmov.f32	s3, s12
 800c1ee:	eeb0 1a67 	vmov.f32	s2, s15
 800c1f2:	eef0 0a66 	vmov.f32	s1, s13
 800c1f6:	eeb0 0a47 	vmov.f32	s0, s14
 800c1fa:	f7ff fe8c 	bl	800bf16 <mkquat>
 800c1fe:	eeb0 6a40 	vmov.f32	s12, s0
 800c202:	eef0 6a60 	vmov.f32	s13, s1
 800c206:	eeb0 7a41 	vmov.f32	s14, s2
 800c20a:	eef0 7a61 	vmov.f32	s15, s3
 800c20e:	ed87 6a08 	vstr	s12, [r7, #32]
 800c212:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800c216:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800c21a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800c21e:	6a38      	ldr	r0, [r7, #32]
 800c220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	ee06 0a10 	vmov	s12, r0
 800c22a:	ee06 1a90 	vmov	s13, r1
 800c22e:	ee07 2a10 	vmov	s14, r2
 800c232:	ee07 3a90 	vmov	s15, r3
}
 800c236:	eeb0 0a46 	vmov.f32	s0, s12
 800c23a:	eef0 0a66 	vmov.f32	s1, s13
 800c23e:	eeb0 1a47 	vmov.f32	s2, s14
 800c242:	eef0 1a67 	vmov.f32	s3, s15
 800c246:	3730      	adds	r7, #48	; 0x30
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	ed2d 8b02 	vpush	{d8}
 800c252:	b0a6      	sub	sp, #152	; 0x98
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 800c25a:	2300      	movs	r3, #0
 800c25c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c260:	e038      	b.n	800c2d4 <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 800c262:	f107 0308 	add.w	r3, r7, #8
 800c266:	2224      	movs	r2, #36	; 0x24
 800c268:	2100      	movs	r1, #0
 800c26a:	4618      	mov	r0, r3
 800c26c:	f018 fc08 	bl	8024a80 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800c270:	2301      	movs	r3, #1
 800c272:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c274:	2309      	movs	r3, #9
 800c276:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c278:	f107 0308 	add.w	r3, r7, #8
 800c27c:	63bb      	str	r3, [r7, #56]	; 0x38
    h[KC_STATE_X+i] = 1;
 800c27e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	3398      	adds	r3, #152	; 0x98
 800c286:	443b      	add	r3, r7
 800c288:	3b90      	subs	r3, #144	; 0x90
 800c28a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c28e:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	ed93 7a00 	vldr	s14, [r3]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	edd3 7a00 	vldr	s15, [r3]
 800c2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	ed93 7a07 	vldr	s14, [r3, #28]
 800c2b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2ba:	eef0 0a47 	vmov.f32	s1, s14
 800c2be:	eeb0 0a67 	vmov.f32	s0, s15
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7fc f95f 	bl	8008588 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 800c2ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	ddc2      	ble.n	800c262 <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 800c2f4:	eef0 1a46 	vmov.f32	s3, s12
 800c2f8:	eeb0 1a66 	vmov.f32	s2, s13
 800c2fc:	eef0 0a47 	vmov.f32	s1, s14
 800c300:	eeb0 0a67 	vmov.f32	s0, s15
 800c304:	f7ff fe07 	bl	800bf16 <mkquat>
 800c308:	eeb0 6a40 	vmov.f32	s12, s0
 800c30c:	eef0 6a60 	vmov.f32	s13, s1
 800c310:	eeb0 7a41 	vmov.f32	s14, s2
 800c314:	eef0 7a61 	vmov.f32	s15, s3
 800c318:	ed87 6a1a 	vstr	s12, [r7, #104]	; 0x68
 800c31c:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 800c320:	ed87 7a1c 	vstr	s14, [r7, #112]	; 0x70
 800c324:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	ed93 7a04 	vldr	s14, [r3, #16]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	edd3 6a05 	vldr	s13, [r3, #20]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	ed93 6a06 	vldr	s12, [r3, #24]
 800c340:	eef0 1a46 	vmov.f32	s3, s12
 800c344:	eeb0 1a66 	vmov.f32	s2, s13
 800c348:	eef0 0a47 	vmov.f32	s1, s14
 800c34c:	eeb0 0a67 	vmov.f32	s0, s15
 800c350:	f7ff fde1 	bl	800bf16 <mkquat>
 800c354:	eeb0 6a40 	vmov.f32	s12, s0
 800c358:	eef0 6a60 	vmov.f32	s13, s1
 800c35c:	eeb0 7a41 	vmov.f32	s14, s2
 800c360:	eef0 7a61 	vmov.f32	s15, s3
 800c364:	ed87 6a16 	vstr	s12, [r7, #88]	; 0x58
 800c368:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800c36c:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 800c370:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 800c374:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 800c378:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800c37c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c380:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c384:	eeb0 0a46 	vmov.f32	s0, s12
 800c388:	eef0 0a66 	vmov.f32	s1, s13
 800c38c:	eeb0 1a47 	vmov.f32	s2, s14
 800c390:	eef0 1a67 	vmov.f32	s3, s15
 800c394:	f7ff ff08 	bl	800c1a8 <qinv>
 800c398:	eeb0 6a40 	vmov.f32	s12, s0
 800c39c:	eef0 6a60 	vmov.f32	s13, s1
 800c3a0:	eeb0 7a41 	vmov.f32	s14, s2
 800c3a4:	eef0 7a61 	vmov.f32	s15, s3
 800c3a8:	ed87 6a1e 	vstr	s12, [r7, #120]	; 0x78
 800c3ac:	edc7 6a1f 	vstr	s13, [r7, #124]	; 0x7c
 800c3b0:	ed87 7a20 	vstr	s14, [r7, #128]	; 0x80
 800c3b4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 800c3b8:	ed97 4a16 	vldr	s8, [r7, #88]	; 0x58
 800c3bc:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 800c3c0:	ed97 5a18 	vldr	s10, [r7, #96]	; 0x60
 800c3c4:	edd7 5a19 	vldr	s11, [r7, #100]	; 0x64
 800c3c8:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c3cc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800c3d0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c3d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c3d8:	eeb0 2a44 	vmov.f32	s4, s8
 800c3dc:	eef0 2a64 	vmov.f32	s5, s9
 800c3e0:	eeb0 3a45 	vmov.f32	s6, s10
 800c3e4:	eef0 3a65 	vmov.f32	s7, s11
 800c3e8:	eeb0 0a46 	vmov.f32	s0, s12
 800c3ec:	eef0 0a66 	vmov.f32	s1, s13
 800c3f0:	eeb0 1a47 	vmov.f32	s2, s14
 800c3f4:	eef0 1a67 	vmov.f32	s3, s15
 800c3f8:	f7ff fdfe 	bl	800bff8 <qqmul>
 800c3fc:	eeb0 6a40 	vmov.f32	s12, s0
 800c400:	eef0 6a60 	vmov.f32	s13, s1
 800c404:	eeb0 7a41 	vmov.f32	s14, s2
 800c408:	eef0 7a61 	vmov.f32	s15, s3
 800c40c:	ed87 6a12 	vstr	s12, [r7, #72]	; 0x48
 800c410:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c414:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c418:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 800c41c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c420:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c424:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800c428:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 800c42c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c430:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c434:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c438:	eeb0 0a46 	vmov.f32	s0, s12
 800c43c:	eef0 0a66 	vmov.f32	s1, s13
 800c440:	eeb0 1a47 	vmov.f32	s2, s14
 800c444:	eef0 1a67 	vmov.f32	s3, s15
 800c448:	f7ff fd97 	bl	800bf7a <quatimagpart>
 800c44c:	eef0 6a40 	vmov.f32	s13, s0
 800c450:	eeb0 7a60 	vmov.f32	s14, s1
 800c454:	eef0 7a41 	vmov.f32	s15, s2
 800c458:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 800c45c:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 800c460:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 800c464:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c468:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c46c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c470:	eef0 0a66 	vmov.f32	s1, s13
 800c474:	eeb0 1a47 	vmov.f32	s2, s14
 800c478:	eef0 1a67 	vmov.f32	s3, s15
 800c47c:	eeb0 0a48 	vmov.f32	s0, s16
 800c480:	f7ff fd00 	bl	800be84 <vscl>
 800c484:	eef0 6a40 	vmov.f32	s13, s0
 800c488:	eeb0 7a60 	vmov.f32	s14, s1
 800c48c:	eef0 7a41 	vmov.f32	s15, s2
 800c490:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800c494:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800c498:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 800c49c:	f107 0308 	add.w	r3, r7, #8
 800c4a0:	2224      	movs	r2, #36	; 0x24
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f018 faeb 	bl	8024a80 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c4ae:	2309      	movs	r3, #9
 800c4b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c4b2:	f107 0308 	add.w	r3, r7, #8
 800c4b6:	633b      	str	r3, [r7, #48]	; 0x30
    h[KC_STATE_D0] = 1;
 800c4b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c4bc:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 800c4be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	ed93 7a08 	vldr	s14, [r3, #32]
 800c4c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c4cc:	eef0 0a47 	vmov.f32	s1, s14
 800c4d0:	eeb0 0a67 	vmov.f32	s0, s15
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7fc f856 	bl	8008588 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 800c4dc:	f04f 0300 	mov.w	r3, #0
 800c4e0:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 800c4e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 800c4e8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	ed93 7a08 	vldr	s14, [r3, #32]
 800c4f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c4f6:	eef0 0a47 	vmov.f32	s1, s14
 800c4fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7fc f841 	bl	8008588 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 800c506:	f04f 0300 	mov.w	r3, #0
 800c50a:	627b      	str	r3, [r7, #36]	; 0x24

    h[KC_STATE_D2] = 1;
 800c50c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c510:	62bb      	str	r3, [r7, #40]	; 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 800c512:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	ed93 7a08 	vldr	s14, [r3, #32]
 800c51c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c520:	eef0 0a47 	vmov.f32	s1, s14
 800c524:	eeb0 0a67 	vmov.f32	s0, s15
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7fc f82c 	bl	8008588 <kalmanCoreScalarUpdate>
  }
}
 800c530:	bf00      	nop
 800c532:	3798      	adds	r7, #152	; 0x98
 800c534:	46bd      	mov	sp, r7
 800c536:	ecbd 8b02 	vpop	{d8}
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08e      	sub	sp, #56	; 0x38
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 800c546:	2300      	movs	r3, #0
 800c548:	637b      	str	r3, [r7, #52]	; 0x34
 800c54a:	e033      	b.n	800c5b4 <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 800c54c:	f107 0308 	add.w	r3, r7, #8
 800c550:	2224      	movs	r2, #36	; 0x24
 800c552:	2100      	movs	r1, #0
 800c554:	4618      	mov	r0, r3
 800c556:	f018 fa93 	bl	8024a80 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800c55a:	2301      	movs	r3, #1
 800c55c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c55e:	2309      	movs	r3, #9
 800c560:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c562:	f107 0308 	add.w	r3, r7, #8
 800c566:	633b      	str	r3, [r7, #48]	; 0x30
    h[KC_STATE_X+i] = 1;
 800c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	3338      	adds	r3, #56	; 0x38
 800c56e:	443b      	add	r3, r7
 800c570:	3b30      	subs	r3, #48	; 0x30
 800c572:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c576:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	ed93 7a00 	vldr	s14, [r3]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	edd3 7a00 	vldr	s15, [r3]
 800c590:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	ed93 7a03 	vldr	s14, [r3, #12]
 800c59a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c59e:	eef0 0a47 	vmov.f32	s1, s14
 800c5a2:	eeb0 0a67 	vmov.f32	s0, s15
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7fb ffed 	bl	8008588 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 800c5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	ddc8      	ble.n	800c54c <kalmanCoreUpdateWithPosition+0x10>
  }
}
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	3738      	adds	r7, #56	; 0x38
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f003 0303 	and.w	r3, r3, #3
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <assert_aligned_4_bytes+0x22>
 800c5dc:	223c      	movs	r2, #60	; 0x3c
 800c5de:	4904      	ldr	r1, [pc, #16]	; (800c5f0 <assert_aligned_4_bytes+0x2c>)
 800c5e0:	4804      	ldr	r0, [pc, #16]	; (800c5f4 <assert_aligned_4_bytes+0x30>)
 800c5e2:	f005 fd23 	bl	801202c <assertFail>
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0802cf5c 	.word	0x0802cf5c
 800c5f4:	0802cfa8 	.word	0x0802cfa8

0800c5f8 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7ff ffdd 	bl	800c5c4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800c60a:	68b8      	ldr	r0, [r7, #8]
 800c60c:	f7ff ffda 	bl	800c5c4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff ffd7 	bl	800c5c4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	68b9      	ldr	r1, [r7, #8]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f017 f91e 	bl	802385c <arm_mat_mult_f32>
 800c620:	4603      	mov	r3, r0
 800c622:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800c624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <mat_mult+0x3e>
 800c62c:	2255      	movs	r2, #85	; 0x55
 800c62e:	4904      	ldr	r1, [pc, #16]	; (800c640 <mat_mult+0x48>)
 800c630:	4804      	ldr	r0, [pc, #16]	; (800c644 <mat_mult+0x4c>)
 800c632:	f005 fcfb 	bl	801202c <assertFail>
}
 800c636:	bf00      	nop
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	0802cf5c 	.word	0x0802cf5c
 800c644:	0802cfc0 	.word	0x0802cfc0

0800c648 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800c652:	f04f 0300 	mov.w	r3, #0
 800c656:	60bb      	str	r3, [r7, #8]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	613b      	str	r3, [r7, #16]
 800c65c:	f107 0308 	add.w	r3, r7, #8
 800c660:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800c662:	edd7 7a04 	vldr	s15, [r7, #16]
 800c666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66e:	db0a      	blt.n	800c686 <arm_sqrt+0x3e>
      *pOut = __builtin_sqrtf(in);
 800c670:	ed97 0a04 	vldr	s0, [r7, #16]
 800c674:	f01a fa1e 	bl	8026ab4 <sqrtf>
 800c678:	eef0 7a40 	vmov.f32	s15, s0
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800c682:	2300      	movs	r3, #0
 800c684:	e005      	b.n	800c692 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f04f 0200 	mov.w	r2, #0
 800c68c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800c68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  arm_status result = arm_sqrt_f32(in, &pOut);
 800c692:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800c694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d004      	beq.n	800c6a6 <arm_sqrt+0x5e>
 800c69c:	225b      	movs	r2, #91	; 0x5b
 800c69e:	4906      	ldr	r1, [pc, #24]	; (800c6b8 <arm_sqrt+0x70>)
 800c6a0:	4806      	ldr	r0, [pc, #24]	; (800c6bc <arm_sqrt+0x74>)
 800c6a2:	f005 fcc3 	bl	801202c <assertFail>
  return pOut;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	ee07 3a90 	vmov	s15, r3
}
 800c6ac:	eeb0 0a67 	vmov.f32	s0, s15
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0802cf5c 	.word	0x0802cf5c
 800c6bc:	0802cfc0 	.word	0x0802cfc0

0800c6c0 <kalmanCoreUpdateWithSweepAngles>:
 */

#include "mm_sweep_angles.h"


void kalmanCoreUpdateWithSweepAngles(kalmanCoreData_t *this, sweepAngleMeasurement_t *sweepInfo, const uint32_t nowMs, OutlierFilterLhState_t* sweepOutlierFilterState) {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b0c2      	sub	sp, #264	; 0x108
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c6cc:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800c6d0:	6001      	str	r1, [r0, #0]
 800c6d2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800c6d6:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 800c6da:	600a      	str	r2, [r1, #0]
 800c6dc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c6e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c6e4:	6013      	str	r3, [r2, #0]
  // Rotate the sensor position from CF reference frame to global reference frame,
  // using the CF roatation matrix
  vec3d s;
  arm_matrix_instance_f32 Rcf_ = {3, 3, (float32_t *)this->R};
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3334      	adds	r3, #52	; 0x34
 800c6f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  arm_matrix_instance_f32 scf_ = {3, 1, (float32_t *)*sweepInfo->sensorPos};
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800c700:	2301      	movs	r3, #1
 800c702:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800c706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  arm_matrix_instance_f32 s_ = {3, 1, s};
 800c716:	2303      	movs	r3, #3
 800c718:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800c71c:	2301      	movs	r3, #1
 800c71e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800c722:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  mat_mult(&Rcf_, &scf_, &s_);
 800c72a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800c72e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800c732:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff ff5e 	bl	800c5f8 <mat_mult>

  // Get the current state values of the position of the crazyflie (global reference frame) and add the relative sensor pos
  vec3d pcf = {this->S[KC_STATE_X] + s[0], this->S[KC_STATE_Y] + s[1], this->S[KC_STATE_Z] + s[2]};
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	ed93 7a00 	vldr	s14, [r3]
 800c742:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800c746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c74a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	ed93 7a01 	vldr	s14, [r3, #4]
 800c754:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800c758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c75c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	ed93 7a02 	vldr	s14, [r3, #8]
 800c766:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c76a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c76e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

  // Calculate the difference between the rotor and the sensor on the CF (global reference frame)
  const vec3d* pr = sweepInfo->rotorPos;
 800c772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c776:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  vec3d stmp = {pcf[0] - (*pr)[0], pcf[1] - (*pr)[1], pcf[2] - (*pr)[2]};
 800c782:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800c786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78a:	edd3 7a00 	vldr	s15, [r3]
 800c78e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c792:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 800c796:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c79e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7a6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
 800c7aa:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800c7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7b2:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
  arm_matrix_instance_f32 stmp_ = {3, 1, stmp};
 800c7be:	2303      	movs	r3, #3
 800c7c0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c7ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c7ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  // Rotate the difference in position to the rotor reference frame,
  // using the rotor inverse rotation matrix
  vec3d sr;
  arm_matrix_instance_f32 Rr_inv_ = {3, 3, (float32_t *)(*sweepInfo->rotorRotInv)};
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800c7d8:	2303      	movs	r3, #3
 800c7da:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800c7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  arm_matrix_instance_f32 sr_ = {3, 1, sr};
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800c7f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c7fc:	677b      	str	r3, [r7, #116]	; 0x74
  mat_mult(&Rr_inv_, &stmp_, &sr_);
 800c7fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c802:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800c806:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff fef4 	bl	800c5f8 <mat_mult>

  // The following computations are in the rotor refernece frame
  const float x = sr[0];
 800c810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c814:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const float y = sr[1];
 800c818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c81c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  const float z = sr[2];
 800c820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  const float t = sweepInfo->t;
 800c828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const float tan_t = tanf(t);
 800c838:	ed97 0a3d 	vldr	s0, [r7, #244]	; 0xf4
 800c83c:	f01a f9ea 	bl	8026c14 <tanf>
 800c840:	ed87 0a3c 	vstr	s0, [r7, #240]	; 0xf0

  const float r2 = x * x + y * y;
 800c844:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 800c848:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c84c:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c850:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c854:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c858:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
  const float r = arm_sqrt(r2);
 800c85c:	ed97 0a3b 	vldr	s0, [r7, #236]	; 0xec
 800c860:	f7ff fef2 	bl	800c648 <arm_sqrt>
 800c864:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8

  const float predictedSweepAngle = sweepInfo->calibrationMeasurementModel(x, y, z, t, sweepInfo->calib);
 800c868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c874:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c878:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800c87c:	6812      	ldr	r2, [r2, #0]
 800c87e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c880:	4610      	mov	r0, r2
 800c882:	edd7 1a3d 	vldr	s3, [r7, #244]	; 0xf4
 800c886:	ed97 1a3e 	vldr	s2, [r7, #248]	; 0xf8
 800c88a:	edd7 0a3f 	vldr	s1, [r7, #252]	; 0xfc
 800c88e:	ed97 0a40 	vldr	s0, [r7, #256]	; 0x100
 800c892:	4798      	blx	r3
 800c894:	ed87 0a39 	vstr	s0, [r7, #228]	; 0xe4
  const float measuredSweepAngle = sweepInfo->measuredSweepAngle;
 800c898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c89c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  const float error = measuredSweepAngle - predictedSweepAngle;
 800c8a8:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800c8ac:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800c8b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8b4:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc

  if (outlierFilterLighthouseValidateSweep(sweepOutlierFilterState, r, error, nowMs)) {
 800c8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8bc:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800c8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8c8:	6811      	ldr	r1, [r2, #0]
 800c8ca:	edd7 0a37 	vldr	s1, [r7, #220]	; 0xdc
 800c8ce:	ed97 0a3a 	vldr	s0, [r7, #232]	; 0xe8
 800c8d2:	6818      	ldr	r0, [r3, #0]
 800c8d4:	f001 f8d0 	bl	800da78 <outlierFilterLighthouseValidateSweep>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80a2 	beq.w	800ca24 <kalmanCoreUpdateWithSweepAngles+0x364>
    // Calculate H vector (in the rotor reference frame)
    const float z_tan_t = z * tan_t;
 800c8e0:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 800c8e4:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800c8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ec:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
    const float qNum = r2 - z_tan_t * z_tan_t;
 800c8f0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800c8f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8f8:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800c8fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c900:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
    // Avoid singularity
    if (qNum > 0.0001f) {
 800c904:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800c908:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ca30 <kalmanCoreUpdateWithSweepAngles+0x370>
 800c90c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c914:	dc00      	bgt.n	800c918 <kalmanCoreUpdateWithSweepAngles+0x258>

      arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
      kalmanCoreScalarUpdate(this, &H, error, sweepInfo->stdDev);
    }
  }
}
 800c916:	e085      	b.n	800ca24 <kalmanCoreUpdateWithSweepAngles+0x364>
      const float q = tan_t / arm_sqrt(qNum);
 800c918:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 800c91c:	f7ff fe94 	bl	800c648 <arm_sqrt>
 800c920:	eef0 6a40 	vmov.f32	s13, s0
 800c924:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 800c928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c92c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
      vec3d gr = {(-y - x * z * q) / r2, (x - y * z * q) / r2 , q};
 800c930:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c934:	eeb1 7a67 	vneg.f32	s14, s15
 800c938:	edd7 6a40 	vldr	s13, [r7, #256]	; 0x100
 800c93c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800c940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c944:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800c948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c94c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c950:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800c954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c958:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 800c95c:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 800c960:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800c964:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c968:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800c96c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c970:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 800c974:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c978:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800c97c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c980:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800c984:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c988:	66fb      	str	r3, [r7, #108]	; 0x6c
      arm_matrix_instance_f32 gr_ = {3, 1, gr};
 800c98a:	2303      	movs	r3, #3
 800c98c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c990:	2301      	movs	r3, #1
 800c992:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800c996:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c99a:	657b      	str	r3, [r7, #84]	; 0x54
      arm_matrix_instance_f32 Rr_ = {3, 3, (float32_t *)(*sweepInfo->rotorRot)};
 800c99c:	2303      	movs	r3, #3
 800c99e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      arm_matrix_instance_f32 g_ = {3, 1, g};
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c9c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c9c6:	647b      	str	r3, [r7, #68]	; 0x44
      mat_mult(&Rr_, &gr_, &g_);
 800c9c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c9cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c9d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fe0f 	bl	800c5f8 <mat_mult>
      float h[KC_STATE_DIM] = {0};
 800c9da:	f107 0314 	add.w	r3, r7, #20
 800c9de:	2224      	movs	r2, #36	; 0x24
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f018 f84c 	bl	8024a80 <memset>
      h[KC_STATE_X] = g[0];
 800c9e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ea:	617b      	str	r3, [r7, #20]
      h[KC_STATE_Y] = g[1];
 800c9ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9ee:	61bb      	str	r3, [r7, #24]
      h[KC_STATE_Z] = g[2];
 800c9f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9f2:	61fb      	str	r3, [r7, #28]
      arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	873b      	strh	r3, [r7, #56]	; 0x38
 800c9f8:	2309      	movs	r3, #9
 800c9fa:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c9fc:	f107 0314 	add.w	r3, r7, #20
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
      kalmanCoreScalarUpdate(this, &H, error, sweepInfo->stdDev);
 800ca02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca14:	eef0 0a67 	vmov.f32	s1, s15
 800ca18:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7fb fdb2 	bl	8008588 <kalmanCoreScalarUpdate>
}
 800ca24:	bf00      	nop
 800ca26:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	38d1b717 	.word	0x38d1b717

0800ca34 <kalmanCoreUpdateWithTdoa>:
#if CONFIG_ESTIMATOR_KALMAN_TDOA_OUTLIERFILTER_FALLBACK
#include "outlierFilterTdoaSteps.h"
#endif

void kalmanCoreUpdateWithTdoa(kalmanCoreData_t* this, tdoaMeasurement_t *tdoa, const uint32_t nowMs, OutlierFilterTdoaState_t* outlierFilterState)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	ed2d 8b02 	vpush	{d8}
 800ca3a:	b0a4      	sub	sp, #144	; 0x90
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
  /**
   * Measurement equation:
   * dR = dT + d1 - d0
   */

  float measurement = tdoa->distanceDiff;
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  // predict based on current state
  float x = this->S[KC_STATE_X];
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float y = this->S[KC_STATE_Y];
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float z = this->S[KC_STATE_Z];
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  float x1 = tdoa->anchorPositions[1].x, y1 = tdoa->anchorPositions[1].y, z1 = tdoa->anchorPositions[1].z;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	69db      	ldr	r3, [r3, #28]
 800ca76:	677b      	str	r3, [r7, #116]	; 0x74
  float x0 = tdoa->anchorPositions[0].x, y0 = tdoa->anchorPositions[0].y, z0 = tdoa->anchorPositions[0].z;
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	673b      	str	r3, [r7, #112]	; 0x70
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	66bb      	str	r3, [r7, #104]	; 0x68

  float dx1 = x - x1;
 800ca8a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800ca8e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800ca92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca96:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  float dy1 = y - y1;
 800ca9a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800ca9e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800caa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caa6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  float dz1 = z - z1;
 800caaa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800caae:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800cab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cab6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  float dy0 = y - y0;
 800caba:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800cabe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800cac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cac6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  float dx0 = x - x0;
 800caca:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800cace:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800cad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cad6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  float dz0 = z - z0;
 800cada:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800cade:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800cae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cae6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  float d1 = sqrtf(powf(dx1, 2) + powf(dy1, 2) + powf(dz1, 2));
 800caea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800caee:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800caf2:	f019 ff87 	bl	8026a04 <powf>
 800caf6:	eeb0 8a40 	vmov.f32	s16, s0
 800cafa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cafe:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800cb02:	f019 ff7f 	bl	8026a04 <powf>
 800cb06:	eef0 7a40 	vmov.f32	s15, s0
 800cb0a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800cb0e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb12:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800cb16:	f019 ff75 	bl	8026a04 <powf>
 800cb1a:	eef0 7a40 	vmov.f32	s15, s0
 800cb1e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cb22:	eeb0 0a67 	vmov.f32	s0, s15
 800cb26:	f019 ffc5 	bl	8026ab4 <sqrtf>
 800cb2a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  float d0 = sqrtf(powf(dx0, 2) + powf(dy0, 2) + powf(dz0, 2));
 800cb2e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb32:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800cb36:	f019 ff65 	bl	8026a04 <powf>
 800cb3a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb3e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb42:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 800cb46:	f019 ff5d 	bl	8026a04 <powf>
 800cb4a:	eef0 7a40 	vmov.f32	s15, s0
 800cb4e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800cb52:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb56:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800cb5a:	f019 ff53 	bl	8026a04 <powf>
 800cb5e:	eef0 7a40 	vmov.f32	s15, s0
 800cb62:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cb66:	eeb0 0a67 	vmov.f32	s0, s15
 800cb6a:	f019 ffa3 	bl	8026ab4 <sqrtf>
 800cb6e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

  float predicted = d1 - d0;
 800cb72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800cb76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cb7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb7e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float error = measurement - predicted;
 800cb82:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800cb86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cb8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb8e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  float h[KC_STATE_DIM] = {0};
 800cb92:	f107 0318 	add.w	r3, r7, #24
 800cb96:	2224      	movs	r2, #36	; 0x24
 800cb98:	2100      	movs	r1, #0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f017 ff70 	bl	8024a80 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800cba0:	2301      	movs	r3, #1
 800cba2:	823b      	strh	r3, [r7, #16]
 800cba4:	2309      	movs	r3, #9
 800cba6:	827b      	strh	r3, [r7, #18]
 800cba8:	f107 0318 	add.w	r3, r7, #24
 800cbac:	617b      	str	r3, [r7, #20]

  if ((d0 != 0.0f) && (d1 != 0.0f)) {
 800cbae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cbb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	d051      	beq.n	800cc60 <kalmanCoreUpdateWithTdoa+0x22c>
 800cbbc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800cbc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc8:	d04a      	beq.n	800cc60 <kalmanCoreUpdateWithTdoa+0x22c>
    h[KC_STATE_X] = (dx1 / d1 - dx0 / d0);
 800cbca:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800cbce:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800cbd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd6:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800cbda:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800cbde:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800cbe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbe6:	edc7 7a06 	vstr	s15, [r7, #24]
    h[KC_STATE_Y] = (dy1 / d1 - dy0 / d0);
 800cbea:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800cbee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800cbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbf6:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800cbfa:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800cbfe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800cc02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc06:	edc7 7a07 	vstr	s15, [r7, #28]
    h[KC_STATE_Z] = (dz1 / d1 - dz0 / d0);
 800cc0a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800cc0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800cc12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc16:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800cc1a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800cc1e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800cc22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc26:	edc7 7a08 	vstr	s15, [r7, #32]
      .z = this->S[KC_STATE_Z],
    };

    bool sampleIsGood = outlierFilterTdoaValidateSteps(tdoa, error, &jacobian, &estimatedPosition);
    #else
    bool sampleIsGood = outlierFilterTdoaValidateIntegrator(outlierFilterState, tdoa, error, nowMs);
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	6838      	ldr	r0, [r7, #0]
 800cc34:	f000 ff96 	bl	800db64 <outlierFilterTdoaValidateIntegrator>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    #endif

    if (sampleIsGood) {
 800cc3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00c      	beq.n	800cc60 <kalmanCoreUpdateWithTdoa+0x22c>
      kalmanCoreScalarUpdate(this, &H, error, tdoa->stdDev);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cc4c:	f107 0310 	add.w	r3, r7, #16
 800cc50:	eef0 0a67 	vmov.f32	s1, s15
 800cc54:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800cc58:	4619      	mov	r1, r3
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f7fb fc94 	bl	8008588 <kalmanCoreScalarUpdate>
    }
  }
}
 800cc60:	bf00      	nop
 800cc62:	3790      	adds	r7, #144	; 0x90
 800cc64:	46bd      	mov	sp, r7
 800cc66:	ecbd 8b02 	vpop	{d8}
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <assert_aligned_4_bytes+0x22>
 800cc84:	223c      	movs	r2, #60	; 0x3c
 800cc86:	4904      	ldr	r1, [pc, #16]	; (800cc98 <assert_aligned_4_bytes+0x2c>)
 800cc88:	4804      	ldr	r0, [pc, #16]	; (800cc9c <assert_aligned_4_bytes+0x30>)
 800cc8a:	f005 f9cf 	bl	801202c <assertFail>
}
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	0802cfdc 	.word	0x0802cfdc
 800cc9c:	0802d028 	.word	0x0802d028

0800cca0 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff ffde 	bl	800cc6c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800ccb0:	6838      	ldr	r0, [r7, #0]
 800ccb2:	f7ff ffdb 	bl	800cc6c <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f016 fd21 	bl	8023700 <arm_mat_trans_f32>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800ccc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d004      	beq.n	800ccd4 <mat_trans+0x34>
 800ccca:	2244      	movs	r2, #68	; 0x44
 800cccc:	4903      	ldr	r1, [pc, #12]	; (800ccdc <mat_trans+0x3c>)
 800ccce:	4804      	ldr	r0, [pc, #16]	; (800cce0 <mat_trans+0x40>)
 800ccd0:	f005 f9ac 	bl	801202c <assertFail>
}
 800ccd4:	bf00      	nop
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	0802cfdc 	.word	0x0802cfdc
 800cce0:	0802d040 	.word	0x0802d040

0800cce4 <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff ffbc 	bl	800cc6c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800ccf4:	6838      	ldr	r0, [r7, #0]
 800ccf6:	f7ff ffb9 	bl	800cc6c <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f016 fe4d 	bl	802399c <arm_mat_inverse_f32>
 800cd02:	4603      	mov	r3, r0
 800cd04:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800cd06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <mat_inv+0x34>
 800cd0e:	224c      	movs	r2, #76	; 0x4c
 800cd10:	4903      	ldr	r1, [pc, #12]	; (800cd20 <mat_inv+0x3c>)
 800cd12:	4804      	ldr	r0, [pc, #16]	; (800cd24 <mat_inv+0x40>)
 800cd14:	f005 f98a 	bl	801202c <assertFail>
}
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	0802cfdc 	.word	0x0802cfdc
 800cd24:	0802d040 	.word	0x0802d040

0800cd28 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f7ff ff99 	bl	800cc6c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800cd3a:	68b8      	ldr	r0, [r7, #8]
 800cd3c:	f7ff ff96 	bl	800cc6c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff ff93 	bl	800cc6c <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f016 fd86 	bl	802385c <arm_mat_mult_f32>
 800cd50:	4603      	mov	r3, r0
 800cd52:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800cd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <mat_mult+0x3e>
 800cd5c:	2255      	movs	r2, #85	; 0x55
 800cd5e:	4904      	ldr	r1, [pc, #16]	; (800cd70 <mat_mult+0x48>)
 800cd60:	4804      	ldr	r0, [pc, #16]	; (800cd74 <mat_mult+0x4c>)
 800cd62:	f005 f963 	bl	801202c <assertFail>
}
 800cd66:	bf00      	nop
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	0802cfdc 	.word	0x0802cfdc
 800cd74:	0802d040 	.word	0x0802d040

0800cd78 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 800cd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	b08d      	sub	sp, #52	; 0x34
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	607a      	str	r2, [r7, #4]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	603a      	str	r2, [r7, #0]
 800cd8a:	1e53      	subs	r3, r2, #1
 800cd8c:	61bb      	str	r3, [r7, #24]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	4690      	mov	r8, r2
 800cd92:	4699      	mov	r9, r3
 800cd94:	f04f 0200 	mov.w	r2, #0
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800cda0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800cda4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800cda8:	68fe      	ldr	r6, [r7, #12]
 800cdaa:	1e73      	subs	r3, r6, #1
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	4632      	mov	r2, r6
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4614      	mov	r4, r2
 800cdb4:	461d      	mov	r5, r3
 800cdb6:	f04f 0200 	mov.w	r2, #0
 800cdba:	f04f 0300 	mov.w	r3, #0
 800cdbe:	016b      	lsls	r3, r5, #5
 800cdc0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800cdc4:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular
    for (int i = 0; i < n; i++) {
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdca:	e0af      	b.n	800cf2c <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) {
 800cdcc:	2300      	movs	r3, #0
 800cdce:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdd0:	e0a4      	b.n	800cf1c <Cholesky_Decomposition+0x1a4>
            float sum = 0.0;
 800cdd2:	f04f 0300 	mov.w	r3, #0
 800cdd6:	627b      	str	r3, [r7, #36]	; 0x24
            if (j == i) // summation for diagnols
 800cdd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d146      	bne.n	800ce6e <Cholesky_Decomposition+0xf6>
            {
                for (int k = 0; k < j; k++)
 800cde0:	2300      	movs	r3, #0
 800cde2:	623b      	str	r3, [r7, #32]
 800cde4:	e01c      	b.n	800ce20 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2);
 800cde6:	4632      	mov	r2, r6
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	fb02 f303 	mul.w	r3, r2, r3
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	441a      	add	r2, r3
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	edd3 7a00 	vldr	s15, [r3]
 800cdfe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800ce02:	eeb0 0a67 	vmov.f32	s0, s15
 800ce06:	f019 fdfd 	bl	8026a04 <powf>
 800ce0a:	eeb0 7a40 	vmov.f32	s14, s0
 800ce0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ce12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++)
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	623b      	str	r3, [r7, #32]
 800ce20:	6a3a      	ldr	r2, [r7, #32]
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	429a      	cmp	r2, r3
 800ce26:	dbde      	blt.n	800cde6 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum);
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	441a      	add	r2, r3
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	ed93 7a00 	vldr	s14, [r3]
 800ce40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ce44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce48:	4632      	mov	r2, r6
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	fb02 f303 	mul.w	r3, r2, r3
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	18d4      	adds	r4, r2, r3
 800ce56:	eeb0 0a67 	vmov.f32	s0, s15
 800ce5a:	f019 fe2b 	bl	8026ab4 <sqrtf>
 800ce5e:	eef0 7a40 	vmov.f32	s15, s0
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4423      	add	r3, r4
 800ce68:	edc3 7a00 	vstr	s15, [r3]
 800ce6c:	e053      	b.n	800cf16 <Cholesky_Decomposition+0x19e>
            } else {
                for (int k = 0; k < j; k++)
 800ce6e:	2300      	movs	r3, #0
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	e022      	b.n	800ceba <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]);
 800ce74:	4632      	mov	r2, r6
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	fb02 f303 	mul.w	r3, r2, r3
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	441a      	add	r2, r3
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	ed93 7a00 	vldr	s14, [r3]
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	fb02 f303 	mul.w	r3, r2, r3
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	441a      	add	r2, r3
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	edd3 7a00 	vldr	s15, [r3]
 800cea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cea8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ceac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                for (int k = 0; k < j; k++)
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	61fb      	str	r3, [r7, #28]
 800ceba:	69fa      	ldr	r2, [r7, #28]
 800cebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebe:	429a      	cmp	r2, r3
 800cec0:	dbd8      	blt.n	800ce74 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j];
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	fb02 f303 	mul.w	r3, r2, r3
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	441a      	add	r2, r3
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	ed93 7a00 	vldr	s14, [r3]
 800ceda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cede:	ee77 6a67 	vsub.f32	s13, s14, s15
 800cee2:	4632      	mov	r2, r6
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	fb02 f303 	mul.w	r3, r2, r3
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	441a      	add	r2, r3
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	ed93 7a00 	vldr	s14, [r3]
 800cefa:	4632      	mov	r2, r6
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	fb02 f303 	mul.w	r3, r2, r3
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	441a      	add	r2, r3
 800cf08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) {
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	3301      	adds	r3, #1
 800cf1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	429a      	cmp	r2, r3
 800cf22:	f77f af56 	ble.w	800cdd2 <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) {
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	3301      	adds	r3, #1
 800cf2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	f6ff af4b 	blt.w	800cdcc <Cholesky_Decomposition+0x54>
            }
        }
    }
}
 800cf36:	bf00      	nop
 800cf38:	bf00      	nop
 800cf3a:	3734      	adds	r7, #52	; 0x34
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf42 <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating
 * a large measurement uncertainty.
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 800cf42:	b480      	push	{r7}
 800cf44:	b085      	sub	sp, #20
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	ed87 0a01 	vstr	s0, [r7, #4]
 800cf4c:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;
 800cf4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf52:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800cf54:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf5c:	ed97 7a03 	vldr	s14, [r7, #12]
 800cf60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf64:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800cf68:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cf70:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf74:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cf78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	edc3 7a00 	vstr	s15, [r3]
}
 800cf82:	bf00      	nop
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <GM_state>:

static void GM_state(float e, float * GM_e){
 800cf8e:	b480      	push	{r7}
 800cf90:	b085      	sub	sp, #20
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	ed87 0a01 	vstr	s0, [r7, #4]
 800cf98:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;
 800cf9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf9e:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800cfa0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cfa8:	ed97 7a03 	vldr	s14, [r7, #12]
 800cfac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfb0:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800cfb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cfb8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cfbc:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cfc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	edc3 7a00 	vstr	s15, [r3]
}
 800cfce:	bf00      	nop
 800cfd0:	3714      	adds	r7, #20
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
	...

0800cfdc <kalmanCoreRobustUpdateWithTdoa>:

// robsut update function
void kalmanCoreRobustUpdateWithTdoa(kalmanCoreData_t* this, tdoaMeasurement_t *tdoa, OutlierFilterTdoaState_t* outlierFilterState)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	ed2d 8b02 	vpush	{d8}
 800cfe2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cfec:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800cff0:	6018      	str	r0, [r3, #0]
 800cff2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cff6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800cffa:	6019      	str	r1, [r3, #0]
 800cffc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d000:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800d004:	601a      	str	r2, [r3, #0]
    // Measurement equation:
    // d_ij = d_j - d_i
	float measurement = 0.0f;
 800d006:	f04f 0300 	mov.w	r3, #0
 800d00a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    float x = this->S[KC_STATE_X];
 800d00e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d012:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    float y = this->S[KC_STATE_Y];
 800d01e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d022:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    float z = this->S[KC_STATE_Z];
 800d02e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d032:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

    float x1 = tdoa->anchorPositions[1].x, y1 = tdoa->anchorPositions[1].y, z1 = tdoa->anchorPositions[1].z;
 800d03e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d042:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800d04e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d052:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d05e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d062:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    float x0 = tdoa->anchorPositions[0].x, y0 = tdoa->anchorPositions[0].y, z0 = tdoa->anchorPositions[0].z;
 800d06e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d072:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800d07e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d082:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800d08e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d092:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    float dx1 = x - x1;   float  dy1 = y - y1;   float dz1 = z - z1;
 800d09e:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800d0a2:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 800d0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0aa:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 800d0ae:	ed97 7a7a 	vldr	s14, [r7, #488]	; 0x1e8
 800d0b2:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 800d0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ba:	edc7 7a71 	vstr	s15, [r7, #452]	; 0x1c4
 800d0be:	ed97 7a79 	vldr	s14, [r7, #484]	; 0x1e4
 800d0c2:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800d0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ca:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
    float dx0 = x - x0;   float  dy0 = y - y0;   float dz0 = z - z0;
 800d0ce:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800d0d2:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800d0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0da:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
 800d0de:	ed97 7a7a 	vldr	s14, [r7, #488]	; 0x1e8
 800d0e2:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 800d0e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ea:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 800d0ee:	ed97 7a79 	vldr	s14, [r7, #484]	; 0x1e4
 800d0f2:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800d0f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0fa:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4

    float d1 = sqrtf(powf(dx1, 2) + powf(dy1, 2) + powf(dz1, 2));
 800d0fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d102:	ed97 0a72 	vldr	s0, [r7, #456]	; 0x1c8
 800d106:	f019 fc7d 	bl	8026a04 <powf>
 800d10a:	eeb0 8a40 	vmov.f32	s16, s0
 800d10e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d112:	ed97 0a71 	vldr	s0, [r7, #452]	; 0x1c4
 800d116:	f019 fc75 	bl	8026a04 <powf>
 800d11a:	eef0 7a40 	vmov.f32	s15, s0
 800d11e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d122:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d126:	ed97 0a70 	vldr	s0, [r7, #448]	; 0x1c0
 800d12a:	f019 fc6b 	bl	8026a04 <powf>
 800d12e:	eef0 7a40 	vmov.f32	s15, s0
 800d132:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d136:	eeb0 0a67 	vmov.f32	s0, s15
 800d13a:	f019 fcbb 	bl	8026ab4 <sqrtf>
 800d13e:	ed87 0a6c 	vstr	s0, [r7, #432]	; 0x1b0
    float d0 = sqrtf(powf(dx0, 2) + powf(dy0, 2) + powf(dz0, 2));
 800d142:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d146:	ed97 0a6f 	vldr	s0, [r7, #444]	; 0x1bc
 800d14a:	f019 fc5b 	bl	8026a04 <powf>
 800d14e:	eeb0 8a40 	vmov.f32	s16, s0
 800d152:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d156:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 800d15a:	f019 fc53 	bl	8026a04 <powf>
 800d15e:	eef0 7a40 	vmov.f32	s15, s0
 800d162:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d166:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d16a:	ed97 0a6d 	vldr	s0, [r7, #436]	; 0x1b4
 800d16e:	f019 fc49 	bl	8026a04 <powf>
 800d172:	eef0 7a40 	vmov.f32	s15, s0
 800d176:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d17a:	eeb0 0a67 	vmov.f32	s0, s15
 800d17e:	f019 fc99 	bl	8026ab4 <sqrtf>
 800d182:	ed87 0a6b 	vstr	s0, [r7, #428]	; 0x1ac
    // if measurements make sense
    if ((d0 != 0.0f) && (d1 != 0.0f)) {
 800d186:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800d18a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d192:	f000 8376 	beq.w	800d882 <kalmanCoreRobustUpdateWithTdoa+0x8a6>
 800d196:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800d19a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a2:	f000 836e 	beq.w	800d882 <kalmanCoreRobustUpdateWithTdoa+0x8a6>
        float predicted = d1 - d0;
 800d1a6:	ed97 7a6c 	vldr	s14, [r7, #432]	; 0x1b0
 800d1aa:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800d1ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1b2:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
        measurement = tdoa->distanceDiff;
 800d1b6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d1ba:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

        // innovation term based on prior x
        float error_check = measurement - predicted;    // innovation term based on prior state
 800d1c6:	ed97 7a7c 	vldr	s14, [r7, #496]	; 0x1f0
 800d1ca:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 800d1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1d2:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
        static float P_chol[KC_STATE_DIM][KC_STATE_DIM];
        static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
        static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];
        static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

        float h[KC_STATE_DIM] = {0};
 800d1d6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d1da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d1de:	4618      	mov	r0, r3
 800d1e0:	2324      	movs	r3, #36	; 0x24
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	f017 fc4b 	bl	8024a80 <memset>
        arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
 800d1f0:	2309      	movs	r3, #9
 800d1f2:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
 800d1f6:	f107 0314 	add.w	r3, r7, #20
 800d1fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
        static float x_err[KC_STATE_DIM] = {0.0};
        static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
        static float X_state[KC_STATE_DIM] = {0.0};
        float P_iter[KC_STATE_DIM][KC_STATE_DIM];
        memcpy(P_iter, this->P, sizeof(P_iter));                 // init P_iter as P_prior
 800d1fe:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d202:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d20c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d210:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800d214:	4618      	mov	r0, r3
 800d216:	f017 fdae 	bl	8024d76 <memcpy>

        float R_iter = tdoa->stdDev * tdoa->stdDev;                    // measurement covariance
 800d21a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d21e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800d228:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d22c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23a:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
        memcpy(X_state, this->S, sizeof(X_state));                     // copy Xpr to X_State and then update in each iterations
 800d23e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d242:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2224      	movs	r2, #36	; 0x24
 800d24a:	4619      	mov	r1, r3
 800d24c:	48dc      	ldr	r0, [pc, #880]	; (800d5c0 <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800d24e:	f017 fd92 	bl	8024d76 <memcpy>

        // ---------------------- Start iteration ----------------------- //
        for (int iter = 0; iter < MAX_ITER; iter++){
 800d252:	2300      	movs	r3, #0
 800d254:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800d258:	e301      	b.n	800d85e <kalmanCoreRobustUpdateWithTdoa+0x882>
            // cholesky decomposition for the prior covariance matrix
            Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);      // P_chol is a lower triangular matrix
 800d25a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d25e:	4ad9      	ldr	r2, [pc, #868]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d260:	4619      	mov	r1, r3
 800d262:	2009      	movs	r0, #9
 800d264:	f7ff fd88 	bl	800cd78 <Cholesky_Decomposition>
            mat_trans(&Pc_m, &Pc_tran_m);
 800d268:	49d7      	ldr	r1, [pc, #860]	; (800d5c8 <kalmanCoreRobustUpdateWithTdoa+0x5ec>)
 800d26a:	48d8      	ldr	r0, [pc, #864]	; (800d5cc <kalmanCoreRobustUpdateWithTdoa+0x5f0>)
 800d26c:	f7ff fd18 	bl	800cca0 <mat_trans>

            // decomposition for measurement covariance (scalar case)
            float R_chol = sqrtf(R_iter);
 800d270:	ed97 0a87 	vldr	s0, [r7, #540]	; 0x21c
 800d274:	f019 fc1e 	bl	8026ab4 <sqrtf>
 800d278:	ed87 0a68 	vstr	s0, [r7, #416]	; 0x1a0
            // construct H matrix
            // X_state updates in each iteration
            float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];
 800d27c:	4bd0      	ldr	r3, [pc, #832]	; (800d5c0 <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800d284:	4bce      	ldr	r3, [pc, #824]	; (800d5c0 <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800d28c:	4bcc      	ldr	r3, [pc, #816]	; (800d5c0 <kalmanCoreRobustUpdateWithTdoa+0x5e4>)
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

            dx1 = x_iter - x1;  dy1 = y_iter - y1;   dz1 = z_iter - z1;
 800d294:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 800d298:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 800d29c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2a0:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 800d2a4:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800d2a8:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 800d2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2b0:	edc7 7a71 	vstr	s15, [r7, #452]	; 0x1c4
 800d2b4:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800d2b8:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800d2bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2c0:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
            dx0 = x_iter - x0;  dy0 = y_iter - y0;   dz0 = z_iter - z0;
 800d2c4:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 800d2c8:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800d2cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d0:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
 800d2d4:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800d2d8:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 800d2dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2e0:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 800d2e4:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 800d2e8:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800d2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f0:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4

            d1 = sqrtf(powf(dx1, 2) + powf(dy1, 2) + powf(dz1, 2));
 800d2f4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d2f8:	ed97 0a72 	vldr	s0, [r7, #456]	; 0x1c8
 800d2fc:	f019 fb82 	bl	8026a04 <powf>
 800d300:	eeb0 8a40 	vmov.f32	s16, s0
 800d304:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d308:	ed97 0a71 	vldr	s0, [r7, #452]	; 0x1c4
 800d30c:	f019 fb7a 	bl	8026a04 <powf>
 800d310:	eef0 7a40 	vmov.f32	s15, s0
 800d314:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d318:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d31c:	ed97 0a70 	vldr	s0, [r7, #448]	; 0x1c0
 800d320:	f019 fb70 	bl	8026a04 <powf>
 800d324:	eef0 7a40 	vmov.f32	s15, s0
 800d328:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d32c:	eeb0 0a67 	vmov.f32	s0, s15
 800d330:	f019 fbc0 	bl	8026ab4 <sqrtf>
 800d334:	ed87 0a6c 	vstr	s0, [r7, #432]	; 0x1b0
            d0 = sqrtf(powf(dx0, 2) + powf(dy0, 2) + powf(dz0, 2));
 800d338:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d33c:	ed97 0a6f 	vldr	s0, [r7, #444]	; 0x1bc
 800d340:	f019 fb60 	bl	8026a04 <powf>
 800d344:	eeb0 8a40 	vmov.f32	s16, s0
 800d348:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d34c:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 800d350:	f019 fb58 	bl	8026a04 <powf>
 800d354:	eef0 7a40 	vmov.f32	s15, s0
 800d358:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d35c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800d360:	ed97 0a6d 	vldr	s0, [r7, #436]	; 0x1b4
 800d364:	f019 fb4e 	bl	8026a04 <powf>
 800d368:	eef0 7a40 	vmov.f32	s15, s0
 800d36c:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d370:	eeb0 0a67 	vmov.f32	s0, s15
 800d374:	f019 fb9e 	bl	8026ab4 <sqrtf>
 800d378:	ed87 0a6b 	vstr	s0, [r7, #428]	; 0x1ac

            float predicted_iter = d1 - d0;                           // predicted measurements in each iteration based on X_state
 800d37c:	ed97 7a6c 	vldr	s14, [r7, #432]	; 0x1b0
 800d380:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800d384:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d388:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
            float error_iter = measurement - predicted_iter;          // innovation term based on iterated X_state
 800d38c:	ed97 7a7c 	vldr	s14, [r7, #496]	; 0x1f0
 800d390:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800d394:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d398:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
            float e_y = error_iter;
 800d39c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d3a0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            if ((d0 != 0.0f) && (d1 != 0.0f)){
 800d3a4:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 800d3a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b0:	f000 8250 	beq.w	800d854 <kalmanCoreRobustUpdateWithTdoa+0x878>
 800d3b4:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800d3b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c0:	f000 8248 	beq.w	800d854 <kalmanCoreRobustUpdateWithTdoa+0x878>
                // measurement Jacobian changes in each iteration w.r.t linearization point [x_iter, y_iter, z_iter]
                h[KC_STATE_X] = (dx1 / d1 - dx0 / d0);
 800d3c4:	edd7 6a72 	vldr	s13, [r7, #456]	; 0x1c8
 800d3c8:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800d3cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3d0:	ed97 6a6f 	vldr	s12, [r7, #444]	; 0x1bc
 800d3d4:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800d3d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d3dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3e0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d3e4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d3e8:	edc3 7a00 	vstr	s15, [r3]
                h[KC_STATE_Y] = (dy1 / d1 - dy0 / d0);
 800d3ec:	edd7 6a71 	vldr	s13, [r7, #452]	; 0x1c4
 800d3f0:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800d3f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f8:	ed97 6a6e 	vldr	s12, [r7, #440]	; 0x1b8
 800d3fc:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800d400:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d404:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d408:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d40c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d410:	edc3 7a01 	vstr	s15, [r3, #4]
                h[KC_STATE_Z] = (dz1 / d1 - dz0 / d0);
 800d414:	edd7 6a70 	vldr	s13, [r7, #448]	; 0x1c0
 800d418:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800d41c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d420:	ed97 6a6d 	vldr	s12, [r7, #436]	; 0x1b4
 800d424:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800d428:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d42c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d430:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d434:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d438:	edc3 7a02 	vstr	s15, [r3, #8]

                if (fabsf(R_chol - 0.0f) < 0.0001f){
 800d43c:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800d440:	eef0 7ae7 	vabs.f32	s15, s15
 800d444:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800d5d0 <kalmanCoreRobustUpdateWithTdoa+0x5f4>
 800d448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d450:	d508      	bpl.n	800d464 <kalmanCoreRobustUpdateWithTdoa+0x488>
                    e_y = error_iter / 0.0001f;
 800d452:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800d456:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d5d0 <kalmanCoreRobustUpdateWithTdoa+0x5f4>
 800d45a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d45e:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214
 800d462:	e007      	b.n	800d474 <kalmanCoreRobustUpdateWithTdoa+0x498>
                }
                else{
                    e_y = error_iter / R_chol;
 800d464:	edd7 6a63 	vldr	s13, [r7, #396]	; 0x18c
 800d468:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 800d46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d470:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214
                }
                // Make sure P_chol, lower trangular matrix, is numerically stable
                for (int col=0; col<KC_STATE_DIM; col++) {
 800d474:	2300      	movs	r3, #0
 800d476:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800d47a:	e095      	b.n	800d5a8 <kalmanCoreRobustUpdateWithTdoa+0x5cc>
                    for (int row=col; row<KC_STATE_DIM; row++) {
 800d47c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d480:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800d484:	e086      	b.n	800d594 <kalmanCoreRobustUpdateWithTdoa+0x5b8>
                        if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 800d486:	494f      	ldr	r1, [pc, #316]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d488:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d48c:	4613      	mov	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	4413      	add	r3, r2
 800d492:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	440b      	add	r3, r1
 800d49c:	edd3 7a00 	vldr	s15, [r3]
 800d4a0:	eef4 7a67 	vcmp.f32	s15, s15
 800d4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a8:	d613      	bvs.n	800d4d2 <kalmanCoreRobustUpdateWithTdoa+0x4f6>
 800d4aa:	4946      	ldr	r1, [pc, #280]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d4ac:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	440b      	add	r3, r1
 800d4c0:	edd3 7a00 	vldr	s15, [r3]
 800d4c4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800d5d4 <kalmanCoreRobustUpdateWithTdoa+0x5f8>
 800d4c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	dd0d      	ble.n	800d4ee <kalmanCoreRobustUpdateWithTdoa+0x512>
                            P_chol[row][col] = UPPER_BOUND;
 800d4d2:	493c      	ldr	r1, [pc, #240]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d4d4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d4d8:	4613      	mov	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	4413      	add	r3, r2
 800d4de:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d4e2:	4413      	add	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	440b      	add	r3, r1
 800d4e8:	4a3b      	ldr	r2, [pc, #236]	; (800d5d8 <kalmanCoreRobustUpdateWithTdoa+0x5fc>)
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	e04d      	b.n	800d58a <kalmanCoreRobustUpdateWithTdoa+0x5ae>
                        } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 800d4ee:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d4f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d021      	beq.n	800d53e <kalmanCoreRobustUpdateWithTdoa+0x562>
 800d4fa:	4932      	ldr	r1, [pc, #200]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d4fc:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d500:	4613      	mov	r3, r2
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	4413      	add	r3, r2
 800d506:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d50a:	4413      	add	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	440b      	add	r3, r1
 800d510:	edd3 7a00 	vldr	s15, [r3]
 800d514:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d5dc <kalmanCoreRobustUpdateWithTdoa+0x600>
 800d518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d520:	d50d      	bpl.n	800d53e <kalmanCoreRobustUpdateWithTdoa+0x562>
                            P_chol[row][col] = LOWER_BOUND;
 800d522:	4928      	ldr	r1, [pc, #160]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d524:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d528:	4613      	mov	r3, r2
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	4413      	add	r3, r2
 800d52e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d532:	4413      	add	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	440b      	add	r3, r1
 800d538:	4a29      	ldr	r2, [pc, #164]	; (800d5e0 <kalmanCoreRobustUpdateWithTdoa+0x604>)
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	e025      	b.n	800d58a <kalmanCoreRobustUpdateWithTdoa+0x5ae>
                        } else if(row==col && P_chol[row][col]<0.0f){
 800d53e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d542:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d546:	429a      	cmp	r2, r3
 800d548:	d11f      	bne.n	800d58a <kalmanCoreRobustUpdateWithTdoa+0x5ae>
 800d54a:	491e      	ldr	r1, [pc, #120]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d54c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d550:	4613      	mov	r3, r2
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	4413      	add	r3, r2
 800d556:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d55a:	4413      	add	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	440b      	add	r3, r1
 800d560:	edd3 7a00 	vldr	s15, [r3]
 800d564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56c:	d50d      	bpl.n	800d58a <kalmanCoreRobustUpdateWithTdoa+0x5ae>
                            P_chol[row][col] = 0.0f;
 800d56e:	4915      	ldr	r1, [pc, #84]	; (800d5c4 <kalmanCoreRobustUpdateWithTdoa+0x5e8>)
 800d570:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d574:	4613      	mov	r3, r2
 800d576:	00db      	lsls	r3, r3, #3
 800d578:	4413      	add	r3, r2
 800d57a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800d57e:	4413      	add	r3, r2
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	440b      	add	r3, r1
 800d584:	f04f 0200 	mov.w	r2, #0
 800d588:	601a      	str	r2, [r3, #0]
                    for (int row=col; row<KC_STATE_DIM; row++) {
 800d58a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d58e:	3301      	adds	r3, #1
 800d590:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800d594:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d598:	2b08      	cmp	r3, #8
 800d59a:	f77f af74 	ble.w	800d486 <kalmanCoreRobustUpdateWithTdoa+0x4aa>
                for (int col=0; col<KC_STATE_DIM; col++) {
 800d59e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800d5a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d5ac:	2b08      	cmp	r3, #8
 800d5ae:	f77f af65 	ble.w	800d47c <kalmanCoreRobustUpdateWithTdoa+0x4a0>
                        }
                    }
                }
                // Matrix inversion is numerically sensitive.
                // Add small values on the diagonal of P_chol to avoid numerical problems.
                float dummy_value = 1e-9f;
 800d5b2:	4b0c      	ldr	r3, [pc, #48]	; (800d5e4 <kalmanCoreRobustUpdateWithTdoa+0x608>)
 800d5b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                for (int k=0; k<KC_STATE_DIM; k++){
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800d5be:	e030      	b.n	800d622 <kalmanCoreRobustUpdateWithTdoa+0x646>
 800d5c0:	2000a1c4 	.word	0x2000a1c4
 800d5c4:	2000a1e8 	.word	0x2000a1e8
 800d5c8:	20000988 	.word	0x20000988
 800d5cc:	20000980 	.word	0x20000980
 800d5d0:	38d1b717 	.word	0x38d1b717
 800d5d4:	42c80000 	.word	0x42c80000
 800d5d8:	42c80000 	.word	0x42c80000
 800d5dc:	c2c80000 	.word	0xc2c80000
 800d5e0:	c2c80000 	.word	0xc2c80000
 800d5e4:	3089705f 	.word	0x3089705f
                    P_chol[k][k] = P_chol[k][k] + dummy_value;
 800d5e8:	49a9      	ldr	r1, [pc, #676]	; (800d890 <kalmanCoreRobustUpdateWithTdoa+0x8b4>)
 800d5ea:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	00db      	lsls	r3, r3, #3
 800d5f6:	440b      	add	r3, r1
 800d5f8:	ed93 7a00 	vldr	s14, [r3]
 800d5fc:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800d600:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d604:	49a2      	ldr	r1, [pc, #648]	; (800d890 <kalmanCoreRobustUpdateWithTdoa+0x8b4>)
 800d606:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	00db      	lsls	r3, r3, #3
 800d612:	440b      	add	r3, r1
 800d614:	edc3 7a00 	vstr	s15, [r3]
                for (int k=0; k<KC_STATE_DIM; k++){
 800d618:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800d61c:	3301      	adds	r3, #1
 800d61e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800d622:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800d626:	2b08      	cmp	r3, #8
 800d628:	ddde      	ble.n	800d5e8 <kalmanCoreRobustUpdateWithTdoa+0x60c>
                }
                // keep P_chol
                memcpy(tmp1, P_chol, sizeof(tmp1));
 800d62a:	4a9a      	ldr	r2, [pc, #616]	; (800d894 <kalmanCoreRobustUpdateWithTdoa+0x8b8>)
 800d62c:	4b98      	ldr	r3, [pc, #608]	; (800d890 <kalmanCoreRobustUpdateWithTdoa+0x8b4>)
 800d62e:	4610      	mov	r0, r2
 800d630:	4619      	mov	r1, r3
 800d632:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800d636:	461a      	mov	r2, r3
 800d638:	f017 fb9d 	bl	8024d76 <memcpy>
                mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 800d63c:	4996      	ldr	r1, [pc, #600]	; (800d898 <kalmanCoreRobustUpdateWithTdoa+0x8bc>)
 800d63e:	4897      	ldr	r0, [pc, #604]	; (800d89c <kalmanCoreRobustUpdateWithTdoa+0x8c0>)
 800d640:	f7ff fb50 	bl	800cce4 <mat_inv>
                mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm)
 800d644:	4a96      	ldr	r2, [pc, #600]	; (800d8a0 <kalmanCoreRobustUpdateWithTdoa+0x8c4>)
 800d646:	4997      	ldr	r1, [pc, #604]	; (800d8a4 <kalmanCoreRobustUpdateWithTdoa+0x8c8>)
 800d648:	4893      	ldr	r0, [pc, #588]	; (800d898 <kalmanCoreRobustUpdateWithTdoa+0x8bc>)
 800d64a:	f7ff fb6d 	bl	800cd28 <mat_mult>
                // compute w_x, w_y --> weighting matrix
                // Since w_x is diagnal matrix, compute the inverse directly
                for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800d64e:	2300      	movs	r3, #0
 800d650:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800d654:	e030      	b.n	800d6b8 <kalmanCoreRobustUpdateWithTdoa+0x6dc>
                    GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 800d656:	4a94      	ldr	r2, [pc, #592]	; (800d8a8 <kalmanCoreRobustUpdateWithTdoa+0x8cc>)
 800d658:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	4413      	add	r3, r2
 800d660:	edd3 7a00 	vldr	s15, [r3]
 800d664:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800d668:	4613      	mov	r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	4413      	add	r3, r2
 800d66e:	00db      	lsls	r3, r3, #3
 800d670:	4a8e      	ldr	r2, [pc, #568]	; (800d8ac <kalmanCoreRobustUpdateWithTdoa+0x8d0>)
 800d672:	4413      	add	r3, r2
 800d674:	4618      	mov	r0, r3
 800d676:	eeb0 0a67 	vmov.f32	s0, s15
 800d67a:	f7ff fc88 	bl	800cf8e <GM_state>
                    wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 800d67e:	498b      	ldr	r1, [pc, #556]	; (800d8ac <kalmanCoreRobustUpdateWithTdoa+0x8d0>)
 800d680:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800d684:	4613      	mov	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4413      	add	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	ed93 7a00 	vldr	s14, [r3]
 800d692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d69a:	4984      	ldr	r1, [pc, #528]	; (800d8ac <kalmanCoreRobustUpdateWithTdoa+0x8d0>)
 800d69c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	00db      	lsls	r3, r3, #3
 800d6a8:	440b      	add	r3, r1
 800d6aa:	edc3 7a00 	vstr	s15, [r3]
                for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800d6ae:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800d6b8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800d6bc:	2b08      	cmp	r3, #8
 800d6be:	ddca      	ble.n	800d656 <kalmanCoreRobustUpdateWithTdoa+0x67a>
                }
                // rescale covariance matrix P
                mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);                // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 800d6c0:	4a7b      	ldr	r2, [pc, #492]	; (800d8b0 <kalmanCoreRobustUpdateWithTdoa+0x8d4>)
 800d6c2:	497c      	ldr	r1, [pc, #496]	; (800d8b4 <kalmanCoreRobustUpdateWithTdoa+0x8d8>)
 800d6c4:	487c      	ldr	r0, [pc, #496]	; (800d8b8 <kalmanCoreRobustUpdateWithTdoa+0x8dc>)
 800d6c6:	f7ff fb2f 	bl	800cd28 <mat_mult>
                mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);             // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 800d6ca:	4a7c      	ldr	r2, [pc, #496]	; (800d8bc <kalmanCoreRobustUpdateWithTdoa+0x8e0>)
 800d6cc:	497c      	ldr	r1, [pc, #496]	; (800d8c0 <kalmanCoreRobustUpdateWithTdoa+0x8e4>)
 800d6ce:	4878      	ldr	r0, [pc, #480]	; (800d8b0 <kalmanCoreRobustUpdateWithTdoa+0x8d4>)
 800d6d0:	f7ff fb2a 	bl	800cd28 <mat_mult>
                // rescale R matrix
                float w_y=0.0;      float R_w = 0.0f;
 800d6d4:	f04f 0300 	mov.w	r3, #0
 800d6d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
                GM_UWB(e_y, &w_y);                                    // compute the weighted measurement error: w_y
 800d6e4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	ed97 0a85 	vldr	s0, [r7, #532]	; 0x214
 800d6ee:	f7ff fc28 	bl	800cf42 <GM_UWB>
                if (fabsf(w_y - 0.0f) < 0.0001f){
 800d6f2:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 800d6f6:	eef0 7ae7 	vabs.f32	s15, s15
 800d6fa:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800d8c4 <kalmanCoreRobustUpdateWithTdoa+0x8e8>
 800d6fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d706:	d50a      	bpl.n	800d71e <kalmanCoreRobustUpdateWithTdoa+0x742>
                    R_w = (R_chol * R_chol) / 0.0001f;
 800d708:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800d70c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d710:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800d8c4 <kalmanCoreRobustUpdateWithTdoa+0x8e8>
 800d714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d718:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
 800d71c:	e009      	b.n	800d732 <kalmanCoreRobustUpdateWithTdoa+0x756>
                }else{
                    R_w = (R_chol * R_chol) / w_y;
 800d71e:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800d722:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d726:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 800d72a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d72e:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
                }
                // ====== INNOVATION COVARIANCE ====== //
                mat_trans(&H, &HTm);
 800d732:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800d736:	4964      	ldr	r1, [pc, #400]	; (800d8c8 <kalmanCoreRobustUpdateWithTdoa+0x8ec>)
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fab1 	bl	800cca0 <mat_trans>
                mat_mult(&P_w_m, &HTm, &PHTm);                        // PHTm = P_w.dot(H.T). The P is the updated P_w
 800d73e:	4a63      	ldr	r2, [pc, #396]	; (800d8cc <kalmanCoreRobustUpdateWithTdoa+0x8f0>)
 800d740:	4961      	ldr	r1, [pc, #388]	; (800d8c8 <kalmanCoreRobustUpdateWithTdoa+0x8ec>)
 800d742:	485e      	ldr	r0, [pc, #376]	; (800d8bc <kalmanCoreRobustUpdateWithTdoa+0x8e0>)
 800d744:	f7ff faf0 	bl	800cd28 <mat_mult>

                float HPHR = R_w;                                     // HPH' + R.            The R is the updated R_w
 800d748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d74c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
                for (int i=0; i<KC_STATE_DIM; i++) {                  // Add the element of HPH' to the above
 800d750:	2300      	movs	r3, #0
 800d752:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d756:	e01d      	b.n	800d794 <kalmanCoreRobustUpdateWithTdoa+0x7b8>
                    HPHR += h[i]*PHTd[i];                             // this only works if the update is scalar (as in this function)
 800d758:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d75c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800d760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	4413      	add	r3, r2
 800d768:	ed93 7a00 	vldr	s14, [r3]
 800d76c:	4a58      	ldr	r2, [pc, #352]	; (800d8d0 <kalmanCoreRobustUpdateWithTdoa+0x8f4>)
 800d76e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	4413      	add	r3, r2
 800d776:	edd3 7a00 	vldr	s15, [r3]
 800d77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d77e:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 800d782:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d786:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
                for (int i=0; i<KC_STATE_DIM; i++) {                  // Add the element of HPH' to the above
 800d78a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d78e:	3301      	adds	r3, #1
 800d790:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d798:	2b08      	cmp	r3, #8
 800d79a:	dddd      	ble.n	800d758 <kalmanCoreRobustUpdateWithTdoa+0x77c>
                }
                // ====== MEASUREMENT UPDATE ======
                // Calculate the Kalman gain and perform the state update
                for (int i=0; i<KC_STATE_DIM; i++) {
 800d79c:	2300      	movs	r3, #0
 800d79e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800d7a2:	e043      	b.n	800d82c <kalmanCoreRobustUpdateWithTdoa+0x850>
                    Kw[i] = PHTd[i]/HPHR;                             // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 800d7a4:	4a4a      	ldr	r2, [pc, #296]	; (800d8d0 <kalmanCoreRobustUpdateWithTdoa+0x8f4>)
 800d7a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4413      	add	r3, r2
 800d7ae:	edd3 6a00 	vldr	s13, [r3]
 800d7b2:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 800d7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ba:	4a46      	ldr	r2, [pc, #280]	; (800d8d4 <kalmanCoreRobustUpdateWithTdoa+0x8f8>)
 800d7bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	4413      	add	r3, r2
 800d7c4:	edc3 7a00 	vstr	s15, [r3]
                    //[Note]: The error_check here is the innovation term based on prior state, which doesn't change during iterations.
                    x_err[i] = Kw[i] * error_check;                   // error state for next iteration
 800d7c8:	4a42      	ldr	r2, [pc, #264]	; (800d8d4 <kalmanCoreRobustUpdateWithTdoa+0x8f8>)
 800d7ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	ed93 7a00 	vldr	s14, [r3]
 800d7d6:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 800d7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7de:	4a3e      	ldr	r2, [pc, #248]	; (800d8d8 <kalmanCoreRobustUpdateWithTdoa+0x8fc>)
 800d7e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	4413      	add	r3, r2
 800d7e8:	edc3 7a00 	vstr	s15, [r3]
                    X_state[i] = this->S[i] + x_err[i];               // convert to nominal state
 800d7ec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d7f0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	ed93 7a00 	vldr	s14, [r3]
 800d802:	4a35      	ldr	r2, [pc, #212]	; (800d8d8 <kalmanCoreRobustUpdateWithTdoa+0x8fc>)
 800d804:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4413      	add	r3, r2
 800d80c:	edd3 7a00 	vldr	s15, [r3]
 800d810:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d814:	4a31      	ldr	r2, [pc, #196]	; (800d8dc <kalmanCoreRobustUpdateWithTdoa+0x900>)
 800d816:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4413      	add	r3, r2
 800d81e:	edc3 7a00 	vstr	s15, [r3]
                for (int i=0; i<KC_STATE_DIM; i++) {
 800d822:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d826:	3301      	adds	r3, #1
 800d828:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800d82c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d830:	2b08      	cmp	r3, #8
 800d832:	ddb7      	ble.n	800d7a4 <kalmanCoreRobustUpdateWithTdoa+0x7c8>
                }
                // update P_iter matrix and R matrix for next iteration
                memcpy(P_iter, P_w, sizeof(P_iter));
 800d834:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d838:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d83c:	4a28      	ldr	r2, [pc, #160]	; (800d8e0 <kalmanCoreRobustUpdateWithTdoa+0x904>)
 800d83e:	4618      	mov	r0, r3
 800d840:	4611      	mov	r1, r2
 800d842:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800d846:	461a      	mov	r2, r3
 800d848:	f017 fa95 	bl	8024d76 <memcpy>
                R_iter = R_w;
 800d84c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d850:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        for (int iter = 0; iter < MAX_ITER; iter++){
 800d854:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800d858:	3301      	adds	r3, #1
 800d85a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800d85e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800d862:	2b01      	cmp	r3, #1
 800d864:	f77f acf9 	ble.w	800d25a <kalmanCoreRobustUpdateWithTdoa+0x27e>
            }
        }
        // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
        // Call the kalman update function with weighted P, weighted K, h, and error_check
        kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 800d868:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800d86c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d870:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 800d874:	ed97 0a69 	vldr	s0, [r7, #420]	; 0x1a4
 800d878:	4b10      	ldr	r3, [pc, #64]	; (800d8bc <kalmanCoreRobustUpdateWithTdoa+0x8e0>)
 800d87a:	4a1a      	ldr	r2, [pc, #104]	; (800d8e4 <kalmanCoreRobustUpdateWithTdoa+0x908>)
 800d87c:	6800      	ldr	r0, [r0, #0]
 800d87e:	f7fb f855 	bl	800892c <kalmanCoreUpdateWithPKE>

    }
}
 800d882:	bf00      	nop
 800d884:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800d888:	46bd      	mov	sp, r7
 800d88a:	ecbd 8b02 	vpop	{d8}
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	2000a1e8 	.word	0x2000a1e8
 800d894:	2000a32c 	.word	0x2000a32c
 800d898:	20000998 	.word	0x20000998
 800d89c:	20000990 	.word	0x20000990
 800d8a0:	200009a8 	.word	0x200009a8
 800d8a4:	200009a0 	.word	0x200009a0
 800d8a8:	2000a470 	.word	0x2000a470
 800d8ac:	2000a494 	.word	0x2000a494
 800d8b0:	200009b8 	.word	0x200009b8
 800d8b4:	200009b0 	.word	0x200009b0
 800d8b8:	20000980 	.word	0x20000980
 800d8bc:	200009c0 	.word	0x200009c0
 800d8c0:	20000988 	.word	0x20000988
 800d8c4:	38d1b717 	.word	0x38d1b717
 800d8c8:	200009c8 	.word	0x200009c8
 800d8cc:	200009d0 	.word	0x200009d0
 800d8d0:	2000a5d8 	.word	0x2000a5d8
 800d8d4:	2000a5fc 	.word	0x2000a5fc
 800d8d8:	2000a620 	.word	0x2000a620
 800d8dc:	2000a1c4 	.word	0x2000a1c4
 800d8e0:	2000a644 	.word	0x2000a644
 800d8e4:	200009d8 	.word	0x200009d8

0800d8e8 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	ed2d 8b02 	vpush	{d8}
 800d8ee:	b090      	sub	sp, #64	; 0x40
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 800d8f6:	f107 0310 	add.w	r3, r7, #16
 800d8fa:	2224      	movs	r2, #36	; 0x24
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	4618      	mov	r0, r3
 800d900:	f017 f8be 	bl	8024a80 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800d904:	2301      	movs	r3, #1
 800d906:	813b      	strh	r3, [r7, #8]
 800d908:	2309      	movs	r3, #9
 800d90a:	817b      	strh	r3, [r7, #10]
 800d90c:	f107 0310 	add.w	r3, r7, #16
 800d910:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d918:	eef0 7ae7 	vabs.f32	s15, s15
 800d91c:	ee17 0a90 	vmov	r0, s15
 800d920:	f7f2 fe22 	bl	8000568 <__aeabi_f2d>
 800d924:	a331      	add	r3, pc, #196	; (adr r3, 800d9ec <kalmanCoreUpdateWithTof+0x104>)
 800d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92a:	f7f3 f905 	bl	8000b38 <__aeabi_dcmpgt>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d100      	bne.n	800d936 <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 800d934:	e050      	b.n	800d9d8 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d93c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d944:	dc00      	bgt.n	800d948 <kalmanCoreUpdateWithTof+0x60>
}
 800d946:	e047      	b.n	800d9d8 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d94e:	eeb0 0a67 	vmov.f32	s0, s15
 800d952:	f018 ffdd 	bl	8026910 <acosf>
 800d956:	eef0 7a40 	vmov.f32	s15, s0
 800d95a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800d9e8 <kalmanCoreUpdateWithTof+0x100>
 800d95e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d962:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    if (angle < 0.0f) {
 800d966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d96a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d972:	d502      	bpl.n	800d97a <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 800d974:	f04f 0300 	mov.w	r3, #0
 800d978:	63fb      	str	r3, [r7, #60]	; 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	ed93 8a02 	vldr	s16, [r3, #8]
 800d980:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800d984:	f019 f8b4 	bl	8026af0 <cosf>
 800d988:	eeb0 7a40 	vmov.f32	s14, s0
 800d98c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d990:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float measuredDistance = tof->distance; // [m]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	637b      	str	r3, [r7, #52]	; 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 800d99a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800d99e:	f019 f8a7 	bl	8026af0 <cosf>
 800d9a2:	eeb0 7a40 	vmov.f32	s14, s0
 800d9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9ae:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 800d9b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d9ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	ed93 7a02 	vldr	s14, [r3, #8]
 800d9c4:	f107 0308 	add.w	r3, r7, #8
 800d9c8:	eef0 0a47 	vmov.f32	s1, s14
 800d9cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7fa fdd8 	bl	8008588 <kalmanCoreScalarUpdate>
}
 800d9d8:	bf00      	nop
 800d9da:	3740      	adds	r7, #64	; 0x40
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	ecbd 8b02 	vpop	{d8}
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	f3af 8000 	nop.w
 800d9e8:	3e060a92 	.word	0x3e060a92
 800d9ec:	9999999a 	.word	0x9999999a
 800d9f0:	3fb99999 	.word	0x3fb99999

0800d9f4 <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08e      	sub	sp, #56	; 0x38
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 800d9fe:	f107 0314 	add.w	r3, r7, #20
 800da02:	2224      	movs	r2, #36	; 0x24
 800da04:	2100      	movs	r1, #0
 800da06:	4618      	mov	r0, r3
 800da08:	f017 f83a 	bl	8024a80 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800da0c:	2301      	movs	r3, #1
 800da0e:	81bb      	strh	r3, [r7, #12]
 800da10:	2309      	movs	r3, #9
 800da12:	81fb      	strh	r3, [r7, #14]
 800da14:	f107 0314 	add.w	r3, r7, #20
 800da18:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 800da1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800da1e:	637b      	str	r3, [r7, #52]	; 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	ed93 7a08 	vldr	s14, [r3, #32]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	edd3 7a01 	vldr	s15, [r3, #4]
 800da2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	ed93 7a02 	vldr	s14, [r3, #8]
 800da36:	f107 030c 	add.w	r3, r7, #12
 800da3a:	eef0 0a47 	vmov.f32	s1, s14
 800da3e:	eeb0 0a67 	vmov.f32	s0, s15
 800da42:	4619      	mov	r1, r3
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7fa fd9f 	bl	8008588 <kalmanCoreScalarUpdate>
}
 800da4a:	bf00      	nop
 800da4c:	3738      	adds	r7, #56	; 0x38
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <outlierFilterLighthouseReset>:
static const int32_t lhMaxWindowTimeMs = 5 * LH_MS_PER_FRAME;
static const int32_t lhBadSampleWindowChangeMs = -LH_MS_PER_FRAME;
static const int32_t lhGoodSampleWindowChangeMs = LH_MS_PER_FRAME / 2;
static const float lhMaxError = 0.05f;

void outlierFilterLighthouseReset(OutlierFilterLhState_t* this, const uint32_t nowMs) {
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]
  this->openingTimeMs = nowMs;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	601a      	str	r2, [r3, #0]
  this->openingWindowMs = lhMinWindowTimeMs;
 800da62:	f06f 020f 	mvn.w	r2, #15
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	605a      	str	r2, [r3, #4]
}
 800da6a:	bf00      	nop
 800da6c:	370c      	adds	r7, #12
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
	...

0800da78 <outlierFilterLighthouseValidateSweep>:


bool outlierFilterLighthouseValidateSweep(OutlierFilterLhState_t* this, const float distanceToBs, const float angleError, const uint32_t nowMs) {
 800da78:	b480      	push	{r7}
 800da7a:	b089      	sub	sp, #36	; 0x24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	ed87 0a02 	vstr	s0, [r7, #8]
 800da84:	edc7 0a01 	vstr	s1, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  // float error = distanceToBs * tan(angleError);
  // We use an approximattion
  float error = distanceToBs * angleError;
 800da8a:	ed97 7a02 	vldr	s14, [r7, #8]
 800da8e:	edd7 7a01 	vldr	s15, [r7, #4]
 800da92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da96:	edc7 7a06 	vstr	s15, [r7, #24]

  bool isGoodSample = (fabsf(error) < lhMaxError);
 800da9a:	edd7 7a06 	vldr	s15, [r7, #24]
 800da9e:	eef0 7ae7 	vabs.f32	s15, s15
 800daa2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800db38 <outlierFilterLighthouseValidateSweep+0xc0>
 800daa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800daaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daae:	bf4c      	ite	mi
 800dab0:	2301      	movmi	r3, #1
 800dab2:	2300      	movpl	r3, #0
 800dab4:	75fb      	strb	r3, [r7, #23]
  if (isGoodSample) {
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00e      	beq.n	800dada <outlierFilterLighthouseValidateSweep+0x62>
    this->openingWindowMs += lhGoodSampleWindowChangeMs;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	2204      	movs	r2, #4
 800dac2:	441a      	add	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	605a      	str	r2, [r3, #4]
    if (this->openingWindowMs > lhMaxWindowTimeMs) {
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	2228      	movs	r2, #40	; 0x28
 800dace:	4293      	cmp	r3, r2
 800dad0:	dd14      	ble.n	800dafc <outlierFilterLighthouseValidateSweep+0x84>
      this->openingWindowMs = lhMaxWindowTimeMs;
 800dad2:	2228      	movs	r2, #40	; 0x28
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	605a      	str	r2, [r3, #4]
 800dad8:	e010      	b.n	800dafc <outlierFilterLighthouseValidateSweep+0x84>
    }
  } else {
    this->openingWindowMs += lhBadSampleWindowChangeMs;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	f06f 0207 	mvn.w	r2, #7
 800dae2:	441a      	add	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	605a      	str	r2, [r3, #4]
    if (this->openingWindowMs < lhMinWindowTimeMs) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f06f 020f 	mvn.w	r2, #15
 800daf0:	4293      	cmp	r3, r2
 800daf2:	da03      	bge.n	800dafc <outlierFilterLighthouseValidateSweep+0x84>
      this->openingWindowMs = lhMinWindowTimeMs;
 800daf4:	f06f 020f 	mvn.w	r2, #15
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	605a      	str	r2, [r3, #4]
    }
  }

  bool result = true;
 800dafc:	2301      	movs	r3, #1
 800dafe:	77fb      	strb	r3, [r7, #31]
  bool isFilterClosed = (nowMs < this->openingTimeMs);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	429a      	cmp	r2, r3
 800db08:	bf34      	ite	cc
 800db0a:	2301      	movcc	r3, #1
 800db0c:	2300      	movcs	r3, #0
 800db0e:	75bb      	strb	r3, [r7, #22]
  if (isFilterClosed) {
 800db10:	7dbb      	ldrb	r3, [r7, #22]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <outlierFilterLighthouseValidateSweep+0xa2>
    result = isGoodSample;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	77fb      	strb	r3, [r7, #31]
  }

  this->openingTimeMs = nowMs + this->openingWindowMs;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	461a      	mov	r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	441a      	add	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	601a      	str	r2, [r3, #0]

  return result;
 800db28:	7ffb      	ldrb	r3, [r7, #31]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3724      	adds	r7, #36	; 0x24
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	3d4ccccd 	.word	0x3d4ccccd

0800db3c <outlierFilterTdoaReset>:

// The level when the filter closes again
static const float INTEGRATOR_RESUME_ACTION_LEVEL = INTEGRATOR_SIZE * 0.9f;


void outlierFilterTdoaReset(OutlierFilterTdoaState_t* this) {
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  this->integrator = 0.0f;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f04f 0200 	mov.w	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]
  this->isFilterOpen = true;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	721a      	strb	r2, [r3, #8]
  this->latestUpdateMs = 0;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	605a      	str	r2, [r3, #4]
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <outlierFilterTdoaValidateIntegrator>:

bool outlierFilterTdoaValidateIntegrator(OutlierFilterTdoaState_t* this, const tdoaMeasurement_t* tdoa, const float error, const uint32_t nowMs) {
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	ed87 0a01 	vstr	s0, [r7, #4]
 800db72:	603a      	str	r2, [r7, #0]
  // The accepted error when the filter is closed
  const float acceptedDistance = tdoa->stdDev * 2.5f;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800db7a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800db7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db82:	edc7 7a06 	vstr	s15, [r7, #24]

  // The level used to determine if a sample is added or removed from the integrator
  const float integratorTriggerDistance = tdoa->stdDev * 2.0f;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800db8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800db90:	edc7 7a05 	vstr	s15, [r7, #20]


  bool sampleIsGood = false;
 800db94:	2300      	movs	r3, #0
 800db96:	77fb      	strb	r3, [r7, #31]

  // Discard samples that are physically impossible, most likely measurement error
  if (isDistanceDiffSmallerThanDistanceBetweenAnchors(tdoa)) {
 800db98:	68b8      	ldr	r0, [r7, #8]
 800db9a:	f000 f8ef 	bl	800dd7c <isDistanceDiffSmallerThanDistanceBetweenAnchors>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f000 8093 	beq.w	800dccc <outlierFilterTdoaValidateIntegrator+0x168>
    uint32_t dtMs = nowMs - this->latestUpdateMs;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	613b      	str	r3, [r7, #16]
    // Limit dt to minimize the impact on the integrator if we have not received samples for a long time (or at start up)
    dtMs = fminf(dtMs, INTEGRATOR_SIZE / 10.0f);
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	ee07 3a90 	vmov	s15, r3
 800dbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbba:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800dcd8 <outlierFilterTdoaValidateIntegrator+0x174>
 800dbbe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800dbc2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dbc6:	eef0 0a47 	vmov.f32	s1, s14
 800dbca:	eeb0 0a67 	vmov.f32	s0, s15
 800dbce:	f019 f87c 	bl	8026cca <fminf>
 800dbd2:	eef0 7a40 	vmov.f32	s15, s0
 800dbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbda:	ee17 3a90 	vmov	r3, s15
 800dbde:	613b      	str	r3, [r7, #16]

    if (fabsf(error) < integratorTriggerDistance) {
 800dbe0:	edd7 7a01 	vldr	s15, [r7, #4]
 800dbe4:	eef0 7ae7 	vabs.f32	s15, s15
 800dbe8:	ed97 7a05 	vldr	s14, [r7, #20]
 800dbec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf4:	dd1d      	ble.n	800dc32 <outlierFilterTdoaValidateIntegrator+0xce>
      this->integrator += dtMs;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	ed93 7a00 	vldr	s14, [r3]
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	ee07 3a90 	vmov	s15, r3
 800dc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	edc3 7a00 	vstr	s15, [r3]
      this->integrator = fminf(this->integrator, INTEGRATOR_SIZE);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	edd3 7a00 	vldr	s15, [r3]
 800dc16:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dcd8 <outlierFilterTdoaValidateIntegrator+0x174>
 800dc1a:	eef0 0a47 	vmov.f32	s1, s14
 800dc1e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc22:	f019 f852 	bl	8026cca <fminf>
 800dc26:	eef0 7a40 	vmov.f32	s15, s0
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	edc3 7a00 	vstr	s15, [r3]
 800dc30:	e01a      	b.n	800dc68 <outlierFilterTdoaValidateIntegrator+0x104>
    } else {
      this->integrator -= dtMs;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	ed93 7a00 	vldr	s14, [r3]
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	ee07 3a90 	vmov	s15, r3
 800dc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	edc3 7a00 	vstr	s15, [r3]
      this->integrator = fmaxf(this->integrator, 0.0f);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	edd3 7a00 	vldr	s15, [r3]
 800dc52:	eddf 0a22 	vldr	s1, [pc, #136]	; 800dcdc <outlierFilterTdoaValidateIntegrator+0x178>
 800dc56:	eeb0 0a67 	vmov.f32	s0, s15
 800dc5a:	f019 f81b 	bl	8026c94 <fmaxf>
 800dc5e:	eef0 7a40 	vmov.f32	s15, s0
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	edc3 7a00 	vstr	s15, [r3]
    }

    if (this->isFilterOpen) {
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	7a1b      	ldrb	r3, [r3, #8]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00f      	beq.n	800dc90 <outlierFilterTdoaValidateIntegrator+0x12c>
      // The filter is open, let all samples through
      sampleIsGood = true;
 800dc70:	2301      	movs	r3, #1
 800dc72:	77fb      	strb	r3, [r7, #31]

      if (this->integrator > INTEGRATOR_RESUME_ACTION_LEVEL) {
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	edd3 7a00 	vldr	s15, [r3]
 800dc7a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800dce0 <outlierFilterTdoaValidateIntegrator+0x17c>
 800dc7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc86:	dd1e      	ble.n	800dcc6 <outlierFilterTdoaValidateIntegrator+0x162>
        // We have recovered and converged, close the filter again
        this->isFilterOpen = false;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	721a      	strb	r2, [r3, #8]
 800dc8e:	e01a      	b.n	800dcc6 <outlierFilterTdoaValidateIntegrator+0x162>
      }
    } else {
      // The filter is closed, let samples with a small error through
      sampleIsGood = (fabsf(error) < acceptedDistance);
 800dc90:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc94:	eef0 7ae7 	vabs.f32	s15, s15
 800dc98:	ed97 7a06 	vldr	s14, [r7, #24]
 800dc9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca4:	bfcc      	ite	gt
 800dca6:	2301      	movgt	r3, #1
 800dca8:	2300      	movle	r3, #0
 800dcaa:	77fb      	strb	r3, [r7, #31]

      if (this->integrator < INTEGRATOR_FORCE_OPEN_LEVEL) {
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	edd3 7a00 	vldr	s15, [r3]
 800dcb2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800dcb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcbe:	d502      	bpl.n	800dcc6 <outlierFilterTdoaValidateIntegrator+0x162>
        // We have got lots of outliers lately, the kalman filter may have diverged. Open up to try to recover
        this->isFilterOpen = true;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	721a      	strb	r2, [r3, #8]
      }
    }

    this->latestUpdateMs = nowMs;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	605a      	str	r2, [r3, #4]
  }

  return sampleIsGood;
 800dccc:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3720      	adds	r7, #32
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	43960000 	.word	0x43960000
 800dcdc:	00000000 	.word	0x00000000
 800dce0:	43870000 	.word	0x43870000

0800dce4 <sq>:

static float sq(float a) {return a * a;}
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	ed87 0a01 	vstr	s0, [r7, #4]
 800dcee:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dcf6:	eeb0 0a67 	vmov.f32	s0, s15
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <distanceSq>:

static float distanceSq(const point_t* a, const point_t* b) {
 800dd04:	b580      	push	{r7, lr}
 800dd06:	ed2d 8b02 	vpush	{d8}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  return sq(a->x - b->x) + sq(a->y - b->y) + sq(a->z - b->z);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	ed93 7a01 	vldr	s14, [r3, #4]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd22:	eeb0 0a67 	vmov.f32	s0, s15
 800dd26:	f7ff ffdd 	bl	800dce4 <sq>
 800dd2a:	eeb0 8a40 	vmov.f32	s16, s0
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	ed93 7a02 	vldr	s14, [r3, #8]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	edd3 7a02 	vldr	s15, [r3, #8]
 800dd3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd3e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd42:	f7ff ffcf 	bl	800dce4 <sq>
 800dd46:	eef0 7a40 	vmov.f32	s15, s0
 800dd4a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	ed93 7a03 	vldr	s14, [r3, #12]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	edd3 7a03 	vldr	s15, [r3, #12]
 800dd5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd5e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd62:	f7ff ffbf 	bl	800dce4 <sq>
 800dd66:	eef0 7a40 	vmov.f32	s15, s0
 800dd6a:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 800dd6e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	ecbd 8b02 	vpop	{d8}
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <isDistanceDiffSmallerThanDistanceBetweenAnchors>:

static bool isDistanceDiffSmallerThanDistanceBetweenAnchors(const tdoaMeasurement_t* tdoa) {
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  float anchorDistanceSq = distanceSq(&tdoa->anchorPositions[0], &tdoa->anchorPositions[1]);
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	3310      	adds	r3, #16
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	f7ff ffb9 	bl	800dd04 <distanceSq>
 800dd92:	ed87 0a03 	vstr	s0, [r7, #12]
  float distanceDiffSq = sq(tdoa->distanceDiff);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dd9c:	eeb0 0a67 	vmov.f32	s0, s15
 800dda0:	f7ff ffa0 	bl	800dce4 <sq>
 800dda4:	ed87 0a02 	vstr	s0, [r7, #8]
  return (distanceDiffSq < anchorDistanceSq);
 800dda8:	ed97 7a02 	vldr	s14, [r7, #8]
 800ddac:	edd7 7a03 	vldr	s15, [r7, #12]
 800ddb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb8:	bf4c      	ite	mi
 800ddba:	2301      	movmi	r3, #1
 800ddbc:	2300      	movpl	r3, #0
 800ddbe:	b2db      	uxtb	r3, r3
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <normalize_radians>:
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	ed87 0a01 	vstr	s0, [r7, #4]
	float signed_pi = copysignf(M_PI_F, radians);
 800ddd2:	edd7 0a01 	vldr	s1, [r7, #4]
 800ddd6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800de1c <normalize_radians+0x54>
 800ddda:	f016 ffda 	bl	8024d92 <copysignf>
 800ddde:	ed87 0a03 	vstr	s0, [r7, #12]
	radians = fmodf(radians + signed_pi, 2 * M_PI_F) - signed_pi;
 800dde2:	ed97 7a01 	vldr	s14, [r7, #4]
 800dde6:	edd7 7a03 	vldr	s15, [r7, #12]
 800ddea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddee:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800de20 <normalize_radians+0x58>
 800ddf2:	eeb0 0a67 	vmov.f32	s0, s15
 800ddf6:	f018 fde5 	bl	80269c4 <fmodf>
 800ddfa:	eeb0 7a40 	vmov.f32	s14, s0
 800ddfe:	edd7 7a03 	vldr	s15, [r7, #12]
 800de02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de06:	edc7 7a01 	vstr	s15, [r7, #4]
	return radians;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	ee07 3a90 	vmov	s15, r3
}
 800de10:	eeb0 0a67 	vmov.f32	s0, s15
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	40490fdb 	.word	0x40490fdb
 800de20:	40c90fdb 	.word	0x40c90fdb

0800de24 <fmodf_floored>:
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	ed87 0a01 	vstr	s0, [r7, #4]
 800de2e:	edc7 0a00 	vstr	s1, [r7]
	return x - floorf(x / n) * n;
 800de32:	ed97 7a01 	vldr	s14, [r7, #4]
 800de36:	edd7 7a00 	vldr	s15, [r7]
 800de3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800de3e:	eeb0 0a66 	vmov.f32	s0, s13
 800de42:	f018 ff7d 	bl	8026d40 <floorf>
 800de46:	eeb0 7a40 	vmov.f32	s14, s0
 800de4a:	edd7 7a00 	vldr	s15, [r7]
 800de4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de52:	ed97 7a01 	vldr	s14, [r7, #4]
 800de56:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800de5a:	eeb0 0a67 	vmov.f32	s0, s15
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <shortest_signed_angle_radians>:
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	ed87 0a01 	vstr	s0, [r7, #4]
 800de6e:	edc7 0a00 	vstr	s1, [r7]
	float diff = goal - start;
 800de72:	ed97 7a00 	vldr	s14, [r7]
 800de76:	edd7 7a01 	vldr	s15, [r7, #4]
 800de7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de7e:	edc7 7a03 	vstr	s15, [r7, #12]
	float signed_diff = fmodf_floored(diff + M_PI_F, 2 * M_PI_F) - M_PI_F;
 800de82:	edd7 7a03 	vldr	s15, [r7, #12]
 800de86:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800debc <shortest_signed_angle_radians+0x58>
 800de8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de8e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800dec0 <shortest_signed_angle_radians+0x5c>
 800de92:	eeb0 0a67 	vmov.f32	s0, s15
 800de96:	f7ff ffc5 	bl	800de24 <fmodf_floored>
 800de9a:	eef0 7a40 	vmov.f32	s15, s0
 800de9e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800debc <shortest_signed_angle_radians+0x58>
 800dea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dea6:	edc7 7a02 	vstr	s15, [r7, #8]
	return signed_diff;
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	ee07 3a90 	vmov	s15, r3
}
 800deb0:	eeb0 0a67 	vmov.f32	s0, s15
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	40490fdb 	.word	0x40490fdb
 800dec0:	40c90fdb 	.word	0x40c90fdb

0800dec4 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800dec4:	b480      	push	{r7}
 800dec6:	b08f      	sub	sp, #60	; 0x3c
 800dec8:	af00      	add	r7, sp, #0
 800deca:	ed87 0a07 	vstr	s0, [r7, #28]
 800dece:	edc7 0a06 	vstr	s1, [r7, #24]
 800ded2:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	623b      	str	r3, [r7, #32]
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	627b      	str	r3, [r7, #36]	; 0x24
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800dee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dee6:	f107 0220 	add.w	r2, r7, #32
 800deea:	ca07      	ldmia	r2, {r0, r1, r2}
 800deec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800def0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800def2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800def6:	ee06 1a90 	vmov	s13, r1
 800defa:	ee07 2a10 	vmov	s14, r2
 800defe:	ee07 3a90 	vmov	s15, r3
}
 800df02:	eeb0 0a66 	vmov.f32	s0, s13
 800df06:	eef0 0a47 	vmov.f32	s1, s14
 800df0a:	eeb0 1a67 	vmov.f32	s2, s15
 800df0e:	373c      	adds	r7, #60	; 0x3c
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <vrepeat>:
static inline struct vec vrepeat(float x) {
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08a      	sub	sp, #40	; 0x28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800df22:	ed97 1a05 	vldr	s2, [r7, #20]
 800df26:	edd7 0a05 	vldr	s1, [r7, #20]
 800df2a:	ed97 0a05 	vldr	s0, [r7, #20]
 800df2e:	f7ff ffc9 	bl	800dec4 <mkvec>
 800df32:	eef0 6a40 	vmov.f32	s13, s0
 800df36:	eeb0 7a60 	vmov.f32	s14, s1
 800df3a:	eef0 7a41 	vmov.f32	s15, s2
 800df3e:	edc7 6a07 	vstr	s13, [r7, #28]
 800df42:	ed87 7a08 	vstr	s14, [r7, #32]
 800df46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800df4a:	69f9      	ldr	r1, [r7, #28]
 800df4c:	6a3a      	ldr	r2, [r7, #32]
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df50:	ee06 1a90 	vmov	s13, r1
 800df54:	ee07 2a10 	vmov	s14, r2
 800df58:	ee07 3a90 	vmov	s15, r3
}
 800df5c:	eeb0 0a66 	vmov.f32	s0, s13
 800df60:	eef0 0a47 	vmov.f32	s1, s14
 800df64:	eeb0 1a67 	vmov.f32	s2, s15
 800df68:	3728      	adds	r7, #40	; 0x28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
	...

0800df70 <vzero>:
static inline struct vec vzero(void) {
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 800df76:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800dfbc <vzero+0x4c>
 800df7a:	f7ff ffcd 	bl	800df18 <vrepeat>
 800df7e:	eef0 6a40 	vmov.f32	s13, s0
 800df82:	eeb0 7a60 	vmov.f32	s14, s1
 800df86:	eef0 7a41 	vmov.f32	s15, s2
 800df8a:	edc7 6a05 	vstr	s13, [r7, #20]
 800df8e:	ed87 7a06 	vstr	s14, [r7, #24]
 800df92:	edc7 7a07 	vstr	s15, [r7, #28]
 800df96:	6979      	ldr	r1, [r7, #20]
 800df98:	69ba      	ldr	r2, [r7, #24]
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	ee06 1a90 	vmov	s13, r1
 800dfa0:	ee07 2a10 	vmov	s14, r2
 800dfa4:	ee07 3a90 	vmov	s15, r3
}
 800dfa8:	eeb0 0a66 	vmov.f32	s0, s13
 800dfac:	eef0 0a47 	vmov.f32	s1, s14
 800dfb0:	eeb0 1a67 	vmov.f32	s2, s15
 800dfb4:	3720      	adds	r7, #32
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	00000000 	.word	0x00000000

0800dfc0 <vneg>:
static inline struct vec vneg(struct vec v) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b08c      	sub	sp, #48	; 0x30
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	eef0 6a40 	vmov.f32	s13, s0
 800dfca:	eeb0 7a60 	vmov.f32	s14, s1
 800dfce:	eef0 7a41 	vmov.f32	s15, s2
 800dfd2:	edc7 6a05 	vstr	s13, [r7, #20]
 800dfd6:	ed87 7a06 	vstr	s14, [r7, #24]
 800dfda:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(-v.x, -v.y, -v.z);
 800dfde:	edd7 7a05 	vldr	s15, [r7, #20]
 800dfe2:	eeb1 7a67 	vneg.f32	s14, s15
 800dfe6:	edd7 7a06 	vldr	s15, [r7, #24]
 800dfea:	eef1 6a67 	vneg.f32	s13, s15
 800dfee:	edd7 7a07 	vldr	s15, [r7, #28]
 800dff2:	eef1 7a67 	vneg.f32	s15, s15
 800dff6:	eeb0 1a67 	vmov.f32	s2, s15
 800dffa:	eef0 0a66 	vmov.f32	s1, s13
 800dffe:	eeb0 0a47 	vmov.f32	s0, s14
 800e002:	f7ff ff5f 	bl	800dec4 <mkvec>
 800e006:	eef0 6a40 	vmov.f32	s13, s0
 800e00a:	eeb0 7a60 	vmov.f32	s14, s1
 800e00e:	eef0 7a41 	vmov.f32	s15, s2
 800e012:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800e016:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800e01a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800e01e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	ee06 1a90 	vmov	s13, r1
 800e028:	ee07 2a10 	vmov	s14, r2
 800e02c:	ee07 3a90 	vmov	s15, r3
}
 800e030:	eeb0 0a66 	vmov.f32	s0, s13
 800e034:	eef0 0a47 	vmov.f32	s1, s14
 800e038:	eeb0 1a67 	vmov.f32	s2, s15
 800e03c:	3730      	adds	r7, #48	; 0x30
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 800e042:	b580      	push	{r7, lr}
 800e044:	b08e      	sub	sp, #56	; 0x38
 800e046:	af00      	add	r7, sp, #0
 800e048:	eeb0 5a40 	vmov.f32	s10, s0
 800e04c:	eef0 5a60 	vmov.f32	s11, s1
 800e050:	eeb0 6a41 	vmov.f32	s12, s2
 800e054:	eef0 6a61 	vmov.f32	s13, s3
 800e058:	eeb0 7a42 	vmov.f32	s14, s4
 800e05c:	eef0 7a62 	vmov.f32	s15, s5
 800e060:	ed87 5a07 	vstr	s10, [r7, #28]
 800e064:	edc7 5a08 	vstr	s11, [r7, #32]
 800e068:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800e06c:	edc7 6a04 	vstr	s13, [r7, #16]
 800e070:	ed87 7a05 	vstr	s14, [r7, #20]
 800e074:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 800e078:	ed97 7a07 	vldr	s14, [r7, #28]
 800e07c:	edd7 7a04 	vldr	s15, [r7, #16]
 800e080:	ee77 6a27 	vadd.f32	s13, s14, s15
 800e084:	ed97 7a08 	vldr	s14, [r7, #32]
 800e088:	edd7 7a05 	vldr	s15, [r7, #20]
 800e08c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e090:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e094:	edd7 7a06 	vldr	s15, [r7, #24]
 800e098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e09c:	eeb0 1a67 	vmov.f32	s2, s15
 800e0a0:	eef0 0a46 	vmov.f32	s1, s12
 800e0a4:	eeb0 0a66 	vmov.f32	s0, s13
 800e0a8:	f7ff ff0c 	bl	800dec4 <mkvec>
 800e0ac:	eef0 6a40 	vmov.f32	s13, s0
 800e0b0:	eeb0 7a60 	vmov.f32	s14, s1
 800e0b4:	eef0 7a41 	vmov.f32	s15, s2
 800e0b8:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800e0bc:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800e0c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800e0c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ca:	ee06 1a90 	vmov	s13, r1
 800e0ce:	ee07 2a10 	vmov	s14, r2
 800e0d2:	ee07 3a90 	vmov	s15, r3
}
 800e0d6:	eeb0 0a66 	vmov.f32	s0, s13
 800e0da:	eef0 0a47 	vmov.f32	s1, s14
 800e0de:	eeb0 1a67 	vmov.f32	s2, s15
 800e0e2:	3738      	adds	r7, #56	; 0x38
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <vsub>:
static inline struct vec vsub(struct vec a, struct vec b) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b090      	sub	sp, #64	; 0x40
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	eeb0 5a40 	vmov.f32	s10, s0
 800e0f2:	eef0 5a60 	vmov.f32	s11, s1
 800e0f6:	eeb0 6a41 	vmov.f32	s12, s2
 800e0fa:	eef0 6a61 	vmov.f32	s13, s3
 800e0fe:	eeb0 7a42 	vmov.f32	s14, s4
 800e102:	eef0 7a62 	vmov.f32	s15, s5
 800e106:	ed87 5a07 	vstr	s10, [r7, #28]
 800e10a:	edc7 5a08 	vstr	s11, [r7, #32]
 800e10e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800e112:	edc7 6a04 	vstr	s13, [r7, #16]
 800e116:	ed87 7a05 	vstr	s14, [r7, #20]
 800e11a:	edc7 7a06 	vstr	s15, [r7, #24]
	return vadd(a, vneg(b));
 800e11e:	edd7 6a04 	vldr	s13, [r7, #16]
 800e122:	ed97 7a05 	vldr	s14, [r7, #20]
 800e126:	edd7 7a06 	vldr	s15, [r7, #24]
 800e12a:	eeb0 0a66 	vmov.f32	s0, s13
 800e12e:	eef0 0a47 	vmov.f32	s1, s14
 800e132:	eeb0 1a67 	vmov.f32	s2, s15
 800e136:	f7ff ff43 	bl	800dfc0 <vneg>
 800e13a:	eef0 6a40 	vmov.f32	s13, s0
 800e13e:	eeb0 7a60 	vmov.f32	s14, s1
 800e142:	eef0 7a41 	vmov.f32	s15, s2
 800e146:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800e14a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800e14e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800e152:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800e156:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800e15a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800e15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e162:	ed97 7a08 	vldr	s14, [r7, #32]
 800e166:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e16a:	eef0 1a45 	vmov.f32	s3, s10
 800e16e:	eeb0 2a65 	vmov.f32	s4, s11
 800e172:	eef0 2a46 	vmov.f32	s5, s12
 800e176:	eeb0 0a66 	vmov.f32	s0, s13
 800e17a:	eef0 0a47 	vmov.f32	s1, s14
 800e17e:	eeb0 1a67 	vmov.f32	s2, s15
 800e182:	f7ff ff5e 	bl	800e042 <vadd>
 800e186:	eef0 6a40 	vmov.f32	s13, s0
 800e18a:	eeb0 7a60 	vmov.f32	s14, s1
 800e18e:	eef0 7a41 	vmov.f32	s15, s2
 800e192:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800e196:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800e19a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800e19e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	ee06 1a90 	vmov	s13, r1
 800e1a8:	ee07 2a10 	vmov	s14, r2
 800e1ac:	ee07 3a90 	vmov	s15, r3
}
 800e1b0:	eeb0 0a66 	vmov.f32	s0, s13
 800e1b4:	eef0 0a47 	vmov.f32	s1, s14
 800e1b8:	eeb0 1a67 	vmov.f32	s2, s15
 800e1bc:	3740      	adds	r7, #64	; 0x40
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <piecewise_duration>:
	unsigned char n_pieces;
	struct poly4d* pieces;
};

static inline float piecewise_duration(struct piecewise_traj const *pp)
{
 800e1c2:	b480      	push	{r7}
 800e1c4:	b085      	sub	sp, #20
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
	float total_dur = 0;
 800e1ca:	f04f 0300 	mov.w	r3, #0
 800e1ce:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < pp->n_pieces; ++i) {
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	60bb      	str	r3, [r7, #8]
 800e1d4:	e012      	b.n	800e1fc <piecewise_duration+0x3a>
		total_dur += pp->pieces[i].duration;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6999      	ldr	r1, [r3, #24]
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	015b      	lsls	r3, r3, #5
 800e1e0:	4413      	add	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	440b      	add	r3, r1
 800e1e6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800e1ea:	ed97 7a03 	vldr	s14, [r7, #12]
 800e1ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1f2:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < pp->n_pieces; ++i) {
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	60bb      	str	r3, [r7, #8]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	7d1b      	ldrb	r3, [r3, #20]
 800e200:	461a      	mov	r2, r3
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	4293      	cmp	r3, r2
 800e206:	dbe6      	blt.n	800e1d6 <piecewise_duration+0x14>
	}
	return total_dur * pp->timescale;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	ed93 7a01 	vldr	s14, [r3, #4]
 800e20e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e212:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800e216:	eeb0 0a67 	vmov.f32	s0, s15
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <piecewise_is_finished>:
struct traj_eval piecewise_eval_reversed(
	struct piecewise_traj const *traj, float t);


static inline bool piecewise_is_finished(struct piecewise_traj const *traj, float t)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	ed2d 8b02 	vpush	{d8}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	ed87 0a00 	vstr	s0, [r7]
	return (t - traj->t_begin) >= piecewise_duration(traj);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	edd3 7a00 	vldr	s15, [r3]
 800e23a:	ed97 7a00 	vldr	s14, [r7]
 800e23e:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff ffbd 	bl	800e1c2 <piecewise_duration>
 800e248:	eef0 7a40 	vmov.f32	s15, s0
 800e24c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	bfac      	ite	ge
 800e256:	2301      	movge	r3, #1
 800e258:	2300      	movlt	r3, #0
 800e25a:	b2db      	uxtb	r3, r3
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	ecbd 8b02 	vpop	{d8}
 800e266:	bd80      	pop	{r7, pc}

0800e268 <piecewise_compressed_duration>:
	} current_piece;
};

// Returns the total duration of a compressed trajectory. The total duration
// is pre-calculated and cached in the trajectory itself.
static float piecewise_compressed_duration(struct piecewise_traj_compressed const *traj) {
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
	return traj->duration;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	ee07 3a90 	vmov	s15, r3
}
 800e278:	eeb0 0a67 	vmov.f32	s0, s15
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <piecewise_compressed_is_finished>:

// Returns whether we have finished flying the trajectory
static inline bool piecewise_compressed_is_finished(
	struct piecewise_traj_compressed const *traj, float t)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	ed2d 8b02 	vpush	{d8}
 800e28c:	b082      	sub	sp, #8
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	ed87 0a00 	vstr	s0, [r7]
	return (t - traj->t_begin) >= piecewise_compressed_duration(traj);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	edd3 7a00 	vldr	s15, [r3]
 800e29c:	ed97 7a00 	vldr	s14, [r7]
 800e2a0:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7ff ffdf 	bl	800e268 <piecewise_compressed_duration>
 800e2aa:	eef0 7a40 	vmov.f32	s15, s0
 800e2ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b6:	bfac      	ite	ge
 800e2b8:	2301      	movge	r3, #1
 800e2ba:	2300      	movlt	r3, #0
 800e2bc:	b2db      	uxtb	r3, r3
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	ecbd 8b02 	vpop	{d8}
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <plan_takeoff_or_landing>:
#include "planner.h"

static struct traj_eval plan_eval(struct planner *p, float t);

static void plan_takeoff_or_landing(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration)
{
 800e2cc:	b5b0      	push	{r4, r5, r7, lr}
 800e2ce:	b0a0      	sub	sp, #128	; 0x80
 800e2d0:	af08      	add	r7, sp, #32
 800e2d2:	61f8      	str	r0, [r7, #28]
 800e2d4:	eef0 6a40 	vmov.f32	s13, s0
 800e2d8:	eeb0 7a60 	vmov.f32	s14, s1
 800e2dc:	eef0 7a41 	vmov.f32	s15, s2
 800e2e0:	edc7 1a03 	vstr	s3, [r7, #12]
 800e2e4:	ed87 2a02 	vstr	s4, [r7, #8]
 800e2e8:	edc7 2a01 	vstr	s5, [r7, #4]
 800e2ec:	ed87 3a00 	vstr	s6, [r7]
 800e2f0:	edc7 6a04 	vstr	s13, [r7, #16]
 800e2f4:	ed87 7a05 	vstr	s14, [r7, #20]
 800e2f8:	edc7 7a06 	vstr	s15, [r7, #24]
	struct vec hover_pos = curr_pos;
 800e2fc:	f107 0320 	add.w	r3, r7, #32
 800e300:	f107 0210 	add.w	r2, r7, #16
 800e304:	ca07      	ldmia	r2, {r0, r1, r2}
 800e306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hover_pos.z = hover_height;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	62bb      	str	r3, [r7, #40]	; 0x28

	// compute the shortest possible rotation towards 0
	hover_yaw = normalize_radians(hover_yaw);
 800e30e:	ed97 0a01 	vldr	s0, [r7, #4]
 800e312:	f7ff fd59 	bl	800ddc8 <normalize_radians>
 800e316:	ed87 0a01 	vstr	s0, [r7, #4]
	curr_yaw = normalize_radians(curr_yaw);
 800e31a:	ed97 0a03 	vldr	s0, [r7, #12]
 800e31e:	f7ff fd53 	bl	800ddc8 <normalize_radians>
 800e322:	ed87 0a03 	vstr	s0, [r7, #12]
	float goal_yaw = curr_yaw + shortest_signed_angle_radians(curr_yaw, hover_yaw);
 800e326:	edd7 0a01 	vldr	s1, [r7, #4]
 800e32a:	ed97 0a03 	vldr	s0, [r7, #12]
 800e32e:	f7ff fd99 	bl	800de64 <shortest_signed_angle_radians>
 800e332:	eeb0 7a40 	vmov.f32	s14, s0
 800e336:	edd7 7a03 	vldr	s15, [r7, #12]
 800e33a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e33e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	f103 0508 	add.w	r5, r3, #8
 800e348:	f7ff fe12 	bl	800df70 <vzero>
 800e34c:	eef0 6a40 	vmov.f32	s13, s0
 800e350:	eeb0 7a60 	vmov.f32	s14, s1
 800e354:	eef0 7a41 	vmov.f32	s15, s2
 800e358:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800e35c:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800e360:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800e364:	f7ff fe04 	bl	800df70 <vzero>
 800e368:	eef0 6a40 	vmov.f32	s13, s0
 800e36c:	eeb0 7a60 	vmov.f32	s14, s1
 800e370:	eef0 7a41 	vmov.f32	s15, s2
 800e374:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800e378:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800e37c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800e380:	f7ff fdf6 	bl	800df70 <vzero>
 800e384:	eef0 6a40 	vmov.f32	s13, s0
 800e388:	eeb0 7a60 	vmov.f32	s14, s1
 800e38c:	eef0 7a41 	vmov.f32	s15, s2
 800e390:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 800e394:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800e398:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800e39c:	f7ff fde8 	bl	800df70 <vzero>
 800e3a0:	eef0 6a40 	vmov.f32	s13, s0
 800e3a4:	eeb0 7a60 	vmov.f32	s14, s1
 800e3a8:	eef0 7a41 	vmov.f32	s15, s2
 800e3ac:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800e3b0:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 800e3b4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800e3b8:	ed97 6a08 	vldr	s12, [r7, #32]
 800e3bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e3c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e3c4:	edd7 4a0e 	vldr	s9, [r7, #56]	; 0x38
 800e3c8:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800e3cc:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 800e3d0:	edd7 2a0b 	vldr	s5, [r7, #44]	; 0x2c
 800e3d4:	ed97 3a0c 	vldr	s6, [r7, #48]	; 0x30
 800e3d8:	edd7 3a0d 	vldr	s7, [r7, #52]	; 0x34
 800e3dc:	edd7 0a04 	vldr	s1, [r7, #16]
 800e3e0:	ed97 1a05 	vldr	s2, [r7, #20]
 800e3e4:	edd7 1a06 	vldr	s3, [r7, #24]
 800e3e8:	ac04      	add	r4, sp, #16
 800e3ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e3ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e3f6:	f04f 0300 	mov.w	r3, #0
 800e3fa:	9303      	str	r3, [sp, #12]
 800e3fc:	466c      	mov	r4, sp
 800e3fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e40a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e40e:	ed9f 4a06 	vldr	s8, [pc, #24]	; 800e428 <plan_takeoff_or_landing+0x15c>
 800e412:	ed97 2a03 	vldr	s4, [r7, #12]
 800e416:	ed97 0a00 	vldr	s0, [r7]
 800e41a:	4628      	mov	r0, r5
 800e41c:	f002 f8b0 	bl	8010580 <piecewise_plan_7th_order_no_jerk>
		curr_pos,  curr_yaw,  vzero(), 0, vzero(),
		hover_pos, goal_yaw, vzero(), 0, vzero());
}
 800e420:	bf00      	nop
 800e422:	3760      	adds	r7, #96	; 0x60
 800e424:	46bd      	mov	sp, r7
 800e426:	bdb0      	pop	{r4, r5, r7, pc}
 800e428:	00000000 	.word	0x00000000

0800e42c <plan_init>:
// ----------------- //
// public functions. //
// ----------------- //

void plan_init(struct planner *p)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
	p->state = TRAJECTORY_STATE_IDLE;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	705a      	strb	r2, [r3, #1]
	p->reversed = false;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	709a      	strb	r2, [r3, #2]
	p->trajectory = NULL;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	605a      	str	r2, [r3, #4]
	p->compressed_trajectory = NULL;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	605a      	str	r2, [r3, #4]
	p->planned_trajectory.pieces = p->pieces;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	621a      	str	r2, [r3, #32]
}
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <plan_stop>:

void plan_stop(struct planner *p)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
	p->state = TRAJECTORY_STATE_IDLE;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	701a      	strb	r2, [r3, #0]
}
 800e476:	bf00      	nop
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr

0800e482 <plan_is_finished>:

bool plan_is_finished(struct planner *p, float t)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b082      	sub	sp, #8
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	ed87 0a00 	vstr	s0, [r7]
	switch (p->type) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	785b      	ldrb	r3, [r3, #1]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <plan_is_finished+0x1a>
 800e496:	2b01      	cmp	r3, #1
 800e498:	d009      	beq.n	800e4ae <plan_is_finished+0x2c>
 800e49a:	e011      	b.n	800e4c0 <plan_is_finished+0x3e>
		case TRAJECTORY_TYPE_PIECEWISE:
			return piecewise_is_finished(p->trajectory, t);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	ed97 0a00 	vldr	s0, [r7]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff febd 	bl	800e224 <piecewise_is_finished>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	e009      	b.n	800e4c2 <plan_is_finished+0x40>

		case TRAJECTORY_TYPE_PIECEWISE_COMPRESSED:
		  return piecewise_compressed_is_finished(p->compressed_trajectory, t);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	ed97 0a00 	vldr	s0, [r7]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff fee5 	bl	800e286 <piecewise_compressed_is_finished>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	e000      	b.n	800e4c2 <plan_is_finished+0x40>

		default:
		  return 1;
 800e4c0:	2301      	movs	r3, #1
	}
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <plan_is_stopped>:

bool plan_is_stopped(struct planner *p)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b083      	sub	sp, #12
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
	return p->state == TRAJECTORY_STATE_IDLE;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	bf0c      	ite	eq
 800e4da:	2301      	moveq	r3, #1
 800e4dc:	2300      	movne	r3, #0
 800e4de:	b2db      	uxtb	r3, r3
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <plan_is_disabled>:
{
	p->state = TRAJECTORY_STATE_DISABLED;
}

bool plan_is_disabled(struct planner *p)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	return p->state == TRAJECTORY_STATE_DISABLED;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b04      	cmp	r3, #4
 800e4fa:	bf0c      	ite	eq
 800e4fc:	2301      	moveq	r3, #1
 800e4fe:	2300      	movne	r3, #0
 800e500:	b2db      	uxtb	r3, r3
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <plan_current_goal>:

struct traj_eval plan_current_goal(struct planner *p, float t)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b084      	sub	sp, #16
 800e512:	af00      	add	r7, sp, #0
 800e514:	60f8      	str	r0, [r7, #12]
 800e516:	60b9      	str	r1, [r7, #8]
 800e518:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (p->state) {
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d00c      	beq.n	800e53e <plan_current_goal+0x30>
 800e524:	2b03      	cmp	r3, #3
 800e526:	d112      	bne.n	800e54e <plan_current_goal+0x40>
		case TRAJECTORY_STATE_LANDING:
			if (plan_is_finished(p, t)) {
 800e528:	ed97 0a01 	vldr	s0, [r7, #4]
 800e52c:	68b8      	ldr	r0, [r7, #8]
 800e52e:	f7ff ffa8 	bl	800e482 <plan_is_finished>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <plan_current_goal+0x30>
				p->state = TRAJECTORY_STATE_IDLE;
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
			}
			// intentional fall-thru
		case TRAJECTORY_STATE_FLYING:
			return plan_eval(p, t);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	ed97 0a01 	vldr	s0, [r7, #4]
 800e544:	68b9      	ldr	r1, [r7, #8]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 f809 	bl	800e55e <plan_eval>
 800e54c:	e003      	b.n	800e556 <plan_current_goal+0x48>

		default:
			return traj_eval_invalid();
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	4618      	mov	r0, r3
 800e552:	f001 fbfd 	bl	800fd50 <traj_eval_invalid>
	}
}
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <plan_eval>:

struct traj_eval plan_eval(struct planner *p, float t)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	60f8      	str	r0, [r7, #12]
 800e566:	60b9      	str	r1, [r7, #8]
 800e568:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (p->type) {
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	785b      	ldrb	r3, [r3, #1]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d002      	beq.n	800e57a <plan_eval+0x1c>
 800e574:	2b01      	cmp	r3, #1
 800e576:	d018      	beq.n	800e5aa <plan_eval+0x4c>
 800e578:	e02a      	b.n	800e5d0 <plan_eval+0x72>
		case TRAJECTORY_TYPE_PIECEWISE:
			if (p->reversed) {
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	789b      	ldrb	r3, [r3, #2]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d009      	beq.n	800e596 <plan_eval+0x38>
				return piecewise_eval_reversed(p->trajectory, t);
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	ed97 0a01 	vldr	s0, [r7, #4]
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f001 fefa 	bl	8010388 <piecewise_eval_reversed>
 800e594:	e020      	b.n	800e5d8 <plan_eval+0x7a>
			}
			else {
				return piecewise_eval(p->trajectory, t);
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	ed97 0a01 	vldr	s0, [r7, #4]
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f001 fe06 	bl	80101b4 <piecewise_eval>
 800e5a8:	e016      	b.n	800e5d8 <plan_eval+0x7a>
			}
			break;

		case TRAJECTORY_TYPE_PIECEWISE_COMPRESSED:
			if (p->reversed) {
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	789b      	ldrb	r3, [r3, #2]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d004      	beq.n	800e5bc <plan_eval+0x5e>
				/* not supported */
				return traj_eval_invalid();
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f001 fbcb 	bl	800fd50 <traj_eval_invalid>
 800e5ba:	e00d      	b.n	800e5d8 <plan_eval+0x7a>
			}
			else {
				return piecewise_compressed_eval(p->compressed_trajectory, t);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	ed97 0a01 	vldr	s0, [r7, #4]
 800e5c6:	4611      	mov	r1, r2
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f002 face 	bl	8010b6a <piecewise_compressed_eval>
 800e5ce:	e003      	b.n	800e5d8 <plan_eval+0x7a>
			}
			break;

		default:
			return traj_eval_invalid();
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f001 fbbc 	bl	800fd50 <traj_eval_invalid>
	}
}
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	3710      	adds	r7, #16
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <plan_takeoff>:

int plan_takeoff(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration, float t)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b08a      	sub	sp, #40	; 0x28
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6278      	str	r0, [r7, #36]	; 0x24
 800e5e8:	eef0 6a40 	vmov.f32	s13, s0
 800e5ec:	eeb0 7a60 	vmov.f32	s14, s1
 800e5f0:	eef0 7a41 	vmov.f32	s15, s2
 800e5f4:	edc7 1a05 	vstr	s3, [r7, #20]
 800e5f8:	ed87 2a04 	vstr	s4, [r7, #16]
 800e5fc:	edc7 2a03 	vstr	s5, [r7, #12]
 800e600:	ed87 3a02 	vstr	s6, [r7, #8]
 800e604:	edc7 3a01 	vstr	s7, [r7, #4]
 800e608:	edc7 6a06 	vstr	s13, [r7, #24]
 800e60c:	ed87 7a07 	vstr	s14, [r7, #28]
 800e610:	edc7 7a08 	vstr	s15, [r7, #32]
	if (p->state != TRAJECTORY_STATE_IDLE) {
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <plan_takeoff+0x40>
		return 1;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e028      	b.n	800e672 <plan_takeoff+0x92>
	}

	plan_takeoff_or_landing(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration);
 800e620:	edd7 6a06 	vldr	s13, [r7, #24]
 800e624:	ed97 7a07 	vldr	s14, [r7, #28]
 800e628:	edd7 7a08 	vldr	s15, [r7, #32]
 800e62c:	ed97 3a02 	vldr	s6, [r7, #8]
 800e630:	edd7 2a03 	vldr	s5, [r7, #12]
 800e634:	ed97 2a04 	vldr	s4, [r7, #16]
 800e638:	edd7 1a05 	vldr	s3, [r7, #20]
 800e63c:	eeb0 0a66 	vmov.f32	s0, s13
 800e640:	eef0 0a47 	vmov.f32	s1, s14
 800e644:	eeb0 1a67 	vmov.f32	s2, s15
 800e648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e64a:	f7ff fe3f 	bl	800e2cc <plan_takeoff_or_landing>
	p->reversed = false;
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	2200      	movs	r2, #0
 800e652:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	2201      	movs	r2, #1
 800e658:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	2200      	movs	r2, #0
 800e65e:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	f103 0208 	add.w	r2, r3, #8
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	605a      	str	r2, [r3, #4]
	return 0;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3728      	adds	r7, #40	; 0x28
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <plan_land>:

int plan_land(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration, float t)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b08a      	sub	sp, #40	; 0x28
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6278      	str	r0, [r7, #36]	; 0x24
 800e682:	eef0 6a40 	vmov.f32	s13, s0
 800e686:	eeb0 7a60 	vmov.f32	s14, s1
 800e68a:	eef0 7a41 	vmov.f32	s15, s2
 800e68e:	edc7 1a05 	vstr	s3, [r7, #20]
 800e692:	ed87 2a04 	vstr	s4, [r7, #16]
 800e696:	edc7 2a03 	vstr	s5, [r7, #12]
 800e69a:	ed87 3a02 	vstr	s6, [r7, #8]
 800e69e:	edc7 3a01 	vstr	s7, [r7, #4]
 800e6a2:	edc7 6a06 	vstr	s13, [r7, #24]
 800e6a6:	ed87 7a07 	vstr	s14, [r7, #28]
 800e6aa:	edc7 7a08 	vstr	s15, [r7, #32]
	if (p->state == TRAJECTORY_STATE_LANDING) {
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b03      	cmp	r3, #3
 800e6b4:	d101      	bne.n	800e6ba <plan_land+0x40>
		return 1;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e028      	b.n	800e70c <plan_land+0x92>
	}

	plan_takeoff_or_landing(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration);
 800e6ba:	edd7 6a06 	vldr	s13, [r7, #24]
 800e6be:	ed97 7a07 	vldr	s14, [r7, #28]
 800e6c2:	edd7 7a08 	vldr	s15, [r7, #32]
 800e6c6:	ed97 3a02 	vldr	s6, [r7, #8]
 800e6ca:	edd7 2a03 	vldr	s5, [r7, #12]
 800e6ce:	ed97 2a04 	vldr	s4, [r7, #16]
 800e6d2:	edd7 1a05 	vldr	s3, [r7, #20]
 800e6d6:	eeb0 0a66 	vmov.f32	s0, s13
 800e6da:	eef0 0a47 	vmov.f32	s1, s14
 800e6de:	eeb0 1a67 	vmov.f32	s2, s15
 800e6e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6e4:	f7ff fdf2 	bl	800e2cc <plan_takeoff_or_landing>
	p->reversed = false;
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_LANDING;
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	2203      	movs	r2, #3
 800e6f2:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	f103 0208 	add.w	r2, r3, #8
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	605a      	str	r2, [r3, #4]
	return 0;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3728      	adds	r7, #40	; 0x28
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <plan_go_to_from>:

int plan_go_to_from(struct planner *p, const struct traj_eval *curr_eval, bool relative, struct vec hover_pos, float hover_yaw, float duration, float t)
{
 800e714:	b5b0      	push	{r4, r5, r7, lr}
 800e716:	ed2d 8b02 	vpush	{d8}
 800e71a:	b09a      	sub	sp, #104	; 0x68
 800e71c:	af08      	add	r7, sp, #32
 800e71e:	6278      	str	r0, [r7, #36]	; 0x24
 800e720:	6239      	str	r1, [r7, #32]
 800e722:	4613      	mov	r3, r2
 800e724:	eef0 6a40 	vmov.f32	s13, s0
 800e728:	eeb0 7a60 	vmov.f32	s14, s1
 800e72c:	eef0 7a41 	vmov.f32	s15, s2
 800e730:	edc7 1a03 	vstr	s3, [r7, #12]
 800e734:	ed87 2a02 	vstr	s4, [r7, #8]
 800e738:	edc7 2a01 	vstr	s5, [r7, #4]
 800e73c:	77fb      	strb	r3, [r7, #31]
 800e73e:	edc7 6a04 	vstr	s13, [r7, #16]
 800e742:	ed87 7a05 	vstr	s14, [r7, #20]
 800e746:	edc7 7a06 	vstr	s15, [r7, #24]
	if (relative) {
 800e74a:	7ffb      	ldrb	r3, [r7, #31]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d02f      	beq.n	800e7b0 <plan_go_to_from+0x9c>
		hover_pos = vadd(hover_pos, curr_eval->pos);
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	ed93 5a00 	vldr	s10, [r3]
 800e756:	edd3 5a01 	vldr	s11, [r3, #4]
 800e75a:	ed93 6a02 	vldr	s12, [r3, #8]
 800e75e:	edd7 6a04 	vldr	s13, [r7, #16]
 800e762:	ed97 7a05 	vldr	s14, [r7, #20]
 800e766:	edd7 7a06 	vldr	s15, [r7, #24]
 800e76a:	eef0 1a45 	vmov.f32	s3, s10
 800e76e:	eeb0 2a65 	vmov.f32	s4, s11
 800e772:	eef0 2a46 	vmov.f32	s5, s12
 800e776:	eeb0 0a66 	vmov.f32	s0, s13
 800e77a:	eef0 0a47 	vmov.f32	s1, s14
 800e77e:	eeb0 1a67 	vmov.f32	s2, s15
 800e782:	f7ff fc5e 	bl	800e042 <vadd>
 800e786:	eef0 6a40 	vmov.f32	s13, s0
 800e78a:	eeb0 7a60 	vmov.f32	s14, s1
 800e78e:	eef0 7a41 	vmov.f32	s15, s2
 800e792:	edc7 6a04 	vstr	s13, [r7, #16]
 800e796:	ed87 7a05 	vstr	s14, [r7, #20]
 800e79a:	edc7 7a06 	vstr	s15, [r7, #24]
		hover_yaw += curr_eval->yaw;
 800e79e:	6a3b      	ldr	r3, [r7, #32]
 800e7a0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800e7a4:	ed97 7a03 	vldr	s14, [r7, #12]
 800e7a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7ac:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// compute the shortest possible rotation towards 0
	float curr_yaw = normalize_radians(curr_eval->yaw);
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800e7b6:	eeb0 0a67 	vmov.f32	s0, s15
 800e7ba:	f7ff fb05 	bl	800ddc8 <normalize_radians>
 800e7be:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	hover_yaw = normalize_radians(hover_yaw);
 800e7c2:	ed97 0a03 	vldr	s0, [r7, #12]
 800e7c6:	f7ff faff 	bl	800ddc8 <normalize_radians>
 800e7ca:	ed87 0a03 	vstr	s0, [r7, #12]
	float goal_yaw = curr_yaw + shortest_signed_angle_radians(curr_yaw, hover_yaw);
 800e7ce:	edd7 0a03 	vldr	s1, [r7, #12]
 800e7d2:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800e7d6:	f7ff fb45 	bl	800de64 <shortest_signed_angle_radians>
 800e7da:	eeb0 7a40 	vmov.f32	s14, s0
 800e7de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e7e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	f103 0508 	add.w	r5, r3, #8
		curr_eval->pos, curr_yaw, curr_eval->vel, curr_eval->omega.z, curr_eval->acc,
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800e7f6:	f7ff fbbb 	bl	800df70 <vzero>
 800e7fa:	eef0 6a40 	vmov.f32	s13, s0
 800e7fe:	eeb0 7a60 	vmov.f32	s14, s1
 800e802:	eef0 7a41 	vmov.f32	s15, s2
 800e806:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800e80a:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800e80e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800e812:	f7ff fbad 	bl	800df70 <vzero>
 800e816:	eef0 6a40 	vmov.f32	s13, s0
 800e81a:	eeb0 7a60 	vmov.f32	s14, s1
 800e81e:	eef0 7a41 	vmov.f32	s15, s2
 800e822:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800e826:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800e82a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800e82e:	ed97 6a04 	vldr	s12, [r7, #16]
 800e832:	edd7 6a05 	vldr	s13, [r7, #20]
 800e836:	ed97 7a06 	vldr	s14, [r7, #24]
 800e83a:	6a3b      	ldr	r3, [r7, #32]
 800e83c:	edd3 4a06 	vldr	s9, [r3, #24]
 800e840:	ed93 5a07 	vldr	s10, [r3, #28]
 800e844:	edd3 5a08 	vldr	s11, [r3, #32]
 800e848:	6a3b      	ldr	r3, [r7, #32]
 800e84a:	edd3 2a03 	vldr	s5, [r3, #12]
 800e84e:	ed93 3a04 	vldr	s6, [r3, #16]
 800e852:	edd3 3a05 	vldr	s7, [r3, #20]
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	edd3 0a00 	vldr	s1, [r3]
 800e85c:	ed93 1a01 	vldr	s2, [r3, #4]
 800e860:	edd3 1a02 	vldr	s3, [r3, #8]
 800e864:	ac04      	add	r4, sp, #16
 800e866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e86a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e86e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e872:	f04f 0300 	mov.w	r3, #0
 800e876:	9303      	str	r3, [sp, #12]
 800e878:	466c      	mov	r4, sp
 800e87a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e87e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e886:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e88a:	eeb0 4a48 	vmov.f32	s8, s16
 800e88e:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 800e892:	ed97 0a02 	vldr	s0, [r7, #8]
 800e896:	4628      	mov	r0, r5
 800e898:	f001 fe72 	bl	8010580 <piecewise_plan_7th_order_no_jerk>
		hover_pos,      goal_yaw,      vzero(),        0,                  vzero());

	p->reversed = false;
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	2200      	movs	r2, #0
 800e8a0:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	f103 0208 	add.w	r2, r3, #8
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	605a      	str	r2, [r3, #4]
	return 0;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3748      	adds	r7, #72	; 0x48
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	ecbd 8b02 	vpop	{d8}
 800e8ca:	bdb0      	pop	{r4, r5, r7, pc}

0800e8cc <plan_go_to>:

int plan_go_to(struct planner *p, bool relative, struct vec hover_pos, float hover_yaw, float duration, float t)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b096      	sub	sp, #88	; 0x58
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	61f8      	str	r0, [r7, #28]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	eef0 6a40 	vmov.f32	s13, s0
 800e8da:	eeb0 7a60 	vmov.f32	s14, s1
 800e8de:	eef0 7a41 	vmov.f32	s15, s2
 800e8e2:	edc7 1a02 	vstr	s3, [r7, #8]
 800e8e6:	ed87 2a01 	vstr	s4, [r7, #4]
 800e8ea:	edc7 2a00 	vstr	s5, [r7]
 800e8ee:	76fb      	strb	r3, [r7, #27]
 800e8f0:	edc7 6a03 	vstr	s13, [r7, #12]
 800e8f4:	ed87 7a04 	vstr	s14, [r7, #16]
 800e8f8:	edc7 7a05 	vstr	s15, [r7, #20]
	struct traj_eval setpoint = plan_current_goal(p, t);
 800e8fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e900:	ed97 0a00 	vldr	s0, [r7]
 800e904:	69f9      	ldr	r1, [r7, #28]
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff fe01 	bl	800e50e <plan_current_goal>
	return plan_go_to_from(p, &setpoint, relative, hover_pos, hover_yaw, duration, t);
 800e90c:	edd7 6a03 	vldr	s13, [r7, #12]
 800e910:	ed97 7a04 	vldr	s14, [r7, #16]
 800e914:	edd7 7a05 	vldr	s15, [r7, #20]
 800e918:	7efa      	ldrb	r2, [r7, #27]
 800e91a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e91e:	edd7 2a00 	vldr	s5, [r7]
 800e922:	ed97 2a01 	vldr	s4, [r7, #4]
 800e926:	edd7 1a02 	vldr	s3, [r7, #8]
 800e92a:	eeb0 0a66 	vmov.f32	s0, s13
 800e92e:	eef0 0a47 	vmov.f32	s1, s14
 800e932:	eeb0 1a67 	vmov.f32	s2, s15
 800e936:	4619      	mov	r1, r3
 800e938:	69f8      	ldr	r0, [r7, #28]
 800e93a:	f7ff feeb 	bl	800e714 <plan_go_to_from>
 800e93e:	4603      	mov	r3, r0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3758      	adds	r7, #88	; 0x58
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <plan_start_trajectory>:

int plan_start_trajectory(struct planner *p, struct piecewise_traj* trajectory, bool reversed, bool relative, struct vec start_from)
{
 800e948:	b5b0      	push	{r4, r5, r7, lr}
 800e94a:	b0a4      	sub	sp, #144	; 0x90
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e950:	64b9      	str	r1, [r7, #72]	; 0x48
 800e952:	4611      	mov	r1, r2
 800e954:	461a      	mov	r2, r3
 800e956:	eef0 6a40 	vmov.f32	s13, s0
 800e95a:	eeb0 7a60 	vmov.f32	s14, s1
 800e95e:	eef0 7a41 	vmov.f32	s15, s2
 800e962:	460b      	mov	r3, r1
 800e964:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e968:	4613      	mov	r3, r2
 800e96a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800e96e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800e972:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800e976:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	p->reversed = reversed;
 800e97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e97c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e980:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800e982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e984:	2201      	movs	r2, #1
 800e986:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 800e988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e98a:	2200      	movs	r2, #0
 800e98c:	705a      	strb	r2, [r3, #1]
	p->trajectory = trajectory;
 800e98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e992:	605a      	str	r2, [r3, #4]

	if (relative) {
 800e994:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d061      	beq.n	800ea60 <plan_start_trajectory+0x118>
		struct traj_eval traj_init;
		trajectory->shift = vzero();
 800e99c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800e99e:	f7ff fae7 	bl	800df70 <vzero>
 800e9a2:	eef0 6a40 	vmov.f32	s13, s0
 800e9a6:	eeb0 7a60 	vmov.f32	s14, s1
 800e9aa:	eef0 7a41 	vmov.f32	s15, s2
 800e9ae:	edc4 6a02 	vstr	s13, [r4, #8]
 800e9b2:	ed84 7a03 	vstr	s14, [r4, #12]
 800e9b6:	edc4 7a04 	vstr	s15, [r4, #16]
		if (reversed) {
 800e9ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00b      	beq.n	800e9da <plan_start_trajectory+0x92>
			traj_init = piecewise_eval_reversed(trajectory, trajectory->t_begin);
 800e9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9c4:	edd3 7a00 	vldr	s15, [r3]
 800e9c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e9cc:	eeb0 0a67 	vmov.f32	s0, s15
 800e9d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f001 fcd8 	bl	8010388 <piecewise_eval_reversed>
 800e9d8:	e014      	b.n	800ea04 <plan_start_trajectory+0xbc>
		}
		else {
			traj_init = piecewise_eval(trajectory, trajectory->t_begin);
 800e9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9dc:	edd3 7a00 	vldr	s15, [r3]
 800e9e0:	463b      	mov	r3, r7
 800e9e2:	eeb0 0a67 	vmov.f32	s0, s15
 800e9e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f001 fbe3 	bl	80101b4 <piecewise_eval>
 800e9ee:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800e9f2:	463d      	mov	r5, r7
 800e9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea00:	682b      	ldr	r3, [r5, #0]
 800ea02:	6023      	str	r3, [r4, #0]
		}
		struct vec shift_pos = vsub(start_from, traj_init.pos);
 800ea04:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 800ea08:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 800ea0c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800ea10:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ea14:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ea18:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ea1c:	eef0 1a45 	vmov.f32	s3, s10
 800ea20:	eeb0 2a65 	vmov.f32	s4, s11
 800ea24:	eef0 2a46 	vmov.f32	s5, s12
 800ea28:	eeb0 0a66 	vmov.f32	s0, s13
 800ea2c:	eef0 0a47 	vmov.f32	s1, s14
 800ea30:	eeb0 1a67 	vmov.f32	s2, s15
 800ea34:	f7ff fb58 	bl	800e0e8 <vsub>
 800ea38:	eef0 6a40 	vmov.f32	s13, s0
 800ea3c:	eeb0 7a60 	vmov.f32	s14, s1
 800ea40:	eef0 7a41 	vmov.f32	s15, s2
 800ea44:	edc7 6a21 	vstr	s13, [r7, #132]	; 0x84
 800ea48:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 800ea4c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		trajectory->shift = shift_pos;
 800ea50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea52:	3308      	adds	r3, #8
 800ea54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ea58:	ca07      	ldmia	r2, {r0, r1, r2}
 800ea5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea5e:	e00e      	b.n	800ea7e <plan_start_trajectory+0x136>
	}
	else {
		trajectory->shift = vzero();
 800ea60:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800ea62:	f7ff fa85 	bl	800df70 <vzero>
 800ea66:	eef0 6a40 	vmov.f32	s13, s0
 800ea6a:	eeb0 7a60 	vmov.f32	s14, s1
 800ea6e:	eef0 7a41 	vmov.f32	s15, s2
 800ea72:	edc4 6a02 	vstr	s13, [r4, #8]
 800ea76:	ed84 7a03 	vstr	s14, [r4, #12]
 800ea7a:	edc4 7a04 	vstr	s15, [r4, #16]
	}

	return 0;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3790      	adds	r7, #144	; 0x90
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bdb0      	pop	{r4, r5, r7, pc}

0800ea88 <plan_start_compressed_trajectory>:

int plan_start_compressed_trajectory( struct planner *p, struct piecewise_traj_compressed* trajectory, bool relative, struct vec start_from)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b097      	sub	sp, #92	; 0x5c
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6178      	str	r0, [r7, #20]
 800ea90:	6139      	str	r1, [r7, #16]
 800ea92:	4613      	mov	r3, r2
 800ea94:	eef0 6a40 	vmov.f32	s13, s0
 800ea98:	eeb0 7a60 	vmov.f32	s14, s1
 800ea9c:	eef0 7a41 	vmov.f32	s15, s2
 800eaa0:	73fb      	strb	r3, [r7, #15]
 800eaa2:	edc7 6a00 	vstr	s13, [r7]
 800eaa6:	ed87 7a01 	vstr	s14, [r7, #4]
 800eaaa:	edc7 7a02 	vstr	s15, [r7, #8]
	p->reversed = 0;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	2200      	movs	r2, #0
 800eab2:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	2201      	movs	r2, #1
 800eab8:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE_COMPRESSED;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2201      	movs	r2, #1
 800eabe:	705a      	strb	r2, [r3, #1]
	p->compressed_trajectory = trajectory;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	693a      	ldr	r2, [r7, #16]
 800eac4:	605a      	str	r2, [r3, #4]

	if (relative) {
 800eac6:	7bfb      	ldrb	r3, [r7, #15]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d047      	beq.n	800eb5c <plan_start_compressed_trajectory+0xd4>
		trajectory->shift = vzero();
 800eacc:	693c      	ldr	r4, [r7, #16]
 800eace:	f7ff fa4f 	bl	800df70 <vzero>
 800ead2:	eef0 6a40 	vmov.f32	s13, s0
 800ead6:	eeb0 7a60 	vmov.f32	s14, s1
 800eada:	eef0 7a41 	vmov.f32	s15, s2
 800eade:	edc4 6a03 	vstr	s13, [r4, #12]
 800eae2:	ed84 7a04 	vstr	s14, [r4, #16]
 800eae6:	edc4 7a05 	vstr	s15, [r4, #20]
		struct traj_eval traj_init = piecewise_compressed_eval(
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	edd3 7a00 	vldr	s15, [r3]
 800eaf0:	f107 0318 	add.w	r3, r7, #24
 800eaf4:	eeb0 0a67 	vmov.f32	s0, s15
 800eaf8:	6939      	ldr	r1, [r7, #16]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f002 f835 	bl	8010b6a <piecewise_compressed_eval>
			trajectory, trajectory->t_begin
		);
		struct vec shift_pos = vsub(start_from, traj_init.pos);
 800eb00:	ed97 5a06 	vldr	s10, [r7, #24]
 800eb04:	edd7 5a07 	vldr	s11, [r7, #28]
 800eb08:	ed97 6a08 	vldr	s12, [r7, #32]
 800eb0c:	edd7 6a00 	vldr	s13, [r7]
 800eb10:	ed97 7a01 	vldr	s14, [r7, #4]
 800eb14:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb18:	eef0 1a45 	vmov.f32	s3, s10
 800eb1c:	eeb0 2a65 	vmov.f32	s4, s11
 800eb20:	eef0 2a46 	vmov.f32	s5, s12
 800eb24:	eeb0 0a66 	vmov.f32	s0, s13
 800eb28:	eef0 0a47 	vmov.f32	s1, s14
 800eb2c:	eeb0 1a67 	vmov.f32	s2, s15
 800eb30:	f7ff fada 	bl	800e0e8 <vsub>
 800eb34:	eef0 6a40 	vmov.f32	s13, s0
 800eb38:	eeb0 7a60 	vmov.f32	s14, s1
 800eb3c:	eef0 7a41 	vmov.f32	s15, s2
 800eb40:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800eb44:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800eb48:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		trajectory->shift = shift_pos;
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	330c      	adds	r3, #12
 800eb50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800eb54:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eb5a:	e00e      	b.n	800eb7a <plan_start_compressed_trajectory+0xf2>
	} else {
		trajectory->shift = vzero();
 800eb5c:	693c      	ldr	r4, [r7, #16]
 800eb5e:	f7ff fa07 	bl	800df70 <vzero>
 800eb62:	eef0 6a40 	vmov.f32	s13, s0
 800eb66:	eeb0 7a60 	vmov.f32	s14, s1
 800eb6a:	eef0 7a41 	vmov.f32	s15, s2
 800eb6e:	edc4 6a03 	vstr	s13, [r4, #12]
 800eb72:	ed84 7a04 	vstr	s14, [r4, #16]
 800eb76:	edc4 7a05 	vstr	s15, [r4, #20]
	}

	return 0;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	375c      	adds	r7, #92	; 0x5c
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd90      	pop	{r4, r7, pc}

0800eb84 <positionControllerResetAllPID>:
    // saturate
  *thrust = constrain(*thrust, 0, UINT16_MAX);
}

void positionControllerResetAllPID()
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
  pidReset(&this.pidX.pid);
 800eb88:	4809      	ldr	r0, [pc, #36]	; (800ebb0 <positionControllerResetAllPID+0x2c>)
 800eb8a:	f006 f90b 	bl	8014da4 <pidReset>
  pidReset(&this.pidY.pid);
 800eb8e:	4809      	ldr	r0, [pc, #36]	; (800ebb4 <positionControllerResetAllPID+0x30>)
 800eb90:	f006 f908 	bl	8014da4 <pidReset>
  pidReset(&this.pidZ.pid);
 800eb94:	4808      	ldr	r0, [pc, #32]	; (800ebb8 <positionControllerResetAllPID+0x34>)
 800eb96:	f006 f905 	bl	8014da4 <pidReset>
  pidReset(&this.pidVX.pid);
 800eb9a:	4808      	ldr	r0, [pc, #32]	; (800ebbc <positionControllerResetAllPID+0x38>)
 800eb9c:	f006 f902 	bl	8014da4 <pidReset>
  pidReset(&this.pidVY.pid);
 800eba0:	4807      	ldr	r0, [pc, #28]	; (800ebc0 <positionControllerResetAllPID+0x3c>)
 800eba2:	f006 f8ff 	bl	8014da4 <pidReset>
  pidReset(&this.pidVZ.pid);
 800eba6:	4807      	ldr	r0, [pc, #28]	; (800ebc4 <positionControllerResetAllPID+0x40>)
 800eba8:	f006 f8fc 	bl	8014da4 <pidReset>
}
 800ebac:	bf00      	nop
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20000d0c 	.word	0x20000d0c
 800ebb4:	20000d78 	.word	0x20000d78
 800ebb8:	20000de4 	.word	0x20000de4
 800ebbc:	20000bc8 	.word	0x20000bc8
 800ebc0:	20000c34 	.word	0x20000c34
 800ebc4:	20000ca0 	.word	0x20000ca0

0800ebc8 <positionControllerResetAllfilters>:

void positionControllerResetAllfilters() {
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	af00      	add	r7, sp, #0
  filterReset(&this.pidX.pid, POSITION_RATE, posFiltCutoff, posFiltEnable);
 800ebcc:	4b27      	ldr	r3, [pc, #156]	; (800ec6c <positionControllerResetAllfilters+0xa4>)
 800ebce:	edd3 7a00 	vldr	s15, [r3]
 800ebd2:	4b27      	ldr	r3, [pc, #156]	; (800ec70 <positionControllerResetAllfilters+0xa8>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	eef0 0a67 	vmov.f32	s1, s15
 800ebdc:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800ec74 <positionControllerResetAllfilters+0xac>
 800ebe0:	4825      	ldr	r0, [pc, #148]	; (800ec78 <positionControllerResetAllfilters+0xb0>)
 800ebe2:	f006 f8f9 	bl	8014dd8 <filterReset>
  filterReset(&this.pidY.pid, POSITION_RATE, posFiltCutoff, posFiltEnable);
 800ebe6:	4b21      	ldr	r3, [pc, #132]	; (800ec6c <positionControllerResetAllfilters+0xa4>)
 800ebe8:	edd3 7a00 	vldr	s15, [r3]
 800ebec:	4b20      	ldr	r3, [pc, #128]	; (800ec70 <positionControllerResetAllfilters+0xa8>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	eef0 0a67 	vmov.f32	s1, s15
 800ebf6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800ec74 <positionControllerResetAllfilters+0xac>
 800ebfa:	4820      	ldr	r0, [pc, #128]	; (800ec7c <positionControllerResetAllfilters+0xb4>)
 800ebfc:	f006 f8ec 	bl	8014dd8 <filterReset>
  filterReset(&this.pidZ.pid, POSITION_RATE, posZFiltCutoff, posZFiltEnable);
 800ec00:	4b1f      	ldr	r3, [pc, #124]	; (800ec80 <positionControllerResetAllfilters+0xb8>)
 800ec02:	edd3 7a00 	vldr	s15, [r3]
 800ec06:	4b1f      	ldr	r3, [pc, #124]	; (800ec84 <positionControllerResetAllfilters+0xbc>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	eef0 0a67 	vmov.f32	s1, s15
 800ec10:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800ec74 <positionControllerResetAllfilters+0xac>
 800ec14:	481c      	ldr	r0, [pc, #112]	; (800ec88 <positionControllerResetAllfilters+0xc0>)
 800ec16:	f006 f8df 	bl	8014dd8 <filterReset>
  filterReset(&this.pidVX.pid, POSITION_RATE, velFiltCutoff, velFiltEnable);
 800ec1a:	4b1c      	ldr	r3, [pc, #112]	; (800ec8c <positionControllerResetAllfilters+0xc4>)
 800ec1c:	edd3 7a00 	vldr	s15, [r3]
 800ec20:	4b1b      	ldr	r3, [pc, #108]	; (800ec90 <positionControllerResetAllfilters+0xc8>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	4619      	mov	r1, r3
 800ec26:	eef0 0a67 	vmov.f32	s1, s15
 800ec2a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800ec74 <positionControllerResetAllfilters+0xac>
 800ec2e:	4819      	ldr	r0, [pc, #100]	; (800ec94 <positionControllerResetAllfilters+0xcc>)
 800ec30:	f006 f8d2 	bl	8014dd8 <filterReset>
  filterReset(&this.pidVY.pid, POSITION_RATE, velFiltCutoff, velFiltEnable);
 800ec34:	4b15      	ldr	r3, [pc, #84]	; (800ec8c <positionControllerResetAllfilters+0xc4>)
 800ec36:	edd3 7a00 	vldr	s15, [r3]
 800ec3a:	4b15      	ldr	r3, [pc, #84]	; (800ec90 <positionControllerResetAllfilters+0xc8>)
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	4619      	mov	r1, r3
 800ec40:	eef0 0a67 	vmov.f32	s1, s15
 800ec44:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800ec74 <positionControllerResetAllfilters+0xac>
 800ec48:	4813      	ldr	r0, [pc, #76]	; (800ec98 <positionControllerResetAllfilters+0xd0>)
 800ec4a:	f006 f8c5 	bl	8014dd8 <filterReset>
  filterReset(&this.pidVZ.pid, POSITION_RATE, velZFiltCutoff, velZFiltEnable);
 800ec4e:	4b13      	ldr	r3, [pc, #76]	; (800ec9c <positionControllerResetAllfilters+0xd4>)
 800ec50:	edd3 7a00 	vldr	s15, [r3]
 800ec54:	4b12      	ldr	r3, [pc, #72]	; (800eca0 <positionControllerResetAllfilters+0xd8>)
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	eef0 0a67 	vmov.f32	s1, s15
 800ec5e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800ec74 <positionControllerResetAllfilters+0xac>
 800ec62:	4810      	ldr	r0, [pc, #64]	; (800eca4 <positionControllerResetAllfilters+0xdc>)
 800ec64:	f006 f8b8 	bl	8014dd8 <filterReset>
}
 800ec68:	bf00      	nop
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	20000bb4 	.word	0x20000bb4
 800ec70:	20000bb0 	.word	0x20000bb0
 800ec74:	42c80000 	.word	0x42c80000
 800ec78:	20000d0c 	.word	0x20000d0c
 800ec7c:	20000d78 	.word	0x20000d78
 800ec80:	20000bc0 	.word	0x20000bc0
 800ec84:	20000bbc 	.word	0x20000bbc
 800ec88:	20000de4 	.word	0x20000de4
 800ec8c:	20000bb8 	.word	0x20000bb8
 800ec90:	20000bb1 	.word	0x20000bb1
 800ec94:	20000bc8 	.word	0x20000bc8
 800ec98:	20000c34 	.word	0x20000c34
 800ec9c:	20000bc4 	.word	0x20000bc4
 800eca0:	20000bbd 	.word	0x20000bbd
 800eca4:	20000ca0 	.word	0x20000ca0

0800eca8 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800eca8:	b480      	push	{r7}
 800ecaa:	b08f      	sub	sp, #60	; 0x3c
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	ed87 0a07 	vstr	s0, [r7, #28]
 800ecb2:	edc7 0a06 	vstr	s1, [r7, #24]
 800ecb6:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	623b      	str	r3, [r7, #32]
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800ecc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecca:	f107 0220 	add.w	r2, r7, #32
 800ecce:	ca07      	ldmia	r2, {r0, r1, r2}
 800ecd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ecd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	ee06 1a90 	vmov	s13, r1
 800ecde:	ee07 2a10 	vmov	s14, r2
 800ece2:	ee07 3a90 	vmov	s15, r3
}
 800ece6:	eeb0 0a66 	vmov.f32	s0, s13
 800ecea:	eef0 0a47 	vmov.f32	s1, s14
 800ecee:	eeb0 1a67 	vmov.f32	s2, s15
 800ecf2:	373c      	adds	r7, #60	; 0x3c
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <vrepeat>:
static inline struct vec vrepeat(float x) {
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08a      	sub	sp, #40	; 0x28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 800ed06:	ed97 1a05 	vldr	s2, [r7, #20]
 800ed0a:	edd7 0a05 	vldr	s1, [r7, #20]
 800ed0e:	ed97 0a05 	vldr	s0, [r7, #20]
 800ed12:	f7ff ffc9 	bl	800eca8 <mkvec>
 800ed16:	eef0 6a40 	vmov.f32	s13, s0
 800ed1a:	eeb0 7a60 	vmov.f32	s14, s1
 800ed1e:	eef0 7a41 	vmov.f32	s15, s2
 800ed22:	edc7 6a07 	vstr	s13, [r7, #28]
 800ed26:	ed87 7a08 	vstr	s14, [r7, #32]
 800ed2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800ed2e:	69f9      	ldr	r1, [r7, #28]
 800ed30:	6a3a      	ldr	r2, [r7, #32]
 800ed32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed34:	ee06 1a90 	vmov	s13, r1
 800ed38:	ee07 2a10 	vmov	s14, r2
 800ed3c:	ee07 3a90 	vmov	s15, r3
}
 800ed40:	eeb0 0a66 	vmov.f32	s0, s13
 800ed44:	eef0 0a47 	vmov.f32	s1, s14
 800ed48:	eeb0 1a67 	vmov.f32	s2, s15
 800ed4c:	3728      	adds	r7, #40	; 0x28
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
	...

0800ed54 <vzero>:
static inline struct vec vzero(void) {
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b088      	sub	sp, #32
 800ed58:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 800ed5a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800eda0 <vzero+0x4c>
 800ed5e:	f7ff ffcd 	bl	800ecfc <vrepeat>
 800ed62:	eef0 6a40 	vmov.f32	s13, s0
 800ed66:	eeb0 7a60 	vmov.f32	s14, s1
 800ed6a:	eef0 7a41 	vmov.f32	s15, s2
 800ed6e:	edc7 6a05 	vstr	s13, [r7, #20]
 800ed72:	ed87 7a06 	vstr	s14, [r7, #24]
 800ed76:	edc7 7a07 	vstr	s15, [r7, #28]
 800ed7a:	6979      	ldr	r1, [r7, #20]
 800ed7c:	69ba      	ldr	r2, [r7, #24]
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	ee06 1a90 	vmov	s13, r1
 800ed84:	ee07 2a10 	vmov	s14, r2
 800ed88:	ee07 3a90 	vmov	s15, r3
}
 800ed8c:	eeb0 0a66 	vmov.f32	s0, s13
 800ed90:	eef0 0a47 	vmov.f32	s1, s14
 800ed94:	eeb0 1a67 	vmov.f32	s2, s15
 800ed98:	3720      	adds	r7, #32
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	00000000 	.word	0x00000000

0800eda4 <vscl>:
static inline struct vec vscl(float s, struct vec v) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08c      	sub	sp, #48	; 0x30
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	ed87 0a07 	vstr	s0, [r7, #28]
 800edae:	eef0 6a60 	vmov.f32	s13, s1
 800edb2:	eeb0 7a41 	vmov.f32	s14, s2
 800edb6:	eef0 7a61 	vmov.f32	s15, s3
 800edba:	edc7 6a04 	vstr	s13, [r7, #16]
 800edbe:	ed87 7a05 	vstr	s14, [r7, #20]
 800edc2:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 800edc6:	ed97 7a04 	vldr	s14, [r7, #16]
 800edca:	edd7 7a07 	vldr	s15, [r7, #28]
 800edce:	ee67 6a27 	vmul.f32	s13, s14, s15
 800edd2:	ed97 7a05 	vldr	s14, [r7, #20]
 800edd6:	edd7 7a07 	vldr	s15, [r7, #28]
 800edda:	ee27 6a27 	vmul.f32	s12, s14, s15
 800edde:	ed97 7a06 	vldr	s14, [r7, #24]
 800ede2:	edd7 7a07 	vldr	s15, [r7, #28]
 800ede6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edea:	eeb0 1a67 	vmov.f32	s2, s15
 800edee:	eef0 0a46 	vmov.f32	s1, s12
 800edf2:	eeb0 0a66 	vmov.f32	s0, s13
 800edf6:	f7ff ff57 	bl	800eca8 <mkvec>
 800edfa:	eef0 6a40 	vmov.f32	s13, s0
 800edfe:	eeb0 7a60 	vmov.f32	s14, s1
 800ee02:	eef0 7a41 	vmov.f32	s15, s2
 800ee06:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ee0a:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ee0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ee12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	ee06 1a90 	vmov	s13, r1
 800ee1c:	ee07 2a10 	vmov	s14, r2
 800ee20:	ee07 3a90 	vmov	s15, r3
}
 800ee24:	eeb0 0a66 	vmov.f32	s0, s13
 800ee28:	eef0 0a47 	vmov.f32	s1, s14
 800ee2c:	eeb0 1a67 	vmov.f32	s2, s15
 800ee30:	3730      	adds	r7, #48	; 0x30
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <vneg>:
static inline struct vec vneg(struct vec v) {
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b08c      	sub	sp, #48	; 0x30
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	eef0 6a40 	vmov.f32	s13, s0
 800ee40:	eeb0 7a60 	vmov.f32	s14, s1
 800ee44:	eef0 7a41 	vmov.f32	s15, s2
 800ee48:	edc7 6a05 	vstr	s13, [r7, #20]
 800ee4c:	ed87 7a06 	vstr	s14, [r7, #24]
 800ee50:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(-v.x, -v.y, -v.z);
 800ee54:	edd7 7a05 	vldr	s15, [r7, #20]
 800ee58:	eeb1 7a67 	vneg.f32	s14, s15
 800ee5c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ee60:	eef1 6a67 	vneg.f32	s13, s15
 800ee64:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee68:	eef1 7a67 	vneg.f32	s15, s15
 800ee6c:	eeb0 1a67 	vmov.f32	s2, s15
 800ee70:	eef0 0a66 	vmov.f32	s1, s13
 800ee74:	eeb0 0a47 	vmov.f32	s0, s14
 800ee78:	f7ff ff16 	bl	800eca8 <mkvec>
 800ee7c:	eef0 6a40 	vmov.f32	s13, s0
 800ee80:	eeb0 7a60 	vmov.f32	s14, s1
 800ee84:	eef0 7a41 	vmov.f32	s15, s2
 800ee88:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ee8c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ee90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ee94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	ee06 1a90 	vmov	s13, r1
 800ee9e:	ee07 2a10 	vmov	s14, r2
 800eea2:	ee07 3a90 	vmov	s15, r3
}
 800eea6:	eeb0 0a66 	vmov.f32	s0, s13
 800eeaa:	eef0 0a47 	vmov.f32	s1, s14
 800eeae:	eeb0 1a67 	vmov.f32	s2, s15
 800eeb2:	3730      	adds	r7, #48	; 0x30
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <vdiv>:
static inline struct vec vdiv(struct vec v, float s) {
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b08c      	sub	sp, #48	; 0x30
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	eef0 6a40 	vmov.f32	s13, s0
 800eec2:	eeb0 7a60 	vmov.f32	s14, s1
 800eec6:	eef0 7a41 	vmov.f32	s15, s2
 800eeca:	edc7 1a04 	vstr	s3, [r7, #16]
 800eece:	edc7 6a05 	vstr	s13, [r7, #20]
 800eed2:	ed87 7a06 	vstr	s14, [r7, #24]
 800eed6:	edc7 7a07 	vstr	s15, [r7, #28]
	return vscl(1.0f/s, v);
 800eeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eede:	edd7 7a04 	vldr	s15, [r7, #16]
 800eee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eee6:	ed97 6a05 	vldr	s12, [r7, #20]
 800eeea:	edd7 6a06 	vldr	s13, [r7, #24]
 800eeee:	edd7 7a07 	vldr	s15, [r7, #28]
 800eef2:	eef0 0a46 	vmov.f32	s1, s12
 800eef6:	eeb0 1a66 	vmov.f32	s2, s13
 800eefa:	eef0 1a67 	vmov.f32	s3, s15
 800eefe:	eeb0 0a47 	vmov.f32	s0, s14
 800ef02:	f7ff ff4f 	bl	800eda4 <vscl>
 800ef06:	eef0 6a40 	vmov.f32	s13, s0
 800ef0a:	eeb0 7a60 	vmov.f32	s14, s1
 800ef0e:	eef0 7a41 	vmov.f32	s15, s2
 800ef12:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ef16:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ef1a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ef1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef24:	ee06 1a90 	vmov	s13, r1
 800ef28:	ee07 2a10 	vmov	s14, r2
 800ef2c:	ee07 3a90 	vmov	s15, r3
}
 800ef30:	eeb0 0a66 	vmov.f32	s0, s13
 800ef34:	eef0 0a47 	vmov.f32	s1, s14
 800ef38:	eeb0 1a67 	vmov.f32	s2, s15
 800ef3c:	3730      	adds	r7, #48	; 0x30
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b08e      	sub	sp, #56	; 0x38
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	eeb0 5a40 	vmov.f32	s10, s0
 800ef4c:	eef0 5a60 	vmov.f32	s11, s1
 800ef50:	eeb0 6a41 	vmov.f32	s12, s2
 800ef54:	eef0 6a61 	vmov.f32	s13, s3
 800ef58:	eeb0 7a42 	vmov.f32	s14, s4
 800ef5c:	eef0 7a62 	vmov.f32	s15, s5
 800ef60:	ed87 5a07 	vstr	s10, [r7, #28]
 800ef64:	edc7 5a08 	vstr	s11, [r7, #32]
 800ef68:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800ef6c:	edc7 6a04 	vstr	s13, [r7, #16]
 800ef70:	ed87 7a05 	vstr	s14, [r7, #20]
 800ef74:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 800ef78:	ed97 7a07 	vldr	s14, [r7, #28]
 800ef7c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ef80:	ee77 6a27 	vadd.f32	s13, s14, s15
 800ef84:	ed97 7a08 	vldr	s14, [r7, #32]
 800ef88:	edd7 7a05 	vldr	s15, [r7, #20]
 800ef8c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ef90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ef94:	edd7 7a06 	vldr	s15, [r7, #24]
 800ef98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef9c:	eeb0 1a67 	vmov.f32	s2, s15
 800efa0:	eef0 0a46 	vmov.f32	s1, s12
 800efa4:	eeb0 0a66 	vmov.f32	s0, s13
 800efa8:	f7ff fe7e 	bl	800eca8 <mkvec>
 800efac:	eef0 6a40 	vmov.f32	s13, s0
 800efb0:	eeb0 7a60 	vmov.f32	s14, s1
 800efb4:	eef0 7a41 	vmov.f32	s15, s2
 800efb8:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800efbc:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800efc0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800efc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efca:	ee06 1a90 	vmov	s13, r1
 800efce:	ee07 2a10 	vmov	s14, r2
 800efd2:	ee07 3a90 	vmov	s15, r3
}
 800efd6:	eeb0 0a66 	vmov.f32	s0, s13
 800efda:	eef0 0a47 	vmov.f32	s1, s14
 800efde:	eeb0 1a67 	vmov.f32	s2, s15
 800efe2:	3738      	adds	r7, #56	; 0x38
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <vsub>:
static inline struct vec vsub(struct vec a, struct vec b) {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b090      	sub	sp, #64	; 0x40
 800efec:	af00      	add	r7, sp, #0
 800efee:	eeb0 5a40 	vmov.f32	s10, s0
 800eff2:	eef0 5a60 	vmov.f32	s11, s1
 800eff6:	eeb0 6a41 	vmov.f32	s12, s2
 800effa:	eef0 6a61 	vmov.f32	s13, s3
 800effe:	eeb0 7a42 	vmov.f32	s14, s4
 800f002:	eef0 7a62 	vmov.f32	s15, s5
 800f006:	ed87 5a07 	vstr	s10, [r7, #28]
 800f00a:	edc7 5a08 	vstr	s11, [r7, #32]
 800f00e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800f012:	edc7 6a04 	vstr	s13, [r7, #16]
 800f016:	ed87 7a05 	vstr	s14, [r7, #20]
 800f01a:	edc7 7a06 	vstr	s15, [r7, #24]
	return vadd(a, vneg(b));
 800f01e:	edd7 6a04 	vldr	s13, [r7, #16]
 800f022:	ed97 7a05 	vldr	s14, [r7, #20]
 800f026:	edd7 7a06 	vldr	s15, [r7, #24]
 800f02a:	eeb0 0a66 	vmov.f32	s0, s13
 800f02e:	eef0 0a47 	vmov.f32	s1, s14
 800f032:	eeb0 1a67 	vmov.f32	s2, s15
 800f036:	f7ff fefe 	bl	800ee36 <vneg>
 800f03a:	eef0 6a40 	vmov.f32	s13, s0
 800f03e:	eeb0 7a60 	vmov.f32	s14, s1
 800f042:	eef0 7a41 	vmov.f32	s15, s2
 800f046:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800f04a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800f04e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800f052:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800f056:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800f05a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800f05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f062:	ed97 7a08 	vldr	s14, [r7, #32]
 800f066:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f06a:	eef0 1a45 	vmov.f32	s3, s10
 800f06e:	eeb0 2a65 	vmov.f32	s4, s11
 800f072:	eef0 2a46 	vmov.f32	s5, s12
 800f076:	eeb0 0a66 	vmov.f32	s0, s13
 800f07a:	eef0 0a47 	vmov.f32	s1, s14
 800f07e:	eeb0 1a67 	vmov.f32	s2, s15
 800f082:	f7ff ff5e 	bl	800ef42 <vadd>
 800f086:	eef0 6a40 	vmov.f32	s13, s0
 800f08a:	eeb0 7a60 	vmov.f32	s14, s1
 800f08e:	eef0 7a41 	vmov.f32	s15, s2
 800f092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800f096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800f09a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800f09e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	ee06 1a90 	vmov	s13, r1
 800f0a8:	ee07 2a10 	vmov	s14, r2
 800f0ac:	ee07 3a90 	vmov	s15, r3
}
 800f0b0:	eeb0 0a66 	vmov.f32	s0, s13
 800f0b4:	eef0 0a47 	vmov.f32	s1, s14
 800f0b8:	eeb0 1a67 	vmov.f32	s2, s15
 800f0bc:	3740      	adds	r7, #64	; 0x40
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <vdot>:
static inline float vdot(struct vec a, struct vec b) {
 800f0c2:	b480      	push	{r7}
 800f0c4:	b087      	sub	sp, #28
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	eeb0 5a40 	vmov.f32	s10, s0
 800f0cc:	eef0 5a60 	vmov.f32	s11, s1
 800f0d0:	eeb0 6a41 	vmov.f32	s12, s2
 800f0d4:	eef0 6a61 	vmov.f32	s13, s3
 800f0d8:	eeb0 7a42 	vmov.f32	s14, s4
 800f0dc:	eef0 7a62 	vmov.f32	s15, s5
 800f0e0:	ed87 5a03 	vstr	s10, [r7, #12]
 800f0e4:	edc7 5a04 	vstr	s11, [r7, #16]
 800f0e8:	ed87 6a05 	vstr	s12, [r7, #20]
 800f0ec:	edc7 6a00 	vstr	s13, [r7]
 800f0f0:	ed87 7a01 	vstr	s14, [r7, #4]
 800f0f4:	edc7 7a02 	vstr	s15, [r7, #8]
	return a.x * b.x + a.y * b.y + a.z * b.z;
 800f0f8:	ed97 7a03 	vldr	s14, [r7, #12]
 800f0fc:	edd7 7a00 	vldr	s15, [r7]
 800f100:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f104:	edd7 6a04 	vldr	s13, [r7, #16]
 800f108:	edd7 7a01 	vldr	s15, [r7, #4]
 800f10c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f110:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f114:	edd7 6a05 	vldr	s13, [r7, #20]
 800f118:	edd7 7a02 	vldr	s15, [r7, #8]
 800f11c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f120:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800f124:	eeb0 0a67 	vmov.f32	s0, s15
 800f128:	371c      	adds	r7, #28
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr

0800f132 <vmag2>:
static inline float vmag2(struct vec v) {
 800f132:	b580      	push	{r7, lr}
 800f134:	b084      	sub	sp, #16
 800f136:	af00      	add	r7, sp, #0
 800f138:	eef0 6a40 	vmov.f32	s13, s0
 800f13c:	eeb0 7a60 	vmov.f32	s14, s1
 800f140:	eef0 7a41 	vmov.f32	s15, s2
 800f144:	edc7 6a01 	vstr	s13, [r7, #4]
 800f148:	ed87 7a02 	vstr	s14, [r7, #8]
 800f14c:	edc7 7a03 	vstr	s15, [r7, #12]
	return vdot(v, v);
 800f150:	ed97 5a01 	vldr	s10, [r7, #4]
 800f154:	edd7 5a02 	vldr	s11, [r7, #8]
 800f158:	ed97 6a03 	vldr	s12, [r7, #12]
 800f15c:	edd7 6a01 	vldr	s13, [r7, #4]
 800f160:	ed97 7a02 	vldr	s14, [r7, #8]
 800f164:	edd7 7a03 	vldr	s15, [r7, #12]
 800f168:	eef0 1a45 	vmov.f32	s3, s10
 800f16c:	eeb0 2a65 	vmov.f32	s4, s11
 800f170:	eef0 2a46 	vmov.f32	s5, s12
 800f174:	eeb0 0a66 	vmov.f32	s0, s13
 800f178:	eef0 0a47 	vmov.f32	s1, s14
 800f17c:	eeb0 1a67 	vmov.f32	s2, s15
 800f180:	f7ff ff9f 	bl	800f0c2 <vdot>
 800f184:	eef0 7a40 	vmov.f32	s15, s0
}
 800f188:	eeb0 0a67 	vmov.f32	s0, s15
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <vmag>:
static inline float vmag(struct vec v) {
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	eef0 6a40 	vmov.f32	s13, s0
 800f19c:	eeb0 7a60 	vmov.f32	s14, s1
 800f1a0:	eef0 7a41 	vmov.f32	s15, s2
 800f1a4:	edc7 6a01 	vstr	s13, [r7, #4]
 800f1a8:	ed87 7a02 	vstr	s14, [r7, #8]
 800f1ac:	edc7 7a03 	vstr	s15, [r7, #12]
	return sqrtf(vmag2(v));
 800f1b0:	edd7 6a01 	vldr	s13, [r7, #4]
 800f1b4:	ed97 7a02 	vldr	s14, [r7, #8]
 800f1b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800f1bc:	eeb0 0a66 	vmov.f32	s0, s13
 800f1c0:	eef0 0a47 	vmov.f32	s1, s14
 800f1c4:	eeb0 1a67 	vmov.f32	s2, s15
 800f1c8:	f7ff ffb3 	bl	800f132 <vmag2>
 800f1cc:	eef0 7a40 	vmov.f32	s15, s0
 800f1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800f1d4:	f017 fc6e 	bl	8026ab4 <sqrtf>
 800f1d8:	eef0 7a40 	vmov.f32	s15, s0
}
 800f1dc:	eeb0 0a67 	vmov.f32	s0, s15
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <vnormalize>:
static inline struct vec vnormalize(struct vec v) {
 800f1e6:	b580      	push	{r7, lr}
 800f1e8:	b08c      	sub	sp, #48	; 0x30
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	eef0 6a40 	vmov.f32	s13, s0
 800f1f0:	eeb0 7a60 	vmov.f32	s14, s1
 800f1f4:	eef0 7a41 	vmov.f32	s15, s2
 800f1f8:	edc7 6a05 	vstr	s13, [r7, #20]
 800f1fc:	ed87 7a06 	vstr	s14, [r7, #24]
 800f200:	edc7 7a07 	vstr	s15, [r7, #28]
	return vdiv(v, vmag(v));
 800f204:	edd7 6a05 	vldr	s13, [r7, #20]
 800f208:	ed97 7a06 	vldr	s14, [r7, #24]
 800f20c:	edd7 7a07 	vldr	s15, [r7, #28]
 800f210:	eeb0 0a66 	vmov.f32	s0, s13
 800f214:	eef0 0a47 	vmov.f32	s1, s14
 800f218:	eeb0 1a67 	vmov.f32	s2, s15
 800f21c:	f7ff ffb9 	bl	800f192 <vmag>
 800f220:	eeb0 6a40 	vmov.f32	s12, s0
 800f224:	edd7 6a05 	vldr	s13, [r7, #20]
 800f228:	ed97 7a06 	vldr	s14, [r7, #24]
 800f22c:	edd7 7a07 	vldr	s15, [r7, #28]
 800f230:	eef0 1a46 	vmov.f32	s3, s12
 800f234:	eeb0 0a66 	vmov.f32	s0, s13
 800f238:	eef0 0a47 	vmov.f32	s1, s14
 800f23c:	eeb0 1a67 	vmov.f32	s2, s15
 800f240:	f7ff fe3a 	bl	800eeb8 <vdiv>
 800f244:	eef0 6a40 	vmov.f32	s13, s0
 800f248:	eeb0 7a60 	vmov.f32	s14, s1
 800f24c:	eef0 7a41 	vmov.f32	s15, s2
 800f250:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800f254:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800f258:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800f25c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	ee06 1a90 	vmov	s13, r1
 800f266:	ee07 2a10 	vmov	s14, r2
 800f26a:	ee07 3a90 	vmov	s15, r3
}
 800f26e:	eeb0 0a66 	vmov.f32	s0, s13
 800f272:	eef0 0a47 	vmov.f32	s1, s14
 800f276:	eeb0 1a67 	vmov.f32	s2, s15
 800f27a:	3730      	adds	r7, #48	; 0x30
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <vcross>:
static inline struct vec vcross(struct vec a, struct vec b) {
 800f280:	b580      	push	{r7, lr}
 800f282:	b08e      	sub	sp, #56	; 0x38
 800f284:	af00      	add	r7, sp, #0
 800f286:	eeb0 5a40 	vmov.f32	s10, s0
 800f28a:	eef0 5a60 	vmov.f32	s11, s1
 800f28e:	eeb0 6a41 	vmov.f32	s12, s2
 800f292:	eef0 6a61 	vmov.f32	s13, s3
 800f296:	eeb0 7a42 	vmov.f32	s14, s4
 800f29a:	eef0 7a62 	vmov.f32	s15, s5
 800f29e:	ed87 5a07 	vstr	s10, [r7, #28]
 800f2a2:	edc7 5a08 	vstr	s11, [r7, #32]
 800f2a6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800f2aa:	edc7 6a04 	vstr	s13, [r7, #16]
 800f2ae:	ed87 7a05 	vstr	s14, [r7, #20]
 800f2b2:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
 800f2b6:	ed97 7a08 	vldr	s14, [r7, #32]
 800f2ba:	edd7 7a06 	vldr	s15, [r7, #24]
 800f2be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f2c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800f2ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ce:	ee37 6a67 	vsub.f32	s12, s14, s15
 800f2d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f2d6:	edd7 7a04 	vldr	s15, [r7, #16]
 800f2da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2de:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2e2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f2e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ea:	ee77 5a67 	vsub.f32	s11, s14, s15
 800f2ee:	ed97 7a07 	vldr	s14, [r7, #28]
 800f2f2:	edd7 7a05 	vldr	s15, [r7, #20]
 800f2f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2fa:	edd7 6a08 	vldr	s13, [r7, #32]
 800f2fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800f302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f30a:	eeb0 1a67 	vmov.f32	s2, s15
 800f30e:	eef0 0a65 	vmov.f32	s1, s11
 800f312:	eeb0 0a46 	vmov.f32	s0, s12
 800f316:	f7ff fcc7 	bl	800eca8 <mkvec>
 800f31a:	eef0 6a40 	vmov.f32	s13, s0
 800f31e:	eeb0 7a60 	vmov.f32	s14, s1
 800f322:	eef0 7a41 	vmov.f32	s15, s2
 800f326:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800f32a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800f32e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800f332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f338:	ee06 1a90 	vmov	s13, r1
 800f33c:	ee07 2a10 	vmov	s14, r2
 800f340:	ee07 3a90 	vmov	s15, r3
}
 800f344:	eeb0 0a66 	vmov.f32	s0, s13
 800f348:	eef0 0a47 	vmov.f32	s1, s14
 800f34c:	eeb0 1a67 	vmov.f32	s2, s15
 800f350:	3738      	adds	r7, #56	; 0x38
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <vprojectunit>:
static inline struct vec vprojectunit(struct vec a, struct vec b_unit) {
 800f356:	b580      	push	{r7, lr}
 800f358:	b08e      	sub	sp, #56	; 0x38
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	eeb0 5a40 	vmov.f32	s10, s0
 800f360:	eef0 5a60 	vmov.f32	s11, s1
 800f364:	eeb0 6a41 	vmov.f32	s12, s2
 800f368:	eef0 6a61 	vmov.f32	s13, s3
 800f36c:	eeb0 7a42 	vmov.f32	s14, s4
 800f370:	eef0 7a62 	vmov.f32	s15, s5
 800f374:	ed87 5a07 	vstr	s10, [r7, #28]
 800f378:	edc7 5a08 	vstr	s11, [r7, #32]
 800f37c:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800f380:	edc7 6a04 	vstr	s13, [r7, #16]
 800f384:	ed87 7a05 	vstr	s14, [r7, #20]
 800f388:	edc7 7a06 	vstr	s15, [r7, #24]
	return vscl(vdot(a, b_unit), b_unit);
 800f38c:	ed97 5a04 	vldr	s10, [r7, #16]
 800f390:	edd7 5a05 	vldr	s11, [r7, #20]
 800f394:	ed97 6a06 	vldr	s12, [r7, #24]
 800f398:	edd7 6a07 	vldr	s13, [r7, #28]
 800f39c:	ed97 7a08 	vldr	s14, [r7, #32]
 800f3a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f3a4:	eef0 1a45 	vmov.f32	s3, s10
 800f3a8:	eeb0 2a65 	vmov.f32	s4, s11
 800f3ac:	eef0 2a46 	vmov.f32	s5, s12
 800f3b0:	eeb0 0a66 	vmov.f32	s0, s13
 800f3b4:	eef0 0a47 	vmov.f32	s1, s14
 800f3b8:	eeb0 1a67 	vmov.f32	s2, s15
 800f3bc:	f7ff fe81 	bl	800f0c2 <vdot>
 800f3c0:	eeb0 6a40 	vmov.f32	s12, s0
 800f3c4:	edd7 6a04 	vldr	s13, [r7, #16]
 800f3c8:	ed97 7a05 	vldr	s14, [r7, #20]
 800f3cc:	edd7 7a06 	vldr	s15, [r7, #24]
 800f3d0:	eef0 0a66 	vmov.f32	s1, s13
 800f3d4:	eeb0 1a47 	vmov.f32	s2, s14
 800f3d8:	eef0 1a67 	vmov.f32	s3, s15
 800f3dc:	eeb0 0a46 	vmov.f32	s0, s12
 800f3e0:	f7ff fce0 	bl	800eda4 <vscl>
 800f3e4:	eef0 6a40 	vmov.f32	s13, s0
 800f3e8:	eeb0 7a60 	vmov.f32	s14, s1
 800f3ec:	eef0 7a41 	vmov.f32	s15, s2
 800f3f0:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800f3f4:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800f3f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800f3fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f402:	ee06 1a90 	vmov	s13, r1
 800f406:	ee07 2a10 	vmov	s14, r2
 800f40a:	ee07 3a90 	vmov	s15, r3
}
 800f40e:	eeb0 0a66 	vmov.f32	s0, s13
 800f412:	eef0 0a47 	vmov.f32	s1, s14
 800f416:	eeb0 1a67 	vmov.f32	s2, s15
 800f41a:	3738      	adds	r7, #56	; 0x38
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <vorthunit>:
static inline struct vec vorthunit(struct vec a, struct vec b_unit) {
 800f420:	b580      	push	{r7, lr}
 800f422:	b090      	sub	sp, #64	; 0x40
 800f424:	af00      	add	r7, sp, #0
 800f426:	eeb0 5a40 	vmov.f32	s10, s0
 800f42a:	eef0 5a60 	vmov.f32	s11, s1
 800f42e:	eeb0 6a41 	vmov.f32	s12, s2
 800f432:	eef0 6a61 	vmov.f32	s13, s3
 800f436:	eeb0 7a42 	vmov.f32	s14, s4
 800f43a:	eef0 7a62 	vmov.f32	s15, s5
 800f43e:	ed87 5a07 	vstr	s10, [r7, #28]
 800f442:	edc7 5a08 	vstr	s11, [r7, #32]
 800f446:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800f44a:	edc7 6a04 	vstr	s13, [r7, #16]
 800f44e:	ed87 7a05 	vstr	s14, [r7, #20]
 800f452:	edc7 7a06 	vstr	s15, [r7, #24]
	return vsub(a, vprojectunit(a, b_unit));
 800f456:	ed97 5a04 	vldr	s10, [r7, #16]
 800f45a:	edd7 5a05 	vldr	s11, [r7, #20]
 800f45e:	ed97 6a06 	vldr	s12, [r7, #24]
 800f462:	edd7 6a07 	vldr	s13, [r7, #28]
 800f466:	ed97 7a08 	vldr	s14, [r7, #32]
 800f46a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f46e:	eef0 1a45 	vmov.f32	s3, s10
 800f472:	eeb0 2a65 	vmov.f32	s4, s11
 800f476:	eef0 2a46 	vmov.f32	s5, s12
 800f47a:	eeb0 0a66 	vmov.f32	s0, s13
 800f47e:	eef0 0a47 	vmov.f32	s1, s14
 800f482:	eeb0 1a67 	vmov.f32	s2, s15
 800f486:	f7ff ff66 	bl	800f356 <vprojectunit>
 800f48a:	eef0 6a40 	vmov.f32	s13, s0
 800f48e:	eeb0 7a60 	vmov.f32	s14, s1
 800f492:	eef0 7a41 	vmov.f32	s15, s2
 800f496:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800f49a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800f49e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800f4a2:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800f4a6:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800f4aa:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800f4ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4b2:	ed97 7a08 	vldr	s14, [r7, #32]
 800f4b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f4ba:	eef0 1a45 	vmov.f32	s3, s10
 800f4be:	eeb0 2a65 	vmov.f32	s4, s11
 800f4c2:	eef0 2a46 	vmov.f32	s5, s12
 800f4c6:	eeb0 0a66 	vmov.f32	s0, s13
 800f4ca:	eef0 0a47 	vmov.f32	s1, s14
 800f4ce:	eeb0 1a67 	vmov.f32	s2, s15
 800f4d2:	f7ff fd89 	bl	800efe8 <vsub>
 800f4d6:	eef0 6a40 	vmov.f32	s13, s0
 800f4da:	eeb0 7a60 	vmov.f32	s14, s1
 800f4de:	eef0 7a41 	vmov.f32	s15, s2
 800f4e2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800f4e6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800f4ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800f4ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f4:	ee06 1a90 	vmov	s13, r1
 800f4f8:	ee07 2a10 	vmov	s14, r2
 800f4fc:	ee07 3a90 	vmov	s15, r3
}
 800f500:	eeb0 0a66 	vmov.f32	s0, s13
 800f504:	eef0 0a47 	vmov.f32	s1, s14
 800f508:	eeb0 1a67 	vmov.f32	s2, s15
 800f50c:	3740      	adds	r7, #64	; 0x40
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <polylinear>:
static struct poly4d poly4d_tmp;

// polynomials are stored with ascending degree

void polylinear(float p[PP_SIZE], float duration, float x0, float x1)
{
 800f512:	b480      	push	{r7}
 800f514:	b087      	sub	sp, #28
 800f516:	af00      	add	r7, sp, #0
 800f518:	60f8      	str	r0, [r7, #12]
 800f51a:	ed87 0a02 	vstr	s0, [r7, #8]
 800f51e:	edc7 0a01 	vstr	s1, [r7, #4]
 800f522:	ed87 1a00 	vstr	s2, [r7]
	p[0] = x0;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	601a      	str	r2, [r3, #0]
	p[1] = (x1 - x0) / duration;
 800f52c:	ed97 7a00 	vldr	s14, [r7]
 800f530:	edd7 7a01 	vldr	s15, [r7, #4]
 800f534:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	3304      	adds	r3, #4
 800f53c:	ed97 7a02 	vldr	s14, [r7, #8]
 800f540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f544:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 2; i < PP_SIZE; ++i) {
 800f548:	2302      	movs	r3, #2
 800f54a:	617b      	str	r3, [r7, #20]
 800f54c:	e009      	b.n	800f562 <polylinear+0x50>
		p[i] = 0;
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	4413      	add	r3, r2
 800f556:	f04f 0200 	mov.w	r2, #0
 800f55a:	601a      	str	r2, [r3, #0]
	for (int i = 2; i < PP_SIZE; ++i) {
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	3301      	adds	r3, #1
 800f560:	617b      	str	r3, [r7, #20]
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	2b07      	cmp	r3, #7
 800f566:	ddf2      	ble.n	800f54e <polylinear+0x3c>
	}
}
 800f568:	bf00      	nop
 800f56a:	bf00      	nop
 800f56c:	371c      	adds	r7, #28
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr
	...

0800f578 <polybezier>:

// precalculated factorials that we will need
static const int facs[PP_SIZE] = { 1, 1, 2, 6, 24, 120, 720, 5040 };

void polybezier(float p[PP_SIZE], float duration, float* x, int dim) {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08a      	sub	sp, #40	; 0x28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	ed87 0a02 	vstr	s0, [r7, #8]
 800f584:	6079      	str	r1, [r7, #4]
 800f586:	603a      	str	r2, [r7, #0]
	int i, j, n, sign;
	float coeff;

	if (dim <= 0) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f340 8094 	ble.w	800f6b8 <polybezier+0x140>
		/* nothing to do */
	} else if (dim == 1) {
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d104      	bne.n	800f5a0 <polybezier+0x28>
		p[0] = x[0];
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	601a      	str	r2, [r3, #0]
			}
			p[j] = coeff * facs[n] / facs[n-j];
		}
		polystretchtime(p, duration);
	}
}
 800f59e:	e08b      	b.n	800f6b8 <polybezier+0x140>
	} else if (dim == 2) {
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d110      	bne.n	800f5c8 <polybezier+0x50>
		polylinear(p, duration, x[0], x[1]);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	edd3 7a00 	vldr	s15, [r3]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	ed93 7a00 	vldr	s14, [r3]
 800f5b4:	eeb0 1a47 	vmov.f32	s2, s14
 800f5b8:	eef0 0a67 	vmov.f32	s1, s15
 800f5bc:	ed97 0a02 	vldr	s0, [r7, #8]
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f7ff ffa6 	bl	800f512 <polylinear>
}
 800f5c6:	e077      	b.n	800f6b8 <polybezier+0x140>
		n = ((dim < PP_SIZE) ? dim : PP_SIZE) - 1;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	2b08      	cmp	r3, #8
 800f5cc:	bfa8      	it	ge
 800f5ce:	2308      	movge	r3, #8
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	617b      	str	r3, [r7, #20]
		sign = 1;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	61fb      	str	r3, [r7, #28]
		for (j = 0; j <= n; j++) {
 800f5d8:	2300      	movs	r3, #0
 800f5da:	623b      	str	r3, [r7, #32]
 800f5dc:	e063      	b.n	800f6a6 <polybezier+0x12e>
			coeff = 0;
 800f5de:	f04f 0300 	mov.w	r3, #0
 800f5e2:	61bb      	str	r3, [r7, #24]
			sign = (j % 2) ? -1 : 1;
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	f003 0301 	and.w	r3, r3, #1
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <polybezier+0x7c>
 800f5ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5f2:	e000      	b.n	800f5f6 <polybezier+0x7e>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	61fb      	str	r3, [r7, #28]
			for (i = 0; i <= j; i++, sign *= -1) {
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f5fc:	e02e      	b.n	800f65c <polybezier+0xe4>
				coeff += sign * x[i] / facs[i] / facs[j-i];
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	ee07 3a90 	vmov	s15, r3
 800f604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	4413      	add	r3, r2
 800f610:	edd3 7a00 	vldr	s15, [r3]
 800f614:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f618:	4a29      	ldr	r2, [pc, #164]	; (800f6c0 <polybezier+0x148>)
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f620:	ee07 3a90 	vmov	s15, r3
 800f624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f628:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f62c:	6a3a      	ldr	r2, [r7, #32]
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	4a23      	ldr	r2, [pc, #140]	; (800f6c0 <polybezier+0x148>)
 800f634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f638:	ee07 3a90 	vmov	s15, r3
 800f63c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f644:	ed97 7a06 	vldr	s14, [r7, #24]
 800f648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f64c:	edc7 7a06 	vstr	s15, [r7, #24]
			for (i = 0; i <= j; i++, sign *= -1) {
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	3301      	adds	r3, #1
 800f654:	627b      	str	r3, [r7, #36]	; 0x24
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	425b      	negs	r3, r3
 800f65a:	61fb      	str	r3, [r7, #28]
 800f65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f65e:	6a3b      	ldr	r3, [r7, #32]
 800f660:	429a      	cmp	r2, r3
 800f662:	ddcc      	ble.n	800f5fe <polybezier+0x86>
			p[j] = coeff * facs[n] / facs[n-j];
 800f664:	4a16      	ldr	r2, [pc, #88]	; (800f6c0 <polybezier+0x148>)
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f66c:	ee07 3a90 	vmov	s15, r3
 800f670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f674:	edd7 7a06 	vldr	s15, [r7, #24]
 800f678:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	4a0f      	ldr	r2, [pc, #60]	; (800f6c0 <polybezier+0x148>)
 800f684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f688:	ee07 3a90 	vmov	s15, r3
 800f68c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	4413      	add	r3, r2
 800f698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f69c:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j <= n; j++) {
 800f6a0:	6a3b      	ldr	r3, [r7, #32]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	623b      	str	r3, [r7, #32]
 800f6a6:	6a3a      	ldr	r2, [r7, #32]
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	dd97      	ble.n	800f5de <polybezier+0x66>
		polystretchtime(p, duration);
 800f6ae:	ed97 0a02 	vldr	s0, [r7, #8]
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f000 f806 	bl	800f6c4 <polystretchtime>
}
 800f6b8:	bf00      	nop
 800f6ba:	3728      	adds	r7, #40	; 0x28
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	0802f048 	.word	0x0802f048

0800f6c4 <polystretchtime>:
	}
}

// e.g. if s==2 the new polynomial will be stretched to take 2x longer
void polystretchtime(float p[PP_SIZE], float s)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	ed87 0a00 	vstr	s0, [r7]
	float recip = 1.0f / s;
 800f6d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6d4:	ed97 7a00 	vldr	s14, [r7]
 800f6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6dc:	edc7 7a03 	vstr	s15, [r7, #12]
	float scale = recip;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < PP_SIZE; ++i) {
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	613b      	str	r3, [r7, #16]
 800f6e8:	e01a      	b.n	800f720 <polystretchtime+0x5c>
		p[i] *= scale;
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	ed93 7a00 	vldr	s14, [r3]
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	edd7 7a05 	vldr	s15, [r7, #20]
 800f702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f706:	edc3 7a00 	vstr	s15, [r3]
		scale *= recip;
 800f70a:	ed97 7a05 	vldr	s14, [r7, #20]
 800f70e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f716:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 1; i < PP_SIZE; ++i) {
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	3301      	adds	r3, #1
 800f71e:	613b      	str	r3, [r7, #16]
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	2b07      	cmp	r3, #7
 800f724:	dde1      	ble.n	800f6ea <polystretchtime+0x26>
	}
}
 800f726:	bf00      	nop
 800f728:	bf00      	nop
 800f72a:	371c      	adds	r7, #28
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <polyreflect>:

void polyreflect(float p[PP_SIZE])
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < PP_SIZE; i += 2) {
 800f73c:	2301      	movs	r3, #1
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	e010      	b.n	800f764 <polyreflect+0x30>
		p[i] = -p[i];
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	4413      	add	r3, r2
 800f74a:	edd3 7a00 	vldr	s15, [r3]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	4413      	add	r3, r2
 800f756:	eef1 7a67 	vneg.f32	s15, s15
 800f75a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i < PP_SIZE; i += 2) {
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	3302      	adds	r3, #2
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b07      	cmp	r3, #7
 800f768:	ddeb      	ble.n	800f742 <polyreflect+0xe>
	}
}
 800f76a:	bf00      	nop
 800f76c:	bf00      	nop
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <polyval>:

// evaluate a polynomial using horner's rule.
float polyval(float const p[PP_SIZE], float t)
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	ed87 0a00 	vstr	s0, [r7]
	float x = 0.0;
 800f784:	f04f 0300 	mov.w	r3, #0
 800f788:	60fb      	str	r3, [r7, #12]
	for (int i = PP_DEGREE; i >= 0; --i) {
 800f78a:	2307      	movs	r3, #7
 800f78c:	60bb      	str	r3, [r7, #8]
 800f78e:	e012      	b.n	800f7b6 <polyval+0x3e>
		x = x * t + p[i];
 800f790:	ed97 7a03 	vldr	s14, [r7, #12]
 800f794:	edd7 7a00 	vldr	s15, [r7]
 800f798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	edd3 7a00 	vldr	s15, [r3]
 800f7a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7ac:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = PP_DEGREE; i >= 0; --i) {
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	60bb      	str	r3, [r7, #8]
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	dae9      	bge.n	800f790 <polyval+0x18>
	}
	return x;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	ee07 3a90 	vmov	s15, r3
}
 800f7c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <polyder>:

// compute derivative of a polynomial in place
void polyder(float p[PP_SIZE])
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
	for (int i = 1; i <= PP_DEGREE; ++i) {
 800f7d8:	2301      	movs	r3, #1
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	e018      	b.n	800f810 <polyder+0x40>
		p[i-1] = i * p[i];
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	ee07 3a90 	vmov	s15, r3
 800f7e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	edd3 7a00 	vldr	s15, [r3]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	4413      	add	r3, r2
 800f802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f806:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= PP_DEGREE; ++i) {
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3301      	adds	r3, #1
 800f80e:	60fb      	str	r3, [r7, #12]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2b07      	cmp	r3, #7
 800f814:	dde3      	ble.n	800f7de <polyder+0xe>
	}
	p[PP_DEGREE] = 0;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	331c      	adds	r3, #28
 800f81a:	f04f 0200 	mov.w	r2, #0
 800f81e:	601a      	str	r2, [r3, #0]
}
 800f820:	bf00      	nop
 800f822:	3714      	adds	r7, #20
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <poly7_nojerk>:
}

static void poly7_nojerk(float poly[PP_SIZE], float T,
	float x0, float dx0, float ddx0,
	float xf, float dxf, float ddxf)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b091      	sub	sp, #68	; 0x44
 800f830:	af00      	add	r7, sp, #0
 800f832:	61f8      	str	r0, [r7, #28]
 800f834:	ed87 0a06 	vstr	s0, [r7, #24]
 800f838:	edc7 0a05 	vstr	s1, [r7, #20]
 800f83c:	ed87 1a04 	vstr	s2, [r7, #16]
 800f840:	edc7 1a03 	vstr	s3, [r7, #12]
 800f844:	ed87 2a02 	vstr	s4, [r7, #8]
 800f848:	edc7 2a01 	vstr	s5, [r7, #4]
 800f84c:	ed87 3a00 	vstr	s6, [r7]
	if (T <= 0.0f) {
 800f850:	edd7 7a06 	vldr	s15, [r7, #24]
 800f854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85c:	d821      	bhi.n	800f8a2 <poly7_nojerk+0x76>
		poly[0] = xf;
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	68ba      	ldr	r2, [r7, #8]
 800f862:	601a      	str	r2, [r3, #0]
		poly[1] = dxf;
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	3304      	adds	r3, #4
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]
		poly[2] = ddxf/2;
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	3308      	adds	r3, #8
 800f870:	ed97 7a00 	vldr	s14, [r7]
 800f874:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f87c:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 3; i < PP_SIZE; ++i) {
 800f880:	2303      	movs	r3, #3
 800f882:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f884:	e009      	b.n	800f89a <poly7_nojerk+0x6e>
			poly[i] = 0;
 800f886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	69fa      	ldr	r2, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	f04f 0200 	mov.w	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
		for (int i = 3; i < PP_SIZE; ++i) {
 800f894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f896:	3301      	adds	r3, #1
 800f898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f89c:	2b07      	cmp	r3, #7
 800f89e:	ddf2      	ble.n	800f886 <poly7_nojerk+0x5a>
		poly[7] = (2*(10*x0 - 10*xf + 5*T*dx0 + 5*T*dxf + T2*ddx0 - T2*ddxf))/T7;
		for (int i = 8; i < PP_SIZE; ++i) {
			poly[i] = 0;
		}
	}
}
 800f8a0:	e16b      	b.n	800fb7a <poly7_nojerk+0x34e>
		float T2 = T * T;
 800f8a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f8aa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float T3 = T2 * T;
 800f8ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f8b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float T4 = T3 * T;
 800f8be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f8c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float T5 = T4 * T;
 800f8ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f8d2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float T6 = T5 * T;
 800f8de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f8e2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float T7 = T6 * T;
 800f8ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f8f2:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8fa:	edc7 7a08 	vstr	s15, [r7, #32]
		poly[0] = x0;
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	697a      	ldr	r2, [r7, #20]
 800f902:	601a      	str	r2, [r3, #0]
		poly[1] = dx0;
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	3304      	adds	r3, #4
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	601a      	str	r2, [r3, #0]
		poly[2] = ddx0/2;
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	3308      	adds	r3, #8
 800f910:	ed97 7a03 	vldr	s14, [r7, #12]
 800f914:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f91c:	edc3 7a00 	vstr	s15, [r3]
		poly[3] = 0;
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	330c      	adds	r3, #12
 800f924:	f04f 0200 	mov.w	r2, #0
 800f928:	601a      	str	r2, [r3, #0]
		poly[4] = -(5*(14*x0 - 14*xf + 8*T*dx0 + 6*T*dxf + 2*T2*ddx0 - T2*ddxf))/(2*T4);
 800f92a:	edd7 7a05 	vldr	s15, [r7, #20]
 800f92e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800f932:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f936:	edd7 7a02 	vldr	s15, [r7, #8]
 800f93a:	eef2 6a0c 	vmov.f32	s13, #44	; 0x41600000  14.0
 800f93e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f942:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f946:	edd7 7a06 	vldr	s15, [r7, #24]
 800f94a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800f94e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f952:	edd7 7a04 	vldr	s15, [r7, #16]
 800f956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f95a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f95e:	edd7 7a06 	vldr	s15, [r7, #24]
 800f962:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800f966:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f96a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f96e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f972:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f976:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f97a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f97e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f98a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800f98e:	edd7 7a00 	vldr	s15, [r7]
 800f992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f99a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800f99e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9a2:	eef1 6a67 	vneg.f32	s13, s15
 800f9a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f9aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	3310      	adds	r3, #16
 800f9b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9b6:	edc3 7a00 	vstr	s15, [r3]
		poly[5] = (84*x0 - 84*xf + 45*T*dx0 + 39*T*dxf + 10*T2*ddx0 - 7*T2*ddxf)/T5;
 800f9ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800f9be:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800fb88 <poly7_nojerk+0x35c>
 800f9c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f9c6:	edd7 7a02 	vldr	s15, [r7, #8]
 800f9ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fb88 <poly7_nojerk+0x35c>
 800f9ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f9d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9d6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f9da:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800fb8c <poly7_nojerk+0x360>
 800f9de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f9e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800f9e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f9ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9ee:	edd7 7a06 	vldr	s15, [r7, #24]
 800f9f2:	eddf 6a67 	vldr	s13, [pc, #412]	; 800fb90 <poly7_nojerk+0x364>
 800f9f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f9fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800f9fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fa0a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800fa0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fa12:	edd7 7a03 	vldr	s15, [r7, #12]
 800fa16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fa22:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800fa26:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fa2a:	edd7 7a00 	vldr	s15, [r7]
 800fa2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa32:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	3314      	adds	r3, #20
 800fa3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800fa3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa42:	edc3 7a00 	vstr	s15, [r3]
		poly[6] = -(140*x0 - 140*xf + 72*T*dx0 + 68*T*dxf + 15*T2*ddx0 - 13*T2*ddxf)/(2*T6);
 800fa46:	edd7 7a05 	vldr	s15, [r7, #20]
 800fa4a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800fb94 <poly7_nojerk+0x368>
 800fa4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fa52:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fb94 <poly7_nojerk+0x368>
 800fa5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa62:	edd7 7a06 	vldr	s15, [r7, #24]
 800fa66:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800fb98 <poly7_nojerk+0x36c>
 800fa6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fa6e:	edd7 7a04 	vldr	s15, [r7, #16]
 800fa72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa7a:	edd7 7a06 	vldr	s15, [r7, #24]
 800fa7e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800fb9c <poly7_nojerk+0x370>
 800fa82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fa86:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fa96:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800fa9a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fa9e:	edd7 7a03 	vldr	s15, [r7, #12]
 800faa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800faa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800faaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800faae:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 800fab2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fab6:	edd7 7a00 	vldr	s15, [r7]
 800faba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fabe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fac2:	eef1 6a67 	vneg.f32	s13, s15
 800fac6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800faca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	3318      	adds	r3, #24
 800fad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fad6:	edc3 7a00 	vstr	s15, [r3]
		poly[7] = (2*(10*x0 - 10*xf + 5*T*dx0 + 5*T*dxf + T2*ddx0 - T2*ddxf))/T7;
 800fada:	edd7 7a05 	vldr	s15, [r7, #20]
 800fade:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800fae2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fae6:	edd7 7a02 	vldr	s15, [r7, #8]
 800faea:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800faee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800faf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faf6:	edd7 7a06 	vldr	s15, [r7, #24]
 800fafa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800fafe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fb02:	edd7 7a04 	vldr	s15, [r7, #16]
 800fb06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb0e:	edd7 7a06 	vldr	s15, [r7, #24]
 800fb12:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800fb16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fb1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fb1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb26:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800fb2a:	edd7 7a03 	vldr	s15, [r7, #12]
 800fb2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb36:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800fb3a:	edd7 7a00 	vldr	s15, [r7]
 800fb3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb46:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	331c      	adds	r3, #28
 800fb4e:	ed97 7a08 	vldr	s14, [r7, #32]
 800fb52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb56:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 8; i < PP_SIZE; ++i) {
 800fb5a:	2308      	movs	r3, #8
 800fb5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb5e:	e009      	b.n	800fb74 <poly7_nojerk+0x348>
			poly[i] = 0;
 800fb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	69fa      	ldr	r2, [r7, #28]
 800fb66:	4413      	add	r3, r2
 800fb68:	f04f 0200 	mov.w	r2, #0
 800fb6c:	601a      	str	r2, [r3, #0]
		for (int i = 8; i < PP_SIZE; ++i) {
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb70:	3301      	adds	r3, #1
 800fb72:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	2b07      	cmp	r3, #7
 800fb78:	ddf2      	ble.n	800fb60 <poly7_nojerk+0x334>
}
 800fb7a:	bf00      	nop
 800fb7c:	3744      	adds	r7, #68	; 0x44
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	42a80000 	.word	0x42a80000
 800fb8c:	42340000 	.word	0x42340000
 800fb90:	421c0000 	.word	0x421c0000
 800fb94:	430c0000 	.word	0x430c0000
 800fb98:	42900000 	.word	0x42900000
 800fb9c:	42880000 	.word	0x42880000

0800fba0 <poly4d_shift>:
	polyscale(p->p[2], z);
	polyscale(p->p[3], yaw);
}

void poly4d_shift(struct poly4d *p, float x, float y, float z, float yaw)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b087      	sub	sp, #28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6178      	str	r0, [r7, #20]
 800fba8:	ed87 0a04 	vstr	s0, [r7, #16]
 800fbac:	edc7 0a03 	vstr	s1, [r7, #12]
 800fbb0:	ed87 1a02 	vstr	s2, [r7, #8]
 800fbb4:	edc7 1a01 	vstr	s3, [r7, #4]
	p->p[0][0] += x;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	ed93 7a00 	vldr	s14, [r3]
 800fbbe:	edd7 7a04 	vldr	s15, [r7, #16]
 800fbc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	edc3 7a00 	vstr	s15, [r3]
	p->p[1][0] += y;
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	ed93 7a08 	vldr	s14, [r3, #32]
 800fbd2:	edd7 7a03 	vldr	s15, [r7, #12]
 800fbd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	edc3 7a08 	vstr	s15, [r3, #32]
	p->p[2][0] += z;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800fbe6:	edd7 7a02 	vldr	s15, [r7, #8]
 800fbea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	p->p[3][0] += yaw;
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800fbfa:	edd7 7a01 	vldr	s15, [r7, #4]
 800fbfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800fc08:	bf00      	nop
 800fc0a:	371c      	adds	r7, #28
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <poly4d_stretchtime>:

void poly4d_stretchtime(struct poly4d *p, float s)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0; i < 4; ++i) {
 800fc20:	2300      	movs	r3, #0
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e00b      	b.n	800fc3e <poly4d_stretchtime+0x2a>
		polystretchtime(p->p[i], s);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	015b      	lsls	r3, r3, #5
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	ed97 0a00 	vldr	s0, [r7]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fd46 	bl	800f6c4 <polystretchtime>
	for (int i = 0; i < 4; ++i) {
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	ddf0      	ble.n	800fc26 <poly4d_stretchtime+0x12>
	}
	p->duration *= s;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800fc4a:	edd7 7a00 	vldr	s15, [r7]
 800fc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 800fc58:	bf00      	nop
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <polyder4d>:

void polyder4d(struct poly4d *p)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; ++i) {
 800fc68:	2300      	movs	r3, #0
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	e009      	b.n	800fc82 <polyder4d+0x22>
		polyder(p->p[i]);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	015b      	lsls	r3, r3, #5
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	4413      	add	r3, r2
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff fdaa 	bl	800f7d0 <polyder>
	for (int i = 0; i < 4; ++i) {
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	60fb      	str	r3, [r7, #12]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2b03      	cmp	r3, #3
 800fc86:	ddf2      	ble.n	800fc6e <polyder4d+0xe>
	}
}
 800fc88:	bf00      	nop
 800fc8a:	bf00      	nop
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <polyval_xyz>:

static struct vec polyval_xyz(struct poly4d const *p, float t)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	ed2d 8b02 	vpush	{d8}
 800fc98:	b08a      	sub	sp, #40	; 0x28
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6178      	str	r0, [r7, #20]
 800fc9e:	ed87 0a04 	vstr	s0, [r7, #16]
	return mkvec(polyval(p->p[0], t), polyval(p->p[1], t), polyval(p->p[2], t));
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	ed97 0a04 	vldr	s0, [r7, #16]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff fd65 	bl	800f778 <polyval>
 800fcae:	eeb0 8a40 	vmov.f32	s16, s0
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	3320      	adds	r3, #32
 800fcb6:	ed97 0a04 	vldr	s0, [r7, #16]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff fd5c 	bl	800f778 <polyval>
 800fcc0:	eef0 8a40 	vmov.f32	s17, s0
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	3340      	adds	r3, #64	; 0x40
 800fcc8:	ed97 0a04 	vldr	s0, [r7, #16]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7ff fd53 	bl	800f778 <polyval>
 800fcd2:	eef0 7a40 	vmov.f32	s15, s0
 800fcd6:	eeb0 1a67 	vmov.f32	s2, s15
 800fcda:	eef0 0a68 	vmov.f32	s1, s17
 800fcde:	eeb0 0a48 	vmov.f32	s0, s16
 800fce2:	f7fe ffe1 	bl	800eca8 <mkvec>
 800fce6:	eef0 6a40 	vmov.f32	s13, s0
 800fcea:	eeb0 7a60 	vmov.f32	s14, s1
 800fcee:	eef0 7a41 	vmov.f32	s15, s2
 800fcf2:	edc7 6a07 	vstr	s13, [r7, #28]
 800fcf6:	ed87 7a08 	vstr	s14, [r7, #32]
 800fcfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800fcfe:	69f9      	ldr	r1, [r7, #28]
 800fd00:	6a3a      	ldr	r2, [r7, #32]
 800fd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd04:	ee06 1a90 	vmov	s13, r1
 800fd08:	ee07 2a10 	vmov	s14, r2
 800fd0c:	ee07 3a90 	vmov	s15, r3
}
 800fd10:	eeb0 0a66 	vmov.f32	s0, s13
 800fd14:	eef0 0a47 	vmov.f32	s1, s14
 800fd18:	eeb0 1a67 	vmov.f32	s2, s15
 800fd1c:	3728      	adds	r7, #40	; 0x28
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	ecbd 8b02 	vpop	{d8}
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <polyval_yaw>:

static float polyval_yaw(struct poly4d const *p, float t)
{
 800fd26:	b580      	push	{r7, lr}
 800fd28:	b082      	sub	sp, #8
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
 800fd2e:	ed87 0a00 	vstr	s0, [r7]
	return polyval(p->p[3], t);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3360      	adds	r3, #96	; 0x60
 800fd36:	ed97 0a00 	vldr	s0, [r7]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff fd1c 	bl	800f778 <polyval>
 800fd40:	eef0 7a40 	vmov.f32	s15, s0
}
 800fd44:	eeb0 0a67 	vmov.f32	s0, s15
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
	...

0800fd50 <traj_eval_invalid>:
	};
	return ev;
}

struct traj_eval traj_eval_invalid()
{
 800fd50:	b5b0      	push	{r4, r5, r7, lr}
 800fd52:	b090      	sub	sp, #64	; 0x40
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	struct traj_eval ev;
	ev.pos = vrepeat(NAN);
 800fd58:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800fd98 <traj_eval_invalid+0x48>
 800fd5c:	f7fe ffce 	bl	800ecfc <vrepeat>
 800fd60:	eef0 6a40 	vmov.f32	s13, s0
 800fd64:	eeb0 7a60 	vmov.f32	s14, s1
 800fd68:	eef0 7a41 	vmov.f32	s15, s2
 800fd6c:	edc7 6a03 	vstr	s13, [r7, #12]
 800fd70:	ed87 7a04 	vstr	s14, [r7, #16]
 800fd74:	edc7 7a05 	vstr	s15, [r7, #20]
	return ev;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	461d      	mov	r5, r3
 800fd7c:	f107 040c 	add.w	r4, r7, #12
 800fd80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	602b      	str	r3, [r5, #0]
}
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	3740      	adds	r7, #64	; 0x40
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bdb0      	pop	{r4, r5, r7, pc}
 800fd98:	7fc00000 	.word	0x7fc00000

0800fd9c <poly4d_eval>:
{
	return !visnan(ev->pos);
}

struct traj_eval poly4d_eval(struct poly4d const *p, float t)
{
 800fd9c:	b5b0      	push	{r4, r5, r7, lr}
 800fd9e:	ed2d 8b02 	vpush	{d8}
 800fda2:	b0b2      	sub	sp, #200	; 0xc8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	ed87 0a01 	vstr	s0, [r7, #4]
	// flat variables
	struct traj_eval out;
	out.pos = polyval_xyz(p, t);
 800fdae:	ed97 0a01 	vldr	s0, [r7, #4]
 800fdb2:	68b8      	ldr	r0, [r7, #8]
 800fdb4:	f7ff ff6d 	bl	800fc92 <polyval_xyz>
 800fdb8:	eef0 6a40 	vmov.f32	s13, s0
 800fdbc:	eeb0 7a60 	vmov.f32	s14, s1
 800fdc0:	eef0 7a41 	vmov.f32	s15, s2
 800fdc4:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 800fdc8:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 800fdcc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	out.yaw = polyval_yaw(p, t);
 800fdd0:	ed97 0a01 	vldr	s0, [r7, #4]
 800fdd4:	68b8      	ldr	r0, [r7, #8]
 800fdd6:	f7ff ffa6 	bl	800fd26 <polyval_yaw>
 800fdda:	eef0 7a40 	vmov.f32	s15, s0
 800fdde:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// 1st derivative
	struct poly4d* deriv = &poly4d_tmp;
 800fde2:	4bf1      	ldr	r3, [pc, #964]	; (80101a8 <poly4d_eval+0x40c>)
 800fde4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	*deriv = *p;
 800fde8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	4610      	mov	r0, r2
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	2384      	movs	r3, #132	; 0x84
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	f014 ffbe 	bl	8024d76 <memcpy>
	polyder4d(deriv);
 800fdfa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fdfe:	f7ff ff2f 	bl	800fc60 <polyder4d>
	out.vel = polyval_xyz(deriv, t);
 800fe02:	ed97 0a01 	vldr	s0, [r7, #4]
 800fe06:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fe0a:	f7ff ff42 	bl	800fc92 <polyval_xyz>
 800fe0e:	eef0 6a40 	vmov.f32	s13, s0
 800fe12:	eeb0 7a60 	vmov.f32	s14, s1
 800fe16:	eef0 7a41 	vmov.f32	s15, s2
 800fe1a:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 800fe1e:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 800fe22:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float dyaw = polyval_yaw(deriv, t);
 800fe26:	ed97 0a01 	vldr	s0, [r7, #4]
 800fe2a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fe2e:	f7ff ff7a 	bl	800fd26 <polyval_yaw>
 800fe32:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0

	// 2nd derivative
	polyder4d(deriv);
 800fe36:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fe3a:	f7ff ff11 	bl	800fc60 <polyder4d>
	out.acc = polyval_xyz(deriv, t);
 800fe3e:	ed97 0a01 	vldr	s0, [r7, #4]
 800fe42:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fe46:	f7ff ff24 	bl	800fc92 <polyval_xyz>
 800fe4a:	eef0 6a40 	vmov.f32	s13, s0
 800fe4e:	eeb0 7a60 	vmov.f32	s14, s1
 800fe52:	eef0 7a41 	vmov.f32	s15, s2
 800fe56:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 800fe5a:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 800fe5e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	// 3rd derivative
	polyder4d(deriv);
 800fe62:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fe66:	f7ff fefb 	bl	800fc60 <polyder4d>
	struct vec jerk = polyval_xyz(deriv, t);
 800fe6a:	ed97 0a01 	vldr	s0, [r7, #4]
 800fe6e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fe72:	f7ff ff0e 	bl	800fc92 <polyval_xyz>
 800fe76:	eef0 6a40 	vmov.f32	s13, s0
 800fe7a:	eeb0 7a60 	vmov.f32	s14, s1
 800fe7e:	eef0 7a41 	vmov.f32	s15, s2
 800fe82:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 800fe86:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800fe8a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	struct vec thrust = vadd(out.acc, mkvec(0, 0, GRAV));
 800fe8e:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 80101ac <poly4d_eval+0x410>
 800fe92:	eddf 0ac7 	vldr	s1, [pc, #796]	; 80101b0 <poly4d_eval+0x414>
 800fe96:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 80101b0 <poly4d_eval+0x414>
 800fe9a:	f7fe ff05 	bl	800eca8 <mkvec>
 800fe9e:	eef0 6a40 	vmov.f32	s13, s0
 800fea2:	eeb0 7a60 	vmov.f32	s14, s1
 800fea6:	eef0 7a41 	vmov.f32	s15, s2
 800feaa:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 800feae:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 800feb2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 800feb6:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 800feba:	edd7 5a2b 	vldr	s11, [r7, #172]	; 0xac
 800febe:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 800fec2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800fec6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800feca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800fece:	eef0 1a45 	vmov.f32	s3, s10
 800fed2:	eeb0 2a65 	vmov.f32	s4, s11
 800fed6:	eef0 2a46 	vmov.f32	s5, s12
 800feda:	eeb0 0a66 	vmov.f32	s0, s13
 800fede:	eef0 0a47 	vmov.f32	s1, s14
 800fee2:	eeb0 1a67 	vmov.f32	s2, s15
 800fee6:	f7ff f82c 	bl	800ef42 <vadd>
 800feea:	eef0 6a40 	vmov.f32	s13, s0
 800feee:	eeb0 7a60 	vmov.f32	s14, s1
 800fef2:	eef0 7a41 	vmov.f32	s15, s2
 800fef6:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800fefa:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 800fefe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	// float thrust_mag = mass * vmag(thrust);

	struct vec z_body = vnormalize(thrust);
 800ff02:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800ff06:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ff0a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800ff0e:	eeb0 0a66 	vmov.f32	s0, s13
 800ff12:	eef0 0a47 	vmov.f32	s1, s14
 800ff16:	eeb0 1a67 	vmov.f32	s2, s15
 800ff1a:	f7ff f964 	bl	800f1e6 <vnormalize>
 800ff1e:	eef0 6a40 	vmov.f32	s13, s0
 800ff22:	eeb0 7a60 	vmov.f32	s14, s1
 800ff26:	eef0 7a41 	vmov.f32	s15, s2
 800ff2a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800ff2e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 800ff32:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	struct vec x_world = mkvec(cosf(out.yaw), sinf(out.yaw), 0);
 800ff36:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ff3a:	eeb0 0a67 	vmov.f32	s0, s15
 800ff3e:	f016 fdd7 	bl	8026af0 <cosf>
 800ff42:	eeb0 8a40 	vmov.f32	s16, s0
 800ff46:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ff4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ff4e:	f016 fe1b 	bl	8026b88 <sinf>
 800ff52:	eef0 7a40 	vmov.f32	s15, s0
 800ff56:	ed9f 1a96 	vldr	s2, [pc, #600]	; 80101b0 <poly4d_eval+0x414>
 800ff5a:	eef0 0a67 	vmov.f32	s1, s15
 800ff5e:	eeb0 0a48 	vmov.f32	s0, s16
 800ff62:	f7fe fea1 	bl	800eca8 <mkvec>
 800ff66:	eef0 6a40 	vmov.f32	s13, s0
 800ff6a:	eeb0 7a60 	vmov.f32	s14, s1
 800ff6e:	eef0 7a41 	vmov.f32	s15, s2
 800ff72:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 800ff76:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800ff7a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	struct vec y_body = vnormalize(vcross(z_body, x_world));
 800ff7e:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 800ff82:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 800ff86:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800ff8a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800ff8e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ff92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800ff96:	eef0 1a45 	vmov.f32	s3, s10
 800ff9a:	eeb0 2a65 	vmov.f32	s4, s11
 800ff9e:	eef0 2a46 	vmov.f32	s5, s12
 800ffa2:	eeb0 0a66 	vmov.f32	s0, s13
 800ffa6:	eef0 0a47 	vmov.f32	s1, s14
 800ffaa:	eeb0 1a67 	vmov.f32	s2, s15
 800ffae:	f7ff f967 	bl	800f280 <vcross>
 800ffb2:	eef0 6a40 	vmov.f32	s13, s0
 800ffb6:	eeb0 7a60 	vmov.f32	s14, s1
 800ffba:	eef0 7a41 	vmov.f32	s15, s2
 800ffbe:	edc7 6a2d 	vstr	s13, [r7, #180]	; 0xb4
 800ffc2:	ed87 7a2e 	vstr	s14, [r7, #184]	; 0xb8
 800ffc6:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 800ffca:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 800ffce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ffd2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800ffd6:	eeb0 0a66 	vmov.f32	s0, s13
 800ffda:	eef0 0a47 	vmov.f32	s1, s14
 800ffde:	eeb0 1a67 	vmov.f32	s2, s15
 800ffe2:	f7ff f900 	bl	800f1e6 <vnormalize>
 800ffe6:	eef0 6a40 	vmov.f32	s13, s0
 800ffea:	eeb0 7a60 	vmov.f32	s14, s1
 800ffee:	eef0 7a41 	vmov.f32	s15, s2
 800fff2:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800fff6:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800fffa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	struct vec x_body = vcross(y_body, z_body);
 800fffe:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 8010002:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8010006:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 801000a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 801000e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010012:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010016:	eef0 1a45 	vmov.f32	s3, s10
 801001a:	eeb0 2a65 	vmov.f32	s4, s11
 801001e:	eef0 2a46 	vmov.f32	s5, s12
 8010022:	eeb0 0a66 	vmov.f32	s0, s13
 8010026:	eef0 0a47 	vmov.f32	s1, s14
 801002a:	eeb0 1a67 	vmov.f32	s2, s15
 801002e:	f7ff f927 	bl	800f280 <vcross>
 8010032:	eef0 6a40 	vmov.f32	s13, s0
 8010036:	eeb0 7a60 	vmov.f32	s14, s1
 801003a:	eef0 7a41 	vmov.f32	s15, s2
 801003e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8010042:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8010046:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	struct vec jerk_orth_zbody = vorthunit(jerk, z_body);
 801004a:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 801004e:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8010052:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010056:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801005a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801005e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8010062:	eef0 1a45 	vmov.f32	s3, s10
 8010066:	eeb0 2a65 	vmov.f32	s4, s11
 801006a:	eef0 2a46 	vmov.f32	s5, s12
 801006e:	eeb0 0a66 	vmov.f32	s0, s13
 8010072:	eef0 0a47 	vmov.f32	s1, s14
 8010076:	eeb0 1a67 	vmov.f32	s2, s15
 801007a:	f7ff f9d1 	bl	800f420 <vorthunit>
 801007e:	eef0 6a40 	vmov.f32	s13, s0
 8010082:	eeb0 7a60 	vmov.f32	s14, s1
 8010086:	eef0 7a41 	vmov.f32	s15, s2
 801008a:	edc7 6a08 	vstr	s13, [r7, #32]
 801008e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8010092:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	struct vec h_w = vscl(1.0f / vmag(thrust), jerk_orth_zbody);
 8010096:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801009a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801009e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80100a2:	eeb0 0a66 	vmov.f32	s0, s13
 80100a6:	eef0 0a47 	vmov.f32	s1, s14
 80100aa:	eeb0 1a67 	vmov.f32	s2, s15
 80100ae:	f7ff f870 	bl	800f192 <vmag>
 80100b2:	eeb0 7a40 	vmov.f32	s14, s0
 80100b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100be:	ed97 6a08 	vldr	s12, [r7, #32]
 80100c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80100c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80100ca:	eef0 0a46 	vmov.f32	s1, s12
 80100ce:	eeb0 1a66 	vmov.f32	s2, s13
 80100d2:	eef0 1a47 	vmov.f32	s3, s14
 80100d6:	eeb0 0a67 	vmov.f32	s0, s15
 80100da:	f7fe fe63 	bl	800eda4 <vscl>
 80100de:	eef0 6a40 	vmov.f32	s13, s0
 80100e2:	eeb0 7a60 	vmov.f32	s14, s1
 80100e6:	eef0 7a41 	vmov.f32	s15, s2
 80100ea:	edc7 6a05 	vstr	s13, [r7, #20]
 80100ee:	ed87 7a06 	vstr	s14, [r7, #24]
 80100f2:	edc7 7a07 	vstr	s15, [r7, #28]

	out.omega.x = -vdot(h_w, y_body);
 80100f6:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 80100fa:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 80100fe:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8010102:	edd7 6a05 	vldr	s13, [r7, #20]
 8010106:	ed97 7a06 	vldr	s14, [r7, #24]
 801010a:	edd7 7a07 	vldr	s15, [r7, #28]
 801010e:	eef0 1a45 	vmov.f32	s3, s10
 8010112:	eeb0 2a65 	vmov.f32	s4, s11
 8010116:	eef0 2a46 	vmov.f32	s5, s12
 801011a:	eeb0 0a66 	vmov.f32	s0, s13
 801011e:	eef0 0a47 	vmov.f32	s1, s14
 8010122:	eeb0 1a67 	vmov.f32	s2, s15
 8010126:	f7fe ffcc 	bl	800f0c2 <vdot>
 801012a:	eef0 7a40 	vmov.f32	s15, s0
 801012e:	eef1 7a67 	vneg.f32	s15, s15
 8010132:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	out.omega.y = vdot(h_w, x_body);
 8010136:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 801013a:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 801013e:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8010142:	edd7 6a05 	vldr	s13, [r7, #20]
 8010146:	ed97 7a06 	vldr	s14, [r7, #24]
 801014a:	edd7 7a07 	vldr	s15, [r7, #28]
 801014e:	eef0 1a45 	vmov.f32	s3, s10
 8010152:	eeb0 2a65 	vmov.f32	s4, s11
 8010156:	eef0 2a46 	vmov.f32	s5, s12
 801015a:	eeb0 0a66 	vmov.f32	s0, s13
 801015e:	eef0 0a47 	vmov.f32	s1, s14
 8010162:	eeb0 1a67 	vmov.f32	s2, s15
 8010166:	f7fe ffac 	bl	800f0c2 <vdot>
 801016a:	eef0 7a40 	vmov.f32	s15, s0
 801016e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	out.omega.z = z_body.z * dyaw;
 8010172:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010176:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 801017a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801017e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	return out;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	461d      	mov	r5, r3
 8010186:	f107 0474 	add.w	r4, r7, #116	; 0x74
 801018a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801018c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801018e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	602b      	str	r3, [r5, #0]
}
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	37c8      	adds	r7, #200	; 0xc8
 801019e:	46bd      	mov	sp, r7
 80101a0:	ecbd 8b02 	vpop	{d8}
 80101a4:	bdb0      	pop	{r4, r5, r7, pc}
 80101a6:	bf00      	nop
 80101a8:	2000abac 	.word	0x2000abac
 80101ac:	411cf5c3 	.word	0x411cf5c3
 80101b0:	00000000 	.word	0x00000000

080101b4 <piecewise_eval>:
//

// piecewise eval
struct traj_eval piecewise_eval(
  struct piecewise_traj const *traj, float t)
{
 80101b4:	b5b0      	push	{r4, r5, r7, lr}
 80101b6:	b094      	sub	sp, #80	; 0x50
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	ed87 0a01 	vstr	s0, [r7, #4]
	int cursor = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	t = t - traj->t_begin;
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	edd3 7a00 	vldr	s15, [r3]
 80101cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80101d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101d4:	edc7 7a01 	vstr	s15, [r7, #4]
	while (cursor < traj->n_pieces) {
 80101d8:	e054      	b.n	8010284 <piecewise_eval+0xd0>
		struct poly4d const *piece = &(traj->pieces[cursor]);
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	6999      	ldr	r1, [r3, #24]
 80101de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101e0:	4613      	mov	r3, r2
 80101e2:	015b      	lsls	r3, r3, #5
 80101e4:	4413      	add	r3, r2
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	440b      	add	r3, r1
 80101ea:	647b      	str	r3, [r7, #68]	; 0x44
		if (t <= piece->duration * traj->timescale) {
 80101ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101ee:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80101f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8010200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010208:	d82b      	bhi.n	8010262 <piecewise_eval+0xae>
			poly4d_tmp = *piece;
 801020a:	4a5d      	ldr	r2, [pc, #372]	; (8010380 <piecewise_eval+0x1cc>)
 801020c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801020e:	4610      	mov	r0, r2
 8010210:	4619      	mov	r1, r3
 8010212:	2384      	movs	r3, #132	; 0x84
 8010214:	461a      	mov	r2, r3
 8010216:	f014 fdae 	bl	8024d76 <memcpy>
			poly4d_shift(&poly4d_tmp, traj->shift.x, traj->shift.y, traj->shift.z, 0);
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	ed93 7a03 	vldr	s14, [r3, #12]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	edd3 6a04 	vldr	s13, [r3, #16]
 801022c:	eddf 1a55 	vldr	s3, [pc, #340]	; 8010384 <piecewise_eval+0x1d0>
 8010230:	eeb0 1a66 	vmov.f32	s2, s13
 8010234:	eef0 0a47 	vmov.f32	s1, s14
 8010238:	eeb0 0a67 	vmov.f32	s0, s15
 801023c:	4850      	ldr	r0, [pc, #320]	; (8010380 <piecewise_eval+0x1cc>)
 801023e:	f7ff fcaf 	bl	800fba0 <poly4d_shift>
			poly4d_stretchtime(&poly4d_tmp, traj->timescale);
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	edd3 7a01 	vldr	s15, [r3, #4]
 8010248:	eeb0 0a67 	vmov.f32	s0, s15
 801024c:	484c      	ldr	r0, [pc, #304]	; (8010380 <piecewise_eval+0x1cc>)
 801024e:	f7ff fce1 	bl	800fc14 <poly4d_stretchtime>
			return poly4d_eval(&poly4d_tmp, t);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	ed97 0a01 	vldr	s0, [r7, #4]
 8010258:	4949      	ldr	r1, [pc, #292]	; (8010380 <piecewise_eval+0x1cc>)
 801025a:	4618      	mov	r0, r3
 801025c:	f7ff fd9e 	bl	800fd9c <poly4d_eval>
 8010260:	e08a      	b.n	8010378 <piecewise_eval+0x1c4>
		}
		t -= piece->duration * traj->timescale;
 8010262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010264:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	edd3 7a01 	vldr	s15, [r3, #4]
 801026e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010272:	ed97 7a01 	vldr	s14, [r7, #4]
 8010276:	ee77 7a67 	vsub.f32	s15, s14, s15
 801027a:	edc7 7a01 	vstr	s15, [r7, #4]
		++cursor;
 801027e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010280:	3301      	adds	r3, #1
 8010282:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (cursor < traj->n_pieces) {
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	7d1b      	ldrb	r3, [r3, #20]
 8010288:	461a      	mov	r2, r3
 801028a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801028c:	4293      	cmp	r3, r2
 801028e:	dba4      	blt.n	80101da <piecewise_eval+0x26>
	}
	// if we get here, the trajectory has ended
	struct poly4d const *end_piece = &(traj->pieces[traj->n_pieces - 1]);
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	699a      	ldr	r2, [r3, #24]
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	7d1b      	ldrb	r3, [r3, #20]
 8010298:	4619      	mov	r1, r3
 801029a:	460b      	mov	r3, r1
 801029c:	015b      	lsls	r3, r3, #5
 801029e:	440b      	add	r3, r1
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	3b84      	subs	r3, #132	; 0x84
 80102a4:	4413      	add	r3, r2
 80102a6:	64bb      	str	r3, [r7, #72]	; 0x48
	struct traj_eval ev = poly4d_eval(end_piece, end_piece->duration);
 80102a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102aa:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80102ae:	f107 0310 	add.w	r3, r7, #16
 80102b2:	eeb0 0a67 	vmov.f32	s0, s15
 80102b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff fd6f 	bl	800fd9c <poly4d_eval>
	ev.pos = vadd(ev.pos, traj->shift);
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	ed93 5a02 	vldr	s10, [r3, #8]
 80102c4:	edd3 5a03 	vldr	s11, [r3, #12]
 80102c8:	ed93 6a04 	vldr	s12, [r3, #16]
 80102cc:	edd7 6a04 	vldr	s13, [r7, #16]
 80102d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80102d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80102d8:	eef0 1a45 	vmov.f32	s3, s10
 80102dc:	eeb0 2a65 	vmov.f32	s4, s11
 80102e0:	eef0 2a46 	vmov.f32	s5, s12
 80102e4:	eeb0 0a66 	vmov.f32	s0, s13
 80102e8:	eef0 0a47 	vmov.f32	s1, s14
 80102ec:	eeb0 1a67 	vmov.f32	s2, s15
 80102f0:	f7fe fe27 	bl	800ef42 <vadd>
 80102f4:	eef0 6a40 	vmov.f32	s13, s0
 80102f8:	eeb0 7a60 	vmov.f32	s14, s1
 80102fc:	eef0 7a41 	vmov.f32	s15, s2
 8010300:	edc7 6a04 	vstr	s13, [r7, #16]
 8010304:	ed87 7a05 	vstr	s14, [r7, #20]
 8010308:	edc7 7a06 	vstr	s15, [r7, #24]
	ev.vel = vzero();
 801030c:	f7fe fd22 	bl	800ed54 <vzero>
 8010310:	eef0 6a40 	vmov.f32	s13, s0
 8010314:	eeb0 7a60 	vmov.f32	s14, s1
 8010318:	eef0 7a41 	vmov.f32	s15, s2
 801031c:	edc7 6a07 	vstr	s13, [r7, #28]
 8010320:	ed87 7a08 	vstr	s14, [r7, #32]
 8010324:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ev.acc = vzero();
 8010328:	f7fe fd14 	bl	800ed54 <vzero>
 801032c:	eef0 6a40 	vmov.f32	s13, s0
 8010330:	eeb0 7a60 	vmov.f32	s14, s1
 8010334:	eef0 7a41 	vmov.f32	s15, s2
 8010338:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 801033c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8010340:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	ev.omega = vzero();
 8010344:	f7fe fd06 	bl	800ed54 <vzero>
 8010348:	eef0 6a40 	vmov.f32	s13, s0
 801034c:	eeb0 7a60 	vmov.f32	s14, s1
 8010350:	eef0 7a41 	vmov.f32	s15, s2
 8010354:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8010358:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 801035c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	return ev;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	461d      	mov	r5, r3
 8010364:	f107 0410 	add.w	r4, r7, #16
 8010368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801036a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801036c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801036e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	602b      	str	r3, [r5, #0]
}
 8010378:	68f8      	ldr	r0, [r7, #12]
 801037a:	3750      	adds	r7, #80	; 0x50
 801037c:	46bd      	mov	sp, r7
 801037e:	bdb0      	pop	{r4, r5, r7, pc}
 8010380:	2000abac 	.word	0x2000abac
 8010384:	00000000 	.word	0x00000000

08010388 <piecewise_eval_reversed>:

struct traj_eval piecewise_eval_reversed(
  struct piecewise_traj const *traj, float t)
{
 8010388:	b5b0      	push	{r4, r5, r7, lr}
 801038a:	b096      	sub	sp, #88	; 0x58
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	ed87 0a01 	vstr	s0, [r7, #4]
	int cursor = traj->n_pieces - 1;
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	7d1b      	ldrb	r3, [r3, #20]
 801039a:	3b01      	subs	r3, #1
 801039c:	657b      	str	r3, [r7, #84]	; 0x54
	t = t - traj->t_begin;
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	edd3 7a00 	vldr	s15, [r3]
 80103a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80103a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103ac:	edc7 7a01 	vstr	s15, [r7, #4]
	while (cursor >= 0) {
 80103b0:	e072      	b.n	8010498 <piecewise_eval_reversed+0x110>
		struct poly4d const *piece = &(traj->pieces[cursor]);
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	6999      	ldr	r1, [r3, #24]
 80103b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103b8:	4613      	mov	r3, r2
 80103ba:	015b      	lsls	r3, r3, #5
 80103bc:	4413      	add	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	440b      	add	r3, r1
 80103c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (t <= piece->duration * traj->timescale) {
 80103c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103c6:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80103d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80103d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80103dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e0:	d849      	bhi.n	8010476 <piecewise_eval_reversed+0xee>
			poly4d_tmp = *piece;
 80103e2:	4a65      	ldr	r2, [pc, #404]	; (8010578 <piecewise_eval_reversed+0x1f0>)
 80103e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103e6:	4610      	mov	r0, r2
 80103e8:	4619      	mov	r1, r3
 80103ea:	2384      	movs	r3, #132	; 0x84
 80103ec:	461a      	mov	r2, r3
 80103ee:	f014 fcc2 	bl	8024d76 <memcpy>
			poly4d_shift(&poly4d_tmp, traj->shift.x, traj->shift.y, traj->shift.z, 0);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	edd3 6a04 	vldr	s13, [r3, #16]
 8010404:	eddf 1a5d 	vldr	s3, [pc, #372]	; 801057c <piecewise_eval_reversed+0x1f4>
 8010408:	eeb0 1a66 	vmov.f32	s2, s13
 801040c:	eef0 0a47 	vmov.f32	s1, s14
 8010410:	eeb0 0a67 	vmov.f32	s0, s15
 8010414:	4858      	ldr	r0, [pc, #352]	; (8010578 <piecewise_eval_reversed+0x1f0>)
 8010416:	f7ff fbc3 	bl	800fba0 <poly4d_shift>
			poly4d_stretchtime(&poly4d_tmp, traj->timescale);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010420:	eeb0 0a67 	vmov.f32	s0, s15
 8010424:	4854      	ldr	r0, [pc, #336]	; (8010578 <piecewise_eval_reversed+0x1f0>)
 8010426:	f7ff fbf5 	bl	800fc14 <poly4d_stretchtime>
			for (int i = 0; i < 4; ++i) {
 801042a:	2300      	movs	r3, #0
 801042c:	653b      	str	r3, [r7, #80]	; 0x50
 801042e:	e009      	b.n	8010444 <piecewise_eval_reversed+0xbc>
				polyreflect(poly4d_tmp.p[i]);
 8010430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010432:	015b      	lsls	r3, r3, #5
 8010434:	4a50      	ldr	r2, [pc, #320]	; (8010578 <piecewise_eval_reversed+0x1f0>)
 8010436:	4413      	add	r3, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff f97b 	bl	800f734 <polyreflect>
			for (int i = 0; i < 4; ++i) {
 801043e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010440:	3301      	adds	r3, #1
 8010442:	653b      	str	r3, [r7, #80]	; 0x50
 8010444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010446:	2b03      	cmp	r3, #3
 8010448:	ddf2      	ble.n	8010430 <piecewise_eval_reversed+0xa8>
			}
			t = t - piece->duration * traj->timescale;
 801044a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801044c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	edd3 7a01 	vldr	s15, [r3, #4]
 8010456:	ee67 7a27 	vmul.f32	s15, s14, s15
 801045a:	ed97 7a01 	vldr	s14, [r7, #4]
 801045e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010462:	edc7 7a01 	vstr	s15, [r7, #4]
			return poly4d_eval(&poly4d_tmp, t);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	ed97 0a01 	vldr	s0, [r7, #4]
 801046c:	4942      	ldr	r1, [pc, #264]	; (8010578 <piecewise_eval_reversed+0x1f0>)
 801046e:	4618      	mov	r0, r3
 8010470:	f7ff fc94 	bl	800fd9c <poly4d_eval>
 8010474:	e07b      	b.n	801056e <piecewise_eval_reversed+0x1e6>
		}
		t -= piece->duration * traj->timescale;
 8010476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010478:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010486:	ed97 7a01 	vldr	s14, [r7, #4]
 801048a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801048e:	edc7 7a01 	vstr	s15, [r7, #4]
		--cursor;
 8010492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010494:	3b01      	subs	r3, #1
 8010496:	657b      	str	r3, [r7, #84]	; 0x54
	while (cursor >= 0) {
 8010498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801049a:	2b00      	cmp	r3, #0
 801049c:	da89      	bge.n	80103b2 <piecewise_eval_reversed+0x2a>
	}
	// if we get here, the trajectory has ended
	struct poly4d const *end_piece = &(traj->pieces[0]);
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	699b      	ldr	r3, [r3, #24]
 80104a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	struct traj_eval ev = poly4d_eval(end_piece, 0.0f);
 80104a4:	f107 0314 	add.w	r3, r7, #20
 80104a8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 801057c <piecewise_eval_reversed+0x1f4>
 80104ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7ff fc74 	bl	800fd9c <poly4d_eval>
	ev.pos = vadd(ev.pos, traj->shift);
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	ed93 5a02 	vldr	s10, [r3, #8]
 80104ba:	edd3 5a03 	vldr	s11, [r3, #12]
 80104be:	ed93 6a04 	vldr	s12, [r3, #16]
 80104c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80104c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80104ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80104ce:	eef0 1a45 	vmov.f32	s3, s10
 80104d2:	eeb0 2a65 	vmov.f32	s4, s11
 80104d6:	eef0 2a46 	vmov.f32	s5, s12
 80104da:	eeb0 0a66 	vmov.f32	s0, s13
 80104de:	eef0 0a47 	vmov.f32	s1, s14
 80104e2:	eeb0 1a67 	vmov.f32	s2, s15
 80104e6:	f7fe fd2c 	bl	800ef42 <vadd>
 80104ea:	eef0 6a40 	vmov.f32	s13, s0
 80104ee:	eeb0 7a60 	vmov.f32	s14, s1
 80104f2:	eef0 7a41 	vmov.f32	s15, s2
 80104f6:	edc7 6a05 	vstr	s13, [r7, #20]
 80104fa:	ed87 7a06 	vstr	s14, [r7, #24]
 80104fe:	edc7 7a07 	vstr	s15, [r7, #28]
	ev.vel = vzero();
 8010502:	f7fe fc27 	bl	800ed54 <vzero>
 8010506:	eef0 6a40 	vmov.f32	s13, s0
 801050a:	eeb0 7a60 	vmov.f32	s14, s1
 801050e:	eef0 7a41 	vmov.f32	s15, s2
 8010512:	edc7 6a08 	vstr	s13, [r7, #32]
 8010516:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 801051a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	ev.acc = vzero();
 801051e:	f7fe fc19 	bl	800ed54 <vzero>
 8010522:	eef0 6a40 	vmov.f32	s13, s0
 8010526:	eeb0 7a60 	vmov.f32	s14, s1
 801052a:	eef0 7a41 	vmov.f32	s15, s2
 801052e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8010532:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8010536:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	ev.omega = vzero();
 801053a:	f7fe fc0b 	bl	800ed54 <vzero>
 801053e:	eef0 6a40 	vmov.f32	s13, s0
 8010542:	eeb0 7a60 	vmov.f32	s14, s1
 8010546:	eef0 7a41 	vmov.f32	s15, s2
 801054a:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 801054e:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8010552:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	return ev;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	461d      	mov	r5, r3
 801055a:	f107 0414 	add.w	r4, r7, #20
 801055e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801056a:	6823      	ldr	r3, [r4, #0]
 801056c:	602b      	str	r3, [r5, #0]
}
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	3758      	adds	r7, #88	; 0x58
 8010572:	46bd      	mov	sp, r7
 8010574:	bdb0      	pop	{r4, r5, r7, pc}
 8010576:	bf00      	nop
 8010578:	2000abac 	.word	0x2000abac
 801057c:	00000000 	.word	0x00000000

08010580 <piecewise_plan_7th_order_no_jerk>:

// y, dy == yaw, derivative of yaw
void piecewise_plan_7th_order_no_jerk(struct piecewise_traj *pp, float duration,
	struct vec p0, float y0, struct vec v0, float dy0, struct vec a0,
	struct vec p1, float y1, struct vec v1, float dy1, struct vec a1)
{
 8010580:	b590      	push	{r4, r7, lr}
 8010582:	b095      	sub	sp, #84	; 0x54
 8010584:	af00      	add	r7, sp, #0
 8010586:	6478      	str	r0, [r7, #68]	; 0x44
 8010588:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 801058c:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 8010590:	ed87 4a08 	vstr	s8, [r7, #32]
 8010594:	edc7 7a01 	vstr	s15, [r7, #4]
 8010598:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 801059c:	ed87 1a0e 	vstr	s2, [r7, #56]	; 0x38
 80105a0:	edc7 1a0f 	vstr	s3, [r7, #60]	; 0x3c
 80105a4:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 80105a8:	ed87 3a0a 	vstr	s6, [r7, #40]	; 0x28
 80105ac:	edc7 3a0b 	vstr	s7, [r7, #44]	; 0x2c
 80105b0:	edc7 4a05 	vstr	s9, [r7, #20]
 80105b4:	ed87 5a06 	vstr	s10, [r7, #24]
 80105b8:	edc7 5a07 	vstr	s11, [r7, #28]
 80105bc:	ed87 6a02 	vstr	s12, [r7, #8]
 80105c0:	edc7 6a03 	vstr	s13, [r7, #12]
 80105c4:	ed87 7a04 	vstr	s14, [r7, #16]
	struct poly4d *p = &pp->pieces[0];
 80105c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105ca:	699b      	ldr	r3, [r3, #24]
 80105cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	p->duration = duration;
 80105ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pp->timescale = 1.0;
 80105d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80105dc:	605a      	str	r2, [r3, #4]
	pp->shift = vzero();
 80105de:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80105e0:	f7fe fbb8 	bl	800ed54 <vzero>
 80105e4:	eef0 6a40 	vmov.f32	s13, s0
 80105e8:	eeb0 7a60 	vmov.f32	s14, s1
 80105ec:	eef0 7a41 	vmov.f32	s15, s2
 80105f0:	edc4 6a02 	vstr	s13, [r4, #8]
 80105f4:	ed84 7a03 	vstr	s14, [r4, #12]
 80105f8:	edc4 7a04 	vstr	s15, [r4, #16]
	pp->n_pieces = 1;
 80105fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105fe:	2201      	movs	r2, #1
 8010600:	751a      	strb	r2, [r3, #20]
	poly7_nojerk(p->p[0], duration, p0.x, v0.x, a0.x, p1.x, v1.x, a1.x);
 8010602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010608:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801060c:	edd7 6a05 	vldr	s13, [r7, #20]
 8010610:	ed97 6a02 	vldr	s12, [r7, #8]
 8010614:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8010618:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 801061c:	eeb0 3a45 	vmov.f32	s6, s10
 8010620:	eef0 2a65 	vmov.f32	s5, s11
 8010624:	eeb0 2a46 	vmov.f32	s4, s12
 8010628:	eef0 1a66 	vmov.f32	s3, s13
 801062c:	eeb0 1a47 	vmov.f32	s2, s14
 8010630:	eef0 0a67 	vmov.f32	s1, s15
 8010634:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8010638:	4618      	mov	r0, r3
 801063a:	f7ff f8f7 	bl	800f82c <poly7_nojerk>
	poly7_nojerk(p->p[1], duration, p0.y, v0.y, a0.y, p1.y, v1.y, a1.y);
 801063e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010640:	3320      	adds	r3, #32
 8010642:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010646:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801064a:	edd7 6a06 	vldr	s13, [r7, #24]
 801064e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010652:	edd7 5a19 	vldr	s11, [r7, #100]	; 0x64
 8010656:	ed97 5a1d 	vldr	s10, [r7, #116]	; 0x74
 801065a:	eeb0 3a45 	vmov.f32	s6, s10
 801065e:	eef0 2a65 	vmov.f32	s5, s11
 8010662:	eeb0 2a46 	vmov.f32	s4, s12
 8010666:	eef0 1a66 	vmov.f32	s3, s13
 801066a:	eeb0 1a47 	vmov.f32	s2, s14
 801066e:	eef0 0a67 	vmov.f32	s1, s15
 8010672:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff f8d8 	bl	800f82c <poly7_nojerk>
	poly7_nojerk(p->p[2], duration, p0.z, v0.z, a0.z, p1.z, v1.z, a1.z);
 801067c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067e:	3340      	adds	r3, #64	; 0x40
 8010680:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010684:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8010688:	edd7 6a07 	vldr	s13, [r7, #28]
 801068c:	ed97 6a04 	vldr	s12, [r7, #16]
 8010690:	edd7 5a1a 	vldr	s11, [r7, #104]	; 0x68
 8010694:	ed97 5a1e 	vldr	s10, [r7, #120]	; 0x78
 8010698:	eeb0 3a45 	vmov.f32	s6, s10
 801069c:	eef0 2a65 	vmov.f32	s5, s11
 80106a0:	eeb0 2a46 	vmov.f32	s4, s12
 80106a4:	eef0 1a66 	vmov.f32	s3, s13
 80106a8:	eeb0 1a47 	vmov.f32	s2, s14
 80106ac:	eef0 0a67 	vmov.f32	s1, s15
 80106b0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff f8b9 	bl	800f82c <poly7_nojerk>
	poly7_nojerk(p->p[3], duration, y0, dy0, 0, y1, dy1, 0);
 80106ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106bc:	3360      	adds	r3, #96	; 0x60
 80106be:	ed9f 3a0a 	vldr	s6, [pc, #40]	; 80106e8 <piecewise_plan_7th_order_no_jerk+0x168>
 80106c2:	edd7 2a1b 	vldr	s5, [r7, #108]	; 0x6c
 80106c6:	ed97 2a01 	vldr	s4, [r7, #4]
 80106ca:	eddf 1a07 	vldr	s3, [pc, #28]	; 80106e8 <piecewise_plan_7th_order_no_jerk+0x168>
 80106ce:	ed97 1a08 	vldr	s2, [r7, #32]
 80106d2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80106d6:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80106da:	4618      	mov	r0, r3
 80106dc:	f7ff f8a6 	bl	800f82c <poly7_nojerk>
}
 80106e0:	bf00      	nop
 80106e2:	3754      	adds	r7, #84	; 0x54
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd90      	pop	{r4, r7, pc}
 80106e8:	00000000 	.word	0x00000000

080106ec <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 80106ec:	b480      	push	{r7}
 80106ee:	b08f      	sub	sp, #60	; 0x3c
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80106f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80106fa:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	623b      	str	r3, [r7, #32]
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	627b      	str	r3, [r7, #36]	; 0x24
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 801070a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801070e:	f107 0220 	add.w	r2, r7, #32
 8010712:	ca07      	ldmia	r2, {r0, r1, r2}
 8010714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801071a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801071c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071e:	ee06 1a90 	vmov	s13, r1
 8010722:	ee07 2a10 	vmov	s14, r2
 8010726:	ee07 3a90 	vmov	s15, r3
}
 801072a:	eeb0 0a66 	vmov.f32	s0, s13
 801072e:	eef0 0a47 	vmov.f32	s1, s14
 8010732:	eeb0 1a67 	vmov.f32	s2, s15
 8010736:	373c      	adds	r7, #60	; 0x3c
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr

08010740 <vrepeat>:
static inline struct vec vrepeat(float x) {
 8010740:	b580      	push	{r7, lr}
 8010742:	b08a      	sub	sp, #40	; 0x28
 8010744:	af00      	add	r7, sp, #0
 8010746:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 801074a:	ed97 1a05 	vldr	s2, [r7, #20]
 801074e:	edd7 0a05 	vldr	s1, [r7, #20]
 8010752:	ed97 0a05 	vldr	s0, [r7, #20]
 8010756:	f7ff ffc9 	bl	80106ec <mkvec>
 801075a:	eef0 6a40 	vmov.f32	s13, s0
 801075e:	eeb0 7a60 	vmov.f32	s14, s1
 8010762:	eef0 7a41 	vmov.f32	s15, s2
 8010766:	edc7 6a07 	vstr	s13, [r7, #28]
 801076a:	ed87 7a08 	vstr	s14, [r7, #32]
 801076e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8010772:	69f9      	ldr	r1, [r7, #28]
 8010774:	6a3a      	ldr	r2, [r7, #32]
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010778:	ee06 1a90 	vmov	s13, r1
 801077c:	ee07 2a10 	vmov	s14, r2
 8010780:	ee07 3a90 	vmov	s15, r3
}
 8010784:	eeb0 0a66 	vmov.f32	s0, s13
 8010788:	eef0 0a47 	vmov.f32	s1, s14
 801078c:	eeb0 1a67 	vmov.f32	s2, s15
 8010790:	3728      	adds	r7, #40	; 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
	...

08010798 <vzero>:
static inline struct vec vzero(void) {
 8010798:	b580      	push	{r7, lr}
 801079a:	b088      	sub	sp, #32
 801079c:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 801079e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80107e4 <vzero+0x4c>
 80107a2:	f7ff ffcd 	bl	8010740 <vrepeat>
 80107a6:	eef0 6a40 	vmov.f32	s13, s0
 80107aa:	eeb0 7a60 	vmov.f32	s14, s1
 80107ae:	eef0 7a41 	vmov.f32	s15, s2
 80107b2:	edc7 6a05 	vstr	s13, [r7, #20]
 80107b6:	ed87 7a06 	vstr	s14, [r7, #24]
 80107ba:	edc7 7a07 	vstr	s15, [r7, #28]
 80107be:	6979      	ldr	r1, [r7, #20]
 80107c0:	69ba      	ldr	r2, [r7, #24]
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	ee06 1a90 	vmov	s13, r1
 80107c8:	ee07 2a10 	vmov	s14, r2
 80107cc:	ee07 3a90 	vmov	s15, r3
}
 80107d0:	eeb0 0a66 	vmov.f32	s0, s13
 80107d4:	eef0 0a47 	vmov.f32	s1, s14
 80107d8:	eeb0 1a67 	vmov.f32	s2, s15
 80107dc:	3720      	adds	r7, #32
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	00000000 	.word	0x00000000

080107e8 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b08e      	sub	sp, #56	; 0x38
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	eeb0 5a40 	vmov.f32	s10, s0
 80107f2:	eef0 5a60 	vmov.f32	s11, s1
 80107f6:	eeb0 6a41 	vmov.f32	s12, s2
 80107fa:	eef0 6a61 	vmov.f32	s13, s3
 80107fe:	eeb0 7a42 	vmov.f32	s14, s4
 8010802:	eef0 7a62 	vmov.f32	s15, s5
 8010806:	ed87 5a07 	vstr	s10, [r7, #28]
 801080a:	edc7 5a08 	vstr	s11, [r7, #32]
 801080e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8010812:	edc7 6a04 	vstr	s13, [r7, #16]
 8010816:	ed87 7a05 	vstr	s14, [r7, #20]
 801081a:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 801081e:	ed97 7a07 	vldr	s14, [r7, #28]
 8010822:	edd7 7a04 	vldr	s15, [r7, #16]
 8010826:	ee77 6a27 	vadd.f32	s13, s14, s15
 801082a:	ed97 7a08 	vldr	s14, [r7, #32]
 801082e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010832:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010836:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801083a:	edd7 7a06 	vldr	s15, [r7, #24]
 801083e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010842:	eeb0 1a67 	vmov.f32	s2, s15
 8010846:	eef0 0a46 	vmov.f32	s1, s12
 801084a:	eeb0 0a66 	vmov.f32	s0, s13
 801084e:	f7ff ff4d 	bl	80106ec <mkvec>
 8010852:	eef0 6a40 	vmov.f32	s13, s0
 8010856:	eeb0 7a60 	vmov.f32	s14, s1
 801085a:	eef0 7a41 	vmov.f32	s15, s2
 801085e:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8010862:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8010866:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 801086a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801086c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801086e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010870:	ee06 1a90 	vmov	s13, r1
 8010874:	ee07 2a10 	vmov	s14, r2
 8010878:	ee07 3a90 	vmov	s15, r3
}
 801087c:	eeb0 0a66 	vmov.f32	s0, s13
 8010880:	eef0 0a47 	vmov.f32	s1, s14
 8010884:	eeb0 1a67 	vmov.f32	s2, s15
 8010888:	3738      	adds	r7, #56	; 0x38
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
	...

08010890 <calculate_polynomial_coefficients>:
// points to _after_ the part that has been processed.
static compressed_piece_ptr calculate_polynomial_coefficients(
  float *result, compressed_piece_ptr ptr,
  enum piecewise_traj_storage_type storage_type,
  float initial_condition, float duration, float scale)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b090      	sub	sp, #64	; 0x40
 8010894:	af00      	add	r7, sp, #0
 8010896:	6178      	str	r0, [r7, #20]
 8010898:	6139      	str	r1, [r7, #16]
 801089a:	4613      	mov	r3, r2
 801089c:	ed87 0a02 	vstr	s0, [r7, #8]
 80108a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80108a4:	ed87 1a00 	vstr	s2, [r7]
 80108a8:	73fb      	strb	r3, [r7, #15]
  compressed_piece_coordinate value;
  float control_points[PP_SIZE];
  uint8_t i, n;

  n = control_points_by_type[storage_type] + 1;
 80108aa:	7bfb      	ldrb	r3, [r7, #15]
 80108ac:	4a1e      	ldr	r2, [pc, #120]	; (8010928 <calculate_polynomial_coefficients+0x98>)
 80108ae:	5cd3      	ldrb	r3, [r2, r3]
 80108b0:	3301      	adds	r3, #1
 80108b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  control_points[0] = initial_condition;
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	61fb      	str	r3, [r7, #28]
  for (i = 1; i < n; i++) {
 80108ba:	2301      	movs	r3, #1
 80108bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80108c0:	e01d      	b.n	80108fe <calculate_polynomial_coefficients+0x6e>
    ptr = next_coordinate(ptr, &value);
 80108c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80108c6:	4619      	mov	r1, r3
 80108c8:	6938      	ldr	r0, [r7, #16]
 80108ca:	f000 f870 	bl	80109ae <next_coordinate>
 80108ce:	6138      	str	r0, [r7, #16]
    control_points[i] = value / scale;
 80108d0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80108d4:	ee07 3a90 	vmov	s15, r3
 80108d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80108dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108e0:	ed97 7a00 	vldr	s14, [r7]
 80108e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	3340      	adds	r3, #64	; 0x40
 80108ec:	443b      	add	r3, r7
 80108ee:	3b24      	subs	r3, #36	; 0x24
 80108f0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < n; i++) {
 80108f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108f8:	3301      	adds	r3, #1
 80108fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80108fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010902:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010906:	429a      	cmp	r2, r3
 8010908:	d3db      	bcc.n	80108c2 <calculate_polynomial_coefficients+0x32>
  }

  polybezier(result, duration, control_points, n);
 801090a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 801090e:	f107 031c 	add.w	r3, r7, #28
 8010912:	4619      	mov	r1, r3
 8010914:	ed97 0a01 	vldr	s0, [r7, #4]
 8010918:	6978      	ldr	r0, [r7, #20]
 801091a:	f7fe fe2d 	bl	800f578 <polybezier>

  return ptr;
 801091e:	693b      	ldr	r3, [r7, #16]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3740      	adds	r7, #64	; 0x40
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	0802f068 	.word	0x0802f068

0801092c <calculate_total_duration>:

// Calculates the total duration of a compressed trajectory, starting at the
// given piece
static float calculate_total_duration(compressed_piece_ptr ptr)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b086      	sub	sp, #24
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  uint32_t duration_in_msec = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	617b      	str	r3, [r7, #20]
  struct compressed_piece_parsed_header header;

  while (1) {
    ptr = parse_header_of_current_piece(&header, ptr);
 8010938:	f107 0308 	add.w	r3, r7, #8
 801093c:	6879      	ldr	r1, [r7, #4]
 801093e:	4618      	mov	r0, r3
 8010940:	f000 f87a 	bl	8010a38 <parse_header_of_current_piece>
 8010944:	6078      	str	r0, [r7, #4]
    if (ptr) {
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d005      	beq.n	8010958 <calculate_total_duration+0x2c>
      duration_in_msec += header.duration_in_msec;
 801094c:	893b      	ldrh	r3, [r7, #8]
 801094e:	461a      	mov	r2, r3
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	4413      	add	r3, r2
 8010954:	617b      	str	r3, [r7, #20]
 8010956:	e7ef      	b.n	8010938 <calculate_total_duration+0xc>
    } else {
      return duration_in_msec / STORED_DURATION_SCALE;
 8010958:	6978      	ldr	r0, [r7, #20]
 801095a:	f7ef fde3 	bl	8000524 <__aeabi_ui2d>
 801095e:	f04f 0200 	mov.w	r2, #0
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <calculate_total_duration+0x58>)
 8010964:	f7ef ff82 	bl	800086c <__aeabi_ddiv>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	4610      	mov	r0, r2
 801096e:	4619      	mov	r1, r3
 8010970:	f7f0 f92a 	bl	8000bc8 <__aeabi_d2f>
 8010974:	4603      	mov	r3, r0
 8010976:	ee07 3a90 	vmov	s15, r3
    }
  }
}
 801097a:	eeb0 0a67 	vmov.f32	s0, s15
 801097e:	3718      	adds	r7, #24
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	408f4000 	.word	0x408f4000

08010988 <end_time_of_current_piece>:

// Returns the end time of the current piece being executed
static inline float end_time_of_current_piece(const struct piecewise_traj_compressed *traj) {
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  return start_time_of_current_piece(traj) + traj->current_piece.poly4d.duration;
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 f8c3 	bl	8010b1c <start_time_of_current_piece>
 8010996:	eeb0 7a40 	vmov.f32	s14, s0
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80109a0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80109a4:	eeb0 0a67 	vmov.f32	s0, s15
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <next_coordinate>:

// Parses the two bytes pointed to by the given pointer as a signed 16-bit
// integer, in little endian order, and returns the pointer advanced by two
// bytes
static compressed_piece_ptr next_coordinate(compressed_piece_ptr ptr, compressed_piece_coordinate* coord) {
 80109ae:	b480      	push	{r7}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	6039      	str	r1, [r7, #0]
  *coord = ptr[0] + (ptr[1] << 8);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	b29a      	uxth	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	3301      	adds	r3, #1
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	021b      	lsls	r3, r3, #8
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	4413      	add	r3, r2
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	b21a      	sxth	r2, r3
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	801a      	strh	r2, [r3, #0]
  return ptr + 2;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	3302      	adds	r3, #2
}
 80109d8:	4618      	mov	r0, r3
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <next_duration>:

// Parses the two bytes pointed to by the given pointer as an unsigned 16-bit
// integer, in little endian order, and returns the pointer advanced by two
// bytes
static compressed_piece_ptr next_duration(compressed_piece_ptr ptr, uint16_t* coord) {
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  *coord = ptr[0] + (ptr[1] << 8);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	3301      	adds	r3, #1
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	021b      	lsls	r3, r3, #8
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	4413      	add	r3, r2
 8010a02:	b29a      	uxth	r2, r3
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	801a      	strh	r2, [r3, #0]
  return ptr + 2;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3302      	adds	r3, #2
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <next_piece>:

// Given a pointer that points to the start of a piece inside the data section
// of a compressed trajectory, returns the pointer that points to the next
// piece or zero if this is the last piece
static compressed_piece_ptr next_piece(compressed_piece_ptr ptr)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  struct compressed_piece_parsed_header header;
  return parse_header_of_current_piece(&header, ptr);
 8010a20:	f107 030c 	add.w	r3, r7, #12
 8010a24:	6879      	ldr	r1, [r7, #4]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f000 f806 	bl	8010a38 <parse_header_of_current_piece>
 8010a2c:	4603      	mov	r3, r0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3718      	adds	r7, #24
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
	...

08010a38 <parse_header_of_current_piece>:
// the duration of the piece as well as the storage types of the XY, Z and
// yaw coordinates. Returns a pointer that points to the next piece or 0 if
// this was the last piece.
static compressed_piece_ptr parse_header_of_current_piece(
  struct compressed_piece_parsed_header* result, compressed_piece_ptr ptr)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  uint8_t header;
  int length;

  if (!ptr) {
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d116      	bne.n	8010a76 <parse_header_of_current_piece+0x3e>
    result->x_type = result->y_type = result->z_type = result->yaw_type = PPTRAJ_STORAGE_CONSTANT;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	715a      	strb	r2, [r3, #5]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	795a      	ldrb	r2, [r3, #5]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	711a      	strb	r2, [r3, #4]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	791a      	ldrb	r2, [r3, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	70da      	strb	r2, [r3, #3]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	78da      	ldrb	r2, [r3, #3]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	709a      	strb	r2, [r3, #2]
    result->body = 0;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	609a      	str	r2, [r3, #8]
    result->duration_in_msec = 0;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	801a      	strh	r2, [r3, #0]
    return 0;
 8010a72:	2300      	movs	r3, #0
 8010a74:	e04c      	b.n	8010b10 <parse_header_of_current_piece+0xd8>
  }

  header = *ptr;
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	73fb      	strb	r3, [r7, #15]

  result->x_type   = (enum piecewise_traj_storage_type) (header & 0x03);
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
 8010a7e:	f003 0303 	and.w	r3, r3, #3
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	709a      	strb	r2, [r3, #2]
  result->y_type   = (enum piecewise_traj_storage_type) ((header >> 2) & 0x03);
 8010a88:	7bfb      	ldrb	r3, [r7, #15]
 8010a8a:	089b      	lsrs	r3, r3, #2
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	f003 0303 	and.w	r3, r3, #3
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	70da      	strb	r2, [r3, #3]
  result->z_type   = (enum piecewise_traj_storage_type) ((header >> 4) & 0x03);
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
 8010a9a:	091b      	lsrs	r3, r3, #4
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	f003 0303 	and.w	r3, r3, #3
 8010aa2:	b2da      	uxtb	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	711a      	strb	r2, [r3, #4]
  result->yaw_type = (enum piecewise_traj_storage_type) ((header >> 6) & 0x03);
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
 8010aaa:	099b      	lsrs	r3, r3, #6
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	715a      	strb	r2, [r3, #5]
  ptr++;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	603b      	str	r3, [r7, #0]

  result->body = ptr = next_duration(ptr, &result->duration_in_msec);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4619      	mov	r1, r3
 8010abc:	6838      	ldr	r0, [r7, #0]
 8010abe:	f7ff ff91 	bl	80109e4 <next_duration>
 8010ac2:	6038      	str	r0, [r7, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	609a      	str	r2, [r3, #8]

  if (result->duration_in_msec > 0) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	881b      	ldrh	r3, [r3, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d01d      	beq.n	8010b0e <parse_header_of_current_piece+0xd6>
    length = (
      control_points_by_type[result->x_type] +
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	789b      	ldrb	r3, [r3, #2]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	4b0f      	ldr	r3, [pc, #60]	; (8010b18 <parse_header_of_current_piece+0xe0>)
 8010ada:	5c9b      	ldrb	r3, [r3, r2]
 8010adc:	461a      	mov	r2, r3
      control_points_by_type[result->y_type] +
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	78db      	ldrb	r3, [r3, #3]
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	4b0c      	ldr	r3, [pc, #48]	; (8010b18 <parse_header_of_current_piece+0xe0>)
 8010ae6:	5c5b      	ldrb	r3, [r3, r1]
      control_points_by_type[result->x_type] +
 8010ae8:	4413      	add	r3, r2
      control_points_by_type[result->z_type] +
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	7912      	ldrb	r2, [r2, #4]
 8010aee:	4611      	mov	r1, r2
 8010af0:	4a09      	ldr	r2, [pc, #36]	; (8010b18 <parse_header_of_current_piece+0xe0>)
 8010af2:	5c52      	ldrb	r2, [r2, r1]
      control_points_by_type[result->y_type] +
 8010af4:	4413      	add	r3, r2
      control_points_by_type[result->yaw_type]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	7952      	ldrb	r2, [r2, #5]
 8010afa:	4611      	mov	r1, r2
 8010afc:	4a06      	ldr	r2, [pc, #24]	; (8010b18 <parse_header_of_current_piece+0xe0>)
 8010afe:	5c52      	ldrb	r2, [r2, r1]
      control_points_by_type[result->z_type] +
 8010b00:	4413      	add	r3, r2
    ) * sizeof(compressed_piece_coordinate);
 8010b02:	005b      	lsls	r3, r3, #1
    length = (
 8010b04:	60bb      	str	r3, [r7, #8]
    return ptr + length;
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	683a      	ldr	r2, [r7, #0]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	e000      	b.n	8010b10 <parse_header_of_current_piece+0xd8>
  } else {
    return 0;
 8010b0e:	2300      	movs	r3, #0
  }
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	0802f068 	.word	0x0802f068

08010b1c <start_time_of_current_piece>:

// Returns the start time of the current piece being executed
static inline float start_time_of_current_piece(const struct piecewise_traj_compressed *traj) {
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  return traj->t_begin + traj->current_piece.t_begin_relative;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	ed93 7a00 	vldr	s14, [r3]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8010b30:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8010b34:	eeb0 0a67 	vmov.f32	s0, s15
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr

08010b42 <time_relative_to_start_of_current_piece>:

// Returns the number of seconds elapsed since the start time of the current
// piece being executed
static inline float time_relative_to_start_of_current_piece(const struct piecewise_traj_compressed *traj, float t) {
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b082      	sub	sp, #8
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
 8010b4a:	ed87 0a00 	vstr	s0, [r7]
  return t - start_time_of_current_piece(traj);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff ffe4 	bl	8010b1c <start_time_of_current_piece>
 8010b54:	eeb0 7a40 	vmov.f32	s14, s0
 8010b58:	edd7 7a00 	vldr	s15, [r7]
 8010b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8010b60:	eeb0 0a67 	vmov.f32	s0, s15
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <piecewise_compressed_eval>:

/* ************************************************************************ */

struct traj_eval piecewise_compressed_eval(
  struct piecewise_traj_compressed *traj, float t)
{
 8010b6a:	b5b0      	push	{r4, r5, r7, lr}
 8010b6c:	b092      	sub	sp, #72	; 0x48
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	60f8      	str	r0, [r7, #12]
 8010b72:	60b9      	str	r1, [r7, #8]
 8010b74:	ed87 0a01 	vstr	s0, [r7, #4]
   * piecewise_compressed_update_current_poly4d() to stretch the time of
   * the poly4d. The problem is that the user may set the timescale to
   * a different value while the poly4d is already pre-calculated, and we
   * have no way of detecting it */

  if (t < start_time_of_current_piece(traj)) {
 8010b78:	68b8      	ldr	r0, [r7, #8]
 8010b7a:	f7ff ffcf 	bl	8010b1c <start_time_of_current_piece>
 8010b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8010b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8010b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8e:	d502      	bpl.n	8010b96 <piecewise_compressed_eval+0x2c>
    piecewise_compressed_rewind(traj);
 8010b90:	68b8      	ldr	r0, [r7, #8]
 8010b92:	f000 f88d 	bl	8010cb0 <piecewise_compressed_rewind>
  }

  while (traj->current_piece.data && t >= end_time_of_current_piece(traj)) {
 8010b96:	e002      	b.n	8010b9e <piecewise_compressed_eval+0x34>
    piecewise_compressed_advance_playhead(traj);
 8010b98:	68b8      	ldr	r0, [r7, #8]
 8010b9a:	f000 f997 	bl	8010ecc <piecewise_compressed_advance_playhead>
  while (traj->current_piece.data && t >= end_time_of_current_piece(traj)) {
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	69db      	ldr	r3, [r3, #28]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00b      	beq.n	8010bbe <piecewise_compressed_eval+0x54>
 8010ba6:	68b8      	ldr	r0, [r7, #8]
 8010ba8:	f7ff feee 	bl	8010988 <end_time_of_current_piece>
 8010bac:	eeb0 7a40 	vmov.f32	s14, s0
 8010bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8010bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbc:	daec      	bge.n	8010b98 <piecewise_compressed_eval+0x2e>
  }

  t = time_relative_to_start_of_current_piece(traj, t);
 8010bbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8010bc2:	68b8      	ldr	r0, [r7, #8]
 8010bc4:	f7ff ffbd 	bl	8010b42 <time_relative_to_start_of_current_piece>
 8010bc8:	ed87 0a01 	vstr	s0, [r7, #4]

  eval = poly4d_eval(&traj->current_piece.poly4d, t);
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010bd2:	f107 0314 	add.w	r3, r7, #20
 8010bd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8010bda:	4611      	mov	r1, r2
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff f8dd 	bl	800fd9c <poly4d_eval>
  eval.pos = vadd(eval.pos, traj->shift);
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	ed93 5a03 	vldr	s10, [r3, #12]
 8010be8:	edd3 5a04 	vldr	s11, [r3, #16]
 8010bec:	ed93 6a05 	vldr	s12, [r3, #20]
 8010bf0:	edd7 6a05 	vldr	s13, [r7, #20]
 8010bf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8010bf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8010bfc:	eef0 1a45 	vmov.f32	s3, s10
 8010c00:	eeb0 2a65 	vmov.f32	s4, s11
 8010c04:	eef0 2a46 	vmov.f32	s5, s12
 8010c08:	eeb0 0a66 	vmov.f32	s0, s13
 8010c0c:	eef0 0a47 	vmov.f32	s1, s14
 8010c10:	eeb0 1a67 	vmov.f32	s2, s15
 8010c14:	f7ff fde8 	bl	80107e8 <vadd>
 8010c18:	eef0 6a40 	vmov.f32	s13, s0
 8010c1c:	eeb0 7a60 	vmov.f32	s14, s1
 8010c20:	eef0 7a41 	vmov.f32	s15, s2
 8010c24:	edc7 6a05 	vstr	s13, [r7, #20]
 8010c28:	ed87 7a06 	vstr	s14, [r7, #24]
 8010c2c:	edc7 7a07 	vstr	s15, [r7, #28]

  return eval;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	461d      	mov	r5, r3
 8010c34:	f107 0414 	add.w	r4, r7, #20
 8010c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c44:	6823      	ldr	r3, [r4, #0]
 8010c46:	602b      	str	r3, [r5, #0]
}
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	3748      	adds	r7, #72	; 0x48
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bdb0      	pop	{r4, r5, r7, pc}

08010c50 <piecewise_compressed_load>:

void piecewise_compressed_load(struct piecewise_traj_compressed *traj, const void* data)
{
 8010c50:	b590      	push	{r4, r7, lr}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  traj->t_begin = 0;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f04f 0200 	mov.w	r2, #0
 8010c60:	601a      	str	r2, [r3, #0]
  traj->timescale = 1;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c68:	609a      	str	r2, [r3, #8]

  traj->data = data;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	619a      	str	r2, [r3, #24]
  traj->shift = vzero();
 8010c70:	687c      	ldr	r4, [r7, #4]
 8010c72:	f7ff fd91 	bl	8010798 <vzero>
 8010c76:	eef0 6a40 	vmov.f32	s13, s0
 8010c7a:	eeb0 7a60 	vmov.f32	s14, s1
 8010c7e:	eef0 7a41 	vmov.f32	s15, s2
 8010c82:	edc4 6a03 	vstr	s13, [r4, #12]
 8010c86:	ed84 7a04 	vstr	s14, [r4, #16]
 8010c8a:	edc4 7a05 	vstr	s15, [r4, #20]
  piecewise_compressed_rewind(traj);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f80e 	bl	8010cb0 <piecewise_compressed_rewind>

  traj->duration = calculate_total_duration(traj->current_piece.data);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	69db      	ldr	r3, [r3, #28]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7ff fe47 	bl	801092c <calculate_total_duration>
 8010c9e:	eef0 7a40 	vmov.f32	s15, s0
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8010ca8:	bf00      	nop
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd90      	pop	{r4, r7, pc}

08010cb0 <piecewise_compressed_rewind>:

static void piecewise_compressed_rewind(struct piecewise_traj_compressed *traj)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b092      	sub	sp, #72	; 0x48
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  struct traj_eval stopped;
  compressed_piece_coordinate value;
  compressed_piece_ptr ptr;

  /* Parse header that stores the start coordinates */
  bzero(&stopped, sizeof(stopped));
 8010cb8:	f107 0310 	add.w	r3, r7, #16
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	2334      	movs	r3, #52	; 0x34
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	f013 fedc 	bl	8024a80 <memset>
  ptr = traj->data;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	699b      	ldr	r3, [r3, #24]
 8010ccc:	647b      	str	r3, [r7, #68]	; 0x44
  ptr = next_coordinate(ptr, &value); stopped.pos.x = value / STORED_DISTANCE_SCALE;
 8010cce:	f107 030e 	add.w	r3, r7, #14
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010cd6:	f7ff fe6a 	bl	80109ae <next_coordinate>
 8010cda:	6478      	str	r0, [r7, #68]	; 0x44
 8010cdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ef fc2f 	bl	8000544 <__aeabi_i2d>
 8010ce6:	f04f 0200 	mov.w	r2, #0
 8010cea:	4b35      	ldr	r3, [pc, #212]	; (8010dc0 <piecewise_compressed_rewind+0x110>)
 8010cec:	f7ef fdbe 	bl	800086c <__aeabi_ddiv>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	f7ef ff66 	bl	8000bc8 <__aeabi_d2f>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	613b      	str	r3, [r7, #16]
  ptr = next_coordinate(ptr, &value); stopped.pos.y = value / STORED_DISTANCE_SCALE;
 8010d00:	f107 030e 	add.w	r3, r7, #14
 8010d04:	4619      	mov	r1, r3
 8010d06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d08:	f7ff fe51 	bl	80109ae <next_coordinate>
 8010d0c:	6478      	str	r0, [r7, #68]	; 0x44
 8010d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7ef fc16 	bl	8000544 <__aeabi_i2d>
 8010d18:	f04f 0200 	mov.w	r2, #0
 8010d1c:	4b28      	ldr	r3, [pc, #160]	; (8010dc0 <piecewise_compressed_rewind+0x110>)
 8010d1e:	f7ef fda5 	bl	800086c <__aeabi_ddiv>
 8010d22:	4602      	mov	r2, r0
 8010d24:	460b      	mov	r3, r1
 8010d26:	4610      	mov	r0, r2
 8010d28:	4619      	mov	r1, r3
 8010d2a:	f7ef ff4d 	bl	8000bc8 <__aeabi_d2f>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	617b      	str	r3, [r7, #20]
  ptr = next_coordinate(ptr, &value); stopped.pos.z = value / STORED_DISTANCE_SCALE;
 8010d32:	f107 030e 	add.w	r3, r7, #14
 8010d36:	4619      	mov	r1, r3
 8010d38:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d3a:	f7ff fe38 	bl	80109ae <next_coordinate>
 8010d3e:	6478      	str	r0, [r7, #68]	; 0x44
 8010d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7ef fbfd 	bl	8000544 <__aeabi_i2d>
 8010d4a:	f04f 0200 	mov.w	r2, #0
 8010d4e:	4b1c      	ldr	r3, [pc, #112]	; (8010dc0 <piecewise_compressed_rewind+0x110>)
 8010d50:	f7ef fd8c 	bl	800086c <__aeabi_ddiv>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	4610      	mov	r0, r2
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	f7ef ff34 	bl	8000bc8 <__aeabi_d2f>
 8010d60:	4603      	mov	r3, r0
 8010d62:	61bb      	str	r3, [r7, #24]
  ptr = next_coordinate(ptr, &value); stopped.yaw = value / STORED_ANGLE_SCALE;
 8010d64:	f107 030e 	add.w	r3, r7, #14
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d6c:	f7ff fe1f 	bl	80109ae <next_coordinate>
 8010d70:	6478      	str	r0, [r7, #68]	; 0x44
 8010d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7ef fbe4 	bl	8000544 <__aeabi_i2d>
 8010d7c:	a30e      	add	r3, pc, #56	; (adr r3, 8010db8 <piecewise_compressed_rewind+0x108>)
 8010d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d82:	f7ef fd73 	bl	800086c <__aeabi_ddiv>
 8010d86:	4602      	mov	r2, r0
 8010d88:	460b      	mov	r3, r1
 8010d8a:	4610      	mov	r0, r2
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	f7ef ff1b 	bl	8000bc8 <__aeabi_d2f>
 8010d92:	4603      	mov	r3, r0
 8010d94:	643b      	str	r3, [r7, #64]	; 0x40
  traj->current_piece.t_begin_relative = 0;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f04f 0200 	mov.w	r2, #0
 8010d9c:	621a      	str	r2, [r3, #32]
  traj->current_piece.data = ptr;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010da2:	61da      	str	r2, [r3, #28]

  piecewise_compressed_update_current_poly4d(traj, &stopped);
 8010da4:	f107 0310 	add.w	r3, r7, #16
 8010da8:	4619      	mov	r1, r3
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 f80a 	bl	8010dc4 <piecewise_compressed_update_current_poly4d>
}
 8010db0:	bf00      	nop
 8010db2:	3748      	adds	r7, #72	; 0x48
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	9999999a 	.word	0x9999999a
 8010dbc:	3fb99999 	.word	0x3fb99999
 8010dc0:	408f4000 	.word	0x408f4000

08010dc4 <piecewise_compressed_update_current_poly4d>:

static void piecewise_compressed_update_current_poly4d(
  struct piecewise_traj_compressed *traj, const struct traj_eval *prev_end)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b088      	sub	sp, #32
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  struct poly4d* poly4d = &traj->current_piece.poly4d;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3324      	adds	r3, #36	; 0x24
 8010dd2:	61fb      	str	r3, [r7, #28]
  compressed_piece_ptr ptr;
  struct compressed_piece_parsed_header header;

  /* First, clear everything in the poly4d */
  bzero(poly4d, sizeof(*poly4d));
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	2384      	movs	r3, #132	; 0x84
 8010dda:	461a      	mov	r2, r3
 8010ddc:	2100      	movs	r1, #0
 8010dde:	f013 fe4f 	bl	8024a80 <memset>

  /* Parse the header of the current piece, extract the storage types and the duration */
  ptr = traj->current_piece.data;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	69db      	ldr	r3, [r3, #28]
 8010de6:	61bb      	str	r3, [r7, #24]
  parse_header_of_current_piece(&header, ptr);
 8010de8:	f107 030c 	add.w	r3, r7, #12
 8010dec:	69b9      	ldr	r1, [r7, #24]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7ff fe22 	bl	8010a38 <parse_header_of_current_piece>
  poly4d->duration = header.duration_in_msec / STORED_DURATION_SCALE;
 8010df4:	89bb      	ldrh	r3, [r7, #12]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ef fba4 	bl	8000544 <__aeabi_i2d>
 8010dfc:	f04f 0200 	mov.w	r2, #0
 8010e00:	4b2f      	ldr	r3, [pc, #188]	; (8010ec0 <piecewise_compressed_update_current_poly4d+0xfc>)
 8010e02:	f7ef fd33 	bl	800086c <__aeabi_ddiv>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	f7ef fedb 	bl	8000bc8 <__aeabi_d2f>
 8010e12:	4602      	mov	r2, r0
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process the body */
  ptr = header.body;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	61bb      	str	r3, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[0], ptr, header.x_type, prev_end->pos.x, poly4d->duration, STORED_DISTANCE_SCALE);
 8010e1e:	69f8      	ldr	r0, [r7, #28]
  ptr = calculate_polynomial_coefficients(
 8010e20:	7bba      	ldrb	r2, [r7, #14]
    poly4d->p[0], ptr, header.x_type, prev_end->pos.x, poly4d->duration, STORED_DISTANCE_SCALE);
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	edd3 7a00 	vldr	s15, [r3]
  ptr = calculate_polynomial_coefficients(
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8010e2e:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8010ec4 <piecewise_compressed_update_current_poly4d+0x100>
 8010e32:	eef0 0a47 	vmov.f32	s1, s14
 8010e36:	eeb0 0a67 	vmov.f32	s0, s15
 8010e3a:	69b9      	ldr	r1, [r7, #24]
 8010e3c:	f7ff fd28 	bl	8010890 <calculate_polynomial_coefficients>
 8010e40:	61b8      	str	r0, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[1], ptr, header.y_type, prev_end->pos.y, poly4d->duration, STORED_DISTANCE_SCALE);
 8010e42:	69fb      	ldr	r3, [r7, #28]
 8010e44:	f103 0020 	add.w	r0, r3, #32
  ptr = calculate_polynomial_coefficients(
 8010e48:	7bfa      	ldrb	r2, [r7, #15]
    poly4d->p[1], ptr, header.y_type, prev_end->pos.y, poly4d->duration, STORED_DISTANCE_SCALE);
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	edd3 7a01 	vldr	s15, [r3, #4]
  ptr = calculate_polynomial_coefficients(
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8010e56:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8010ec4 <piecewise_compressed_update_current_poly4d+0x100>
 8010e5a:	eef0 0a47 	vmov.f32	s1, s14
 8010e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e62:	69b9      	ldr	r1, [r7, #24]
 8010e64:	f7ff fd14 	bl	8010890 <calculate_polynomial_coefficients>
 8010e68:	61b8      	str	r0, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[2], ptr, header.z_type, prev_end->pos.z, poly4d->duration, STORED_DISTANCE_SCALE);
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  ptr = calculate_polynomial_coefficients(
 8010e70:	7c3a      	ldrb	r2, [r7, #16]
    poly4d->p[2], ptr, header.z_type, prev_end->pos.z, poly4d->duration, STORED_DISTANCE_SCALE);
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	edd3 7a02 	vldr	s15, [r3, #8]
  ptr = calculate_polynomial_coefficients(
 8010e78:	69fb      	ldr	r3, [r7, #28]
 8010e7a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8010e7e:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8010ec4 <piecewise_compressed_update_current_poly4d+0x100>
 8010e82:	eef0 0a47 	vmov.f32	s1, s14
 8010e86:	eeb0 0a67 	vmov.f32	s0, s15
 8010e8a:	69b9      	ldr	r1, [r7, #24]
 8010e8c:	f7ff fd00 	bl	8010890 <calculate_polynomial_coefficients>
 8010e90:	61b8      	str	r0, [r7, #24]
  calculate_polynomial_coefficients(
    poly4d->p[3], ptr, header.yaw_type, prev_end->yaw, poly4d->duration, STORED_ANGLE_SCALE);
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	f103 0060 	add.w	r0, r3, #96	; 0x60
  calculate_polynomial_coefficients(
 8010e98:	7c7a      	ldrb	r2, [r7, #17]
    poly4d->p[3], ptr, header.yaw_type, prev_end->yaw, poly4d->duration, STORED_ANGLE_SCALE);
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  calculate_polynomial_coefficients(
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8010ea6:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8010ec8 <piecewise_compressed_update_current_poly4d+0x104>
 8010eaa:	eef0 0a47 	vmov.f32	s1, s14
 8010eae:	eeb0 0a67 	vmov.f32	s0, s15
 8010eb2:	69b9      	ldr	r1, [r7, #24]
 8010eb4:	f7ff fcec 	bl	8010890 <calculate_polynomial_coefficients>
}
 8010eb8:	bf00      	nop
 8010eba:	3720      	adds	r7, #32
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	408f4000 	.word	0x408f4000
 8010ec4:	447a0000 	.word	0x447a0000
 8010ec8:	3dcccccd 	.word	0x3dcccccd

08010ecc <piecewise_compressed_advance_playhead>:

static void piecewise_compressed_advance_playhead(struct piecewise_traj_compressed *traj)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b090      	sub	sp, #64	; 0x40
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  float duration = traj->current_piece.poly4d.duration;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct traj_eval end_of_previous_piece = poly4d_eval(&traj->current_piece.poly4d, duration);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010ee2:	f107 0308 	add.w	r3, r7, #8
 8010ee6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8010eea:	4611      	mov	r1, r2
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fe ff55 	bl	800fd9c <poly4d_eval>

  traj->current_piece.t_begin_relative += duration;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	ed93 7a08 	vldr	s14, [r3, #32]
 8010ef8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	edc3 7a08 	vstr	s15, [r3, #32]
  traj->current_piece.data = next_piece(traj->current_piece.data);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	69db      	ldr	r3, [r3, #28]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff fd84 	bl	8010a18 <next_piece>
 8010f10:	4602      	mov	r2, r0
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	61da      	str	r2, [r3, #28]

  piecewise_compressed_update_current_poly4d(traj, &end_of_previous_piece);
 8010f16:	f107 0308 	add.w	r3, r7, #8
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff ff51 	bl	8010dc4 <piecewise_compressed_update_current_poly4d>
}
 8010f22:	bf00      	nop
 8010f24:	3740      	adds	r7, #64	; 0x40
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 8010f2a:	b480      	push	{r7}
 8010f2c:	b085      	sub	sp, #20
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	60f8      	str	r0, [r7, #12]
 8010f32:	60b9      	str	r1, [r7, #8]
 8010f34:	607a      	str	r2, [r7, #4]
 8010f36:	603b      	str	r3, [r7, #0]
    context->count = 0;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	687a      	ldr	r2, [r7, #4]
 8010f42:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	683a      	ldr	r2, [r7, #0]
 8010f48:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	69ba      	ldr	r2, [r7, #24]
 8010f4e:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 8010f50:	68ba      	ldr	r2, [r7, #8]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	441a      	add	r2, r3
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	7f3a      	ldrb	r2, [r7, #28]
 8010f64:	761a      	strb	r2, [r3, #24]
}
 8010f66:	bf00      	nop
 8010f68:	3714      	adds	r7, #20
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 8010f72:	b480      	push	{r7}
 8010f74:	b085      	sub	sp, #20
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
 8010f7a:	6039      	str	r1, [r7, #0]
    bool result = true;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	1c5a      	adds	r2, r3, #1
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	683a      	ldr	r2, [r7, #0]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d927      	bls.n	8010fe4 <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	68ba      	ldr	r2, [r7, #8]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d304      	bcc.n	8010fae <rateSupervisorValidate+0x3c>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	689b      	ldr	r3, [r3, #8]
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d901      	bls.n	8010fb2 <rateSupervisorValidate+0x40>
            result = false;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	615a      	str	r2, [r3, #20]
        context->count = 0;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	691a      	ldr	r2, [r3, #16]
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	441a      	add	r2, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7e1b      	ldrb	r3, [r3, #24]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d007      	beq.n	8010fe4 <rateSupervisorValidate+0x72>
            result = true;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	7e1b      	ldrb	r3, [r3, #24]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3714      	adds	r7, #20
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr

08010ff2 <rateSupervisorLatestCount>:

uint32_t rateSupervisorLatestCount(rateSupervisor_t* context) {
 8010ff2:	b480      	push	{r7}
 8010ff4:	b083      	sub	sp, #12
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
    return context->latestCount;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	695b      	ldr	r3, [r3, #20]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
	...

0801100c <supervisorIsFlying>:

bool supervisorCanFly() {
  return supervisorMem.canFly;
}

bool supervisorIsFlying() {
 801100c:	b480      	push	{r7}
 801100e:	af00      	add	r7, sp, #0
  return supervisorMem.isFlying;
 8011010:	4b03      	ldr	r3, [pc, #12]	; (8011020 <supervisorIsFlying+0x14>)
 8011012:	785b      	ldrb	r3, [r3, #1]
}
 8011014:	4618      	mov	r0, r3
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop
 8011020:	2000ac30 	.word	0x2000ac30

08011024 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 801102e:	1d3b      	adds	r3, r7, #4
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f8a3 	bl	801117c <platformGetListOfConfigurations>
 8011036:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	4619      	mov	r1, r3
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 f855 	bl	80110ec <platformInitConfiguration>
 8011042:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 801104a:	2301      	movs	r3, #1
 801104c:	e000      	b.n	8011050 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2b30      	cmp	r3, #48	; 0x30
 8011068:	d104      	bne.n	8011074 <platformParseDeviceTypeString+0x1c>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	3301      	adds	r3, #1
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	2b3b      	cmp	r3, #59	; 0x3b
 8011072:	d001      	beq.n	8011078 <platformParseDeviceTypeString+0x20>
    return 1;
 8011074:	2301      	movs	r3, #1
 8011076:	e034      	b.n	80110e2 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8011078:	2302      	movs	r3, #2
 801107a:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	3304      	adds	r3, #4
 8011080:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8011082:	2300      	movs	r3, #0
 8011084:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	617b      	str	r3, [r7, #20]
 801108a:	e00e      	b.n	80110aa <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	4413      	add	r3, r2
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d00c      	beq.n	80110b2 <platformParseDeviceTypeString+0x5a>
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	4413      	add	r3, r2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b3b      	cmp	r3, #59	; 0x3b
 80110a2:	d006      	beq.n	80110b2 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	3301      	adds	r3, #1
 80110a8:	617b      	str	r3, [r7, #20]
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	ddec      	ble.n	801108c <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	dd01      	ble.n	80110be <platformParseDeviceTypeString+0x66>
    return 1;
 80110ba:	2301      	movs	r3, #1
 80110bc:	e011      	b.n	80110e2 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 80110be:	697a      	ldr	r2, [r7, #20]
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	4413      	add	r3, r2
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	4619      	mov	r1, r3
 80110d0:	6838      	ldr	r0, [r7, #0]
 80110d2:	f013 fe50 	bl	8024d76 <memcpy>
  deviceType[length] = '\0';
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	683a      	ldr	r2, [r7, #0]
 80110da:	4413      	add	r3, r2
 80110dc:	2200      	movs	r2, #0
 80110de:	701a      	strb	r2, [r3, #0]
  return 0;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3718      	adds	r7, #24
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
	...

080110ec <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b090      	sub	sp, #64	; 0x40
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 80110f6:	f107 0314 	add.w	r3, r7, #20
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 f85e 	bl	80111bc <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8011100:	f107 020c 	add.w	r2, r7, #12
 8011104:	f107 0314 	add.w	r3, r7, #20
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff ffa4 	bl	8011058 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8011110:	2300      	movs	r3, #0
 8011112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011114:	e01a      	b.n	801114c <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8011116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011118:	4613      	mov	r3, r2
 801111a:	00db      	lsls	r3, r3, #3
 801111c:	4413      	add	r3, r2
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	4413      	add	r3, r2
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	4413      	add	r3, r2
 8011126:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8011128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112a:	f107 020c 	add.w	r2, r7, #12
 801112e:	4611      	mov	r1, r2
 8011130:	4618      	mov	r0, r3
 8011132:	f7ef f84d 	bl	80001d0 <strcmp>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d104      	bne.n	8011146 <platformInitConfiguration+0x5a>
      active_config = config;
 801113c:	4a08      	ldr	r2, [pc, #32]	; (8011160 <platformInitConfiguration+0x74>)
 801113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011140:	6013      	str	r3, [r2, #0]
      return 0;
 8011142:	2300      	movs	r3, #0
 8011144:	e007      	b.n	8011156 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8011146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011148:	3301      	adds	r3, #1
 801114a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801114c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	429a      	cmp	r2, r3
 8011152:	dbe0      	blt.n	8011116 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8011154:	2301      	movs	r3, #1
}
 8011156:	4618      	mov	r0, r3
 8011158:	3740      	adds	r7, #64	; 0x40
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	2000ac4c 	.word	0x2000ac4c

08011164 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 8011164:	b480      	push	{r7}
 8011166:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 8011168:	4b03      	ldr	r3, [pc, #12]	; (8011178 <platformConfigGetDeviceTypeName+0x14>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	3305      	adds	r3, #5
}
 801116e:	4618      	mov	r0, r3
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr
 8011178:	2000ac4c 	.word	0x2000ac4c

0801117c <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2203      	movs	r2, #3
 8011188:	601a      	str	r2, [r3, #0]
  return configs;
 801118a:	4b03      	ldr	r3, [pc, #12]	; (8011198 <platformGetListOfConfigurations+0x1c>)
}
 801118c:	4618      	mov	r0, r3
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr
 8011198:	20000e74 	.word	0x20000e74

0801119c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 801119c:	b480      	push	{r7}
 801119e:	b083      	sub	sp, #12
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80111aa:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80111ae:	015b      	lsls	r3, r3, #5
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 80111bc:	b580      	push	{r7, lr}
 80111be:	b086      	sub	sp, #24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  char* block = 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
 80111cc:	e00d      	b.n	80111ea <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 80111ce:	6938      	ldr	r0, [r7, #16]
 80111d0:	f7ff ffe4 	bl	801119c <getAddressOfOtpMemoryBlock>
 80111d4:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d002      	beq.n	80111e4 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	617b      	str	r3, [r7, #20]
      break;
 80111e2:	e005      	b.n	80111f0 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	3301      	adds	r3, #1
 80111e8:	613b      	str	r3, [r7, #16]
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	2b0f      	cmp	r3, #15
 80111ee:	ddee      	ble.n	80111ce <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d003      	beq.n	80111fe <platformGetDeviceTypeString+0x42>
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	2bff      	cmp	r3, #255	; 0xff
 80111fc:	d101      	bne.n	8011202 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 80111fe:	4b07      	ldr	r3, [pc, #28]	; (801121c <platformGetDeviceTypeString+0x60>)
 8011200:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8011202:	2220      	movs	r2, #32
 8011204:	6979      	ldr	r1, [r7, #20]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f013 fc70 	bl	8024aec <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3320      	adds	r3, #32
 8011210:	2200      	movs	r2, #0
 8011212:	701a      	strb	r2, [r3, #0]
}
 8011214:	bf00      	nop
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	0802d5d8 	.word	0x0802d5d8

08011220 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8011220:	b480      	push	{r7}
 8011222:	b083      	sub	sp, #12
 8011224:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8011226:	4b21      	ldr	r3, [pc, #132]	; (80112ac <_DoInit+0x8c>)
 8011228:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2203      	movs	r2, #3
 801122e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2203      	movs	r2, #3
 8011234:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4a1d      	ldr	r2, [pc, #116]	; (80112b0 <_DoInit+0x90>)
 801123a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4a1d      	ldr	r2, [pc, #116]	; (80112b4 <_DoInit+0x94>)
 8011240:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011248:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2200      	movs	r2, #0
 801124e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2202      	movs	r2, #2
 801125a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a14      	ldr	r2, [pc, #80]	; (80112b0 <_DoInit+0x90>)
 8011260:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4a14      	ldr	r2, [pc, #80]	; (80112b8 <_DoInit+0x98>)
 8011266:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2220      	movs	r2, #32
 801126c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2202      	movs	r2, #2
 801127e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	3307      	adds	r3, #7
 8011284:	4a0d      	ldr	r2, [pc, #52]	; (80112bc <_DoInit+0x9c>)
 8011286:	6810      	ldr	r0, [r2, #0]
 8011288:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	4a0c      	ldr	r2, [pc, #48]	; (80112c0 <_DoInit+0xa0>)
 801128e:	6810      	ldr	r0, [r2, #0]
 8011290:	6018      	str	r0, [r3, #0]
 8011292:	8891      	ldrh	r1, [r2, #4]
 8011294:	7992      	ldrb	r2, [r2, #6]
 8011296:	8099      	strh	r1, [r3, #4]
 8011298:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2220      	movs	r2, #32
 801129e:	719a      	strb	r2, [r3, #6]
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	2000ac50 	.word	0x2000ac50
 80112b0:	0802d5e0 	.word	0x0802d5e0
 80112b4:	2000acf8 	.word	0x2000acf8
 80112b8:	2000bcf8 	.word	0x2000bcf8
 80112bc:	0802d5ec 	.word	0x0802d5ec
 80112c0:	0802d5f0 	.word	0x0802d5f0

080112c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b088      	sub	sp, #32
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80112d0:	2300      	movs	r3, #0
 80112d2:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	691b      	ldr	r3, [r3, #16]
 80112de:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80112e0:	693a      	ldr	r2, [r7, #16]
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d905      	bls.n	80112f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80112e8:	693a      	ldr	r2, [r7, #16]
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	3b01      	subs	r3, #1
 80112f0:	61fb      	str	r3, [r7, #28]
 80112f2:	e007      	b.n	8011304 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	689a      	ldr	r2, [r3, #8]
 80112f8:	6939      	ldr	r1, [r7, #16]
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	1acb      	subs	r3, r1, r3
 80112fe:	4413      	add	r3, r2
 8011300:	3b01      	subs	r3, #1
 8011302:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	689a      	ldr	r2, [r3, #8]
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	69fa      	ldr	r2, [r7, #28]
 801130e:	4293      	cmp	r3, r2
 8011310:	bf28      	it	cs
 8011312:	4613      	movcs	r3, r2
 8011314:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8011316:	69fa      	ldr	r2, [r7, #28]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4293      	cmp	r3, r2
 801131c:	bf28      	it	cs
 801131e:	4613      	movcs	r3, r2
 8011320:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	685a      	ldr	r2, [r3, #4]
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	4413      	add	r3, r2
 801132a:	69fa      	ldr	r2, [r7, #28]
 801132c:	68b9      	ldr	r1, [r7, #8]
 801132e:	4618      	mov	r0, r3
 8011330:	f013 fd21 	bl	8024d76 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8011334:	69ba      	ldr	r2, [r7, #24]
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	4413      	add	r3, r2
 801133a:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 801133c:	68ba      	ldr	r2, [r7, #8]
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	4413      	add	r3, r2
 8011342:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 801134c:	697a      	ldr	r2, [r7, #20]
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	4413      	add	r3, r2
 8011352:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	697a      	ldr	r2, [r7, #20]
 801135a:	429a      	cmp	r2, r3
 801135c:	d101      	bne.n	8011362 <_WriteBlocking+0x9e>
      WrOff = 0u;
 801135e:	2300      	movs	r3, #0
 8011360:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	697a      	ldr	r2, [r7, #20]
 8011366:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1b5      	bne.n	80112da <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 801136e:	69bb      	ldr	r3, [r7, #24]
}
 8011370:	4618      	mov	r0, r3
 8011372:	3720      	adds	r7, #32
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8011378:	b580      	push	{r7, lr}
 801137a:	b088      	sub	sp, #32
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	689a      	ldr	r2, [r3, #8]
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8011394:	69ba      	ldr	r2, [r7, #24]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	429a      	cmp	r2, r3
 801139a:	d90e      	bls.n	80113ba <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	685a      	ldr	r2, [r3, #4]
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	4413      	add	r3, r2
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	68b9      	ldr	r1, [r7, #8]
 80113a8:	4618      	mov	r0, r3
 80113aa:	f013 fce4 	bl	8024d76 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80113ae:	69fa      	ldr	r2, [r7, #28]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	441a      	add	r2, r3
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80113b8:	e01a      	b.n	80113f0 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	685a      	ldr	r2, [r3, #4]
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	4413      	add	r3, r2
 80113c6:	697a      	ldr	r2, [r7, #20]
 80113c8:	68b9      	ldr	r1, [r7, #8]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f013 fcd3 	bl	8024d76 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	1ad3      	subs	r3, r2, r3
 80113d6:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	6858      	ldr	r0, [r3, #4]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	4413      	add	r3, r2
 80113e2:	697a      	ldr	r2, [r7, #20]
 80113e4:	4619      	mov	r1, r3
 80113e6:	f013 fcc6 	bl	8024d76 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	697a      	ldr	r2, [r7, #20]
 80113ee:	60da      	str	r2, [r3, #12]
}
 80113f0:	bf00      	nop
 80113f2:	3720      	adds	r7, #32
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80113f8:	b480      	push	{r7}
 80113fa:	b087      	sub	sp, #28
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	691b      	ldr	r3, [r3, #16]
 8011404:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 801140c:	693a      	ldr	r2, [r7, #16]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	429a      	cmp	r2, r3
 8011412:	d808      	bhi.n	8011426 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	689a      	ldr	r2, [r3, #8]
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	1ad2      	subs	r2, r2, r3
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	4413      	add	r3, r2
 8011420:	3b01      	subs	r3, #1
 8011422:	617b      	str	r3, [r7, #20]
 8011424:	e004      	b.n	8011430 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8011426:	693a      	ldr	r2, [r7, #16]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	1ad3      	subs	r3, r2, r3
 801142c:	3b01      	subs	r3, #1
 801142e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8011430:	697b      	ldr	r3, [r7, #20]
}
 8011432:	4618      	mov	r0, r3
 8011434:	371c      	adds	r7, #28
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr
	...

08011440 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	60b9      	str	r1, [r7, #8]
 801144a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	4613      	mov	r3, r2
 8011456:	005b      	lsls	r3, r3, #1
 8011458:	4413      	add	r3, r2
 801145a:	00db      	lsls	r3, r3, #3
 801145c:	4a1f      	ldr	r2, [pc, #124]	; (80114dc <SEGGER_RTT_WriteNoLock+0x9c>)
 801145e:	4413      	add	r3, r2
 8011460:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	695b      	ldr	r3, [r3, #20]
 8011466:	2b02      	cmp	r3, #2
 8011468:	d029      	beq.n	80114be <SEGGER_RTT_WriteNoLock+0x7e>
 801146a:	2b02      	cmp	r3, #2
 801146c:	d82e      	bhi.n	80114cc <SEGGER_RTT_WriteNoLock+0x8c>
 801146e:	2b00      	cmp	r3, #0
 8011470:	d002      	beq.n	8011478 <SEGGER_RTT_WriteNoLock+0x38>
 8011472:	2b01      	cmp	r3, #1
 8011474:	d013      	beq.n	801149e <SEGGER_RTT_WriteNoLock+0x5e>
 8011476:	e029      	b.n	80114cc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8011478:	6978      	ldr	r0, [r7, #20]
 801147a:	f7ff ffbd 	bl	80113f8 <_GetAvailWriteSpace>
 801147e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8011480:	693a      	ldr	r2, [r7, #16]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	429a      	cmp	r2, r3
 8011486:	d202      	bcs.n	801148e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8011488:	2300      	movs	r3, #0
 801148a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 801148c:	e021      	b.n	80114d2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	69b9      	ldr	r1, [r7, #24]
 8011496:	6978      	ldr	r0, [r7, #20]
 8011498:	f7ff ff6e 	bl	8011378 <_WriteNoCheck>
    break;
 801149c:	e019      	b.n	80114d2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 801149e:	6978      	ldr	r0, [r7, #20]
 80114a0:	f7ff ffaa 	bl	80113f8 <_GetAvailWriteSpace>
 80114a4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	4293      	cmp	r3, r2
 80114ac:	bf28      	it	cs
 80114ae:	4613      	movcs	r3, r2
 80114b0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	69b9      	ldr	r1, [r7, #24]
 80114b6:	6978      	ldr	r0, [r7, #20]
 80114b8:	f7ff ff5e 	bl	8011378 <_WriteNoCheck>
    break;
 80114bc:	e009      	b.n	80114d2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	69b9      	ldr	r1, [r7, #24]
 80114c2:	6978      	ldr	r0, [r7, #20]
 80114c4:	f7ff fefe 	bl	80112c4 <_WriteBlocking>
 80114c8:	61f8      	str	r0, [r7, #28]
    break;
 80114ca:	e002      	b.n	80114d2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80114cc:	2300      	movs	r3, #0
 80114ce:	61fb      	str	r3, [r7, #28]
    break;
 80114d0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80114d2:	69fb      	ldr	r3, [r7, #28]
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3720      	adds	r7, #32
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	2000ac50 	.word	0x2000ac50

080114e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80114ec:	4b0d      	ldr	r3, [pc, #52]	; (8011524 <SEGGER_RTT_Write+0x44>)
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d101      	bne.n	80114f8 <SEGGER_RTT_Write+0x18>
 80114f4:	f7ff fe94 	bl	8011220 <_DoInit>
  SEGGER_RTT_LOCK();
 80114f8:	f3ef 8311 	mrs	r3, BASEPRI
 80114fc:	f04f 0120 	mov.w	r1, #32
 8011500:	f381 8811 	msr	BASEPRI, r1
 8011504:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	68b9      	ldr	r1, [r7, #8]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f7ff ff98 	bl	8011440 <SEGGER_RTT_WriteNoLock>
 8011510:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8011518:	693b      	ldr	r3, [r7, #16]
}
 801151a:	4618      	mov	r0, r3
 801151c:	3718      	adds	r7, #24
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	2000ac50 	.word	0x2000ac50

08011528 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
 8011534:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8011536:	4b30      	ldr	r3, [pc, #192]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d101      	bne.n	8011542 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 801153e:	f7ff fe6f 	bl	8011220 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8011542:	4b2d      	ldr	r3, [pc, #180]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	461a      	mov	r2, r3
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	4293      	cmp	r3, r2
 801154c:	d24c      	bcs.n	80115e8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 801154e:	f3ef 8311 	mrs	r3, BASEPRI
 8011552:	f04f 0120 	mov.w	r1, #32
 8011556:	f381 8811 	msr	BASEPRI, r1
 801155a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d032      	beq.n	80115c8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8011562:	4925      	ldr	r1, [pc, #148]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	4613      	mov	r3, r2
 801156a:	005b      	lsls	r3, r3, #1
 801156c:	4413      	add	r3, r2
 801156e:	00db      	lsls	r3, r3, #3
 8011570:	440b      	add	r3, r1
 8011572:	68ba      	ldr	r2, [r7, #8]
 8011574:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8011576:	4920      	ldr	r1, [pc, #128]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	1c5a      	adds	r2, r3, #1
 801157c:	4613      	mov	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	4413      	add	r3, r2
 8011582:	00db      	lsls	r3, r3, #3
 8011584:	440b      	add	r3, r1
 8011586:	3304      	adds	r3, #4
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 801158c:	491a      	ldr	r1, [pc, #104]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	4613      	mov	r3, r2
 8011592:	005b      	lsls	r3, r3, #1
 8011594:	4413      	add	r3, r2
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	440b      	add	r3, r1
 801159a:	3320      	adds	r3, #32
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80115a0:	4915      	ldr	r1, [pc, #84]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	4613      	mov	r3, r2
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	4413      	add	r3, r2
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	440b      	add	r3, r1
 80115ae:	3328      	adds	r3, #40	; 0x28
 80115b0:	2200      	movs	r2, #0
 80115b2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80115b4:	4910      	ldr	r1, [pc, #64]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	4613      	mov	r3, r2
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	4413      	add	r3, r2
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	440b      	add	r3, r1
 80115c2:	3324      	adds	r3, #36	; 0x24
 80115c4:	2200      	movs	r2, #0
 80115c6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80115c8:	490b      	ldr	r1, [pc, #44]	; (80115f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80115ca:	68fa      	ldr	r2, [r7, #12]
 80115cc:	4613      	mov	r3, r2
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	4413      	add	r3, r2
 80115d2:	00db      	lsls	r3, r3, #3
 80115d4:	440b      	add	r3, r1
 80115d6:	332c      	adds	r3, #44	; 0x2c
 80115d8:	6a3a      	ldr	r2, [r7, #32]
 80115da:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	617b      	str	r3, [r7, #20]
 80115e6:	e002      	b.n	80115ee <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80115e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80115ee:	697b      	ldr	r3, [r7, #20]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3718      	adds	r7, #24
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	2000ac50 	.word	0x2000ac50

080115fc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
  _DoInit();
 8011600:	f7ff fe0e 	bl	8011220 <_DoInit>
}
 8011604:	bf00      	nop
 8011606:	bd80      	pop	{r7, pc}

08011608 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	429a      	cmp	r2, r3
 8011624:	d80e      	bhi.n	8011644 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681a      	ldr	r2, [r3, #0]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	4413      	add	r3, r2
 801162e:	78fa      	ldrb	r2, [r7, #3]
 8011630:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	1c5a      	adds	r2, r3, #1
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689a      	ldr	r2, [r3, #8]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	429a      	cmp	r2, r3
 801164e:	d115      	bne.n	801167c <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6918      	ldr	r0, [r3, #16]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6819      	ldr	r1, [r3, #0]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	461a      	mov	r2, r3
 801165e:	f7ff ff3f 	bl	80114e0 <SEGGER_RTT_Write>
 8011662:	4602      	mov	r2, r0
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	429a      	cmp	r2, r3
 801166a:	d004      	beq.n	8011676 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011672:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8011674:	e002      	b.n	801167c <_StoreChar+0x74>
      p->Cnt = 0u;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	609a      	str	r2, [r3, #8]
}
 801167c:	bf00      	nop
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8011684:	b580      	push	{r7, lr}
 8011686:	b08a      	sub	sp, #40	; 0x28
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8011696:	2301      	movs	r3, #1
 8011698:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 801169a:	2301      	movs	r3, #1
 801169c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 801169e:	e007      	b.n	80116b0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80116a0:	6a3a      	ldr	r2, [r7, #32]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a8:	623b      	str	r3, [r7, #32]
    Width++;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	3301      	adds	r3, #1
 80116ae:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80116b0:	6a3a      	ldr	r2, [r7, #32]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d2f3      	bcs.n	80116a0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d901      	bls.n	80116c4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80116c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d125      	bne.n	801171a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80116ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d022      	beq.n	801171a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80116d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d6:	f003 0302 	and.w	r3, r3, #2
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d005      	beq.n	80116ea <_PrintUnsigned+0x66>
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d102      	bne.n	80116ea <_PrintUnsigned+0x66>
        c = '0';
 80116e4:	2330      	movs	r3, #48	; 0x30
 80116e6:	76fb      	strb	r3, [r7, #27]
 80116e8:	e001      	b.n	80116ee <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80116ea:	2320      	movs	r3, #32
 80116ec:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80116ee:	e00b      	b.n	8011708 <_PrintUnsigned+0x84>
        FieldWidth--;
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	3b01      	subs	r3, #1
 80116f4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80116f6:	7efb      	ldrb	r3, [r7, #27]
 80116f8:	4619      	mov	r1, r3
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f7ff ff84 	bl	8011608 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	db07      	blt.n	8011718 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8011708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170a:	2b00      	cmp	r3, #0
 801170c:	d005      	beq.n	801171a <_PrintUnsigned+0x96>
 801170e:	69fa      	ldr	r2, [r7, #28]
 8011710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011712:	429a      	cmp	r2, r3
 8011714:	d3ec      	bcc.n	80116f0 <_PrintUnsigned+0x6c>
 8011716:	e000      	b.n	801171a <_PrintUnsigned+0x96>
          break;
 8011718:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	2b00      	cmp	r3, #0
 8011720:	db55      	blt.n	80117ce <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	2b01      	cmp	r3, #1
 8011726:	d903      	bls.n	8011730 <_PrintUnsigned+0xac>
        NumDigits--;
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	3b01      	subs	r3, #1
 801172c:	603b      	str	r3, [r7, #0]
 801172e:	e009      	b.n	8011744 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011734:	fbb2 f3f3 	udiv	r3, r2, r3
 8011738:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 801173a:	697a      	ldr	r2, [r7, #20]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d200      	bcs.n	8011744 <_PrintUnsigned+0xc0>
          break;
 8011742:	e005      	b.n	8011750 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	fb02 f303 	mul.w	r3, r2, r3
 801174c:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 801174e:	e7e8      	b.n	8011722 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8011750:	68ba      	ldr	r2, [r7, #8]
 8011752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011754:	fbb2 f3f3 	udiv	r3, r2, r3
 8011758:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801175e:	fb02 f303 	mul.w	r3, r2, r3
 8011762:	68ba      	ldr	r2, [r7, #8]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8011768:	4a1b      	ldr	r2, [pc, #108]	; (80117d8 <_PrintUnsigned+0x154>)
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	4413      	add	r3, r2
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	4619      	mov	r1, r3
 8011772:	68f8      	ldr	r0, [r7, #12]
 8011774:	f7ff ff48 	bl	8011608 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	db08      	blt.n	8011792 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8011780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	fbb2 f3f3 	udiv	r3, r2, r3
 8011788:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 801178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1df      	bne.n	8011750 <_PrintUnsigned+0xcc>
 8011790:	e000      	b.n	8011794 <_PrintUnsigned+0x110>
        break;
 8011792:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8011794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011796:	f003 0301 	and.w	r3, r3, #1
 801179a:	2b00      	cmp	r3, #0
 801179c:	d017      	beq.n	80117ce <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d014      	beq.n	80117ce <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80117a4:	e00a      	b.n	80117bc <_PrintUnsigned+0x138>
          FieldWidth--;
 80117a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a8:	3b01      	subs	r3, #1
 80117aa:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80117ac:	2120      	movs	r1, #32
 80117ae:	68f8      	ldr	r0, [r7, #12]
 80117b0:	f7ff ff2a 	bl	8011608 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	db07      	blt.n	80117cc <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80117bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d005      	beq.n	80117ce <_PrintUnsigned+0x14a>
 80117c2:	69fa      	ldr	r2, [r7, #28]
 80117c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d3ed      	bcc.n	80117a6 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80117ca:	e000      	b.n	80117ce <_PrintUnsigned+0x14a>
            break;
 80117cc:	bf00      	nop
}
 80117ce:	bf00      	nop
 80117d0:	3728      	adds	r7, #40	; 0x28
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	0802f06c 	.word	0x0802f06c

080117dc <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	bfb8      	it	lt
 80117f0:	425b      	neglt	r3, r3
 80117f2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80117f4:	2301      	movs	r3, #1
 80117f6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80117f8:	e007      	b.n	801180a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	693a      	ldr	r2, [r7, #16]
 80117fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8011802:	613b      	str	r3, [r7, #16]
    Width++;
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	3301      	adds	r3, #1
 8011808:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	693a      	ldr	r2, [r7, #16]
 801180e:	429a      	cmp	r2, r3
 8011810:	daf3      	bge.n	80117fa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	429a      	cmp	r2, r3
 8011818:	d901      	bls.n	801181e <_PrintInt+0x42>
    Width = NumDigits;
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 801181e:	6a3b      	ldr	r3, [r7, #32]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00a      	beq.n	801183a <_PrintInt+0x5e>
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	db04      	blt.n	8011834 <_PrintInt+0x58>
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	f003 0304 	and.w	r3, r3, #4
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <_PrintInt+0x5e>
    FieldWidth--;
 8011834:	6a3b      	ldr	r3, [r7, #32]
 8011836:	3b01      	subs	r3, #1
 8011838:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 801183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183c:	f003 0302 	and.w	r3, r3, #2
 8011840:	2b00      	cmp	r3, #0
 8011842:	d002      	beq.n	801184a <_PrintInt+0x6e>
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d01c      	beq.n	8011884 <_PrintInt+0xa8>
 801184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184c:	f003 0301 	and.w	r3, r3, #1
 8011850:	2b00      	cmp	r3, #0
 8011852:	d117      	bne.n	8011884 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8011854:	6a3b      	ldr	r3, [r7, #32]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d014      	beq.n	8011884 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 801185a:	e00a      	b.n	8011872 <_PrintInt+0x96>
        FieldWidth--;
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	3b01      	subs	r3, #1
 8011860:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8011862:	2120      	movs	r1, #32
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f7ff fecf 	bl	8011608 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	db07      	blt.n	8011882 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8011872:	6a3b      	ldr	r3, [r7, #32]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d005      	beq.n	8011884 <_PrintInt+0xa8>
 8011878:	697a      	ldr	r2, [r7, #20]
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	429a      	cmp	r2, r3
 801187e:	d3ed      	bcc.n	801185c <_PrintInt+0x80>
 8011880:	e000      	b.n	8011884 <_PrintInt+0xa8>
          break;
 8011882:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	2b00      	cmp	r3, #0
 801188a:	db4a      	blt.n	8011922 <_PrintInt+0x146>
    if (v < 0) {
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	da07      	bge.n	80118a2 <_PrintInt+0xc6>
      v = -v;
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	425b      	negs	r3, r3
 8011896:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8011898:	212d      	movs	r1, #45	; 0x2d
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f7ff feb4 	bl	8011608 <_StoreChar>
 80118a0:	e008      	b.n	80118b4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80118a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a4:	f003 0304 	and.w	r3, r3, #4
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d003      	beq.n	80118b4 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80118ac:	212b      	movs	r1, #43	; 0x2b
 80118ae:	68f8      	ldr	r0, [r7, #12]
 80118b0:	f7ff feaa 	bl	8011608 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	db32      	blt.n	8011922 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80118bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118be:	f003 0302 	and.w	r3, r3, #2
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d01f      	beq.n	8011906 <_PrintInt+0x12a>
 80118c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d11a      	bne.n	8011906 <_PrintInt+0x12a>
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d117      	bne.n	8011906 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80118d6:	6a3b      	ldr	r3, [r7, #32]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d014      	beq.n	8011906 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80118dc:	e00a      	b.n	80118f4 <_PrintInt+0x118>
            FieldWidth--;
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	3b01      	subs	r3, #1
 80118e2:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80118e4:	2130      	movs	r1, #48	; 0x30
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f7ff fe8e 	bl	8011608 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	68db      	ldr	r3, [r3, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	db07      	blt.n	8011904 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80118f4:	6a3b      	ldr	r3, [r7, #32]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d005      	beq.n	8011906 <_PrintInt+0x12a>
 80118fa:	697a      	ldr	r2, [r7, #20]
 80118fc:	6a3b      	ldr	r3, [r7, #32]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d3ed      	bcc.n	80118de <_PrintInt+0x102>
 8011902:	e000      	b.n	8011906 <_PrintInt+0x12a>
              break;
 8011904:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	68db      	ldr	r3, [r3, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	db09      	blt.n	8011922 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 801190e:	68b9      	ldr	r1, [r7, #8]
 8011910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	6a3b      	ldr	r3, [r7, #32]
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	f7ff feb1 	bl	8011684 <_PrintUnsigned>
      }
    }
  }
}
 8011922:	bf00      	nop
 8011924:	3718      	adds	r7, #24
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
	...

0801192c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 801192c:	b580      	push	{r7, lr}
 801192e:	b0d2      	sub	sp, #328	; 0x148
 8011930:	af02      	add	r7, sp, #8
 8011932:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011936:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801193a:	6018      	str	r0, [r3, #0]
 801193c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011940:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011944:	6019      	str	r1, [r3, #0]
 8011946:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801194a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801194e:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8011950:	f107 0310 	add.w	r3, r7, #16
 8011954:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8011958:	f44f 7380 	mov.w	r3, #256	; 0x100
 801195c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 8011960:	2300      	movs	r3, #0
 8011962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 8011966:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801196a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 8011974:	2300      	movs	r3, #0
 8011976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 801197a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801197e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 801198a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801198e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011992:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011996:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 801199a:	6812      	ldr	r2, [r2, #0]
 801199c:	3201      	adds	r2, #1
 801199e:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 80119a0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f000 825a 	beq.w	8011e5e <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 80119aa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80119ae:	2b25      	cmp	r3, #37	; 0x25
 80119b0:	f040 8247 	bne.w	8011e42 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80119b4:	2300      	movs	r3, #0
 80119b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 80119ba:	2301      	movs	r3, #1
 80119bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 80119c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80119c4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 80119d0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80119d4:	3b23      	subs	r3, #35	; 0x23
 80119d6:	2b0d      	cmp	r3, #13
 80119d8:	d866      	bhi.n	8011aa8 <SEGGER_RTT_vprintf+0x17c>
 80119da:	a201      	add	r2, pc, #4	; (adr r2, 80119e0 <SEGGER_RTT_vprintf+0xb4>)
 80119dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e0:	08011a85 	.word	0x08011a85
 80119e4:	08011aa9 	.word	0x08011aa9
 80119e8:	08011aa9 	.word	0x08011aa9
 80119ec:	08011aa9 	.word	0x08011aa9
 80119f0:	08011aa9 	.word	0x08011aa9
 80119f4:	08011aa9 	.word	0x08011aa9
 80119f8:	08011aa9 	.word	0x08011aa9
 80119fc:	08011aa9 	.word	0x08011aa9
 8011a00:	08011a61 	.word	0x08011a61
 8011a04:	08011aa9 	.word	0x08011aa9
 8011a08:	08011a19 	.word	0x08011a19
 8011a0c:	08011aa9 	.word	0x08011aa9
 8011a10:	08011aa9 	.word	0x08011aa9
 8011a14:	08011a3d 	.word	0x08011a3d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8011a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a1c:	f043 0301 	orr.w	r3, r3, #1
 8011a20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011a24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a28:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011a2c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011a30:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	3201      	adds	r2, #1
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	e039      	b.n	8011ab0 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8011a3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a40:	f043 0302 	orr.w	r3, r3, #2
 8011a44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011a48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a4c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011a50:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011a54:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011a58:	6812      	ldr	r2, [r2, #0]
 8011a5a:	3201      	adds	r2, #1
 8011a5c:	601a      	str	r2, [r3, #0]
 8011a5e:	e027      	b.n	8011ab0 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8011a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a64:	f043 0304 	orr.w	r3, r3, #4
 8011a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011a6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a70:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011a74:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011a78:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011a7c:	6812      	ldr	r2, [r2, #0]
 8011a7e:	3201      	adds	r2, #1
 8011a80:	601a      	str	r2, [r3, #0]
 8011a82:	e015      	b.n	8011ab0 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8011a84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a88:	f043 0308 	orr.w	r3, r3, #8
 8011a8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011a90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011a98:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011a9c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011aa0:	6812      	ldr	r2, [r2, #0]
 8011aa2:	3201      	adds	r2, #1
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	e003      	b.n	8011ab0 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011aae:	bf00      	nop
        }
      } while (v);
 8011ab0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d183      	bne.n	80119c0 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 8011abe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ac2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 8011ace:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011ad2:	2b2f      	cmp	r3, #47	; 0x2f
 8011ad4:	d91c      	bls.n	8011b10 <SEGGER_RTT_vprintf+0x1e4>
 8011ad6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011ada:	2b39      	cmp	r3, #57	; 0x39
 8011adc:	d818      	bhi.n	8011b10 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 8011ade:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ae2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011ae6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011aea:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011aee:	6812      	ldr	r2, [r2, #0]
 8011af0:	3201      	adds	r2, #1
 8011af2:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8011af4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8011af8:	4613      	mov	r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	461a      	mov	r2, r3
 8011b02:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011b06:	4413      	add	r3, r2
 8011b08:	3b30      	subs	r3, #48	; 0x30
 8011b0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 8011b0e:	e7d6      	b.n	8011abe <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8011b10:	2300      	movs	r3, #0
 8011b12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 8011b16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 8011b26:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8011b2c:	d133      	bne.n	8011b96 <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 8011b2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011b36:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011b3a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011b3e:	6812      	ldr	r2, [r2, #0]
 8011b40:	3201      	adds	r2, #1
 8011b42:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 8011b44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b48:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 8011b54:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011b58:	2b2f      	cmp	r3, #47	; 0x2f
 8011b5a:	d91c      	bls.n	8011b96 <SEGGER_RTT_vprintf+0x26a>
 8011b5c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011b60:	2b39      	cmp	r3, #57	; 0x39
 8011b62:	d818      	bhi.n	8011b96 <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 8011b64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b68:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011b6c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011b70:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011b74:	6812      	ldr	r2, [r2, #0]
 8011b76:	3201      	adds	r2, #1
 8011b78:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8011b7a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011b7e:	4613      	mov	r3, r2
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	4413      	add	r3, r2
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	461a      	mov	r2, r3
 8011b88:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011b8c:	4413      	add	r3, r2
 8011b8e:	3b30      	subs	r3, #48	; 0x30
 8011b90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 8011b94:	e7d6      	b.n	8011b44 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8011b96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 8011ba6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011baa:	2b6c      	cmp	r3, #108	; 0x6c
 8011bac:	d003      	beq.n	8011bb6 <SEGGER_RTT_vprintf+0x28a>
 8011bae:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011bb2:	2b68      	cmp	r3, #104	; 0x68
 8011bb4:	d113      	bne.n	8011bde <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 8011bb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011bba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011bbe:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011bc2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011bc6:	6812      	ldr	r2, [r2, #0]
 8011bc8:	3201      	adds	r2, #1
 8011bca:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 8011bcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011bd0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 8011bdc:	e7e3      	b.n	8011ba6 <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8011bde:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011be2:	2b25      	cmp	r3, #37	; 0x25
 8011be4:	f000 8119 	beq.w	8011e1a <SEGGER_RTT_vprintf+0x4ee>
 8011be8:	2b25      	cmp	r3, #37	; 0x25
 8011bea:	f2c0 811d 	blt.w	8011e28 <SEGGER_RTT_vprintf+0x4fc>
 8011bee:	2b78      	cmp	r3, #120	; 0x78
 8011bf0:	f300 811a 	bgt.w	8011e28 <SEGGER_RTT_vprintf+0x4fc>
 8011bf4:	2b58      	cmp	r3, #88	; 0x58
 8011bf6:	f2c0 8117 	blt.w	8011e28 <SEGGER_RTT_vprintf+0x4fc>
 8011bfa:	3b58      	subs	r3, #88	; 0x58
 8011bfc:	2b20      	cmp	r3, #32
 8011bfe:	f200 8113 	bhi.w	8011e28 <SEGGER_RTT_vprintf+0x4fc>
 8011c02:	a201      	add	r2, pc, #4	; (adr r2, 8011c08 <SEGGER_RTT_vprintf+0x2dc>)
 8011c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c08:	08011d47 	.word	0x08011d47
 8011c0c:	08011e29 	.word	0x08011e29
 8011c10:	08011e29 	.word	0x08011e29
 8011c14:	08011e29 	.word	0x08011e29
 8011c18:	08011e29 	.word	0x08011e29
 8011c1c:	08011e29 	.word	0x08011e29
 8011c20:	08011e29 	.word	0x08011e29
 8011c24:	08011e29 	.word	0x08011e29
 8011c28:	08011e29 	.word	0x08011e29
 8011c2c:	08011e29 	.word	0x08011e29
 8011c30:	08011e29 	.word	0x08011e29
 8011c34:	08011c8d 	.word	0x08011c8d
 8011c38:	08011cc7 	.word	0x08011cc7
 8011c3c:	08011e29 	.word	0x08011e29
 8011c40:	08011e29 	.word	0x08011e29
 8011c44:	08011e29 	.word	0x08011e29
 8011c48:	08011e29 	.word	0x08011e29
 8011c4c:	08011e29 	.word	0x08011e29
 8011c50:	08011e29 	.word	0x08011e29
 8011c54:	08011e29 	.word	0x08011e29
 8011c58:	08011e29 	.word	0x08011e29
 8011c5c:	08011e29 	.word	0x08011e29
 8011c60:	08011e29 	.word	0x08011e29
 8011c64:	08011e29 	.word	0x08011e29
 8011c68:	08011de1 	.word	0x08011de1
 8011c6c:	08011e29 	.word	0x08011e29
 8011c70:	08011e29 	.word	0x08011e29
 8011c74:	08011d87 	.word	0x08011d87
 8011c78:	08011e29 	.word	0x08011e29
 8011c7c:	08011d07 	.word	0x08011d07
 8011c80:	08011e29 	.word	0x08011e29
 8011c84:	08011e29 	.word	0x08011e29
 8011c88:	08011d47 	.word	0x08011d47
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8011c8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011c90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	1d19      	adds	r1, r3, #4
 8011c9a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011c9e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8011ca2:	6812      	ldr	r2, [r2, #0]
 8011ca4:	6011      	str	r1, [r2, #0]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 8011cac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 8011cb4:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8011cb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7ff fca2 	bl	8011608 <_StoreChar>
        break;
 8011cc4:	e0b1      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8011cc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011cca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	1d19      	adds	r1, r3, #4
 8011cd4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011cd8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8011cdc:	6812      	ldr	r2, [r2, #0]
 8011cde:	6011      	str	r1, [r2, #0]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8011ce6:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011cea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011cee:	9301      	str	r3, [sp, #4]
 8011cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cfa:	220a      	movs	r2, #10
 8011cfc:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8011d00:	f7ff fd6c 	bl	80117dc <_PrintInt>
        break;
 8011d04:	e091      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 8011d06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011d0a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	1d19      	adds	r1, r3, #4
 8011d14:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011d18:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8011d1c:	6812      	ldr	r2, [r2, #0]
 8011d1e:	6011      	str	r1, [r2, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8011d26:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8011d2a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011d2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011d32:	9301      	str	r3, [sp, #4]
 8011d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d38:	9300      	str	r3, [sp, #0]
 8011d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d3e:	220a      	movs	r2, #10
 8011d40:	f7ff fca0 	bl	8011684 <_PrintUnsigned>
        break;
 8011d44:	e071      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8011d46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011d4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	1d19      	adds	r1, r3, #4
 8011d54:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011d58:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8011d5c:	6812      	ldr	r2, [r2, #0]
 8011d5e:	6011      	str	r1, [r2, #0]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8011d66:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8011d6a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011d6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011d72:	9301      	str	r3, [sp, #4]
 8011d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d78:	9300      	str	r3, [sp, #0]
 8011d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d7e:	2210      	movs	r2, #16
 8011d80:	f7ff fc80 	bl	8011684 <_PrintUnsigned>
        break;
 8011d84:	e051      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8011d86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011d8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	1d19      	adds	r1, r3, #4
 8011d94:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011d98:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8011d9c:	6812      	ldr	r2, [r2, #0]
 8011d9e:	6011      	str	r1, [r2, #0]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 8011da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 8011db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011db4:	3301      	adds	r3, #1
 8011db6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 8011dba:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00c      	beq.n	8011ddc <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8011dc2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8011dc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011dca:	4611      	mov	r1, r2
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7ff fc1b 	bl	8011608 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8011dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	dae5      	bge.n	8011da6 <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 8011dda:	e026      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
              break;
 8011ddc:	bf00      	nop
        break;
 8011dde:	e024      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 8011de0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011de4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	1d19      	adds	r1, r3, #4
 8011dee:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011df2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8011df6:	6812      	ldr	r2, [r2, #0]
 8011df8:	6011      	str	r1, [r2, #0]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8011e00:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8011e04:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011e08:	2300      	movs	r3, #0
 8011e0a:	9301      	str	r3, [sp, #4]
 8011e0c:	2308      	movs	r3, #8
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	2308      	movs	r3, #8
 8011e12:	2210      	movs	r2, #16
 8011e14:	f7ff fc36 	bl	8011684 <_PrintUnsigned>
        break;
 8011e18:	e007      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8011e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e1e:	2125      	movs	r1, #37	; 0x25
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7ff fbf1 	bl	8011608 <_StoreChar>
        break;
 8011e26:	e000      	b.n	8011e2a <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 8011e28:	bf00      	nop
      }
      sFormat++;
 8011e2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011e2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011e32:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011e36:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8011e3a:	6812      	ldr	r2, [r2, #0]
 8011e3c:	3201      	adds	r2, #1
 8011e3e:	601a      	str	r2, [r3, #0]
 8011e40:	e007      	b.n	8011e52 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 8011e42:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8011e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7ff fbdb 	bl	8011608 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8011e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f6bf ad8f 	bge.w	801197a <SEGGER_RTT_vprintf+0x4e>
 8011e5c:	e000      	b.n	8011e60 <SEGGER_RTT_vprintf+0x534>
      break;
 8011e5e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8011e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	dd15      	ble.n	8011e94 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8011e68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00a      	beq.n	8011e86 <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8011e70:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011e74:	f107 0110 	add.w	r1, r7, #16
 8011e78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011e7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011e80:	6818      	ldr	r0, [r3, #0]
 8011e82:	f7ff fb2d 	bl	80114e0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8011e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011e8e:	4413      	add	r3, r2
 8011e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 8011e94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop

08011ea4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8011ea4:	b40e      	push	{r1, r2, r3}
 8011ea6:	b580      	push	{r7, lr}
 8011ea8:	b085      	sub	sp, #20
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8011eae:	f107 0320 	add.w	r3, r7, #32
 8011eb2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8011eb4:	f107 0308 	add.w	r3, r7, #8
 8011eb8:	461a      	mov	r2, r3
 8011eba:	69f9      	ldr	r1, [r7, #28]
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f7ff fd35 	bl	801192c <SEGGER_RTT_vprintf>
 8011ec2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3714      	adds	r7, #20
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ed0:	b003      	add	sp, #12
 8011ed2:	4770      	bx	lr

08011ed4 <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 8011ee0:	2220      	movs	r2, #32
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f012 fdcb 	bl	8024a80 <memset>
  this->conversionFactor = conversionFactor;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	683a      	ldr	r2, [r7, #0]
 8011eee:	611a      	str	r2, [r3, #16]
}
 8011ef0:	bf00      	nop
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	ed93 7a00 	vldr	s14, [r3]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	edd3 7a00 	vldr	s15, [r3]
 8011f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	ed93 7a02 	vldr	s14, [r3, #8]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	1c5a      	adds	r2, r3, #1
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	60da      	str	r2, [r3, #12]
}
 8011f4e:	bf00      	nop
 8011f50:	370c      	adds	r7, #12
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 8011f5a:	b480      	push	{r7}
 8011f5c:	b087      	sub	sp, #28
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d041      	beq.n	8011fee <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	ed93 7a00 	vldr	s14, [r3]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	edd3 7a04 	vldr	s15, [r3, #16]
 8011f76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	ee07 3a90 	vmov	s15, r3
 8011f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	edd3 7a04 	vldr	s15, [r3, #16]
 8011f9c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	ee07 3a90 	vmov	s15, r3
 8011fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	ed93 7a02 	vldr	s14, [r3, #8]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8011fc2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	ee07 3a90 	vmov	s15, r3
 8011fce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	6013      	str	r3, [r2, #0]
 8011fea:	6053      	str	r3, [r2, #4]
 8011fec:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	3314      	adds	r3, #20
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	371c      	adds	r7, #28
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
	...

08012000 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8012000:	b480      	push	{r7}
 8012002:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012004:	f3bf 8f4f 	dsb	sy
}
 8012008:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801200a:	4b06      	ldr	r3, [pc, #24]	; (8012024 <__NVIC_SystemReset+0x24>)
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012012:	4904      	ldr	r1, [pc, #16]	; (8012024 <__NVIC_SystemReset+0x24>)
 8012014:	4b04      	ldr	r3, [pc, #16]	; (8012028 <__NVIC_SystemReset+0x28>)
 8012016:	4313      	orrs	r3, r2
 8012018:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801201a:	f3bf 8f4f 	dsb	sy
}
 801201e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8012020:	bf00      	nop
 8012022:	e7fd      	b.n	8012020 <__NVIC_SystemReset+0x20>
 8012024:	e000ed00 	.word	0xe000ed00
 8012028:	05fa0004 	.word	0x05fa0004

0801202c <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b086      	sub	sp, #24
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801204a:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	68b8      	ldr	r0, [r7, #8]
 8012050:	f000 f810 	bl	8012074 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8012054:	f7f2 fd88 	bl	8004b68 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8012058:	4b05      	ldr	r3, [pc, #20]	; (8012070 <assertFail+0x44>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f003 0301 	and.w	r3, r3, #1
 8012060:	2b00      	cmp	r3, #0
 8012062:	d101      	bne.n	8012068 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8012064:	f7ff ffcc 	bl	8012000 <__NVIC_SystemReset>
  }
}
 8012068:	bf00      	nop
 801206a:	3718      	adds	r7, #24
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	e000edf0 	.word	0xe000edf0

08012074 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 801207e:	4b0b      	ldr	r3, [pc, #44]	; (80120ac <storeAssertFileData+0x38>)
 8012080:	4a0b      	ldr	r2, [pc, #44]	; (80120b0 <storeAssertFileData+0x3c>)
 8012082:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8012084:	4b09      	ldr	r3, [pc, #36]	; (80120ac <storeAssertFileData+0x38>)
 8012086:	2201      	movs	r2, #1
 8012088:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 801208a:	4b08      	ldr	r3, [pc, #32]	; (80120ac <storeAssertFileData+0x38>)
 801208c:	791a      	ldrb	r2, [r3, #4]
 801208e:	4b09      	ldr	r3, [pc, #36]	; (80120b4 <storeAssertFileData+0x40>)
 8012090:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8012092:	4a06      	ldr	r2, [pc, #24]	; (80120ac <storeAssertFileData+0x38>)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8012098:	4a04      	ldr	r2, [pc, #16]	; (80120ac <storeAssertFileData+0x38>)
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	60d3      	str	r3, [r2, #12]
}
 801209e:	bf00      	nop
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	20006468 	.word	0x20006468
 80120b0:	2f8a001f 	.word	0x2f8a001f
 80120b4:	2000bd18 	.word	0x2000bd18

080120b8 <consoleInit>:

  return true;
}

void consoleInit()
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
  if (isInit)
 80120bc:	4b12      	ldr	r3, [pc, #72]	; (8012108 <consoleInit+0x50>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d11f      	bne.n	8012104 <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 80120c4:	4b11      	ldr	r3, [pc, #68]	; (801210c <consoleInit+0x54>)
 80120c6:	2200      	movs	r2, #0
 80120c8:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 80120ca:	4b10      	ldr	r3, [pc, #64]	; (801210c <consoleInit+0x54>)
 80120cc:	2200      	movs	r2, #0
 80120ce:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 80120d0:	2203      	movs	r2, #3
 80120d2:	2100      	movs	r1, #0
 80120d4:	2001      	movs	r0, #1
 80120d6:	f00d fc67 	bl	801f9a8 <xQueueGenericCreate>
 80120da:	4603      	mov	r3, r0
 80120dc:	4a0c      	ldr	r2, [pc, #48]	; (8012110 <consoleInit+0x58>)
 80120de:	6013      	str	r3, [r2, #0]
 80120e0:	4b0b      	ldr	r3, [pc, #44]	; (8012110 <consoleInit+0x58>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d006      	beq.n	80120f6 <consoleInit+0x3e>
 80120e8:	4b09      	ldr	r3, [pc, #36]	; (8012110 <consoleInit+0x58>)
 80120ea:	6818      	ldr	r0, [r3, #0]
 80120ec:	2300      	movs	r3, #0
 80120ee:	2200      	movs	r2, #0
 80120f0:	2100      	movs	r1, #0
 80120f2:	f00d fd03 	bl	801fafc <xQueueGenericSend>
  messageSendingIsPending = false;
 80120f6:	4b07      	ldr	r3, [pc, #28]	; (8012114 <consoleInit+0x5c>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	701a      	strb	r2, [r3, #0]

  isInit = true;
 80120fc:	4b02      	ldr	r3, [pc, #8]	; (8012108 <consoleInit+0x50>)
 80120fe:	2201      	movs	r2, #1
 8012100:	701a      	strb	r2, [r3, #0]
 8012102:	e000      	b.n	8012106 <consoleInit+0x4e>
    return;
 8012104:	bf00      	nop
}
 8012106:	bd80      	pop	{r7, pc}
 8012108:	2000bd44 	.word	0x2000bd44
 801210c:	2000bd1c 	.word	0x2000bd1c
 8012110:	2000bd40 	.word	0x2000bd40
 8012114:	2000bd3c 	.word	0x2000bd3c

08012118 <crc32ContextInit>:
static bool crcTableInitialized = false;

// *** Public API ***

void crc32ContextInit(crc32Context_t *context)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  // Lazy static ...
  if (crcTableInitialized == false) {
 8012120:	4b0a      	ldr	r3, [pc, #40]	; (801214c <crc32ContextInit+0x34>)
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	f083 0301 	eor.w	r3, r3, #1
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b00      	cmp	r3, #0
 801212c:	d005      	beq.n	801213a <crc32ContextInit+0x22>
    // initialize crcTable
    crcTableInit(crcTable);
 801212e:	4808      	ldr	r0, [pc, #32]	; (8012150 <crc32ContextInit+0x38>)
 8012130:	f000 f8af 	bl	8012292 <crcTableInit>
    crcTableInitialized = true;
 8012134:	4b05      	ldr	r3, [pc, #20]	; (801214c <crc32ContextInit+0x34>)
 8012136:	2201      	movs	r2, #1
 8012138:	701a      	strb	r2, [r3, #0]
  }

  context->remainder = INITIAL_REMAINDER;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012140:	601a      	str	r2, [r3, #0]
}
 8012142:	bf00      	nop
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	2000bd45 	.word	0x2000bd45
 8012150:	20004d30 	.word	0x20004d30

08012154 <crc32Update>:

void crc32Update(crc32Context_t *context, const void* data, size_t size)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b084      	sub	sp, #16
 8012158:	af00      	add	r7, sp, #0
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	607a      	str	r2, [r7, #4]
  context->remainder = crcByByte(data, size, context->remainder, crcTable);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	4b05      	ldr	r3, [pc, #20]	; (801217c <crc32Update+0x28>)
 8012166:	6879      	ldr	r1, [r7, #4]
 8012168:	68b8      	ldr	r0, [r7, #8]
 801216a:	f000 f869 	bl	8012240 <crcByByte>
 801216e:	4602      	mov	r2, r0
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	601a      	str	r2, [r3, #0]
}
 8012174:	bf00      	nop
 8012176:	3710      	adds	r7, #16
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	20004d30 	.word	0x20004d30

08012180 <crc32Out>:

uint32_t crc32Out(const crc32Context_t *context)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  return context->remainder ^ FINAL_XOR_VALUE;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	43db      	mvns	r3, r3
}
 801218e:	4618      	mov	r0, r3
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr

0801219a <crc32CalculateBuffer>:

uint32_t crc32CalculateBuffer(const void* buffer, size_t size)
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b084      	sub	sp, #16
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
 80121a2:	6039      	str	r1, [r7, #0]
  crc32Context_t ctx;

  crc32ContextInit(&ctx);
 80121a4:	f107 030c 	add.w	r3, r7, #12
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7ff ffb5 	bl	8012118 <crc32ContextInit>
  crc32Update(&ctx, buffer, size);
 80121ae:	f107 030c 	add.w	r3, r7, #12
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	6879      	ldr	r1, [r7, #4]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7ff ffcc 	bl	8012154 <crc32Update>
  return crc32Out(&ctx);
 80121bc:	f107 030c 	add.w	r3, r7, #12
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff ffdd 	bl	8012180 <crc32Out>
 80121c6:	4603      	mov	r3, r0
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3710      	adds	r7, #16
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <crcByBit>:
// *** Core calculation from Bosh ***

/* bit-wise crc calculation */
static uint32_t crcByBit(const uint8_t* message, uint32_t bytesToProcess,
             uint32_t remainder)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b087      	sub	sp, #28
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 80121dc:	2300      	movs	r3, #0
 80121de:	617b      	str	r3, [r7, #20]
 80121e0:	e021      	b.n	8012226 <crcByBit+0x56>
    {
      remainder ^= *(message+byte);
 80121e2:	68fa      	ldr	r2, [r7, #12]
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	4413      	add	r3, r2
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	461a      	mov	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4053      	eors	r3, r2
 80121f0:	607b      	str	r3, [r7, #4]

      for(uint8_t bit = 8; bit > 0; --bit)
 80121f2:	2308      	movs	r3, #8
 80121f4:	74fb      	strb	r3, [r7, #19]
 80121f6:	e010      	b.n	801221a <crcByBit+0x4a>
        {
          /* reflect is realized by mirroring algorithm
           * LSB is first to be processed */
          if (remainder & 1)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f003 0301 	and.w	r3, r3, #1
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d005      	beq.n	801220e <crcByBit+0x3e>
            remainder = (remainder >> 1) ^ POLYNOMIAL;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	085a      	lsrs	r2, r3, #1
 8012206:	4b0d      	ldr	r3, [pc, #52]	; (801223c <crcByBit+0x6c>)
 8012208:	4053      	eors	r3, r2
 801220a:	607b      	str	r3, [r7, #4]
 801220c:	e002      	b.n	8012214 <crcByBit+0x44>
          else
            remainder = (remainder >> 1);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	085b      	lsrs	r3, r3, #1
 8012212:	607b      	str	r3, [r7, #4]
      for(uint8_t bit = 8; bit > 0; --bit)
 8012214:	7cfb      	ldrb	r3, [r7, #19]
 8012216:	3b01      	subs	r3, #1
 8012218:	74fb      	strb	r3, [r7, #19]
 801221a:	7cfb      	ldrb	r3, [r7, #19]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d1eb      	bne.n	80121f8 <crcByBit+0x28>
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	3301      	adds	r3, #1
 8012224:	617b      	str	r3, [r7, #20]
 8012226:	697a      	ldr	r2, [r7, #20]
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	429a      	cmp	r2, r3
 801222c:	d3d9      	bcc.n	80121e2 <crcByBit+0x12>
        }
    }
  return remainder;
 801222e:	687b      	ldr	r3, [r7, #4]
}
 8012230:	4618      	mov	r0, r3
 8012232:	371c      	adds	r7, #28
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr
 801223c:	edb88320 	.word	0xedb88320

08012240 <crcByByte>:
/* byte-wise crc calculation, requires an initialized crcTable
 * this is factor 8 faster and should be used if multiple crcs
 * have to be calculated */
static uint32_t crcByByte(const uint8_t* message, uint32_t bytesToProcess,
              uint32_t remainder, uint32_t* crcTable)
{
 8012240:	b480      	push	{r7}
 8012242:	b087      	sub	sp, #28
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	607a      	str	r2, [r7, #4]
 801224c:	603b      	str	r3, [r7, #0]
  uint8_t data;
  for (int byte = 0; byte < bytesToProcess; ++byte)
 801224e:	2300      	movs	r3, #0
 8012250:	617b      	str	r3, [r7, #20]
 8012252:	e013      	b.n	801227c <crcByByte+0x3c>
    {
      data = (*(message+byte) ^ remainder);
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	68fa      	ldr	r2, [r7, #12]
 8012258:	4413      	add	r3, r2
 801225a:	781a      	ldrb	r2, [r3, #0]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	b2db      	uxtb	r3, r3
 8012260:	4053      	eors	r3, r2
 8012262:	74fb      	strb	r3, [r7, #19]
      remainder = *(crcTable+data) ^ (remainder >> 8);
 8012264:	7cfb      	ldrb	r3, [r7, #19]
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	683a      	ldr	r2, [r7, #0]
 801226a:	4413      	add	r3, r2
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	0a1b      	lsrs	r3, r3, #8
 8012272:	4053      	eors	r3, r2
 8012274:	607b      	str	r3, [r7, #4]
  for (int byte = 0; byte < bytesToProcess; ++byte)
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	3301      	adds	r3, #1
 801227a:	617b      	str	r3, [r7, #20]
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	429a      	cmp	r2, r3
 8012282:	d8e7      	bhi.n	8012254 <crcByByte+0x14>
    }
  return remainder;
 8012284:	687b      	ldr	r3, [r7, #4]
}
 8012286:	4618      	mov	r0, r3
 8012288:	371c      	adds	r7, #28
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr

08012292 <crcTableInit>:

/* creates a lookup-table which is necessary for the crcByByte function */
static void crcTableInit(uint32_t* crcTable)
{
 8012292:	b590      	push	{r4, r7, lr}
 8012294:	b085      	sub	sp, #20
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
  uint8_t dividend = ~0;
 801229a:	23ff      	movs	r3, #255	; 0xff
 801229c:	73fb      	strb	r3, [r7, #15]
  /* fill the table by bit-wise calculations of checksums
   * for each possible dividend */
  do {
      *(crcTable+dividend) = crcByBit(&dividend, 1, 0);
 801229e:	7bfb      	ldrb	r3, [r7, #15]
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	18d4      	adds	r4, r2, r3
 80122a6:	f107 030f 	add.w	r3, r7, #15
 80122aa:	2200      	movs	r2, #0
 80122ac:	2101      	movs	r1, #1
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff ff8e 	bl	80121d0 <crcByBit>
 80122b4:	4603      	mov	r3, r0
 80122b6:	6023      	str	r3, [r4, #0]
  } while(dividend-- > 0);
 80122b8:	7bfb      	ldrb	r3, [r7, #15]
 80122ba:	1e5a      	subs	r2, r3, #1
 80122bc:	b2d2      	uxtb	r2, r2
 80122be:	73fa      	strb	r2, [r7, #15]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1ec      	bne.n	801229e <crcTableInit+0xc>
}
 80122c4:	bf00      	nop
 80122c6:	bf00      	nop
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd90      	pop	{r4, r7, pc}

080122ce <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 80122ce:	b580      	push	{r7, lr}
 80122d0:	b082      	sub	sp, #8
 80122d2:	af02      	add	r7, sp, #8
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
 80122d4:	f7ff f992 	bl	80115fc <SEGGER_RTT_Init>
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 80122d8:	2301      	movs	r3, #1
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	2300      	movs	r3, #0
 80122de:	2200      	movs	r2, #0
 80122e0:	2100      	movs	r1, #0
 80122e2:	2000      	movs	r0, #0
 80122e4:	f7ff f920 	bl	8011528 <SEGGER_RTT_ConfigUpBuffer>
#endif
}
 80122e8:	bf00      	nop
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
	...

080122f0 <uartInit>:
    return len;
}
*/


void uartInit(void) {
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af02      	add	r7, sp, #8

#ifdef CONFIG_DEBUG_PRINT_ON_UART
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 80122f6:	2340      	movs	r3, #64	; 0x40
 80122f8:	4618      	mov	r0, r3
 80122fa:	2301      	movs	r3, #1
 80122fc:	4619      	mov	r1, r3
 80122fe:	2300      	movs	r3, #0
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	4b06      	ldr	r3, [pc, #24]	; (801231c <uartInit+0x2c>)
 8012304:	4a06      	ldr	r2, [pc, #24]	; (8012320 <uartInit+0x30>)
 8012306:	f00d fae3 	bl	801f8d0 <xQueueGenericCreateStatic>
 801230a:	4603      	mov	r3, r0
 801230c:	4a05      	ldr	r2, [pc, #20]	; (8012324 <uartInit+0x34>)
 801230e:	6013      	str	r3, [r2, #0]
	isInit = true;
 8012310:	4b05      	ldr	r3, [pc, #20]	; (8012328 <uartInit+0x38>)
 8012312:	2201      	movs	r2, #1
 8012314:	701a      	strb	r2, [r3, #0]
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

}
 8012316:	bf00      	nop
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	20005170 	.word	0x20005170
 8012320:	20005130 	.word	0x20005130
 8012324:	2000bd48 	.word	0x2000bd48
 8012328:	2000bdf5 	.word	0x2000bdf5

0801232c <uartDmaInit>:



void uartDmaInit(void)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af02      	add	r7, sp, #8


#ifdef ENABLE_UART_DMA

	  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
	  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8012332:	2303      	movs	r3, #3
 8012334:	9300      	str	r3, [sp, #0]
 8012336:	4b21      	ldr	r3, [pc, #132]	; (80123bc <uartDmaInit+0x90>)
 8012338:	2200      	movs	r2, #0
 801233a:	2100      	movs	r1, #0
 801233c:	2001      	movs	r0, #1
 801233e:	f00d fac7 	bl	801f8d0 <xQueueGenericCreateStatic>
 8012342:	4603      	mov	r3, r0
 8012344:	4a1e      	ldr	r2, [pc, #120]	; (80123c0 <uartDmaInit+0x94>)
 8012346:	6013      	str	r3, [r2, #0]
	  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8012348:	2303      	movs	r3, #3
 801234a:	9300      	str	r3, [sp, #0]
 801234c:	4b1d      	ldr	r3, [pc, #116]	; (80123c4 <uartDmaInit+0x98>)
 801234e:	2200      	movs	r2, #0
 8012350:	2100      	movs	r1, #0
 8012352:	2001      	movs	r0, #1
 8012354:	f00d fabc 	bl	801f8d0 <xQueueGenericCreateStatic>
 8012358:	4603      	mov	r3, r0
 801235a:	4a1b      	ldr	r2, [pc, #108]	; (80123c8 <uartDmaInit+0x9c>)
 801235c:	6013      	str	r3, [r2, #0]
	  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 801235e:	4b1a      	ldr	r3, [pc, #104]	; (80123c8 <uartDmaInit+0x9c>)
 8012360:	6818      	ldr	r0, [r3, #0]
 8012362:	2300      	movs	r3, #0
 8012364:	2200      	movs	r2, #0
 8012366:	2100      	movs	r1, #0
 8012368:	f00d fbc8 	bl	801fafc <xQueueGenericSend>
	  xSemaphoreGive(waitUntilSendDone);
 801236c:	4b14      	ldr	r3, [pc, #80]	; (80123c0 <uartDmaInit+0x94>)
 801236e:	6818      	ldr	r0, [r3, #0]
 8012370:	2300      	movs	r3, #0
 8012372:	2200      	movs	r2, #0
 8012374:	2100      	movs	r1, #0
 8012376:	f00d fbc1 	bl	801fafc <xQueueGenericSend>

	  __HAL_RCC_DMA2_CLK_ENABLE();
 801237a:	2300      	movs	r3, #0
 801237c:	607b      	str	r3, [r7, #4]
 801237e:	4b13      	ldr	r3, [pc, #76]	; (80123cc <uartDmaInit+0xa0>)
 8012380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012382:	4a12      	ldr	r2, [pc, #72]	; (80123cc <uartDmaInit+0xa0>)
 8012384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012388:	6313      	str	r3, [r2, #48]	; 0x30
 801238a:	4b10      	ldr	r3, [pc, #64]	; (80123cc <uartDmaInit+0xa0>)
 801238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012392:	607b      	str	r3, [r7, #4]
 8012394:	687b      	ldr	r3, [r7, #4]
	  HAL_DMA_Init(&hdma_usart6_tx);
 8012396:	480e      	ldr	r0, [pc, #56]	; (80123d0 <uartDmaInit+0xa4>)
 8012398:	f004 ffbc 	bl	8017314 <HAL_DMA_Init>
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 801239c:	2200      	movs	r2, #0
 801239e:	2105      	movs	r1, #5
 80123a0:	2045      	movs	r0, #69	; 0x45
 80123a2:	f004 ff80 	bl	80172a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80123a6:	2045      	movs	r0, #69	; 0x45
 80123a8:	f004 ff99 	bl	80172de <HAL_NVIC_EnableIRQ>

	  isUartDmaInitialized = true;
 80123ac:	4b09      	ldr	r3, [pc, #36]	; (80123d4 <uartDmaInit+0xa8>)
 80123ae:	2201      	movs	r2, #1
 80123b0:	701a      	strb	r2, [r3, #0]
#endif


}
 80123b2:	bf00      	nop
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	2000bda4 	.word	0x2000bda4
 80123c0:	2000bda0 	.word	0x2000bda0
 80123c4:	2000bd50 	.word	0x2000bd50
 80123c8:	2000bd4c 	.word	0x2000bd4c
 80123cc:	40023800 	.word	0x40023800
 80123d0:	2000d388 	.word	0x2000d388
 80123d4:	2000bdf4 	.word	0x2000bdf4

080123d8 <eventTrigger>:
    }
    return 0;
}

void eventTrigger(const eventtrigger *event)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 80123e0:	2300      	movs	r3, #0
 80123e2:	60fb      	str	r3, [r7, #12]
 80123e4:	e00e      	b.n	8012404 <eventTrigger+0x2c>
        if (callbacks[i]) {
 80123e6:	4a0b      	ldr	r2, [pc, #44]	; (8012414 <eventTrigger+0x3c>)
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d005      	beq.n	80123fe <eventTrigger+0x26>
            callbacks[i](event);
 80123f2:	4a08      	ldr	r2, [pc, #32]	; (8012414 <eventTrigger+0x3c>)
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	4798      	blx	r3
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	3301      	adds	r3, #1
 8012402:	60fb      	str	r3, [r7, #12]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2b00      	cmp	r3, #0
 8012408:	dded      	ble.n	80123e6 <eventTrigger+0xe>
        }
    }
}
 801240a:	bf00      	nop
 801240c:	bf00      	nop
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	2000bdf8 	.word	0x2000bdf8

08012418 <logInit>:
static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType);

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(logTask, LOG_TASK_STACKSIZE);

void logInit(void)
{
 8012418:	b590      	push	{r4, r7, lr}
 801241a:	b08b      	sub	sp, #44	; 0x2c
 801241c:	af04      	add	r7, sp, #16
  int i;
  const char* group = NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	607b      	str	r3, [r7, #4]
  int groupLength = 0;
 8012422:	2300      	movs	r3, #0
 8012424:	613b      	str	r3, [r7, #16]

  if(isInit)
 8012426:	4b80      	ldr	r3, [pc, #512]	; (8012628 <logInit+0x210>)
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	f040 80f7 	bne.w	801261e <logInit+0x206>
    return;

  logs = &_log_start;
 8012430:	4b7e      	ldr	r3, [pc, #504]	; (801262c <logInit+0x214>)
 8012432:	4a7f      	ldr	r2, [pc, #508]	; (8012630 <logInit+0x218>)
 8012434:	601a      	str	r2, [r3, #0]
  logsLen = &_log_stop - &_log_start;
 8012436:	4a7f      	ldr	r2, [pc, #508]	; (8012634 <logInit+0x21c>)
 8012438:	4b7d      	ldr	r3, [pc, #500]	; (8012630 <logInit+0x218>)
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	109b      	asrs	r3, r3, #2
 801243e:	4a7e      	ldr	r2, [pc, #504]	; (8012638 <logInit+0x220>)
 8012440:	fb02 f303 	mul.w	r3, r2, r3
 8012444:	461a      	mov	r2, r3
 8012446:	4b7d      	ldr	r3, [pc, #500]	; (801263c <logInit+0x224>)
 8012448:	601a      	str	r2, [r3, #0]

  // Calculate a hash of the toc by chaining description of each elements
  // Using the CRTP packet as temporary buffer
  logsCrc = 0;
 801244a:	4b7d      	ldr	r3, [pc, #500]	; (8012640 <logInit+0x228>)
 801244c:	2200      	movs	r2, #0
 801244e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<logsLen; i++)
 8012450:	2300      	movs	r3, #0
 8012452:	60fb      	str	r3, [r7, #12]
 8012454:	e092      	b.n	801257c <logInit+0x164>
  {
    int len = 5;
 8012456:	2305      	movs	r3, #5
 8012458:	60bb      	str	r3, [r7, #8]
 801245a:	4b79      	ldr	r3, [pc, #484]	; (8012640 <logInit+0x228>)
 801245c:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[0], &logsCrc, 4);
 801245e:	4a79      	ldr	r2, [pc, #484]	; (8012644 <logInit+0x22c>)
 8012460:	f8c2 3002 	str.w	r3, [r2, #2]
    p.data[4] = logs[i].type;
 8012464:	4b71      	ldr	r3, [pc, #452]	; (801262c <logInit+0x214>)
 8012466:	6819      	ldr	r1, [r3, #0]
 8012468:	68fa      	ldr	r2, [r7, #12]
 801246a:	4613      	mov	r3, r2
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	4413      	add	r3, r2
 8012470:	009b      	lsls	r3, r3, #2
 8012472:	440b      	add	r3, r1
 8012474:	781a      	ldrb	r2, [r3, #0]
 8012476:	4b73      	ldr	r3, [pc, #460]	; (8012644 <logInit+0x22c>)
 8012478:	719a      	strb	r2, [r3, #6]
    if (logs[i].type & LOG_GROUP) {
 801247a:	4b6c      	ldr	r3, [pc, #432]	; (801262c <logInit+0x214>)
 801247c:	6819      	ldr	r1, [r3, #0]
 801247e:	68fa      	ldr	r2, [r7, #12]
 8012480:	4613      	mov	r3, r2
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	4413      	add	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	440b      	add	r3, r1
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	b25b      	sxtb	r3, r3
 801248e:	2b00      	cmp	r3, #0
 8012490:	da1c      	bge.n	80124cc <logInit+0xb4>
      if (logs[i].type & LOG_START) {
 8012492:	4b66      	ldr	r3, [pc, #408]	; (801262c <logInit+0x214>)
 8012494:	6819      	ldr	r1, [r3, #0]
 8012496:	68fa      	ldr	r2, [r7, #12]
 8012498:	4613      	mov	r3, r2
 801249a:	005b      	lsls	r3, r3, #1
 801249c:	4413      	add	r3, r2
 801249e:	009b      	lsls	r3, r3, #2
 80124a0:	440b      	add	r3, r1
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	f003 0301 	and.w	r3, r3, #1
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d026      	beq.n	80124fa <logInit+0xe2>
        group = logs[i].name;
 80124ac:	4b5f      	ldr	r3, [pc, #380]	; (801262c <logInit+0x214>)
 80124ae:	6819      	ldr	r1, [r3, #0]
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	4613      	mov	r3, r2
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	4413      	add	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	440b      	add	r3, r1
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	607b      	str	r3, [r7, #4]
        groupLength = strlen(group);
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ed fee5 	bl	8000290 <strlen>
 80124c6:	4603      	mov	r3, r0
 80124c8:	613b      	str	r3, [r7, #16]
 80124ca:	e016      	b.n	80124fa <logInit+0xe2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 3 + strlen(logs[i].name) + groupLength + 2
      if (strlen(logs[i].name) + groupLength + 2 > 26) {
 80124cc:	4b57      	ldr	r3, [pc, #348]	; (801262c <logInit+0x214>)
 80124ce:	6819      	ldr	r1, [r3, #0]
 80124d0:	68fa      	ldr	r2, [r7, #12]
 80124d2:	4613      	mov	r3, r2
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	4413      	add	r3, r2
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	440b      	add	r3, r1
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ed fed6 	bl	8000290 <strlen>
 80124e4:	4602      	mov	r2, r0
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	4413      	add	r3, r2
 80124ea:	3302      	adds	r3, #2
 80124ec:	2b1a      	cmp	r3, #26
 80124ee:	d904      	bls.n	80124fa <logInit+0xe2>
        LOG_ERROR("'%s.%s' too long\n", group, logs[i].name);
        ASSERT_FAILED();
 80124f0:	22d1      	movs	r2, #209	; 0xd1
 80124f2:	4955      	ldr	r1, [pc, #340]	; (8012648 <logInit+0x230>)
 80124f4:	4855      	ldr	r0, [pc, #340]	; (801264c <logInit+0x234>)
 80124f6:	f7ff fd99 	bl	801202c <assertFail>
      }
    }
    if (logs[i].name) {
 80124fa:	4b4c      	ldr	r3, [pc, #304]	; (801262c <logInit+0x214>)
 80124fc:	6819      	ldr	r1, [r3, #0]
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	4613      	mov	r3, r2
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	4413      	add	r3, r2
 8012506:	009b      	lsls	r3, r3, #2
 8012508:	440b      	add	r3, r1
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d02a      	beq.n	8012566 <logInit+0x14e>
      memcpy(&p.data[5], logs[i].name, strlen(logs[i].name));
 8012510:	4b46      	ldr	r3, [pc, #280]	; (801262c <logInit+0x214>)
 8012512:	6819      	ldr	r1, [r3, #0]
 8012514:	68fa      	ldr	r2, [r7, #12]
 8012516:	4613      	mov	r3, r2
 8012518:	005b      	lsls	r3, r3, #1
 801251a:	4413      	add	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	440b      	add	r3, r1
 8012520:	685c      	ldr	r4, [r3, #4]
 8012522:	4b42      	ldr	r3, [pc, #264]	; (801262c <logInit+0x214>)
 8012524:	6819      	ldr	r1, [r3, #0]
 8012526:	68fa      	ldr	r2, [r7, #12]
 8012528:	4613      	mov	r3, r2
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	4413      	add	r3, r2
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	440b      	add	r3, r1
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	4618      	mov	r0, r3
 8012536:	f7ed feab 	bl	8000290 <strlen>
 801253a:	4603      	mov	r3, r0
 801253c:	461a      	mov	r2, r3
 801253e:	4621      	mov	r1, r4
 8012540:	4843      	ldr	r0, [pc, #268]	; (8012650 <logInit+0x238>)
 8012542:	f012 fc18 	bl	8024d76 <memcpy>
      len += strlen(logs[i].name);
 8012546:	4b39      	ldr	r3, [pc, #228]	; (801262c <logInit+0x214>)
 8012548:	6819      	ldr	r1, [r3, #0]
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	4613      	mov	r3, r2
 801254e:	005b      	lsls	r3, r3, #1
 8012550:	4413      	add	r3, r2
 8012552:	009b      	lsls	r3, r3, #2
 8012554:	440b      	add	r3, r1
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	4618      	mov	r0, r3
 801255a:	f7ed fe99 	bl	8000290 <strlen>
 801255e:	4602      	mov	r2, r0
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	4413      	add	r3, r2
 8012564:	60bb      	str	r3, [r7, #8]
    }
    logsCrc = crc32CalculateBuffer(p.data, len);
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	4619      	mov	r1, r3
 801256a:	483a      	ldr	r0, [pc, #232]	; (8012654 <logInit+0x23c>)
 801256c:	f7ff fe15 	bl	801219a <crc32CalculateBuffer>
 8012570:	4603      	mov	r3, r0
 8012572:	4a33      	ldr	r2, [pc, #204]	; (8012640 <logInit+0x228>)
 8012574:	6013      	str	r3, [r2, #0]
  for (int i=0; i<logsLen; i++)
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	3301      	adds	r3, #1
 801257a:	60fb      	str	r3, [r7, #12]
 801257c:	4b2f      	ldr	r3, [pc, #188]	; (801263c <logInit+0x224>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	429a      	cmp	r2, r3
 8012584:	f6ff af67 	blt.w	8012456 <logInit+0x3e>
  }

  // Big lock that protects the log datastructures
  logLock = xSemaphoreCreateMutexStatic(&logLockBuffer);
 8012588:	4933      	ldr	r1, [pc, #204]	; (8012658 <logInit+0x240>)
 801258a:	2001      	movs	r0, #1
 801258c:	f00d fa9b 	bl	801fac6 <xQueueCreateMutexStatic>
 8012590:	4603      	mov	r3, r0
 8012592:	4a32      	ldr	r2, [pc, #200]	; (801265c <logInit+0x244>)
 8012594:	6013      	str	r3, [r2, #0]

  for (i=0; i<logsLen; i++)
 8012596:	2300      	movs	r3, #0
 8012598:	617b      	str	r3, [r7, #20]
 801259a:	e014      	b.n	80125c6 <logInit+0x1ae>
  {
    if(!(logs[i].type & LOG_GROUP))
 801259c:	4b23      	ldr	r3, [pc, #140]	; (801262c <logInit+0x214>)
 801259e:	6819      	ldr	r1, [r3, #0]
 80125a0:	697a      	ldr	r2, [r7, #20]
 80125a2:	4613      	mov	r3, r2
 80125a4:	005b      	lsls	r3, r3, #1
 80125a6:	4413      	add	r3, r2
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	440b      	add	r3, r1
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	b25b      	sxtb	r3, r3
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	db05      	blt.n	80125c0 <logInit+0x1a8>
      logsCount++;
 80125b4:	4b2a      	ldr	r3, [pc, #168]	; (8012660 <logInit+0x248>)
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	3301      	adds	r3, #1
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	4b28      	ldr	r3, [pc, #160]	; (8012660 <logInit+0x248>)
 80125be:	801a      	strh	r2, [r3, #0]
  for (i=0; i<logsLen; i++)
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	3301      	adds	r3, #1
 80125c4:	617b      	str	r3, [r7, #20]
 80125c6:	4b1d      	ldr	r3, [pc, #116]	; (801263c <logInit+0x224>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	697a      	ldr	r2, [r7, #20]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	dbe5      	blt.n	801259c <logInit+0x184>
  }

  //Manually free all log blocks
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 80125d0:	2300      	movs	r3, #0
 80125d2:	617b      	str	r3, [r7, #20]
 80125d4:	e00c      	b.n	80125f0 <logInit+0x1d8>
    logBlocks[i].id = BLOCK_ID_FREE;
 80125d6:	4923      	ldr	r1, [pc, #140]	; (8012664 <logInit+0x24c>)
 80125d8:	697a      	ldr	r2, [r7, #20]
 80125da:	4613      	mov	r3, r2
 80125dc:	011b      	lsls	r3, r3, #4
 80125de:	1a9b      	subs	r3, r3, r2
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	440b      	add	r3, r1
 80125e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125e8:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	3301      	adds	r3, #1
 80125ee:	617b      	str	r3, [r7, #20]
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	2b0f      	cmp	r3, #15
 80125f4:	ddef      	ble.n	80125d6 <logInit+0x1be>

  //Init data structures and set the log subsystem in a known state
  logReset();
 80125f6:	f001 f9fd 	bl	80139f4 <logReset>

  //Start the log task
  STATIC_MEM_TASK_CREATE(logTask, logTask, LOG_TASK_NAME, NULL, LOG_TASK_PRI);
 80125fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125fe:	461a      	mov	r2, r3
 8012600:	4b19      	ldr	r3, [pc, #100]	; (8012668 <logInit+0x250>)
 8012602:	9302      	str	r3, [sp, #8]
 8012604:	4b19      	ldr	r3, [pc, #100]	; (801266c <logInit+0x254>)
 8012606:	9301      	str	r3, [sp, #4]
 8012608:	2301      	movs	r3, #1
 801260a:	9300      	str	r3, [sp, #0]
 801260c:	2300      	movs	r3, #0
 801260e:	4918      	ldr	r1, [pc, #96]	; (8012670 <logInit+0x258>)
 8012610:	4818      	ldr	r0, [pc, #96]	; (8012674 <logInit+0x25c>)
 8012612:	f00e f86d 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8012616:	4b04      	ldr	r3, [pc, #16]	; (8012628 <logInit+0x210>)
 8012618:	2201      	movs	r2, #1
 801261a:	701a      	strb	r2, [r3, #0]
 801261c:	e000      	b.n	8012620 <logInit+0x208>
    return;
 801261e:	bf00      	nop
}
 8012620:	371c      	adds	r7, #28
 8012622:	46bd      	mov	sp, r7
 8012624:	bd90      	pop	{r4, r7, pc}
 8012626:	bf00      	nop
 8012628:	2000be80 	.word	0x2000be80
 801262c:	2000be50 	.word	0x2000be50
 8012630:	08029ae8 	.word	0x08029ae8
 8012634:	0802a8e0 	.word	0x0802a8e0
 8012638:	aaaaaaab 	.word	0xaaaaaaab
 801263c:	2000be54 	.word	0x2000be54
 8012640:	2000be58 	.word	0x2000be58
 8012644:	2000be60 	.word	0x2000be60
 8012648:	0802d5f8 	.word	0x0802d5f8
 801264c:	0802d610 	.word	0x0802d610
 8012650:	2000be67 	.word	0x2000be67
 8012654:	2000be62 	.word	0x2000be62
 8012658:	2000be00 	.word	0x2000be00
 801265c:	2000bdfc 	.word	0x2000bdfc
 8012660:	2000be5c 	.word	0x2000be5c
 8012664:	200059c0 	.word	0x200059c0
 8012668:	20006180 	.word	0x20006180
 801266c:	20005d80 	.word	0x20005d80
 8012670:	0802d614 	.word	0x0802d614
 8012674:	08012679 	.word	0x08012679

08012678 <logTask>:
{
  return isInit;
}

void logTask(void * prm)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_LOG);
 8012680:	2005      	movs	r0, #5
 8012682:	f7ee fddf 	bl	8001244 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 8012686:	4914      	ldr	r1, [pc, #80]	; (80126d8 <logTask+0x60>)
 8012688:	2005      	movs	r0, #5
 801268a:	f7ee fe0b 	bl	80012a4 <crtpReceivePacketBlock>

		xSemaphoreTake(logLock, portMAX_DELAY);
 801268e:	4b13      	ldr	r3, [pc, #76]	; (80126dc <logTask+0x64>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012696:	4618      	mov	r0, r3
 8012698:	f00d fcb2 	bl	8020000 <xQueueSemaphoreTake>
		if (p.channel==TOC_CH)
 801269c:	4b0e      	ldr	r3, [pc, #56]	; (80126d8 <logTask+0x60>)
 801269e:	785b      	ldrb	r3, [r3, #1]
 80126a0:	f003 0303 	and.w	r3, r3, #3
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d104      	bne.n	80126b4 <logTask+0x3c>
		  logTOCProcess(p.data[0]);
 80126aa:	4b0b      	ldr	r3, [pc, #44]	; (80126d8 <logTask+0x60>)
 80126ac:	789b      	ldrb	r3, [r3, #2]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f000 f816 	bl	80126e0 <logTOCProcess>
		if (p.channel==CONTROL_CH)
 80126b4:	4b08      	ldr	r3, [pc, #32]	; (80126d8 <logTask+0x60>)
 80126b6:	785b      	ldrb	r3, [r3, #1]
 80126b8:	f003 0303 	and.w	r3, r3, #3
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d101      	bne.n	80126c6 <logTask+0x4e>
		  logControlProcess();
 80126c2:	f000 fa13 	bl	8012aec <logControlProcess>
		xSemaphoreGive(logLock);
 80126c6:	4b05      	ldr	r3, [pc, #20]	; (80126dc <logTask+0x64>)
 80126c8:	6818      	ldr	r0, [r3, #0]
 80126ca:	2300      	movs	r3, #0
 80126cc:	2200      	movs	r2, #0
 80126ce:	2100      	movs	r1, #0
 80126d0:	f00d fa14 	bl	801fafc <xQueueGenericSend>
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 80126d4:	e7d7      	b.n	8012686 <logTask+0xe>
 80126d6:	bf00      	nop
 80126d8:	2000be60 	.word	0x2000be60
 80126dc:	2000bdfc 	.word	0x2000bdfc

080126e0 <logTOCProcess>:
	}
}

void logTOCProcess(int command)
{
 80126e0:	b5b0      	push	{r4, r5, r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  int ptr = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	617b      	str	r3, [r7, #20]
  char * group = "plop";
 80126ec:	4ba4      	ldr	r3, [pc, #656]	; (8012980 <logTOCProcess+0x2a0>)
 80126ee:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 80126f0:	2300      	movs	r3, #0
 80126f2:	81fb      	strh	r3, [r7, #14]
  uint16_t logId=0;
 80126f4:	2300      	movs	r3, #0
 80126f6:	81bb      	strh	r3, [r7, #12]

  switch (command)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b03      	cmp	r3, #3
 80126fc:	f200 81e3 	bhi.w	8012ac6 <logTOCProcess+0x3e6>
 8012700:	a201      	add	r2, pc, #4	; (adr r2, 8012708 <logTOCProcess+0x28>)
 8012702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012706:	bf00      	nop
 8012708:	08012771 	.word	0x08012771
 801270c:	08012719 	.word	0x08012719
 8012710:	08012921 	.word	0x08012921
 8012714:	080128df 	.word	0x080128df
  {
  case CMD_GET_INFO: //Get info packet about the log implementation
    DEBUG_PRINT("Client uses old logging API!\n");
 8012718:	499a      	ldr	r1, [pc, #616]	; (8012984 <logTOCProcess+0x2a4>)
 801271a:	2000      	movs	r0, #0
 801271c:	f7ff fbc2 	bl	8011ea4 <SEGGER_RTT_printf>
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 8012720:	2300      	movs	r3, #0
 8012722:	617b      	str	r3, [r7, #20]
    group = "";
 8012724:	4b98      	ldr	r3, [pc, #608]	; (8012988 <logTOCProcess+0x2a8>)
 8012726:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8012728:	4b98      	ldr	r3, [pc, #608]	; (801298c <logTOCProcess+0x2ac>)
 801272a:	2250      	movs	r2, #80	; 0x50
 801272c:	705a      	strb	r2, [r3, #1]
    p.size=8;
 801272e:	4b97      	ldr	r3, [pc, #604]	; (801298c <logTOCProcess+0x2ac>)
 8012730:	2208      	movs	r2, #8
 8012732:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO;
 8012734:	4b95      	ldr	r3, [pc, #596]	; (801298c <logTOCProcess+0x2ac>)
 8012736:	2201      	movs	r2, #1
 8012738:	709a      	strb	r2, [r3, #2]
    if (logsCount < 255) {
 801273a:	4b95      	ldr	r3, [pc, #596]	; (8012990 <logTOCProcess+0x2b0>)
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	2bfe      	cmp	r3, #254	; 0xfe
 8012740:	d805      	bhi.n	801274e <logTOCProcess+0x6e>
      p.data[1]=logsCount;
 8012742:	4b93      	ldr	r3, [pc, #588]	; (8012990 <logTOCProcess+0x2b0>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	b2da      	uxtb	r2, r3
 8012748:	4b90      	ldr	r3, [pc, #576]	; (801298c <logTOCProcess+0x2ac>)
 801274a:	70da      	strb	r2, [r3, #3]
 801274c:	e002      	b.n	8012754 <logTOCProcess+0x74>
    } else {
      p.data[1]=255;
 801274e:	4b8f      	ldr	r3, [pc, #572]	; (801298c <logTOCProcess+0x2ac>)
 8012750:	22ff      	movs	r2, #255	; 0xff
 8012752:	70da      	strb	r2, [r3, #3]
 8012754:	4b8f      	ldr	r3, [pc, #572]	; (8012994 <logTOCProcess+0x2b4>)
 8012756:	681b      	ldr	r3, [r3, #0]
    }
    memcpy(&p.data[2], &logsCrc, 4);
 8012758:	4a8c      	ldr	r2, [pc, #560]	; (801298c <logTOCProcess+0x2ac>)
 801275a:	6053      	str	r3, [r2, #4]
    p.data[6]=LOG_MAX_BLOCKS;
 801275c:	4b8b      	ldr	r3, [pc, #556]	; (801298c <logTOCProcess+0x2ac>)
 801275e:	2210      	movs	r2, #16
 8012760:	721a      	strb	r2, [r3, #8]
    p.data[7]=LOG_MAX_OPS;
 8012762:	4b8a      	ldr	r3, [pc, #552]	; (801298c <logTOCProcess+0x2ac>)
 8012764:	2280      	movs	r2, #128	; 0x80
 8012766:	725a      	strb	r2, [r3, #9]
    crtpSendPacketBlock(&p);
 8012768:	4888      	ldr	r0, [pc, #544]	; (801298c <logTOCProcess+0x2ac>)
 801276a:	f7ee fe9b 	bl	80014a4 <crtpSendPacketBlock>
    break;
 801276e:	e1aa      	b.n	8012ac6 <logTOCProcess+0x3e6>
  case CMD_GET_ITEM:  //Get log variable
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", p.data[1]);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8012770:	2300      	movs	r3, #0
 8012772:	617b      	str	r3, [r7, #20]
 8012774:	e032      	b.n	80127dc <logTOCProcess+0xfc>
    {
      if (logs[ptr].type & LOG_GROUP)
 8012776:	4b88      	ldr	r3, [pc, #544]	; (8012998 <logTOCProcess+0x2b8>)
 8012778:	6819      	ldr	r1, [r3, #0]
 801277a:	697a      	ldr	r2, [r7, #20]
 801277c:	4613      	mov	r3, r2
 801277e:	005b      	lsls	r3, r3, #1
 8012780:	4413      	add	r3, r2
 8012782:	009b      	lsls	r3, r3, #2
 8012784:	440b      	add	r3, r1
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	b25b      	sxtb	r3, r3
 801278a:	2b00      	cmp	r3, #0
 801278c:	da1a      	bge.n	80127c4 <logTOCProcess+0xe4>
      {
        if (logs[ptr].type & LOG_START)
 801278e:	4b82      	ldr	r3, [pc, #520]	; (8012998 <logTOCProcess+0x2b8>)
 8012790:	6819      	ldr	r1, [r3, #0]
 8012792:	697a      	ldr	r2, [r7, #20]
 8012794:	4613      	mov	r3, r2
 8012796:	005b      	lsls	r3, r3, #1
 8012798:	4413      	add	r3, r2
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	440b      	add	r3, r1
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	f003 0301 	and.w	r3, r3, #1
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00a      	beq.n	80127be <logTOCProcess+0xde>
          group = logs[ptr].name;
 80127a8:	4b7b      	ldr	r3, [pc, #492]	; (8012998 <logTOCProcess+0x2b8>)
 80127aa:	6819      	ldr	r1, [r3, #0]
 80127ac:	697a      	ldr	r2, [r7, #20]
 80127ae:	4613      	mov	r3, r2
 80127b0:	005b      	lsls	r3, r3, #1
 80127b2:	4413      	add	r3, r2
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	440b      	add	r3, r1
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	613b      	str	r3, [r7, #16]
 80127bc:	e00b      	b.n	80127d6 <logTOCProcess+0xf6>
        else
          group = "";
 80127be:	4b72      	ldr	r3, [pc, #456]	; (8012988 <logTOCProcess+0x2a8>)
 80127c0:	613b      	str	r3, [r7, #16]
 80127c2:	e008      	b.n	80127d6 <logTOCProcess+0xf6>
      }
      else                          //Ptr points a variable
      {
        if (n==p.data[1])
 80127c4:	4b71      	ldr	r3, [pc, #452]	; (801298c <logTOCProcess+0x2ac>)
 80127c6:	78db      	ldrb	r3, [r3, #3]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	89fa      	ldrh	r2, [r7, #14]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d00b      	beq.n	80127e8 <logTOCProcess+0x108>
          break;
        n++;
 80127d0:	89fb      	ldrh	r3, [r7, #14]
 80127d2:	3301      	adds	r3, #1
 80127d4:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	3301      	adds	r3, #1
 80127da:	617b      	str	r3, [r7, #20]
 80127dc:	4b6f      	ldr	r3, [pc, #444]	; (801299c <logTOCProcess+0x2bc>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	697a      	ldr	r2, [r7, #20]
 80127e2:	429a      	cmp	r2, r3
 80127e4:	dbc7      	blt.n	8012776 <logTOCProcess+0x96>
 80127e6:	e000      	b.n	80127ea <logTOCProcess+0x10a>
          break;
 80127e8:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 80127ea:	4b6c      	ldr	r3, [pc, #432]	; (801299c <logTOCProcess+0x2bc>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	da67      	bge.n	80128c4 <logTOCProcess+0x1e4>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80127f4:	4b65      	ldr	r3, [pc, #404]	; (801298c <logTOCProcess+0x2ac>)
 80127f6:	2250      	movs	r2, #80	; 0x50
 80127f8:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 80127fa:	4b64      	ldr	r3, [pc, #400]	; (801298c <logTOCProcess+0x2ac>)
 80127fc:	2200      	movs	r2, #0
 80127fe:	709a      	strb	r2, [r3, #2]
      p.data[1]=n;
 8012800:	89fb      	ldrh	r3, [r7, #14]
 8012802:	b2da      	uxtb	r2, r3
 8012804:	4b61      	ldr	r3, [pc, #388]	; (801298c <logTOCProcess+0x2ac>)
 8012806:	70da      	strb	r2, [r3, #3]
      p.data[2]=logGetType(ptr);
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	b29b      	uxth	r3, r3
 801280c:	4618      	mov	r0, r3
 801280e:	f001 f951 	bl	8013ab4 <logGetType>
 8012812:	4603      	mov	r3, r0
 8012814:	b2da      	uxtb	r2, r3
 8012816:	4b5d      	ldr	r3, [pc, #372]	; (801298c <logTOCProcess+0x2ac>)
 8012818:	711a      	strb	r2, [r3, #4]
      p.size=3+2+strlen(group)+strlen(logs[ptr].name);
 801281a:	6938      	ldr	r0, [r7, #16]
 801281c:	f7ed fd38 	bl	8000290 <strlen>
 8012820:	4603      	mov	r3, r0
 8012822:	b2dc      	uxtb	r4, r3
 8012824:	4b5c      	ldr	r3, [pc, #368]	; (8012998 <logTOCProcess+0x2b8>)
 8012826:	6819      	ldr	r1, [r3, #0]
 8012828:	697a      	ldr	r2, [r7, #20]
 801282a:	4613      	mov	r3, r2
 801282c:	005b      	lsls	r3, r3, #1
 801282e:	4413      	add	r3, r2
 8012830:	009b      	lsls	r3, r3, #2
 8012832:	440b      	add	r3, r1
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	4618      	mov	r0, r3
 8012838:	f7ed fd2a 	bl	8000290 <strlen>
 801283c:	4603      	mov	r3, r0
 801283e:	b2db      	uxtb	r3, r3
 8012840:	4423      	add	r3, r4
 8012842:	b2db      	uxtb	r3, r3
 8012844:	3305      	adds	r3, #5
 8012846:	b2da      	uxtb	r2, r3
 8012848:	4b50      	ldr	r3, [pc, #320]	; (801298c <logTOCProcess+0x2ac>)
 801284a:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 801284c:	4b4f      	ldr	r3, [pc, #316]	; (801298c <logTOCProcess+0x2ac>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	2b1e      	cmp	r3, #30
 8012852:	d905      	bls.n	8012860 <logTOCProcess+0x180>
 8012854:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012858:	4951      	ldr	r1, [pc, #324]	; (80129a0 <logTOCProcess+0x2c0>)
 801285a:	4852      	ldr	r0, [pc, #328]	; (80129a4 <logTOCProcess+0x2c4>)
 801285c:	f7ff fbe6 	bl	801202c <assertFail>
      memcpy(p.data+3, group, strlen(group)+1);
 8012860:	4c51      	ldr	r4, [pc, #324]	; (80129a8 <logTOCProcess+0x2c8>)
 8012862:	6938      	ldr	r0, [r7, #16]
 8012864:	f7ed fd14 	bl	8000290 <strlen>
 8012868:	4603      	mov	r3, r0
 801286a:	3301      	adds	r3, #1
 801286c:	461a      	mov	r2, r3
 801286e:	6939      	ldr	r1, [r7, #16]
 8012870:	4620      	mov	r0, r4
 8012872:	f012 fa80 	bl	8024d76 <memcpy>
      memcpy(p.data+3+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 8012876:	6938      	ldr	r0, [r7, #16]
 8012878:	f7ed fd0a 	bl	8000290 <strlen>
 801287c:	4603      	mov	r3, r0
 801287e:	3304      	adds	r3, #4
 8012880:	4a4a      	ldr	r2, [pc, #296]	; (80129ac <logTOCProcess+0x2cc>)
 8012882:	189c      	adds	r4, r3, r2
 8012884:	4b44      	ldr	r3, [pc, #272]	; (8012998 <logTOCProcess+0x2b8>)
 8012886:	6819      	ldr	r1, [r3, #0]
 8012888:	697a      	ldr	r2, [r7, #20]
 801288a:	4613      	mov	r3, r2
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	4413      	add	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	440b      	add	r3, r1
 8012894:	685d      	ldr	r5, [r3, #4]
 8012896:	4b40      	ldr	r3, [pc, #256]	; (8012998 <logTOCProcess+0x2b8>)
 8012898:	6819      	ldr	r1, [r3, #0]
 801289a:	697a      	ldr	r2, [r7, #20]
 801289c:	4613      	mov	r3, r2
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	440b      	add	r3, r1
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7ed fcf1 	bl	8000290 <strlen>
 80128ae:	4603      	mov	r3, r0
 80128b0:	3301      	adds	r3, #1
 80128b2:	461a      	mov	r2, r3
 80128b4:	4629      	mov	r1, r5
 80128b6:	4620      	mov	r0, r4
 80128b8:	f012 fa5d 	bl	8024d76 <memcpy>
      crtpSendPacketBlock(&p);
 80128bc:	4833      	ldr	r0, [pc, #204]	; (801298c <logTOCProcess+0x2ac>)
 80128be:	f7ee fdf1 	bl	80014a4 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 80128c2:	e100      	b.n	8012ac6 <logTOCProcess+0x3e6>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80128c4:	4b31      	ldr	r3, [pc, #196]	; (801298c <logTOCProcess+0x2ac>)
 80128c6:	2250      	movs	r2, #80	; 0x50
 80128c8:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 80128ca:	4b30      	ldr	r3, [pc, #192]	; (801298c <logTOCProcess+0x2ac>)
 80128cc:	2200      	movs	r2, #0
 80128ce:	709a      	strb	r2, [r3, #2]
      p.size=1;
 80128d0:	4b2e      	ldr	r3, [pc, #184]	; (801298c <logTOCProcess+0x2ac>)
 80128d2:	2201      	movs	r2, #1
 80128d4:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 80128d6:	482d      	ldr	r0, [pc, #180]	; (801298c <logTOCProcess+0x2ac>)
 80128d8:	f7ee fde4 	bl	80014a4 <crtpSendPacketBlock>
    break;
 80128dc:	e0f3      	b.n	8012ac6 <logTOCProcess+0x3e6>
  case CMD_GET_INFO_V2: //Get info packet about the log implementation
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 80128de:	2300      	movs	r3, #0
 80128e0:	617b      	str	r3, [r7, #20]
    group = "";
 80128e2:	4b29      	ldr	r3, [pc, #164]	; (8012988 <logTOCProcess+0x2a8>)
 80128e4:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80128e6:	4b29      	ldr	r3, [pc, #164]	; (801298c <logTOCProcess+0x2ac>)
 80128e8:	2250      	movs	r2, #80	; 0x50
 80128ea:	705a      	strb	r2, [r3, #1]
    p.size=9;
 80128ec:	4b27      	ldr	r3, [pc, #156]	; (801298c <logTOCProcess+0x2ac>)
 80128ee:	2209      	movs	r2, #9
 80128f0:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO_V2;
 80128f2:	4b26      	ldr	r3, [pc, #152]	; (801298c <logTOCProcess+0x2ac>)
 80128f4:	2203      	movs	r2, #3
 80128f6:	709a      	strb	r2, [r3, #2]
 80128f8:	4b25      	ldr	r3, [pc, #148]	; (8012990 <logTOCProcess+0x2b0>)
 80128fa:	881b      	ldrh	r3, [r3, #0]
    memcpy(&p.data[1], &logsCount, 2);
 80128fc:	4a23      	ldr	r2, [pc, #140]	; (801298c <logTOCProcess+0x2ac>)
 80128fe:	f8a2 3003 	strh.w	r3, [r2, #3]
 8012902:	4b24      	ldr	r3, [pc, #144]	; (8012994 <logTOCProcess+0x2b4>)
 8012904:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[3], &logsCrc, 4);
 8012906:	4a21      	ldr	r2, [pc, #132]	; (801298c <logTOCProcess+0x2ac>)
 8012908:	f8c2 3005 	str.w	r3, [r2, #5]
    p.data[7]=LOG_MAX_BLOCKS;
 801290c:	4b1f      	ldr	r3, [pc, #124]	; (801298c <logTOCProcess+0x2ac>)
 801290e:	2210      	movs	r2, #16
 8012910:	725a      	strb	r2, [r3, #9]
    p.data[8]=LOG_MAX_OPS;
 8012912:	4b1e      	ldr	r3, [pc, #120]	; (801298c <logTOCProcess+0x2ac>)
 8012914:	2280      	movs	r2, #128	; 0x80
 8012916:	729a      	strb	r2, [r3, #10]
    crtpSendPacketBlock(&p);
 8012918:	481c      	ldr	r0, [pc, #112]	; (801298c <logTOCProcess+0x2ac>)
 801291a:	f7ee fdc3 	bl	80014a4 <crtpSendPacketBlock>
    break;
 801291e:	e0d2      	b.n	8012ac6 <logTOCProcess+0x3e6>
 8012920:	4b1a      	ldr	r3, [pc, #104]	; (801298c <logTOCProcess+0x2ac>)
 8012922:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012926:	b29b      	uxth	r3, r3
  case CMD_GET_ITEM_V2:  //Get log variable
    memcpy(&logId, &p.data[1], 2);
 8012928:	81bb      	strh	r3, [r7, #12]
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", logId);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 801292a:	2300      	movs	r3, #0
 801292c:	617b      	str	r3, [r7, #20]
 801292e:	e049      	b.n	80129c4 <logTOCProcess+0x2e4>
    {
      if (logs[ptr].type & LOG_GROUP)
 8012930:	4b19      	ldr	r3, [pc, #100]	; (8012998 <logTOCProcess+0x2b8>)
 8012932:	6819      	ldr	r1, [r3, #0]
 8012934:	697a      	ldr	r2, [r7, #20]
 8012936:	4613      	mov	r3, r2
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	4413      	add	r3, r2
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	440b      	add	r3, r1
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	b25b      	sxtb	r3, r3
 8012944:	2b00      	cmp	r3, #0
 8012946:	da33      	bge.n	80129b0 <logTOCProcess+0x2d0>
      {
        if (logs[ptr].type & LOG_START)
 8012948:	4b13      	ldr	r3, [pc, #76]	; (8012998 <logTOCProcess+0x2b8>)
 801294a:	6819      	ldr	r1, [r3, #0]
 801294c:	697a      	ldr	r2, [r7, #20]
 801294e:	4613      	mov	r3, r2
 8012950:	005b      	lsls	r3, r3, #1
 8012952:	4413      	add	r3, r2
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	440b      	add	r3, r1
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	f003 0301 	and.w	r3, r3, #1
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00a      	beq.n	8012978 <logTOCProcess+0x298>
          group = logs[ptr].name;
 8012962:	4b0d      	ldr	r3, [pc, #52]	; (8012998 <logTOCProcess+0x2b8>)
 8012964:	6819      	ldr	r1, [r3, #0]
 8012966:	697a      	ldr	r2, [r7, #20]
 8012968:	4613      	mov	r3, r2
 801296a:	005b      	lsls	r3, r3, #1
 801296c:	4413      	add	r3, r2
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	440b      	add	r3, r1
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	613b      	str	r3, [r7, #16]
 8012976:	e022      	b.n	80129be <logTOCProcess+0x2de>
        else
          group = "";
 8012978:	4b03      	ldr	r3, [pc, #12]	; (8012988 <logTOCProcess+0x2a8>)
 801297a:	613b      	str	r3, [r7, #16]
 801297c:	e01f      	b.n	80129be <logTOCProcess+0x2de>
 801297e:	bf00      	nop
 8012980:	0802d618 	.word	0x0802d618
 8012984:	0802d620 	.word	0x0802d620
 8012988:	0802d610 	.word	0x0802d610
 801298c:	2000be60 	.word	0x2000be60
 8012990:	2000be5c 	.word	0x2000be5c
 8012994:	2000be58 	.word	0x2000be58
 8012998:	2000be50 	.word	0x2000be50
 801299c:	2000be54 	.word	0x2000be54
 80129a0:	0802d5f8 	.word	0x0802d5f8
 80129a4:	0802d640 	.word	0x0802d640
 80129a8:	2000be65 	.word	0x2000be65
 80129ac:	2000be62 	.word	0x2000be62
      }
      else                          //Ptr points a variable
      {
        if (n==logId)
 80129b0:	89bb      	ldrh	r3, [r7, #12]
 80129b2:	89fa      	ldrh	r2, [r7, #14]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d00b      	beq.n	80129d0 <logTOCProcess+0x2f0>
          break;
        n++;
 80129b8:	89fb      	ldrh	r3, [r7, #14]
 80129ba:	3301      	adds	r3, #1
 80129bc:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	3301      	adds	r3, #1
 80129c2:	617b      	str	r3, [r7, #20]
 80129c4:	4b42      	ldr	r3, [pc, #264]	; (8012ad0 <logTOCProcess+0x3f0>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	697a      	ldr	r2, [r7, #20]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	dbb0      	blt.n	8012930 <logTOCProcess+0x250>
 80129ce:	e000      	b.n	80129d2 <logTOCProcess+0x2f2>
          break;
 80129d0:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 80129d2:	4b3f      	ldr	r3, [pc, #252]	; (8012ad0 <logTOCProcess+0x3f0>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	697a      	ldr	r2, [r7, #20]
 80129d8:	429a      	cmp	r2, r3
 80129da:	da67      	bge.n	8012aac <logTOCProcess+0x3cc>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80129dc:	4b3d      	ldr	r3, [pc, #244]	; (8012ad4 <logTOCProcess+0x3f4>)
 80129de:	2250      	movs	r2, #80	; 0x50
 80129e0:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 80129e2:	4b3c      	ldr	r3, [pc, #240]	; (8012ad4 <logTOCProcess+0x3f4>)
 80129e4:	2202      	movs	r2, #2
 80129e6:	709a      	strb	r2, [r3, #2]
 80129e8:	89bb      	ldrh	r3, [r7, #12]
      memcpy(&p.data[1], &logId, 2);
 80129ea:	4a3a      	ldr	r2, [pc, #232]	; (8012ad4 <logTOCProcess+0x3f4>)
 80129ec:	f8a2 3003 	strh.w	r3, [r2, #3]
      p.data[3]=logGetType(ptr);
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4618      	mov	r0, r3
 80129f6:	f001 f85d 	bl	8013ab4 <logGetType>
 80129fa:	4603      	mov	r3, r0
 80129fc:	b2da      	uxtb	r2, r3
 80129fe:	4b35      	ldr	r3, [pc, #212]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012a00:	715a      	strb	r2, [r3, #5]
      p.size=4+2+strlen(group)+strlen(logs[ptr].name);
 8012a02:	6938      	ldr	r0, [r7, #16]
 8012a04:	f7ed fc44 	bl	8000290 <strlen>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	b2dc      	uxtb	r4, r3
 8012a0c:	4b32      	ldr	r3, [pc, #200]	; (8012ad8 <logTOCProcess+0x3f8>)
 8012a0e:	6819      	ldr	r1, [r3, #0]
 8012a10:	697a      	ldr	r2, [r7, #20]
 8012a12:	4613      	mov	r3, r2
 8012a14:	005b      	lsls	r3, r3, #1
 8012a16:	4413      	add	r3, r2
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	440b      	add	r3, r1
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7ed fc36 	bl	8000290 <strlen>
 8012a24:	4603      	mov	r3, r0
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	4423      	add	r3, r4
 8012a2a:	b2db      	uxtb	r3, r3
 8012a2c:	3306      	adds	r3, #6
 8012a2e:	b2da      	uxtb	r2, r3
 8012a30:	4b28      	ldr	r3, [pc, #160]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012a32:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8012a34:	4b27      	ldr	r3, [pc, #156]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b1e      	cmp	r3, #30
 8012a3a:	d905      	bls.n	8012a48 <logTOCProcess+0x368>
 8012a3c:	f240 1271 	movw	r2, #369	; 0x171
 8012a40:	4926      	ldr	r1, [pc, #152]	; (8012adc <logTOCProcess+0x3fc>)
 8012a42:	4827      	ldr	r0, [pc, #156]	; (8012ae0 <logTOCProcess+0x400>)
 8012a44:	f7ff faf2 	bl	801202c <assertFail>
      memcpy(p.data+4, group, strlen(group)+1);
 8012a48:	4c26      	ldr	r4, [pc, #152]	; (8012ae4 <logTOCProcess+0x404>)
 8012a4a:	6938      	ldr	r0, [r7, #16]
 8012a4c:	f7ed fc20 	bl	8000290 <strlen>
 8012a50:	4603      	mov	r3, r0
 8012a52:	3301      	adds	r3, #1
 8012a54:	461a      	mov	r2, r3
 8012a56:	6939      	ldr	r1, [r7, #16]
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f012 f98c 	bl	8024d76 <memcpy>
      memcpy(p.data+4+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 8012a5e:	6938      	ldr	r0, [r7, #16]
 8012a60:	f7ed fc16 	bl	8000290 <strlen>
 8012a64:	4603      	mov	r3, r0
 8012a66:	3305      	adds	r3, #5
 8012a68:	4a1f      	ldr	r2, [pc, #124]	; (8012ae8 <logTOCProcess+0x408>)
 8012a6a:	189c      	adds	r4, r3, r2
 8012a6c:	4b1a      	ldr	r3, [pc, #104]	; (8012ad8 <logTOCProcess+0x3f8>)
 8012a6e:	6819      	ldr	r1, [r3, #0]
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	4613      	mov	r3, r2
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	4413      	add	r3, r2
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	440b      	add	r3, r1
 8012a7c:	685d      	ldr	r5, [r3, #4]
 8012a7e:	4b16      	ldr	r3, [pc, #88]	; (8012ad8 <logTOCProcess+0x3f8>)
 8012a80:	6819      	ldr	r1, [r3, #0]
 8012a82:	697a      	ldr	r2, [r7, #20]
 8012a84:	4613      	mov	r3, r2
 8012a86:	005b      	lsls	r3, r3, #1
 8012a88:	4413      	add	r3, r2
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	440b      	add	r3, r1
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7ed fbfd 	bl	8000290 <strlen>
 8012a96:	4603      	mov	r3, r0
 8012a98:	3301      	adds	r3, #1
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	4629      	mov	r1, r5
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f012 f969 	bl	8024d76 <memcpy>
      crtpSendPacketBlock(&p);
 8012aa4:	480b      	ldr	r0, [pc, #44]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012aa6:	f7ee fcfd 	bl	80014a4 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM_V2;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 8012aaa:	e00b      	b.n	8012ac4 <logTOCProcess+0x3e4>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8012aac:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012aae:	2250      	movs	r2, #80	; 0x50
 8012ab0:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 8012ab2:	4b08      	ldr	r3, [pc, #32]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	709a      	strb	r2, [r3, #2]
      p.size=1;
 8012ab8:	4b06      	ldr	r3, [pc, #24]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012aba:	2201      	movs	r2, #1
 8012abc:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 8012abe:	4805      	ldr	r0, [pc, #20]	; (8012ad4 <logTOCProcess+0x3f4>)
 8012ac0:	f7ee fcf0 	bl	80014a4 <crtpSendPacketBlock>
    break;
 8012ac4:	bf00      	nop
  }
}
 8012ac6:	bf00      	nop
 8012ac8:	3718      	adds	r7, #24
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bdb0      	pop	{r4, r5, r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	2000be54 	.word	0x2000be54
 8012ad4:	2000be60 	.word	0x2000be60
 8012ad8:	2000be50 	.word	0x2000be50
 8012adc:	0802d5f8 	.word	0x0802d5f8
 8012ae0:	0802d640 	.word	0x0802d640
 8012ae4:	2000be66 	.word	0x2000be66
 8012ae8:	2000be62 	.word	0x2000be62

08012aec <logControlProcess>:

void logControlProcess()
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
  int ret = ENOEXEC;
 8012af2:	2308      	movs	r3, #8
 8012af4:	607b      	str	r3, [r7, #4]

  switch(p.data[0])
 8012af6:	4b40      	ldr	r3, [pc, #256]	; (8012bf8 <logControlProcess+0x10c>)
 8012af8:	789b      	ldrb	r3, [r3, #2]
 8012afa:	2b07      	cmp	r3, #7
 8012afc:	d86e      	bhi.n	8012bdc <logControlProcess+0xf0>
 8012afe:	a201      	add	r2, pc, #4	; (adr r2, 8012b04 <logControlProcess+0x18>)
 8012b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b04:	08012b25 	.word	0x08012b25
 8012b08:	08012b3d 	.word	0x08012b3d
 8012b0c:	08012b57 	.word	0x08012b57
 8012b10:	08012b65 	.word	0x08012b65
 8012b14:	08012b83 	.word	0x08012b83
 8012b18:	08012b91 	.word	0x08012b91
 8012b1c:	08012b9b 	.word	0x08012b9b
 8012b20:	08012bbb 	.word	0x08012bbb
  {
    case CONTROL_CREATE_BLOCK:
      ret = logCreateBlock( p.data[1],
 8012b24:	4b34      	ldr	r3, [pc, #208]	; (8012bf8 <logControlProcess+0x10c>)
 8012b26:	78db      	ldrb	r3, [r3, #3]
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8012b28:	4a33      	ldr	r2, [pc, #204]	; (8012bf8 <logControlProcess+0x10c>)
 8012b2a:	7812      	ldrb	r2, [r2, #0]
 8012b2c:	3a02      	subs	r2, #2
 8012b2e:	0852      	lsrs	r2, r2, #1
      ret = logCreateBlock( p.data[1],
 8012b30:	4932      	ldr	r1, [pc, #200]	; (8012bfc <logControlProcess+0x110>)
 8012b32:	4618      	mov	r0, r3
 8012b34:	f000 f866 	bl	8012c04 <logCreateBlock>
 8012b38:	6078      	str	r0, [r7, #4]
      break;
 8012b3a:	e04f      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK:
      ret = logAppendBlock( p.data[1],
 8012b3c:	4b2e      	ldr	r3, [pc, #184]	; (8012bf8 <logControlProcess+0x10c>)
 8012b3e:	78db      	ldrb	r3, [r3, #3]
 8012b40:	4618      	mov	r0, r3
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8012b42:	4b2d      	ldr	r3, [pc, #180]	; (8012bf8 <logControlProcess+0x10c>)
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	3b02      	subs	r3, #2
 8012b48:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlock( p.data[1],
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	492b      	ldr	r1, [pc, #172]	; (8012bfc <logControlProcess+0x110>)
 8012b4e:	f000 f985 	bl	8012e5c <logAppendBlock>
 8012b52:	6078      	str	r0, [r7, #4]
      break;
 8012b54:	e042      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_DELETE_BLOCK:
      ret = logDeleteBlock( p.data[1] );
 8012b56:	4b28      	ldr	r3, [pc, #160]	; (8012bf8 <logControlProcess+0x10c>)
 8012b58:	78db      	ldrb	r3, [r3, #3]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f000 fb3a 	bl	80131d4 <logDeleteBlock>
 8012b60:	6078      	str	r0, [r7, #4]
      break;
 8012b62:	e03b      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_START_BLOCK:
      ret = logStartBlock( p.data[1], p.data[2]*10);
 8012b64:	4b24      	ldr	r3, [pc, #144]	; (8012bf8 <logControlProcess+0x10c>)
 8012b66:	78db      	ldrb	r3, [r3, #3]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	4b23      	ldr	r3, [pc, #140]	; (8012bf8 <logControlProcess+0x10c>)
 8012b6c:	791b      	ldrb	r3, [r3, #4]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	4613      	mov	r3, r2
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	4413      	add	r3, r2
 8012b76:	005b      	lsls	r3, r3, #1
 8012b78:	4619      	mov	r1, r3
 8012b7a:	f000 fba9 	bl	80132d0 <logStartBlock>
 8012b7e:	6078      	str	r0, [r7, #4]
      break;
 8012b80:	e02c      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_STOP_BLOCK:
      ret = logStopBlock( p.data[1] );
 8012b82:	4b1d      	ldr	r3, [pc, #116]	; (8012bf8 <logControlProcess+0x10c>)
 8012b84:	78db      	ldrb	r3, [r3, #3]
 8012b86:	4618      	mov	r0, r3
 8012b88:	f000 fbfe 	bl	8013388 <logStopBlock>
 8012b8c:	6078      	str	r0, [r7, #4]
      break;
 8012b8e:	e025      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_RESET:
      logReset();
 8012b90:	f000 ff30 	bl	80139f4 <logReset>
      ret = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	607b      	str	r3, [r7, #4]
      break;
 8012b98:	e020      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_CREATE_BLOCK_V2:
      ret = logCreateBlockV2( p.data[1],
 8012b9a:	4b17      	ldr	r3, [pc, #92]	; (8012bf8 <logControlProcess+0x10c>)
 8012b9c:	78d8      	ldrb	r0, [r3, #3]
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 8012b9e:	4b16      	ldr	r3, [pc, #88]	; (8012bf8 <logControlProcess+0x10c>)
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	3b02      	subs	r3, #2
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	4b16      	ldr	r3, [pc, #88]	; (8012c00 <logControlProcess+0x114>)
 8012ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8012bac:	085b      	lsrs	r3, r3, #1
      ret = logCreateBlockV2( p.data[1],
 8012bae:	461a      	mov	r2, r3
 8012bb0:	4912      	ldr	r1, [pc, #72]	; (8012bfc <logControlProcess+0x110>)
 8012bb2:	f000 f8bd 	bl	8012d30 <logCreateBlockV2>
 8012bb6:	6078      	str	r0, [r7, #4]
      break;
 8012bb8:	e010      	b.n	8012bdc <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK_V2:
      ret = logAppendBlockV2( p.data[1],
 8012bba:	4b0f      	ldr	r3, [pc, #60]	; (8012bf8 <logControlProcess+0x10c>)
 8012bbc:	78db      	ldrb	r3, [r3, #3]
 8012bbe:	4618      	mov	r0, r3
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 8012bc0:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <logControlProcess+0x10c>)
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	3b02      	subs	r3, #2
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	4b0d      	ldr	r3, [pc, #52]	; (8012c00 <logControlProcess+0x114>)
 8012bca:	fba3 2302 	umull	r2, r3, r3, r2
 8012bce:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlockV2( p.data[1],
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	490a      	ldr	r1, [pc, #40]	; (8012bfc <logControlProcess+0x110>)
 8012bd4:	f000 fa16 	bl	8013004 <logAppendBlockV2>
 8012bd8:	6078      	str	r0, [r7, #4]
      break;
 8012bda:	bf00      	nop
  }

  //Commands answer
  p.data[2] = ret;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	b2da      	uxtb	r2, r3
 8012be0:	4b05      	ldr	r3, [pc, #20]	; (8012bf8 <logControlProcess+0x10c>)
 8012be2:	711a      	strb	r2, [r3, #4]
  p.size = 3;
 8012be4:	4b04      	ldr	r3, [pc, #16]	; (8012bf8 <logControlProcess+0x10c>)
 8012be6:	2203      	movs	r2, #3
 8012be8:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(&p);
 8012bea:	4803      	ldr	r0, [pc, #12]	; (8012bf8 <logControlProcess+0x10c>)
 8012bec:	f7ee fc5a 	bl	80014a4 <crtpSendPacketBlock>
}
 8012bf0:	bf00      	nop
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	2000be60 	.word	0x2000be60
 8012bfc:	2000be64 	.word	0x2000be64
 8012c00:	aaaaaaab 	.word	0xaaaaaaab

08012c04 <logCreateBlock>:

static int logCreateBlock(unsigned char id, struct ops_setting * settings, int len)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b088      	sub	sp, #32
 8012c08:	af02      	add	r7, sp, #8
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	607a      	str	r2, [r7, #4]
 8012c10:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012c12:	2300      	movs	r3, #0
 8012c14:	617b      	str	r3, [r7, #20]
 8012c16:	e00f      	b.n	8012c38 <logCreateBlock+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 8012c18:	7bf9      	ldrb	r1, [r7, #15]
 8012c1a:	4842      	ldr	r0, [pc, #264]	; (8012d24 <logCreateBlock+0x120>)
 8012c1c:	697a      	ldr	r2, [r7, #20]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	011b      	lsls	r3, r3, #4
 8012c22:	1a9b      	subs	r3, r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	4403      	add	r3, r0
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4299      	cmp	r1, r3
 8012c2c:	d101      	bne.n	8012c32 <logCreateBlock+0x2e>
 8012c2e:	2311      	movs	r3, #17
 8012c30:	e074      	b.n	8012d1c <logCreateBlock+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	3301      	adds	r3, #1
 8012c36:	617b      	str	r3, [r7, #20]
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	2b0f      	cmp	r3, #15
 8012c3c:	ddec      	ble.n	8012c18 <logCreateBlock+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012c3e:	2300      	movs	r3, #0
 8012c40:	617b      	str	r3, [r7, #20]
 8012c42:	e00d      	b.n	8012c60 <logCreateBlock+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8012c44:	4937      	ldr	r1, [pc, #220]	; (8012d24 <logCreateBlock+0x120>)
 8012c46:	697a      	ldr	r2, [r7, #20]
 8012c48:	4613      	mov	r3, r2
 8012c4a:	011b      	lsls	r3, r3, #4
 8012c4c:	1a9b      	subs	r3, r3, r2
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	440b      	add	r3, r1
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c58:	d006      	beq.n	8012c68 <logCreateBlock+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	617b      	str	r3, [r7, #20]
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	2b0f      	cmp	r3, #15
 8012c64:	ddee      	ble.n	8012c44 <logCreateBlock+0x40>
 8012c66:	e000      	b.n	8012c6a <logCreateBlock+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8012c68:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	2b10      	cmp	r3, #16
 8012c6e:	d101      	bne.n	8012c74 <logCreateBlock+0x70>
    return ENOMEM;
 8012c70:	230c      	movs	r3, #12
 8012c72:	e053      	b.n	8012d1c <logCreateBlock+0x118>

  logBlocks[i].id = id;
 8012c74:	7bf9      	ldrb	r1, [r7, #15]
 8012c76:	482b      	ldr	r0, [pc, #172]	; (8012d24 <logCreateBlock+0x120>)
 8012c78:	697a      	ldr	r2, [r7, #20]
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	011b      	lsls	r3, r3, #4
 8012c7e:	1a9b      	subs	r3, r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	4403      	add	r3, r0
 8012c84:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 8012c86:	697a      	ldr	r2, [r7, #20]
 8012c88:	4613      	mov	r3, r2
 8012c8a:	011b      	lsls	r3, r3, #4
 8012c8c:	1a9b      	subs	r3, r3, r2
 8012c8e:	009b      	lsls	r3, r3, #2
 8012c90:	4a24      	ldr	r2, [pc, #144]	; (8012d24 <logCreateBlock+0x120>)
 8012c92:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	4613      	mov	r3, r2
 8012c98:	011b      	lsls	r3, r3, #4
 8012c9a:	1a9b      	subs	r3, r3, r2
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	3308      	adds	r3, #8
 8012ca0:	4a20      	ldr	r2, [pc, #128]	; (8012d24 <logCreateBlock+0x120>)
 8012ca2:	4413      	add	r3, r2
 8012ca4:	9301      	str	r3, [sp, #4]
 8012ca6:	4b20      	ldr	r3, [pc, #128]	; (8012d28 <logCreateBlock+0x124>)
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	460b      	mov	r3, r1
 8012cac:	2201      	movs	r2, #1
 8012cae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012cb2:	481e      	ldr	r0, [pc, #120]	; (8012d2c <logCreateBlock+0x128>)
 8012cb4:	f00f f884 	bl	8021dc0 <xTimerCreateStatic>
 8012cb8:	4601      	mov	r1, r0
 8012cba:	481a      	ldr	r0, [pc, #104]	; (8012d24 <logCreateBlock+0x120>)
 8012cbc:	697a      	ldr	r2, [r7, #20]
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	011b      	lsls	r3, r3, #4
 8012cc2:	1a9b      	subs	r3, r3, r2
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	4403      	add	r3, r0
 8012cc8:	3304      	adds	r3, #4
 8012cca:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 8012ccc:	4915      	ldr	r1, [pc, #84]	; (8012d24 <logCreateBlock+0x120>)
 8012cce:	697a      	ldr	r2, [r7, #20]
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	011b      	lsls	r3, r3, #4
 8012cd4:	1a9b      	subs	r3, r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	440b      	add	r3, r1
 8012cda:	3338      	adds	r3, #56	; 0x38
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 8012ce0:	4910      	ldr	r1, [pc, #64]	; (8012d24 <logCreateBlock+0x120>)
 8012ce2:	697a      	ldr	r2, [r7, #20]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	011b      	lsls	r3, r3, #4
 8012ce8:	1a9b      	subs	r3, r3, r2
 8012cea:	009b      	lsls	r3, r3, #2
 8012cec:	440b      	add	r3, r1
 8012cee:	3304      	adds	r3, #4
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d10b      	bne.n	8012d0e <logCreateBlock+0x10a>
  {
	logBlocks[i].id = BLOCK_ID_FREE;
 8012cf6:	490b      	ldr	r1, [pc, #44]	; (8012d24 <logCreateBlock+0x120>)
 8012cf8:	697a      	ldr	r2, [r7, #20]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	011b      	lsls	r3, r3, #4
 8012cfe:	1a9b      	subs	r3, r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	440b      	add	r3, r1
 8012d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d08:	601a      	str	r2, [r3, #0]
	return ENOMEM;
 8012d0a:	230c      	movs	r3, #12
 8012d0c:	e006      	b.n	8012d1c <logCreateBlock+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlock(id, settings, len);
 8012d0e:	7bfb      	ldrb	r3, [r7, #15]
 8012d10:	687a      	ldr	r2, [r7, #4]
 8012d12:	68b9      	ldr	r1, [r7, #8]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f000 f8a1 	bl	8012e5c <logAppendBlock>
 8012d1a:	4603      	mov	r3, r0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3718      	adds	r7, #24
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	200059c0 	.word	0x200059c0
 8012d28:	080133f9 	.word	0x080133f9
 8012d2c:	0802d660 	.word	0x0802d660

08012d30 <logCreateBlockV2>:

static int logCreateBlockV2(unsigned char id, struct ops_setting_v2 * settings, int len)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b088      	sub	sp, #32
 8012d34:	af02      	add	r7, sp, #8
 8012d36:	4603      	mov	r3, r0
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	607a      	str	r2, [r7, #4]
 8012d3c:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012d3e:	2300      	movs	r3, #0
 8012d40:	617b      	str	r3, [r7, #20]
 8012d42:	e00f      	b.n	8012d64 <logCreateBlockV2+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 8012d44:	7bf9      	ldrb	r1, [r7, #15]
 8012d46:	4842      	ldr	r0, [pc, #264]	; (8012e50 <logCreateBlockV2+0x120>)
 8012d48:	697a      	ldr	r2, [r7, #20]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	011b      	lsls	r3, r3, #4
 8012d4e:	1a9b      	subs	r3, r3, r2
 8012d50:	009b      	lsls	r3, r3, #2
 8012d52:	4403      	add	r3, r0
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	4299      	cmp	r1, r3
 8012d58:	d101      	bne.n	8012d5e <logCreateBlockV2+0x2e>
 8012d5a:	2311      	movs	r3, #17
 8012d5c:	e074      	b.n	8012e48 <logCreateBlockV2+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	3301      	adds	r3, #1
 8012d62:	617b      	str	r3, [r7, #20]
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	2b0f      	cmp	r3, #15
 8012d68:	ddec      	ble.n	8012d44 <logCreateBlockV2+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	617b      	str	r3, [r7, #20]
 8012d6e:	e00d      	b.n	8012d8c <logCreateBlockV2+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8012d70:	4937      	ldr	r1, [pc, #220]	; (8012e50 <logCreateBlockV2+0x120>)
 8012d72:	697a      	ldr	r2, [r7, #20]
 8012d74:	4613      	mov	r3, r2
 8012d76:	011b      	lsls	r3, r3, #4
 8012d78:	1a9b      	subs	r3, r3, r2
 8012d7a:	009b      	lsls	r3, r3, #2
 8012d7c:	440b      	add	r3, r1
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d84:	d006      	beq.n	8012d94 <logCreateBlockV2+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	617b      	str	r3, [r7, #20]
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	2b0f      	cmp	r3, #15
 8012d90:	ddee      	ble.n	8012d70 <logCreateBlockV2+0x40>
 8012d92:	e000      	b.n	8012d96 <logCreateBlockV2+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8012d94:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	2b10      	cmp	r3, #16
 8012d9a:	d101      	bne.n	8012da0 <logCreateBlockV2+0x70>
    return ENOMEM;
 8012d9c:	230c      	movs	r3, #12
 8012d9e:	e053      	b.n	8012e48 <logCreateBlockV2+0x118>

  logBlocks[i].id = id;
 8012da0:	7bf9      	ldrb	r1, [r7, #15]
 8012da2:	482b      	ldr	r0, [pc, #172]	; (8012e50 <logCreateBlockV2+0x120>)
 8012da4:	697a      	ldr	r2, [r7, #20]
 8012da6:	4613      	mov	r3, r2
 8012da8:	011b      	lsls	r3, r3, #4
 8012daa:	1a9b      	subs	r3, r3, r2
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	4403      	add	r3, r0
 8012db0:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	4613      	mov	r3, r2
 8012db6:	011b      	lsls	r3, r3, #4
 8012db8:	1a9b      	subs	r3, r3, r2
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	4a24      	ldr	r2, [pc, #144]	; (8012e50 <logCreateBlockV2+0x120>)
 8012dbe:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 8012dc0:	697a      	ldr	r2, [r7, #20]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	011b      	lsls	r3, r3, #4
 8012dc6:	1a9b      	subs	r3, r3, r2
 8012dc8:	009b      	lsls	r3, r3, #2
 8012dca:	3308      	adds	r3, #8
 8012dcc:	4a20      	ldr	r2, [pc, #128]	; (8012e50 <logCreateBlockV2+0x120>)
 8012dce:	4413      	add	r3, r2
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	4b20      	ldr	r3, [pc, #128]	; (8012e54 <logCreateBlockV2+0x124>)
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	2201      	movs	r2, #1
 8012dda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012dde:	481e      	ldr	r0, [pc, #120]	; (8012e58 <logCreateBlockV2+0x128>)
 8012de0:	f00e ffee 	bl	8021dc0 <xTimerCreateStatic>
 8012de4:	4601      	mov	r1, r0
 8012de6:	481a      	ldr	r0, [pc, #104]	; (8012e50 <logCreateBlockV2+0x120>)
 8012de8:	697a      	ldr	r2, [r7, #20]
 8012dea:	4613      	mov	r3, r2
 8012dec:	011b      	lsls	r3, r3, #4
 8012dee:	1a9b      	subs	r3, r3, r2
 8012df0:	009b      	lsls	r3, r3, #2
 8012df2:	4403      	add	r3, r0
 8012df4:	3304      	adds	r3, #4
 8012df6:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 8012df8:	4915      	ldr	r1, [pc, #84]	; (8012e50 <logCreateBlockV2+0x120>)
 8012dfa:	697a      	ldr	r2, [r7, #20]
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	011b      	lsls	r3, r3, #4
 8012e00:	1a9b      	subs	r3, r3, r2
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	440b      	add	r3, r1
 8012e06:	3338      	adds	r3, #56	; 0x38
 8012e08:	2200      	movs	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 8012e0c:	4910      	ldr	r1, [pc, #64]	; (8012e50 <logCreateBlockV2+0x120>)
 8012e0e:	697a      	ldr	r2, [r7, #20]
 8012e10:	4613      	mov	r3, r2
 8012e12:	011b      	lsls	r3, r3, #4
 8012e14:	1a9b      	subs	r3, r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	440b      	add	r3, r1
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d10b      	bne.n	8012e3a <logCreateBlockV2+0x10a>
  {
  logBlocks[i].id = BLOCK_ID_FREE;
 8012e22:	490b      	ldr	r1, [pc, #44]	; (8012e50 <logCreateBlockV2+0x120>)
 8012e24:	697a      	ldr	r2, [r7, #20]
 8012e26:	4613      	mov	r3, r2
 8012e28:	011b      	lsls	r3, r3, #4
 8012e2a:	1a9b      	subs	r3, r3, r2
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	440b      	add	r3, r1
 8012e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e34:	601a      	str	r2, [r3, #0]
  return ENOMEM;
 8012e36:	230c      	movs	r3, #12
 8012e38:	e006      	b.n	8012e48 <logCreateBlockV2+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlockV2(id, settings, len);
 8012e3a:	7bfb      	ldrb	r3, [r7, #15]
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	68b9      	ldr	r1, [r7, #8]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f000 f8df 	bl	8013004 <logAppendBlockV2>
 8012e46:	4603      	mov	r3, r0
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	200059c0 	.word	0x200059c0
 8012e54:	080133f9 	.word	0x080133f9
 8012e58:	0802d660 	.word	0x0802d660

08012e5c <logAppendBlock>:
static void opsFree(struct log_ops * ops);
static void blockAppendOps(struct log_block * block, struct log_ops * ops);
static int variableGetIndex(int id);

static int logAppendBlock(int id, struct ops_setting * settings, int len)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b08a      	sub	sp, #40	; 0x28
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012e68:	2300      	movs	r3, #0
 8012e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012e6c:	e00d      	b.n	8012e8a <logAppendBlock+0x2e>
    if (logBlocks[i].id == id) break;
 8012e6e:	4962      	ldr	r1, [pc, #392]	; (8012ff8 <logAppendBlock+0x19c>)
 8012e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e72:	4613      	mov	r3, r2
 8012e74:	011b      	lsls	r3, r3, #4
 8012e76:	1a9b      	subs	r3, r3, r2
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	440b      	add	r3, r1
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	68fa      	ldr	r2, [r7, #12]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d006      	beq.n	8012e92 <logAppendBlock+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8012e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e86:	3301      	adds	r3, #1
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24
 8012e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8c:	2b0f      	cmp	r3, #15
 8012e8e:	ddee      	ble.n	8012e6e <logAppendBlock+0x12>
 8012e90:	e000      	b.n	8012e94 <logAppendBlock+0x38>
    if (logBlocks[i].id == id) break;
 8012e92:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	2b0f      	cmp	r3, #15
 8012e98:	dd01      	ble.n	8012e9e <logAppendBlock+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 8012e9a:	2302      	movs	r3, #2
 8012e9c:	e0a8      	b.n	8012ff0 <logAppendBlock+0x194>
  }

  block = &logBlocks[i];
 8012e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ea0:	4613      	mov	r3, r2
 8012ea2:	011b      	lsls	r3, r3, #4
 8012ea4:	1a9b      	subs	r3, r3, r2
 8012ea6:	009b      	lsls	r3, r3, #2
 8012ea8:	4a53      	ldr	r2, [pc, #332]	; (8012ff8 <logAppendBlock+0x19c>)
 8012eaa:	4413      	add	r3, r2
 8012eac:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 8012eae:	2300      	movs	r3, #0
 8012eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8012eb2:	e097      	b.n	8012fe4 <logAppendBlock+0x188>
  {
    int currentLength = blockCalcLength(block);
 8012eb4:	6a38      	ldr	r0, [r7, #32]
 8012eb6:	f000 fd53 	bl	8013960 <blockCalcLength>
 8012eba:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 8012ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ebe:	005b      	lsls	r3, r3, #1
 8012ec0:	68ba      	ldr	r2, [r7, #8]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	f003 030f 	and.w	r3, r3, #15
 8012eca:	4a4c      	ldr	r2, [pc, #304]	; (8012ffc <logAppendBlock+0x1a0>)
 8012ecc:	5cd3      	ldrb	r3, [r2, r3]
 8012ece:	461a      	mov	r2, r3
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	2b1a      	cmp	r3, #26
 8012ed6:	dd01      	ble.n	8012edc <logAppendBlock+0x80>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 8012ed8:	2307      	movs	r3, #7
 8012eda:	e089      	b.n	8012ff0 <logAppendBlock+0x194>
    }

    ops = opsMalloc();
 8012edc:	f000 fd0a 	bl	80138f4 <opsMalloc>
 8012ee0:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d101      	bne.n	8012eec <logAppendBlock+0x90>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 8012ee8:	230c      	movs	r3, #12
 8012eea:	e081      	b.n	8012ff0 <logAppendBlock+0x194>
    }

    if (settings[i].id != 255)  //TOC variable
 8012eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eee:	005b      	lsls	r3, r3, #1
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	785b      	ldrb	r3, [r3, #1]
 8012ef6:	2bff      	cmp	r3, #255	; 0xff
 8012ef8:	d044      	beq.n	8012f84 <logAppendBlock+0x128>
    {
      varId = variableGetIndex(settings[i].id);
 8012efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efc:	005b      	lsls	r3, r3, #1
 8012efe:	68ba      	ldr	r2, [r7, #8]
 8012f00:	4413      	add	r3, r2
 8012f02:	785b      	ldrb	r3, [r3, #1]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f000 fcbb 	bl	8013880 <variableGetIndex>
 8012f0a:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	da01      	bge.n	8012f16 <logAppendBlock+0xba>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 8012f12:	2302      	movs	r3, #2
 8012f14:	e06c      	b.n	8012ff0 <logAppendBlock+0x194>
      }

      ops->variable    = logs[varId].address;
 8012f16:	4b3a      	ldr	r3, [pc, #232]	; (8013000 <logAppendBlock+0x1a4>)
 8012f18:	6819      	ldr	r1, [r3, #0]
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	005b      	lsls	r3, r3, #1
 8012f20:	4413      	add	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	440b      	add	r3, r1
 8012f26:	689a      	ldr	r2, [r3, #8]
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	4618      	mov	r0, r3
 8012f32:	f000 fdbf 	bl	8013ab4 <logGetType>
 8012f36:	4603      	mov	r3, r0
 8012f38:	f003 030f 	and.w	r3, r3, #15
 8012f3c:	b2d9      	uxtb	r1, r3
 8012f3e:	69ba      	ldr	r2, [r7, #24]
 8012f40:	7913      	ldrb	r3, [r2, #4]
 8012f42:	f361 0303 	bfi	r3, r1, #0, #4
 8012f46:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8012f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4a:	005b      	lsls	r3, r3, #1
 8012f4c:	68ba      	ldr	r2, [r7, #8]
 8012f4e:	4413      	add	r3, r2
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	f003 030f 	and.w	r3, r3, #15
 8012f56:	b2d9      	uxtb	r1, r3
 8012f58:	69ba      	ldr	r2, [r7, #24]
 8012f5a:	7913      	ldrb	r3, [r2, #4]
 8012f5c:	f361 1307 	bfi	r3, r1, #4, #4
 8012f60:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 8012f62:	4b27      	ldr	r3, [pc, #156]	; (8013000 <logAppendBlock+0x1a4>)
 8012f64:	6819      	ldr	r1, [r3, #0]
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	4613      	mov	r3, r2
 8012f6a:	005b      	lsls	r3, r3, #1
 8012f6c:	4413      	add	r3, r2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	440b      	add	r3, r1
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 fdb5 	bl	8013ae4 <acquisitionTypeFromLogType>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	731a      	strb	r2, [r3, #12]
 8012f82:	e028      	b.n	8012fd6 <logAppendBlock+0x17a>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 8012f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f86:	3301      	adds	r3, #1
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	68ba      	ldr	r2, [r7, #8]
 8012f8c:	441a      	add	r2, r3
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 8012f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	4413      	add	r3, r2
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	091b      	lsrs	r3, r3, #4
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	f003 030f 	and.w	r3, r3, #15
 8012fa4:	b2d9      	uxtb	r1, r3
 8012fa6:	69ba      	ldr	r2, [r7, #24]
 8012fa8:	7913      	ldrb	r3, [r2, #4]
 8012faa:	f361 0303 	bfi	r3, r1, #0, #4
 8012fae:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb2:	005b      	lsls	r3, r3, #1
 8012fb4:	68ba      	ldr	r2, [r7, #8]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	f003 030f 	and.w	r3, r3, #15
 8012fbe:	b2d9      	uxtb	r1, r3
 8012fc0:	69ba      	ldr	r2, [r7, #24]
 8012fc2:	7913      	ldrb	r3, [r2, #4]
 8012fc4:	f361 1307 	bfi	r3, r1, #4, #4
 8012fc8:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	731a      	strb	r2, [r3, #12]
      i += 2;
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd2:	3302      	adds	r3, #2
 8012fd4:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 8012fd6:	69b9      	ldr	r1, [r7, #24]
 8012fd8:	6a38      	ldr	r0, [r7, #32]
 8012fda:	f000 fce7 	bl	80139ac <blockAppendOps>
  for (i=0; i<len; i++)
 8012fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8012fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	f6ff af63 	blt.w	8012eb4 <logAppendBlock+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3728      	adds	r7, #40	; 0x28
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	200059c0 	.word	0x200059c0
 8012ffc:	0802f07c 	.word	0x0802f07c
 8013000:	2000be50 	.word	0x2000be50

08013004 <logAppendBlockV2>:

static int logAppendBlockV2(int id, struct ops_setting_v2 * settings, int len)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b08a      	sub	sp, #40	; 0x28
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8013010:	2300      	movs	r3, #0
 8013012:	627b      	str	r3, [r7, #36]	; 0x24
 8013014:	e00d      	b.n	8013032 <logAppendBlockV2+0x2e>
    if (logBlocks[i].id == id) break;
 8013016:	496c      	ldr	r1, [pc, #432]	; (80131c8 <logAppendBlockV2+0x1c4>)
 8013018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801301a:	4613      	mov	r3, r2
 801301c:	011b      	lsls	r3, r3, #4
 801301e:	1a9b      	subs	r3, r3, r2
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	440b      	add	r3, r1
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	68fa      	ldr	r2, [r7, #12]
 8013028:	429a      	cmp	r2, r3
 801302a:	d006      	beq.n	801303a <logAppendBlockV2+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 801302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302e:	3301      	adds	r3, #1
 8013030:	627b      	str	r3, [r7, #36]	; 0x24
 8013032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013034:	2b0f      	cmp	r3, #15
 8013036:	ddee      	ble.n	8013016 <logAppendBlockV2+0x12>
 8013038:	e000      	b.n	801303c <logAppendBlockV2+0x38>
    if (logBlocks[i].id == id) break;
 801303a:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 801303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303e:	2b0f      	cmp	r3, #15
 8013040:	dd01      	ble.n	8013046 <logAppendBlockV2+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 8013042:	2302      	movs	r3, #2
 8013044:	e0bc      	b.n	80131c0 <logAppendBlockV2+0x1bc>
  }

  block = &logBlocks[i];
 8013046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013048:	4613      	mov	r3, r2
 801304a:	011b      	lsls	r3, r3, #4
 801304c:	1a9b      	subs	r3, r3, r2
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	4a5d      	ldr	r2, [pc, #372]	; (80131c8 <logAppendBlockV2+0x1c4>)
 8013052:	4413      	add	r3, r2
 8013054:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 8013056:	2300      	movs	r3, #0
 8013058:	627b      	str	r3, [r7, #36]	; 0x24
 801305a:	e0ab      	b.n	80131b4 <logAppendBlockV2+0x1b0>
  {
    int currentLength = blockCalcLength(block);
 801305c:	6a38      	ldr	r0, [r7, #32]
 801305e:	f000 fc7f 	bl	8013960 <blockCalcLength>
 8013062:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 8013064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013066:	4613      	mov	r3, r2
 8013068:	005b      	lsls	r3, r3, #1
 801306a:	4413      	add	r3, r2
 801306c:	68ba      	ldr	r2, [r7, #8]
 801306e:	4413      	add	r3, r2
 8013070:	781b      	ldrb	r3, [r3, #0]
 8013072:	f003 030f 	and.w	r3, r3, #15
 8013076:	4a55      	ldr	r2, [pc, #340]	; (80131cc <logAppendBlockV2+0x1c8>)
 8013078:	5cd3      	ldrb	r3, [r2, r3]
 801307a:	461a      	mov	r2, r3
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	4413      	add	r3, r2
 8013080:	2b1a      	cmp	r3, #26
 8013082:	dd01      	ble.n	8013088 <logAppendBlockV2+0x84>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 8013084:	2307      	movs	r3, #7
 8013086:	e09b      	b.n	80131c0 <logAppendBlockV2+0x1bc>
    }

    ops = opsMalloc();
 8013088:	f000 fc34 	bl	80138f4 <opsMalloc>
 801308c:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d101      	bne.n	8013098 <logAppendBlockV2+0x94>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 8013094:	230c      	movs	r3, #12
 8013096:	e093      	b.n	80131c0 <logAppendBlockV2+0x1bc>
    }

    if (settings[i].id != 0xFFFFul)  //TOC variable
 8013098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801309a:	4613      	mov	r3, r2
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	4413      	add	r3, r2
 80130a0:	68ba      	ldr	r2, [r7, #8]
 80130a2:	4413      	add	r3, r2
 80130a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d04a      	beq.n	8013148 <logAppendBlockV2+0x144>
    {
      varId = variableGetIndex(settings[i].id);
 80130b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b4:	4613      	mov	r3, r2
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	4413      	add	r3, r2
 80130ba:	68ba      	ldr	r2, [r7, #8]
 80130bc:	4413      	add	r3, r2
 80130be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	4618      	mov	r0, r3
 80130c6:	f000 fbdb 	bl	8013880 <variableGetIndex>
 80130ca:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	da01      	bge.n	80130d6 <logAppendBlockV2+0xd2>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 80130d2:	2302      	movs	r3, #2
 80130d4:	e074      	b.n	80131c0 <logAppendBlockV2+0x1bc>
      }

      ops->variable    = logs[varId].address;
 80130d6:	4b3e      	ldr	r3, [pc, #248]	; (80131d0 <logAppendBlockV2+0x1cc>)
 80130d8:	6819      	ldr	r1, [r3, #0]
 80130da:	697a      	ldr	r2, [r7, #20]
 80130dc:	4613      	mov	r3, r2
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	4413      	add	r3, r2
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	440b      	add	r3, r1
 80130e6:	689a      	ldr	r2, [r3, #8]
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	4618      	mov	r0, r3
 80130f2:	f000 fcdf 	bl	8013ab4 <logGetType>
 80130f6:	4603      	mov	r3, r0
 80130f8:	f003 030f 	and.w	r3, r3, #15
 80130fc:	b2d9      	uxtb	r1, r3
 80130fe:	69ba      	ldr	r2, [r7, #24]
 8013100:	7913      	ldrb	r3, [r2, #4]
 8013102:	f361 0303 	bfi	r3, r1, #0, #4
 8013106:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8013108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801310a:	4613      	mov	r3, r2
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	4413      	add	r3, r2
 8013110:	68ba      	ldr	r2, [r7, #8]
 8013112:	4413      	add	r3, r2
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	f003 030f 	and.w	r3, r3, #15
 801311a:	b2d9      	uxtb	r1, r3
 801311c:	69ba      	ldr	r2, [r7, #24]
 801311e:	7913      	ldrb	r3, [r2, #4]
 8013120:	f361 1307 	bfi	r3, r1, #4, #4
 8013124:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 8013126:	4b2a      	ldr	r3, [pc, #168]	; (80131d0 <logAppendBlockV2+0x1cc>)
 8013128:	6819      	ldr	r1, [r3, #0]
 801312a:	697a      	ldr	r2, [r7, #20]
 801312c:	4613      	mov	r3, r2
 801312e:	005b      	lsls	r3, r3, #1
 8013130:	4413      	add	r3, r2
 8013132:	009b      	lsls	r3, r3, #2
 8013134:	440b      	add	r3, r1
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	4618      	mov	r0, r3
 801313a:	f000 fcd3 	bl	8013ae4 <acquisitionTypeFromLogType>
 801313e:	4603      	mov	r3, r0
 8013140:	461a      	mov	r2, r3
 8013142:	69bb      	ldr	r3, [r7, #24]
 8013144:	731a      	strb	r2, [r3, #12]
 8013146:	e02e      	b.n	80131a6 <logAppendBlockV2+0x1a2>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 8013148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	4613      	mov	r3, r2
 801314e:	005b      	lsls	r3, r3, #1
 8013150:	4413      	add	r3, r2
 8013152:	68ba      	ldr	r2, [r7, #8]
 8013154:	441a      	add	r2, r3
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 801315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801315c:	4613      	mov	r3, r2
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	4413      	add	r3, r2
 8013162:	68ba      	ldr	r2, [r7, #8]
 8013164:	4413      	add	r3, r2
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	091b      	lsrs	r3, r3, #4
 801316a:	b2db      	uxtb	r3, r3
 801316c:	f003 030f 	and.w	r3, r3, #15
 8013170:	b2d9      	uxtb	r1, r3
 8013172:	69ba      	ldr	r2, [r7, #24]
 8013174:	7913      	ldrb	r3, [r2, #4]
 8013176:	f361 0303 	bfi	r3, r1, #0, #4
 801317a:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 801317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801317e:	4613      	mov	r3, r2
 8013180:	005b      	lsls	r3, r3, #1
 8013182:	4413      	add	r3, r2
 8013184:	68ba      	ldr	r2, [r7, #8]
 8013186:	4413      	add	r3, r2
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	f003 030f 	and.w	r3, r3, #15
 801318e:	b2d9      	uxtb	r1, r3
 8013190:	69ba      	ldr	r2, [r7, #24]
 8013192:	7913      	ldrb	r3, [r2, #4]
 8013194:	f361 1307 	bfi	r3, r1, #4, #4
 8013198:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	2200      	movs	r2, #0
 801319e:	731a      	strb	r2, [r3, #12]
      i += 2;
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	3302      	adds	r3, #2
 80131a4:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 80131a6:	69b9      	ldr	r1, [r7, #24]
 80131a8:	6a38      	ldr	r0, [r7, #32]
 80131aa:	f000 fbff 	bl	80139ac <blockAppendOps>
  for (i=0; i<len; i++)
 80131ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b0:	3301      	adds	r3, #1
 80131b2:	627b      	str	r3, [r7, #36]	; 0x24
 80131b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	f6ff af4f 	blt.w	801305c <logAppendBlockV2+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 80131be:	2300      	movs	r3, #0
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3728      	adds	r7, #40	; 0x28
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	200059c0 	.word	0x200059c0
 80131cc:	0802f07c 	.word	0x0802f07c
 80131d0:	2000be50 	.word	0x2000be50

080131d4 <logDeleteBlock>:

static int logDeleteBlock(int id)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b088      	sub	sp, #32
 80131d8:	af02      	add	r7, sp, #8
 80131da:	6078      	str	r0, [r7, #4]
  int i;
  struct log_ops * ops;
  struct log_ops * opsNext;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80131dc:	2300      	movs	r3, #0
 80131de:	617b      	str	r3, [r7, #20]
 80131e0:	e00d      	b.n	80131fe <logDeleteBlock+0x2a>
    if (logBlocks[i].id == id) break;
 80131e2:	493a      	ldr	r1, [pc, #232]	; (80132cc <logDeleteBlock+0xf8>)
 80131e4:	697a      	ldr	r2, [r7, #20]
 80131e6:	4613      	mov	r3, r2
 80131e8:	011b      	lsls	r3, r3, #4
 80131ea:	1a9b      	subs	r3, r3, r2
 80131ec:	009b      	lsls	r3, r3, #2
 80131ee:	440b      	add	r3, r1
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d006      	beq.n	8013206 <logDeleteBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	3301      	adds	r3, #1
 80131fc:	617b      	str	r3, [r7, #20]
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	2b0f      	cmp	r3, #15
 8013202:	ddee      	ble.n	80131e2 <logDeleteBlock+0xe>
 8013204:	e000      	b.n	8013208 <logDeleteBlock+0x34>
    if (logBlocks[i].id == id) break;
 8013206:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	2b0f      	cmp	r3, #15
 801320c:	dd01      	ble.n	8013212 <logDeleteBlock+0x3e>
    LOG_ERROR("trying to delete block id %d that doesn't exist.", id);
    return ENOENT;
 801320e:	2302      	movs	r3, #2
 8013210:	e057      	b.n	80132c2 <logDeleteBlock+0xee>
  }

  ops = logBlocks[i].ops;
 8013212:	492e      	ldr	r1, [pc, #184]	; (80132cc <logDeleteBlock+0xf8>)
 8013214:	697a      	ldr	r2, [r7, #20]
 8013216:	4613      	mov	r3, r2
 8013218:	011b      	lsls	r3, r3, #4
 801321a:	1a9b      	subs	r3, r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	440b      	add	r3, r1
 8013220:	3338      	adds	r3, #56	; 0x38
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	613b      	str	r3, [r7, #16]
  while (ops)
 8013226:	e007      	b.n	8013238 <logDeleteBlock+0x64>
  {
    opsNext = ops->next;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	60fb      	str	r3, [r7, #12]
    opsFree(ops);
 801322e:	6938      	ldr	r0, [r7, #16]
 8013230:	f000 fb88 	bl	8013944 <opsFree>
    ops = opsNext;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	613b      	str	r3, [r7, #16]
  while (ops)
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d1f4      	bne.n	8013228 <logDeleteBlock+0x54>
  }

  if (logBlocks[i].timer != 0) {
 801323e:	4923      	ldr	r1, [pc, #140]	; (80132cc <logDeleteBlock+0xf8>)
 8013240:	697a      	ldr	r2, [r7, #20]
 8013242:	4613      	mov	r3, r2
 8013244:	011b      	lsls	r3, r3, #4
 8013246:	1a9b      	subs	r3, r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	440b      	add	r3, r1
 801324c:	3304      	adds	r3, #4
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d02b      	beq.n	80132ac <logDeleteBlock+0xd8>
    xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 8013254:	491d      	ldr	r1, [pc, #116]	; (80132cc <logDeleteBlock+0xf8>)
 8013256:	697a      	ldr	r2, [r7, #20]
 8013258:	4613      	mov	r3, r2
 801325a:	011b      	lsls	r3, r3, #4
 801325c:	1a9b      	subs	r3, r3, r2
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	440b      	add	r3, r1
 8013262:	3304      	adds	r3, #4
 8013264:	6818      	ldr	r0, [r3, #0]
 8013266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801326a:	9300      	str	r3, [sp, #0]
 801326c:	2300      	movs	r3, #0
 801326e:	2200      	movs	r2, #0
 8013270:	2103      	movs	r1, #3
 8013272:	f00e fe19 	bl	8021ea8 <xTimerGenericCommand>
    xTimerDelete(logBlocks[i].timer, portMAX_DELAY);
 8013276:	4915      	ldr	r1, [pc, #84]	; (80132cc <logDeleteBlock+0xf8>)
 8013278:	697a      	ldr	r2, [r7, #20]
 801327a:	4613      	mov	r3, r2
 801327c:	011b      	lsls	r3, r3, #4
 801327e:	1a9b      	subs	r3, r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	440b      	add	r3, r1
 8013284:	3304      	adds	r3, #4
 8013286:	6818      	ldr	r0, [r3, #0]
 8013288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	2300      	movs	r3, #0
 8013290:	2200      	movs	r2, #0
 8013292:	2105      	movs	r1, #5
 8013294:	f00e fe08 	bl	8021ea8 <xTimerGenericCommand>
    logBlocks[i].timer = 0;
 8013298:	490c      	ldr	r1, [pc, #48]	; (80132cc <logDeleteBlock+0xf8>)
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	4613      	mov	r3, r2
 801329e:	011b      	lsls	r3, r3, #4
 80132a0:	1a9b      	subs	r3, r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	440b      	add	r3, r1
 80132a6:	3304      	adds	r3, #4
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
  }

  logBlocks[i].id = BLOCK_ID_FREE;
 80132ac:	4907      	ldr	r1, [pc, #28]	; (80132cc <logDeleteBlock+0xf8>)
 80132ae:	697a      	ldr	r2, [r7, #20]
 80132b0:	4613      	mov	r3, r2
 80132b2:	011b      	lsls	r3, r3, #4
 80132b4:	1a9b      	subs	r3, r3, r2
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	440b      	add	r3, r1
 80132ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132be:	601a      	str	r2, [r3, #0]
  return 0;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3718      	adds	r7, #24
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	200059c0 	.word	0x200059c0

080132d0 <logStartBlock>:

static int logStartBlock(int id, unsigned int period)
{
 80132d0:	b590      	push	{r4, r7, lr}
 80132d2:	b087      	sub	sp, #28
 80132d4:	af02      	add	r7, sp, #8
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80132da:	2300      	movs	r3, #0
 80132dc:	60fb      	str	r3, [r7, #12]
 80132de:	e00d      	b.n	80132fc <logStartBlock+0x2c>
    if (logBlocks[i].id == id) break;
 80132e0:	4927      	ldr	r1, [pc, #156]	; (8013380 <logStartBlock+0xb0>)
 80132e2:	68fa      	ldr	r2, [r7, #12]
 80132e4:	4613      	mov	r3, r2
 80132e6:	011b      	lsls	r3, r3, #4
 80132e8:	1a9b      	subs	r3, r3, r2
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	440b      	add	r3, r1
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d006      	beq.n	8013304 <logStartBlock+0x34>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	3301      	adds	r3, #1
 80132fa:	60fb      	str	r3, [r7, #12]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2b0f      	cmp	r3, #15
 8013300:	ddee      	ble.n	80132e0 <logStartBlock+0x10>
 8013302:	e000      	b.n	8013306 <logStartBlock+0x36>
    if (logBlocks[i].id == id) break;
 8013304:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2b0f      	cmp	r3, #15
 801330a:	dd01      	ble.n	8013310 <logStartBlock+0x40>
    LOG_ERROR("Trying to start block id %d that doesn't exist.", id);
    return ENOENT;
 801330c:	2302      	movs	r3, #2
 801330e:	e032      	b.n	8013376 <logStartBlock+0xa6>
  }

  LOG_DEBUG("Starting block %d with period %dms\n", id, period);

  if (period>0)
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d023      	beq.n	801335e <logStartBlock+0x8e>
  {
    xTimerChangePeriod(logBlocks[i].timer, M2T(period), 100);
 8013316:	491a      	ldr	r1, [pc, #104]	; (8013380 <logStartBlock+0xb0>)
 8013318:	68fa      	ldr	r2, [r7, #12]
 801331a:	4613      	mov	r3, r2
 801331c:	011b      	lsls	r3, r3, #4
 801331e:	1a9b      	subs	r3, r3, r2
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	440b      	add	r3, r1
 8013324:	3304      	adds	r3, #4
 8013326:	6818      	ldr	r0, [r3, #0]
 8013328:	2364      	movs	r3, #100	; 0x64
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	2300      	movs	r3, #0
 801332e:	683a      	ldr	r2, [r7, #0]
 8013330:	2104      	movs	r1, #4
 8013332:	f00e fdb9 	bl	8021ea8 <xTimerGenericCommand>
    xTimerStart(logBlocks[i].timer, 100);
 8013336:	4912      	ldr	r1, [pc, #72]	; (8013380 <logStartBlock+0xb0>)
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	4613      	mov	r3, r2
 801333c:	011b      	lsls	r3, r3, #4
 801333e:	1a9b      	subs	r3, r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	440b      	add	r3, r1
 8013344:	3304      	adds	r3, #4
 8013346:	681c      	ldr	r4, [r3, #0]
 8013348:	f00d fd48 	bl	8020ddc <xTaskGetTickCount>
 801334c:	4602      	mov	r2, r0
 801334e:	2364      	movs	r3, #100	; 0x64
 8013350:	9300      	str	r3, [sp, #0]
 8013352:	2300      	movs	r3, #0
 8013354:	2101      	movs	r1, #1
 8013356:	4620      	mov	r0, r4
 8013358:	f00e fda6 	bl	8021ea8 <xTimerGenericCommand>
 801335c:	e00a      	b.n	8013374 <logStartBlock+0xa4>
  } else {
    // single-shoot run
    workerSchedule(logRunBlock, &logBlocks[i]);
 801335e:	68fa      	ldr	r2, [r7, #12]
 8013360:	4613      	mov	r3, r2
 8013362:	011b      	lsls	r3, r3, #4
 8013364:	1a9b      	subs	r3, r3, r2
 8013366:	009b      	lsls	r3, r3, #2
 8013368:	4a05      	ldr	r2, [pc, #20]	; (8013380 <logStartBlock+0xb0>)
 801336a:	4413      	add	r3, r2
 801336c:	4619      	mov	r1, r3
 801336e:	4805      	ldr	r0, [pc, #20]	; (8013384 <logStartBlock+0xb4>)
 8013370:	f002 f8bc 	bl	80154ec <workerSchedule>
  }

  return 0;
 8013374:	2300      	movs	r3, #0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	bd90      	pop	{r4, r7, pc}
 801337e:	bf00      	nop
 8013380:	200059c0 	.word	0x200059c0
 8013384:	0801346d 	.word	0x0801346d

08013388 <logStopBlock>:

static int logStopBlock(int id)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af02      	add	r7, sp, #8
 801338e:	6078      	str	r0, [r7, #4]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8013390:	2300      	movs	r3, #0
 8013392:	60fb      	str	r3, [r7, #12]
 8013394:	e00d      	b.n	80133b2 <logStopBlock+0x2a>
    if (logBlocks[i].id == id) break;
 8013396:	4917      	ldr	r1, [pc, #92]	; (80133f4 <logStopBlock+0x6c>)
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	4613      	mov	r3, r2
 801339c:	011b      	lsls	r3, r3, #4
 801339e:	1a9b      	subs	r3, r3, r2
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	440b      	add	r3, r1
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d006      	beq.n	80133ba <logStopBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	3301      	adds	r3, #1
 80133b0:	60fb      	str	r3, [r7, #12]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b0f      	cmp	r3, #15
 80133b6:	ddee      	ble.n	8013396 <logStopBlock+0xe>
 80133b8:	e000      	b.n	80133bc <logStopBlock+0x34>
    if (logBlocks[i].id == id) break;
 80133ba:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2b0f      	cmp	r3, #15
 80133c0:	dd01      	ble.n	80133c6 <logStopBlock+0x3e>
    LOG_ERROR("Trying to stop block id %d that doesn't exist.\n", id);
    return ENOENT;
 80133c2:	2302      	movs	r3, #2
 80133c4:	e011      	b.n	80133ea <logStopBlock+0x62>
  }

  xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 80133c6:	490b      	ldr	r1, [pc, #44]	; (80133f4 <logStopBlock+0x6c>)
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	4613      	mov	r3, r2
 80133cc:	011b      	lsls	r3, r3, #4
 80133ce:	1a9b      	subs	r3, r3, r2
 80133d0:	009b      	lsls	r3, r3, #2
 80133d2:	440b      	add	r3, r1
 80133d4:	3304      	adds	r3, #4
 80133d6:	6818      	ldr	r0, [r3, #0]
 80133d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133dc:	9300      	str	r3, [sp, #0]
 80133de:	2300      	movs	r3, #0
 80133e0:	2200      	movs	r2, #0
 80133e2:	2103      	movs	r1, #3
 80133e4:	f00e fd60 	bl	8021ea8 <xTimerGenericCommand>

  return 0;
 80133e8:	2300      	movs	r3, #0
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	200059c0 	.word	0x200059c0

080133f8 <logBlockTimed>:

/* This function is called by the timer subsystem */
void logBlockTimed(xTimerHandle timer)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  workerSchedule(logRunBlock, pvTimerGetTimerID(timer));
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f00f f851 	bl	80224a8 <pvTimerGetTimerID>
 8013406:	4603      	mov	r3, r0
 8013408:	4619      	mov	r1, r3
 801340a:	4803      	ldr	r0, [pc, #12]	; (8013418 <logBlockTimed+0x20>)
 801340c:	f002 f86e 	bl	80154ec <workerSchedule>
}
 8013410:	bf00      	nop
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	0801346d 	.word	0x0801346d

0801341c <appendToPacket>:

/* Appends data to a packet if space is available; returns false on failure. */
static bool appendToPacket(CRTPPacket * pk, const void * data, size_t n) {
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
  if (pk->size <= CRTP_MAX_DATA_SIZE - n)
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	461a      	mov	r2, r3
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f1c3 031e 	rsb	r3, r3, #30
 8013434:	429a      	cmp	r2, r3
 8013436:	d814      	bhi.n	8013462 <appendToPacket+0x46>
  {
    memcpy(&pk->data[pk->size], data, n);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	461a      	mov	r2, r3
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	4413      	add	r3, r2
 8013442:	3302      	adds	r3, #2
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	68b9      	ldr	r1, [r7, #8]
 8013448:	4618      	mov	r0, r3
 801344a:	f011 fc94 	bl	8024d76 <memcpy>
    pk->size += n;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	781a      	ldrb	r2, [r3, #0]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	b2db      	uxtb	r3, r3
 8013456:	4413      	add	r3, r2
 8013458:	b2da      	uxtb	r2, r3
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	701a      	strb	r2, [r3, #0]
    return true;
 801345e:	2301      	movs	r3, #1
 8013460:	e000      	b.n	8013464 <appendToPacket+0x48>
  }
  else return false;
 8013462:	2300      	movs	r3, #0
}
 8013464:	4618      	mov	r0, r3
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <logRunBlock>:

/* This function is usually called by the worker subsystem */
void logRunBlock(void * arg)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b094      	sub	sp, #80	; 0x50
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  struct log_block *blk = arg;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	64bb      	str	r3, [r7, #72]	; 0x48
  struct log_ops *ops = blk->ops;
 8013478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801347c:	64fb      	str	r3, [r7, #76]	; 0x4c
  static CRTPPacket pk;
  unsigned int timestamp;

  xSemaphoreTake(logLock, portMAX_DELAY);
 801347e:	4b8c      	ldr	r3, [pc, #560]	; (80136b0 <logRunBlock+0x244>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013486:	4618      	mov	r0, r3
 8013488:	f00c fdba 	bl	8020000 <xQueueSemaphoreTake>

  timestamp = ((long long)xTaskGetTickCount())/portTICK_RATE_MS;
 801348c:	f00d fca6 	bl	8020ddc <xTaskGetTickCount>
 8013490:	4603      	mov	r3, r0
 8013492:	4a88      	ldr	r2, [pc, #544]	; (80136b4 <logRunBlock+0x248>)
 8013494:	fba2 2303 	umull	r2, r3, r2, r3
 8013498:	099b      	lsrs	r3, r3, #6
 801349a:	647b      	str	r3, [r7, #68]	; 0x44

  pk.header = CRTP_HEADER(CRTP_PORT_LOG, LOG_CH);
 801349c:	4b86      	ldr	r3, [pc, #536]	; (80136b8 <logRunBlock+0x24c>)
 801349e:	2252      	movs	r2, #82	; 0x52
 80134a0:	705a      	strb	r2, [r3, #1]
  pk.size = 4;
 80134a2:	4b85      	ldr	r3, [pc, #532]	; (80136b8 <logRunBlock+0x24c>)
 80134a4:	2204      	movs	r2, #4
 80134a6:	701a      	strb	r2, [r3, #0]
  pk.data[0] = blk->id;
 80134a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	b2da      	uxtb	r2, r3
 80134ae:	4b82      	ldr	r3, [pc, #520]	; (80136b8 <logRunBlock+0x24c>)
 80134b0:	709a      	strb	r2, [r3, #2]
  pk.data[1] = timestamp&0x0ff;
 80134b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	4b80      	ldr	r3, [pc, #512]	; (80136b8 <logRunBlock+0x24c>)
 80134b8:	70da      	strb	r2, [r3, #3]
  pk.data[2] = (timestamp>>8)&0x0ff;
 80134ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134bc:	0a1b      	lsrs	r3, r3, #8
 80134be:	b2da      	uxtb	r2, r3
 80134c0:	4b7d      	ldr	r3, [pc, #500]	; (80136b8 <logRunBlock+0x24c>)
 80134c2:	711a      	strb	r2, [r3, #4]
  pk.data[3] = (timestamp>>16)&0x0ff;
 80134c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134c6:	0c1b      	lsrs	r3, r3, #16
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	4b7b      	ldr	r3, [pc, #492]	; (80136b8 <logRunBlock+0x24c>)
 80134cc:	715a      	strb	r2, [r3, #5]

  while (ops)
 80134ce:	e18f      	b.n	80137f0 <logRunBlock+0x384>
  {
    int valuei = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	627b      	str	r3, [r7, #36]	; 0x24
    float valuef = 0;
 80134d4:	f04f 0300 	mov.w	r3, #0
 80134d8:	623b      	str	r3, [r7, #32]

    // FPU instructions must run on aligned data.
    // We first copy the data to an (aligned) local variable, before assigning it
    switch(ops->storageType)
 80134da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134dc:	791b      	ldrb	r3, [r3, #4]
 80134de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	3b01      	subs	r3, #1
 80134e6:	2b06      	cmp	r3, #6
 80134e8:	f200 8121 	bhi.w	801372e <logRunBlock+0x2c2>
 80134ec:	a201      	add	r2, pc, #4	; (adr r2, 80134f4 <logRunBlock+0x88>)
 80134ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f2:	bf00      	nop
 80134f4:	08013511 	.word	0x08013511
 80134f8:	0801359b 	.word	0x0801359b
 80134fc:	08013629 	.word	0x08013629
 8013500:	08013555 	.word	0x08013555
 8013504:	080135e1 	.word	0x080135e1
 8013508:	0801366d 	.word	0x0801366d
 801350c:	080136d9 	.word	0x080136d9
    {
      case LOG_UINT8:
      {
        uint8_t v;
        if (ops->acquisitionType == acqType_function) {
 8013510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013512:	7b1b      	ldrb	r3, [r3, #12]
 8013514:	2b01      	cmp	r3, #1
 8013516:	d116      	bne.n	8013546 <logRunBlock+0xda>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8013518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	62bb      	str	r3, [r7, #40]	; 0x28
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt8);
 801351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d105      	bne.n	8013532 <logRunBlock+0xc6>
 8013526:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 801352a:	4964      	ldr	r1, [pc, #400]	; (80136bc <logRunBlock+0x250>)
 801352c:	4864      	ldr	r0, [pc, #400]	; (80136c0 <logRunBlock+0x254>)
 801352e:	f7fe fd7d 	bl	801202c <assertFail>
          v = logByFunction->acquireUInt8(timestamp, logByFunction->data);
 8013532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013538:	6852      	ldr	r2, [r2, #4]
 801353a:	4611      	mov	r1, r2
 801353c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801353e:	4798      	blx	r3
 8013540:	4603      	mov	r3, r0
 8013542:	77fb      	strb	r3, [r7, #31]
 8013544:	e003      	b.n	801354e <logRunBlock+0xe2>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8013546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	77fb      	strb	r3, [r7, #31]
        }
        valuei = v;
 801354e:	7ffb      	ldrb	r3, [r7, #31]
 8013550:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013552:	e0ec      	b.n	801372e <logRunBlock+0x2c2>
      }
      case LOG_INT8:
      {
        int8_t v;
        if (ops->acquisitionType == acqType_function) {
 8013554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013556:	7b1b      	ldrb	r3, [r3, #12]
 8013558:	2b01      	cmp	r3, #1
 801355a:	d116      	bne.n	801358a <logRunBlock+0x11e>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 801355c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801355e:	689b      	ldr	r3, [r3, #8]
 8013560:	637b      	str	r3, [r7, #52]	; 0x34
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt8);
 8013562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <logRunBlock+0x10a>
 801356a:	f240 3201 	movw	r2, #769	; 0x301
 801356e:	4953      	ldr	r1, [pc, #332]	; (80136bc <logRunBlock+0x250>)
 8013570:	4854      	ldr	r0, [pc, #336]	; (80136c4 <logRunBlock+0x258>)
 8013572:	f7fe fd5b 	bl	801202c <assertFail>
          v = logByFunction->acquireInt8(timestamp, logByFunction->data);
 8013576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801357c:	6852      	ldr	r2, [r2, #4]
 801357e:	4611      	mov	r1, r2
 8013580:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013582:	4798      	blx	r3
 8013584:	4603      	mov	r3, r0
 8013586:	77bb      	strb	r3, [r7, #30]
 8013588:	e003      	b.n	8013592 <logRunBlock+0x126>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 801358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	77bb      	strb	r3, [r7, #30]
        }
        valuei = v;
 8013592:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013598:	e0c9      	b.n	801372e <logRunBlock+0x2c2>
      }
      case LOG_UINT16:
      {
        uint16_t v;
        if (ops->acquisitionType == acqType_function) {
 801359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801359c:	7b1b      	ldrb	r3, [r3, #12]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d116      	bne.n	80135d0 <logRunBlock+0x164>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80135a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135a4:	689b      	ldr	r3, [r3, #8]
 80135a6:	62fb      	str	r3, [r7, #44]	; 0x2c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt16);
 80135a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d105      	bne.n	80135bc <logRunBlock+0x150>
 80135b0:	f240 320e 	movw	r2, #782	; 0x30e
 80135b4:	4941      	ldr	r1, [pc, #260]	; (80136bc <logRunBlock+0x250>)
 80135b6:	4844      	ldr	r0, [pc, #272]	; (80136c8 <logRunBlock+0x25c>)
 80135b8:	f7fe fd38 	bl	801202c <assertFail>
          v = logByFunction->acquireUInt16(timestamp, logByFunction->data);
 80135bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135c2:	6852      	ldr	r2, [r2, #4]
 80135c4:	4611      	mov	r1, r2
 80135c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80135c8:	4798      	blx	r3
 80135ca:	4603      	mov	r3, r0
 80135cc:	83bb      	strh	r3, [r7, #28]
 80135ce:	e004      	b.n	80135da <logRunBlock+0x16e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 80135d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135d2:	689b      	ldr	r3, [r3, #8]
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	83bb      	strh	r3, [r7, #28]
        }
        valuei = v;
 80135da:	8bbb      	ldrh	r3, [r7, #28]
 80135dc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80135de:	e0a6      	b.n	801372e <logRunBlock+0x2c2>
      }
      case LOG_INT16:
      {
        int16_t v;
        if (ops->acquisitionType == acqType_function) {
 80135e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135e2:	7b1b      	ldrb	r3, [r3, #12]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	d116      	bne.n	8013616 <logRunBlock+0x1aa>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80135e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	63bb      	str	r3, [r7, #56]	; 0x38
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt16);
 80135ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d105      	bne.n	8013602 <logRunBlock+0x196>
 80135f6:	f240 321b 	movw	r2, #795	; 0x31b
 80135fa:	4930      	ldr	r1, [pc, #192]	; (80136bc <logRunBlock+0x250>)
 80135fc:	4833      	ldr	r0, [pc, #204]	; (80136cc <logRunBlock+0x260>)
 80135fe:	f7fe fd15 	bl	801202c <assertFail>
          v = logByFunction->acquireInt16(timestamp, logByFunction->data);
 8013602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013608:	6852      	ldr	r2, [r2, #4]
 801360a:	4611      	mov	r1, r2
 801360c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801360e:	4798      	blx	r3
 8013610:	4603      	mov	r3, r0
 8013612:	837b      	strh	r3, [r7, #26]
 8013614:	e004      	b.n	8013620 <logRunBlock+0x1b4>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8013616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013618:	689b      	ldr	r3, [r3, #8]
 801361a:	881b      	ldrh	r3, [r3, #0]
 801361c:	b29b      	uxth	r3, r3
 801361e:	837b      	strh	r3, [r7, #26]
        }
        valuei = v;
 8013620:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013624:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013626:	e082      	b.n	801372e <logRunBlock+0x2c2>
      }
      case LOG_UINT32:
      {
        uint32_t v;
        if (ops->acquisitionType == acqType_function) {
 8013628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801362a:	7b1b      	ldrb	r3, [r3, #12]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d116      	bne.n	801365e <logRunBlock+0x1f2>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8013630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	633b      	str	r3, [r7, #48]	; 0x30
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt32);
 8013636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d105      	bne.n	801364a <logRunBlock+0x1de>
 801363e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8013642:	491e      	ldr	r1, [pc, #120]	; (80136bc <logRunBlock+0x250>)
 8013644:	4822      	ldr	r0, [pc, #136]	; (80136d0 <logRunBlock+0x264>)
 8013646:	f7fe fcf1 	bl	801202c <assertFail>
          v = logByFunction->acquireUInt32(timestamp, logByFunction->data);
 801364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013650:	6852      	ldr	r2, [r2, #4]
 8013652:	4611      	mov	r1, r2
 8013654:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013656:	4798      	blx	r3
 8013658:	4603      	mov	r3, r0
 801365a:	617b      	str	r3, [r7, #20]
 801365c:	e003      	b.n	8013666 <logRunBlock+0x1fa>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 801365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013660:	689b      	ldr	r3, [r3, #8]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	617b      	str	r3, [r7, #20]
        }
        valuei = v;
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801366a:	e060      	b.n	801372e <logRunBlock+0x2c2>
      }
      case LOG_INT32:
      {
        int32_t v;
        if (ops->acquisitionType == acqType_function) {
 801366c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801366e:	7b1b      	ldrb	r3, [r3, #12]
 8013670:	2b01      	cmp	r3, #1
 8013672:	d116      	bne.n	80136a2 <logRunBlock+0x236>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8013674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013676:	689b      	ldr	r3, [r3, #8]
 8013678:	63fb      	str	r3, [r7, #60]	; 0x3c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt32);
 801367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d105      	bne.n	801368e <logRunBlock+0x222>
 8013682:	f240 3235 	movw	r2, #821	; 0x335
 8013686:	490d      	ldr	r1, [pc, #52]	; (80136bc <logRunBlock+0x250>)
 8013688:	4812      	ldr	r0, [pc, #72]	; (80136d4 <logRunBlock+0x268>)
 801368a:	f7fe fccf 	bl	801202c <assertFail>
          v = logByFunction->acquireInt32(timestamp, logByFunction->data);
 801368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013694:	6852      	ldr	r2, [r2, #4]
 8013696:	4611      	mov	r1, r2
 8013698:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801369a:	4798      	blx	r3
 801369c:	4603      	mov	r3, r0
 801369e:	613b      	str	r3, [r7, #16]
 80136a0:	e003      	b.n	80136aa <logRunBlock+0x23e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 80136a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136a4:	689b      	ldr	r3, [r3, #8]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	613b      	str	r3, [r7, #16]
        }
        valuei = v;
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80136ae:	e03e      	b.n	801372e <logRunBlock+0x2c2>
 80136b0:	2000bdfc 	.word	0x2000bdfc
 80136b4:	10624dd3 	.word	0x10624dd3
 80136b8:	2000be84 	.word	0x2000be84
 80136bc:	0802d5f8 	.word	0x0802d5f8
 80136c0:	0802d66c 	.word	0x0802d66c
 80136c4:	0802d688 	.word	0x0802d688
 80136c8:	0802d6a4 	.word	0x0802d6a4
 80136cc:	0802d6c4 	.word	0x0802d6c4
 80136d0:	0802d6e0 	.word	0x0802d6e0
 80136d4:	0802d700 	.word	0x0802d700
      }
      case LOG_FLOAT:
      {
        float v;
        if (ops->acquisitionType == acqType_function) {
 80136d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136da:	7b1b      	ldrb	r3, [r3, #12]
 80136dc:	2b01      	cmp	r3, #1
 80136de:	d118      	bne.n	8013712 <logRunBlock+0x2a6>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 80136e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136e2:	689b      	ldr	r3, [r3, #8]
 80136e4:	643b      	str	r3, [r7, #64]	; 0x40
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->aquireFloat);
 80136e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d105      	bne.n	80136fa <logRunBlock+0x28e>
 80136ee:	f240 3242 	movw	r2, #834	; 0x342
 80136f2:	495c      	ldr	r1, [pc, #368]	; (8013864 <logRunBlock+0x3f8>)
 80136f4:	485c      	ldr	r0, [pc, #368]	; (8013868 <logRunBlock+0x3fc>)
 80136f6:	f7fe fc99 	bl	801202c <assertFail>
          v = logByFunction->aquireFloat(timestamp, logByFunction->data);
 80136fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013700:	6852      	ldr	r2, [r2, #4]
 8013702:	4611      	mov	r1, r2
 8013704:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013706:	4798      	blx	r3
 8013708:	eef0 7a40 	vmov.f32	s15, s0
 801370c:	edc7 7a03 	vstr	s15, [r7, #12]
 8013710:	e003      	b.n	801371a <logRunBlock+0x2ae>
        } else {
          memcpy(&v, ops->variable, sizeof(valuef));
 8013712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013714:	689b      	ldr	r3, [r3, #8]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	60fb      	str	r3, [r7, #12]
        }
        valuei = v;
 801371a:	edd7 7a03 	vldr	s15, [r7, #12]
 801371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013722:	ee17 3a90 	vmov	r3, s15
 8013726:	627b      	str	r3, [r7, #36]	; 0x24
        valuef = v;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	623b      	str	r3, [r7, #32]
        break;
 801372c:	bf00      	nop
      }
    }

    if (ops->logType == LOG_FLOAT || ops->logType == LOG_FP16)
 801372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013730:	791b      	ldrb	r3, [r3, #4]
 8013732:	f023 030f 	bic.w	r3, r3, #15
 8013736:	b2db      	uxtb	r3, r3
 8013738:	2b70      	cmp	r3, #112	; 0x70
 801373a:	d006      	beq.n	801374a <logRunBlock+0x2de>
 801373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801373e:	791b      	ldrb	r3, [r3, #4]
 8013740:	f023 030f 	bic.w	r3, r3, #15
 8013744:	b2db      	uxtb	r3, r3
 8013746:	2b80      	cmp	r3, #128	; 0x80
 8013748:	d138      	bne.n	80137bc <logRunBlock+0x350>
    {
      if (ops->storageType != LOG_FLOAT)
 801374a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801374c:	791b      	ldrb	r3, [r3, #4]
 801374e:	f003 030f 	and.w	r3, r3, #15
 8013752:	b2db      	uxtb	r3, r3
 8013754:	2b07      	cmp	r3, #7
 8013756:	d006      	beq.n	8013766 <logRunBlock+0x2fa>
      {
        valuef = valuei;
 8013758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375a:	ee07 3a90 	vmov	s15, r3
 801375e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013762:	edc7 7a08 	vstr	s15, [r7, #32]
      }

      // Try to append the next item to the packet.  If we run out of space,
      // drop this and subsequent items.
      if (ops->logType == LOG_FLOAT)
 8013766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013768:	791b      	ldrb	r3, [r3, #4]
 801376a:	f023 030f 	bic.w	r3, r3, #15
 801376e:	b2db      	uxtb	r3, r3
 8013770:	2b70      	cmp	r3, #112	; 0x70
 8013772:	d10d      	bne.n	8013790 <logRunBlock+0x324>
      {
        if (!appendToPacket(&pk, &valuef, 4)) break;
 8013774:	f107 0320 	add.w	r3, r7, #32
 8013778:	2204      	movs	r2, #4
 801377a:	4619      	mov	r1, r3
 801377c:	483b      	ldr	r0, [pc, #236]	; (801386c <logRunBlock+0x400>)
 801377e:	f7ff fe4d 	bl	801341c <appendToPacket>
 8013782:	4603      	mov	r3, r0
 8013784:	f083 0301 	eor.w	r3, r3, #1
 8013788:	b2db      	uxtb	r3, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	d02c      	beq.n	80137e8 <logRunBlock+0x37c>
 801378e:	e035      	b.n	80137fc <logRunBlock+0x390>
      }
      else
      {
        valuei = single2half(valuef);
 8013790:	edd7 7a08 	vldr	s15, [r7, #32]
 8013794:	eeb0 0a67 	vmov.f32	s0, s15
 8013798:	f000 f9b7 	bl	8013b0a <single2half>
 801379c:	4603      	mov	r3, r0
 801379e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!appendToPacket(&pk, &valuei, 2)) break;
 80137a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137a4:	2202      	movs	r2, #2
 80137a6:	4619      	mov	r1, r3
 80137a8:	4830      	ldr	r0, [pc, #192]	; (801386c <logRunBlock+0x400>)
 80137aa:	f7ff fe37 	bl	801341c <appendToPacket>
 80137ae:	4603      	mov	r3, r0
 80137b0:	f083 0301 	eor.w	r3, r3, #1
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d016      	beq.n	80137e8 <logRunBlock+0x37c>
 80137ba:	e01f      	b.n	80137fc <logRunBlock+0x390>
      }
    }
    else  //logType is an integer
    {
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 80137bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137be:	791b      	ldrb	r3, [r3, #4]
 80137c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	461a      	mov	r2, r3
 80137c8:	4b29      	ldr	r3, [pc, #164]	; (8013870 <logRunBlock+0x404>)
 80137ca:	5c9b      	ldrb	r3, [r3, r2]
 80137cc:	461a      	mov	r2, r3
 80137ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137d2:	4619      	mov	r1, r3
 80137d4:	4825      	ldr	r0, [pc, #148]	; (801386c <logRunBlock+0x400>)
 80137d6:	f7ff fe21 	bl	801341c <appendToPacket>
 80137da:	4603      	mov	r3, r0
 80137dc:	f083 0301 	eor.w	r3, r3, #1
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d109      	bne.n	80137fa <logRunBlock+0x38e>
 80137e6:	e000      	b.n	80137ea <logRunBlock+0x37e>
      if (ops->logType == LOG_FLOAT)
 80137e8:	bf00      	nop
    }

    ops = ops->next;
 80137ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (ops)
 80137f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	f47f ae6c 	bne.w	80134d0 <logRunBlock+0x64>
 80137f8:	e000      	b.n	80137fc <logRunBlock+0x390>
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 80137fa:	bf00      	nop
  }

  xSemaphoreGive(logLock);
 80137fc:	4b1d      	ldr	r3, [pc, #116]	; (8013874 <logRunBlock+0x408>)
 80137fe:	6818      	ldr	r0, [r3, #0]
 8013800:	2300      	movs	r3, #0
 8013802:	2200      	movs	r2, #0
 8013804:	2100      	movs	r1, #0
 8013806:	f00c f979 	bl	801fafc <xQueueGenericSend>

  // Check if the connection is still up, oherwise disable
  // all the logging and flush all the CRTP queues.
  if (!crtpIsConnected())
 801380a:	f7ed fe8d 	bl	8001528 <crtpIsConnected>
 801380e:	4603      	mov	r3, r0
 8013810:	f083 0301 	eor.w	r3, r3, #1
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b00      	cmp	r3, #0
 8013818:	d004      	beq.n	8013824 <logRunBlock+0x3b8>
  {
    logReset();
 801381a:	f000 f8eb 	bl	80139f4 <logReset>
    crtpReset();
 801381e:	f7ed fe6b 	bl	80014f8 <crtpReset>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
                    blk->droppedPackets);
      }
    }
  }
}
 8013822:	e01b      	b.n	801385c <logRunBlock+0x3f0>
    if (!crtpSendPacket(&pk))
 8013824:	4811      	ldr	r0, [pc, #68]	; (801386c <logRunBlock+0x400>)
 8013826:	f7ed fe13 	bl	8001450 <crtpSendPacket>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d115      	bne.n	801385c <logRunBlock+0x3f0>
      if (blk->droppedPackets++ % 100 == 0)
 8013830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013834:	1c51      	adds	r1, r2, #1
 8013836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013838:	6359      	str	r1, [r3, #52]	; 0x34
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <logRunBlock+0x40c>)
 801383c:	fba3 1302 	umull	r1, r3, r3, r2
 8013840:	095b      	lsrs	r3, r3, #5
 8013842:	2164      	movs	r1, #100	; 0x64
 8013844:	fb01 f303 	mul.w	r3, r1, r3
 8013848:	1ad3      	subs	r3, r2, r3
 801384a:	2b00      	cmp	r3, #0
 801384c:	d106      	bne.n	801385c <logRunBlock+0x3f0>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
 801384e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013852:	461a      	mov	r2, r3
 8013854:	4909      	ldr	r1, [pc, #36]	; (801387c <logRunBlock+0x410>)
 8013856:	2000      	movs	r0, #0
 8013858:	f7fe fb24 	bl	8011ea4 <SEGGER_RTT_printf>
}
 801385c:	bf00      	nop
 801385e:	3750      	adds	r7, #80	; 0x50
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	0802d5f8 	.word	0x0802d5f8
 8013868:	0802d71c 	.word	0x0802d71c
 801386c:	2000be84 	.word	0x2000be84
 8013870:	0802f07c 	.word	0x0802f07c
 8013874:	2000bdfc 	.word	0x2000bdfc
 8013878:	51eb851f 	.word	0x51eb851f
 801387c:	0802d738 	.word	0x0802d738

08013880 <variableGetIndex>:

static int variableGetIndex(int id)
{
 8013880:	b480      	push	{r7}
 8013882:	b085      	sub	sp, #20
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  int i;
  int n=0;
 8013888:	2300      	movs	r3, #0
 801388a:	60bb      	str	r3, [r7, #8]

  for (i=0; i<logsLen; i++)
 801388c:	2300      	movs	r3, #0
 801388e:	60fb      	str	r3, [r7, #12]
 8013890:	e015      	b.n	80138be <variableGetIndex+0x3e>
  {
    if(!(logs[i].type & LOG_GROUP))
 8013892:	4b16      	ldr	r3, [pc, #88]	; (80138ec <variableGetIndex+0x6c>)
 8013894:	6819      	ldr	r1, [r3, #0]
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	4613      	mov	r3, r2
 801389a:	005b      	lsls	r3, r3, #1
 801389c:	4413      	add	r3, r2
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	440b      	add	r3, r1
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	b25b      	sxtb	r3, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	db06      	blt.n	80138b8 <variableGetIndex+0x38>
    {
      if(n==id)
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d00b      	beq.n	80138ca <variableGetIndex+0x4a>
        break;
      n++;
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	3301      	adds	r3, #1
 80138b6:	60bb      	str	r3, [r7, #8]
  for (i=0; i<logsLen; i++)
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	3301      	adds	r3, #1
 80138bc:	60fb      	str	r3, [r7, #12]
 80138be:	4b0c      	ldr	r3, [pc, #48]	; (80138f0 <variableGetIndex+0x70>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	68fa      	ldr	r2, [r7, #12]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	dbe4      	blt.n	8013892 <variableGetIndex+0x12>
 80138c8:	e000      	b.n	80138cc <variableGetIndex+0x4c>
        break;
 80138ca:	bf00      	nop
    }
  }

  if (i>=logsLen)
 80138cc:	4b08      	ldr	r3, [pc, #32]	; (80138f0 <variableGetIndex+0x70>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	db02      	blt.n	80138dc <variableGetIndex+0x5c>
    return -1;
 80138d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138da:	e000      	b.n	80138de <variableGetIndex+0x5e>

  return i;
 80138dc:	68fb      	ldr	r3, [r7, #12]
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3714      	adds	r7, #20
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr
 80138ea:	bf00      	nop
 80138ec:	2000be50 	.word	0x2000be50
 80138f0:	2000be54 	.word	0x2000be54

080138f4 <opsMalloc>:

static struct log_ops * opsMalloc()
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
  int i;

  for (i=0;i<LOG_MAX_OPS; i++)
 80138fa:	2300      	movs	r3, #0
 80138fc:	607b      	str	r3, [r7, #4]
 80138fe:	e00a      	b.n	8013916 <opsMalloc+0x22>
      if (logOps[i].variable == NULL) break;
 8013900:	4a0f      	ldr	r2, [pc, #60]	; (8013940 <opsMalloc+0x4c>)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	011b      	lsls	r3, r3, #4
 8013906:	4413      	add	r3, r2
 8013908:	3308      	adds	r3, #8
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d006      	beq.n	801391e <opsMalloc+0x2a>
  for (i=0;i<LOG_MAX_OPS; i++)
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	3301      	adds	r3, #1
 8013914:	607b      	str	r3, [r7, #4]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b7f      	cmp	r3, #127	; 0x7f
 801391a:	ddf1      	ble.n	8013900 <opsMalloc+0xc>
 801391c:	e000      	b.n	8013920 <opsMalloc+0x2c>
      if (logOps[i].variable == NULL) break;
 801391e:	bf00      	nop

  if (i >= LOG_MAX_OPS)
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b7f      	cmp	r3, #127	; 0x7f
 8013924:	dd01      	ble.n	801392a <opsMalloc+0x36>
      return NULL;
 8013926:	2300      	movs	r3, #0
 8013928:	e003      	b.n	8013932 <opsMalloc+0x3e>

  return &logOps[i];
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	011b      	lsls	r3, r3, #4
 801392e:	4a04      	ldr	r2, [pc, #16]	; (8013940 <opsMalloc+0x4c>)
 8013930:	4413      	add	r3, r2
}
 8013932:	4618      	mov	r0, r3
 8013934:	370c      	adds	r7, #12
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop
 8013940:	200051c0 	.word	0x200051c0

08013944 <opsFree>:

static void opsFree(struct log_ops * ops)
{
 8013944:	b480      	push	{r7}
 8013946:	b083      	sub	sp, #12
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  ops->variable = NULL;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	609a      	str	r2, [r3, #8]
}
 8013952:	bf00      	nop
 8013954:	370c      	adds	r7, #12
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr
	...

08013960 <blockCalcLength>:

static int blockCalcLength(struct log_block * block)
{
 8013960:	b480      	push	{r7}
 8013962:	b085      	sub	sp, #20
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  struct log_ops * ops;
  int len = 0;
 8013968:	2300      	movs	r3, #0
 801396a:	60bb      	str	r3, [r7, #8]

  for (ops = block->ops; ops; ops = ops->next)
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013970:	60fb      	str	r3, [r7, #12]
 8013972:	e00e      	b.n	8013992 <blockCalcLength+0x32>
    len += typeLength[ops->logType];
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	791b      	ldrb	r3, [r3, #4]
 8013978:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801397c:	b2db      	uxtb	r3, r3
 801397e:	461a      	mov	r2, r3
 8013980:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <blockCalcLength+0x48>)
 8013982:	5c9b      	ldrb	r3, [r3, r2]
 8013984:	461a      	mov	r2, r3
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	4413      	add	r3, r2
 801398a:	60bb      	str	r3, [r7, #8]
  for (ops = block->ops; ops; ops = ops->next)
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	60fb      	str	r3, [r7, #12]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d1ed      	bne.n	8013974 <blockCalcLength+0x14>

  return len;
 8013998:	68bb      	ldr	r3, [r7, #8]
}
 801399a:	4618      	mov	r0, r3
 801399c:	3714      	adds	r7, #20
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop
 80139a8:	0802f07c 	.word	0x0802f07c

080139ac <blockAppendOps>:

void blockAppendOps(struct log_block * block, struct log_ops * ops)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b085      	sub	sp, #20
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
  struct log_ops * o;

  ops->next = NULL;
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	2200      	movs	r2, #0
 80139ba:	601a      	str	r2, [r3, #0]

  if (block->ops == NULL)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d103      	bne.n	80139cc <blockAppendOps+0x20>
    block->ops = ops;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	683a      	ldr	r2, [r7, #0]
 80139c8:	639a      	str	r2, [r3, #56]	; 0x38
  {
    for (o = block->ops; o->next; o = o->next);

    o->next = ops;
  }
}
 80139ca:	e00d      	b.n	80139e8 <blockAppendOps+0x3c>
    for (o = block->ops; o->next; o = o->next);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139d0:	60fb      	str	r3, [r7, #12]
 80139d2:	e002      	b.n	80139da <blockAppendOps+0x2e>
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	60fb      	str	r3, [r7, #12]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1f8      	bne.n	80139d4 <blockAppendOps+0x28>
    o->next = ops;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	601a      	str	r2, [r3, #0]
}
 80139e8:	bf00      	nop
 80139ea:	3714      	adds	r7, #20
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <logReset>:

static void logReset(void)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
  int i;

  if (isInit)
 80139fa:	4b2b      	ldr	r3, [pc, #172]	; (8013aa8 <logReset+0xb4>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d029      	beq.n	8013a56 <logReset+0x62>
  {
    //Stop and delete all started log blocks
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 8013a02:	2300      	movs	r3, #0
 8013a04:	607b      	str	r3, [r7, #4]
 8013a06:	e023      	b.n	8013a50 <logReset+0x5c>
      if (logBlocks[i].id != -1)
 8013a08:	4928      	ldr	r1, [pc, #160]	; (8013aac <logReset+0xb8>)
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	011b      	lsls	r3, r3, #4
 8013a10:	1a9b      	subs	r3, r3, r2
 8013a12:	009b      	lsls	r3, r3, #2
 8013a14:	440b      	add	r3, r1
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a1c:	d015      	beq.n	8013a4a <logReset+0x56>
      {
        logStopBlock(logBlocks[i].id);
 8013a1e:	4923      	ldr	r1, [pc, #140]	; (8013aac <logReset+0xb8>)
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	4613      	mov	r3, r2
 8013a24:	011b      	lsls	r3, r3, #4
 8013a26:	1a9b      	subs	r3, r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	440b      	add	r3, r1
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7ff fcaa 	bl	8013388 <logStopBlock>
        logDeleteBlock(logBlocks[i].id);
 8013a34:	491d      	ldr	r1, [pc, #116]	; (8013aac <logReset+0xb8>)
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	4613      	mov	r3, r2
 8013a3a:	011b      	lsls	r3, r3, #4
 8013a3c:	1a9b      	subs	r3, r3, r2
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	440b      	add	r3, r1
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff fbc5 	bl	80131d4 <logDeleteBlock>
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	607b      	str	r3, [r7, #4]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2b0f      	cmp	r3, #15
 8013a54:	ddd8      	ble.n	8013a08 <logReset+0x14>
      }
  }

  //Force free all the log block objects
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8013a56:	2300      	movs	r3, #0
 8013a58:	607b      	str	r3, [r7, #4]
 8013a5a:	e00c      	b.n	8013a76 <logReset+0x82>
    logBlocks[i].id = BLOCK_ID_FREE;
 8013a5c:	4913      	ldr	r1, [pc, #76]	; (8013aac <logReset+0xb8>)
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	4613      	mov	r3, r2
 8013a62:	011b      	lsls	r3, r3, #4
 8013a64:	1a9b      	subs	r3, r3, r2
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	440b      	add	r3, r1
 8013a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a6e:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3301      	adds	r3, #1
 8013a74:	607b      	str	r3, [r7, #4]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2b0f      	cmp	r3, #15
 8013a7a:	ddef      	ble.n	8013a5c <logReset+0x68>

  //Force free the log ops
  for (i=0; i<LOG_MAX_OPS; i++)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	607b      	str	r3, [r7, #4]
 8013a80:	e009      	b.n	8013a96 <logReset+0xa2>
    logOps[i].variable = NULL;
 8013a82:	4a0b      	ldr	r2, [pc, #44]	; (8013ab0 <logReset+0xbc>)
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	011b      	lsls	r3, r3, #4
 8013a88:	4413      	add	r3, r2
 8013a8a:	3308      	adds	r3, #8
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	601a      	str	r2, [r3, #0]
  for (i=0; i<LOG_MAX_OPS; i++)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	3301      	adds	r3, #1
 8013a94:	607b      	str	r3, [r7, #4]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2b7f      	cmp	r3, #127	; 0x7f
 8013a9a:	ddf2      	ble.n	8013a82 <logReset+0x8e>
}
 8013a9c:	bf00      	nop
 8013a9e:	bf00      	nop
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	2000be80 	.word	0x2000be80
 8013aac:	200059c0 	.word	0x200059c0
 8013ab0:	200051c0 	.word	0x200051c0

08013ab4 <logGetType>:

  return invalidVarId;
}

inline int logGetType(logVarId_t varid)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	4603      	mov	r3, r0
 8013abc:	80fb      	strh	r3, [r7, #6]
  return logs[varid].type & LOG_TYPE_MASK;
 8013abe:	4b08      	ldr	r3, [pc, #32]	; (8013ae0 <logGetType+0x2c>)
 8013ac0:	6819      	ldr	r1, [r3, #0]
 8013ac2:	88fa      	ldrh	r2, [r7, #6]
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	005b      	lsls	r3, r3, #1
 8013ac8:	4413      	add	r3, r2
 8013aca:	009b      	lsls	r3, r3, #2
 8013acc:	440b      	add	r3, r1
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	f003 030f 	and.w	r3, r3, #15
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	370c      	adds	r7, #12
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr
 8013ae0:	2000be50 	.word	0x2000be50

08013ae4 <acquisitionTypeFromLogType>:
unsigned int logGetUint(logVarId_t varid)
{
  return (unsigned int)logGetInt(varid);
}

static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType) {
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	4603      	mov	r3, r0
 8013aec:	71fb      	strb	r3, [r7, #7]
  if (logType & LOG_BY_FUNCTION) {
 8013aee:	79fb      	ldrb	r3, [r7, #7]
 8013af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d001      	beq.n	8013afc <acquisitionTypeFromLogType+0x18>
    return acqType_function;
 8013af8:	2301      	movs	r3, #1
 8013afa:	e000      	b.n	8013afe <acquisitionTypeFromLogType+0x1a>
  }

  return acqType_memory;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <single2half>:
 *  * Rounding seems to give at least 11 bits precision
 *  * Faster and smaller than the GCC implementation
 */

uint16_t single2half(float number)
{
 8013b0a:	b480      	push	{r7}
 8013b0c:	b087      	sub	sp, #28
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t num = *((uint32_t*)&number);
 8013b14:	1d3b      	adds	r3, r7, #4
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	617b      	str	r3, [r7, #20]
    uint32_t s = num>>31;
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	0fdb      	lsrs	r3, r3, #31
 8013b1e:	613b      	str	r3, [r7, #16]
    uint32_t e = (num>>23)&0x0FF;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	0ddb      	lsrs	r3, r3, #23
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	60fb      	str	r3, [r7, #12]

    if ((e==255) && (num&0x007fffff))
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2bff      	cmp	r3, #255	; 0xff
 8013b2c:	d107      	bne.n	8013b3e <single2half+0x34>
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d002      	beq.n	8013b3e <single2half+0x34>
        return 0x7E00; // NaN
 8013b38:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8013b3c:	e02c      	b.n	8013b98 <single2half+0x8e>
    if (e>(127+15))
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2b8e      	cmp	r3, #142	; 0x8e
 8013b42:	d908      	bls.n	8013b56 <single2half+0x4c>
        return s?0xFC00:0x7C00;  //+/- inf
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <single2half+0x46>
 8013b4a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8013b4e:	e023      	b.n	8013b98 <single2half+0x8e>
 8013b50:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8013b54:	e020      	b.n	8013b98 <single2half+0x8e>
    if (e<(127-15))
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b6f      	cmp	r3, #111	; 0x6f
 8013b5a:	d801      	bhi.n	8013b60 <single2half+0x56>
        return 0; //Do not handle generating subnormalised representation
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	e01b      	b.n	8013b98 <single2half+0x8e>

    return (s<<15) | ((e-127+15)<<10) | (((num>>13)&0x3FF)+((num>>12)&0x01));
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	03db      	lsls	r3, r3, #15
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	3b70      	subs	r3, #112	; 0x70
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	029b      	lsls	r3, r3, #10
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	4313      	orrs	r3, r2
 8013b76:	b29a      	uxth	r2, r3
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	0b5b      	lsrs	r3, r3, #13
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013b82:	b299      	uxth	r1, r3
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	0b1b      	lsrs	r3, r3, #12
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	f003 0301 	and.w	r3, r3, #1
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	440b      	add	r3, r1
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4313      	orrs	r3, r2
 8013b96:	b29b      	uxth	r3, r3
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	371c      	adds	r7, #28
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <paramGetDefault>:
extern int _stext;
extern int _etext;
static const uint64_t dummyZero64 = 0;

static void * paramGetDefault(int index)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b087      	sub	sp, #28
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  uint32_t valueRelative;
  uint32_t address;
  void *ptrDefaultValue;

  address = (uint32_t)(params[index].address);
 8013bac:	4b17      	ldr	r3, [pc, #92]	; (8013c0c <paramGetDefault+0x68>)
 8013bae:	6819      	ldr	r1, [r3, #0]
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	009b      	lsls	r3, r3, #2
 8013bb6:	4413      	add	r3, r2
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	440b      	add	r3, r1
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	613b      	str	r3, [r7, #16]

  // Is variable in data section?
  if (address >= (uint32_t)&_sdata &&
 8013bc0:	4a13      	ldr	r2, [pc, #76]	; (8013c10 <paramGetDefault+0x6c>)
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d30c      	bcc.n	8013be2 <paramGetDefault+0x3e>
      address <= (uint32_t)&_edata)
 8013bc8:	4a12      	ldr	r2, [pc, #72]	; (8013c14 <paramGetDefault+0x70>)
  if (address >= (uint32_t)&_sdata &&
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d808      	bhi.n	8013be2 <paramGetDefault+0x3e>
  {
    valueRelative =  address - (uint32_t)&_sdata;
 8013bd0:	4a0f      	ldr	r2, [pc, #60]	; (8013c10 <paramGetDefault+0x6c>)
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	1a9b      	subs	r3, r3, r2
 8013bd6:	60fb      	str	r3, [r7, #12]
    ptrDefaultValue = (void *)((uint32_t)&_sidata + valueRelative);
 8013bd8:	4a0f      	ldr	r2, [pc, #60]	; (8013c18 <paramGetDefault+0x74>)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	4413      	add	r3, r2
 8013bde:	617b      	str	r3, [r7, #20]
 8013be0:	e00c      	b.n	8013bfc <paramGetDefault+0x58>
  }
  // Is variable in flash section?
  else if (address >= (uint32_t)&_stext &&
 8013be2:	4a0e      	ldr	r2, [pc, #56]	; (8013c1c <paramGetDefault+0x78>)
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d306      	bcc.n	8013bf8 <paramGetDefault+0x54>
           address <= (uint32_t)&_etext)
 8013bea:	4a0d      	ldr	r2, [pc, #52]	; (8013c20 <paramGetDefault+0x7c>)
  else if (address >= (uint32_t)&_stext &&
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d802      	bhi.n	8013bf8 <paramGetDefault+0x54>
  {
    ptrDefaultValue = (void *)(address);
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	617b      	str	r3, [r7, #20]
 8013bf6:	e001      	b.n	8013bfc <paramGetDefault+0x58>
  }
  // It is zero
  else
  {
    ptrDefaultValue = (void *)&dummyZero64;
 8013bf8:	4b0a      	ldr	r3, [pc, #40]	; (8013c24 <paramGetDefault+0x80>)
 8013bfa:	617b      	str	r3, [r7, #20]
  }

  return ptrDefaultValue;
 8013bfc:	697b      	ldr	r3, [r7, #20]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	371c      	adds	r7, #28
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	2000bea4 	.word	0x2000bea4
 8013c10:	20000000 	.word	0x20000000
 8013c14:	200011c0 	.word	0x200011c0
 8013c18:	080300c8 	.word	0x080300c8
 8013c1c:	08000190 	.word	0x08000190
 8013c20:	0802a9d0 	.word	0x0802a9d0
 8013c24:	0802f088 	.word	0x0802f088

08013c28 <paramSet>:
 * @param data  The variable data
 *
 * @return number of bytes set
 **/
static int paramSet(uint16_t index, void *data)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	4603      	mov	r3, r0
 8013c30:	6039      	str	r1, [r7, #0]
 8013c32:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 8013c34:	2300      	movs	r3, #0
 8013c36:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 8013c38:	4b1b      	ldr	r3, [pc, #108]	; (8013ca8 <paramSet+0x80>)
 8013c3a:	6819      	ldr	r1, [r3, #0]
 8013c3c:	88fa      	ldrh	r2, [r7, #6]
 8013c3e:	4613      	mov	r3, r2
 8013c40:	009b      	lsls	r3, r3, #2
 8013c42:	4413      	add	r3, r2
 8013c44:	009b      	lsls	r3, r3, #2
 8013c46:	440b      	add	r3, r1
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	f003 0303 	and.w	r3, r3, #3
 8013c4e:	2b03      	cmp	r3, #3
 8013c50:	d816      	bhi.n	8013c80 <paramSet+0x58>
 8013c52:	a201      	add	r2, pc, #4	; (adr r2, 8013c58 <paramSet+0x30>)
 8013c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c58:	08013c69 	.word	0x08013c69
 8013c5c:	08013c6f 	.word	0x08013c6f
 8013c60:	08013c75 	.word	0x08013c75
 8013c64:	08013c7b 	.word	0x08013c7b
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	60fb      	str	r3, [r7, #12]
      break;
 8013c6c:	e008      	b.n	8013c80 <paramSet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 8013c6e:	2302      	movs	r3, #2
 8013c70:	60fb      	str	r3, [r7, #12]
      break;
 8013c72:	e005      	b.n	8013c80 <paramSet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8013c74:	2304      	movs	r3, #4
 8013c76:	60fb      	str	r3, [r7, #12]
      break;
 8013c78:	e002      	b.n	8013c80 <paramSet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 8013c7a:	2308      	movs	r3, #8
 8013c7c:	60fb      	str	r3, [r7, #12]
      break;
 8013c7e:	bf00      	nop
  }

 	memcpy(params[index].address, data, paramLength);
 8013c80:	4b09      	ldr	r3, [pc, #36]	; (8013ca8 <paramSet+0x80>)
 8013c82:	6819      	ldr	r1, [r3, #0]
 8013c84:	88fa      	ldrh	r2, [r7, #6]
 8013c86:	4613      	mov	r3, r2
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	4413      	add	r3, r2
 8013c8c:	009b      	lsls	r3, r3, #2
 8013c8e:	440b      	add	r3, r1
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	6839      	ldr	r1, [r7, #0]
 8013c96:	4618      	mov	r0, r3
 8013c98:	f011 f86d 	bl	8024d76 <memcpy>

  return paramLength;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	2000bea4 	.word	0x2000bea4

08013cac <paramGet>:
 * @param data  The variable data
 *
 * @return number of bytes read
 **/
static int paramGet(uint16_t index, void *data)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	6039      	str	r1, [r7, #0]
 8013cb6:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 8013cbc:	4b1b      	ldr	r3, [pc, #108]	; (8013d2c <paramGet+0x80>)
 8013cbe:	6819      	ldr	r1, [r3, #0]
 8013cc0:	88fa      	ldrh	r2, [r7, #6]
 8013cc2:	4613      	mov	r3, r2
 8013cc4:	009b      	lsls	r3, r3, #2
 8013cc6:	4413      	add	r3, r2
 8013cc8:	009b      	lsls	r3, r3, #2
 8013cca:	440b      	add	r3, r1
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	f003 0303 	and.w	r3, r3, #3
 8013cd2:	2b03      	cmp	r3, #3
 8013cd4:	d816      	bhi.n	8013d04 <paramGet+0x58>
 8013cd6:	a201      	add	r2, pc, #4	; (adr r2, 8013cdc <paramGet+0x30>)
 8013cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cdc:	08013ced 	.word	0x08013ced
 8013ce0:	08013cf3 	.word	0x08013cf3
 8013ce4:	08013cf9 	.word	0x08013cf9
 8013ce8:	08013cff 	.word	0x08013cff
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8013cec:	2301      	movs	r3, #1
 8013cee:	60fb      	str	r3, [r7, #12]
      break;
 8013cf0:	e008      	b.n	8013d04 <paramGet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 8013cf2:	2302      	movs	r3, #2
 8013cf4:	60fb      	str	r3, [r7, #12]
      break;
 8013cf6:	e005      	b.n	8013d04 <paramGet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8013cf8:	2304      	movs	r3, #4
 8013cfa:	60fb      	str	r3, [r7, #12]
      break;
 8013cfc:	e002      	b.n	8013d04 <paramGet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 8013cfe:	2308      	movs	r3, #8
 8013d00:	60fb      	str	r3, [r7, #12]
      break;
 8013d02:	bf00      	nop
  }

 	memcpy(data, params[index].address, paramLength);
 8013d04:	4b09      	ldr	r3, [pc, #36]	; (8013d2c <paramGet+0x80>)
 8013d06:	6819      	ldr	r1, [r3, #0]
 8013d08:	88fa      	ldrh	r2, [r7, #6]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	4413      	add	r3, r2
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	440b      	add	r3, r1
 8013d14:	689b      	ldr	r3, [r3, #8]
 8013d16:	68fa      	ldr	r2, [r7, #12]
 8013d18:	4619      	mov	r1, r3
 8013d1a:	6838      	ldr	r0, [r7, #0]
 8013d1c:	f011 f82b 	bl	8024d76 <memcpy>

  return paramLength;
 8013d20:	68fb      	ldr	r3, [r7, #12]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3710      	adds	r7, #16
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	2000bea4 	.word	0x2000bea4

08013d30 <paramGetLen>:
 * Get param on [index] length in bytes
 *
 * @return number of bytes
 **/
static int paramGetLen(uint16_t index)
{
 8013d30:	b480      	push	{r7}
 8013d32:	b085      	sub	sp, #20
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	4603      	mov	r3, r0
 8013d38:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 8013d3e:	4b16      	ldr	r3, [pc, #88]	; (8013d98 <paramGetLen+0x68>)
 8013d40:	6819      	ldr	r1, [r3, #0]
 8013d42:	88fa      	ldrh	r2, [r7, #6]
 8013d44:	4613      	mov	r3, r2
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	4413      	add	r3, r2
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	440b      	add	r3, r1
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	f003 0303 	and.w	r3, r3, #3
 8013d54:	2b03      	cmp	r3, #3
 8013d56:	d817      	bhi.n	8013d88 <paramGetLen+0x58>
 8013d58:	a201      	add	r2, pc, #4	; (adr r2, 8013d60 <paramGetLen+0x30>)
 8013d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d5e:	bf00      	nop
 8013d60:	08013d71 	.word	0x08013d71
 8013d64:	08013d77 	.word	0x08013d77
 8013d68:	08013d7d 	.word	0x08013d7d
 8013d6c:	08013d83 	.word	0x08013d83
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8013d70:	2301      	movs	r3, #1
 8013d72:	60fb      	str	r3, [r7, #12]
      break;
 8013d74:	e008      	b.n	8013d88 <paramGetLen+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 8013d76:	2302      	movs	r3, #2
 8013d78:	60fb      	str	r3, [r7, #12]
      break;
 8013d7a:	e005      	b.n	8013d88 <paramGetLen+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8013d7c:	2304      	movs	r3, #4
 8013d7e:	60fb      	str	r3, [r7, #12]
      break;
 8013d80:	e002      	b.n	8013d88 <paramGetLen+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 8013d82:	2308      	movs	r3, #8
 8013d84:	60fb      	str	r3, [r7, #12]
      break;
 8013d86:	bf00      	nop
  }

  return paramLength;
 8013d88:	68fb      	ldr	r3, [r7, #12]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3714      	adds	r7, #20
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	2000bea4 	.word	0x2000bea4

08013d9c <paramLogicInit>:

void paramLogicInit(void)
{
 8013d9c:	b590      	push	{r4, r7, lr}
 8013d9e:	b08f      	sub	sp, #60	; 0x3c
 8013da0:	af00      	add	r7, sp, #0
  int i;
  const char* group = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	627b      	str	r3, [r7, #36]	; 0x24
  int groupLength = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t buf[30];

#ifndef UNIT_TEST_MODE
  params = &_param_start;
 8013daa:	4b66      	ldr	r3, [pc, #408]	; (8013f44 <paramLogicInit+0x1a8>)
 8013dac:	4a66      	ldr	r2, [pc, #408]	; (8013f48 <paramLogicInit+0x1ac>)
 8013dae:	601a      	str	r2, [r3, #0]
  paramsLen = &_param_stop - &_param_start;
 8013db0:	4a66      	ldr	r2, [pc, #408]	; (8013f4c <paramLogicInit+0x1b0>)
 8013db2:	4b65      	ldr	r3, [pc, #404]	; (8013f48 <paramLogicInit+0x1ac>)
 8013db4:	1ad3      	subs	r3, r2, r3
 8013db6:	109b      	asrs	r3, r3, #2
 8013db8:	4a65      	ldr	r2, [pc, #404]	; (8013f50 <paramLogicInit+0x1b4>)
 8013dba:	fb02 f303 	mul.w	r3, r2, r3
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	4b64      	ldr	r3, [pc, #400]	; (8013f54 <paramLogicInit+0x1b8>)
 8013dc2:	601a      	str	r2, [r3, #0]
#else
  params = _param_start;
  paramsLen = _param_stop - _param_start;
#endif
  // Calculate a hash of the toc by chaining description of each elements
  paramsCrc = 0;
 8013dc4:	4b64      	ldr	r3, [pc, #400]	; (8013f58 <paramLogicInit+0x1bc>)
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	601a      	str	r2, [r3, #0]
  for (int i=0; i<paramsLen; i++)
 8013dca:	2300      	movs	r3, #0
 8013dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013dce:	e091      	b.n	8013ef4 <paramLogicInit+0x158>
  {
    int len = 5;
 8013dd0:	2305      	movs	r3, #5
 8013dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8013dd4:	4b60      	ldr	r3, [pc, #384]	; (8013f58 <paramLogicInit+0x1bc>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
    memcpy(&buf[0], &paramsCrc, 4);
 8013dd8:	607b      	str	r3, [r7, #4]
    buf[4] = params[i].type;
 8013dda:	4b5a      	ldr	r3, [pc, #360]	; (8013f44 <paramLogicInit+0x1a8>)
 8013ddc:	6819      	ldr	r1, [r3, #0]
 8013dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013de0:	4613      	mov	r3, r2
 8013de2:	009b      	lsls	r3, r3, #2
 8013de4:	4413      	add	r3, r2
 8013de6:	009b      	lsls	r3, r3, #2
 8013de8:	440b      	add	r3, r1
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	723b      	strb	r3, [r7, #8]
    if (params[i].type & PARAM_GROUP) {
 8013dee:	4b55      	ldr	r3, [pc, #340]	; (8013f44 <paramLogicInit+0x1a8>)
 8013df0:	6819      	ldr	r1, [r3, #0]
 8013df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013df4:	4613      	mov	r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	4413      	add	r3, r2
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	440b      	add	r3, r1
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	b25b      	sxtb	r3, r3
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	da1c      	bge.n	8013e40 <paramLogicInit+0xa4>
      if (params[i].type & PARAM_START) {
 8013e06:	4b4f      	ldr	r3, [pc, #316]	; (8013f44 <paramLogicInit+0x1a8>)
 8013e08:	6819      	ldr	r1, [r3, #0]
 8013e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	4413      	add	r3, r2
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	440b      	add	r3, r1
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	f003 0301 	and.w	r3, r3, #1
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d026      	beq.n	8013e6e <paramLogicInit+0xd2>
        group = params[i].name;
 8013e20:	4b48      	ldr	r3, [pc, #288]	; (8013f44 <paramLogicInit+0x1a8>)
 8013e22:	6819      	ldr	r1, [r3, #0]
 8013e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e26:	4613      	mov	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	4413      	add	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	440b      	add	r3, r1
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	627b      	str	r3, [r7, #36]	; 0x24
        groupLength = strlen(group);
 8013e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e36:	f7ec fa2b 	bl	8000290 <strlen>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8013e3e:	e016      	b.n	8013e6e <paramLogicInit+0xd2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 4 + strlen(params[i].name) + groupLength + 2
      if (strlen(params[i].name) + groupLength + 2 > 26) {
 8013e40:	4b40      	ldr	r3, [pc, #256]	; (8013f44 <paramLogicInit+0x1a8>)
 8013e42:	6819      	ldr	r1, [r3, #0]
 8013e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e46:	4613      	mov	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	4413      	add	r3, r2
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	440b      	add	r3, r1
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7ec fa1c 	bl	8000290 <strlen>
 8013e58:	4602      	mov	r2, r0
 8013e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5c:	4413      	add	r3, r2
 8013e5e:	3302      	adds	r3, #2
 8013e60:	2b1a      	cmp	r3, #26
 8013e62:	d904      	bls.n	8013e6e <paramLogicInit+0xd2>
        PARAM_ERROR("'%s.%s' too long\n", group, params[i].name);
        ASSERT_FAILED();
 8013e64:	22fe      	movs	r2, #254	; 0xfe
 8013e66:	493d      	ldr	r1, [pc, #244]	; (8013f5c <paramLogicInit+0x1c0>)
 8013e68:	483d      	ldr	r0, [pc, #244]	; (8013f60 <paramLogicInit+0x1c4>)
 8013e6a:	f7fe f8df 	bl	801202c <assertFail>
      }
    }

    if (params[i].name) {
 8013e6e:	4b35      	ldr	r3, [pc, #212]	; (8013f44 <paramLogicInit+0x1a8>)
 8013e70:	6819      	ldr	r1, [r3, #0]
 8013e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e74:	4613      	mov	r3, r2
 8013e76:	009b      	lsls	r3, r3, #2
 8013e78:	4413      	add	r3, r2
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	440b      	add	r3, r1
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d02b      	beq.n	8013edc <paramLogicInit+0x140>
      memcpy(&buf[5], params[i].name, strlen(params[i].name));
 8013e84:	4b2f      	ldr	r3, [pc, #188]	; (8013f44 <paramLogicInit+0x1a8>)
 8013e86:	6819      	ldr	r1, [r3, #0]
 8013e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	4413      	add	r3, r2
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	440b      	add	r3, r1
 8013e94:	685c      	ldr	r4, [r3, #4]
 8013e96:	4b2b      	ldr	r3, [pc, #172]	; (8013f44 <paramLogicInit+0x1a8>)
 8013e98:	6819      	ldr	r1, [r3, #0]
 8013e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	009b      	lsls	r3, r3, #2
 8013ea0:	4413      	add	r3, r2
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	440b      	add	r3, r1
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7ec f9f1 	bl	8000290 <strlen>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	1d3b      	adds	r3, r7, #4
 8013eb2:	3305      	adds	r3, #5
 8013eb4:	4621      	mov	r1, r4
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f010 ff5d 	bl	8024d76 <memcpy>
      len += strlen(params[i].name);
 8013ebc:	4b21      	ldr	r3, [pc, #132]	; (8013f44 <paramLogicInit+0x1a8>)
 8013ebe:	6819      	ldr	r1, [r3, #0]
 8013ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	009b      	lsls	r3, r3, #2
 8013ec6:	4413      	add	r3, r2
 8013ec8:	009b      	lsls	r3, r3, #2
 8013eca:	440b      	add	r3, r1
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7ec f9de 	bl	8000290 <strlen>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	4413      	add	r3, r2
 8013eda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    paramsCrc = crc32CalculateBuffer(buf, len);
 8013edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ede:	1d3b      	adds	r3, r7, #4
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7fe f959 	bl	801219a <crc32CalculateBuffer>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	4a1b      	ldr	r2, [pc, #108]	; (8013f58 <paramLogicInit+0x1bc>)
 8013eec:	6013      	str	r3, [r2, #0]
  for (int i=0; i<paramsLen; i++)
 8013eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ef4:	4b17      	ldr	r3, [pc, #92]	; (8013f54 <paramLogicInit+0x1b8>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013efa:	429a      	cmp	r2, r3
 8013efc:	f6ff af68 	blt.w	8013dd0 <paramLogicInit+0x34>
  }

  for (i=0; i<paramsLen; i++)
 8013f00:	2300      	movs	r3, #0
 8013f02:	637b      	str	r3, [r7, #52]	; 0x34
 8013f04:	e014      	b.n	8013f30 <paramLogicInit+0x194>
  {
    if(!(params[i].type & PARAM_GROUP))
 8013f06:	4b0f      	ldr	r3, [pc, #60]	; (8013f44 <paramLogicInit+0x1a8>)
 8013f08:	6819      	ldr	r1, [r3, #0]
 8013f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	4413      	add	r3, r2
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	440b      	add	r3, r1
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	b25b      	sxtb	r3, r3
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	db05      	blt.n	8013f2a <paramLogicInit+0x18e>
      paramsCount++;
 8013f1e:	4b11      	ldr	r3, [pc, #68]	; (8013f64 <paramLogicInit+0x1c8>)
 8013f20:	881b      	ldrh	r3, [r3, #0]
 8013f22:	3301      	adds	r3, #1
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	4b0f      	ldr	r3, [pc, #60]	; (8013f64 <paramLogicInit+0x1c8>)
 8013f28:	801a      	strh	r2, [r3, #0]
  for (i=0; i<paramsLen; i++)
 8013f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8013f30:	4b08      	ldr	r3, [pc, #32]	; (8013f54 <paramLogicInit+0x1b8>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f36:	429a      	cmp	r2, r3
 8013f38:	dbe5      	blt.n	8013f06 <paramLogicInit+0x16a>
  }
}
 8013f3a:	bf00      	nop
 8013f3c:	bf00      	nop
 8013f3e:	373c      	adds	r7, #60	; 0x3c
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd90      	pop	{r4, r7, pc}
 8013f44:	2000bea4 	.word	0x2000bea4
 8013f48:	08028670 	.word	0x08028670
 8013f4c:	08029ae8 	.word	0x08029ae8
 8013f50:	cccccccd 	.word	0xcccccccd
 8013f54:	2000bea8 	.word	0x2000bea8
 8013f58:	2000beac 	.word	0x2000beac
 8013f5c:	0802d788 	.word	0x0802d788
 8013f60:	0802d7a8 	.word	0x0802d7a8
 8013f64:	2000beb0 	.word	0x2000beb0

08013f68 <paramTOCProcess>:

void paramTOCProcess(CRTPPacket *p, int command)
{
 8013f68:	b5b0      	push	{r4, r5, r7, lr}
 8013f6a:	b086      	sub	sp, #24
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
  int ptr = 0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	617b      	str	r3, [r7, #20]
  char * group = "";
 8013f76:	4b8e      	ldr	r3, [pc, #568]	; (80141b0 <paramTOCProcess+0x248>)
 8013f78:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	81fb      	strh	r3, [r7, #14]
  uint16_t paramId=0;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	81bb      	strh	r3, [r7, #12]

  switch (command)
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	2b03      	cmp	r3, #3
 8013f86:	f200 810e 	bhi.w	80141a6 <paramTOCProcess+0x23e>
 8013f8a:	a201      	add	r2, pc, #4	; (adr r2, 8013f90 <paramTOCProcess+0x28>)
 8013f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f90:	08013fd1 	.word	0x08013fd1
 8013f94:	08013fa1 	.word	0x08013fa1
 8013f98:	08014029 	.word	0x08014029
 8013f9c:	08013ff3 	.word	0x08013ff3
  {
    case CMD_GET_INFO: //Get info packet about the param implementation (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 8013fa0:	4984      	ldr	r1, [pc, #528]	; (80141b4 <paramTOCProcess+0x24c>)
 8013fa2:	2000      	movs	r0, #0
 8013fa4:	f7fd ff7e 	bl	8011ea4 <SEGGER_RTT_printf>
      ptr = 0;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	617b      	str	r3, [r7, #20]
      group = "";
 8013fac:	4b80      	ldr	r3, [pc, #512]	; (80141b0 <paramTOCProcess+0x248>)
 8013fae:	613b      	str	r3, [r7, #16]
      p->header = CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2220      	movs	r2, #32
 8013fb4:	705a      	strb	r2, [r3, #1]
      p->size = 4;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2204      	movs	r2, #4
 8013fba:	701a      	strb	r2, [r3, #0]
      p->data[0] = CMD_GET_INFO;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	709a      	strb	r2, [r3, #2]
      p->data[1] = 0; // Param count
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	70da      	strb	r2, [r3, #3]
      crtpSendPacketBlock(p);
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7ed fa6b 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8013fce:	e0ea      	b.n	80141a6 <paramTOCProcess+0x23e>
    case CMD_GET_ITEM:  //Get param variable (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 8013fd0:	4978      	ldr	r1, [pc, #480]	; (80141b4 <paramTOCProcess+0x24c>)
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	f7fd ff66 	bl	8011ea4 <SEGGER_RTT_printf>
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2220      	movs	r2, #32
 8013fdc:	705a      	strb	r2, [r3, #1]
      p->data[0]=CMD_GET_ITEM;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	709a      	strb	r2, [r3, #2]
      p->size=1;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7ed fa5a 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8013ff0:	e0d9      	b.n	80141a6 <paramTOCProcess+0x23e>
    case CMD_GET_INFO_V2: //Get info packet about the param implementation
      ptr = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	617b      	str	r3, [r7, #20]
      group = "";
 8013ff6:	4b6e      	ldr	r3, [pc, #440]	; (80141b0 <paramTOCProcess+0x248>)
 8013ff8:	613b      	str	r3, [r7, #16]
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2220      	movs	r2, #32
 8013ffe:	705a      	strb	r2, [r3, #1]
      p->size=7;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2207      	movs	r2, #7
 8014004:	701a      	strb	r2, [r3, #0]
      p->data[0]=CMD_GET_INFO_V2;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2203      	movs	r2, #3
 801400a:	709a      	strb	r2, [r3, #2]
      memcpy(&p->data[1], &paramsCount, 2);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	3303      	adds	r3, #3
 8014010:	4a69      	ldr	r2, [pc, #420]	; (80141b8 <paramTOCProcess+0x250>)
 8014012:	8812      	ldrh	r2, [r2, #0]
 8014014:	801a      	strh	r2, [r3, #0]
      memcpy(&p->data[3], &paramsCrc, 4);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	3305      	adds	r3, #5
 801401a:	4a68      	ldr	r2, [pc, #416]	; (80141bc <paramTOCProcess+0x254>)
 801401c:	6812      	ldr	r2, [r2, #0]
 801401e:	601a      	str	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ed fa3f 	bl	80014a4 <crtpSendPacketBlock>
      break;
 8014026:	e0be      	b.n	80141a6 <paramTOCProcess+0x23e>
    case CMD_GET_ITEM_V2:  //Get param variable
      memcpy(&paramId, &p->data[1], 2);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	3303      	adds	r3, #3
 801402c:	881b      	ldrh	r3, [r3, #0]
 801402e:	b29b      	uxth	r3, r3
 8014030:	81bb      	strh	r3, [r7, #12]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 8014032:	2300      	movs	r3, #0
 8014034:	617b      	str	r3, [r7, #20]
 8014036:	e030      	b.n	801409a <paramTOCProcess+0x132>
      {
        if (params[ptr].type & PARAM_GROUP)
 8014038:	4b61      	ldr	r3, [pc, #388]	; (80141c0 <paramTOCProcess+0x258>)
 801403a:	6819      	ldr	r1, [r3, #0]
 801403c:	697a      	ldr	r2, [r7, #20]
 801403e:	4613      	mov	r3, r2
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	4413      	add	r3, r2
 8014044:	009b      	lsls	r3, r3, #2
 8014046:	440b      	add	r3, r1
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	b25b      	sxtb	r3, r3
 801404c:	2b00      	cmp	r3, #0
 801404e:	da1a      	bge.n	8014086 <paramTOCProcess+0x11e>
        {
          if (params[ptr].type & PARAM_START)
 8014050:	4b5b      	ldr	r3, [pc, #364]	; (80141c0 <paramTOCProcess+0x258>)
 8014052:	6819      	ldr	r1, [r3, #0]
 8014054:	697a      	ldr	r2, [r7, #20]
 8014056:	4613      	mov	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	440b      	add	r3, r1
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	f003 0301 	and.w	r3, r3, #1
 8014066:	2b00      	cmp	r3, #0
 8014068:	d00a      	beq.n	8014080 <paramTOCProcess+0x118>
            group = params[ptr].name;
 801406a:	4b55      	ldr	r3, [pc, #340]	; (80141c0 <paramTOCProcess+0x258>)
 801406c:	6819      	ldr	r1, [r3, #0]
 801406e:	697a      	ldr	r2, [r7, #20]
 8014070:	4613      	mov	r3, r2
 8014072:	009b      	lsls	r3, r3, #2
 8014074:	4413      	add	r3, r2
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	440b      	add	r3, r1
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	613b      	str	r3, [r7, #16]
 801407e:	e009      	b.n	8014094 <paramTOCProcess+0x12c>
          else
            group = "";
 8014080:	4b4b      	ldr	r3, [pc, #300]	; (80141b0 <paramTOCProcess+0x248>)
 8014082:	613b      	str	r3, [r7, #16]
 8014084:	e006      	b.n	8014094 <paramTOCProcess+0x12c>
        }
        else                          //Ptr points a variable
        {
          if (n==paramId)
 8014086:	89bb      	ldrh	r3, [r7, #12]
 8014088:	89fa      	ldrh	r2, [r7, #14]
 801408a:	429a      	cmp	r2, r3
 801408c:	d00b      	beq.n	80140a6 <paramTOCProcess+0x13e>
            break;
          n++;
 801408e:	89fb      	ldrh	r3, [r7, #14]
 8014090:	3301      	adds	r3, #1
 8014092:	81fb      	strh	r3, [r7, #14]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	3301      	adds	r3, #1
 8014098:	617b      	str	r3, [r7, #20]
 801409a:	4b4a      	ldr	r3, [pc, #296]	; (80141c4 <paramTOCProcess+0x25c>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	697a      	ldr	r2, [r7, #20]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	dbc9      	blt.n	8014038 <paramTOCProcess+0xd0>
 80140a4:	e000      	b.n	80140a8 <paramTOCProcess+0x140>
            break;
 80140a6:	bf00      	nop
        }
      }

      if (ptr<paramsLen)
 80140a8:	4b46      	ldr	r3, [pc, #280]	; (80141c4 <paramTOCProcess+0x25c>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	697a      	ldr	r2, [r7, #20]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	da6c      	bge.n	801418c <paramTOCProcess+0x224>
      {
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2220      	movs	r2, #32
 80140b6:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2202      	movs	r2, #2
 80140bc:	709a      	strb	r2, [r3, #2]
        memcpy(&p->data[1], &paramId, 2);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	3303      	adds	r3, #3
 80140c2:	89ba      	ldrh	r2, [r7, #12]
 80140c4:	801a      	strh	r2, [r3, #0]
        p->data[3] = params[ptr].type;
 80140c6:	4b3e      	ldr	r3, [pc, #248]	; (80141c0 <paramTOCProcess+0x258>)
 80140c8:	6819      	ldr	r1, [r3, #0]
 80140ca:	697a      	ldr	r2, [r7, #20]
 80140cc:	4613      	mov	r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4413      	add	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	440b      	add	r3, r1
 80140d6:	781a      	ldrb	r2, [r3, #0]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	715a      	strb	r2, [r3, #5]
        p->size = 4 + 2 + strlen(group) + strlen(params[ptr].name);
 80140dc:	6938      	ldr	r0, [r7, #16]
 80140de:	f7ec f8d7 	bl	8000290 <strlen>
 80140e2:	4603      	mov	r3, r0
 80140e4:	b2dc      	uxtb	r4, r3
 80140e6:	4b36      	ldr	r3, [pc, #216]	; (80141c0 <paramTOCProcess+0x258>)
 80140e8:	6819      	ldr	r1, [r3, #0]
 80140ea:	697a      	ldr	r2, [r7, #20]
 80140ec:	4613      	mov	r3, r2
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	4413      	add	r3, r2
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	440b      	add	r3, r1
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ec f8c9 	bl	8000290 <strlen>
 80140fe:	4603      	mov	r3, r0
 8014100:	b2db      	uxtb	r3, r3
 8014102:	4423      	add	r3, r4
 8014104:	b2db      	uxtb	r3, r3
 8014106:	3306      	adds	r3, #6
 8014108:	b2da      	uxtb	r2, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	701a      	strb	r2, [r3, #0]
        ASSERT(p->size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	2b1e      	cmp	r3, #30
 8014114:	d905      	bls.n	8014122 <paramTOCProcess+0x1ba>
 8014116:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 801411a:	492b      	ldr	r1, [pc, #172]	; (80141c8 <paramTOCProcess+0x260>)
 801411c:	482b      	ldr	r0, [pc, #172]	; (80141cc <paramTOCProcess+0x264>)
 801411e:	f7fd ff85 	bl	801202c <assertFail>
        memcpy(p->data+4, group, strlen(group)+1);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	3302      	adds	r3, #2
 8014126:	1d1c      	adds	r4, r3, #4
 8014128:	6938      	ldr	r0, [r7, #16]
 801412a:	f7ec f8b1 	bl	8000290 <strlen>
 801412e:	4603      	mov	r3, r0
 8014130:	3301      	adds	r3, #1
 8014132:	461a      	mov	r2, r3
 8014134:	6939      	ldr	r1, [r7, #16]
 8014136:	4620      	mov	r0, r4
 8014138:	f010 fe1d 	bl	8024d76 <memcpy>
        memcpy(p->data+4+strlen(group)+1, params[ptr].name, strlen(params[ptr].name)+1);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	1c9c      	adds	r4, r3, #2
 8014140:	6938      	ldr	r0, [r7, #16]
 8014142:	f7ec f8a5 	bl	8000290 <strlen>
 8014146:	4603      	mov	r3, r0
 8014148:	3305      	adds	r3, #5
 801414a:	441c      	add	r4, r3
 801414c:	4b1c      	ldr	r3, [pc, #112]	; (80141c0 <paramTOCProcess+0x258>)
 801414e:	6819      	ldr	r1, [r3, #0]
 8014150:	697a      	ldr	r2, [r7, #20]
 8014152:	4613      	mov	r3, r2
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	4413      	add	r3, r2
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	440b      	add	r3, r1
 801415c:	685d      	ldr	r5, [r3, #4]
 801415e:	4b18      	ldr	r3, [pc, #96]	; (80141c0 <paramTOCProcess+0x258>)
 8014160:	6819      	ldr	r1, [r3, #0]
 8014162:	697a      	ldr	r2, [r7, #20]
 8014164:	4613      	mov	r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	4413      	add	r3, r2
 801416a:	009b      	lsls	r3, r3, #2
 801416c:	440b      	add	r3, r1
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	4618      	mov	r0, r3
 8014172:	f7ec f88d 	bl	8000290 <strlen>
 8014176:	4603      	mov	r3, r0
 8014178:	3301      	adds	r3, #1
 801417a:	461a      	mov	r2, r3
 801417c:	4629      	mov	r1, r5
 801417e:	4620      	mov	r0, r4
 8014180:	f010 fdf9 	bl	8024d76 <memcpy>
        crtpSendPacketBlock(p);
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f7ed f98d 	bl	80014a4 <crtpSendPacketBlock>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
        p->data[0]=CMD_GET_ITEM_V2;
        p->size=1;
        crtpSendPacketBlock(p);
      }
      break;
 801418a:	e00b      	b.n	80141a4 <paramTOCProcess+0x23c>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2220      	movs	r2, #32
 8014190:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2202      	movs	r2, #2
 8014196:	709a      	strb	r2, [r3, #2]
        p->size=1;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2201      	movs	r2, #1
 801419c:	701a      	strb	r2, [r3, #0]
        crtpSendPacketBlock(p);
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f7ed f980 	bl	80014a4 <crtpSendPacketBlock>
      break;
 80141a4:	bf00      	nop
  }
}
 80141a6:	bf00      	nop
 80141a8:	3718      	adds	r7, #24
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bdb0      	pop	{r4, r5, r7, pc}
 80141ae:	bf00      	nop
 80141b0:	0802d7a8 	.word	0x0802d7a8
 80141b4:	0802d7ac 	.word	0x0802d7ac
 80141b8:	2000beb0 	.word	0x2000beb0
 80141bc:	2000beac 	.word	0x2000beac
 80141c0:	2000bea4 	.word	0x2000bea4
 80141c4:	2000bea8 	.word	0x2000bea8
 80141c8:	0802d788 	.word	0x0802d788
 80141cc:	0802d7d4 	.word	0x0802d7d4

080141d0 <paramWriteProcess>:

void paramWriteProcess(CRTPPacket *p)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b086      	sub	sp, #24
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	3302      	adds	r3, #2
 80141dc:	881b      	ldrh	r3, [r3, #0]
 80141de:	b29b      	uxth	r3, r3
 80141e0:	81fb      	strh	r3, [r7, #14]

  void* valptr = &p->data[2];
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	3304      	adds	r3, #4
 80141e6:	617b      	str	r3, [r7, #20]
  int index;

  index = variableGetIndex(id);
 80141e8:	89fb      	ldrh	r3, [r7, #14]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f000 f90e 	bl	801440c <variableGetIndex>
 80141f0:	6138      	str	r0, [r7, #16]

  if (index < 0) {
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	da09      	bge.n	801420c <paramWriteProcess+0x3c>
    p->data[2] = ENOENT;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2202      	movs	r2, #2
 80141fc:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2203      	movs	r2, #3
 8014202:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ed f94d 	bl	80014a4 <crtpSendPacketBlock>
    return;
 801420a:	e01a      	b.n	8014242 <paramWriteProcess+0x72>
  }

  if (params[index].type & PARAM_RONLY)
 801420c:	4b0e      	ldr	r3, [pc, #56]	; (8014248 <paramWriteProcess+0x78>)
 801420e:	6819      	ldr	r1, [r3, #0]
 8014210:	693a      	ldr	r2, [r7, #16]
 8014212:	4613      	mov	r3, r2
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	4413      	add	r3, r2
 8014218:	009b      	lsls	r3, r3, #2
 801421a:	440b      	add	r3, r1
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014222:	2b00      	cmp	r3, #0
 8014224:	d10c      	bne.n	8014240 <paramWriteProcess+0x70>
    return;

  paramSet(index, valptr);
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	b29b      	uxth	r3, r3
 801422a:	6979      	ldr	r1, [r7, #20]
 801422c:	4618      	mov	r0, r3
 801422e:	f7ff fcfb 	bl	8013c28 <paramSet>

  crtpSendPacketBlock(p);
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f7ed f936 	bl	80014a4 <crtpSendPacketBlock>

  paramNotifyChanged(index);
 8014238:	6938      	ldr	r0, [r7, #16]
 801423a:	f000 f807 	bl	801424c <paramNotifyChanged>
 801423e:	e000      	b.n	8014242 <paramWriteProcess+0x72>
    return;
 8014240:	bf00      	nop
}
 8014242:	3718      	adds	r7, #24
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	2000bea4 	.word	0x2000bea4

0801424c <paramNotifyChanged>:

static void paramNotifyChanged(int index) {
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  if (params[index].callback) {
 8014254:	4b0c      	ldr	r3, [pc, #48]	; (8014288 <paramNotifyChanged+0x3c>)
 8014256:	6819      	ldr	r1, [r3, #0]
 8014258:	687a      	ldr	r2, [r7, #4]
 801425a:	4613      	mov	r3, r2
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	4413      	add	r3, r2
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	440b      	add	r3, r1
 8014264:	68db      	ldr	r3, [r3, #12]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d009      	beq.n	801427e <paramNotifyChanged+0x32>
    params[index].callback();
 801426a:	4b07      	ldr	r3, [pc, #28]	; (8014288 <paramNotifyChanged+0x3c>)
 801426c:	6819      	ldr	r1, [r3, #0]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	4613      	mov	r3, r2
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4413      	add	r3, r2
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	440b      	add	r3, r1
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	4798      	blx	r3
  }
}
 801427e:	bf00      	nop
 8014280:	3708      	adds	r7, #8
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	2000bea4 	.word	0x2000bea4

0801428c <paramWriteByNameProcess>:

static char paramWriteByNameProcess(char* group, char* name, int type, void *valptr) {
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	607a      	str	r2, [r7, #4]
 8014298:	603b      	str	r3, [r7, #0]
  int index;
  char *pgroup = "";
 801429a:	4b40      	ldr	r3, [pc, #256]	; (801439c <paramWriteByNameProcess+0x110>)
 801429c:	613b      	str	r3, [r7, #16]

  for (index = 0; index < paramsLen; index++) //Ptr points a group
 801429e:	2300      	movs	r3, #0
 80142a0:	617b      	str	r3, [r7, #20]
 80142a2:	e040      	b.n	8014326 <paramWriteByNameProcess+0x9a>
  {
    if (params[index].type & PARAM_GROUP)
 80142a4:	4b3e      	ldr	r3, [pc, #248]	; (80143a0 <paramWriteByNameProcess+0x114>)
 80142a6:	6819      	ldr	r1, [r3, #0]
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	4613      	mov	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4413      	add	r3, r2
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	440b      	add	r3, r1
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	b25b      	sxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	da1a      	bge.n	80142f2 <paramWriteByNameProcess+0x66>
    {
      if (params[index].type & PARAM_START)
 80142bc:	4b38      	ldr	r3, [pc, #224]	; (80143a0 <paramWriteByNameProcess+0x114>)
 80142be:	6819      	ldr	r1, [r3, #0]
 80142c0:	697a      	ldr	r2, [r7, #20]
 80142c2:	4613      	mov	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	4413      	add	r3, r2
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	440b      	add	r3, r1
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	f003 0301 	and.w	r3, r3, #1
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00a      	beq.n	80142ec <paramWriteByNameProcess+0x60>
        pgroup = params[index].name;
 80142d6:	4b32      	ldr	r3, [pc, #200]	; (80143a0 <paramWriteByNameProcess+0x114>)
 80142d8:	6819      	ldr	r1, [r3, #0]
 80142da:	697a      	ldr	r2, [r7, #20]
 80142dc:	4613      	mov	r3, r2
 80142de:	009b      	lsls	r3, r3, #2
 80142e0:	4413      	add	r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	440b      	add	r3, r1
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	613b      	str	r3, [r7, #16]
 80142ea:	e019      	b.n	8014320 <paramWriteByNameProcess+0x94>
      else
        pgroup = "";
 80142ec:	4b2b      	ldr	r3, [pc, #172]	; (801439c <paramWriteByNameProcess+0x110>)
 80142ee:	613b      	str	r3, [r7, #16]
 80142f0:	e016      	b.n	8014320 <paramWriteByNameProcess+0x94>
    }
    else                          //Ptr points a variable
    {
      if (!strcmp(params[index].name, name) && !strcmp(pgroup, group))
 80142f2:	4b2b      	ldr	r3, [pc, #172]	; (80143a0 <paramWriteByNameProcess+0x114>)
 80142f4:	6819      	ldr	r1, [r3, #0]
 80142f6:	697a      	ldr	r2, [r7, #20]
 80142f8:	4613      	mov	r3, r2
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	4413      	add	r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	440b      	add	r3, r1
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	68b9      	ldr	r1, [r7, #8]
 8014306:	4618      	mov	r0, r3
 8014308:	f7eb ff62 	bl	80001d0 <strcmp>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d106      	bne.n	8014320 <paramWriteByNameProcess+0x94>
 8014312:	68f9      	ldr	r1, [r7, #12]
 8014314:	6938      	ldr	r0, [r7, #16]
 8014316:	f7eb ff5b 	bl	80001d0 <strcmp>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d008      	beq.n	8014332 <paramWriteByNameProcess+0xa6>
  for (index = 0; index < paramsLen; index++) //Ptr points a group
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	3301      	adds	r3, #1
 8014324:	617b      	str	r3, [r7, #20]
 8014326:	4b1f      	ldr	r3, [pc, #124]	; (80143a4 <paramWriteByNameProcess+0x118>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	697a      	ldr	r2, [r7, #20]
 801432c:	429a      	cmp	r2, r3
 801432e:	dbb9      	blt.n	80142a4 <paramWriteByNameProcess+0x18>
 8014330:	e000      	b.n	8014334 <paramWriteByNameProcess+0xa8>
        break;
 8014332:	bf00      	nop
    }
  }

  if (index >= paramsLen) {
 8014334:	4b1b      	ldr	r3, [pc, #108]	; (80143a4 <paramWriteByNameProcess+0x118>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	697a      	ldr	r2, [r7, #20]
 801433a:	429a      	cmp	r2, r3
 801433c:	db01      	blt.n	8014342 <paramWriteByNameProcess+0xb6>
    return ENOENT;
 801433e:	2302      	movs	r3, #2
 8014340:	e028      	b.n	8014394 <paramWriteByNameProcess+0x108>
  }

  if (type != (params[index].type & (~(PARAM_CORE | PARAM_RONLY | PARAM_EXTENDED)))) {
 8014342:	4b17      	ldr	r3, [pc, #92]	; (80143a0 <paramWriteByNameProcess+0x114>)
 8014344:	6819      	ldr	r1, [r3, #0]
 8014346:	697a      	ldr	r2, [r7, #20]
 8014348:	4613      	mov	r3, r2
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	4413      	add	r3, r2
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	440b      	add	r3, r1
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	429a      	cmp	r2, r3
 801435c:	d001      	beq.n	8014362 <paramWriteByNameProcess+0xd6>
    return EINVAL;
 801435e:	2316      	movs	r3, #22
 8014360:	e018      	b.n	8014394 <paramWriteByNameProcess+0x108>
  }

  if (params[index].type & PARAM_RONLY) {
 8014362:	4b0f      	ldr	r3, [pc, #60]	; (80143a0 <paramWriteByNameProcess+0x114>)
 8014364:	6819      	ldr	r1, [r3, #0]
 8014366:	697a      	ldr	r2, [r7, #20]
 8014368:	4613      	mov	r3, r2
 801436a:	009b      	lsls	r3, r3, #2
 801436c:	4413      	add	r3, r2
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	440b      	add	r3, r1
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014378:	2b00      	cmp	r3, #0
 801437a:	d001      	beq.n	8014380 <paramWriteByNameProcess+0xf4>
    return EACCES;
 801437c:	230d      	movs	r3, #13
 801437e:	e009      	b.n	8014394 <paramWriteByNameProcess+0x108>
  }

  paramSet(index, valptr);
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	b29b      	uxth	r3, r3
 8014384:	6839      	ldr	r1, [r7, #0]
 8014386:	4618      	mov	r0, r3
 8014388:	f7ff fc4e 	bl	8013c28 <paramSet>

  paramNotifyChanged(index);
 801438c:	6978      	ldr	r0, [r7, #20]
 801438e:	f7ff ff5d 	bl	801424c <paramNotifyChanged>

  return 0;
 8014392:	2300      	movs	r3, #0
}
 8014394:	4618      	mov	r0, r3
 8014396:	3718      	adds	r7, #24
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	0802d7a8 	.word	0x0802d7a8
 80143a0:	2000bea4 	.word	0x2000bea4
 80143a4:	2000bea8 	.word	0x2000bea8

080143a8 <paramReadProcess>:

void paramReadProcess(CRTPPacket *p)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	3302      	adds	r3, #2
 80143b4:	881b      	ldrh	r3, [r3, #0]
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	817b      	strh	r3, [r7, #10]
  int index = variableGetIndex(id);
 80143ba:	897b      	ldrh	r3, [r7, #10]
 80143bc:	4618      	mov	r0, r3
 80143be:	f000 f825 	bl	801440c <variableGetIndex>
 80143c2:	60f8      	str	r0, [r7, #12]

  if (index<0) {
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	da09      	bge.n	80143de <paramReadProcess+0x36>
    p->data[2] = ENOENT;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2202      	movs	r2, #2
 80143ce:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2203      	movs	r2, #3
 80143d4:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7ed f864 	bl	80014a4 <crtpSendPacketBlock>
 80143dc:	e013      	b.n	8014406 <paramReadProcess+0x5e>
    return;
  }
  p->data[2] = 0;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	711a      	strb	r2, [r3, #4]
  p->size = 3 + paramGet(index, &p->data[3]);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	3305      	adds	r3, #5
 80143ec:	4619      	mov	r1, r3
 80143ee:	4610      	mov	r0, r2
 80143f0:	f7ff fc5c 	bl	8013cac <paramGet>
 80143f4:	4603      	mov	r3, r0
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	3303      	adds	r3, #3
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f7ed f84f 	bl	80014a4 <crtpSendPacketBlock>
}
 8014406:	3710      	adds	r7, #16
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <variableGetIndex>:

static int variableGetIndex(int id)
{
 801440c:	b480      	push	{r7}
 801440e:	b085      	sub	sp, #20
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  int i;
  int n = 0;
 8014414:	2300      	movs	r3, #0
 8014416:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < paramsLen; i++)
 8014418:	2300      	movs	r3, #0
 801441a:	60fb      	str	r3, [r7, #12]
 801441c:	e015      	b.n	801444a <variableGetIndex+0x3e>
  {
    if(!(params[i].type & PARAM_GROUP))
 801441e:	4b16      	ldr	r3, [pc, #88]	; (8014478 <variableGetIndex+0x6c>)
 8014420:	6819      	ldr	r1, [r3, #0]
 8014422:	68fa      	ldr	r2, [r7, #12]
 8014424:	4613      	mov	r3, r2
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	4413      	add	r3, r2
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	440b      	add	r3, r1
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	b25b      	sxtb	r3, r3
 8014432:	2b00      	cmp	r3, #0
 8014434:	db06      	blt.n	8014444 <variableGetIndex+0x38>
    {
      if(n == id) {
 8014436:	68ba      	ldr	r2, [r7, #8]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	429a      	cmp	r2, r3
 801443c:	d00b      	beq.n	8014456 <variableGetIndex+0x4a>
        break;
      }
      n++;
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	3301      	adds	r3, #1
 8014442:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < paramsLen; i++)
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	3301      	adds	r3, #1
 8014448:	60fb      	str	r3, [r7, #12]
 801444a:	4b0c      	ldr	r3, [pc, #48]	; (801447c <variableGetIndex+0x70>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	68fa      	ldr	r2, [r7, #12]
 8014450:	429a      	cmp	r2, r3
 8014452:	dbe4      	blt.n	801441e <variableGetIndex+0x12>
 8014454:	e000      	b.n	8014458 <variableGetIndex+0x4c>
        break;
 8014456:	bf00      	nop
    }
  }

  if (i >= paramsLen)
 8014458:	4b08      	ldr	r3, [pc, #32]	; (801447c <variableGetIndex+0x70>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	429a      	cmp	r2, r3
 8014460:	db02      	blt.n	8014468 <variableGetIndex+0x5c>
    return -1;
 8014462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014466:	e000      	b.n	801446a <variableGetIndex+0x5e>

  return i;
 8014468:	68fb      	ldr	r3, [r7, #12]
}
 801446a:	4618      	mov	r0, r3
 801446c:	3714      	adds	r7, #20
 801446e:	46bd      	mov	sp, r7
 8014470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop
 8014478:	2000bea4 	.word	0x2000bea4
 801447c:	2000bea8 	.word	0x2000bea8

08014480 <paramGetVarIdFromComplete>:

/* Public API to access param TOC from within the copter */
static paramVarId_t invalidVarId = {0xffffu, 0xffffu};

paramVarId_t paramGetVarIdFromComplete(const char* completeName)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b08e      	sub	sp, #56	; 0x38
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  char group[32] = { 0, };
 8014488:	2300      	movs	r3, #0
 801448a:	60bb      	str	r3, [r7, #8]
 801448c:	f107 030c 	add.w	r3, r7, #12
 8014490:	2200      	movs	r2, #0
 8014492:	601a      	str	r2, [r3, #0]
 8014494:	605a      	str	r2, [r3, #4]
 8014496:	609a      	str	r2, [r3, #8]
 8014498:	60da      	str	r2, [r3, #12]
 801449a:	611a      	str	r2, [r3, #16]
 801449c:	615a      	str	r2, [r3, #20]
 801449e:	619a      	str	r2, [r3, #24]

  char *dot = strchr(completeName, '.');
 80144a0:	212e      	movs	r1, #46	; 0x2e
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f010 fb03 	bl	8024aae <strchr>
 80144a8:	6378      	str	r0, [r7, #52]	; 0x34
  if (!dot) {
 80144aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d103      	bne.n	80144b8 <paramGetVarIdFromComplete+0x38>
    return invalidVarId;
 80144b0:	4b17      	ldr	r3, [pc, #92]	; (8014510 <paramGetVarIdFromComplete+0x90>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80144b6:	e015      	b.n	80144e4 <paramGetVarIdFromComplete+0x64>
  }

  size_t group_len = dot - completeName;
 80144b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	1ad3      	subs	r3, r2, r3
 80144be:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(group, completeName, group_len);
 80144c0:	f107 0308 	add.w	r3, r7, #8
 80144c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144c6:	6879      	ldr	r1, [r7, #4]
 80144c8:	4618      	mov	r0, r3
 80144ca:	f010 fc54 	bl	8024d76 <memcpy>
  char *name = (char *) (dot + 1);
 80144ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144d0:	3301      	adds	r3, #1
 80144d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  return paramGetVarId(group, name);
 80144d4:	f107 0308 	add.w	r3, r7, #8
 80144d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80144da:	4618      	mov	r0, r3
 80144dc:	f000 f81a 	bl	8014514 <paramGetVarId>
 80144e0:	4603      	mov	r3, r0
 80144e2:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80144e4:	2300      	movs	r3, #0
 80144e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80144ea:	f362 0307 	bfi	r3, r2, #0, #8
 80144ee:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80144f2:	f362 230f 	bfi	r3, r2, #8, #8
 80144f6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80144fa:	f362 4317 	bfi	r3, r2, #16, #8
 80144fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8014502:	f362 631f 	bfi	r3, r2, #24, #8
 8014506:	4618      	mov	r0, r3
 8014508:	3738      	adds	r7, #56	; 0x38
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	20000ee4 	.word	0x20000ee4

08014514 <paramGetVarId>:

paramVarId_t paramGetVarId(const char* group, const char* name)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b086      	sub	sp, #24
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  uint16_t index;
  uint16_t id = 0;
 801451e:	2300      	movs	r3, #0
 8014520:	82bb      	strh	r3, [r7, #20]
  paramVarId_t varId = invalidVarId;
 8014522:	4b35      	ldr	r3, [pc, #212]	; (80145f8 <paramGetVarId+0xe4>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	60bb      	str	r3, [r7, #8]
  char * currgroup = "";
 8014528:	4b34      	ldr	r3, [pc, #208]	; (80145fc <paramGetVarId+0xe8>)
 801452a:	613b      	str	r3, [r7, #16]

  for(index = 0; index < paramsLen; index++)
 801452c:	2300      	movs	r3, #0
 801452e:	82fb      	strh	r3, [r7, #22]
 8014530:	e049      	b.n	80145c6 <paramGetVarId+0xb2>
  {
    if (params[index].type & PARAM_GROUP) {
 8014532:	4b33      	ldr	r3, [pc, #204]	; (8014600 <paramGetVarId+0xec>)
 8014534:	6819      	ldr	r1, [r3, #0]
 8014536:	8afa      	ldrh	r2, [r7, #22]
 8014538:	4613      	mov	r3, r2
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	4413      	add	r3, r2
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	440b      	add	r3, r1
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	b25b      	sxtb	r3, r3
 8014546:	2b00      	cmp	r3, #0
 8014548:	da17      	bge.n	801457a <paramGetVarId+0x66>
      if (params[index].type & PARAM_START) {
 801454a:	4b2d      	ldr	r3, [pc, #180]	; (8014600 <paramGetVarId+0xec>)
 801454c:	6819      	ldr	r1, [r3, #0]
 801454e:	8afa      	ldrh	r2, [r7, #22]
 8014550:	4613      	mov	r3, r2
 8014552:	009b      	lsls	r3, r3, #2
 8014554:	4413      	add	r3, r2
 8014556:	009b      	lsls	r3, r3, #2
 8014558:	440b      	add	r3, r1
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	f003 0301 	and.w	r3, r3, #1
 8014560:	2b00      	cmp	r3, #0
 8014562:	d00d      	beq.n	8014580 <paramGetVarId+0x6c>
        currgroup = params[index].name;
 8014564:	4b26      	ldr	r3, [pc, #152]	; (8014600 <paramGetVarId+0xec>)
 8014566:	6819      	ldr	r1, [r3, #0]
 8014568:	8afa      	ldrh	r2, [r7, #22]
 801456a:	4613      	mov	r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	4413      	add	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	440b      	add	r3, r1
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	613b      	str	r3, [r7, #16]
 8014578:	e002      	b.n	8014580 <paramGetVarId+0x6c>
      }
    } else {
      id += 1;
 801457a:	8abb      	ldrh	r3, [r7, #20]
 801457c:	3301      	adds	r3, #1
 801457e:	82bb      	strh	r3, [r7, #20]
    }

    if ((!strcmp(group, currgroup)) && (!strcmp(name, params[index].name))) {
 8014580:	6939      	ldr	r1, [r7, #16]
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f7eb fe24 	bl	80001d0 <strcmp>
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d118      	bne.n	80145c0 <paramGetVarId+0xac>
 801458e:	4b1c      	ldr	r3, [pc, #112]	; (8014600 <paramGetVarId+0xec>)
 8014590:	6819      	ldr	r1, [r3, #0]
 8014592:	8afa      	ldrh	r2, [r7, #22]
 8014594:	4613      	mov	r3, r2
 8014596:	009b      	lsls	r3, r3, #2
 8014598:	4413      	add	r3, r2
 801459a:	009b      	lsls	r3, r3, #2
 801459c:	440b      	add	r3, r1
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	4619      	mov	r1, r3
 80145a2:	6838      	ldr	r0, [r7, #0]
 80145a4:	f7eb fe14 	bl	80001d0 <strcmp>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d108      	bne.n	80145c0 <paramGetVarId+0xac>
      varId.index = index;
 80145ae:	8afb      	ldrh	r3, [r7, #22]
 80145b0:	817b      	strh	r3, [r7, #10]
      varId.id = id - 1;
 80145b2:	8abb      	ldrh	r3, [r7, #20]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	813b      	strh	r3, [r7, #8]
      return varId;
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	60fb      	str	r3, [r7, #12]
 80145be:	e00a      	b.n	80145d6 <paramGetVarId+0xc2>
  for(index = 0; index < paramsLen; index++)
 80145c0:	8afb      	ldrh	r3, [r7, #22]
 80145c2:	3301      	adds	r3, #1
 80145c4:	82fb      	strh	r3, [r7, #22]
 80145c6:	8afa      	ldrh	r2, [r7, #22]
 80145c8:	4b0e      	ldr	r3, [pc, #56]	; (8014604 <paramGetVarId+0xf0>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	dbb0      	blt.n	8014532 <paramGetVarId+0x1e>
    }
  }

  return invalidVarId;
 80145d0:	4b09      	ldr	r3, [pc, #36]	; (80145f8 <paramGetVarId+0xe4>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	60fb      	str	r3, [r7, #12]
}
 80145d6:	2300      	movs	r3, #0
 80145d8:	7b3a      	ldrb	r2, [r7, #12]
 80145da:	f362 0307 	bfi	r3, r2, #0, #8
 80145de:	7b7a      	ldrb	r2, [r7, #13]
 80145e0:	f362 230f 	bfi	r3, r2, #8, #8
 80145e4:	7bba      	ldrb	r2, [r7, #14]
 80145e6:	f362 4317 	bfi	r3, r2, #16, #8
 80145ea:	7bfa      	ldrb	r2, [r7, #15]
 80145ec:	f362 631f 	bfi	r3, r2, #24, #8
 80145f0:	4618      	mov	r0, r3
 80145f2:	3718      	adds	r7, #24
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	20000ee4 	.word	0x20000ee4
 80145fc:	0802d7a8 	.word	0x0802d7a8
 8014600:	2000bea4 	.word	0x2000bea4
 8014604:	2000bea8 	.word	0x2000bea8

08014608 <paramGetGroupAndName>:
{
  return params[varid.index].type;
}

void paramGetGroupAndName(paramVarId_t varid, char** group, char** name)
{
 8014608:	b480      	push	{r7}
 801460a:	b087      	sub	sp, #28
 801460c:	af00      	add	r7, sp, #0
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
  char * currgroup = "";
 8014614:	4b28      	ldr	r3, [pc, #160]	; (80146b8 <paramGetGroupAndName+0xb0>)
 8014616:	617b      	str	r3, [r7, #20]
  *group = 0;
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	2200      	movs	r2, #0
 801461c:	601a      	str	r2, [r3, #0]
  *name = 0;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2200      	movs	r2, #0
 8014622:	601a      	str	r2, [r3, #0]

  for(int index = 0; index < paramsLen; index++) {
 8014624:	2300      	movs	r3, #0
 8014626:	613b      	str	r3, [r7, #16]
 8014628:	e039      	b.n	801469e <paramGetGroupAndName+0x96>
    if (params[index].type & PARAM_GROUP) {
 801462a:	4b24      	ldr	r3, [pc, #144]	; (80146bc <paramGetGroupAndName+0xb4>)
 801462c:	6819      	ldr	r1, [r3, #0]
 801462e:	693a      	ldr	r2, [r7, #16]
 8014630:	4613      	mov	r3, r2
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	4413      	add	r3, r2
 8014636:	009b      	lsls	r3, r3, #2
 8014638:	440b      	add	r3, r1
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	b25b      	sxtb	r3, r3
 801463e:	2b00      	cmp	r3, #0
 8014640:	da16      	bge.n	8014670 <paramGetGroupAndName+0x68>
      if (params[index].type & PARAM_START) {
 8014642:	4b1e      	ldr	r3, [pc, #120]	; (80146bc <paramGetGroupAndName+0xb4>)
 8014644:	6819      	ldr	r1, [r3, #0]
 8014646:	693a      	ldr	r2, [r7, #16]
 8014648:	4613      	mov	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	440b      	add	r3, r1
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	f003 0301 	and.w	r3, r3, #1
 8014658:	2b00      	cmp	r3, #0
 801465a:	d009      	beq.n	8014670 <paramGetGroupAndName+0x68>
        currgroup = params[index].name;
 801465c:	4b17      	ldr	r3, [pc, #92]	; (80146bc <paramGetGroupAndName+0xb4>)
 801465e:	6819      	ldr	r1, [r3, #0]
 8014660:	693a      	ldr	r2, [r7, #16]
 8014662:	4613      	mov	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4413      	add	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	440b      	add	r3, r1
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	617b      	str	r3, [r7, #20]
      }
    }

    if (index == varid.index) {
 8014670:	89fb      	ldrh	r3, [r7, #14]
 8014672:	461a      	mov	r2, r3
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	4293      	cmp	r3, r2
 8014678:	d10e      	bne.n	8014698 <paramGetGroupAndName+0x90>
      *group = currgroup;
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	697a      	ldr	r2, [r7, #20]
 801467e:	601a      	str	r2, [r3, #0]
      *name = params[index].name;
 8014680:	4b0e      	ldr	r3, [pc, #56]	; (80146bc <paramGetGroupAndName+0xb4>)
 8014682:	6819      	ldr	r1, [r3, #0]
 8014684:	693a      	ldr	r2, [r7, #16]
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	440b      	add	r3, r1
 8014690:	685a      	ldr	r2, [r3, #4]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	601a      	str	r2, [r3, #0]
      break;
 8014696:	e008      	b.n	80146aa <paramGetGroupAndName+0xa2>
  for(int index = 0; index < paramsLen; index++) {
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	3301      	adds	r3, #1
 801469c:	613b      	str	r3, [r7, #16]
 801469e:	4b08      	ldr	r3, [pc, #32]	; (80146c0 <paramGetGroupAndName+0xb8>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	693a      	ldr	r2, [r7, #16]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	dbc0      	blt.n	801462a <paramGetGroupAndName+0x22>
    }
  }
}
 80146a8:	bf00      	nop
 80146aa:	bf00      	nop
 80146ac:	371c      	adds	r7, #28
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr
 80146b6:	bf00      	nop
 80146b8:	0802d7a8 	.word	0x0802d7a8
 80146bc:	2000bea4 	.word	0x2000bea4
 80146c0:	2000bea8 	.word	0x2000bea8

080146c4 <paramSetByName>:

  paramNotifyChanged(varid.index);
}

void paramSetByName(CRTPPacket *p)
{
 80146c4:	b590      	push	{r4, r7, lr}
 80146c6:	b08b      	sub	sp, #44	; 0x2c
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  int i, nzero = 0;
 80146cc:	2300      	movs	r3, #0
 80146ce:	623b      	str	r3, [r7, #32]
  void * valPtr;
  int error;

  // If the packet contains at least 2 zeros in the first 28 bytes
  // The packet decoding algorithm will not crash
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 80146d0:	2300      	movs	r3, #0
 80146d2:	627b      	str	r3, [r7, #36]	; 0x24
 80146d4:	e00c      	b.n	80146f0 <paramSetByName+0x2c>
    if (p->data[i] == '\0') nzero++;
 80146d6:	687a      	ldr	r2, [r7, #4]
 80146d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146da:	4413      	add	r3, r2
 80146dc:	3302      	adds	r3, #2
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d102      	bne.n	80146ea <paramSetByName+0x26>
 80146e4:	6a3b      	ldr	r3, [r7, #32]
 80146e6:	3301      	adds	r3, #1
 80146e8:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	3301      	adds	r3, #1
 80146ee:	627b      	str	r3, [r7, #36]	; 0x24
 80146f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f2:	2b1d      	cmp	r3, #29
 80146f4:	ddef      	ble.n	80146d6 <paramSetByName+0x12>
  }

  if (nzero < 2) return;
 80146f6:	6a3b      	ldr	r3, [r7, #32]
 80146f8:	2b01      	cmp	r3, #1
 80146fa:	dd53      	ble.n	80147a4 <paramSetByName+0xe0>

  group = (char*)&p->data[1];
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	3303      	adds	r3, #3
 8014700:	61fb      	str	r3, [r7, #28]
  name = (char*)&p->data[1 + strlen(group) + 1];
 8014702:	69f8      	ldr	r0, [r7, #28]
 8014704:	f7eb fdc4 	bl	8000290 <strlen>
 8014708:	4603      	mov	r3, r0
 801470a:	3302      	adds	r3, #2
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	4413      	add	r3, r2
 8014710:	3302      	adds	r3, #2
 8014712:	61bb      	str	r3, [r7, #24]
  type = p->data[1 + strlen(group) + 1 + strlen(name) + 1];
 8014714:	69f8      	ldr	r0, [r7, #28]
 8014716:	f7eb fdbb 	bl	8000290 <strlen>
 801471a:	4604      	mov	r4, r0
 801471c:	69b8      	ldr	r0, [r7, #24]
 801471e:	f7eb fdb7 	bl	8000290 <strlen>
 8014722:	4603      	mov	r3, r0
 8014724:	4423      	add	r3, r4
 8014726:	3303      	adds	r3, #3
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	4413      	add	r3, r2
 801472c:	789b      	ldrb	r3, [r3, #2]
 801472e:	75fb      	strb	r3, [r7, #23]
  valPtr = &p->data[1 + strlen(group) + 1 + strlen(name) + 2];
 8014730:	69f8      	ldr	r0, [r7, #28]
 8014732:	f7eb fdad 	bl	8000290 <strlen>
 8014736:	4604      	mov	r4, r0
 8014738:	69b8      	ldr	r0, [r7, #24]
 801473a:	f7eb fda9 	bl	8000290 <strlen>
 801473e:	4603      	mov	r3, r0
 8014740:	4423      	add	r3, r4
 8014742:	3304      	adds	r3, #4
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	4413      	add	r3, r2
 8014748:	3302      	adds	r3, #2
 801474a:	613b      	str	r3, [r7, #16]

  error = paramWriteByNameProcess(group, name, type, valPtr);  /* calls callback */
 801474c:	7dfa      	ldrb	r2, [r7, #23]
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	69b9      	ldr	r1, [r7, #24]
 8014752:	69f8      	ldr	r0, [r7, #28]
 8014754:	f7ff fd9a 	bl	801428c <paramWriteByNameProcess>
 8014758:	4603      	mov	r3, r0
 801475a:	60fb      	str	r3, [r7, #12]

  p->data[1 + strlen(group) + 1 + strlen(name) + 1] = error;
 801475c:	69f8      	ldr	r0, [r7, #28]
 801475e:	f7eb fd97 	bl	8000290 <strlen>
 8014762:	4604      	mov	r4, r0
 8014764:	69b8      	ldr	r0, [r7, #24]
 8014766:	f7eb fd93 	bl	8000290 <strlen>
 801476a:	4603      	mov	r3, r0
 801476c:	4423      	add	r3, r4
 801476e:	3303      	adds	r3, #3
 8014770:	68fa      	ldr	r2, [r7, #12]
 8014772:	b2d1      	uxtb	r1, r2
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	4413      	add	r3, r2
 8014778:	460a      	mov	r2, r1
 801477a:	709a      	strb	r2, [r3, #2]
  p->size = 1 + strlen(group) + 1 + strlen(name) + 1 + 1;
 801477c:	69f8      	ldr	r0, [r7, #28]
 801477e:	f7eb fd87 	bl	8000290 <strlen>
 8014782:	4603      	mov	r3, r0
 8014784:	b2dc      	uxtb	r4, r3
 8014786:	69b8      	ldr	r0, [r7, #24]
 8014788:	f7eb fd82 	bl	8000290 <strlen>
 801478c:	4603      	mov	r3, r0
 801478e:	b2db      	uxtb	r3, r3
 8014790:	4423      	add	r3, r4
 8014792:	b2db      	uxtb	r3, r3
 8014794:	3304      	adds	r3, #4
 8014796:	b2da      	uxtb	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f7ec fe81 	bl	80014a4 <crtpSendPacketBlock>
 80147a2:	e000      	b.n	80147a6 <paramSetByName+0xe2>
  if (nzero < 2) return;
 80147a4:	bf00      	nop

}
 80147a6:	372c      	adds	r7, #44	; 0x2c
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd90      	pop	{r4, r7, pc}

080147ac <paramGetExtendedType>:

#define KEY_LEN 30  // FIXME

void paramGetExtendedType(CRTPPacket *p)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3303      	adds	r3, #3
 80147b8:	881b      	ldrh	r3, [r3, #0]
 80147ba:	b29b      	uxth	r3, r3
 80147bc:	817b      	strh	r3, [r7, #10]
  index = variableGetIndex(id);
 80147be:	897b      	ldrh	r3, [r7, #10]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7ff fe23 	bl	801440c <variableGetIndex>
 80147c6:	60f8      	str	r0, [r7, #12]

  if (index < 0 || !(params[index].type & PARAM_EXTENDED)) {
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	db0c      	blt.n	80147e8 <paramGetExtendedType+0x3c>
 80147ce:	4b15      	ldr	r3, [pc, #84]	; (8014824 <paramGetExtendedType+0x78>)
 80147d0:	6819      	ldr	r1, [r3, #0]
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	4613      	mov	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	4413      	add	r3, r2
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	440b      	add	r3, r1
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	f003 0310 	and.w	r3, r3, #16
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d109      	bne.n	80147fc <paramGetExtendedType+0x50>
    p->data[3] = ENOENT;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2202      	movs	r2, #2
 80147ec:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2204      	movs	r2, #4
 80147f2:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f7ec fe55 	bl	80014a4 <crtpSendPacketBlock>
 80147fa:	e010      	b.n	801481e <paramGetExtendedType+0x72>
    return;
  }

  p->data[3] = params[index].extended_type;
 80147fc:	4b09      	ldr	r3, [pc, #36]	; (8014824 <paramGetExtendedType+0x78>)
 80147fe:	6819      	ldr	r1, [r3, #0]
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	4613      	mov	r3, r2
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	4413      	add	r3, r2
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	440b      	add	r3, r1
 801480c:	785a      	ldrb	r2, [r3, #1]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2204      	movs	r2, #4
 8014816:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7ec fe43 	bl	80014a4 <crtpSendPacketBlock>
}
 801481e:	3710      	adds	r7, #16
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	2000bea4 	.word	0x2000bea4

08014828 <generateStorageKey>:

static void generateStorageKey(const uint16_t index, char key[KEY_LEN])
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	6039      	str	r1, [r7, #0]
 8014832:	80fb      	strh	r3, [r7, #6]
  char *group;
  char *name;
  paramVarId_t paramId;

  paramId.index = (uint16_t)index;
 8014834:	88fb      	ldrh	r3, [r7, #6]
 8014836:	81fb      	strh	r3, [r7, #14]
  paramGetGroupAndName(paramId, &group, &name);
 8014838:	f107 0210 	add.w	r2, r7, #16
 801483c:	f107 0314 	add.w	r3, r7, #20
 8014840:	4619      	mov	r1, r3
 8014842:	68f8      	ldr	r0, [r7, #12]
 8014844:	f7ff fee0 	bl	8014608 <paramGetGroupAndName>

  // Assemble key string, e.g. "prm/pid_rate.kp"
  strcpy(key, PERSISTENT_PREFIX_STRING);
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	4a0f      	ldr	r2, [pc, #60]	; (8014888 <generateStorageKey+0x60>)
 801484c:	6810      	ldr	r0, [r2, #0]
 801484e:	6018      	str	r0, [r3, #0]
 8014850:	7912      	ldrb	r2, [r2, #4]
 8014852:	711a      	strb	r2, [r3, #4]
  strcat(key, group);
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	4619      	mov	r1, r3
 8014858:	6838      	ldr	r0, [r7, #0]
 801485a:	f010 f919 	bl	8024a90 <strcat>
  strcat(key, ".");
 801485e:	6838      	ldr	r0, [r7, #0]
 8014860:	f7eb fd16 	bl	8000290 <strlen>
 8014864:	4603      	mov	r3, r0
 8014866:	461a      	mov	r2, r3
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	4413      	add	r3, r2
 801486c:	4907      	ldr	r1, [pc, #28]	; (801488c <generateStorageKey+0x64>)
 801486e:	461a      	mov	r2, r3
 8014870:	460b      	mov	r3, r1
 8014872:	881b      	ldrh	r3, [r3, #0]
 8014874:	8013      	strh	r3, [r2, #0]
  strcat(key, name);
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	4619      	mov	r1, r3
 801487a:	6838      	ldr	r0, [r7, #0]
 801487c:	f010 f908 	bl	8024a90 <strcat>
}
 8014880:	bf00      	nop
 8014882:	3718      	adds	r7, #24
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	0802d918 	.word	0x0802d918
 801488c:	0802d920 	.word	0x0802d920

08014890 <paramPersistentStore>:

void paramPersistentStore(CRTPPacket *p)
{
 8014890:	b590      	push	{r4, r7, lr}
 8014892:	b08d      	sub	sp, #52	; 0x34
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 8014898:	2301      	movs	r3, #1
 801489a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	3303      	adds	r3, #3
 80148a2:	881b      	ldrh	r3, [r3, #0]
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 80148a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7ff fdae 	bl	801440c <variableGetIndex>
 80148b0:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 80148b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	da09      	bge.n	80148cc <paramPersistentStore+0x3c>
    p->data[3] = ENOENT;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2202      	movs	r2, #2
 80148bc:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2204      	movs	r2, #4
 80148c2:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f7ec fded 	bl	80014a4 <crtpSendPacketBlock>
 80148ca:	e03b      	b.n	8014944 <paramPersistentStore+0xb4>
    return;
  }

  char key[KEY_LEN] = {0};
 80148cc:	2300      	movs	r3, #0
 80148ce:	60bb      	str	r3, [r7, #8]
 80148d0:	f107 030c 	add.w	r3, r7, #12
 80148d4:	2200      	movs	r2, #0
 80148d6:	601a      	str	r2, [r3, #0]
 80148d8:	605a      	str	r2, [r3, #4]
 80148da:	609a      	str	r2, [r3, #8]
 80148dc:	60da      	str	r2, [r3, #12]
 80148de:	611a      	str	r2, [r3, #16]
 80148e0:	615a      	str	r2, [r3, #20]
 80148e2:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 80148e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	f107 0208 	add.w	r2, r7, #8
 80148ec:	4611      	mov	r1, r2
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7ff ff9a 	bl	8014828 <generateStorageKey>

  result = storageStore(key, params[index].address, paramGetLen(index));
 80148f4:	4b15      	ldr	r3, [pc, #84]	; (801494c <paramPersistentStore+0xbc>)
 80148f6:	6819      	ldr	r1, [r3, #0]
 80148f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148fa:	4613      	mov	r3, r2
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	4413      	add	r3, r2
 8014900:	009b      	lsls	r3, r3, #2
 8014902:	440b      	add	r3, r1
 8014904:	689c      	ldr	r4, [r3, #8]
 8014906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014908:	b29b      	uxth	r3, r3
 801490a:	4618      	mov	r0, r3
 801490c:	f7ff fa10 	bl	8013d30 <paramGetLen>
 8014910:	4603      	mov	r3, r0
 8014912:	461a      	mov	r2, r3
 8014914:	f107 0308 	add.w	r3, r7, #8
 8014918:	4621      	mov	r1, r4
 801491a:	4618      	mov	r0, r3
 801491c:	f7f1 f85c 	bl	80059d8 <storageStore>
 8014920:	4603      	mov	r3, r0
 8014922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8014926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801492a:	2b00      	cmp	r3, #0
 801492c:	d001      	beq.n	8014932 <paramPersistentStore+0xa2>
 801492e:	2200      	movs	r2, #0
 8014930:	e000      	b.n	8014934 <paramPersistentStore+0xa4>
 8014932:	2202      	movs	r2, #2
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2204      	movs	r2, #4
 801493c:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f7ec fdb0 	bl	80014a4 <crtpSendPacketBlock>
}
 8014944:	3734      	adds	r7, #52	; 0x34
 8014946:	46bd      	mov	sp, r7
 8014948:	bd90      	pop	{r4, r7, pc}
 801494a:	bf00      	nop
 801494c:	2000bea4 	.word	0x2000bea4

08014950 <paramGetDefaultValue>:

void paramGetDefaultValue(CRTPPacket *p)
{
 8014950:	b590      	push	{r4, r7, lr}
 8014952:	b085      	sub	sp, #20
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], sizeof(id));
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	3303      	adds	r3, #3
 801495c:	881b      	ldrh	r3, [r3, #0]
 801495e:	b29b      	uxth	r3, r3
 8014960:	813b      	strh	r3, [r7, #8]
  int index = variableGetIndex(id);
 8014962:	893b      	ldrh	r3, [r7, #8]
 8014964:	4618      	mov	r0, r3
 8014966:	f7ff fd51 	bl	801440c <variableGetIndex>
 801496a:	60f8      	str	r0, [r7, #12]

  const bool doesParamExist = (index >= 0);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	43db      	mvns	r3, r3
 8014970:	0fdb      	lsrs	r3, r3, #31
 8014972:	72fb      	strb	r3, [r7, #11]
  // Read-only parameters have no default value
  if (!doesParamExist || params[index].type & PARAM_RONLY) {
 8014974:	7afb      	ldrb	r3, [r7, #11]
 8014976:	f083 0301 	eor.w	r3, r3, #1
 801497a:	b2db      	uxtb	r3, r3
 801497c:	2b00      	cmp	r3, #0
 801497e:	d10c      	bne.n	801499a <paramGetDefaultValue+0x4a>
 8014980:	4b28      	ldr	r3, [pc, #160]	; (8014a24 <paramGetDefaultValue+0xd4>)
 8014982:	6819      	ldr	r1, [r3, #0]
 8014984:	68fa      	ldr	r2, [r7, #12]
 8014986:	4613      	mov	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	4413      	add	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	440b      	add	r3, r1
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014996:	2b00      	cmp	r3, #0
 8014998:	d009      	beq.n	80149ae <paramGetDefaultValue+0x5e>
    p->data[3] = ENOENT;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2202      	movs	r2, #2
 801499e:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2204      	movs	r2, #4
 80149a4:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7ec fd7c 	bl	80014a4 <crtpSendPacketBlock>
 80149ac:	e037      	b.n	8014a1e <paramGetDefaultValue+0xce>
    return;
  }

  // Add default value
  uint8_t paramLen = paramGetLen(index);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7ff f9bc 	bl	8013d30 <paramGetLen>
 80149b8:	4603      	mov	r3, r0
 80149ba:	72bb      	strb	r3, [r7, #10]
  if (params[index].getter) {
 80149bc:	4b19      	ldr	r3, [pc, #100]	; (8014a24 <paramGetDefaultValue+0xd4>)
 80149be:	6819      	ldr	r1, [r3, #0]
 80149c0:	68fa      	ldr	r2, [r7, #12]
 80149c2:	4613      	mov	r3, r2
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	4413      	add	r3, r2
 80149c8:	009b      	lsls	r3, r3, #2
 80149ca:	440b      	add	r3, r1
 80149cc:	691b      	ldr	r3, [r3, #16]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d012      	beq.n	80149f8 <paramGetDefaultValue+0xa8>
    memcpy(&p->data[3], params[index].getter(), paramLen);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	1d5c      	adds	r4, r3, #5
 80149d6:	4b13      	ldr	r3, [pc, #76]	; (8014a24 <paramGetDefaultValue+0xd4>)
 80149d8:	6819      	ldr	r1, [r3, #0]
 80149da:	68fa      	ldr	r2, [r7, #12]
 80149dc:	4613      	mov	r3, r2
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	4413      	add	r3, r2
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	440b      	add	r3, r1
 80149e6:	691b      	ldr	r3, [r3, #16]
 80149e8:	4798      	blx	r3
 80149ea:	4601      	mov	r1, r0
 80149ec:	7abb      	ldrb	r3, [r7, #10]
 80149ee:	461a      	mov	r2, r3
 80149f0:	4620      	mov	r0, r4
 80149f2:	f010 f9c0 	bl	8024d76 <memcpy>
 80149f6:	e00a      	b.n	8014a0e <paramGetDefaultValue+0xbe>
  } else {
    memcpy(&p->data[3], paramGetDefault(index), paramLen);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	1d5c      	adds	r4, r3, #5
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f7ff f8d1 	bl	8013ba4 <paramGetDefault>
 8014a02:	4601      	mov	r1, r0
 8014a04:	7abb      	ldrb	r3, [r7, #10]
 8014a06:	461a      	mov	r2, r3
 8014a08:	4620      	mov	r0, r4
 8014a0a:	f010 f9b4 	bl	8024d76 <memcpy>
  }
  p->size = 3 + paramLen;
 8014a0e:	7abb      	ldrb	r3, [r7, #10]
 8014a10:	3303      	adds	r3, #3
 8014a12:	b2da      	uxtb	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7ec fd43 	bl	80014a4 <crtpSendPacketBlock>
}
 8014a1e:	3714      	adds	r7, #20
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd90      	pop	{r4, r7, pc}
 8014a24:	2000bea4 	.word	0x2000bea4

08014a28 <paramPersistentGetState>:

void paramPersistentGetState(CRTPPacket *p)
{
 8014a28:	b590      	push	{r4, r7, lr}
 8014a2a:	b08f      	sub	sp, #60	; 0x3c
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	3303      	adds	r3, #3
 8014a34:	881b      	ldrh	r3, [r3, #0]
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int index = variableGetIndex(id);
 8014a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7ff fce5 	bl	801440c <variableGetIndex>
 8014a42:	6378      	str	r0, [r7, #52]	; 0x34

  const bool doesParamExist = (index >= 0);
 8014a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a46:	43db      	mvns	r3, r3
 8014a48:	0fdb      	lsrs	r3, r3, #31
 8014a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (! doesParamExist) {
 8014a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014a52:	f083 0301 	eor.w	r3, r3, #1
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d009      	beq.n	8014a70 <paramPersistentGetState+0x48>
    p->data[3] = ENOENT;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2202      	movs	r2, #2
 8014a60:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	2204      	movs	r2, #4
 8014a66:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f7ec fd1b 	bl	80014a4 <crtpSendPacketBlock>
 8014a6e:	e08c      	b.n	8014b8a <paramPersistentGetState+0x162>
    return;
  }

  char key[KEY_LEN] = {0};
 8014a70:	2300      	movs	r3, #0
 8014a72:	613b      	str	r3, [r7, #16]
 8014a74:	f107 0314 	add.w	r3, r7, #20
 8014a78:	2200      	movs	r2, #0
 8014a7a:	601a      	str	r2, [r3, #0]
 8014a7c:	605a      	str	r2, [r3, #4]
 8014a7e:	609a      	str	r2, [r3, #8]
 8014a80:	60da      	str	r2, [r3, #12]
 8014a82:	611a      	str	r2, [r3, #16]
 8014a84:	615a      	str	r2, [r3, #20]
 8014a86:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8014a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	f107 0210 	add.w	r2, r7, #16
 8014a90:	4611      	mov	r1, r2
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7ff fec8 	bl	8014828 <generateStorageKey>

  uint8_t paramLen = paramGetLen(index);
 8014a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7ff f947 	bl	8013d30 <paramGetLen>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  // First part of data use 4 bytes
  p->size = 4;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2204      	movs	r2, #4
 8014aac:	701a      	strb	r2, [r3, #0]

  // Add default value
  if (params[index].getter) {
 8014aae:	4b38      	ldr	r3, [pc, #224]	; (8014b90 <paramPersistentGetState+0x168>)
 8014ab0:	6819      	ldr	r1, [r3, #0]
 8014ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ab4:	4613      	mov	r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4413      	add	r3, r2
 8014aba:	009b      	lsls	r3, r3, #2
 8014abc:	440b      	add	r3, r1
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d017      	beq.n	8014af4 <paramPersistentGetState+0xcc>
    memcpy(&p->data[p->size], params[index].getter(), paramLen);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4413      	add	r3, r2
 8014ace:	1c9c      	adds	r4, r3, #2
 8014ad0:	4b2f      	ldr	r3, [pc, #188]	; (8014b90 <paramPersistentGetState+0x168>)
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4413      	add	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	440b      	add	r3, r1
 8014ae0:	691b      	ldr	r3, [r3, #16]
 8014ae2:	4798      	blx	r3
 8014ae4:	4601      	mov	r1, r0
 8014ae6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8014aea:	461a      	mov	r2, r3
 8014aec:	4620      	mov	r0, r4
 8014aee:	f010 f942 	bl	8024d76 <memcpy>
 8014af2:	e00f      	b.n	8014b14 <paramPersistentGetState+0xec>
  } else {
    memcpy(&p->data[p->size], paramGetDefault(index), paramLen);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	461a      	mov	r2, r3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4413      	add	r3, r2
 8014afe:	1c9c      	adds	r4, r3, #2
 8014b00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014b02:	f7ff f84f 	bl	8013ba4 <paramGetDefault>
 8014b06:	4601      	mov	r1, r0
 8014b08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4620      	mov	r0, r4
 8014b10:	f010 f931 	bl	8024d76 <memcpy>
  }
  p->size += paramLen;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	781a      	ldrb	r2, [r3, #0]
 8014b18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8014b1c:	4413      	add	r3, r2
 8014b1e:	b2da      	uxtb	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	701a      	strb	r2, [r3, #0]

  // Add stored value if avialable
  uint8_t value[8];
  const bool isValueStored = (storageFetch(key, &value, paramLen) > 0);
 8014b24:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8014b28:	f107 0108 	add.w	r1, r7, #8
 8014b2c:	f107 0310 	add.w	r3, r7, #16
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7f0 ffa1 	bl	8005a78 <storageFetch>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	bf14      	ite	ne
 8014b3c:	2301      	movne	r3, #1
 8014b3e:	2300      	moveq	r3, #0
 8014b40:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  if (isValueStored) {
 8014b44:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d018      	beq.n	8014b7e <paramPersistentGetState+0x156>
    p->data[3] = PARAM_PERSISTENT_STORED;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2201      	movs	r2, #1
 8014b50:	715a      	strb	r2, [r3, #5]
    memcpy(&p->data[p->size], &value, paramLen);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	461a      	mov	r2, r3
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4413      	add	r3, r2
 8014b5c:	3302      	adds	r3, #2
 8014b5e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8014b62:	f107 0108 	add.w	r1, r7, #8
 8014b66:	4618      	mov	r0, r3
 8014b68:	f010 f905 	bl	8024d76 <memcpy>
    p->size += paramLen;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	781a      	ldrb	r2, [r3, #0]
 8014b70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8014b74:	4413      	add	r3, r2
 8014b76:	b2da      	uxtb	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	701a      	strb	r2, [r3, #0]
 8014b7c:	e002      	b.n	8014b84 <paramPersistentGetState+0x15c>
  } else {
    p->data[3] = PARAM_PERSISTENT_NOT_STORED;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2200      	movs	r2, #0
 8014b82:	715a      	strb	r2, [r3, #5]
  }

  crtpSendPacketBlock(p);
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f7ec fc8d 	bl	80014a4 <crtpSendPacketBlock>
}
 8014b8a:	373c      	adds	r7, #60	; 0x3c
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd90      	pop	{r4, r7, pc}
 8014b90:	2000bea4 	.word	0x2000bea4

08014b94 <paramPersistentClear>:

void paramPersistentClear(CRTPPacket *p)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b08c      	sub	sp, #48	; 0x30
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	3303      	adds	r3, #3
 8014ba6:	881b      	ldrh	r3, [r3, #0]
 8014ba8:	b29b      	uxth	r3, r3
 8014baa:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 8014bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7ff fc2c 	bl	801440c <variableGetIndex>
 8014bb4:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 8014bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	da09      	bge.n	8014bd0 <paramPersistentClear+0x3c>
    p->data[3] = ENOENT;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2202      	movs	r2, #2
 8014bc0:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2204      	movs	r2, #4
 8014bc6:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f7ec fc6b 	bl	80014a4 <crtpSendPacketBlock>
 8014bce:	e02a      	b.n	8014c26 <paramPersistentClear+0x92>
    return;
  }

  // Assemble key string, e.g. "prm/pid_rate.kp"
  char key[KEY_LEN] = {0};
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	60bb      	str	r3, [r7, #8]
 8014bd4:	f107 030c 	add.w	r3, r7, #12
 8014bd8:	2200      	movs	r2, #0
 8014bda:	601a      	str	r2, [r3, #0]
 8014bdc:	605a      	str	r2, [r3, #4]
 8014bde:	609a      	str	r2, [r3, #8]
 8014be0:	60da      	str	r2, [r3, #12]
 8014be2:	611a      	str	r2, [r3, #16]
 8014be4:	615a      	str	r2, [r3, #20]
 8014be6:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8014be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	f107 0208 	add.w	r2, r7, #8
 8014bf0:	4611      	mov	r1, r2
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7ff fe18 	bl	8014828 <generateStorageKey>

  result = storageDelete(key);
 8014bf8:	f107 0308 	add.w	r3, r7, #8
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7f0 ff63 	bl	8005ac8 <storageDelete>
 8014c02:	4603      	mov	r3, r0
 8014c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8014c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d001      	beq.n	8014c14 <paramPersistentClear+0x80>
 8014c10:	2200      	movs	r2, #0
 8014c12:	e000      	b.n	8014c16 <paramPersistentClear+0x82>
 8014c14:	2202      	movs	r2, #2
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2204      	movs	r2, #4
 8014c1e:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f7ec fc3f 	bl	80014a4 <crtpSendPacketBlock>
}
 8014c26:	3730      	adds	r7, #48	; 0x30
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <persistentParamFromStorage>:

static bool persistentParamFromStorage(const char *key, void *buffer, size_t length)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	60f8      	str	r0, [r7, #12]
 8014c34:	60b9      	str	r1, [r7, #8]
 8014c36:	607a      	str	r2, [r7, #4]
  //
  // The key is of format "prm/group.name", we need group and name.
  //
  char *completeName = (char *) key + strlen(PERSISTENT_PREFIX_STRING);
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	3304      	adds	r3, #4
 8014c3c:	617b      	str	r3, [r7, #20]
  paramVarId_t varId = paramGetVarIdFromComplete(completeName);
 8014c3e:	6978      	ldr	r0, [r7, #20]
 8014c40:	f7ff fc1e 	bl	8014480 <paramGetVarIdFromComplete>
 8014c44:	4603      	mov	r3, r0
 8014c46:	613b      	str	r3, [r7, #16]

  if (PARAM_VARID_IS_VALID(varId)) {
 8014c48:	8a3b      	ldrh	r3, [r7, #16]
 8014c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d004      	beq.n	8014c5c <persistentParamFromStorage+0x30>
    paramSet(varId.index, buffer);
 8014c52:	8a7b      	ldrh	r3, [r7, #18]
 8014c54:	68b9      	ldr	r1, [r7, #8]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7fe ffe6 	bl	8013c28 <paramSet>
  }

  return true;
 8014c5c:	2301      	movs	r3, #1
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3718      	adds	r7, #24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
	...

08014c68 <paramLogicStorageInit>:

void paramLogicStorageInit()
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	af00      	add	r7, sp, #0
  storageForeach(PERSISTENT_PREFIX_STRING, persistentParamFromStorage);
 8014c6c:	4902      	ldr	r1, [pc, #8]	; (8014c78 <paramLogicStorageInit+0x10>)
 8014c6e:	4803      	ldr	r0, [pc, #12]	; (8014c7c <paramLogicStorageInit+0x14>)
 8014c70:	f7f0 feda 	bl	8005a28 <storageForeach>
}
 8014c74:	bf00      	nop
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	08014c2d 	.word	0x08014c2d
 8014c7c:	0802d918 	.word	0x0802d918

08014c80 <paramInit>:

STATIC_MEM_TASK_ALLOC(paramTask, PARAM_TASK_STACKSIZE);


void paramInit(void)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af04      	add	r7, sp, #16
  if(isInit) {
 8014c86:	4b0e      	ldr	r3, [pc, #56]	; (8014cc0 <paramInit+0x40>)
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d115      	bne.n	8014cba <paramInit+0x3a>
    return;
  }

  paramLogicInit();
 8014c8e:	f7ff f885 	bl	8013d9c <paramLogicInit>
  paramLogicStorageInit();
 8014c92:	f7ff ffe9 	bl	8014c68 <paramLogicStorageInit>

  //Start the param task
  STATIC_MEM_TASK_CREATE(paramTask, paramTask, PARAM_TASK_NAME, NULL, PARAM_TASK_PRI);
 8014c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	4b09      	ldr	r3, [pc, #36]	; (8014cc4 <paramInit+0x44>)
 8014c9e:	9302      	str	r3, [sp, #8]
 8014ca0:	4b09      	ldr	r3, [pc, #36]	; (8014cc8 <paramInit+0x48>)
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	2300      	movs	r3, #0
 8014caa:	4908      	ldr	r1, [pc, #32]	; (8014ccc <paramInit+0x4c>)
 8014cac:	4808      	ldr	r0, [pc, #32]	; (8014cd0 <paramInit+0x50>)
 8014cae:	f00b fd1f 	bl	80206f0 <xTaskCreateStatic>

  isInit = true;
 8014cb2:	4b03      	ldr	r3, [pc, #12]	; (8014cc0 <paramInit+0x40>)
 8014cb4:	2201      	movs	r2, #1
 8014cb6:	701a      	strb	r2, [r3, #0]
 8014cb8:	e000      	b.n	8014cbc <paramInit+0x3c>
    return;
 8014cba:	bf00      	nop
}
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	2000beb2 	.word	0x2000beb2
 8014cc4:	20006238 	.word	0x20006238
 8014cc8:	2000bed4 	.word	0x2000bed4
 8014ccc:	0802d924 	.word	0x0802d924
 8014cd0:	08014cd5 	.word	0x08014cd5

08014cd4 <paramTask>:
{
  return isInit;
}

void paramTask(void * prm)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b082      	sub	sp, #8
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_PARAM);
 8014cdc:	2002      	movs	r0, #2
 8014cde:	f7ec fab1 	bl	8001244 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 8014ce2:	492f      	ldr	r1, [pc, #188]	; (8014da0 <paramTask+0xcc>)
 8014ce4:	2002      	movs	r0, #2
 8014ce6:	f7ec fadd 	bl	80012a4 <crtpReceivePacketBlock>

		if (p.channel==TOC_CH)
 8014cea:	4b2d      	ldr	r3, [pc, #180]	; (8014da0 <paramTask+0xcc>)
 8014cec:	785b      	ldrb	r3, [r3, #1]
 8014cee:	f003 0303 	and.w	r3, r3, #3
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d106      	bne.n	8014d06 <paramTask+0x32>
		  paramTOCProcess(&p, p.data[0]);
 8014cf8:	4b29      	ldr	r3, [pc, #164]	; (8014da0 <paramTask+0xcc>)
 8014cfa:	789b      	ldrb	r3, [r3, #2]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	4828      	ldr	r0, [pc, #160]	; (8014da0 <paramTask+0xcc>)
 8014d00:	f7ff f932 	bl	8013f68 <paramTOCProcess>
 8014d04:	e7ed      	b.n	8014ce2 <paramTask+0xe>
	  else if (p.channel==READ_CH)
 8014d06:	4b26      	ldr	r3, [pc, #152]	; (8014da0 <paramTask+0xcc>)
 8014d08:	785b      	ldrb	r3, [r3, #1]
 8014d0a:	f003 0303 	and.w	r3, r3, #3
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d103      	bne.n	8014d1c <paramTask+0x48>
		  paramReadProcess(&p);
 8014d14:	4822      	ldr	r0, [pc, #136]	; (8014da0 <paramTask+0xcc>)
 8014d16:	f7ff fb47 	bl	80143a8 <paramReadProcess>
 8014d1a:	e7e2      	b.n	8014ce2 <paramTask+0xe>
		else if (p.channel==WRITE_CH)
 8014d1c:	4b20      	ldr	r3, [pc, #128]	; (8014da0 <paramTask+0xcc>)
 8014d1e:	785b      	ldrb	r3, [r3, #1]
 8014d20:	f003 0303 	and.w	r3, r3, #3
 8014d24:	b2db      	uxtb	r3, r3
 8014d26:	2b02      	cmp	r3, #2
 8014d28:	d103      	bne.n	8014d32 <paramTask+0x5e>
		  paramWriteProcess(&p);
 8014d2a:	481d      	ldr	r0, [pc, #116]	; (8014da0 <paramTask+0xcc>)
 8014d2c:	f7ff fa50 	bl	80141d0 <paramWriteProcess>
 8014d30:	e7d7      	b.n	8014ce2 <paramTask+0xe>
    else if (p.channel==MISC_CH) {
 8014d32:	4b1b      	ldr	r3, [pc, #108]	; (8014da0 <paramTask+0xcc>)
 8014d34:	785b      	ldrb	r3, [r3, #1]
 8014d36:	f003 0303 	and.w	r3, r3, #3
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	2b03      	cmp	r3, #3
 8014d3e:	d1d0      	bne.n	8014ce2 <paramTask+0xe>
      switch (p.data[0]) {
 8014d40:	4b17      	ldr	r3, [pc, #92]	; (8014da0 <paramTask+0xcc>)
 8014d42:	789b      	ldrb	r3, [r3, #2]
 8014d44:	2b06      	cmp	r3, #6
 8014d46:	d829      	bhi.n	8014d9c <paramTask+0xc8>
 8014d48:	a201      	add	r2, pc, #4	; (adr r2, 8014d50 <paramTask+0x7c>)
 8014d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d4e:	bf00      	nop
 8014d50:	08014d6d 	.word	0x08014d6d
 8014d54:	08014d9d 	.word	0x08014d9d
 8014d58:	08014d75 	.word	0x08014d75
 8014d5c:	08014d7d 	.word	0x08014d7d
 8014d60:	08014d85 	.word	0x08014d85
 8014d64:	08014d8d 	.word	0x08014d8d
 8014d68:	08014d95 	.word	0x08014d95
        case MISC_SETBYNAME:
          paramSetByName(&p);
 8014d6c:	480c      	ldr	r0, [pc, #48]	; (8014da0 <paramTask+0xcc>)
 8014d6e:	f7ff fca9 	bl	80146c4 <paramSetByName>
          break;
 8014d72:	e014      	b.n	8014d9e <paramTask+0xca>
        case MISC_GET_EXTENDED_TYPE:
          paramGetExtendedType(&p);
 8014d74:	480a      	ldr	r0, [pc, #40]	; (8014da0 <paramTask+0xcc>)
 8014d76:	f7ff fd19 	bl	80147ac <paramGetExtendedType>
          break;
 8014d7a:	e010      	b.n	8014d9e <paramTask+0xca>
        case MISC_PERSISTENT_STORE:
          paramPersistentStore(&p);
 8014d7c:	4808      	ldr	r0, [pc, #32]	; (8014da0 <paramTask+0xcc>)
 8014d7e:	f7ff fd87 	bl	8014890 <paramPersistentStore>
          break;
 8014d82:	e00c      	b.n	8014d9e <paramTask+0xca>
        case MISC_PERSISTENT_GET_STATE:
          paramPersistentGetState(&p);
 8014d84:	4806      	ldr	r0, [pc, #24]	; (8014da0 <paramTask+0xcc>)
 8014d86:	f7ff fe4f 	bl	8014a28 <paramPersistentGetState>
          break;
 8014d8a:	e008      	b.n	8014d9e <paramTask+0xca>
        case MISC_PERSISTENT_CLEAR:
          paramPersistentClear(&p);
 8014d8c:	4804      	ldr	r0, [pc, #16]	; (8014da0 <paramTask+0xcc>)
 8014d8e:	f7ff ff01 	bl	8014b94 <paramPersistentClear>
          break;
 8014d92:	e004      	b.n	8014d9e <paramTask+0xca>
        case MISC_GET_DEFAULT_VALUE:
          paramGetDefaultValue(&p);
 8014d94:	4802      	ldr	r0, [pc, #8]	; (8014da0 <paramTask+0xcc>)
 8014d96:	f7ff fddb 	bl	8014950 <paramGetDefaultValue>
          break;
 8014d9a:	e000      	b.n	8014d9e <paramTask+0xca>
        default:
          break;
 8014d9c:	bf00      	nop
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 8014d9e:	e7a0      	b.n	8014ce2 <paramTask+0xe>
 8014da0:	2000beb4 	.word	0x2000beb4

08014da4 <pidReset>:
    pid->iLimit = limit;
}


void pidReset(PidObject* pid)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  pid->error     = 0;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f04f 0200 	mov.w	r2, #0
 8014db2:	605a      	str	r2, [r3, #4]
  pid->prevError = 0;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f04f 0200 	mov.w	r2, #0
 8014dba:	609a      	str	r2, [r3, #8]
  pid->integ     = 0;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f04f 0200 	mov.w	r2, #0
 8014dc2:	60da      	str	r2, [r3, #12]
  pid->deriv     = 0;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f04f 0200 	mov.w	r2, #0
 8014dca:	611a      	str	r2, [r3, #16]
}
 8014dcc:	bf00      	nop
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <filterReset>:

void pidSetDt(PidObject* pid, const float dt) {
    pid->dt = dt;
}

void filterReset(PidObject* pid, const float samplingRate, const float cutoffFreq, bool enableDFilter) {
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8014de4:	edc7 0a01 	vstr	s1, [r7, #4]
 8014de8:	460b      	mov	r3, r1
 8014dea:	70fb      	strb	r3, [r7, #3]
  pid->enableDFilter = enableDFilter;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	78fa      	ldrb	r2, [r7, #3]
 8014df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  if (pid->enableDFilter)
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d008      	beq.n	8014e10 <filterReset+0x38>
  {
    lpf2pInit(&pid->dFilter, samplingRate, cutoffFreq);
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	3340      	adds	r3, #64	; 0x40
 8014e02:	edd7 0a01 	vldr	s1, [r7, #4]
 8014e06:	ed97 0a02 	vldr	s0, [r7, #8]
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f3 f8c8 	bl	8007fa0 <lpf2pInit>
  }
}
 8014e10:	bf00      	nop
 8014e12:	3710      	adds	r7, #16
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 8014e18:	b590      	push	{r4, r7, lr}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 8014e1e:	4b19      	ldr	r3, [pc, #100]	; (8014e84 <queueMonitorInit+0x6c>)
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	f083 0301 	eor.w	r3, r3, #1
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d104      	bne.n	8014e36 <queueMonitorInit+0x1e>
 8014e2c:	2248      	movs	r2, #72	; 0x48
 8014e2e:	4916      	ldr	r1, [pc, #88]	; (8014e88 <queueMonitorInit+0x70>)
 8014e30:	4816      	ldr	r0, [pc, #88]	; (8014e8c <queueMonitorInit+0x74>)
 8014e32:	f7fd f8fb 	bl	801202c <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8014e36:	4b16      	ldr	r3, [pc, #88]	; (8014e90 <queueMonitorInit+0x78>)
 8014e38:	9301      	str	r3, [sp, #4]
 8014e3a:	4b16      	ldr	r3, [pc, #88]	; (8014e94 <queueMonitorInit+0x7c>)
 8014e3c:	9300      	str	r3, [sp, #0]
 8014e3e:	2300      	movs	r3, #0
 8014e40:	2201      	movs	r2, #1
 8014e42:	f242 7110 	movw	r1, #10000	; 0x2710
 8014e46:	4814      	ldr	r0, [pc, #80]	; (8014e98 <queueMonitorInit+0x80>)
 8014e48:	f00c ffba 	bl	8021dc0 <xTimerCreateStatic>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	4a13      	ldr	r2, [pc, #76]	; (8014e9c <queueMonitorInit+0x84>)
 8014e50:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8014e52:	4b12      	ldr	r3, [pc, #72]	; (8014e9c <queueMonitorInit+0x84>)
 8014e54:	681c      	ldr	r4, [r3, #0]
 8014e56:	f00b ffc1 	bl	8020ddc <xTaskGetTickCount>
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	2364      	movs	r3, #100	; 0x64
 8014e5e:	9300      	str	r3, [sp, #0]
 8014e60:	2300      	movs	r3, #0
 8014e62:	2101      	movs	r1, #1
 8014e64:	4620      	mov	r0, r4
 8014e66:	f00d f81f 	bl	8021ea8 <xTimerGenericCommand>

  data[0].fileName = "Na";
 8014e6a:	4b0d      	ldr	r3, [pc, #52]	; (8014ea0 <queueMonitorInit+0x88>)
 8014e6c:	4a0d      	ldr	r2, [pc, #52]	; (8014ea4 <queueMonitorInit+0x8c>)
 8014e6e:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8014e70:	4b0b      	ldr	r3, [pc, #44]	; (8014ea0 <queueMonitorInit+0x88>)
 8014e72:	4a0c      	ldr	r2, [pc, #48]	; (8014ea4 <queueMonitorInit+0x8c>)
 8014e74:	605a      	str	r2, [r3, #4]

  initialized = true;
 8014e76:	4b03      	ldr	r3, [pc, #12]	; (8014e84 <queueMonitorInit+0x6c>)
 8014e78:	2201      	movs	r2, #1
 8014e7a:	701a      	strb	r2, [r3, #0]
}
 8014e7c:	bf00      	nop
 8014e7e:	3704      	adds	r7, #4
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd90      	pop	{r4, r7, pc}
 8014e84:	2000c494 	.word	0x2000c494
 8014e88:	0802d92c 	.word	0x0802d92c
 8014e8c:	0802d950 	.word	0x0802d950
 8014e90:	2000c468 	.word	0x2000c468
 8014e94:	08015045 	.word	0x08015045
 8014e98:	0802d960 	.word	0x0802d960
 8014e9c:	2000c464 	.word	0x2000c464
 8014ea0:	2000c2d4 	.word	0x2000c2d4
 8014ea4:	0802d974 	.word	0x0802d974

08014ea8 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8014eb4:	4b18      	ldr	r3, [pc, #96]	; (8014f18 <qmRegisterQueue+0x70>)
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d104      	bne.n	8014ec6 <qmRegisterQueue+0x1e>
 8014ebc:	2265      	movs	r2, #101	; 0x65
 8014ebe:	4917      	ldr	r1, [pc, #92]	; (8014f1c <qmRegisterQueue+0x74>)
 8014ec0:	4817      	ldr	r0, [pc, #92]	; (8014f20 <qmRegisterQueue+0x78>)
 8014ec2:	f7fd f8b3 	bl	801202c <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 8014ec6:	4b17      	ldr	r3, [pc, #92]	; (8014f24 <qmRegisterQueue+0x7c>)
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	2b13      	cmp	r3, #19
 8014ecc:	d904      	bls.n	8014ed8 <qmRegisterQueue+0x30>
 8014ece:	2266      	movs	r2, #102	; 0x66
 8014ed0:	4912      	ldr	r1, [pc, #72]	; (8014f1c <qmRegisterQueue+0x74>)
 8014ed2:	4815      	ldr	r0, [pc, #84]	; (8014f28 <qmRegisterQueue+0x80>)
 8014ed4:	f7fd f8aa 	bl	801202c <assertFail>
  Data* queueData = &data[nrOfQueues];
 8014ed8:	4b12      	ldr	r3, [pc, #72]	; (8014f24 <qmRegisterQueue+0x7c>)
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	461a      	mov	r2, r3
 8014ede:	4613      	mov	r3, r2
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	4413      	add	r3, r2
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	4a11      	ldr	r2, [pc, #68]	; (8014f2c <qmRegisterQueue+0x84>)
 8014ee8:	4413      	add	r3, r2
 8014eea:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	68ba      	ldr	r2, [r7, #8]
 8014ef0:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 8014ef8:	4b0a      	ldr	r3, [pc, #40]	; (8014f24 <qmRegisterQueue+0x7c>)
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	4619      	mov	r1, r3
 8014efe:	68f8      	ldr	r0, [r7, #12]
 8014f00:	f00b fa62 	bl	80203c8 <vQueueSetQueueNumber>

  nrOfQueues++;
 8014f04:	4b07      	ldr	r3, [pc, #28]	; (8014f24 <qmRegisterQueue+0x7c>)
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	3301      	adds	r3, #1
 8014f0a:	b2da      	uxtb	r2, r3
 8014f0c:	4b05      	ldr	r3, [pc, #20]	; (8014f24 <qmRegisterQueue+0x7c>)
 8014f0e:	701a      	strb	r2, [r3, #0]
}
 8014f10:	bf00      	nop
 8014f12:	3718      	adds	r7, #24
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	2000c494 	.word	0x2000c494
 8014f1c:	0802d92c 	.word	0x0802d92c
 8014f20:	0802d978 	.word	0x0802d978
 8014f24:	20000ee8 	.word	0x20000ee8
 8014f28:	0802d984 	.word	0x0802d984
 8014f2c:	2000c2d4 	.word	0x2000c2d4

08014f30 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
  int i = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	607b      	str	r3, [r7, #4]
 8014f3e:	e013      	b.n	8014f68 <debugPrint+0x38>
    Data* queueData = &data[i];
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	4613      	mov	r3, r2
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	4413      	add	r3, r2
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	4a0d      	ldr	r2, [pc, #52]	; (8014f80 <debugPrint+0x50>)
 8014f4c:	4413      	add	r3, r2
 8014f4e:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8014f50:	6838      	ldr	r0, [r7, #0]
 8014f52:	f000 f819 	bl	8014f88 <filter>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d002      	beq.n	8014f62 <debugPrint+0x32>
      debugPrintQueue(queueData);
 8014f5c:	6838      	ldr	r0, [r7, #0]
 8014f5e:	f000 f827 	bl	8014fb0 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	3301      	adds	r3, #1
 8014f66:	607b      	str	r3, [r7, #4]
 8014f68:	4b06      	ldr	r3, [pc, #24]	; (8014f84 <debugPrint+0x54>)
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4293      	cmp	r3, r2
 8014f72:	dbe5      	blt.n	8014f40 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8014f74:	f000 f838 	bl	8014fe8 <resetCounters>
  }
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	2000c2d4 	.word	0x2000c2d4
 8014f84:	20000ee8 	.word	0x20000ee8

08014f88 <filter>:

static bool filter(Data* queueData) {
 8014f88:	b480      	push	{r7}
 8014f8a:	b085      	sub	sp, #20
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 8014f90:	2300      	movs	r3, #0
 8014f92:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	691b      	ldr	r3, [r3, #16]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	bf14      	ite	ne
 8014f9c:	2301      	movne	r3, #1
 8014f9e:	2300      	moveq	r3, #0
 8014fa0:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 8014fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3714      	adds	r7, #20
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr

08014fb0 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 8014fb0:	b590      	push	{r4, r7, lr}
 8014fb2:	b085      	sub	sp, #20
 8014fb4:	af02      	add	r7, sp, #8
 8014fb6:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6819      	ldr	r1, [r3, #0]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6858      	ldr	r0, [r3, #4]
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	689c      	ldr	r4, [r3, #8]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	6912      	ldr	r2, [r2, #16]
 8014fcc:	9201      	str	r2, [sp, #4]
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	4623      	mov	r3, r4
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	4803      	ldr	r0, [pc, #12]	; (8014fe4 <debugPrintQueue+0x34>)
 8014fd6:	f00f fc61 	bl	802489c <iprintf>
}
 8014fda:	bf00      	nop
 8014fdc:	370c      	adds	r7, #12
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd90      	pop	{r4, r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	0802d9c0 	.word	0x0802d9c0

08014fe8 <resetCounters>:

static void resetCounters() {
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
  int i = 0;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	607b      	str	r3, [r7, #4]
 8014ff6:	e013      	b.n	8015020 <resetCounters+0x38>
    Data* queueData = &data[i];
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	009b      	lsls	r3, r3, #2
 8014ffe:	4413      	add	r3, r2
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	4a0e      	ldr	r2, [pc, #56]	; (801503c <resetCounters+0x54>)
 8015004:	4413      	add	r3, r2
 8015006:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	2200      	movs	r2, #0
 801500c:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	2200      	movs	r2, #0
 8015012:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	2200      	movs	r2, #0
 8015018:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	3301      	adds	r3, #1
 801501e:	607b      	str	r3, [r7, #4]
 8015020:	4b07      	ldr	r3, [pc, #28]	; (8015040 <resetCounters+0x58>)
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	461a      	mov	r2, r3
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	4293      	cmp	r3, r2
 801502a:	dbe5      	blt.n	8014ff8 <resetCounters+0x10>
  }
}
 801502c:	bf00      	nop
 801502e:	bf00      	nop
 8015030:	370c      	adds	r7, #12
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop
 801503c:	2000c2d4 	.word	0x2000c2d4
 8015040:	20000ee8 	.word	0x20000ee8

08015044 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  debugPrint();
 801504c:	f7ff ff70 	bl	8014f30 <debugPrint>
}
 8015050:	bf00      	nop
 8015052:	3708      	adds	r7, #8
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}

08015058 <statsCntRateCounterUpdate>:
    counter->latestCount = 0;
    counter->latestAveragingMs = 0;
    counter->latestRate = 0.0f;
}

float statsCntRateCounterUpdate(statsCntRateCounter_t* counter, uint32_t now_ms) {
 8015058:	b480      	push	{r7}
 801505a:	b087      	sub	sp, #28
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
    uint32_t dt_ms = now_ms - counter->latestAveragingMs;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	689b      	ldr	r3, [r3, #8]
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	1ad3      	subs	r3, r2, r3
 801506a:	617b      	str	r3, [r7, #20]
    if (dt_ms > counter->intervalMs) {
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	691b      	ldr	r3, [r3, #16]
 8015070:	697a      	ldr	r2, [r7, #20]
 8015072:	429a      	cmp	r2, r3
 8015074:	d925      	bls.n	80150c2 <statsCntRateCounterUpdate+0x6a>
        float dt_s = dt_ms / 1000.0f;
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	ee07 3a90 	vmov	s15, r3
 801507c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015080:	eddf 6a15 	vldr	s13, [pc, #84]	; 80150d8 <statsCntRateCounterUpdate+0x80>
 8015084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015088:	edc7 7a04 	vstr	s15, [r7, #16]
        float dv = counter->count - counter->latestCount;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681a      	ldr	r2, [r3, #0]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	685b      	ldr	r3, [r3, #4]
 8015094:	1ad3      	subs	r3, r2, r3
 8015096:	ee07 3a90 	vmov	s15, r3
 801509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801509e:	edc7 7a03 	vstr	s15, [r7, #12]

        counter->latestRate = dv / dt_s;
 80150a2:	edd7 6a03 	vldr	s13, [r7, #12]
 80150a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80150aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	edc3 7a03 	vstr	s15, [r3, #12]

        counter->latestCount = counter->count;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	605a      	str	r2, [r3, #4]
        counter->latestAveragingMs = now_ms;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	683a      	ldr	r2, [r7, #0]
 80150c0:	609a      	str	r2, [r3, #8]
    }

    return counter->latestRate;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	68db      	ldr	r3, [r3, #12]
 80150c6:	ee07 3a90 	vmov	s15, r3
}
 80150ca:	eeb0 0a67 	vmov.f32	s0, s15
 80150ce:	371c      	adds	r7, #28
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr
 80150d8:	447a0000 	.word	0x447a0000

080150dc <statsCntRateLogHandler>:

    logger->logByFunction.data = (void*)logger;
    logger->logByFunction.aquireFloat = statsCntRateLogHandler;
}

float statsCntRateLogHandler(uint32_t timestamp, void* data) {
 80150dc:	b580      	push	{r7, lr}
 80150de:	b084      	sub	sp, #16
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
    statsCntRateLogger_t* logger = (statsCntRateLogger_t*)data;
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	60fb      	str	r3, [r7, #12]
    return statsCntRateCounterUpdate(&logger->rateCounter, timestamp);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	3308      	adds	r3, #8
 80150ee:	6879      	ldr	r1, [r7, #4]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7ff ffb1 	bl	8015058 <statsCntRateCounterUpdate>
 80150f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80150fa:	eeb0 0a67 	vmov.f32	s0, s15
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 801510a:	4b14      	ldr	r3, [pc, #80]	; (801515c <sysLoadInit+0x58>)
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	f083 0301 	eor.w	r3, r3, #1
 8015112:	b2db      	uxtb	r3, r3
 8015114:	2b00      	cmp	r3, #0
 8015116:	d104      	bne.n	8015122 <sysLoadInit+0x1e>
 8015118:	223c      	movs	r2, #60	; 0x3c
 801511a:	4911      	ldr	r1, [pc, #68]	; (8015160 <sysLoadInit+0x5c>)
 801511c:	4811      	ldr	r0, [pc, #68]	; (8015164 <sysLoadInit+0x60>)
 801511e:	f7fc ff85 	bl	801202c <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8015122:	4b11      	ldr	r3, [pc, #68]	; (8015168 <sysLoadInit+0x64>)
 8015124:	9301      	str	r3, [sp, #4]
 8015126:	4b11      	ldr	r3, [pc, #68]	; (801516c <sysLoadInit+0x68>)
 8015128:	9300      	str	r3, [sp, #0]
 801512a:	2300      	movs	r3, #0
 801512c:	2201      	movs	r2, #1
 801512e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015132:	480f      	ldr	r0, [pc, #60]	; (8015170 <sysLoadInit+0x6c>)
 8015134:	f00c fe44 	bl	8021dc0 <xTimerCreateStatic>
 8015138:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 801513a:	f00b fe4f 	bl	8020ddc <xTaskGetTickCount>
 801513e:	4602      	mov	r2, r0
 8015140:	2364      	movs	r3, #100	; 0x64
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	2300      	movs	r3, #0
 8015146:	2101      	movs	r1, #1
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f00c fead 	bl	8021ea8 <xTimerGenericCommand>

  initialized = true;
 801514e:	4b03      	ldr	r3, [pc, #12]	; (801515c <sysLoadInit+0x58>)
 8015150:	2201      	movs	r2, #1
 8015152:	701a      	strb	r2, [r3, #0]
}
 8015154:	bf00      	nop
 8015156:	3708      	adds	r7, #8
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	2000c495 	.word	0x2000c495
 8015160:	0802d9e8 	.word	0x0802d9e8
 8015164:	0802da04 	.word	0x0802da04
 8015168:	2000c4a0 	.word	0x2000c4a0
 801516c:	080151f5 	.word	0x080151f5
 8015170:	0802da14 	.word	0x0802da14

08015174 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 801517c:	2300      	movs	r3, #0
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	e00f      	b.n	80151a2 <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 8015182:	4a18      	ldr	r2, [pc, #96]	; (80151e4 <getPreviousTaskData+0x70>)
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	00db      	lsls	r3, r3, #3
 8015188:	4413      	add	r3, r2
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	687a      	ldr	r2, [r7, #4]
 801518e:	429a      	cmp	r2, r3
 8015190:	d104      	bne.n	801519c <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	00db      	lsls	r3, r3, #3
 8015196:	4a13      	ldr	r2, [pc, #76]	; (80151e4 <getPreviousTaskData+0x70>)
 8015198:	4413      	add	r3, r2
 801519a:	e01f      	b.n	80151dc <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	3301      	adds	r3, #1
 80151a0:	60fb      	str	r3, [r7, #12]
 80151a2:	4b11      	ldr	r3, [pc, #68]	; (80151e8 <getPreviousTaskData+0x74>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	68fa      	ldr	r2, [r7, #12]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	dbea      	blt.n	8015182 <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 80151ac:	4b0e      	ldr	r3, [pc, #56]	; (80151e8 <getPreviousTaskData+0x74>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2b1f      	cmp	r3, #31
 80151b2:	dd04      	ble.n	80151be <getPreviousTaskData+0x4a>
 80151b4:	224e      	movs	r2, #78	; 0x4e
 80151b6:	490d      	ldr	r1, [pc, #52]	; (80151ec <getPreviousTaskData+0x78>)
 80151b8:	480d      	ldr	r0, [pc, #52]	; (80151f0 <getPreviousTaskData+0x7c>)
 80151ba:	f7fc ff37 	bl	801202c <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 80151be:	4b0a      	ldr	r3, [pc, #40]	; (80151e8 <getPreviousTaskData+0x74>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	4a07      	ldr	r2, [pc, #28]	; (80151e4 <getPreviousTaskData+0x70>)
 80151c6:	4413      	add	r3, r2
 80151c8:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 80151d0:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <getPreviousTaskData+0x74>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	3301      	adds	r3, #1
 80151d6:	4a04      	ldr	r2, [pc, #16]	; (80151e8 <getPreviousTaskData+0x74>)
 80151d8:	6013      	str	r3, [r2, #0]

  return result;
 80151da:	68bb      	ldr	r3, [r7, #8]
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3710      	adds	r7, #16
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	200062f0 	.word	0x200062f0
 80151e8:	2000c498 	.word	0x2000c498
 80151ec:	0802d9e8 	.word	0x0802d9e8
 80151f0:	0802da28 	.word	0x0802da28

080151f4 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 80151f4:	b580      	push	{r7, lr}
 80151f6:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 80151fa:	af02      	add	r7, sp, #8
 80151fc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8015200:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8015204:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 8015206:	4b4e      	ldr	r3, [pc, #312]	; (8015340 <timerHandler+0x14c>)
 8015208:	781b      	ldrb	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	f000 8092 	beq.w	8015334 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8015210:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8015214:	f107 030c 	add.w	r3, r7, #12
 8015218:	2120      	movs	r1, #32
 801521a:	4618      	mov	r0, r3
 801521c:	f00b fdee 	bl	8020dfc <uxTaskGetSystemState>
 8015220:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8015224:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8015228:	2b1f      	cmp	r3, #31
 801522a:	d904      	bls.n	8015236 <timerHandler+0x42>
 801522c:	225d      	movs	r2, #93	; 0x5d
 801522e:	4945      	ldr	r1, [pc, #276]	; (8015344 <timerHandler+0x150>)
 8015230:	4845      	ldr	r0, [pc, #276]	; (8015348 <timerHandler+0x154>)
 8015232:	f7fc fefb 	bl	801202c <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 8015236:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 801523a:	4b44      	ldr	r3, [pc, #272]	; (801534c <timerHandler+0x158>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	1ad3      	subs	r3, r2, r3
 8015240:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8015244:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8015248:	f7eb f96c 	bl	8000524 <__aeabi_ui2d>
 801524c:	4602      	mov	r2, r0
 801524e:	460b      	mov	r3, r1
 8015250:	f04f 0000 	mov.w	r0, #0
 8015254:	493e      	ldr	r1, [pc, #248]	; (8015350 <timerHandler+0x15c>)
 8015256:	f7eb fb09 	bl	800086c <__aeabi_ddiv>
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	4610      	mov	r0, r2
 8015260:	4619      	mov	r1, r3
 8015262:	f7eb fcb1 	bl	8000bc8 <__aeabi_d2f>
 8015266:	4603      	mov	r3, r0
 8015268:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 801526c:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 801526e:	4939      	ldr	r1, [pc, #228]	; (8015354 <timerHandler+0x160>)
 8015270:	2000      	movs	r0, #0
 8015272:	f7fc fe17 	bl	8011ea4 <SEGGER_RTT_printf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8015276:	4938      	ldr	r1, [pc, #224]	; (8015358 <timerHandler+0x164>)
 8015278:	2000      	movs	r0, #0
 801527a:	f7fc fe13 	bl	8011ea4 <SEGGER_RTT_printf>
    for (uint32_t i = 0; i < taskCount; i++) {
 801527e:	2300      	movs	r3, #0
 8015280:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8015284:	e049      	b.n	801531a <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8015286:	f107 010c 	add.w	r1, r7, #12
 801528a:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 801528e:	4613      	mov	r3, r2
 8015290:	00db      	lsls	r3, r3, #3
 8015292:	4413      	add	r3, r2
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	440b      	add	r3, r1
 8015298:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 801529c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80152a0:	689b      	ldr	r3, [r3, #8]
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7ff ff66 	bl	8015174 <getPreviousTaskData>
 80152a8:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 80152ac:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80152b0:	699b      	ldr	r3, [r3, #24]
 80152b2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 80152b6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 80152c0:	1ad3      	subs	r3, r2, r3
 80152c2:	ee07 3a90 	vmov	s15, r3
 80152c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152ca:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80152ce:	ed93 7a00 	vldr	s14, [r3]
 80152d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152d6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80152da:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 80152de:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80152e2:	6818      	ldr	r0, [r3, #0]
 80152e4:	f7eb f940 	bl	8000568 <__aeabi_f2d>
 80152e8:	4602      	mov	r2, r0
 80152ea:	460b      	mov	r3, r1
 80152ec:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80152f0:	8c09      	ldrh	r1, [r1, #32]
 80152f2:	4608      	mov	r0, r1
 80152f4:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80152f8:	6849      	ldr	r1, [r1, #4]
 80152fa:	9101      	str	r1, [sp, #4]
 80152fc:	9000      	str	r0, [sp, #0]
 80152fe:	4917      	ldr	r1, [pc, #92]	; (801535c <timerHandler+0x168>)
 8015300:	2000      	movs	r0, #0
 8015302:	f7fc fdcf 	bl	8011ea4 <SEGGER_RTT_printf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 8015306:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 801530a:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 801530e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8015310:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8015314:	3301      	adds	r3, #1
 8015316:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 801531a:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 801531e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8015322:	429a      	cmp	r2, r3
 8015324:	d3af      	bcc.n	8015286 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 8015326:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 801532a:	4a08      	ldr	r2, [pc, #32]	; (801534c <timerHandler+0x158>)
 801532c:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 801532e:	4b04      	ldr	r3, [pc, #16]	; (8015340 <timerHandler+0x14c>)
 8015330:	2200      	movs	r2, #0
 8015332:	701a      	strb	r2, [r3, #0]
  }
}
 8015334:	bf00      	nop
 8015336:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	2000c496 	.word	0x2000c496
 8015344:	0802d9e8 	.word	0x0802d9e8
 8015348:	0802da48 	.word	0x0802da48
 801534c:	2000c49c 	.word	0x2000c49c
 8015350:	40590000 	.word	0x40590000
 8015354:	0802da64 	.word	0x0802da64
 8015358:	0802da70 	.word	0x0802da70
 801535c:	0802da88 	.word	0x0802da88

08015360 <usecTimerReset>:
static uint32_t usecTimerHighCount;



void usecTimerReset(void)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 8015366:	4b0c      	ldr	r3, [pc, #48]	; (8015398 <usecTimerReset+0x38>)
 8015368:	781b      	ldrb	r3, [r3, #0]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d104      	bne.n	8015378 <usecTimerReset+0x18>
 801536e:	2211      	movs	r2, #17
 8015370:	490a      	ldr	r1, [pc, #40]	; (801539c <usecTimerReset+0x3c>)
 8015372:	480b      	ldr	r0, [pc, #44]	; (80153a0 <usecTimerReset+0x40>)
 8015374:	f7fc fe5a 	bl	801202c <assertFail>

  const uint32_t zero = 0;
 8015378:	2300      	movs	r3, #0
 801537a:	607b      	str	r3, [r7, #4]
  __atomic_store(&usecTimerHighCount, &zero, __ATOMIC_SEQ_CST);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	4a09      	ldr	r2, [pc, #36]	; (80153a4 <usecTimerReset+0x44>)
 8015380:	f3bf 8f5b 	dmb	ish
 8015384:	6013      	str	r3, [r2, #0]
 8015386:	f3bf 8f5b 	dmb	ish

  TIM7->CNT = 0;
 801538a:	4b07      	ldr	r3, [pc, #28]	; (80153a8 <usecTimerReset+0x48>)
 801538c:	2200      	movs	r2, #0
 801538e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015390:	bf00      	nop
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	2000c4cc 	.word	0x2000c4cc
 801539c:	0802dab8 	.word	0x0802dab8
 80153a0:	0802dad8 	.word	0x0802dad8
 80153a4:	2000c4d0 	.word	0x2000c4d0
 80153a8:	40001400 	.word	0x40001400

080153ac <usecTimestamp>:

uint64_t usecTimestamp(void)
{
 80153ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80153b0:	b08c      	sub	sp, #48	; 0x30
 80153b2:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 80153b4:	4b2b      	ldr	r3, [pc, #172]	; (8015464 <usecTimestamp+0xb8>)
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d104      	bne.n	80153c6 <usecTimestamp+0x1a>
 80153bc:	221b      	movs	r2, #27
 80153be:	492a      	ldr	r1, [pc, #168]	; (8015468 <usecTimestamp+0xbc>)
 80153c0:	482a      	ldr	r0, [pc, #168]	; (801546c <usecTimestamp+0xc0>)
 80153c2:	f7fc fe33 	bl	801202c <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 80153c6:	4b2a      	ldr	r3, [pc, #168]	; (8015470 <usecTimestamp+0xc4>)
 80153c8:	f3bf 8f5b 	dmb	ish
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f3bf 8f5b 	dmb	ish
 80153d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t low = TIM7->CNT;
 80153d4:	4b27      	ldr	r3, [pc, #156]	; (8015474 <usecTimestamp+0xc8>)
 80153d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 80153da:	4b25      	ldr	r3, [pc, #148]	; (8015470 <usecTimestamp+0xc4>)
 80153dc:	f3bf 8f5b 	dmb	ish
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	f3bf 8f5b 	dmb	ish
 80153e6:	627b      	str	r3, [r7, #36]	; 0x24

  // There was no increment in between
  if (high == high0)
 80153e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d118      	bne.n	8015422 <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 80153f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f2:	2200      	movs	r2, #0
 80153f4:	61bb      	str	r3, [r7, #24]
 80153f6:	61fa      	str	r2, [r7, #28]
 80153f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80153fc:	460b      	mov	r3, r1
 80153fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015402:	460b      	mov	r3, r1
 8015404:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8015408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540a:	2200      	movs	r2, #0
 801540c:	613b      	str	r3, [r7, #16]
 801540e:	617a      	str	r2, [r7, #20]
 8015410:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015414:	460b      	mov	r3, r1
 8015416:	eb1a 0403 	adds.w	r4, sl, r3
 801541a:	4613      	mov	r3, r2
 801541c:	eb4b 0503 	adc.w	r5, fp, r3
 8015420:	e018      	b.n	8015454 <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 8015422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015424:	2200      	movs	r2, #0
 8015426:	60bb      	str	r3, [r7, #8]
 8015428:	60fa      	str	r2, [r7, #12]
 801542a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801542e:	460b      	mov	r3, r1
 8015430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8015434:	460b      	mov	r3, r1
 8015436:	ea4f 4803 	mov.w	r8, r3, lsl #16
 801543a:	4b0e      	ldr	r3, [pc, #56]	; (8015474 <usecTimestamp+0xc8>)
 801543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801543e:	2200      	movs	r2, #0
 8015440:	603b      	str	r3, [r7, #0]
 8015442:	607a      	str	r2, [r7, #4]
 8015444:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015448:	460b      	mov	r3, r1
 801544a:	eb18 0403 	adds.w	r4, r8, r3
 801544e:	4613      	mov	r3, r2
 8015450:	eb49 0503 	adc.w	r5, r9, r3
}
 8015454:	4622      	mov	r2, r4
 8015456:	462b      	mov	r3, r5
 8015458:	4610      	mov	r0, r2
 801545a:	4619      	mov	r1, r3
 801545c:	3730      	adds	r7, #48	; 0x30
 801545e:	46bd      	mov	sp, r7
 8015460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015464:	2000c4cc 	.word	0x2000c4cc
 8015468:	0802dab8 	.word	0x0802dab8
 801546c:	0802dad8 	.word	0x0802dad8
 8015470:	2000c4d0 	.word	0x2000c4d0
 8015474:	40001400 	.word	0x40001400

08015478 <resetParamCallback>:

/**
 * Parameters for the usec timer
 * */
static void resetParamCallback(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	af00      	add	r7, sp, #0
  if (reset) {
 801547c:	4b05      	ldr	r3, [pc, #20]	; (8015494 <resetParamCallback+0x1c>)
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d004      	beq.n	801548e <resetParamCallback+0x16>
    usecTimerReset();
 8015484:	f7ff ff6c 	bl	8015360 <usecTimerReset>
    reset = 0;
 8015488:	4b02      	ldr	r3, [pc, #8]	; (8015494 <resetParamCallback+0x1c>)
 801548a:	2200      	movs	r2, #0
 801548c:	701a      	strb	r2, [r3, #0]
  }
}
 801548e:	bf00      	nop
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	2000c4cd 	.word	0x2000c4cd

08015498 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b082      	sub	sp, #8
 801549c:	af02      	add	r7, sp, #8
  if (workerQueue)
 801549e:	4b0e      	ldr	r3, [pc, #56]	; (80154d8 <workerInit+0x40>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d114      	bne.n	80154d0 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 80154a6:	2305      	movs	r3, #5
 80154a8:	4618      	mov	r0, r3
 80154aa:	2308      	movs	r3, #8
 80154ac:	4619      	mov	r1, r3
 80154ae:	2300      	movs	r3, #0
 80154b0:	9300      	str	r3, [sp, #0]
 80154b2:	4b0a      	ldr	r3, [pc, #40]	; (80154dc <workerInit+0x44>)
 80154b4:	4a0a      	ldr	r2, [pc, #40]	; (80154e0 <workerInit+0x48>)
 80154b6:	f00a fa0b 	bl	801f8d0 <xQueueGenericCreateStatic>
 80154ba:	4603      	mov	r3, r0
 80154bc:	4a06      	ldr	r2, [pc, #24]	; (80154d8 <workerInit+0x40>)
 80154be:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 80154c0:	4b05      	ldr	r3, [pc, #20]	; (80154d8 <workerInit+0x40>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4a07      	ldr	r2, [pc, #28]	; (80154e4 <workerInit+0x4c>)
 80154c6:	4908      	ldr	r1, [pc, #32]	; (80154e8 <workerInit+0x50>)
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7ff fced 	bl	8014ea8 <qmRegisterQueue>
 80154ce:	e000      	b.n	80154d2 <workerInit+0x3a>
    return;
 80154d0:	bf00      	nop
}
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	bf00      	nop
 80154d8:	2000c4d4 	.word	0x2000c4d4
 80154dc:	20006418 	.word	0x20006418
 80154e0:	200063f0 	.word	0x200063f0
 80154e4:	0802db64 	.word	0x0802db64
 80154e8:	0802db70 	.word	0x0802db70

080154ec <workerSchedule>:
      work.function(work.arg);
  }
}

int workerSchedule(void (*function)(void*), void *arg)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	6039      	str	r1, [r7, #0]
  struct worker_work work;

  if (!function)
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d101      	bne.n	8015500 <workerSchedule+0x14>
    return ENOEXEC;
 80154fc:	2308      	movs	r3, #8
 80154fe:	e011      	b.n	8015524 <workerSchedule+0x38>

  work.function = function;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	60bb      	str	r3, [r7, #8]
  work.arg = arg;
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(workerQueue, &work, 0) == pdFALSE)
 8015508:	4b08      	ldr	r3, [pc, #32]	; (801552c <workerSchedule+0x40>)
 801550a:	6818      	ldr	r0, [r3, #0]
 801550c:	f107 0108 	add.w	r1, r7, #8
 8015510:	2300      	movs	r3, #0
 8015512:	2200      	movs	r2, #0
 8015514:	f00a faf2 	bl	801fafc <xQueueGenericSend>
 8015518:	4603      	mov	r3, r0
 801551a:	2b00      	cmp	r3, #0
 801551c:	d101      	bne.n	8015522 <workerSchedule+0x36>
    return ENOMEM;
 801551e:	230c      	movs	r3, #12
 8015520:	e000      	b.n	8015524 <workerSchedule+0x38>

  return 0;
 8015522:	2300      	movs	r3, #0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3710      	adds	r7, #16
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}
 801552c:	2000c4d4 	.word	0x2000c4d4

08015530 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8015530:	b480      	push	{r7}
 8015532:	af00      	add	r7, sp, #0

}
 8015534:	bf00      	nop
 8015536:	46bd      	mov	sp, r7
 8015538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553c:	4770      	bx	lr

0801553e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 801553e:	b480      	push	{r7}
 8015540:	af00      	add	r7, sp, #0
return 0;
 8015542:	2300      	movs	r3, #0
}
 8015544:	4618      	mov	r0, r3
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr

0801554e <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 801554e:	b480      	push	{r7}
 8015550:	b083      	sub	sp, #12
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
 8015556:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8015558:	bf00      	nop
 801555a:	370c      	adds	r7, #12
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr

08015564 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
 801556a:	60f8      	str	r0, [r7, #12]
 801556c:	60b9      	str	r1, [r7, #8]
 801556e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	4a07      	ldr	r2, [pc, #28]	; (8015590 <vApplicationGetIdleTaskMemory+0x2c>)
 8015574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	4a06      	ldr	r2, [pc, #24]	; (8015594 <vApplicationGetIdleTaskMemory+0x30>)
 801557a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2280      	movs	r2, #128	; 0x80
 8015580:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8015582:	bf00      	nop
 8015584:	3714      	adds	r7, #20
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	2000c4d8 	.word	0x2000c4d8
 8015594:	2000c590 	.word	0x2000c590

08015598 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8015598:	b480      	push	{r7}
 801559a:	b085      	sub	sp, #20
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	4a07      	ldr	r2, [pc, #28]	; (80155c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80155a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	4a06      	ldr	r2, [pc, #24]	; (80155c8 <vApplicationGetTimerTaskMemory+0x30>)
 80155ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155b6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80155b8:	bf00      	nop
 80155ba:	3714      	adds	r7, #20
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr
 80155c4:	2000c790 	.word	0x2000c790
 80155c8:	2000c848 	.word	0x2000c848

080155cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80155cc:	b5b0      	push	{r4, r5, r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80155d2:	f001 f8e5 	bl	80167a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80155d6:	f000 f871 	bl	80156bc <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80155da:	f000 facf 	bl	8015b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80155de:	f000 fa85 	bl	8015aec <MX_DMA_Init>
  MX_USART6_UART_Init();
 80155e2:	f000 fa59 	bl	8015a98 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80155e6:	f000 fa21 	bl	8015a2c <MX_TIM7_Init>
  MX_SPI1_Init();
 80155ea:	f000 f973 	bl	80158d4 <MX_SPI1_Init>
  MX_ADC1_Init();
 80155ee:	f000 f8cd 	bl	801578c <MX_ADC1_Init>
  MX_ADC2_Init();
 80155f2:	f000 f91d 	bl	8015830 <MX_ADC2_Init>
  MX_TIM3_Init();
 80155f6:	f000 f9a3 	bl	8015940 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  debugInit();
 80155fa:	f7fc fe68 	bl	80122ce <debugInit>
  uartInit();
 80155fe:	f7fc fe77 	bl	80122f0 <uartInit>
  uartDmaInit();
 8015602:	f7fc fe93 	bl	801232c <uartDmaInit>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8015606:	4b24      	ldr	r3, [pc, #144]	; (8015698 <main+0xcc>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	68da      	ldr	r2, [r3, #12]
 801560c:	4b22      	ldr	r3, [pc, #136]	; (8015698 <main+0xcc>)
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	f042 0220 	orr.w	r2, r2, #32
 8015614:	60da      	str	r2, [r3, #12]


  freertos_IntroTitle();
 8015616:	f000 fb3d 	bl	8015c94 <freertos_IntroTitle>

  check_enter_bootloader();
 801561a:	f7ef f8e9 	bl	80047f0 <check_enter_bootloader>

  int err = platformInit();
 801561e:	f7fb fd01 	bl	8011024 <platformInit>
 8015622:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d000      	beq.n	801562c <main+0x60>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 801562a:	e7fe      	b.n	801562a <main+0x5e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 801562c:	481b      	ldr	r0, [pc, #108]	; (801569c <main+0xd0>)
 801562e:	f004 fbf7 	bl	8019e20 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8015632:	4b1b      	ldr	r3, [pc, #108]	; (80156a0 <main+0xd4>)
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	4a1b      	ldr	r2, [pc, #108]	; (80156a4 <main+0xd8>)
 8015638:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 801563a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801563e:	f000 fbb5 	bl	8015dac <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8015642:	4b17      	ldr	r3, [pc, #92]	; (80156a0 <main+0xd4>)
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	4a18      	ldr	r2, [pc, #96]	; (80156a8 <main+0xdc>)
 8015648:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 801564a:	4814      	ldr	r0, [pc, #80]	; (801569c <main+0xd0>)
 801564c:	f004 fc58 	bl	8019f00 <HAL_TIM_Base_Stop_IT>
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 8015650:	4b15      	ldr	r3, [pc, #84]	; (80156a8 <main+0xdc>)
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	4b13      	ldr	r3, [pc, #76]	; (80156a4 <main+0xd8>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	4a14      	ldr	r2, [pc, #80]	; (80156ac <main+0xe0>)
 801565c:	fba2 2303 	umull	r2, r3, r2, r3
 8015660:	091b      	lsrs	r3, r3, #4
 8015662:	461a      	mov	r2, r3
 8015664:	4912      	ldr	r1, [pc, #72]	; (80156b0 <main+0xe4>)
 8015666:	2000      	movs	r0, #0
 8015668:	f7fc fc1c 	bl	8011ea4 <SEGGER_RTT_printf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 801566c:	f7f0 fab4 	bl	8005bd8 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8015670:	4b10      	ldr	r3, [pc, #64]	; (80156b4 <main+0xe8>)
 8015672:	463c      	mov	r4, r7
 8015674:	461d      	mov	r5, r3
 8015676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801567a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801567e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8015682:	463b      	mov	r3, r7
 8015684:	2100      	movs	r1, #0
 8015686:	4618      	mov	r0, r3
 8015688:	f009 ff9f 	bl	801f5ca <osThreadCreate>
 801568c:	4603      	mov	r3, r0
 801568e:	4a0a      	ldr	r2, [pc, #40]	; (80156b8 <main+0xec>)
 8015690:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8015692:	f009 ff93 	bl	801f5bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8015696:	e7fe      	b.n	8015696 <main+0xca>
 8015698:	2000d340 	.word	0x2000d340
 801569c:	2000d2f8 	.word	0x2000d2f8
 80156a0:	e0001000 	.word	0xe0001000
 80156a4:	2000d44c 	.word	0x2000d44c
 80156a8:	2000d450 	.word	0x2000d450
 80156ac:	38e38e39 	.word	0x38e38e39
 80156b0:	0802db8c 	.word	0x0802db8c
 80156b4:	0802dba8 	.word	0x0802dba8
 80156b8:	2000d448 	.word	0x2000d448

080156bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b094      	sub	sp, #80	; 0x50
 80156c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80156c2:	f107 0320 	add.w	r3, r7, #32
 80156c6:	2230      	movs	r2, #48	; 0x30
 80156c8:	2100      	movs	r1, #0
 80156ca:	4618      	mov	r0, r3
 80156cc:	f00f f9d8 	bl	8024a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80156d0:	f107 030c 	add.w	r3, r7, #12
 80156d4:	2200      	movs	r2, #0
 80156d6:	601a      	str	r2, [r3, #0]
 80156d8:	605a      	str	r2, [r3, #4]
 80156da:	609a      	str	r2, [r3, #8]
 80156dc:	60da      	str	r2, [r3, #12]
 80156de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80156e0:	2300      	movs	r3, #0
 80156e2:	60bb      	str	r3, [r7, #8]
 80156e4:	4b27      	ldr	r3, [pc, #156]	; (8015784 <SystemClock_Config+0xc8>)
 80156e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156e8:	4a26      	ldr	r2, [pc, #152]	; (8015784 <SystemClock_Config+0xc8>)
 80156ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80156ee:	6413      	str	r3, [r2, #64]	; 0x40
 80156f0:	4b24      	ldr	r3, [pc, #144]	; (8015784 <SystemClock_Config+0xc8>)
 80156f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80156f8:	60bb      	str	r3, [r7, #8]
 80156fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80156fc:	2300      	movs	r3, #0
 80156fe:	607b      	str	r3, [r7, #4]
 8015700:	4b21      	ldr	r3, [pc, #132]	; (8015788 <SystemClock_Config+0xcc>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	4a20      	ldr	r2, [pc, #128]	; (8015788 <SystemClock_Config+0xcc>)
 8015706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801570a:	6013      	str	r3, [r2, #0]
 801570c:	4b1e      	ldr	r3, [pc, #120]	; (8015788 <SystemClock_Config+0xcc>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015714:	607b      	str	r3, [r7, #4]
 8015716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8015718:	2301      	movs	r3, #1
 801571a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801571c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015722:	2302      	movs	r3, #2
 8015724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8015726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801572a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801572c:	2304      	movs	r3, #4
 801572e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8015730:	2348      	movs	r3, #72	; 0x48
 8015732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015734:	2302      	movs	r3, #2
 8015736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8015738:	2303      	movs	r3, #3
 801573a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801573c:	f107 0320 	add.w	r3, r7, #32
 8015740:	4618      	mov	r0, r3
 8015742:	f003 fdfd 	bl	8019340 <HAL_RCC_OscConfig>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d001      	beq.n	8015750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 801574c:	f000 fb5a 	bl	8015e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015750:	230f      	movs	r3, #15
 8015752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015754:	2302      	movs	r3, #2
 8015756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015758:	2300      	movs	r3, #0
 801575a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801575c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8015762:	2300      	movs	r3, #0
 8015764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8015766:	f107 030c 	add.w	r3, r7, #12
 801576a:	2102      	movs	r1, #2
 801576c:	4618      	mov	r0, r3
 801576e:	f004 f85f 	bl	8019830 <HAL_RCC_ClockConfig>
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d001      	beq.n	801577c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8015778:	f000 fb44 	bl	8015e04 <Error_Handler>
  }
}
 801577c:	bf00      	nop
 801577e:	3750      	adds	r7, #80	; 0x50
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}
 8015784:	40023800 	.word	0x40023800
 8015788:	40007000 	.word	0x40007000

0801578c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b084      	sub	sp, #16
 8015790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8015792:	463b      	mov	r3, r7
 8015794:	2200      	movs	r2, #0
 8015796:	601a      	str	r2, [r3, #0]
 8015798:	605a      	str	r2, [r3, #4]
 801579a:	609a      	str	r2, [r3, #8]
 801579c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801579e:	4b21      	ldr	r3, [pc, #132]	; (8015824 <MX_ADC1_Init+0x98>)
 80157a0:	4a21      	ldr	r2, [pc, #132]	; (8015828 <MX_ADC1_Init+0x9c>)
 80157a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80157a4:	4b1f      	ldr	r3, [pc, #124]	; (8015824 <MX_ADC1_Init+0x98>)
 80157a6:	2200      	movs	r2, #0
 80157a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80157aa:	4b1e      	ldr	r3, [pc, #120]	; (8015824 <MX_ADC1_Init+0x98>)
 80157ac:	2200      	movs	r2, #0
 80157ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80157b0:	4b1c      	ldr	r3, [pc, #112]	; (8015824 <MX_ADC1_Init+0x98>)
 80157b2:	2200      	movs	r2, #0
 80157b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80157b6:	4b1b      	ldr	r3, [pc, #108]	; (8015824 <MX_ADC1_Init+0x98>)
 80157b8:	2201      	movs	r2, #1
 80157ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80157bc:	4b19      	ldr	r3, [pc, #100]	; (8015824 <MX_ADC1_Init+0x98>)
 80157be:	2200      	movs	r2, #0
 80157c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80157c4:	4b17      	ldr	r3, [pc, #92]	; (8015824 <MX_ADC1_Init+0x98>)
 80157c6:	2200      	movs	r2, #0
 80157c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80157ca:	4b16      	ldr	r3, [pc, #88]	; (8015824 <MX_ADC1_Init+0x98>)
 80157cc:	4a17      	ldr	r2, [pc, #92]	; (801582c <MX_ADC1_Init+0xa0>)
 80157ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80157d0:	4b14      	ldr	r3, [pc, #80]	; (8015824 <MX_ADC1_Init+0x98>)
 80157d2:	2200      	movs	r2, #0
 80157d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80157d6:	4b13      	ldr	r3, [pc, #76]	; (8015824 <MX_ADC1_Init+0x98>)
 80157d8:	2201      	movs	r2, #1
 80157da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80157dc:	4b11      	ldr	r3, [pc, #68]	; (8015824 <MX_ADC1_Init+0x98>)
 80157de:	2201      	movs	r2, #1
 80157e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80157e4:	4b0f      	ldr	r3, [pc, #60]	; (8015824 <MX_ADC1_Init+0x98>)
 80157e6:	2201      	movs	r2, #1
 80157e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80157ea:	480e      	ldr	r0, [pc, #56]	; (8015824 <MX_ADC1_Init+0x98>)
 80157ec:	f001 f86e 	bl	80168cc <HAL_ADC_Init>
 80157f0:	4603      	mov	r3, r0
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d001      	beq.n	80157fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80157f6:	f000 fb05 	bl	8015e04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80157fa:	230b      	movs	r3, #11
 80157fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80157fe:	2301      	movs	r3, #1
 8015800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8015802:	2307      	movs	r3, #7
 8015804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8015806:	463b      	mov	r3, r7
 8015808:	4619      	mov	r1, r3
 801580a:	4806      	ldr	r0, [pc, #24]	; (8015824 <MX_ADC1_Init+0x98>)
 801580c:	f001 f9d0 	bl	8016bb0 <HAL_ADC_ConfigChannel>
 8015810:	4603      	mov	r3, r0
 8015812:	2b00      	cmp	r3, #0
 8015814:	d001      	beq.n	801581a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8015816:	f000 faf5 	bl	8015e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801581a:	bf00      	nop
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	2000d048 	.word	0x2000d048
 8015828:	40012000 	.word	0x40012000
 801582c:	0f000001 	.word	0x0f000001

08015830 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8015836:	463b      	mov	r3, r7
 8015838:	2200      	movs	r2, #0
 801583a:	601a      	str	r2, [r3, #0]
 801583c:	605a      	str	r2, [r3, #4]
 801583e:	609a      	str	r2, [r3, #8]
 8015840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8015842:	4b21      	ldr	r3, [pc, #132]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015844:	4a21      	ldr	r2, [pc, #132]	; (80158cc <MX_ADC2_Init+0x9c>)
 8015846:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8015848:	4b1f      	ldr	r3, [pc, #124]	; (80158c8 <MX_ADC2_Init+0x98>)
 801584a:	2200      	movs	r2, #0
 801584c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 801584e:	4b1e      	ldr	r3, [pc, #120]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015850:	2200      	movs	r2, #0
 8015852:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8015854:	4b1c      	ldr	r3, [pc, #112]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015856:	2200      	movs	r2, #0
 8015858:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 801585a:	4b1b      	ldr	r3, [pc, #108]	; (80158c8 <MX_ADC2_Init+0x98>)
 801585c:	2201      	movs	r2, #1
 801585e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8015860:	4b19      	ldr	r3, [pc, #100]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015862:	2200      	movs	r2, #0
 8015864:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8015868:	4b17      	ldr	r3, [pc, #92]	; (80158c8 <MX_ADC2_Init+0x98>)
 801586a:	2200      	movs	r2, #0
 801586c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801586e:	4b16      	ldr	r3, [pc, #88]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015870:	4a17      	ldr	r2, [pc, #92]	; (80158d0 <MX_ADC2_Init+0xa0>)
 8015872:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8015874:	4b14      	ldr	r3, [pc, #80]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015876:	2200      	movs	r2, #0
 8015878:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801587a:	4b13      	ldr	r3, [pc, #76]	; (80158c8 <MX_ADC2_Init+0x98>)
 801587c:	2201      	movs	r2, #1
 801587e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8015880:	4b11      	ldr	r3, [pc, #68]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015882:	2201      	movs	r2, #1
 8015884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8015888:	4b0f      	ldr	r3, [pc, #60]	; (80158c8 <MX_ADC2_Init+0x98>)
 801588a:	2201      	movs	r2, #1
 801588c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801588e:	480e      	ldr	r0, [pc, #56]	; (80158c8 <MX_ADC2_Init+0x98>)
 8015890:	f001 f81c 	bl	80168cc <HAL_ADC_Init>
 8015894:	4603      	mov	r3, r0
 8015896:	2b00      	cmp	r3, #0
 8015898:	d001      	beq.n	801589e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 801589a:	f000 fab3 	bl	8015e04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 801589e:	230c      	movs	r3, #12
 80158a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80158a2:	2301      	movs	r3, #1
 80158a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80158a6:	2307      	movs	r3, #7
 80158a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80158aa:	463b      	mov	r3, r7
 80158ac:	4619      	mov	r1, r3
 80158ae:	4806      	ldr	r0, [pc, #24]	; (80158c8 <MX_ADC2_Init+0x98>)
 80158b0:	f001 f97e 	bl	8016bb0 <HAL_ADC_ConfigChannel>
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d001      	beq.n	80158be <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80158ba:	f000 faa3 	bl	8015e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80158be:	bf00      	nop
 80158c0:	3710      	adds	r7, #16
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
 80158c6:	bf00      	nop
 80158c8:	2000d090 	.word	0x2000d090
 80158cc:	40012100 	.word	0x40012100
 80158d0:	0f000001 	.word	0x0f000001

080158d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80158d8:	4b17      	ldr	r3, [pc, #92]	; (8015938 <MX_SPI1_Init+0x64>)
 80158da:	4a18      	ldr	r2, [pc, #96]	; (801593c <MX_SPI1_Init+0x68>)
 80158dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80158de:	4b16      	ldr	r3, [pc, #88]	; (8015938 <MX_SPI1_Init+0x64>)
 80158e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80158e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80158e6:	4b14      	ldr	r3, [pc, #80]	; (8015938 <MX_SPI1_Init+0x64>)
 80158e8:	2200      	movs	r2, #0
 80158ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80158ec:	4b12      	ldr	r3, [pc, #72]	; (8015938 <MX_SPI1_Init+0x64>)
 80158ee:	2200      	movs	r2, #0
 80158f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80158f2:	4b11      	ldr	r3, [pc, #68]	; (8015938 <MX_SPI1_Init+0x64>)
 80158f4:	2202      	movs	r2, #2
 80158f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80158f8:	4b0f      	ldr	r3, [pc, #60]	; (8015938 <MX_SPI1_Init+0x64>)
 80158fa:	2201      	movs	r2, #1
 80158fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80158fe:	4b0e      	ldr	r3, [pc, #56]	; (8015938 <MX_SPI1_Init+0x64>)
 8015900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8015906:	4b0c      	ldr	r3, [pc, #48]	; (8015938 <MX_SPI1_Init+0x64>)
 8015908:	2210      	movs	r2, #16
 801590a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801590c:	4b0a      	ldr	r3, [pc, #40]	; (8015938 <MX_SPI1_Init+0x64>)
 801590e:	2200      	movs	r2, #0
 8015910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8015912:	4b09      	ldr	r3, [pc, #36]	; (8015938 <MX_SPI1_Init+0x64>)
 8015914:	2200      	movs	r2, #0
 8015916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015918:	4b07      	ldr	r3, [pc, #28]	; (8015938 <MX_SPI1_Init+0x64>)
 801591a:	2200      	movs	r2, #0
 801591c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801591e:	4b06      	ldr	r3, [pc, #24]	; (8015938 <MX_SPI1_Init+0x64>)
 8015920:	220a      	movs	r2, #10
 8015922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8015924:	4804      	ldr	r0, [pc, #16]	; (8015938 <MX_SPI1_Init+0x64>)
 8015926:	f004 f9a3 	bl	8019c70 <HAL_SPI_Init>
 801592a:	4603      	mov	r3, r0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d001      	beq.n	8015934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8015930:	f000 fa68 	bl	8015e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8015934:	bf00      	nop
 8015936:	bd80      	pop	{r7, pc}
 8015938:	2000d198 	.word	0x2000d198
 801593c:	40013000 	.word	0x40013000

08015940 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b08e      	sub	sp, #56	; 0x38
 8015944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801594a:	2200      	movs	r2, #0
 801594c:	601a      	str	r2, [r3, #0]
 801594e:	605a      	str	r2, [r3, #4]
 8015950:	609a      	str	r2, [r3, #8]
 8015952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015954:	f107 0320 	add.w	r3, r7, #32
 8015958:	2200      	movs	r2, #0
 801595a:	601a      	str	r2, [r3, #0]
 801595c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801595e:	1d3b      	adds	r3, r7, #4
 8015960:	2200      	movs	r2, #0
 8015962:	601a      	str	r2, [r3, #0]
 8015964:	605a      	str	r2, [r3, #4]
 8015966:	609a      	str	r2, [r3, #8]
 8015968:	60da      	str	r2, [r3, #12]
 801596a:	611a      	str	r2, [r3, #16]
 801596c:	615a      	str	r2, [r3, #20]
 801596e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8015970:	4b2c      	ldr	r3, [pc, #176]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015972:	4a2d      	ldr	r2, [pc, #180]	; (8015a28 <MX_TIM3_Init+0xe8>)
 8015974:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8015976:	4b2b      	ldr	r3, [pc, #172]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015978:	f240 32e7 	movw	r2, #999	; 0x3e7
 801597c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801597e:	4b29      	ldr	r3, [pc, #164]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015980:	2200      	movs	r2, #0
 8015982:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8015984:	4b27      	ldr	r3, [pc, #156]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015986:	2247      	movs	r2, #71	; 0x47
 8015988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801598a:	4b26      	ldr	r3, [pc, #152]	; (8015a24 <MX_TIM3_Init+0xe4>)
 801598c:	2200      	movs	r2, #0
 801598e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015990:	4b24      	ldr	r3, [pc, #144]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015992:	2200      	movs	r2, #0
 8015994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8015996:	4823      	ldr	r0, [pc, #140]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015998:	f004 f9f3 	bl	8019d82 <HAL_TIM_Base_Init>
 801599c:	4603      	mov	r3, r0
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d001      	beq.n	80159a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80159a2:	f000 fa2f 	bl	8015e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80159a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80159aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80159ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159b0:	4619      	mov	r1, r3
 80159b2:	481c      	ldr	r0, [pc, #112]	; (8015a24 <MX_TIM3_Init+0xe4>)
 80159b4:	f004 fe16 	bl	801a5e4 <HAL_TIM_ConfigClockSource>
 80159b8:	4603      	mov	r3, r0
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d001      	beq.n	80159c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80159be:	f000 fa21 	bl	8015e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80159c2:	4818      	ldr	r0, [pc, #96]	; (8015a24 <MX_TIM3_Init+0xe4>)
 80159c4:	f004 facb 	bl	8019f5e <HAL_TIM_PWM_Init>
 80159c8:	4603      	mov	r3, r0
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d001      	beq.n	80159d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80159ce:	f000 fa19 	bl	8015e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80159d2:	2300      	movs	r3, #0
 80159d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80159d6:	2300      	movs	r3, #0
 80159d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80159da:	f107 0320 	add.w	r3, r7, #32
 80159de:	4619      	mov	r1, r3
 80159e0:	4810      	ldr	r0, [pc, #64]	; (8015a24 <MX_TIM3_Init+0xe4>)
 80159e2:	f005 fa15 	bl	801ae10 <HAL_TIMEx_MasterConfigSynchronization>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d001      	beq.n	80159f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80159ec:	f000 fa0a 	bl	8015e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80159f0:	2360      	movs	r3, #96	; 0x60
 80159f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 80159f4:	2324      	movs	r3, #36	; 0x24
 80159f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80159f8:	2300      	movs	r3, #0
 80159fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80159fc:	2300      	movs	r3, #0
 80159fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8015a00:	1d3b      	adds	r3, r7, #4
 8015a02:	2200      	movs	r2, #0
 8015a04:	4619      	mov	r1, r3
 8015a06:	4807      	ldr	r0, [pc, #28]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015a08:	f004 fd2a 	bl	801a460 <HAL_TIM_PWM_ConfigChannel>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d001      	beq.n	8015a16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8015a12:	f000 f9f7 	bl	8015e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8015a16:	4803      	ldr	r0, [pc, #12]	; (8015a24 <MX_TIM3_Init+0xe4>)
 8015a18:	f000 fbf4 	bl	8016204 <HAL_TIM_MspPostInit>

}
 8015a1c:	bf00      	nop
 8015a1e:	3738      	adds	r7, #56	; 0x38
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}
 8015a24:	2000d2b0 	.word	0x2000d2b0
 8015a28:	40000400 	.word	0x40000400

08015a2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015a32:	463b      	mov	r3, r7
 8015a34:	2200      	movs	r2, #0
 8015a36:	601a      	str	r2, [r3, #0]
 8015a38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8015a3a:	4b15      	ldr	r3, [pc, #84]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a3c:	4a15      	ldr	r2, [pc, #84]	; (8015a94 <MX_TIM7_Init+0x68>)
 8015a3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8015a40:	4b13      	ldr	r3, [pc, #76]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a42:	2247      	movs	r2, #71	; 0x47
 8015a44:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015a46:	4b12      	ldr	r3, [pc, #72]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a48:	2200      	movs	r2, #0
 8015a4a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8015a4c:	4b10      	ldr	r3, [pc, #64]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a52:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015a54:	4b0e      	ldr	r3, [pc, #56]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a56:	2200      	movs	r2, #0
 8015a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8015a5a:	480d      	ldr	r0, [pc, #52]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a5c:	f004 f991 	bl	8019d82 <HAL_TIM_Base_Init>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8015a66:	f000 f9cd 	bl	8015e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8015a72:	463b      	mov	r3, r7
 8015a74:	4619      	mov	r1, r3
 8015a76:	4806      	ldr	r0, [pc, #24]	; (8015a90 <MX_TIM7_Init+0x64>)
 8015a78:	f005 f9ca 	bl	801ae10 <HAL_TIMEx_MasterConfigSynchronization>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d001      	beq.n	8015a86 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8015a82:	f000 f9bf 	bl	8015e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8015a86:	bf00      	nop
 8015a88:	3708      	adds	r7, #8
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	2000d2f8 	.word	0x2000d2f8
 8015a94:	40001400 	.word	0x40001400

08015a98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8015a9c:	4b11      	ldr	r3, [pc, #68]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015a9e:	4a12      	ldr	r2, [pc, #72]	; (8015ae8 <MX_USART6_UART_Init+0x50>)
 8015aa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8015aa2:	4b10      	ldr	r3, [pc, #64]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8015aa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8015aaa:	4b0e      	ldr	r3, [pc, #56]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015aac:	2200      	movs	r2, #0
 8015aae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8015ab0:	4b0c      	ldr	r3, [pc, #48]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8015ab6:	4b0b      	ldr	r3, [pc, #44]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015ab8:	2200      	movs	r2, #0
 8015aba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8015abc:	4b09      	ldr	r3, [pc, #36]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015abe:	220c      	movs	r2, #12
 8015ac0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015ac2:	4b08      	ldr	r3, [pc, #32]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8015ac8:	4b06      	ldr	r3, [pc, #24]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015aca:	2200      	movs	r2, #0
 8015acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8015ace:	4805      	ldr	r0, [pc, #20]	; (8015ae4 <MX_USART6_UART_Init+0x4c>)
 8015ad0:	f005 fa2e 	bl	801af30 <HAL_UART_Init>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d001      	beq.n	8015ade <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8015ada:	f000 f993 	bl	8015e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8015ade:	bf00      	nop
 8015ae0:	bd80      	pop	{r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	2000d340 	.word	0x2000d340
 8015ae8:	40011400 	.word	0x40011400

08015aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8015af2:	2300      	movs	r3, #0
 8015af4:	607b      	str	r3, [r7, #4]
 8015af6:	4b20      	ldr	r3, [pc, #128]	; (8015b78 <MX_DMA_Init+0x8c>)
 8015af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015afa:	4a1f      	ldr	r2, [pc, #124]	; (8015b78 <MX_DMA_Init+0x8c>)
 8015afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015b00:	6313      	str	r3, [r2, #48]	; 0x30
 8015b02:	4b1d      	ldr	r3, [pc, #116]	; (8015b78 <MX_DMA_Init+0x8c>)
 8015b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015b0a:	607b      	str	r3, [r7, #4]
 8015b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8015b0e:	2200      	movs	r2, #0
 8015b10:	2105      	movs	r1, #5
 8015b12:	2038      	movs	r0, #56	; 0x38
 8015b14:	f001 fbc7 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8015b18:	2038      	movs	r0, #56	; 0x38
 8015b1a:	f001 fbe0 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8015b1e:	2200      	movs	r2, #0
 8015b20:	2105      	movs	r1, #5
 8015b22:	2039      	movs	r0, #57	; 0x39
 8015b24:	f001 fbbf 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8015b28:	2039      	movs	r0, #57	; 0x39
 8015b2a:	f001 fbd8 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8015b2e:	2200      	movs	r2, #0
 8015b30:	2105      	movs	r1, #5
 8015b32:	203a      	movs	r0, #58	; 0x3a
 8015b34:	f001 fbb7 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8015b38:	203a      	movs	r0, #58	; 0x3a
 8015b3a:	f001 fbd0 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8015b3e:	2200      	movs	r2, #0
 8015b40:	2105      	movs	r1, #5
 8015b42:	203b      	movs	r0, #59	; 0x3b
 8015b44:	f001 fbaf 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8015b48:	203b      	movs	r0, #59	; 0x3b
 8015b4a:	f001 fbc8 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8015b4e:	2200      	movs	r2, #0
 8015b50:	2100      	movs	r1, #0
 8015b52:	203c      	movs	r0, #60	; 0x3c
 8015b54:	f001 fba7 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8015b58:	203c      	movs	r0, #60	; 0x3c
 8015b5a:	f001 fbc0 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8015b5e:	2200      	movs	r2, #0
 8015b60:	2105      	movs	r1, #5
 8015b62:	2045      	movs	r0, #69	; 0x45
 8015b64:	f001 fb9f 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8015b68:	2045      	movs	r0, #69	; 0x45
 8015b6a:	f001 fbb8 	bl	80172de <HAL_NVIC_EnableIRQ>

}
 8015b6e:	bf00      	nop
 8015b70:	3708      	adds	r7, #8
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	40023800 	.word	0x40023800

08015b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b08a      	sub	sp, #40	; 0x28
 8015b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b82:	f107 0314 	add.w	r3, r7, #20
 8015b86:	2200      	movs	r2, #0
 8015b88:	601a      	str	r2, [r3, #0]
 8015b8a:	605a      	str	r2, [r3, #4]
 8015b8c:	609a      	str	r2, [r3, #8]
 8015b8e:	60da      	str	r2, [r3, #12]
 8015b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8015b92:	2300      	movs	r3, #0
 8015b94:	613b      	str	r3, [r7, #16]
 8015b96:	4b36      	ldr	r3, [pc, #216]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b9a:	4a35      	ldr	r2, [pc, #212]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8015ba2:	4b33      	ldr	r3, [pc, #204]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015baa:	613b      	str	r3, [r7, #16]
 8015bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015bae:	2300      	movs	r3, #0
 8015bb0:	60fb      	str	r3, [r7, #12]
 8015bb2:	4b2f      	ldr	r3, [pc, #188]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bb6:	4a2e      	ldr	r2, [pc, #184]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bb8:	f043 0304 	orr.w	r3, r3, #4
 8015bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8015bbe:	4b2c      	ldr	r3, [pc, #176]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bc2:	f003 0304 	and.w	r3, r3, #4
 8015bc6:	60fb      	str	r3, [r7, #12]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bca:	2300      	movs	r3, #0
 8015bcc:	60bb      	str	r3, [r7, #8]
 8015bce:	4b28      	ldr	r3, [pc, #160]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bd2:	4a27      	ldr	r2, [pc, #156]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bd4:	f043 0301 	orr.w	r3, r3, #1
 8015bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8015bda:	4b25      	ldr	r3, [pc, #148]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bde:	f003 0301 	and.w	r3, r3, #1
 8015be2:	60bb      	str	r3, [r7, #8]
 8015be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015be6:	2300      	movs	r3, #0
 8015be8:	607b      	str	r3, [r7, #4]
 8015bea:	4b21      	ldr	r3, [pc, #132]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bee:	4a20      	ldr	r2, [pc, #128]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bf0:	f043 0302 	orr.w	r3, r3, #2
 8015bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8015bf6:	4b1e      	ldr	r3, [pc, #120]	; (8015c70 <MX_GPIO_Init+0xf4>)
 8015bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bfa:	f003 0302 	and.w	r3, r3, #2
 8015bfe:	607b      	str	r3, [r7, #4]
 8015c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8015c02:	2201      	movs	r2, #1
 8015c04:	2110      	movs	r1, #16
 8015c06:	481b      	ldr	r0, [pc, #108]	; (8015c74 <MX_GPIO_Init+0xf8>)
 8015c08:	f002 f930 	bl	8017e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	2120      	movs	r1, #32
 8015c10:	4819      	ldr	r0, [pc, #100]	; (8015c78 <MX_GPIO_Init+0xfc>)
 8015c12:	f002 f92b 	bl	8017e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8015c16:	2310      	movs	r3, #16
 8015c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c22:	2303      	movs	r3, #3
 8015c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8015c26:	f107 0314 	add.w	r3, r7, #20
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	4811      	ldr	r0, [pc, #68]	; (8015c74 <MX_GPIO_Init+0xf8>)
 8015c2e:	f001 ff81 	bl	8017b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8015c32:	2310      	movs	r3, #16
 8015c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8015c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8015c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8015c40:	f107 0314 	add.w	r3, r7, #20
 8015c44:	4619      	mov	r1, r3
 8015c46:	480d      	ldr	r0, [pc, #52]	; (8015c7c <MX_GPIO_Init+0x100>)
 8015c48:	f001 ff74 	bl	8017b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8015c4c:	2320      	movs	r3, #32
 8015c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015c50:	2301      	movs	r3, #1
 8015c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c54:	2300      	movs	r3, #0
 8015c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8015c5c:	f107 0314 	add.w	r3, r7, #20
 8015c60:	4619      	mov	r1, r3
 8015c62:	4805      	ldr	r0, [pc, #20]	; (8015c78 <MX_GPIO_Init+0xfc>)
 8015c64:	f001 ff66 	bl	8017b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8015c68:	bf00      	nop
 8015c6a:	3728      	adds	r7, #40	; 0x28
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	40023800 	.word	0x40023800
 8015c74:	40020000 	.word	0x40020000
 8015c78:	40020400 	.word	0x40020400
 8015c7c:	40020800 	.word	0x40020800

08015c80 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8015c80:	b480      	push	{r7}
 8015c82:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8015c84:	4b02      	ldr	r3, [pc, #8]	; (8015c90 <OSVersion+0x10>)
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8e:	4770      	bx	lr
 8015c90:	0802dbc4 	.word	0x0802dbc4

08015c94 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8015c98:	492e      	ldr	r1, [pc, #184]	; (8015d54 <freertos_IntroTitle+0xc0>)
 8015c9a:	2000      	movs	r0, #0
 8015c9c:	f7fc f902 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8015ca0:	492d      	ldr	r1, [pc, #180]	; (8015d58 <freertos_IntroTitle+0xc4>)
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	f7fc f8fe 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8015ca8:	492c      	ldr	r1, [pc, #176]	; (8015d5c <freertos_IntroTitle+0xc8>)
 8015caa:	2000      	movs	r0, #0
 8015cac:	f7fc f8fa 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8015cb0:	492b      	ldr	r1, [pc, #172]	; (8015d60 <freertos_IntroTitle+0xcc>)
 8015cb2:	2000      	movs	r0, #0
 8015cb4:	f7fc f8f6 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8015cb8:	492a      	ldr	r1, [pc, #168]	; (8015d64 <freertos_IntroTitle+0xd0>)
 8015cba:	2000      	movs	r0, #0
 8015cbc:	f7fc f8f2 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8015cc0:	4929      	ldr	r1, [pc, #164]	; (8015d68 <freertos_IntroTitle+0xd4>)
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	f7fc f8ee 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8015cc8:	4928      	ldr	r1, [pc, #160]	; (8015d6c <freertos_IntroTitle+0xd8>)
 8015cca:	2000      	movs	r0, #0
 8015ccc:	f7fc f8ea 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8015cd0:	4927      	ldr	r1, [pc, #156]	; (8015d70 <freertos_IntroTitle+0xdc>)
 8015cd2:	2000      	movs	r0, #0
 8015cd4:	f7fc f8e6 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8015cd8:	4926      	ldr	r1, [pc, #152]	; (8015d74 <freertos_IntroTitle+0xe0>)
 8015cda:	2000      	movs	r0, #0
 8015cdc:	f7fc f8e2 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8015ce0:	4925      	ldr	r1, [pc, #148]	; (8015d78 <freertos_IntroTitle+0xe4>)
 8015ce2:	2000      	movs	r0, #0
 8015ce4:	f7fc f8de 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8015ce8:	4924      	ldr	r1, [pc, #144]	; (8015d7c <freertos_IntroTitle+0xe8>)
 8015cea:	2000      	movs	r0, #0
 8015cec:	f7fc f8da 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8015cf0:	4923      	ldr	r1, [pc, #140]	; (8015d80 <freertos_IntroTitle+0xec>)
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	f7fc f8d6 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8015cf8:	4922      	ldr	r1, [pc, #136]	; (8015d84 <freertos_IntroTitle+0xf0>)
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	f7fc f8d2 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8015d00:	4921      	ldr	r1, [pc, #132]	; (8015d88 <freertos_IntroTitle+0xf4>)
 8015d02:	2000      	movs	r0, #0
 8015d04:	f7fc f8ce 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8015d08:	4920      	ldr	r1, [pc, #128]	; (8015d8c <freertos_IntroTitle+0xf8>)
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	f7fc f8ca 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8015d10:	491f      	ldr	r1, [pc, #124]	; (8015d90 <freertos_IntroTitle+0xfc>)
 8015d12:	2000      	movs	r0, #0
 8015d14:	f7fc f8c6 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8015d18:	491e      	ldr	r1, [pc, #120]	; (8015d94 <freertos_IntroTitle+0x100>)
 8015d1a:	2000      	movs	r0, #0
 8015d1c:	f7fc f8c2 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8015d20:	491d      	ldr	r1, [pc, #116]	; (8015d98 <freertos_IntroTitle+0x104>)
 8015d22:	2000      	movs	r0, #0
 8015d24:	f7fc f8be 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8015d28:	491c      	ldr	r1, [pc, #112]	; (8015d9c <freertos_IntroTitle+0x108>)
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	f7fc f8ba 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8015d30:	f7ff ffa6 	bl	8015c80 <OSVersion>
 8015d34:	4603      	mov	r3, r0
 8015d36:	461a      	mov	r2, r3
 8015d38:	4919      	ldr	r1, [pc, #100]	; (8015da0 <freertos_IntroTitle+0x10c>)
 8015d3a:	2000      	movs	r0, #0
 8015d3c:	f7fc f8b2 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8015d40:	4918      	ldr	r1, [pc, #96]	; (8015da4 <freertos_IntroTitle+0x110>)
 8015d42:	2000      	movs	r0, #0
 8015d44:	f7fc f8ae 	bl	8011ea4 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 8015d48:	4917      	ldr	r1, [pc, #92]	; (8015da8 <freertos_IntroTitle+0x114>)
 8015d4a:	2000      	movs	r0, #0
 8015d4c:	f7fc f8aa 	bl	8011ea4 <SEGGER_RTT_printf>
}
 8015d50:	bf00      	nop
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	0802dbcc 	.word	0x0802dbcc
 8015d58:	0802dc0c 	.word	0x0802dc0c
 8015d5c:	0802dc60 	.word	0x0802dc60
 8015d60:	0802dcb4 	.word	0x0802dcb4
 8015d64:	0802dd08 	.word	0x0802dd08
 8015d68:	0802dd5c 	.word	0x0802dd5c
 8015d6c:	0802ddb0 	.word	0x0802ddb0
 8015d70:	0802de04 	.word	0x0802de04
 8015d74:	0802de58 	.word	0x0802de58
 8015d78:	0802deac 	.word	0x0802deac
 8015d7c:	0802df00 	.word	0x0802df00
 8015d80:	0802df54 	.word	0x0802df54
 8015d84:	0802dfa8 	.word	0x0802dfa8
 8015d88:	0802dffc 	.word	0x0802dffc
 8015d8c:	0802e050 	.word	0x0802e050
 8015d90:	0802e0a4 	.word	0x0802e0a4
 8015d94:	0802e0f8 	.word	0x0802e0f8
 8015d98:	0802e14c 	.word	0x0802e14c
 8015d9c:	0802e194 	.word	0x0802e194
 8015da0:	0802e1c4 	.word	0x0802e1c4
 8015da4:	0802e208 	.word	0x0802e208
 8015da8:	0802e234 	.word	0x0802e234

08015dac <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	4603      	mov	r3, r0
 8015db4:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8015db6:	480a      	ldr	r0, [pc, #40]	; (8015de0 <delay_us+0x34>)
 8015db8:	f004 f832 	bl	8019e20 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8015dbc:	4b08      	ldr	r3, [pc, #32]	; (8015de0 <delay_us+0x34>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8015dc4:	bf00      	nop
 8015dc6:	4b06      	ldr	r3, [pc, #24]	; (8015de0 <delay_us+0x34>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015dcc:	88fb      	ldrh	r3, [r7, #6]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d3f9      	bcc.n	8015dc6 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8015dd2:	4803      	ldr	r0, [pc, #12]	; (8015de0 <delay_us+0x34>)
 8015dd4:	f004 f894 	bl	8019f00 <HAL_TIM_Base_Stop_IT>
}
 8015dd8:	bf00      	nop
 8015dda:	3708      	adds	r7, #8
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}
 8015de0:	2000d2f8 	.word	0x2000d2f8

08015de4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b082      	sub	sp, #8
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8015dec:	f00c ff94 	bl	8022d18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 8015df0:	4903      	ldr	r1, [pc, #12]	; (8015e00 <StartDefaultTask+0x1c>)
 8015df2:	2000      	movs	r0, #0
 8015df4:	f7fc f856 	bl	8011ea4 <SEGGER_RTT_printf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8015df8:	2001      	movs	r0, #1
 8015dfa:	f009 fc33 	bl	801f664 <osDelay>
 8015dfe:	e7fb      	b.n	8015df8 <StartDefaultTask+0x14>
 8015e00:	0802e280 	.word	0x0802e280

08015e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8015e04:	b480      	push	{r7}
 8015e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8015e08:	b672      	cpsid	i
}
 8015e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8015e0c:	e7fe      	b.n	8015e0c <Error_Handler+0x8>
	...

08015e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015e16:	2300      	movs	r3, #0
 8015e18:	607b      	str	r3, [r7, #4]
 8015e1a:	4b16      	ldr	r3, [pc, #88]	; (8015e74 <HAL_MspInit+0x64>)
 8015e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e1e:	4a15      	ldr	r2, [pc, #84]	; (8015e74 <HAL_MspInit+0x64>)
 8015e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015e24:	6453      	str	r3, [r2, #68]	; 0x44
 8015e26:	4b13      	ldr	r3, [pc, #76]	; (8015e74 <HAL_MspInit+0x64>)
 8015e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015e2e:	607b      	str	r3, [r7, #4]
 8015e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015e32:	2300      	movs	r3, #0
 8015e34:	603b      	str	r3, [r7, #0]
 8015e36:	4b0f      	ldr	r3, [pc, #60]	; (8015e74 <HAL_MspInit+0x64>)
 8015e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e3a:	4a0e      	ldr	r2, [pc, #56]	; (8015e74 <HAL_MspInit+0x64>)
 8015e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e40:	6413      	str	r3, [r2, #64]	; 0x40
 8015e42:	4b0c      	ldr	r3, [pc, #48]	; (8015e74 <HAL_MspInit+0x64>)
 8015e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015e4a:	603b      	str	r3, [r7, #0]
 8015e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8015e4e:	2200      	movs	r2, #0
 8015e50:	210f      	movs	r1, #15
 8015e52:	f06f 0001 	mvn.w	r0, #1
 8015e56:	f001 fa26 	bl	80172a6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	2105      	movs	r1, #5
 8015e5e:	2005      	movs	r0, #5
 8015e60:	f001 fa21 	bl	80172a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8015e64:	2005      	movs	r0, #5
 8015e66:	f001 fa3a 	bl	80172de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015e6a:	bf00      	nop
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	40023800 	.word	0x40023800

08015e78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b08c      	sub	sp, #48	; 0x30
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e80:	f107 031c 	add.w	r3, r7, #28
 8015e84:	2200      	movs	r2, #0
 8015e86:	601a      	str	r2, [r3, #0]
 8015e88:	605a      	str	r2, [r3, #4]
 8015e8a:	609a      	str	r2, [r3, #8]
 8015e8c:	60da      	str	r2, [r3, #12]
 8015e8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	4a5e      	ldr	r2, [pc, #376]	; (8016010 <HAL_ADC_MspInit+0x198>)
 8015e96:	4293      	cmp	r3, r2
 8015e98:	d158      	bne.n	8015f4c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	61bb      	str	r3, [r7, #24]
 8015e9e:	4b5d      	ldr	r3, [pc, #372]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ea2:	4a5c      	ldr	r2, [pc, #368]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8015eaa:	4b5a      	ldr	r3, [pc, #360]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015eb2:	61bb      	str	r3, [r7, #24]
 8015eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	617b      	str	r3, [r7, #20]
 8015eba:	4b56      	ldr	r3, [pc, #344]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ebe:	4a55      	ldr	r2, [pc, #340]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015ec0:	f043 0304 	orr.w	r3, r3, #4
 8015ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8015ec6:	4b53      	ldr	r3, [pc, #332]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eca:	f003 0304 	and.w	r3, r3, #4
 8015ece:	617b      	str	r3, [r7, #20]
 8015ed0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 8015ed2:	2302      	movs	r3, #2
 8015ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8015ed6:	2303      	movs	r3, #3
 8015ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015eda:	2300      	movs	r3, #0
 8015edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 8015ede:	f107 031c 	add.w	r3, r7, #28
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	484c      	ldr	r0, [pc, #304]	; (8016018 <HAL_ADC_MspInit+0x1a0>)
 8015ee6:	f001 fe25 	bl	8017b34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8015eea:	4b4c      	ldr	r3, [pc, #304]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015eec:	4a4c      	ldr	r2, [pc, #304]	; (8016020 <HAL_ADC_MspInit+0x1a8>)
 8015eee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8015ef0:	4b4a      	ldr	r3, [pc, #296]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015ef6:	4b49      	ldr	r3, [pc, #292]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8015efc:	4b47      	ldr	r3, [pc, #284]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8015f02:	4b46      	ldr	r3, [pc, #280]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015f08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8015f0a:	4b44      	ldr	r3, [pc, #272]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8015f12:	4b42      	ldr	r3, [pc, #264]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015f18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8015f1a:	4b40      	ldr	r3, [pc, #256]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8015f22:	4b3e      	ldr	r3, [pc, #248]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015f28:	4b3c      	ldr	r3, [pc, #240]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8015f2e:	483b      	ldr	r0, [pc, #236]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f30:	f001 f9f0 	bl	8017314 <HAL_DMA_Init>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8015f3a:	f7ff ff63 	bl	8015e04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	4a36      	ldr	r2, [pc, #216]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f42:	639a      	str	r2, [r3, #56]	; 0x38
 8015f44:	4a35      	ldr	r2, [pc, #212]	; (801601c <HAL_ADC_MspInit+0x1a4>)
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8015f4a:	e05d      	b.n	8016008 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	4a34      	ldr	r2, [pc, #208]	; (8016024 <HAL_ADC_MspInit+0x1ac>)
 8015f52:	4293      	cmp	r3, r2
 8015f54:	d158      	bne.n	8016008 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8015f56:	2300      	movs	r3, #0
 8015f58:	613b      	str	r3, [r7, #16]
 8015f5a:	4b2e      	ldr	r3, [pc, #184]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f5e:	4a2d      	ldr	r2, [pc, #180]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015f64:	6453      	str	r3, [r2, #68]	; 0x44
 8015f66:	4b2b      	ldr	r3, [pc, #172]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015f6e:	613b      	str	r3, [r7, #16]
 8015f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015f72:	2300      	movs	r3, #0
 8015f74:	60fb      	str	r3, [r7, #12]
 8015f76:	4b27      	ldr	r3, [pc, #156]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f7a:	4a26      	ldr	r2, [pc, #152]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015f7c:	f043 0304 	orr.w	r3, r3, #4
 8015f80:	6313      	str	r3, [r2, #48]	; 0x30
 8015f82:	4b24      	ldr	r3, [pc, #144]	; (8016014 <HAL_ADC_MspInit+0x19c>)
 8015f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f86:	f003 0304 	and.w	r3, r3, #4
 8015f8a:	60fb      	str	r3, [r7, #12]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 8015f8e:	2304      	movs	r3, #4
 8015f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8015f92:	2303      	movs	r3, #3
 8015f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f96:	2300      	movs	r3, #0
 8015f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 8015f9a:	f107 031c 	add.w	r3, r7, #28
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	481d      	ldr	r0, [pc, #116]	; (8016018 <HAL_ADC_MspInit+0x1a0>)
 8015fa2:	f001 fdc7 	bl	8017b34 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8015fa6:	4b20      	ldr	r3, [pc, #128]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fa8:	4a20      	ldr	r2, [pc, #128]	; (801602c <HAL_ADC_MspInit+0x1b4>)
 8015faa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8015fac:	4b1e      	ldr	r3, [pc, #120]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8015fb2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015fb4:	4b1c      	ldr	r3, [pc, #112]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8015fba:	4b1b      	ldr	r3, [pc, #108]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8015fc0:	4b19      	ldr	r3, [pc, #100]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015fc6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8015fc8:	4b17      	ldr	r3, [pc, #92]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015fce:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8015fd0:	4b15      	ldr	r3, [pc, #84]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015fd6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8015fd8:	4b13      	ldr	r3, [pc, #76]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fde:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8015fe0:	4b11      	ldr	r3, [pc, #68]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015fe6:	4b10      	ldr	r3, [pc, #64]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fe8:	2200      	movs	r2, #0
 8015fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8015fec:	480e      	ldr	r0, [pc, #56]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8015fee:	f001 f991 	bl	8017314 <HAL_DMA_Init>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d001      	beq.n	8015ffc <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8015ff8:	f7ff ff04 	bl	8015e04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	4a0a      	ldr	r2, [pc, #40]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8016000:	639a      	str	r2, [r3, #56]	; 0x38
 8016002:	4a09      	ldr	r2, [pc, #36]	; (8016028 <HAL_ADC_MspInit+0x1b0>)
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6393      	str	r3, [r2, #56]	; 0x38
}
 8016008:	bf00      	nop
 801600a:	3730      	adds	r7, #48	; 0x30
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	40012000 	.word	0x40012000
 8016014:	40023800 	.word	0x40023800
 8016018:	40020800 	.word	0x40020800
 801601c:	2000d0d8 	.word	0x2000d0d8
 8016020:	40026470 	.word	0x40026470
 8016024:	40012100 	.word	0x40012100
 8016028:	2000d138 	.word	0x2000d138
 801602c:	40026440 	.word	0x40026440

08016030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b08a      	sub	sp, #40	; 0x28
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016038:	f107 0314 	add.w	r3, r7, #20
 801603c:	2200      	movs	r2, #0
 801603e:	601a      	str	r2, [r3, #0]
 8016040:	605a      	str	r2, [r3, #4]
 8016042:	609a      	str	r2, [r3, #8]
 8016044:	60da      	str	r2, [r3, #12]
 8016046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	4a47      	ldr	r2, [pc, #284]	; (801616c <HAL_SPI_MspInit+0x13c>)
 801604e:	4293      	cmp	r3, r2
 8016050:	f040 8088 	bne.w	8016164 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016054:	2300      	movs	r3, #0
 8016056:	613b      	str	r3, [r7, #16]
 8016058:	4b45      	ldr	r3, [pc, #276]	; (8016170 <HAL_SPI_MspInit+0x140>)
 801605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801605c:	4a44      	ldr	r2, [pc, #272]	; (8016170 <HAL_SPI_MspInit+0x140>)
 801605e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016062:	6453      	str	r3, [r2, #68]	; 0x44
 8016064:	4b42      	ldr	r3, [pc, #264]	; (8016170 <HAL_SPI_MspInit+0x140>)
 8016066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801606c:	613b      	str	r3, [r7, #16]
 801606e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016070:	2300      	movs	r3, #0
 8016072:	60fb      	str	r3, [r7, #12]
 8016074:	4b3e      	ldr	r3, [pc, #248]	; (8016170 <HAL_SPI_MspInit+0x140>)
 8016076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016078:	4a3d      	ldr	r2, [pc, #244]	; (8016170 <HAL_SPI_MspInit+0x140>)
 801607a:	f043 0301 	orr.w	r3, r3, #1
 801607e:	6313      	str	r3, [r2, #48]	; 0x30
 8016080:	4b3b      	ldr	r3, [pc, #236]	; (8016170 <HAL_SPI_MspInit+0x140>)
 8016082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016084:	f003 0301 	and.w	r3, r3, #1
 8016088:	60fb      	str	r3, [r7, #12]
 801608a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_PIN_Pin|SPI1_MISO_PIN_Pin|SPI1_MOSI_PIN_Pin;
 801608c:	23e0      	movs	r3, #224	; 0xe0
 801608e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016090:	2302      	movs	r3, #2
 8016092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016094:	2300      	movs	r3, #0
 8016096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016098:	2303      	movs	r3, #3
 801609a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801609c:	2305      	movs	r3, #5
 801609e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80160a0:	f107 0314 	add.w	r3, r7, #20
 80160a4:	4619      	mov	r1, r3
 80160a6:	4833      	ldr	r0, [pc, #204]	; (8016174 <HAL_SPI_MspInit+0x144>)
 80160a8:	f001 fd44 	bl	8017b34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80160ac:	4b32      	ldr	r3, [pc, #200]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160ae:	4a33      	ldr	r2, [pc, #204]	; (801617c <HAL_SPI_MspInit+0x14c>)
 80160b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80160b2:	4b31      	ldr	r3, [pc, #196]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80160b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80160ba:	4b2f      	ldr	r3, [pc, #188]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160bc:	2200      	movs	r2, #0
 80160be:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80160c0:	4b2d      	ldr	r3, [pc, #180]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80160c6:	4b2c      	ldr	r3, [pc, #176]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80160ce:	4b2a      	ldr	r3, [pc, #168]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160d0:	2200      	movs	r2, #0
 80160d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80160d4:	4b28      	ldr	r3, [pc, #160]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160d6:	2200      	movs	r2, #0
 80160d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80160da:	4b27      	ldr	r3, [pc, #156]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160dc:	2200      	movs	r2, #0
 80160de:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80160e0:	4b25      	ldr	r3, [pc, #148]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160e2:	2200      	movs	r2, #0
 80160e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80160e6:	4b24      	ldr	r3, [pc, #144]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160e8:	2200      	movs	r2, #0
 80160ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80160ec:	4822      	ldr	r0, [pc, #136]	; (8016178 <HAL_SPI_MspInit+0x148>)
 80160ee:	f001 f911 	bl	8017314 <HAL_DMA_Init>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d001      	beq.n	80160fc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80160f8:	f7ff fe84 	bl	8015e04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	4a1e      	ldr	r2, [pc, #120]	; (8016178 <HAL_SPI_MspInit+0x148>)
 8016100:	64da      	str	r2, [r3, #76]	; 0x4c
 8016102:	4a1d      	ldr	r2, [pc, #116]	; (8016178 <HAL_SPI_MspInit+0x148>)
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8016108:	4b1d      	ldr	r3, [pc, #116]	; (8016180 <HAL_SPI_MspInit+0x150>)
 801610a:	4a1e      	ldr	r2, [pc, #120]	; (8016184 <HAL_SPI_MspInit+0x154>)
 801610c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 801610e:	4b1c      	ldr	r3, [pc, #112]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016110:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8016114:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016116:	4b1a      	ldr	r3, [pc, #104]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016118:	2240      	movs	r2, #64	; 0x40
 801611a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801611c:	4b18      	ldr	r3, [pc, #96]	; (8016180 <HAL_SPI_MspInit+0x150>)
 801611e:	2200      	movs	r2, #0
 8016120:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016122:	4b17      	ldr	r3, [pc, #92]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016128:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801612a:	4b15      	ldr	r3, [pc, #84]	; (8016180 <HAL_SPI_MspInit+0x150>)
 801612c:	2200      	movs	r2, #0
 801612e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016130:	4b13      	ldr	r3, [pc, #76]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016132:	2200      	movs	r2, #0
 8016134:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8016136:	4b12      	ldr	r3, [pc, #72]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016138:	2200      	movs	r2, #0
 801613a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 801613c:	4b10      	ldr	r3, [pc, #64]	; (8016180 <HAL_SPI_MspInit+0x150>)
 801613e:	2200      	movs	r2, #0
 8016140:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016142:	4b0f      	ldr	r3, [pc, #60]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016144:	2200      	movs	r2, #0
 8016146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8016148:	480d      	ldr	r0, [pc, #52]	; (8016180 <HAL_SPI_MspInit+0x150>)
 801614a:	f001 f8e3 	bl	8017314 <HAL_DMA_Init>
 801614e:	4603      	mov	r3, r0
 8016150:	2b00      	cmp	r3, #0
 8016152:	d001      	beq.n	8016158 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8016154:	f7ff fe56 	bl	8015e04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	4a09      	ldr	r2, [pc, #36]	; (8016180 <HAL_SPI_MspInit+0x150>)
 801615c:	649a      	str	r2, [r3, #72]	; 0x48
 801615e:	4a08      	ldr	r2, [pc, #32]	; (8016180 <HAL_SPI_MspInit+0x150>)
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8016164:	bf00      	nop
 8016166:	3728      	adds	r7, #40	; 0x28
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}
 801616c:	40013000 	.word	0x40013000
 8016170:	40023800 	.word	0x40023800
 8016174:	40020000 	.word	0x40020000
 8016178:	2000d1f0 	.word	0x2000d1f0
 801617c:	40026410 	.word	0x40026410
 8016180:	2000d250 	.word	0x2000d250
 8016184:	40026458 	.word	0x40026458

08016188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	4a18      	ldr	r2, [pc, #96]	; (80161f8 <HAL_TIM_Base_MspInit+0x70>)
 8016196:	4293      	cmp	r3, r2
 8016198:	d10e      	bne.n	80161b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 801619a:	2300      	movs	r3, #0
 801619c:	60fb      	str	r3, [r7, #12]
 801619e:	4b17      	ldr	r3, [pc, #92]	; (80161fc <HAL_TIM_Base_MspInit+0x74>)
 80161a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161a2:	4a16      	ldr	r2, [pc, #88]	; (80161fc <HAL_TIM_Base_MspInit+0x74>)
 80161a4:	f043 0302 	orr.w	r3, r3, #2
 80161a8:	6413      	str	r3, [r2, #64]	; 0x40
 80161aa:	4b14      	ldr	r3, [pc, #80]	; (80161fc <HAL_TIM_Base_MspInit+0x74>)
 80161ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161ae:	f003 0302 	and.w	r3, r3, #2
 80161b2:	60fb      	str	r3, [r7, #12]
 80161b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80161b6:	e01a      	b.n	80161ee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	4a10      	ldr	r2, [pc, #64]	; (8016200 <HAL_TIM_Base_MspInit+0x78>)
 80161be:	4293      	cmp	r3, r2
 80161c0:	d115      	bne.n	80161ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80161c2:	2300      	movs	r3, #0
 80161c4:	60bb      	str	r3, [r7, #8]
 80161c6:	4b0d      	ldr	r3, [pc, #52]	; (80161fc <HAL_TIM_Base_MspInit+0x74>)
 80161c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161ca:	4a0c      	ldr	r2, [pc, #48]	; (80161fc <HAL_TIM_Base_MspInit+0x74>)
 80161cc:	f043 0320 	orr.w	r3, r3, #32
 80161d0:	6413      	str	r3, [r2, #64]	; 0x40
 80161d2:	4b0a      	ldr	r3, [pc, #40]	; (80161fc <HAL_TIM_Base_MspInit+0x74>)
 80161d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161d6:	f003 0320 	and.w	r3, r3, #32
 80161da:	60bb      	str	r3, [r7, #8]
 80161dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80161de:	2200      	movs	r2, #0
 80161e0:	2105      	movs	r1, #5
 80161e2:	2037      	movs	r0, #55	; 0x37
 80161e4:	f001 f85f 	bl	80172a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80161e8:	2037      	movs	r0, #55	; 0x37
 80161ea:	f001 f878 	bl	80172de <HAL_NVIC_EnableIRQ>
}
 80161ee:	bf00      	nop
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	40000400 	.word	0x40000400
 80161fc:	40023800 	.word	0x40023800
 8016200:	40001400 	.word	0x40001400

08016204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b088      	sub	sp, #32
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801620c:	f107 030c 	add.w	r3, r7, #12
 8016210:	2200      	movs	r2, #0
 8016212:	601a      	str	r2, [r3, #0]
 8016214:	605a      	str	r2, [r3, #4]
 8016216:	609a      	str	r2, [r3, #8]
 8016218:	60da      	str	r2, [r3, #12]
 801621a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4a12      	ldr	r2, [pc, #72]	; (801626c <HAL_TIM_MspPostInit+0x68>)
 8016222:	4293      	cmp	r3, r2
 8016224:	d11d      	bne.n	8016262 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016226:	2300      	movs	r3, #0
 8016228:	60bb      	str	r3, [r7, #8]
 801622a:	4b11      	ldr	r3, [pc, #68]	; (8016270 <HAL_TIM_MspPostInit+0x6c>)
 801622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801622e:	4a10      	ldr	r2, [pc, #64]	; (8016270 <HAL_TIM_MspPostInit+0x6c>)
 8016230:	f043 0302 	orr.w	r3, r3, #2
 8016234:	6313      	str	r3, [r2, #48]	; 0x30
 8016236:	4b0e      	ldr	r3, [pc, #56]	; (8016270 <HAL_TIM_MspPostInit+0x6c>)
 8016238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801623a:	f003 0302 	and.w	r3, r3, #2
 801623e:	60bb      	str	r3, [r7, #8]
 8016240:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 8016242:	2310      	movs	r3, #16
 8016244:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016246:	2302      	movs	r3, #2
 8016248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801624a:	2300      	movs	r3, #0
 801624c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801624e:	2300      	movs	r3, #0
 8016250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8016252:	2302      	movs	r3, #2
 8016254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8016256:	f107 030c 	add.w	r3, r7, #12
 801625a:	4619      	mov	r1, r3
 801625c:	4805      	ldr	r0, [pc, #20]	; (8016274 <HAL_TIM_MspPostInit+0x70>)
 801625e:	f001 fc69 	bl	8017b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8016262:	bf00      	nop
 8016264:	3720      	adds	r7, #32
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	40000400 	.word	0x40000400
 8016270:	40023800 	.word	0x40023800
 8016274:	40020400 	.word	0x40020400

08016278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b08a      	sub	sp, #40	; 0x28
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016280:	f107 0314 	add.w	r3, r7, #20
 8016284:	2200      	movs	r2, #0
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	605a      	str	r2, [r3, #4]
 801628a:	609a      	str	r2, [r3, #8]
 801628c:	60da      	str	r2, [r3, #12]
 801628e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	4a4c      	ldr	r2, [pc, #304]	; (80163c8 <HAL_UART_MspInit+0x150>)
 8016296:	4293      	cmp	r3, r2
 8016298:	f040 8092 	bne.w	80163c0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 801629c:	2300      	movs	r3, #0
 801629e:	613b      	str	r3, [r7, #16]
 80162a0:	4b4a      	ldr	r3, [pc, #296]	; (80163cc <HAL_UART_MspInit+0x154>)
 80162a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162a4:	4a49      	ldr	r2, [pc, #292]	; (80163cc <HAL_UART_MspInit+0x154>)
 80162a6:	f043 0320 	orr.w	r3, r3, #32
 80162aa:	6453      	str	r3, [r2, #68]	; 0x44
 80162ac:	4b47      	ldr	r3, [pc, #284]	; (80163cc <HAL_UART_MspInit+0x154>)
 80162ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162b0:	f003 0320 	and.w	r3, r3, #32
 80162b4:	613b      	str	r3, [r7, #16]
 80162b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80162b8:	2300      	movs	r3, #0
 80162ba:	60fb      	str	r3, [r7, #12]
 80162bc:	4b43      	ldr	r3, [pc, #268]	; (80163cc <HAL_UART_MspInit+0x154>)
 80162be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162c0:	4a42      	ldr	r2, [pc, #264]	; (80163cc <HAL_UART_MspInit+0x154>)
 80162c2:	f043 0304 	orr.w	r3, r3, #4
 80162c6:	6313      	str	r3, [r2, #48]	; 0x30
 80162c8:	4b40      	ldr	r3, [pc, #256]	; (80163cc <HAL_UART_MspInit+0x154>)
 80162ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162cc:	f003 0304 	and.w	r3, r3, #4
 80162d0:	60fb      	str	r3, [r7, #12]
 80162d2:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 80162d4:	23c0      	movs	r3, #192	; 0xc0
 80162d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80162d8:	2302      	movs	r3, #2
 80162da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80162dc:	2300      	movs	r3, #0
 80162de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80162e0:	2303      	movs	r3, #3
 80162e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80162e4:	2308      	movs	r3, #8
 80162e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80162e8:	f107 0314 	add.w	r3, r7, #20
 80162ec:	4619      	mov	r1, r3
 80162ee:	4838      	ldr	r0, [pc, #224]	; (80163d0 <HAL_UART_MspInit+0x158>)
 80162f0:	f001 fc20 	bl	8017b34 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80162f4:	4b37      	ldr	r3, [pc, #220]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 80162f6:	4a38      	ldr	r2, [pc, #224]	; (80163d8 <HAL_UART_MspInit+0x160>)
 80162f8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80162fa:	4b36      	ldr	r3, [pc, #216]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 80162fc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8016300:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016302:	4b34      	ldr	r3, [pc, #208]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 8016304:	2240      	movs	r2, #64	; 0x40
 8016306:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016308:	4b32      	ldr	r3, [pc, #200]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 801630a:	2200      	movs	r2, #0
 801630c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 801630e:	4b31      	ldr	r3, [pc, #196]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 8016310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016314:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016316:	4b2f      	ldr	r3, [pc, #188]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 8016318:	2200      	movs	r2, #0
 801631a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801631c:	4b2d      	ldr	r3, [pc, #180]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 801631e:	2200      	movs	r2, #0
 8016320:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8016322:	4b2c      	ldr	r3, [pc, #176]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 8016324:	2200      	movs	r2, #0
 8016326:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8016328:	4b2a      	ldr	r3, [pc, #168]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 801632a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801632e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016330:	4b28      	ldr	r3, [pc, #160]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 8016332:	2200      	movs	r2, #0
 8016334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8016336:	4827      	ldr	r0, [pc, #156]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 8016338:	f000 ffec 	bl	8017314 <HAL_DMA_Init>
 801633c:	4603      	mov	r3, r0
 801633e:	2b00      	cmp	r3, #0
 8016340:	d001      	beq.n	8016346 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8016342:	f7ff fd5f 	bl	8015e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	4a22      	ldr	r2, [pc, #136]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 801634a:	639a      	str	r2, [r3, #56]	; 0x38
 801634c:	4a21      	ldr	r2, [pc, #132]	; (80163d4 <HAL_UART_MspInit+0x15c>)
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8016352:	4b22      	ldr	r3, [pc, #136]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016354:	4a22      	ldr	r2, [pc, #136]	; (80163e0 <HAL_UART_MspInit+0x168>)
 8016356:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8016358:	4b20      	ldr	r3, [pc, #128]	; (80163dc <HAL_UART_MspInit+0x164>)
 801635a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801635e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016360:	4b1e      	ldr	r3, [pc, #120]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016362:	2200      	movs	r2, #0
 8016364:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016366:	4b1d      	ldr	r3, [pc, #116]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016368:	2200      	movs	r2, #0
 801636a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 801636c:	4b1b      	ldr	r3, [pc, #108]	; (80163dc <HAL_UART_MspInit+0x164>)
 801636e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016372:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016374:	4b19      	ldr	r3, [pc, #100]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016376:	2200      	movs	r2, #0
 8016378:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801637a:	4b18      	ldr	r3, [pc, #96]	; (80163dc <HAL_UART_MspInit+0x164>)
 801637c:	2200      	movs	r2, #0
 801637e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8016380:	4b16      	ldr	r3, [pc, #88]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016382:	2200      	movs	r2, #0
 8016384:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8016386:	4b15      	ldr	r3, [pc, #84]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801638c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801638e:	4b13      	ldr	r3, [pc, #76]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016390:	2200      	movs	r2, #0
 8016392:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8016394:	4811      	ldr	r0, [pc, #68]	; (80163dc <HAL_UART_MspInit+0x164>)
 8016396:	f000 ffbd 	bl	8017314 <HAL_DMA_Init>
 801639a:	4603      	mov	r3, r0
 801639c:	2b00      	cmp	r3, #0
 801639e:	d001      	beq.n	80163a4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80163a0:	f7ff fd30 	bl	8015e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	4a0d      	ldr	r2, [pc, #52]	; (80163dc <HAL_UART_MspInit+0x164>)
 80163a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80163aa:	4a0c      	ldr	r2, [pc, #48]	; (80163dc <HAL_UART_MspInit+0x164>)
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80163b0:	2200      	movs	r2, #0
 80163b2:	2105      	movs	r1, #5
 80163b4:	2047      	movs	r0, #71	; 0x47
 80163b6:	f000 ff76 	bl	80172a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80163ba:	2047      	movs	r0, #71	; 0x47
 80163bc:	f000 ff8f 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80163c0:	bf00      	nop
 80163c2:	3728      	adds	r7, #40	; 0x28
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}
 80163c8:	40011400 	.word	0x40011400
 80163cc:	40023800 	.word	0x40023800
 80163d0:	40020800 	.word	0x40020800
 80163d4:	2000d388 	.word	0x2000d388
 80163d8:	400264a0 	.word	0x400264a0
 80163dc:	2000d3e8 	.word	0x2000d3e8
 80163e0:	40026428 	.word	0x40026428

080163e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80163e4:	b480      	push	{r7}
 80163e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80163e8:	e7fe      	b.n	80163e8 <NMI_Handler+0x4>

080163ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80163ea:	b480      	push	{r7}
 80163ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80163ee:	e7fe      	b.n	80163ee <HardFault_Handler+0x4>

080163f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80163f0:	b480      	push	{r7}
 80163f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80163f4:	e7fe      	b.n	80163f4 <MemManage_Handler+0x4>

080163f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80163f6:	b480      	push	{r7}
 80163f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80163fa:	e7fe      	b.n	80163fa <BusFault_Handler+0x4>

080163fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80163fc:	b480      	push	{r7}
 80163fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016400:	e7fe      	b.n	8016400 <UsageFault_Handler+0x4>

08016402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016402:	b480      	push	{r7}
 8016404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016406:	bf00      	nop
 8016408:	46bd      	mov	sp, r7
 801640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640e:	4770      	bx	lr

08016410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8016414:	4b09      	ldr	r3, [pc, #36]	; (801643c <SysTick_Handler+0x2c>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d004      	beq.n	8016426 <SysTick_Handler+0x16>

		TimingDelay--;
 801641c:	4b07      	ldr	r3, [pc, #28]	; (801643c <SysTick_Handler+0x2c>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	3b01      	subs	r3, #1
 8016422:	4a06      	ldr	r2, [pc, #24]	; (801643c <SysTick_Handler+0x2c>)
 8016424:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016426:	f000 fa0d 	bl	8016844 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801642a:	f00b f9d5 	bl	80217d8 <xTaskGetSchedulerState>
 801642e:	4603      	mov	r3, r0
 8016430:	2b01      	cmp	r3, #1
 8016432:	d001      	beq.n	8016438 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8016434:	f00c fa10 	bl	8022858 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016438:	bf00      	nop
 801643a:	bd80      	pop	{r7, pc}
 801643c:	2000d458 	.word	0x2000d458

08016440 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8016440:	b480      	push	{r7}
 8016442:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8016444:	bf00      	nop
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr
	...

08016450 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8016454:	4802      	ldr	r0, [pc, #8]	; (8016460 <TIM7_IRQHandler+0x10>)
 8016456:	f003 ff13 	bl	801a280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 801645a:	bf00      	nop
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	2000d2f8 	.word	0x2000d2f8

08016464 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8016468:	4802      	ldr	r0, [pc, #8]	; (8016474 <DMA2_Stream0_IRQHandler+0x10>)
 801646a:	f001 f8eb 	bl	8017644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801646e:	bf00      	nop
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	2000d1f0 	.word	0x2000d1f0

08016478 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 801647c:	4802      	ldr	r0, [pc, #8]	; (8016488 <DMA2_Stream1_IRQHandler+0x10>)
 801647e:	f001 f8e1 	bl	8017644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8016482:	bf00      	nop
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	2000d3e8 	.word	0x2000d3e8

0801648c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8016490:	4802      	ldr	r0, [pc, #8]	; (801649c <DMA2_Stream2_IRQHandler+0x10>)
 8016492:	f001 f8d7 	bl	8017644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8016496:	bf00      	nop
 8016498:	bd80      	pop	{r7, pc}
 801649a:	bf00      	nop
 801649c:	2000d138 	.word	0x2000d138

080164a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80164a4:	4802      	ldr	r0, [pc, #8]	; (80164b0 <DMA2_Stream3_IRQHandler+0x10>)
 80164a6:	f001 f8cd 	bl	8017644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80164aa:	bf00      	nop
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	2000d250 	.word	0x2000d250

080164b4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80164b8:	4802      	ldr	r0, [pc, #8]	; (80164c4 <DMA2_Stream4_IRQHandler+0x10>)
 80164ba:	f001 f8c3 	bl	8017644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80164be:	bf00      	nop
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	2000d0d8 	.word	0x2000d0d8

080164c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80164cc:	4802      	ldr	r0, [pc, #8]	; (80164d8 <OTG_FS_IRQHandler+0x10>)
 80164ce:	f001 fe2a 	bl	8018126 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80164d2:	bf00      	nop
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	200129c4 	.word	0x200129c4

080164dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80164e0:	4802      	ldr	r0, [pc, #8]	; (80164ec <DMA2_Stream6_IRQHandler+0x10>)
 80164e2:	f001 f8af 	bl	8017644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80164e6:	bf00      	nop
 80164e8:	bd80      	pop	{r7, pc}
 80164ea:	bf00      	nop
 80164ec:	2000d388 	.word	0x2000d388

080164f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 80164f6:	4b1d      	ldr	r3, [pc, #116]	; (801656c <USART6_IRQHandler+0x7c>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	f003 0320 	and.w	r3, r3, #32
 8016500:	2b20      	cmp	r3, #32
 8016502:	d12b      	bne.n	801655c <USART6_IRQHandler+0x6c>
 8016504:	4b19      	ldr	r3, [pc, #100]	; (801656c <USART6_IRQHandler+0x7c>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	68db      	ldr	r3, [r3, #12]
 801650a:	f003 0320 	and.w	r3, r3, #32
 801650e:	2b00      	cmp	r3, #0
 8016510:	d024      	beq.n	801655c <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8016512:	2300      	movs	r3, #0
 8016514:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8016516:	4b15      	ldr	r3, [pc, #84]	; (801656c <USART6_IRQHandler+0x7c>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	b2da      	uxtb	r2, r3
 801651e:	4b14      	ldr	r3, [pc, #80]	; (8016570 <USART6_IRQHandler+0x80>)
 8016520:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8016522:	2300      	movs	r3, #0
 8016524:	603b      	str	r3, [r7, #0]
 8016526:	4b11      	ldr	r3, [pc, #68]	; (801656c <USART6_IRQHandler+0x7c>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	603b      	str	r3, [r7, #0]
 801652e:	4b0f      	ldr	r3, [pc, #60]	; (801656c <USART6_IRQHandler+0x7c>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	685b      	ldr	r3, [r3, #4]
 8016534:	603b      	str	r3, [r7, #0]
 8016536:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8016538:	4b0e      	ldr	r3, [pc, #56]	; (8016574 <USART6_IRQHandler+0x84>)
 801653a:	6818      	ldr	r0, [r3, #0]
 801653c:	1d3a      	adds	r2, r7, #4
 801653e:	2300      	movs	r3, #0
 8016540:	490b      	ldr	r1, [pc, #44]	; (8016570 <USART6_IRQHandler+0x80>)
 8016542:	f009 fbe9 	bl	801fd18 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d007      	beq.n	801655c <USART6_IRQHandler+0x6c>
 801654c:	4b0a      	ldr	r3, [pc, #40]	; (8016578 <USART6_IRQHandler+0x88>)
 801654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	f3bf 8f4f 	dsb	sy
 8016558:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 801655c:	4803      	ldr	r0, [pc, #12]	; (801656c <USART6_IRQHandler+0x7c>)
 801655e:	f004 fda7 	bl	801b0b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8016562:	bf00      	nop
 8016564:	3708      	adds	r7, #8
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	2000d340 	.word	0x2000d340
 8016570:	2000d454 	.word	0x2000d454
 8016574:	2000bd48 	.word	0x2000bd48
 8016578:	e000ed04 	.word	0xe000ed04

0801657c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801657c:	b480      	push	{r7}
 801657e:	af00      	add	r7, sp, #0
  return 1;
 8016580:	2301      	movs	r3, #1
}
 8016582:	4618      	mov	r0, r3
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <_kill>:

int _kill(int pid, int sig)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8016596:	f00e fbb9 	bl	8024d0c <__errno>
 801659a:	4603      	mov	r3, r0
 801659c:	2216      	movs	r2, #22
 801659e:	601a      	str	r2, [r3, #0]
  return -1;
 80165a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3708      	adds	r7, #8
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}

080165ac <_exit>:

void _exit (int status)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80165b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f7ff ffe7 	bl	801658c <_kill>
  while (1) {}    /* Make sure we hang here */
 80165be:	e7fe      	b.n	80165be <_exit+0x12>

080165c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b086      	sub	sp, #24
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80165cc:	2300      	movs	r3, #0
 80165ce:	617b      	str	r3, [r7, #20]
 80165d0:	e00a      	b.n	80165e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80165d2:	f3af 8000 	nop.w
 80165d6:	4601      	mov	r1, r0
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	1c5a      	adds	r2, r3, #1
 80165dc:	60ba      	str	r2, [r7, #8]
 80165de:	b2ca      	uxtb	r2, r1
 80165e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	3301      	adds	r3, #1
 80165e6:	617b      	str	r3, [r7, #20]
 80165e8:	697a      	ldr	r2, [r7, #20]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	dbf0      	blt.n	80165d2 <_read+0x12>
  }

  return len;
 80165f0:	687b      	ldr	r3, [r7, #4]
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	3718      	adds	r7, #24
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}

080165fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80165fa:	b580      	push	{r7, lr}
 80165fc:	b086      	sub	sp, #24
 80165fe:	af00      	add	r7, sp, #0
 8016600:	60f8      	str	r0, [r7, #12]
 8016602:	60b9      	str	r1, [r7, #8]
 8016604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016606:	2300      	movs	r3, #0
 8016608:	617b      	str	r3, [r7, #20]
 801660a:	e009      	b.n	8016620 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	1c5a      	adds	r2, r3, #1
 8016610:	60ba      	str	r2, [r7, #8]
 8016612:	781b      	ldrb	r3, [r3, #0]
 8016614:	4618      	mov	r0, r3
 8016616:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801661a:	697b      	ldr	r3, [r7, #20]
 801661c:	3301      	adds	r3, #1
 801661e:	617b      	str	r3, [r7, #20]
 8016620:	697a      	ldr	r2, [r7, #20]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	429a      	cmp	r2, r3
 8016626:	dbf1      	blt.n	801660c <_write+0x12>
  }
  return len;
 8016628:	687b      	ldr	r3, [r7, #4]
}
 801662a:	4618      	mov	r0, r3
 801662c:	3718      	adds	r7, #24
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}

08016632 <_close>:

int _close(int file)
{
 8016632:	b480      	push	{r7}
 8016634:	b083      	sub	sp, #12
 8016636:	af00      	add	r7, sp, #0
 8016638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801663a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801663e:	4618      	mov	r0, r3
 8016640:	370c      	adds	r7, #12
 8016642:	46bd      	mov	sp, r7
 8016644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016648:	4770      	bx	lr

0801664a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801664a:	b480      	push	{r7}
 801664c:	b083      	sub	sp, #12
 801664e:	af00      	add	r7, sp, #0
 8016650:	6078      	str	r0, [r7, #4]
 8016652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801665a:	605a      	str	r2, [r3, #4]
  return 0;
 801665c:	2300      	movs	r3, #0
}
 801665e:	4618      	mov	r0, r3
 8016660:	370c      	adds	r7, #12
 8016662:	46bd      	mov	sp, r7
 8016664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016668:	4770      	bx	lr

0801666a <_isatty>:

int _isatty(int file)
{
 801666a:	b480      	push	{r7}
 801666c:	b083      	sub	sp, #12
 801666e:	af00      	add	r7, sp, #0
 8016670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8016672:	2301      	movs	r3, #1
}
 8016674:	4618      	mov	r0, r3
 8016676:	370c      	adds	r7, #12
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr

08016680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016680:	b480      	push	{r7}
 8016682:	b085      	sub	sp, #20
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	3714      	adds	r7, #20
 8016692:	46bd      	mov	sp, r7
 8016694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016698:	4770      	bx	lr
	...

0801669c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b086      	sub	sp, #24
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80166a4:	4a14      	ldr	r2, [pc, #80]	; (80166f8 <_sbrk+0x5c>)
 80166a6:	4b15      	ldr	r3, [pc, #84]	; (80166fc <_sbrk+0x60>)
 80166a8:	1ad3      	subs	r3, r2, r3
 80166aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80166b0:	4b13      	ldr	r3, [pc, #76]	; (8016700 <_sbrk+0x64>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d102      	bne.n	80166be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80166b8:	4b11      	ldr	r3, [pc, #68]	; (8016700 <_sbrk+0x64>)
 80166ba:	4a12      	ldr	r2, [pc, #72]	; (8016704 <_sbrk+0x68>)
 80166bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80166be:	4b10      	ldr	r3, [pc, #64]	; (8016700 <_sbrk+0x64>)
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	4413      	add	r3, r2
 80166c6:	693a      	ldr	r2, [r7, #16]
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d207      	bcs.n	80166dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80166cc:	f00e fb1e 	bl	8024d0c <__errno>
 80166d0:	4603      	mov	r3, r0
 80166d2:	220c      	movs	r2, #12
 80166d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80166d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166da:	e009      	b.n	80166f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80166dc:	4b08      	ldr	r3, [pc, #32]	; (8016700 <_sbrk+0x64>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80166e2:	4b07      	ldr	r3, [pc, #28]	; (8016700 <_sbrk+0x64>)
 80166e4:	681a      	ldr	r2, [r3, #0]
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	4413      	add	r3, r2
 80166ea:	4a05      	ldr	r2, [pc, #20]	; (8016700 <_sbrk+0x64>)
 80166ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80166ee:	68fb      	ldr	r3, [r7, #12]
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3718      	adds	r7, #24
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	20020000 	.word	0x20020000
 80166fc:	00000400 	.word	0x00000400
 8016700:	2000d45c 	.word	0x2000d45c
 8016704:	20013218 	.word	0x20013218

08016708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016708:	b480      	push	{r7}
 801670a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801670c:	4b06      	ldr	r3, [pc, #24]	; (8016728 <SystemInit+0x20>)
 801670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016712:	4a05      	ldr	r2, [pc, #20]	; (8016728 <SystemInit+0x20>)
 8016714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801671c:	bf00      	nop
 801671e:	46bd      	mov	sp, r7
 8016720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016724:	4770      	bx	lr
 8016726:	bf00      	nop
 8016728:	e000ed00 	.word	0xe000ed00

0801672c <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8016730:	202e      	movs	r0, #46	; 0x2e
 8016732:	f00e f8c5 	bl	80248c0 <putchar>
 8016736:	4b04      	ldr	r3, [pc, #16]	; (8016748 <vApplicationIdleHook+0x1c>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	689b      	ldr	r3, [r3, #8]
 801673c:	4618      	mov	r0, r3
 801673e:	f00d ffd7 	bl	80246f0 <fflush>
}
 8016742:	bf00      	nop
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	20001050 	.word	0x20001050

0801674c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801674c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016784 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8016750:	f7ff ffda 	bl	8016708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016754:	480c      	ldr	r0, [pc, #48]	; (8016788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8016756:	490d      	ldr	r1, [pc, #52]	; (801678c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8016758:	4a0d      	ldr	r2, [pc, #52]	; (8016790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801675a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801675c:	e002      	b.n	8016764 <LoopCopyDataInit>

0801675e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801675e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8016762:	3304      	adds	r3, #4

08016764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8016766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016768:	d3f9      	bcc.n	801675e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801676a:	4a0a      	ldr	r2, [pc, #40]	; (8016794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801676c:	4c0a      	ldr	r4, [pc, #40]	; (8016798 <LoopFillZerobss+0x22>)
  movs r3, #0
 801676e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016770:	e001      	b.n	8016776 <LoopFillZerobss>

08016772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8016772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8016774:	3204      	adds	r2, #4

08016776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8016776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016778:	d3fb      	bcc.n	8016772 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 801677a:	f00e facd 	bl	8024d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801677e:	f7fe ff25 	bl	80155cc <main>
  bx  lr    
 8016782:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8016784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8016788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801678c:	200011c0 	.word	0x200011c0
  ldr r2, =_sidata
 8016790:	080300c8 	.word	0x080300c8
  ldr r2, =_sbss
 8016794:	20006490 	.word	0x20006490
  ldr r4, =_ebss
 8016798:	20013214 	.word	0x20013214

0801679c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801679c:	e7fe      	b.n	801679c <ADC_IRQHandler>
	...

080167a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80167a4:	4b0e      	ldr	r3, [pc, #56]	; (80167e0 <HAL_Init+0x40>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a0d      	ldr	r2, [pc, #52]	; (80167e0 <HAL_Init+0x40>)
 80167aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80167ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80167b0:	4b0b      	ldr	r3, [pc, #44]	; (80167e0 <HAL_Init+0x40>)
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	4a0a      	ldr	r2, [pc, #40]	; (80167e0 <HAL_Init+0x40>)
 80167b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80167ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80167bc:	4b08      	ldr	r3, [pc, #32]	; (80167e0 <HAL_Init+0x40>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4a07      	ldr	r2, [pc, #28]	; (80167e0 <HAL_Init+0x40>)
 80167c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80167c8:	2003      	movs	r0, #3
 80167ca:	f000 fd61 	bl	8017290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80167ce:	200f      	movs	r0, #15
 80167d0:	f000 f808 	bl	80167e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80167d4:	f7ff fb1c 	bl	8015e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80167d8:	2300      	movs	r3, #0
}
 80167da:	4618      	mov	r0, r3
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	bf00      	nop
 80167e0:	40023c00 	.word	0x40023c00

080167e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80167ec:	4b12      	ldr	r3, [pc, #72]	; (8016838 <HAL_InitTick+0x54>)
 80167ee:	681a      	ldr	r2, [r3, #0]
 80167f0:	4b12      	ldr	r3, [pc, #72]	; (801683c <HAL_InitTick+0x58>)
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	4619      	mov	r1, r3
 80167f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80167fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80167fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016802:	4618      	mov	r0, r3
 8016804:	f000 fd79 	bl	80172fa <HAL_SYSTICK_Config>
 8016808:	4603      	mov	r3, r0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d001      	beq.n	8016812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801680e:	2301      	movs	r3, #1
 8016810:	e00e      	b.n	8016830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2b0f      	cmp	r3, #15
 8016816:	d80a      	bhi.n	801682e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016818:	2200      	movs	r2, #0
 801681a:	6879      	ldr	r1, [r7, #4]
 801681c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016820:	f000 fd41 	bl	80172a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016824:	4a06      	ldr	r2, [pc, #24]	; (8016840 <HAL_InitTick+0x5c>)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801682a:	2300      	movs	r3, #0
 801682c:	e000      	b.n	8016830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801682e:	2301      	movs	r3, #1
}
 8016830:	4618      	mov	r0, r3
 8016832:	3708      	adds	r7, #8
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}
 8016838:	20000ef8 	.word	0x20000ef8
 801683c:	20000f00 	.word	0x20000f00
 8016840:	20000efc 	.word	0x20000efc

08016844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016844:	b480      	push	{r7}
 8016846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016848:	4b06      	ldr	r3, [pc, #24]	; (8016864 <HAL_IncTick+0x20>)
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	461a      	mov	r2, r3
 801684e:	4b06      	ldr	r3, [pc, #24]	; (8016868 <HAL_IncTick+0x24>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	4413      	add	r3, r2
 8016854:	4a04      	ldr	r2, [pc, #16]	; (8016868 <HAL_IncTick+0x24>)
 8016856:	6013      	str	r3, [r2, #0]
}
 8016858:	bf00      	nop
 801685a:	46bd      	mov	sp, r7
 801685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016860:	4770      	bx	lr
 8016862:	bf00      	nop
 8016864:	20000f00 	.word	0x20000f00
 8016868:	2000d460 	.word	0x2000d460

0801686c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801686c:	b480      	push	{r7}
 801686e:	af00      	add	r7, sp, #0
  return uwTick;
 8016870:	4b03      	ldr	r3, [pc, #12]	; (8016880 <HAL_GetTick+0x14>)
 8016872:	681b      	ldr	r3, [r3, #0]
}
 8016874:	4618      	mov	r0, r3
 8016876:	46bd      	mov	sp, r7
 8016878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	2000d460 	.word	0x2000d460

08016884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801688c:	f7ff ffee 	bl	801686c <HAL_GetTick>
 8016890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801689c:	d005      	beq.n	80168aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801689e:	4b0a      	ldr	r3, [pc, #40]	; (80168c8 <HAL_Delay+0x44>)
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	461a      	mov	r2, r3
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	4413      	add	r3, r2
 80168a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80168aa:	bf00      	nop
 80168ac:	f7ff ffde 	bl	801686c <HAL_GetTick>
 80168b0:	4602      	mov	r2, r0
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	1ad3      	subs	r3, r2, r3
 80168b6:	68fa      	ldr	r2, [r7, #12]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d8f7      	bhi.n	80168ac <HAL_Delay+0x28>
  {
  }
}
 80168bc:	bf00      	nop
 80168be:	bf00      	nop
 80168c0:	3710      	adds	r7, #16
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	20000f00 	.word	0x20000f00

080168cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b084      	sub	sp, #16
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80168d4:	2300      	movs	r3, #0
 80168d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d101      	bne.n	80168e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80168de:	2301      	movs	r3, #1
 80168e0:	e033      	b.n	801694a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d109      	bne.n	80168fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7ff fac4 	bl	8015e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2200      	movs	r2, #0
 80168fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016902:	f003 0310 	and.w	r3, r3, #16
 8016906:	2b00      	cmp	r3, #0
 8016908:	d118      	bne.n	801693c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801690e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8016912:	f023 0302 	bic.w	r3, r3, #2
 8016916:	f043 0202 	orr.w	r2, r3, #2
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f000 fa68 	bl	8016df4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801692e:	f023 0303 	bic.w	r3, r3, #3
 8016932:	f043 0201 	orr.w	r2, r3, #1
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	641a      	str	r2, [r3, #64]	; 0x40
 801693a:	e001      	b.n	8016940 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801693c:	2301      	movs	r3, #1
 801693e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8016948:	7bfb      	ldrb	r3, [r7, #15]
}
 801694a:	4618      	mov	r0, r3
 801694c:	3710      	adds	r7, #16
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
	...

08016954 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b086      	sub	sp, #24
 8016958:	af00      	add	r7, sp, #0
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8016960:	2300      	movs	r3, #0
 8016962:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801696a:	2b01      	cmp	r3, #1
 801696c:	d101      	bne.n	8016972 <HAL_ADC_Start_DMA+0x1e>
 801696e:	2302      	movs	r3, #2
 8016970:	e0e9      	b.n	8016b46 <HAL_ADC_Start_DMA+0x1f2>
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2201      	movs	r2, #1
 8016976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	689b      	ldr	r3, [r3, #8]
 8016980:	f003 0301 	and.w	r3, r3, #1
 8016984:	2b01      	cmp	r3, #1
 8016986:	d018      	beq.n	80169ba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	689a      	ldr	r2, [r3, #8]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f042 0201 	orr.w	r2, r2, #1
 8016996:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8016998:	4b6d      	ldr	r3, [pc, #436]	; (8016b50 <HAL_ADC_Start_DMA+0x1fc>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4a6d      	ldr	r2, [pc, #436]	; (8016b54 <HAL_ADC_Start_DMA+0x200>)
 801699e:	fba2 2303 	umull	r2, r3, r2, r3
 80169a2:	0c9a      	lsrs	r2, r3, #18
 80169a4:	4613      	mov	r3, r2
 80169a6:	005b      	lsls	r3, r3, #1
 80169a8:	4413      	add	r3, r2
 80169aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80169ac:	e002      	b.n	80169b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	3b01      	subs	r3, #1
 80169b2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d1f9      	bne.n	80169ae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	689b      	ldr	r3, [r3, #8]
 80169c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80169c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169c8:	d107      	bne.n	80169da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	689a      	ldr	r2, [r3, #8]
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80169d8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	689b      	ldr	r3, [r3, #8]
 80169e0:	f003 0301 	and.w	r3, r3, #1
 80169e4:	2b01      	cmp	r3, #1
 80169e6:	f040 80a1 	bne.w	8016b2c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80169f2:	f023 0301 	bic.w	r3, r3, #1
 80169f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d007      	beq.n	8016a1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8016a14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016a28:	d106      	bne.n	8016a38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a2e:	f023 0206 	bic.w	r2, r3, #6
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	645a      	str	r2, [r3, #68]	; 0x44
 8016a36:	e002      	b.n	8016a3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	2200      	movs	r2, #0
 8016a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8016a46:	4b44      	ldr	r3, [pc, #272]	; (8016b58 <HAL_ADC_Start_DMA+0x204>)
 8016a48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a4e:	4a43      	ldr	r2, [pc, #268]	; (8016b5c <HAL_ADC_Start_DMA+0x208>)
 8016a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a56:	4a42      	ldr	r2, [pc, #264]	; (8016b60 <HAL_ADC_Start_DMA+0x20c>)
 8016a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a5e:	4a41      	ldr	r2, [pc, #260]	; (8016b64 <HAL_ADC_Start_DMA+0x210>)
 8016a60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8016a6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	685a      	ldr	r2, [r3, #4]
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8016a7a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	689a      	ldr	r2, [r3, #8]
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016a8a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	334c      	adds	r3, #76	; 0x4c
 8016a96:	4619      	mov	r1, r3
 8016a98:	68ba      	ldr	r2, [r7, #8]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f000 fce8 	bl	8017470 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8016aa0:	697b      	ldr	r3, [r7, #20]
 8016aa2:	685b      	ldr	r3, [r3, #4]
 8016aa4:	f003 031f 	and.w	r3, r3, #31
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d12a      	bne.n	8016b02 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4a2d      	ldr	r2, [pc, #180]	; (8016b68 <HAL_ADC_Start_DMA+0x214>)
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d015      	beq.n	8016ae2 <HAL_ADC_Start_DMA+0x18e>
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4a2c      	ldr	r2, [pc, #176]	; (8016b6c <HAL_ADC_Start_DMA+0x218>)
 8016abc:	4293      	cmp	r3, r2
 8016abe:	d105      	bne.n	8016acc <HAL_ADC_Start_DMA+0x178>
 8016ac0:	4b25      	ldr	r3, [pc, #148]	; (8016b58 <HAL_ADC_Start_DMA+0x204>)
 8016ac2:	685b      	ldr	r3, [r3, #4]
 8016ac4:	f003 031f 	and.w	r3, r3, #31
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00a      	beq.n	8016ae2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	4a27      	ldr	r2, [pc, #156]	; (8016b70 <HAL_ADC_Start_DMA+0x21c>)
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	d136      	bne.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
 8016ad6:	4b20      	ldr	r3, [pc, #128]	; (8016b58 <HAL_ADC_Start_DMA+0x204>)
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	f003 0310 	and.w	r3, r3, #16
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d130      	bne.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	689b      	ldr	r3, [r3, #8]
 8016ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d129      	bne.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	689a      	ldr	r2, [r3, #8]
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8016afe:	609a      	str	r2, [r3, #8]
 8016b00:	e020      	b.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	4a18      	ldr	r2, [pc, #96]	; (8016b68 <HAL_ADC_Start_DMA+0x214>)
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	d11b      	bne.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	689b      	ldr	r3, [r3, #8]
 8016b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d114      	bne.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	689a      	ldr	r2, [r3, #8]
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8016b28:	609a      	str	r2, [r3, #8]
 8016b2a:	e00b      	b.n	8016b44 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b30:	f043 0210 	orr.w	r2, r3, #16
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b3c:	f043 0201 	orr.w	r2, r3, #1
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8016b44:	2300      	movs	r3, #0
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3718      	adds	r7, #24
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
 8016b4e:	bf00      	nop
 8016b50:	20000ef8 	.word	0x20000ef8
 8016b54:	431bde83 	.word	0x431bde83
 8016b58:	40012300 	.word	0x40012300
 8016b5c:	08016fed 	.word	0x08016fed
 8016b60:	080170a7 	.word	0x080170a7
 8016b64:	080170c3 	.word	0x080170c3
 8016b68:	40012000 	.word	0x40012000
 8016b6c:	40012100 	.word	0x40012100
 8016b70:	40012200 	.word	0x40012200

08016b74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8016b74:	b480      	push	{r7}
 8016b76:	b083      	sub	sp, #12
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8016b7c:	bf00      	nop
 8016b7e:	370c      	adds	r7, #12
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr

08016b88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8016b88:	b480      	push	{r7}
 8016b8a:	b083      	sub	sp, #12
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8016b90:	bf00      	nop
 8016b92:	370c      	adds	r7, #12
 8016b94:	46bd      	mov	sp, r7
 8016b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9a:	4770      	bx	lr

08016b9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	b083      	sub	sp, #12
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8016ba4:	bf00      	nop
 8016ba6:	370c      	adds	r7, #12
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bae:	4770      	bx	lr

08016bb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016bb0:	b480      	push	{r7}
 8016bb2:	b085      	sub	sp, #20
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016bc4:	2b01      	cmp	r3, #1
 8016bc6:	d101      	bne.n	8016bcc <HAL_ADC_ConfigChannel+0x1c>
 8016bc8:	2302      	movs	r3, #2
 8016bca:	e105      	b.n	8016dd8 <HAL_ADC_ConfigChannel+0x228>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2201      	movs	r2, #1
 8016bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2b09      	cmp	r3, #9
 8016bda:	d925      	bls.n	8016c28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	68d9      	ldr	r1, [r3, #12]
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	461a      	mov	r2, r3
 8016bea:	4613      	mov	r3, r2
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	4413      	add	r3, r2
 8016bf0:	3b1e      	subs	r3, #30
 8016bf2:	2207      	movs	r2, #7
 8016bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8016bf8:	43da      	mvns	r2, r3
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	400a      	ands	r2, r1
 8016c00:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	68d9      	ldr	r1, [r3, #12]
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	689a      	ldr	r2, [r3, #8]
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	b29b      	uxth	r3, r3
 8016c12:	4618      	mov	r0, r3
 8016c14:	4603      	mov	r3, r0
 8016c16:	005b      	lsls	r3, r3, #1
 8016c18:	4403      	add	r3, r0
 8016c1a:	3b1e      	subs	r3, #30
 8016c1c:	409a      	lsls	r2, r3
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	430a      	orrs	r2, r1
 8016c24:	60da      	str	r2, [r3, #12]
 8016c26:	e022      	b.n	8016c6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	6919      	ldr	r1, [r3, #16]
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	461a      	mov	r2, r3
 8016c36:	4613      	mov	r3, r2
 8016c38:	005b      	lsls	r3, r3, #1
 8016c3a:	4413      	add	r3, r2
 8016c3c:	2207      	movs	r2, #7
 8016c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8016c42:	43da      	mvns	r2, r3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	400a      	ands	r2, r1
 8016c4a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	6919      	ldr	r1, [r3, #16]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	689a      	ldr	r2, [r3, #8]
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	4603      	mov	r3, r0
 8016c60:	005b      	lsls	r3, r3, #1
 8016c62:	4403      	add	r3, r0
 8016c64:	409a      	lsls	r2, r3
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	430a      	orrs	r2, r1
 8016c6c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	685b      	ldr	r3, [r3, #4]
 8016c72:	2b06      	cmp	r3, #6
 8016c74:	d824      	bhi.n	8016cc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	685a      	ldr	r2, [r3, #4]
 8016c80:	4613      	mov	r3, r2
 8016c82:	009b      	lsls	r3, r3, #2
 8016c84:	4413      	add	r3, r2
 8016c86:	3b05      	subs	r3, #5
 8016c88:	221f      	movs	r2, #31
 8016c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c8e:	43da      	mvns	r2, r3
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	400a      	ands	r2, r1
 8016c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	685a      	ldr	r2, [r3, #4]
 8016caa:	4613      	mov	r3, r2
 8016cac:	009b      	lsls	r3, r3, #2
 8016cae:	4413      	add	r3, r2
 8016cb0:	3b05      	subs	r3, #5
 8016cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	430a      	orrs	r2, r1
 8016cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8016cbe:	e04c      	b.n	8016d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	2b0c      	cmp	r3, #12
 8016cc6:	d824      	bhi.n	8016d12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	685a      	ldr	r2, [r3, #4]
 8016cd2:	4613      	mov	r3, r2
 8016cd4:	009b      	lsls	r3, r3, #2
 8016cd6:	4413      	add	r3, r2
 8016cd8:	3b23      	subs	r3, #35	; 0x23
 8016cda:	221f      	movs	r2, #31
 8016cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8016ce0:	43da      	mvns	r2, r3
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	400a      	ands	r2, r1
 8016ce8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8016cf0:	683b      	ldr	r3, [r7, #0]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	b29b      	uxth	r3, r3
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	685a      	ldr	r2, [r3, #4]
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	009b      	lsls	r3, r3, #2
 8016d00:	4413      	add	r3, r2
 8016d02:	3b23      	subs	r3, #35	; 0x23
 8016d04:	fa00 f203 	lsl.w	r2, r0, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	430a      	orrs	r2, r1
 8016d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8016d10:	e023      	b.n	8016d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016d18:	683b      	ldr	r3, [r7, #0]
 8016d1a:	685a      	ldr	r2, [r3, #4]
 8016d1c:	4613      	mov	r3, r2
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	4413      	add	r3, r2
 8016d22:	3b41      	subs	r3, #65	; 0x41
 8016d24:	221f      	movs	r2, #31
 8016d26:	fa02 f303 	lsl.w	r3, r2, r3
 8016d2a:	43da      	mvns	r2, r3
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	400a      	ands	r2, r1
 8016d32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	4618      	mov	r0, r3
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	685a      	ldr	r2, [r3, #4]
 8016d46:	4613      	mov	r3, r2
 8016d48:	009b      	lsls	r3, r3, #2
 8016d4a:	4413      	add	r3, r2
 8016d4c:	3b41      	subs	r3, #65	; 0x41
 8016d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	430a      	orrs	r2, r1
 8016d58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8016d5a:	4b22      	ldr	r3, [pc, #136]	; (8016de4 <HAL_ADC_ConfigChannel+0x234>)
 8016d5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	4a21      	ldr	r2, [pc, #132]	; (8016de8 <HAL_ADC_ConfigChannel+0x238>)
 8016d64:	4293      	cmp	r3, r2
 8016d66:	d109      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0x1cc>
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2b12      	cmp	r3, #18
 8016d6e:	d105      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	685b      	ldr	r3, [r3, #4]
 8016d74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4a19      	ldr	r2, [pc, #100]	; (8016de8 <HAL_ADC_ConfigChannel+0x238>)
 8016d82:	4293      	cmp	r3, r2
 8016d84:	d123      	bne.n	8016dce <HAL_ADC_ConfigChannel+0x21e>
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b10      	cmp	r3, #16
 8016d8c:	d003      	beq.n	8016d96 <HAL_ADC_ConfigChannel+0x1e6>
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	2b11      	cmp	r3, #17
 8016d94:	d11b      	bne.n	8016dce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	2b10      	cmp	r3, #16
 8016da8:	d111      	bne.n	8016dce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8016daa:	4b10      	ldr	r3, [pc, #64]	; (8016dec <HAL_ADC_ConfigChannel+0x23c>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	4a10      	ldr	r2, [pc, #64]	; (8016df0 <HAL_ADC_ConfigChannel+0x240>)
 8016db0:	fba2 2303 	umull	r2, r3, r2, r3
 8016db4:	0c9a      	lsrs	r2, r3, #18
 8016db6:	4613      	mov	r3, r2
 8016db8:	009b      	lsls	r3, r3, #2
 8016dba:	4413      	add	r3, r2
 8016dbc:	005b      	lsls	r3, r3, #1
 8016dbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8016dc0:	e002      	b.n	8016dc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	3b01      	subs	r3, #1
 8016dc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d1f9      	bne.n	8016dc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8016dd6:	2300      	movs	r3, #0
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	3714      	adds	r7, #20
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de2:	4770      	bx	lr
 8016de4:	40012300 	.word	0x40012300
 8016de8:	40012000 	.word	0x40012000
 8016dec:	20000ef8 	.word	0x20000ef8
 8016df0:	431bde83 	.word	0x431bde83

08016df4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8016df4:	b480      	push	{r7}
 8016df6:	b085      	sub	sp, #20
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8016dfc:	4b79      	ldr	r3, [pc, #484]	; (8016fe4 <ADC_Init+0x1f0>)
 8016dfe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	685a      	ldr	r2, [r3, #4]
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	431a      	orrs	r2, r3
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	685a      	ldr	r2, [r3, #4]
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	6859      	ldr	r1, [r3, #4]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	691b      	ldr	r3, [r3, #16]
 8016e34:	021a      	lsls	r2, r3, #8
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	430a      	orrs	r2, r1
 8016e3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	685a      	ldr	r2, [r3, #4]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8016e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	6859      	ldr	r1, [r3, #4]
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	689a      	ldr	r2, [r3, #8]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	430a      	orrs	r2, r1
 8016e5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	689a      	ldr	r2, [r3, #8]
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	6899      	ldr	r1, [r3, #8]
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	68da      	ldr	r2, [r3, #12]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	430a      	orrs	r2, r1
 8016e80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e86:	4a58      	ldr	r2, [pc, #352]	; (8016fe8 <ADC_Init+0x1f4>)
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	d022      	beq.n	8016ed2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	689a      	ldr	r2, [r3, #8]
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	6899      	ldr	r1, [r3, #8]
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	430a      	orrs	r2, r1
 8016eac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	689a      	ldr	r2, [r3, #8]
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8016ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	6899      	ldr	r1, [r3, #8]
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	430a      	orrs	r2, r1
 8016ece:	609a      	str	r2, [r3, #8]
 8016ed0:	e00f      	b.n	8016ef2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	689a      	ldr	r2, [r3, #8]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	689a      	ldr	r2, [r3, #8]
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8016ef0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	689a      	ldr	r2, [r3, #8]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	f022 0202 	bic.w	r2, r2, #2
 8016f00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	6899      	ldr	r1, [r3, #8]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	7e1b      	ldrb	r3, [r3, #24]
 8016f0c:	005a      	lsls	r2, r3, #1
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	430a      	orrs	r2, r1
 8016f14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d01b      	beq.n	8016f58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	685a      	ldr	r2, [r3, #4]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016f2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	685a      	ldr	r2, [r3, #4]
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8016f3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	6859      	ldr	r1, [r3, #4]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	035a      	lsls	r2, r3, #13
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	430a      	orrs	r2, r1
 8016f54:	605a      	str	r2, [r3, #4]
 8016f56:	e007      	b.n	8016f68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	685a      	ldr	r2, [r3, #4]
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016f66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8016f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	69db      	ldr	r3, [r3, #28]
 8016f82:	3b01      	subs	r3, #1
 8016f84:	051a      	lsls	r2, r3, #20
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	430a      	orrs	r2, r1
 8016f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	689a      	ldr	r2, [r3, #8]
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8016f9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	6899      	ldr	r1, [r3, #8]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016faa:	025a      	lsls	r2, r3, #9
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	430a      	orrs	r2, r1
 8016fb2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	689a      	ldr	r2, [r3, #8]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	6899      	ldr	r1, [r3, #8]
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	695b      	ldr	r3, [r3, #20]
 8016fce:	029a      	lsls	r2, r3, #10
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	430a      	orrs	r2, r1
 8016fd6:	609a      	str	r2, [r3, #8]
}
 8016fd8:	bf00      	nop
 8016fda:	3714      	adds	r7, #20
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr
 8016fe4:	40012300 	.word	0x40012300
 8016fe8:	0f000001 	.word	0x0f000001

08016fec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b084      	sub	sp, #16
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ff8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ffe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017002:	2b00      	cmp	r3, #0
 8017004:	d13c      	bne.n	8017080 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801700a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	689b      	ldr	r3, [r3, #8]
 8017018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801701c:	2b00      	cmp	r3, #0
 801701e:	d12b      	bne.n	8017078 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8017024:	2b00      	cmp	r3, #0
 8017026:	d127      	bne.n	8017078 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801702e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8017032:	2b00      	cmp	r3, #0
 8017034:	d006      	beq.n	8017044 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	689b      	ldr	r3, [r3, #8]
 801703c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8017040:	2b00      	cmp	r3, #0
 8017042:	d119      	bne.n	8017078 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	685a      	ldr	r2, [r3, #4]
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	f022 0220 	bic.w	r2, r2, #32
 8017052:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017068:	2b00      	cmp	r3, #0
 801706a:	d105      	bne.n	8017078 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017070:	f043 0201 	orr.w	r2, r3, #1
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	f7ff fd7b 	bl	8016b74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801707e:	e00e      	b.n	801709e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017084:	f003 0310 	and.w	r3, r3, #16
 8017088:	2b00      	cmp	r3, #0
 801708a:	d003      	beq.n	8017094 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801708c:	68f8      	ldr	r0, [r7, #12]
 801708e:	f7ff fd85 	bl	8016b9c <HAL_ADC_ErrorCallback>
}
 8017092:	e004      	b.n	801709e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	4798      	blx	r3
}
 801709e:	bf00      	nop
 80170a0:	3710      	adds	r7, #16
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}

080170a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80170a6:	b580      	push	{r7, lr}
 80170a8:	b084      	sub	sp, #16
 80170aa:	af00      	add	r7, sp, #0
 80170ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80170b4:	68f8      	ldr	r0, [r7, #12]
 80170b6:	f7ff fd67 	bl	8016b88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80170ba:	bf00      	nop
 80170bc:	3710      	adds	r7, #16
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}

080170c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80170c2:	b580      	push	{r7, lr}
 80170c4:	b084      	sub	sp, #16
 80170c6:	af00      	add	r7, sp, #0
 80170c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	2240      	movs	r2, #64	; 0x40
 80170d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170da:	f043 0204 	orr.w	r2, r3, #4
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80170e2:	68f8      	ldr	r0, [r7, #12]
 80170e4:	f7ff fd5a 	bl	8016b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80170e8:	bf00      	nop
 80170ea:	3710      	adds	r7, #16
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}

080170f0 <__NVIC_SetPriorityGrouping>:
{
 80170f0:	b480      	push	{r7}
 80170f2:	b085      	sub	sp, #20
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	f003 0307 	and.w	r3, r3, #7
 80170fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017100:	4b0c      	ldr	r3, [pc, #48]	; (8017134 <__NVIC_SetPriorityGrouping+0x44>)
 8017102:	68db      	ldr	r3, [r3, #12]
 8017104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017106:	68ba      	ldr	r2, [r7, #8]
 8017108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801710c:	4013      	ands	r3, r2
 801710e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801711c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017122:	4a04      	ldr	r2, [pc, #16]	; (8017134 <__NVIC_SetPriorityGrouping+0x44>)
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	60d3      	str	r3, [r2, #12]
}
 8017128:	bf00      	nop
 801712a:	3714      	adds	r7, #20
 801712c:	46bd      	mov	sp, r7
 801712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017132:	4770      	bx	lr
 8017134:	e000ed00 	.word	0xe000ed00

08017138 <__NVIC_GetPriorityGrouping>:
{
 8017138:	b480      	push	{r7}
 801713a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801713c:	4b04      	ldr	r3, [pc, #16]	; (8017150 <__NVIC_GetPriorityGrouping+0x18>)
 801713e:	68db      	ldr	r3, [r3, #12]
 8017140:	0a1b      	lsrs	r3, r3, #8
 8017142:	f003 0307 	and.w	r3, r3, #7
}
 8017146:	4618      	mov	r0, r3
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr
 8017150:	e000ed00 	.word	0xe000ed00

08017154 <__NVIC_EnableIRQ>:
{
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	4603      	mov	r3, r0
 801715c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801715e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017162:	2b00      	cmp	r3, #0
 8017164:	db0b      	blt.n	801717e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017166:	79fb      	ldrb	r3, [r7, #7]
 8017168:	f003 021f 	and.w	r2, r3, #31
 801716c:	4907      	ldr	r1, [pc, #28]	; (801718c <__NVIC_EnableIRQ+0x38>)
 801716e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017172:	095b      	lsrs	r3, r3, #5
 8017174:	2001      	movs	r0, #1
 8017176:	fa00 f202 	lsl.w	r2, r0, r2
 801717a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801717e:	bf00      	nop
 8017180:	370c      	adds	r7, #12
 8017182:	46bd      	mov	sp, r7
 8017184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017188:	4770      	bx	lr
 801718a:	bf00      	nop
 801718c:	e000e100 	.word	0xe000e100

08017190 <__NVIC_SetPriority>:
{
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
 8017196:	4603      	mov	r3, r0
 8017198:	6039      	str	r1, [r7, #0]
 801719a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801719c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	db0a      	blt.n	80171ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	b2da      	uxtb	r2, r3
 80171a8:	490c      	ldr	r1, [pc, #48]	; (80171dc <__NVIC_SetPriority+0x4c>)
 80171aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80171ae:	0112      	lsls	r2, r2, #4
 80171b0:	b2d2      	uxtb	r2, r2
 80171b2:	440b      	add	r3, r1
 80171b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80171b8:	e00a      	b.n	80171d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	b2da      	uxtb	r2, r3
 80171be:	4908      	ldr	r1, [pc, #32]	; (80171e0 <__NVIC_SetPriority+0x50>)
 80171c0:	79fb      	ldrb	r3, [r7, #7]
 80171c2:	f003 030f 	and.w	r3, r3, #15
 80171c6:	3b04      	subs	r3, #4
 80171c8:	0112      	lsls	r2, r2, #4
 80171ca:	b2d2      	uxtb	r2, r2
 80171cc:	440b      	add	r3, r1
 80171ce:	761a      	strb	r2, [r3, #24]
}
 80171d0:	bf00      	nop
 80171d2:	370c      	adds	r7, #12
 80171d4:	46bd      	mov	sp, r7
 80171d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171da:	4770      	bx	lr
 80171dc:	e000e100 	.word	0xe000e100
 80171e0:	e000ed00 	.word	0xe000ed00

080171e4 <NVIC_EncodePriority>:
{
 80171e4:	b480      	push	{r7}
 80171e6:	b089      	sub	sp, #36	; 0x24
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	f003 0307 	and.w	r3, r3, #7
 80171f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80171f8:	69fb      	ldr	r3, [r7, #28]
 80171fa:	f1c3 0307 	rsb	r3, r3, #7
 80171fe:	2b04      	cmp	r3, #4
 8017200:	bf28      	it	cs
 8017202:	2304      	movcs	r3, #4
 8017204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	3304      	adds	r3, #4
 801720a:	2b06      	cmp	r3, #6
 801720c:	d902      	bls.n	8017214 <NVIC_EncodePriority+0x30>
 801720e:	69fb      	ldr	r3, [r7, #28]
 8017210:	3b03      	subs	r3, #3
 8017212:	e000      	b.n	8017216 <NVIC_EncodePriority+0x32>
 8017214:	2300      	movs	r3, #0
 8017216:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801721c:	69bb      	ldr	r3, [r7, #24]
 801721e:	fa02 f303 	lsl.w	r3, r2, r3
 8017222:	43da      	mvns	r2, r3
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	401a      	ands	r2, r3
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801722c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	fa01 f303 	lsl.w	r3, r1, r3
 8017236:	43d9      	mvns	r1, r3
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801723c:	4313      	orrs	r3, r2
}
 801723e:	4618      	mov	r0, r3
 8017240:	3724      	adds	r7, #36	; 0x24
 8017242:	46bd      	mov	sp, r7
 8017244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017248:	4770      	bx	lr
	...

0801724c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	3b01      	subs	r3, #1
 8017258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801725c:	d301      	bcc.n	8017262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801725e:	2301      	movs	r3, #1
 8017260:	e00f      	b.n	8017282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017262:	4a0a      	ldr	r2, [pc, #40]	; (801728c <SysTick_Config+0x40>)
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	3b01      	subs	r3, #1
 8017268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801726a:	210f      	movs	r1, #15
 801726c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017270:	f7ff ff8e 	bl	8017190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8017274:	4b05      	ldr	r3, [pc, #20]	; (801728c <SysTick_Config+0x40>)
 8017276:	2200      	movs	r2, #0
 8017278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801727a:	4b04      	ldr	r3, [pc, #16]	; (801728c <SysTick_Config+0x40>)
 801727c:	2207      	movs	r2, #7
 801727e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017280:	2300      	movs	r3, #0
}
 8017282:	4618      	mov	r0, r3
 8017284:	3708      	adds	r7, #8
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	e000e010 	.word	0xe000e010

08017290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7ff ff29 	bl	80170f0 <__NVIC_SetPriorityGrouping>
}
 801729e:	bf00      	nop
 80172a0:	3708      	adds	r7, #8
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b086      	sub	sp, #24
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	4603      	mov	r3, r0
 80172ae:	60b9      	str	r1, [r7, #8]
 80172b0:	607a      	str	r2, [r7, #4]
 80172b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80172b4:	2300      	movs	r3, #0
 80172b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80172b8:	f7ff ff3e 	bl	8017138 <__NVIC_GetPriorityGrouping>
 80172bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	68b9      	ldr	r1, [r7, #8]
 80172c2:	6978      	ldr	r0, [r7, #20]
 80172c4:	f7ff ff8e 	bl	80171e4 <NVIC_EncodePriority>
 80172c8:	4602      	mov	r2, r0
 80172ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172ce:	4611      	mov	r1, r2
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ff ff5d 	bl	8017190 <__NVIC_SetPriority>
}
 80172d6:	bf00      	nop
 80172d8:	3718      	adds	r7, #24
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}

080172de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80172de:	b580      	push	{r7, lr}
 80172e0:	b082      	sub	sp, #8
 80172e2:	af00      	add	r7, sp, #0
 80172e4:	4603      	mov	r3, r0
 80172e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80172e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7ff ff31 	bl	8017154 <__NVIC_EnableIRQ>
}
 80172f2:	bf00      	nop
 80172f4:	3708      	adds	r7, #8
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}

080172fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b082      	sub	sp, #8
 80172fe:	af00      	add	r7, sp, #0
 8017300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	f7ff ffa2 	bl	801724c <SysTick_Config>
 8017308:	4603      	mov	r3, r0
}
 801730a:	4618      	mov	r0, r3
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
	...

08017314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b086      	sub	sp, #24
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801731c:	2300      	movs	r3, #0
 801731e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8017320:	f7ff faa4 	bl	801686c <HAL_GetTick>
 8017324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d101      	bne.n	8017330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801732c:	2301      	movs	r3, #1
 801732e:	e099      	b.n	8017464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2202      	movs	r2, #2
 8017334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2200      	movs	r2, #0
 801733c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	f022 0201 	bic.w	r2, r2, #1
 801734e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017350:	e00f      	b.n	8017372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017352:	f7ff fa8b 	bl	801686c <HAL_GetTick>
 8017356:	4602      	mov	r2, r0
 8017358:	693b      	ldr	r3, [r7, #16]
 801735a:	1ad3      	subs	r3, r2, r3
 801735c:	2b05      	cmp	r3, #5
 801735e:	d908      	bls.n	8017372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2220      	movs	r2, #32
 8017364:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2203      	movs	r2, #3
 801736a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801736e:	2303      	movs	r3, #3
 8017370:	e078      	b.n	8017464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	f003 0301 	and.w	r3, r3, #1
 801737c:	2b00      	cmp	r3, #0
 801737e:	d1e8      	bne.n	8017352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8017388:	697a      	ldr	r2, [r7, #20]
 801738a:	4b38      	ldr	r3, [pc, #224]	; (801746c <HAL_DMA_Init+0x158>)
 801738c:	4013      	ands	r3, r2
 801738e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	685a      	ldr	r2, [r3, #4]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	689b      	ldr	r3, [r3, #8]
 8017398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801739e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	691b      	ldr	r3, [r3, #16]
 80173a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80173aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	699b      	ldr	r3, [r3, #24]
 80173b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80173b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6a1b      	ldr	r3, [r3, #32]
 80173bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80173be:	697a      	ldr	r2, [r7, #20]
 80173c0:	4313      	orrs	r3, r2
 80173c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c8:	2b04      	cmp	r3, #4
 80173ca:	d107      	bne.n	80173dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173d4:	4313      	orrs	r3, r2
 80173d6:	697a      	ldr	r2, [r7, #20]
 80173d8:	4313      	orrs	r3, r2
 80173da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	697a      	ldr	r2, [r7, #20]
 80173e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	695b      	ldr	r3, [r3, #20]
 80173ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80173ec:	697b      	ldr	r3, [r7, #20]
 80173ee:	f023 0307 	bic.w	r3, r3, #7
 80173f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173f8:	697a      	ldr	r2, [r7, #20]
 80173fa:	4313      	orrs	r3, r2
 80173fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017402:	2b04      	cmp	r3, #4
 8017404:	d117      	bne.n	8017436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801740a:	697a      	ldr	r2, [r7, #20]
 801740c:	4313      	orrs	r3, r2
 801740e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017414:	2b00      	cmp	r3, #0
 8017416:	d00e      	beq.n	8017436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f000 fb0f 	bl	8017a3c <DMA_CheckFifoParam>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d008      	beq.n	8017436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2240      	movs	r2, #64	; 0x40
 8017428:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	2201      	movs	r2, #1
 801742e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8017432:	2301      	movs	r3, #1
 8017434:	e016      	b.n	8017464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	697a      	ldr	r2, [r7, #20]
 801743c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 fac6 	bl	80179d0 <DMA_CalcBaseAndBitshift>
 8017444:	4603      	mov	r3, r0
 8017446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801744c:	223f      	movs	r2, #63	; 0x3f
 801744e:	409a      	lsls	r2, r3
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2200      	movs	r2, #0
 8017458:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2201      	movs	r2, #1
 801745e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017462:	2300      	movs	r3, #0
}
 8017464:	4618      	mov	r0, r3
 8017466:	3718      	adds	r7, #24
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}
 801746c:	f010803f 	.word	0xf010803f

08017470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b086      	sub	sp, #24
 8017474:	af00      	add	r7, sp, #0
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607a      	str	r2, [r7, #4]
 801747c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801747e:	2300      	movs	r3, #0
 8017480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801748e:	2b01      	cmp	r3, #1
 8017490:	d101      	bne.n	8017496 <HAL_DMA_Start_IT+0x26>
 8017492:	2302      	movs	r3, #2
 8017494:	e040      	b.n	8017518 <HAL_DMA_Start_IT+0xa8>
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	2201      	movs	r2, #1
 801749a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d12f      	bne.n	801750a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2202      	movs	r2, #2
 80174ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	2200      	movs	r2, #0
 80174b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	68b9      	ldr	r1, [r7, #8]
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	f000 fa58 	bl	8017974 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174c8:	223f      	movs	r2, #63	; 0x3f
 80174ca:	409a      	lsls	r2, r3
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	681a      	ldr	r2, [r3, #0]
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	f042 0216 	orr.w	r2, r2, #22
 80174de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d007      	beq.n	80174f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f042 0208 	orr.w	r2, r2, #8
 80174f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	681a      	ldr	r2, [r3, #0]
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f042 0201 	orr.w	r2, r2, #1
 8017506:	601a      	str	r2, [r3, #0]
 8017508:	e005      	b.n	8017516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	2200      	movs	r2, #0
 801750e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8017512:	2302      	movs	r3, #2
 8017514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8017516:	7dfb      	ldrb	r3, [r7, #23]
}
 8017518:	4618      	mov	r0, r3
 801751a:	3718      	adds	r7, #24
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}

08017520 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801752c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801752e:	f7ff f99d 	bl	801686c <HAL_GetTick>
 8017532:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801753a:	b2db      	uxtb	r3, r3
 801753c:	2b02      	cmp	r3, #2
 801753e:	d008      	beq.n	8017552 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2280      	movs	r2, #128	; 0x80
 8017544:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2200      	movs	r2, #0
 801754a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801754e:	2301      	movs	r3, #1
 8017550:	e052      	b.n	80175f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	681a      	ldr	r2, [r3, #0]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	f022 0216 	bic.w	r2, r2, #22
 8017560:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	695a      	ldr	r2, [r3, #20]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017570:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017576:	2b00      	cmp	r3, #0
 8017578:	d103      	bne.n	8017582 <HAL_DMA_Abort+0x62>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801757e:	2b00      	cmp	r3, #0
 8017580:	d007      	beq.n	8017592 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	681a      	ldr	r2, [r3, #0]
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	f022 0208 	bic.w	r2, r2, #8
 8017590:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	681a      	ldr	r2, [r3, #0]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f022 0201 	bic.w	r2, r2, #1
 80175a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80175a2:	e013      	b.n	80175cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80175a4:	f7ff f962 	bl	801686c <HAL_GetTick>
 80175a8:	4602      	mov	r2, r0
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	1ad3      	subs	r3, r2, r3
 80175ae:	2b05      	cmp	r3, #5
 80175b0:	d90c      	bls.n	80175cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	2220      	movs	r2, #32
 80175b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2203      	movs	r2, #3
 80175bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2200      	movs	r2, #0
 80175c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80175c8:	2303      	movs	r3, #3
 80175ca:	e015      	b.n	80175f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	f003 0301 	and.w	r3, r3, #1
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d1e4      	bne.n	80175a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80175de:	223f      	movs	r2, #63	; 0x3f
 80175e0:	409a      	lsls	r2, r3
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	2201      	movs	r2, #1
 80175ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2200      	movs	r2, #0
 80175f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80175f6:	2300      	movs	r3, #0
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3710      	adds	r7, #16
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8017600:	b480      	push	{r7}
 8017602:	b083      	sub	sp, #12
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801760e:	b2db      	uxtb	r3, r3
 8017610:	2b02      	cmp	r3, #2
 8017612:	d004      	beq.n	801761e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2280      	movs	r2, #128	; 0x80
 8017618:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801761a:	2301      	movs	r3, #1
 801761c:	e00c      	b.n	8017638 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2205      	movs	r2, #5
 8017622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	681a      	ldr	r2, [r3, #0]
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	f022 0201 	bic.w	r2, r2, #1
 8017634:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8017636:	2300      	movs	r3, #0
}
 8017638:	4618      	mov	r0, r3
 801763a:	370c      	adds	r7, #12
 801763c:	46bd      	mov	sp, r7
 801763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017642:	4770      	bx	lr

08017644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b086      	sub	sp, #24
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801764c:	2300      	movs	r3, #0
 801764e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8017650:	4b8e      	ldr	r3, [pc, #568]	; (801788c <HAL_DMA_IRQHandler+0x248>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	4a8e      	ldr	r2, [pc, #568]	; (8017890 <HAL_DMA_IRQHandler+0x24c>)
 8017656:	fba2 2303 	umull	r2, r3, r2, r3
 801765a:	0a9b      	lsrs	r3, r3, #10
 801765c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8017664:	693b      	ldr	r3, [r7, #16]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801766e:	2208      	movs	r2, #8
 8017670:	409a      	lsls	r2, r3
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	4013      	ands	r3, r2
 8017676:	2b00      	cmp	r3, #0
 8017678:	d01a      	beq.n	80176b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f003 0304 	and.w	r3, r3, #4
 8017684:	2b00      	cmp	r3, #0
 8017686:	d013      	beq.n	80176b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	681a      	ldr	r2, [r3, #0]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	f022 0204 	bic.w	r2, r2, #4
 8017696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801769c:	2208      	movs	r2, #8
 801769e:	409a      	lsls	r2, r3
 80176a0:	693b      	ldr	r3, [r7, #16]
 80176a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176a8:	f043 0201 	orr.w	r2, r3, #1
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176b4:	2201      	movs	r2, #1
 80176b6:	409a      	lsls	r2, r3
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	4013      	ands	r3, r2
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d012      	beq.n	80176e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	695b      	ldr	r3, [r3, #20]
 80176c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d00b      	beq.n	80176e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176d2:	2201      	movs	r2, #1
 80176d4:	409a      	lsls	r2, r3
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176de:	f043 0202 	orr.w	r2, r3, #2
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176ea:	2204      	movs	r2, #4
 80176ec:	409a      	lsls	r2, r3
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	4013      	ands	r3, r2
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d012      	beq.n	801771c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	f003 0302 	and.w	r3, r3, #2
 8017700:	2b00      	cmp	r3, #0
 8017702:	d00b      	beq.n	801771c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017708:	2204      	movs	r2, #4
 801770a:	409a      	lsls	r2, r3
 801770c:	693b      	ldr	r3, [r7, #16]
 801770e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017714:	f043 0204 	orr.w	r2, r3, #4
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017720:	2210      	movs	r2, #16
 8017722:	409a      	lsls	r2, r3
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	4013      	ands	r3, r2
 8017728:	2b00      	cmp	r3, #0
 801772a:	d043      	beq.n	80177b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	f003 0308 	and.w	r3, r3, #8
 8017736:	2b00      	cmp	r3, #0
 8017738:	d03c      	beq.n	80177b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801773e:	2210      	movs	r2, #16
 8017740:	409a      	lsls	r2, r3
 8017742:	693b      	ldr	r3, [r7, #16]
 8017744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017750:	2b00      	cmp	r3, #0
 8017752:	d018      	beq.n	8017786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801775e:	2b00      	cmp	r3, #0
 8017760:	d108      	bne.n	8017774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017766:	2b00      	cmp	r3, #0
 8017768:	d024      	beq.n	80177b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801776e:	6878      	ldr	r0, [r7, #4]
 8017770:	4798      	blx	r3
 8017772:	e01f      	b.n	80177b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017778:	2b00      	cmp	r3, #0
 801777a:	d01b      	beq.n	80177b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	4798      	blx	r3
 8017784:	e016      	b.n	80177b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017790:	2b00      	cmp	r3, #0
 8017792:	d107      	bne.n	80177a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f022 0208 	bic.w	r2, r2, #8
 80177a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d003      	beq.n	80177b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80177b8:	2220      	movs	r2, #32
 80177ba:	409a      	lsls	r2, r3
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	4013      	ands	r3, r2
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	f000 808f 	beq.w	80178e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	f003 0310 	and.w	r3, r3, #16
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	f000 8087 	beq.w	80178e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80177da:	2220      	movs	r2, #32
 80177dc:	409a      	lsls	r2, r3
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	2b05      	cmp	r3, #5
 80177ec:	d136      	bne.n	801785c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	f022 0216 	bic.w	r2, r2, #22
 80177fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	695a      	ldr	r2, [r3, #20]
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801780c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017812:	2b00      	cmp	r3, #0
 8017814:	d103      	bne.n	801781e <HAL_DMA_IRQHandler+0x1da>
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801781a:	2b00      	cmp	r3, #0
 801781c:	d007      	beq.n	801782e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f022 0208 	bic.w	r2, r2, #8
 801782c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017832:	223f      	movs	r2, #63	; 0x3f
 8017834:	409a      	lsls	r2, r3
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	2201      	movs	r2, #1
 801783e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	2200      	movs	r2, #0
 8017846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801784e:	2b00      	cmp	r3, #0
 8017850:	d07e      	beq.n	8017950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	4798      	blx	r3
        }
        return;
 801785a:	e079      	b.n	8017950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017866:	2b00      	cmp	r3, #0
 8017868:	d01d      	beq.n	80178a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017874:	2b00      	cmp	r3, #0
 8017876:	d10d      	bne.n	8017894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801787c:	2b00      	cmp	r3, #0
 801787e:	d031      	beq.n	80178e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	4798      	blx	r3
 8017888:	e02c      	b.n	80178e4 <HAL_DMA_IRQHandler+0x2a0>
 801788a:	bf00      	nop
 801788c:	20000ef8 	.word	0x20000ef8
 8017890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017898:	2b00      	cmp	r3, #0
 801789a:	d023      	beq.n	80178e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	4798      	blx	r3
 80178a4:	e01e      	b.n	80178e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d10f      	bne.n	80178d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	f022 0210 	bic.w	r2, r2, #16
 80178c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2201      	movs	r2, #1
 80178c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	2200      	movs	r2, #0
 80178d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d003      	beq.n	80178e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d032      	beq.n	8017952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80178f0:	f003 0301 	and.w	r3, r3, #1
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d022      	beq.n	801793e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2205      	movs	r2, #5
 80178fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	681a      	ldr	r2, [r3, #0]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	f022 0201 	bic.w	r2, r2, #1
 801790e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	3301      	adds	r3, #1
 8017914:	60bb      	str	r3, [r7, #8]
 8017916:	697a      	ldr	r2, [r7, #20]
 8017918:	429a      	cmp	r2, r3
 801791a:	d307      	bcc.n	801792c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	f003 0301 	and.w	r3, r3, #1
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1f2      	bne.n	8017910 <HAL_DMA_IRQHandler+0x2cc>
 801792a:	e000      	b.n	801792e <HAL_DMA_IRQHandler+0x2ea>
          break;
 801792c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2201      	movs	r2, #1
 8017932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2200      	movs	r2, #0
 801793a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017942:	2b00      	cmp	r3, #0
 8017944:	d005      	beq.n	8017952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	4798      	blx	r3
 801794e:	e000      	b.n	8017952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8017950:	bf00      	nop
    }
  }
}
 8017952:	3718      	adds	r7, #24
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8017958:	b480      	push	{r7}
 801795a:	b083      	sub	sp, #12
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017966:	b2db      	uxtb	r3, r3
}
 8017968:	4618      	mov	r0, r3
 801796a:	370c      	adds	r7, #12
 801796c:	46bd      	mov	sp, r7
 801796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017972:	4770      	bx	lr

08017974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017974:	b480      	push	{r7}
 8017976:	b085      	sub	sp, #20
 8017978:	af00      	add	r7, sp, #0
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	60b9      	str	r1, [r7, #8]
 801797e:	607a      	str	r2, [r7, #4]
 8017980:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	681a      	ldr	r2, [r3, #0]
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017990:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	683a      	ldr	r2, [r7, #0]
 8017998:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	689b      	ldr	r3, [r3, #8]
 801799e:	2b40      	cmp	r3, #64	; 0x40
 80179a0:	d108      	bne.n	80179b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	687a      	ldr	r2, [r7, #4]
 80179a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	68ba      	ldr	r2, [r7, #8]
 80179b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80179b2:	e007      	b.n	80179c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	68ba      	ldr	r2, [r7, #8]
 80179ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	687a      	ldr	r2, [r7, #4]
 80179c2:	60da      	str	r2, [r3, #12]
}
 80179c4:	bf00      	nop
 80179c6:	3714      	adds	r7, #20
 80179c8:	46bd      	mov	sp, r7
 80179ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ce:	4770      	bx	lr

080179d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80179d0:	b480      	push	{r7}
 80179d2:	b085      	sub	sp, #20
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	b2db      	uxtb	r3, r3
 80179de:	3b10      	subs	r3, #16
 80179e0:	4a14      	ldr	r2, [pc, #80]	; (8017a34 <DMA_CalcBaseAndBitshift+0x64>)
 80179e2:	fba2 2303 	umull	r2, r3, r2, r3
 80179e6:	091b      	lsrs	r3, r3, #4
 80179e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80179ea:	4a13      	ldr	r2, [pc, #76]	; (8017a38 <DMA_CalcBaseAndBitshift+0x68>)
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	4413      	add	r3, r2
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	461a      	mov	r2, r3
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	2b03      	cmp	r3, #3
 80179fc:	d909      	bls.n	8017a12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8017a06:	f023 0303 	bic.w	r3, r3, #3
 8017a0a:	1d1a      	adds	r2, r3, #4
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8017a10:	e007      	b.n	8017a22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8017a1a:	f023 0303 	bic.w	r3, r3, #3
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3714      	adds	r7, #20
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a30:	4770      	bx	lr
 8017a32:	bf00      	nop
 8017a34:	aaaaaaab 	.word	0xaaaaaaab
 8017a38:	0802f0b4 	.word	0x0802f0b4

08017a3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8017a3c:	b480      	push	{r7}
 8017a3e:	b085      	sub	sp, #20
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017a44:	2300      	movs	r3, #0
 8017a46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	699b      	ldr	r3, [r3, #24]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d11f      	bne.n	8017a96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8017a56:	68bb      	ldr	r3, [r7, #8]
 8017a58:	2b03      	cmp	r3, #3
 8017a5a:	d856      	bhi.n	8017b0a <DMA_CheckFifoParam+0xce>
 8017a5c:	a201      	add	r2, pc, #4	; (adr r2, 8017a64 <DMA_CheckFifoParam+0x28>)
 8017a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a62:	bf00      	nop
 8017a64:	08017a75 	.word	0x08017a75
 8017a68:	08017a87 	.word	0x08017a87
 8017a6c:	08017a75 	.word	0x08017a75
 8017a70:	08017b0b 	.word	0x08017b0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d046      	beq.n	8017b0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8017a80:	2301      	movs	r3, #1
 8017a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017a84:	e043      	b.n	8017b0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017a8e:	d140      	bne.n	8017b12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8017a90:	2301      	movs	r3, #1
 8017a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017a94:	e03d      	b.n	8017b12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	699b      	ldr	r3, [r3, #24]
 8017a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017a9e:	d121      	bne.n	8017ae4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	2b03      	cmp	r3, #3
 8017aa4:	d837      	bhi.n	8017b16 <DMA_CheckFifoParam+0xda>
 8017aa6:	a201      	add	r2, pc, #4	; (adr r2, 8017aac <DMA_CheckFifoParam+0x70>)
 8017aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aac:	08017abd 	.word	0x08017abd
 8017ab0:	08017ac3 	.word	0x08017ac3
 8017ab4:	08017abd 	.word	0x08017abd
 8017ab8:	08017ad5 	.word	0x08017ad5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8017abc:	2301      	movs	r3, #1
 8017abe:	73fb      	strb	r3, [r7, #15]
      break;
 8017ac0:	e030      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d025      	beq.n	8017b1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8017ace:	2301      	movs	r3, #1
 8017ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017ad2:	e022      	b.n	8017b1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ad8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017adc:	d11f      	bne.n	8017b1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8017ade:	2301      	movs	r3, #1
 8017ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8017ae2:	e01c      	b.n	8017b1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	2b02      	cmp	r3, #2
 8017ae8:	d903      	bls.n	8017af2 <DMA_CheckFifoParam+0xb6>
 8017aea:	68bb      	ldr	r3, [r7, #8]
 8017aec:	2b03      	cmp	r3, #3
 8017aee:	d003      	beq.n	8017af8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8017af0:	e018      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8017af2:	2301      	movs	r3, #1
 8017af4:	73fb      	strb	r3, [r7, #15]
      break;
 8017af6:	e015      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d00e      	beq.n	8017b22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8017b04:	2301      	movs	r3, #1
 8017b06:	73fb      	strb	r3, [r7, #15]
      break;
 8017b08:	e00b      	b.n	8017b22 <DMA_CheckFifoParam+0xe6>
      break;
 8017b0a:	bf00      	nop
 8017b0c:	e00a      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      break;
 8017b0e:	bf00      	nop
 8017b10:	e008      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      break;
 8017b12:	bf00      	nop
 8017b14:	e006      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      break;
 8017b16:	bf00      	nop
 8017b18:	e004      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      break;
 8017b1a:	bf00      	nop
 8017b1c:	e002      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      break;   
 8017b1e:	bf00      	nop
 8017b20:	e000      	b.n	8017b24 <DMA_CheckFifoParam+0xe8>
      break;
 8017b22:	bf00      	nop
    }
  } 
  
  return status; 
 8017b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3714      	adds	r7, #20
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr
 8017b32:	bf00      	nop

08017b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017b34:	b480      	push	{r7}
 8017b36:	b089      	sub	sp, #36	; 0x24
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8017b42:	2300      	movs	r3, #0
 8017b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8017b46:	2300      	movs	r3, #0
 8017b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	61fb      	str	r3, [r7, #28]
 8017b4e:	e16b      	b.n	8017e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017b50:	2201      	movs	r2, #1
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	fa02 f303 	lsl.w	r3, r2, r3
 8017b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	697a      	ldr	r2, [r7, #20]
 8017b60:	4013      	ands	r3, r2
 8017b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017b64:	693a      	ldr	r2, [r7, #16]
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	f040 815a 	bne.w	8017e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	685b      	ldr	r3, [r3, #4]
 8017b72:	f003 0303 	and.w	r3, r3, #3
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d005      	beq.n	8017b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017b82:	2b02      	cmp	r3, #2
 8017b84:	d130      	bne.n	8017be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	689b      	ldr	r3, [r3, #8]
 8017b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	005b      	lsls	r3, r3, #1
 8017b90:	2203      	movs	r2, #3
 8017b92:	fa02 f303 	lsl.w	r3, r2, r3
 8017b96:	43db      	mvns	r3, r3
 8017b98:	69ba      	ldr	r2, [r7, #24]
 8017b9a:	4013      	ands	r3, r2
 8017b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	68da      	ldr	r2, [r3, #12]
 8017ba2:	69fb      	ldr	r3, [r7, #28]
 8017ba4:	005b      	lsls	r3, r3, #1
 8017ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8017baa:	69ba      	ldr	r2, [r7, #24]
 8017bac:	4313      	orrs	r3, r2
 8017bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	69ba      	ldr	r2, [r7, #24]
 8017bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017bbc:	2201      	movs	r2, #1
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8017bc4:	43db      	mvns	r3, r3
 8017bc6:	69ba      	ldr	r2, [r7, #24]
 8017bc8:	4013      	ands	r3, r2
 8017bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	685b      	ldr	r3, [r3, #4]
 8017bd0:	091b      	lsrs	r3, r3, #4
 8017bd2:	f003 0201 	and.w	r2, r3, #1
 8017bd6:	69fb      	ldr	r3, [r7, #28]
 8017bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8017bdc:	69ba      	ldr	r2, [r7, #24]
 8017bde:	4313      	orrs	r3, r2
 8017be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	69ba      	ldr	r2, [r7, #24]
 8017be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	685b      	ldr	r3, [r3, #4]
 8017bec:	f003 0303 	and.w	r3, r3, #3
 8017bf0:	2b03      	cmp	r3, #3
 8017bf2:	d017      	beq.n	8017c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	68db      	ldr	r3, [r3, #12]
 8017bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017bfa:	69fb      	ldr	r3, [r7, #28]
 8017bfc:	005b      	lsls	r3, r3, #1
 8017bfe:	2203      	movs	r2, #3
 8017c00:	fa02 f303 	lsl.w	r3, r2, r3
 8017c04:	43db      	mvns	r3, r3
 8017c06:	69ba      	ldr	r2, [r7, #24]
 8017c08:	4013      	ands	r3, r2
 8017c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	689a      	ldr	r2, [r3, #8]
 8017c10:	69fb      	ldr	r3, [r7, #28]
 8017c12:	005b      	lsls	r3, r3, #1
 8017c14:	fa02 f303 	lsl.w	r3, r2, r3
 8017c18:	69ba      	ldr	r2, [r7, #24]
 8017c1a:	4313      	orrs	r3, r2
 8017c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	69ba      	ldr	r2, [r7, #24]
 8017c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	685b      	ldr	r3, [r3, #4]
 8017c28:	f003 0303 	and.w	r3, r3, #3
 8017c2c:	2b02      	cmp	r3, #2
 8017c2e:	d123      	bne.n	8017c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8017c30:	69fb      	ldr	r3, [r7, #28]
 8017c32:	08da      	lsrs	r2, r3, #3
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	3208      	adds	r2, #8
 8017c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017c3e:	69fb      	ldr	r3, [r7, #28]
 8017c40:	f003 0307 	and.w	r3, r3, #7
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	220f      	movs	r2, #15
 8017c48:	fa02 f303 	lsl.w	r3, r2, r3
 8017c4c:	43db      	mvns	r3, r3
 8017c4e:	69ba      	ldr	r2, [r7, #24]
 8017c50:	4013      	ands	r3, r2
 8017c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	691a      	ldr	r2, [r3, #16]
 8017c58:	69fb      	ldr	r3, [r7, #28]
 8017c5a:	f003 0307 	and.w	r3, r3, #7
 8017c5e:	009b      	lsls	r3, r3, #2
 8017c60:	fa02 f303 	lsl.w	r3, r2, r3
 8017c64:	69ba      	ldr	r2, [r7, #24]
 8017c66:	4313      	orrs	r3, r2
 8017c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	08da      	lsrs	r2, r3, #3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	3208      	adds	r2, #8
 8017c72:	69b9      	ldr	r1, [r7, #24]
 8017c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017c7e:	69fb      	ldr	r3, [r7, #28]
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	2203      	movs	r2, #3
 8017c84:	fa02 f303 	lsl.w	r3, r2, r3
 8017c88:	43db      	mvns	r3, r3
 8017c8a:	69ba      	ldr	r2, [r7, #24]
 8017c8c:	4013      	ands	r3, r2
 8017c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017c90:	683b      	ldr	r3, [r7, #0]
 8017c92:	685b      	ldr	r3, [r3, #4]
 8017c94:	f003 0203 	and.w	r2, r3, #3
 8017c98:	69fb      	ldr	r3, [r7, #28]
 8017c9a:	005b      	lsls	r3, r3, #1
 8017c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8017ca0:	69ba      	ldr	r2, [r7, #24]
 8017ca2:	4313      	orrs	r3, r2
 8017ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	69ba      	ldr	r2, [r7, #24]
 8017caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	f000 80b4 	beq.w	8017e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017cba:	2300      	movs	r3, #0
 8017cbc:	60fb      	str	r3, [r7, #12]
 8017cbe:	4b60      	ldr	r3, [pc, #384]	; (8017e40 <HAL_GPIO_Init+0x30c>)
 8017cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cc2:	4a5f      	ldr	r2, [pc, #380]	; (8017e40 <HAL_GPIO_Init+0x30c>)
 8017cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8017cca:	4b5d      	ldr	r3, [pc, #372]	; (8017e40 <HAL_GPIO_Init+0x30c>)
 8017ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017cd2:	60fb      	str	r3, [r7, #12]
 8017cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8017cd6:	4a5b      	ldr	r2, [pc, #364]	; (8017e44 <HAL_GPIO_Init+0x310>)
 8017cd8:	69fb      	ldr	r3, [r7, #28]
 8017cda:	089b      	lsrs	r3, r3, #2
 8017cdc:	3302      	adds	r3, #2
 8017cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	f003 0303 	and.w	r3, r3, #3
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	220f      	movs	r2, #15
 8017cee:	fa02 f303 	lsl.w	r3, r2, r3
 8017cf2:	43db      	mvns	r3, r3
 8017cf4:	69ba      	ldr	r2, [r7, #24]
 8017cf6:	4013      	ands	r3, r2
 8017cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	4a52      	ldr	r2, [pc, #328]	; (8017e48 <HAL_GPIO_Init+0x314>)
 8017cfe:	4293      	cmp	r3, r2
 8017d00:	d02b      	beq.n	8017d5a <HAL_GPIO_Init+0x226>
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	4a51      	ldr	r2, [pc, #324]	; (8017e4c <HAL_GPIO_Init+0x318>)
 8017d06:	4293      	cmp	r3, r2
 8017d08:	d025      	beq.n	8017d56 <HAL_GPIO_Init+0x222>
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	4a50      	ldr	r2, [pc, #320]	; (8017e50 <HAL_GPIO_Init+0x31c>)
 8017d0e:	4293      	cmp	r3, r2
 8017d10:	d01f      	beq.n	8017d52 <HAL_GPIO_Init+0x21e>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	4a4f      	ldr	r2, [pc, #316]	; (8017e54 <HAL_GPIO_Init+0x320>)
 8017d16:	4293      	cmp	r3, r2
 8017d18:	d019      	beq.n	8017d4e <HAL_GPIO_Init+0x21a>
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	4a4e      	ldr	r2, [pc, #312]	; (8017e58 <HAL_GPIO_Init+0x324>)
 8017d1e:	4293      	cmp	r3, r2
 8017d20:	d013      	beq.n	8017d4a <HAL_GPIO_Init+0x216>
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	4a4d      	ldr	r2, [pc, #308]	; (8017e5c <HAL_GPIO_Init+0x328>)
 8017d26:	4293      	cmp	r3, r2
 8017d28:	d00d      	beq.n	8017d46 <HAL_GPIO_Init+0x212>
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	4a4c      	ldr	r2, [pc, #304]	; (8017e60 <HAL_GPIO_Init+0x32c>)
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d007      	beq.n	8017d42 <HAL_GPIO_Init+0x20e>
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	4a4b      	ldr	r2, [pc, #300]	; (8017e64 <HAL_GPIO_Init+0x330>)
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d101      	bne.n	8017d3e <HAL_GPIO_Init+0x20a>
 8017d3a:	2307      	movs	r3, #7
 8017d3c:	e00e      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d3e:	2308      	movs	r3, #8
 8017d40:	e00c      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d42:	2306      	movs	r3, #6
 8017d44:	e00a      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d46:	2305      	movs	r3, #5
 8017d48:	e008      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d4a:	2304      	movs	r3, #4
 8017d4c:	e006      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d4e:	2303      	movs	r3, #3
 8017d50:	e004      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d52:	2302      	movs	r3, #2
 8017d54:	e002      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d56:	2301      	movs	r3, #1
 8017d58:	e000      	b.n	8017d5c <HAL_GPIO_Init+0x228>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	69fa      	ldr	r2, [r7, #28]
 8017d5e:	f002 0203 	and.w	r2, r2, #3
 8017d62:	0092      	lsls	r2, r2, #2
 8017d64:	4093      	lsls	r3, r2
 8017d66:	69ba      	ldr	r2, [r7, #24]
 8017d68:	4313      	orrs	r3, r2
 8017d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017d6c:	4935      	ldr	r1, [pc, #212]	; (8017e44 <HAL_GPIO_Init+0x310>)
 8017d6e:	69fb      	ldr	r3, [r7, #28]
 8017d70:	089b      	lsrs	r3, r3, #2
 8017d72:	3302      	adds	r3, #2
 8017d74:	69ba      	ldr	r2, [r7, #24]
 8017d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017d7a:	4b3b      	ldr	r3, [pc, #236]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017d7c:	689b      	ldr	r3, [r3, #8]
 8017d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	43db      	mvns	r3, r3
 8017d84:	69ba      	ldr	r2, [r7, #24]
 8017d86:	4013      	ands	r3, r2
 8017d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	685b      	ldr	r3, [r3, #4]
 8017d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d003      	beq.n	8017d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8017d96:	69ba      	ldr	r2, [r7, #24]
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	4313      	orrs	r3, r2
 8017d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017d9e:	4a32      	ldr	r2, [pc, #200]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017da0:	69bb      	ldr	r3, [r7, #24]
 8017da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017da4:	4b30      	ldr	r3, [pc, #192]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017da6:	68db      	ldr	r3, [r3, #12]
 8017da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017daa:	693b      	ldr	r3, [r7, #16]
 8017dac:	43db      	mvns	r3, r3
 8017dae:	69ba      	ldr	r2, [r7, #24]
 8017db0:	4013      	ands	r3, r2
 8017db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d003      	beq.n	8017dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8017dc0:	69ba      	ldr	r2, [r7, #24]
 8017dc2:	693b      	ldr	r3, [r7, #16]
 8017dc4:	4313      	orrs	r3, r2
 8017dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017dc8:	4a27      	ldr	r2, [pc, #156]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017dce:	4b26      	ldr	r3, [pc, #152]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017dd0:	685b      	ldr	r3, [r3, #4]
 8017dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	43db      	mvns	r3, r3
 8017dd8:	69ba      	ldr	r2, [r7, #24]
 8017dda:	4013      	ands	r3, r2
 8017ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d003      	beq.n	8017df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8017dea:	69ba      	ldr	r2, [r7, #24]
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	4313      	orrs	r3, r2
 8017df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017df2:	4a1d      	ldr	r2, [pc, #116]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017df4:	69bb      	ldr	r3, [r7, #24]
 8017df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017df8:	4b1b      	ldr	r3, [pc, #108]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	43db      	mvns	r3, r3
 8017e02:	69ba      	ldr	r2, [r7, #24]
 8017e04:	4013      	ands	r3, r2
 8017e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d003      	beq.n	8017e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8017e14:	69ba      	ldr	r2, [r7, #24]
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	4313      	orrs	r3, r2
 8017e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017e1c:	4a12      	ldr	r2, [pc, #72]	; (8017e68 <HAL_GPIO_Init+0x334>)
 8017e1e:	69bb      	ldr	r3, [r7, #24]
 8017e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017e22:	69fb      	ldr	r3, [r7, #28]
 8017e24:	3301      	adds	r3, #1
 8017e26:	61fb      	str	r3, [r7, #28]
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	2b0f      	cmp	r3, #15
 8017e2c:	f67f ae90 	bls.w	8017b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8017e30:	bf00      	nop
 8017e32:	bf00      	nop
 8017e34:	3724      	adds	r7, #36	; 0x24
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr
 8017e3e:	bf00      	nop
 8017e40:	40023800 	.word	0x40023800
 8017e44:	40013800 	.word	0x40013800
 8017e48:	40020000 	.word	0x40020000
 8017e4c:	40020400 	.word	0x40020400
 8017e50:	40020800 	.word	0x40020800
 8017e54:	40020c00 	.word	0x40020c00
 8017e58:	40021000 	.word	0x40021000
 8017e5c:	40021400 	.word	0x40021400
 8017e60:	40021800 	.word	0x40021800
 8017e64:	40021c00 	.word	0x40021c00
 8017e68:	40013c00 	.word	0x40013c00

08017e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017e6c:	b480      	push	{r7}
 8017e6e:	b083      	sub	sp, #12
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
 8017e74:	460b      	mov	r3, r1
 8017e76:	807b      	strh	r3, [r7, #2]
 8017e78:	4613      	mov	r3, r2
 8017e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017e7c:	787b      	ldrb	r3, [r7, #1]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d003      	beq.n	8017e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017e82:	887a      	ldrh	r2, [r7, #2]
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8017e88:	e003      	b.n	8017e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8017e8a:	887b      	ldrh	r3, [r7, #2]
 8017e8c:	041a      	lsls	r2, r3, #16
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	619a      	str	r2, [r3, #24]
}
 8017e92:	bf00      	nop
 8017e94:	370c      	adds	r7, #12
 8017e96:	46bd      	mov	sp, r7
 8017e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9c:	4770      	bx	lr

08017e9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017e9e:	b580      	push	{r7, lr}
 8017ea0:	b086      	sub	sp, #24
 8017ea2:	af02      	add	r7, sp, #8
 8017ea4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d101      	bne.n	8017eb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017eac:	2301      	movs	r3, #1
 8017eae:	e101      	b.n	80180b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d106      	bne.n	8017ed0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f00b f904 	bl	80230d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2203      	movs	r2, #3
 8017ed4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ede:	d102      	bne.n	8017ee6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f004 f99b 	bl	801c226 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	6818      	ldr	r0, [r3, #0]
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	7c1a      	ldrb	r2, [r3, #16]
 8017ef8:	f88d 2000 	strb.w	r2, [sp]
 8017efc:	3304      	adds	r3, #4
 8017efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017f00:	f004 f87a 	bl	801bff8 <USB_CoreInit>
 8017f04:	4603      	mov	r3, r0
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d005      	beq.n	8017f16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	2202      	movs	r2, #2
 8017f0e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8017f12:	2301      	movs	r3, #1
 8017f14:	e0ce      	b.n	80180b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	2100      	movs	r1, #0
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f004 f993 	bl	801c248 <USB_SetCurrentMode>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d005      	beq.n	8017f34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	2202      	movs	r2, #2
 8017f2c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8017f30:	2301      	movs	r3, #1
 8017f32:	e0bf      	b.n	80180b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017f34:	2300      	movs	r3, #0
 8017f36:	73fb      	strb	r3, [r7, #15]
 8017f38:	e04a      	b.n	8017fd0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017f3a:	7bfa      	ldrb	r2, [r7, #15]
 8017f3c:	6879      	ldr	r1, [r7, #4]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	00db      	lsls	r3, r3, #3
 8017f42:	4413      	add	r3, r2
 8017f44:	009b      	lsls	r3, r3, #2
 8017f46:	440b      	add	r3, r1
 8017f48:	3315      	adds	r3, #21
 8017f4a:	2201      	movs	r2, #1
 8017f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017f4e:	7bfa      	ldrb	r2, [r7, #15]
 8017f50:	6879      	ldr	r1, [r7, #4]
 8017f52:	4613      	mov	r3, r2
 8017f54:	00db      	lsls	r3, r3, #3
 8017f56:	4413      	add	r3, r2
 8017f58:	009b      	lsls	r3, r3, #2
 8017f5a:	440b      	add	r3, r1
 8017f5c:	3314      	adds	r3, #20
 8017f5e:	7bfa      	ldrb	r2, [r7, #15]
 8017f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8017f62:	7bfa      	ldrb	r2, [r7, #15]
 8017f64:	7bfb      	ldrb	r3, [r7, #15]
 8017f66:	b298      	uxth	r0, r3
 8017f68:	6879      	ldr	r1, [r7, #4]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	00db      	lsls	r3, r3, #3
 8017f6e:	4413      	add	r3, r2
 8017f70:	009b      	lsls	r3, r3, #2
 8017f72:	440b      	add	r3, r1
 8017f74:	332e      	adds	r3, #46	; 0x2e
 8017f76:	4602      	mov	r2, r0
 8017f78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017f7a:	7bfa      	ldrb	r2, [r7, #15]
 8017f7c:	6879      	ldr	r1, [r7, #4]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	00db      	lsls	r3, r3, #3
 8017f82:	4413      	add	r3, r2
 8017f84:	009b      	lsls	r3, r3, #2
 8017f86:	440b      	add	r3, r1
 8017f88:	3318      	adds	r3, #24
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017f8e:	7bfa      	ldrb	r2, [r7, #15]
 8017f90:	6879      	ldr	r1, [r7, #4]
 8017f92:	4613      	mov	r3, r2
 8017f94:	00db      	lsls	r3, r3, #3
 8017f96:	4413      	add	r3, r2
 8017f98:	009b      	lsls	r3, r3, #2
 8017f9a:	440b      	add	r3, r1
 8017f9c:	331c      	adds	r3, #28
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017fa2:	7bfa      	ldrb	r2, [r7, #15]
 8017fa4:	6879      	ldr	r1, [r7, #4]
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	00db      	lsls	r3, r3, #3
 8017faa:	4413      	add	r3, r2
 8017fac:	009b      	lsls	r3, r3, #2
 8017fae:	440b      	add	r3, r1
 8017fb0:	3320      	adds	r3, #32
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017fb6:	7bfa      	ldrb	r2, [r7, #15]
 8017fb8:	6879      	ldr	r1, [r7, #4]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	00db      	lsls	r3, r3, #3
 8017fbe:	4413      	add	r3, r2
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	440b      	add	r3, r1
 8017fc4:	3324      	adds	r3, #36	; 0x24
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017fca:	7bfb      	ldrb	r3, [r7, #15]
 8017fcc:	3301      	adds	r3, #1
 8017fce:	73fb      	strb	r3, [r7, #15]
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	791b      	ldrb	r3, [r3, #4]
 8017fd4:	7bfa      	ldrb	r2, [r7, #15]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d3af      	bcc.n	8017f3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017fda:	2300      	movs	r3, #0
 8017fdc:	73fb      	strb	r3, [r7, #15]
 8017fde:	e044      	b.n	801806a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017fe0:	7bfa      	ldrb	r2, [r7, #15]
 8017fe2:	6879      	ldr	r1, [r7, #4]
 8017fe4:	4613      	mov	r3, r2
 8017fe6:	00db      	lsls	r3, r3, #3
 8017fe8:	4413      	add	r3, r2
 8017fea:	009b      	lsls	r3, r3, #2
 8017fec:	440b      	add	r3, r1
 8017fee:	f203 2355 	addw	r3, r3, #597	; 0x255
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017ff6:	7bfa      	ldrb	r2, [r7, #15]
 8017ff8:	6879      	ldr	r1, [r7, #4]
 8017ffa:	4613      	mov	r3, r2
 8017ffc:	00db      	lsls	r3, r3, #3
 8017ffe:	4413      	add	r3, r2
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	440b      	add	r3, r1
 8018004:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8018008:	7bfa      	ldrb	r2, [r7, #15]
 801800a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801800c:	7bfa      	ldrb	r2, [r7, #15]
 801800e:	6879      	ldr	r1, [r7, #4]
 8018010:	4613      	mov	r3, r2
 8018012:	00db      	lsls	r3, r3, #3
 8018014:	4413      	add	r3, r2
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	440b      	add	r3, r1
 801801a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801801e:	2200      	movs	r2, #0
 8018020:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8018022:	7bfa      	ldrb	r2, [r7, #15]
 8018024:	6879      	ldr	r1, [r7, #4]
 8018026:	4613      	mov	r3, r2
 8018028:	00db      	lsls	r3, r3, #3
 801802a:	4413      	add	r3, r2
 801802c:	009b      	lsls	r3, r3, #2
 801802e:	440b      	add	r3, r1
 8018030:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8018034:	2200      	movs	r2, #0
 8018036:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8018038:	7bfa      	ldrb	r2, [r7, #15]
 801803a:	6879      	ldr	r1, [r7, #4]
 801803c:	4613      	mov	r3, r2
 801803e:	00db      	lsls	r3, r3, #3
 8018040:	4413      	add	r3, r2
 8018042:	009b      	lsls	r3, r3, #2
 8018044:	440b      	add	r3, r1
 8018046:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801804a:	2200      	movs	r2, #0
 801804c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801804e:	7bfa      	ldrb	r2, [r7, #15]
 8018050:	6879      	ldr	r1, [r7, #4]
 8018052:	4613      	mov	r3, r2
 8018054:	00db      	lsls	r3, r3, #3
 8018056:	4413      	add	r3, r2
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	440b      	add	r3, r1
 801805c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8018060:	2200      	movs	r2, #0
 8018062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018064:	7bfb      	ldrb	r3, [r7, #15]
 8018066:	3301      	adds	r3, #1
 8018068:	73fb      	strb	r3, [r7, #15]
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	791b      	ldrb	r3, [r3, #4]
 801806e:	7bfa      	ldrb	r2, [r7, #15]
 8018070:	429a      	cmp	r2, r3
 8018072:	d3b5      	bcc.n	8017fe0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6818      	ldr	r0, [r3, #0]
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	7c1a      	ldrb	r2, [r3, #16]
 801807c:	f88d 2000 	strb.w	r2, [sp]
 8018080:	3304      	adds	r3, #4
 8018082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018084:	f004 f92c 	bl	801c2e0 <USB_DevInit>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d005      	beq.n	801809a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2202      	movs	r2, #2
 8018092:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8018096:	2301      	movs	r3, #1
 8018098:	e00c      	b.n	80180b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2200      	movs	r2, #0
 801809e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2201      	movs	r2, #1
 80180a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	4618      	mov	r0, r3
 80180ae:	f005 f970 	bl	801d392 <USB_DevDisconnect>

  return HAL_OK;
 80180b2:	2300      	movs	r3, #0
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3710      	adds	r7, #16
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	d101      	bne.n	80180d8 <HAL_PCD_Start+0x1c>
 80180d4:	2302      	movs	r3, #2
 80180d6:	e022      	b.n	801811e <HAL_PCD_Start+0x62>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2201      	movs	r2, #1
 80180dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	68db      	ldr	r3, [r3, #12]
 80180e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d009      	beq.n	8018100 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80180f0:	2b01      	cmp	r3, #1
 80180f2:	d105      	bne.n	8018100 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	4618      	mov	r0, r3
 8018106:	f004 f87d 	bl	801c204 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	4618      	mov	r0, r3
 8018110:	f005 f91e 	bl	801d350 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2200      	movs	r2, #0
 8018118:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 801811c:	2300      	movs	r3, #0
}
 801811e:	4618      	mov	r0, r3
 8018120:	3710      	adds	r7, #16
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}

08018126 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018126:	b590      	push	{r4, r7, lr}
 8018128:	b08d      	sub	sp, #52	; 0x34
 801812a:	af00      	add	r7, sp, #0
 801812c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018134:	6a3b      	ldr	r3, [r7, #32]
 8018136:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	4618      	mov	r0, r3
 801813e:	f005 f9dc 	bl	801d4fa <USB_GetMode>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	f040 848c 	bne.w	8018a62 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	4618      	mov	r0, r3
 8018150:	f005 f940 	bl	801d3d4 <USB_ReadInterrupts>
 8018154:	4603      	mov	r3, r0
 8018156:	2b00      	cmp	r3, #0
 8018158:	f000 8482 	beq.w	8018a60 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801815c:	69fb      	ldr	r3, [r7, #28]
 801815e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018162:	689b      	ldr	r3, [r3, #8]
 8018164:	0a1b      	lsrs	r3, r3, #8
 8018166:	f3c3 020d 	ubfx	r2, r3, #0, #14
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4618      	mov	r0, r3
 8018176:	f005 f92d 	bl	801d3d4 <USB_ReadInterrupts>
 801817a:	4603      	mov	r3, r0
 801817c:	f003 0302 	and.w	r3, r3, #2
 8018180:	2b02      	cmp	r3, #2
 8018182:	d107      	bne.n	8018194 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	695a      	ldr	r2, [r3, #20]
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	f002 0202 	and.w	r2, r2, #2
 8018192:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4618      	mov	r0, r3
 801819a:	f005 f91b 	bl	801d3d4 <USB_ReadInterrupts>
 801819e:	4603      	mov	r3, r0
 80181a0:	f003 0310 	and.w	r3, r3, #16
 80181a4:	2b10      	cmp	r3, #16
 80181a6:	d161      	bne.n	801826c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	699a      	ldr	r2, [r3, #24]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	f022 0210 	bic.w	r2, r2, #16
 80181b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80181b8:	6a3b      	ldr	r3, [r7, #32]
 80181ba:	6a1b      	ldr	r3, [r3, #32]
 80181bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	f003 020f 	and.w	r2, r3, #15
 80181c4:	4613      	mov	r3, r2
 80181c6:	00db      	lsls	r3, r3, #3
 80181c8:	4413      	add	r3, r2
 80181ca:	009b      	lsls	r3, r3, #2
 80181cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80181d0:	687a      	ldr	r2, [r7, #4]
 80181d2:	4413      	add	r3, r2
 80181d4:	3304      	adds	r3, #4
 80181d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	0c5b      	lsrs	r3, r3, #17
 80181dc:	f003 030f 	and.w	r3, r3, #15
 80181e0:	2b02      	cmp	r3, #2
 80181e2:	d124      	bne.n	801822e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80181e4:	69ba      	ldr	r2, [r7, #24]
 80181e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80181ea:	4013      	ands	r3, r2
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d035      	beq.n	801825c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	091b      	lsrs	r3, r3, #4
 80181f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80181fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80181fe:	b29b      	uxth	r3, r3
 8018200:	461a      	mov	r2, r3
 8018202:	6a38      	ldr	r0, [r7, #32]
 8018204:	f004 ff52 	bl	801d0ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8018208:	697b      	ldr	r3, [r7, #20]
 801820a:	68da      	ldr	r2, [r3, #12]
 801820c:	69bb      	ldr	r3, [r7, #24]
 801820e:	091b      	lsrs	r3, r3, #4
 8018210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018214:	441a      	add	r2, r3
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801821a:	697b      	ldr	r3, [r7, #20]
 801821c:	695a      	ldr	r2, [r3, #20]
 801821e:	69bb      	ldr	r3, [r7, #24]
 8018220:	091b      	lsrs	r3, r3, #4
 8018222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018226:	441a      	add	r2, r3
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	615a      	str	r2, [r3, #20]
 801822c:	e016      	b.n	801825c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 801822e:	69bb      	ldr	r3, [r7, #24]
 8018230:	0c5b      	lsrs	r3, r3, #17
 8018232:	f003 030f 	and.w	r3, r3, #15
 8018236:	2b06      	cmp	r3, #6
 8018238:	d110      	bne.n	801825c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8018240:	2208      	movs	r2, #8
 8018242:	4619      	mov	r1, r3
 8018244:	6a38      	ldr	r0, [r7, #32]
 8018246:	f004 ff31 	bl	801d0ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801824a:	697b      	ldr	r3, [r7, #20]
 801824c:	695a      	ldr	r2, [r3, #20]
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	091b      	lsrs	r3, r3, #4
 8018252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018256:	441a      	add	r2, r3
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	699a      	ldr	r2, [r3, #24]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	f042 0210 	orr.w	r2, r2, #16
 801826a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4618      	mov	r0, r3
 8018272:	f005 f8af 	bl	801d3d4 <USB_ReadInterrupts>
 8018276:	4603      	mov	r3, r0
 8018278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801827c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8018280:	f040 80a7 	bne.w	80183d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8018284:	2300      	movs	r3, #0
 8018286:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	4618      	mov	r0, r3
 801828e:	f005 f8b4 	bl	801d3fa <USB_ReadDevAllOutEpInterrupt>
 8018292:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8018294:	e099      	b.n	80183ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8018296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018298:	f003 0301 	and.w	r3, r3, #1
 801829c:	2b00      	cmp	r3, #0
 801829e:	f000 808e 	beq.w	80183be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182a8:	b2d2      	uxtb	r2, r2
 80182aa:	4611      	mov	r1, r2
 80182ac:	4618      	mov	r0, r3
 80182ae:	f005 f8d8 	bl	801d462 <USB_ReadDevOutEPInterrupt>
 80182b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80182b4:	693b      	ldr	r3, [r7, #16]
 80182b6:	f003 0301 	and.w	r3, r3, #1
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d00c      	beq.n	80182d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80182be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182c0:	015a      	lsls	r2, r3, #5
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	4413      	add	r3, r2
 80182c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80182ca:	461a      	mov	r2, r3
 80182cc:	2301      	movs	r3, #1
 80182ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80182d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182d2:	6878      	ldr	r0, [r7, #4]
 80182d4:	f000 fea2 	bl	801901c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	f003 0308 	and.w	r3, r3, #8
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d00c      	beq.n	80182fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80182e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e4:	015a      	lsls	r2, r3, #5
 80182e6:	69fb      	ldr	r3, [r7, #28]
 80182e8:	4413      	add	r3, r2
 80182ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80182ee:	461a      	mov	r2, r3
 80182f0:	2308      	movs	r3, #8
 80182f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80182f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f000 ff78 	bl	80191ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	f003 0310 	and.w	r3, r3, #16
 8018302:	2b00      	cmp	r3, #0
 8018304:	d008      	beq.n	8018318 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8018306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018308:	015a      	lsls	r2, r3, #5
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	4413      	add	r3, r2
 801830e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018312:	461a      	mov	r2, r3
 8018314:	2310      	movs	r3, #16
 8018316:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	f003 0302 	and.w	r3, r3, #2
 801831e:	2b00      	cmp	r3, #0
 8018320:	d030      	beq.n	8018384 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8018322:	6a3b      	ldr	r3, [r7, #32]
 8018324:	695b      	ldr	r3, [r3, #20]
 8018326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801832a:	2b80      	cmp	r3, #128	; 0x80
 801832c:	d109      	bne.n	8018342 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 801832e:	69fb      	ldr	r3, [r7, #28]
 8018330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	69fa      	ldr	r2, [r7, #28]
 8018338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801833c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018340:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8018342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018344:	4613      	mov	r3, r2
 8018346:	00db      	lsls	r3, r3, #3
 8018348:	4413      	add	r3, r2
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	4413      	add	r3, r2
 8018354:	3304      	adds	r3, #4
 8018356:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8018358:	697b      	ldr	r3, [r7, #20]
 801835a:	78db      	ldrb	r3, [r3, #3]
 801835c:	2b01      	cmp	r3, #1
 801835e:	d108      	bne.n	8018372 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8018360:	697b      	ldr	r3, [r7, #20]
 8018362:	2200      	movs	r2, #0
 8018364:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8018366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018368:	b2db      	uxtb	r3, r3
 801836a:	4619      	mov	r1, r3
 801836c:	6878      	ldr	r0, [r7, #4]
 801836e:	f00a ffb9 	bl	80232e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8018372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018374:	015a      	lsls	r2, r3, #5
 8018376:	69fb      	ldr	r3, [r7, #28]
 8018378:	4413      	add	r3, r2
 801837a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801837e:	461a      	mov	r2, r3
 8018380:	2302      	movs	r3, #2
 8018382:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8018384:	693b      	ldr	r3, [r7, #16]
 8018386:	f003 0320 	and.w	r3, r3, #32
 801838a:	2b00      	cmp	r3, #0
 801838c:	d008      	beq.n	80183a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018390:	015a      	lsls	r2, r3, #5
 8018392:	69fb      	ldr	r3, [r7, #28]
 8018394:	4413      	add	r3, r2
 8018396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801839a:	461a      	mov	r2, r3
 801839c:	2320      	movs	r3, #32
 801839e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d009      	beq.n	80183be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80183aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ac:	015a      	lsls	r2, r3, #5
 80183ae:	69fb      	ldr	r3, [r7, #28]
 80183b0:	4413      	add	r3, r2
 80183b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80183b6:	461a      	mov	r2, r3
 80183b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80183bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80183be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c0:	3301      	adds	r3, #1
 80183c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80183c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c6:	085b      	lsrs	r3, r3, #1
 80183c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80183ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	f47f af62 	bne.w	8018296 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	4618      	mov	r0, r3
 80183d8:	f004 fffc 	bl	801d3d4 <USB_ReadInterrupts>
 80183dc:	4603      	mov	r3, r0
 80183de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80183e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80183e6:	f040 80db 	bne.w	80185a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f005 f81d 	bl	801d42e <USB_ReadDevAllInEpInterrupt>
 80183f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80183f6:	2300      	movs	r3, #0
 80183f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80183fa:	e0cd      	b.n	8018598 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80183fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fe:	f003 0301 	and.w	r3, r3, #1
 8018402:	2b00      	cmp	r3, #0
 8018404:	f000 80c2 	beq.w	801858c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801840e:	b2d2      	uxtb	r2, r2
 8018410:	4611      	mov	r1, r2
 8018412:	4618      	mov	r0, r3
 8018414:	f005 f843 	bl	801d49e <USB_ReadDevInEPInterrupt>
 8018418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	f003 0301 	and.w	r3, r3, #1
 8018420:	2b00      	cmp	r3, #0
 8018422:	d057      	beq.n	80184d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	f003 030f 	and.w	r3, r3, #15
 801842a:	2201      	movs	r2, #1
 801842c:	fa02 f303 	lsl.w	r3, r2, r3
 8018430:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	43db      	mvns	r3, r3
 801843e:	69f9      	ldr	r1, [r7, #28]
 8018440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018444:	4013      	ands	r3, r2
 8018446:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8018448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844a:	015a      	lsls	r2, r3, #5
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	4413      	add	r3, r2
 8018450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018454:	461a      	mov	r2, r3
 8018456:	2301      	movs	r3, #1
 8018458:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	799b      	ldrb	r3, [r3, #6]
 801845e:	2b01      	cmp	r3, #1
 8018460:	d132      	bne.n	80184c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8018462:	6879      	ldr	r1, [r7, #4]
 8018464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018466:	4613      	mov	r3, r2
 8018468:	00db      	lsls	r3, r3, #3
 801846a:	4413      	add	r3, r2
 801846c:	009b      	lsls	r3, r3, #2
 801846e:	440b      	add	r3, r1
 8018470:	3320      	adds	r3, #32
 8018472:	6819      	ldr	r1, [r3, #0]
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018478:	4613      	mov	r3, r2
 801847a:	00db      	lsls	r3, r3, #3
 801847c:	4413      	add	r3, r2
 801847e:	009b      	lsls	r3, r3, #2
 8018480:	4403      	add	r3, r0
 8018482:	331c      	adds	r3, #28
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4419      	add	r1, r3
 8018488:	6878      	ldr	r0, [r7, #4]
 801848a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801848c:	4613      	mov	r3, r2
 801848e:	00db      	lsls	r3, r3, #3
 8018490:	4413      	add	r3, r2
 8018492:	009b      	lsls	r3, r3, #2
 8018494:	4403      	add	r3, r0
 8018496:	3320      	adds	r3, #32
 8018498:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849c:	2b00      	cmp	r3, #0
 801849e:	d113      	bne.n	80184c8 <HAL_PCD_IRQHandler+0x3a2>
 80184a0:	6879      	ldr	r1, [r7, #4]
 80184a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184a4:	4613      	mov	r3, r2
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	4413      	add	r3, r2
 80184aa:	009b      	lsls	r3, r3, #2
 80184ac:	440b      	add	r3, r1
 80184ae:	3324      	adds	r3, #36	; 0x24
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d108      	bne.n	80184c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6818      	ldr	r0, [r3, #0]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80184c0:	461a      	mov	r2, r3
 80184c2:	2101      	movs	r1, #1
 80184c4:	f005 f84a 	bl	801d55c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80184c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ca:	b2db      	uxtb	r3, r3
 80184cc:	4619      	mov	r1, r3
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f00a fe83 	bl	80231da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80184d4:	693b      	ldr	r3, [r7, #16]
 80184d6:	f003 0308 	and.w	r3, r3, #8
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d008      	beq.n	80184f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80184de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e0:	015a      	lsls	r2, r3, #5
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	4413      	add	r3, r2
 80184e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80184ea:	461a      	mov	r2, r3
 80184ec:	2308      	movs	r3, #8
 80184ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80184f0:	693b      	ldr	r3, [r7, #16]
 80184f2:	f003 0310 	and.w	r3, r3, #16
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d008      	beq.n	801850c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80184fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184fc:	015a      	lsls	r2, r3, #5
 80184fe:	69fb      	ldr	r3, [r7, #28]
 8018500:	4413      	add	r3, r2
 8018502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018506:	461a      	mov	r2, r3
 8018508:	2310      	movs	r3, #16
 801850a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801850c:	693b      	ldr	r3, [r7, #16]
 801850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018512:	2b00      	cmp	r3, #0
 8018514:	d008      	beq.n	8018528 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8018516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018518:	015a      	lsls	r2, r3, #5
 801851a:	69fb      	ldr	r3, [r7, #28]
 801851c:	4413      	add	r3, r2
 801851e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018522:	461a      	mov	r2, r3
 8018524:	2340      	movs	r3, #64	; 0x40
 8018526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	f003 0302 	and.w	r3, r3, #2
 801852e:	2b00      	cmp	r3, #0
 8018530:	d023      	beq.n	801857a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8018532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018534:	6a38      	ldr	r0, [r7, #32]
 8018536:	f004 f837 	bl	801c5a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 801853a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801853c:	4613      	mov	r3, r2
 801853e:	00db      	lsls	r3, r3, #3
 8018540:	4413      	add	r3, r2
 8018542:	009b      	lsls	r3, r3, #2
 8018544:	3310      	adds	r3, #16
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	4413      	add	r3, r2
 801854a:	3304      	adds	r3, #4
 801854c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	78db      	ldrb	r3, [r3, #3]
 8018552:	2b01      	cmp	r3, #1
 8018554:	d108      	bne.n	8018568 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	2200      	movs	r2, #0
 801855a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855e:	b2db      	uxtb	r3, r3
 8018560:	4619      	mov	r1, r3
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	f00a fed0 	bl	8023308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8018568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856a:	015a      	lsls	r2, r3, #5
 801856c:	69fb      	ldr	r3, [r7, #28]
 801856e:	4413      	add	r3, r2
 8018570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018574:	461a      	mov	r2, r3
 8018576:	2302      	movs	r3, #2
 8018578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801857a:	693b      	ldr	r3, [r7, #16]
 801857c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018580:	2b00      	cmp	r3, #0
 8018582:	d003      	beq.n	801858c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8018584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018586:	6878      	ldr	r0, [r7, #4]
 8018588:	f000 fcbb 	bl	8018f02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801858e:	3301      	adds	r3, #1
 8018590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8018592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018594:	085b      	lsrs	r3, r3, #1
 8018596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8018598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801859a:	2b00      	cmp	r3, #0
 801859c:	f47f af2e 	bne.w	80183fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4618      	mov	r0, r3
 80185a6:	f004 ff15 	bl	801d3d4 <USB_ReadInterrupts>
 80185aa:	4603      	mov	r3, r0
 80185ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80185b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80185b4:	d122      	bne.n	80185fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80185bc:	685b      	ldr	r3, [r3, #4]
 80185be:	69fa      	ldr	r2, [r7, #28]
 80185c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80185c4:	f023 0301 	bic.w	r3, r3, #1
 80185c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80185d0:	2b01      	cmp	r3, #1
 80185d2:	d108      	bne.n	80185e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2200      	movs	r2, #0
 80185d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80185dc:	2100      	movs	r1, #0
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	f000 fea2 	bl	8019328 <HAL_PCDEx_LPM_Callback>
 80185e4:	e002      	b.n	80185ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f00a fe6e 	bl	80232c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	695a      	ldr	r2, [r3, #20]
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80185fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	4618      	mov	r0, r3
 8018602:	f004 fee7 	bl	801d3d4 <USB_ReadInterrupts>
 8018606:	4603      	mov	r3, r0
 8018608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801860c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018610:	d112      	bne.n	8018638 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8018612:	69fb      	ldr	r3, [r7, #28]
 8018614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018618:	689b      	ldr	r3, [r3, #8]
 801861a:	f003 0301 	and.w	r3, r3, #1
 801861e:	2b01      	cmp	r3, #1
 8018620:	d102      	bne.n	8018628 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8018622:	6878      	ldr	r0, [r7, #4]
 8018624:	f00a fe2a 	bl	802327c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	695a      	ldr	r2, [r3, #20]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8018636:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	4618      	mov	r0, r3
 801863e:	f004 fec9 	bl	801d3d4 <USB_ReadInterrupts>
 8018642:	4603      	mov	r3, r0
 8018644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801864c:	f040 80b7 	bne.w	80187be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8018650:	69fb      	ldr	r3, [r7, #28]
 8018652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	69fa      	ldr	r2, [r7, #28]
 801865a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801865e:	f023 0301 	bic.w	r3, r3, #1
 8018662:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	2110      	movs	r1, #16
 801866a:	4618      	mov	r0, r3
 801866c:	f003 ff9c 	bl	801c5a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018670:	2300      	movs	r3, #0
 8018672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018674:	e046      	b.n	8018704 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8018676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018678:	015a      	lsls	r2, r3, #5
 801867a:	69fb      	ldr	r3, [r7, #28]
 801867c:	4413      	add	r3, r2
 801867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018682:	461a      	mov	r2, r3
 8018684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018688:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801868c:	015a      	lsls	r2, r3, #5
 801868e:	69fb      	ldr	r3, [r7, #28]
 8018690:	4413      	add	r3, r2
 8018692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801869a:	0151      	lsls	r1, r2, #5
 801869c:	69fa      	ldr	r2, [r7, #28]
 801869e:	440a      	add	r2, r1
 80186a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80186a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80186a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80186aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ac:	015a      	lsls	r2, r3, #5
 80186ae:	69fb      	ldr	r3, [r7, #28]
 80186b0:	4413      	add	r3, r2
 80186b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80186b6:	461a      	mov	r2, r3
 80186b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80186bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80186be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c0:	015a      	lsls	r2, r3, #5
 80186c2:	69fb      	ldr	r3, [r7, #28]
 80186c4:	4413      	add	r3, r2
 80186c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186ce:	0151      	lsls	r1, r2, #5
 80186d0:	69fa      	ldr	r2, [r7, #28]
 80186d2:	440a      	add	r2, r1
 80186d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80186d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80186dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80186de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e0:	015a      	lsls	r2, r3, #5
 80186e2:	69fb      	ldr	r3, [r7, #28]
 80186e4:	4413      	add	r3, r2
 80186e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186ee:	0151      	lsls	r1, r2, #5
 80186f0:	69fa      	ldr	r2, [r7, #28]
 80186f2:	440a      	add	r2, r1
 80186f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80186f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80186fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80186fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018700:	3301      	adds	r3, #1
 8018702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	791b      	ldrb	r3, [r3, #4]
 8018708:	461a      	mov	r2, r3
 801870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801870c:	4293      	cmp	r3, r2
 801870e:	d3b2      	bcc.n	8018676 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8018710:	69fb      	ldr	r3, [r7, #28]
 8018712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018716:	69db      	ldr	r3, [r3, #28]
 8018718:	69fa      	ldr	r2, [r7, #28]
 801871a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801871e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8018722:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	7bdb      	ldrb	r3, [r3, #15]
 8018728:	2b00      	cmp	r3, #0
 801872a:	d016      	beq.n	801875a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018736:	69fa      	ldr	r2, [r7, #28]
 8018738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801873c:	f043 030b 	orr.w	r3, r3, #11
 8018740:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8018744:	69fb      	ldr	r3, [r7, #28]
 8018746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801874a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801874c:	69fa      	ldr	r2, [r7, #28]
 801874e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018752:	f043 030b 	orr.w	r3, r3, #11
 8018756:	6453      	str	r3, [r2, #68]	; 0x44
 8018758:	e015      	b.n	8018786 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801875a:	69fb      	ldr	r3, [r7, #28]
 801875c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018760:	695b      	ldr	r3, [r3, #20]
 8018762:	69fa      	ldr	r2, [r7, #28]
 8018764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801876c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8018770:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018778:	691b      	ldr	r3, [r3, #16]
 801877a:	69fa      	ldr	r2, [r7, #28]
 801877c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018780:	f043 030b 	orr.w	r3, r3, #11
 8018784:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	69fa      	ldr	r2, [r7, #28]
 8018790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018794:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8018798:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6818      	ldr	r0, [r3, #0]
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80187a8:	461a      	mov	r2, r3
 80187aa:	f004 fed7 	bl	801d55c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	695a      	ldr	r2, [r3, #20]
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80187bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	4618      	mov	r0, r3
 80187c4:	f004 fe06 	bl	801d3d4 <USB_ReadInterrupts>
 80187c8:	4603      	mov	r3, r0
 80187ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80187ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80187d2:	d123      	bne.n	801881c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	4618      	mov	r0, r3
 80187da:	f004 fe9c 	bl	801d516 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f003 ff59 	bl	801c69a <USB_GetDevSpeed>
 80187e8:	4603      	mov	r3, r0
 80187ea:	461a      	mov	r2, r3
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681c      	ldr	r4, [r3, #0]
 80187f4:	f001 fa08 	bl	8019c08 <HAL_RCC_GetHCLKFreq>
 80187f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80187fe:	461a      	mov	r2, r3
 8018800:	4620      	mov	r0, r4
 8018802:	f003 fc5d 	bl	801c0c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f00a fd0f 	bl	802322a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	695a      	ldr	r2, [r3, #20]
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801881a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	4618      	mov	r0, r3
 8018822:	f004 fdd7 	bl	801d3d4 <USB_ReadInterrupts>
 8018826:	4603      	mov	r3, r0
 8018828:	f003 0308 	and.w	r3, r3, #8
 801882c:	2b08      	cmp	r3, #8
 801882e:	d10a      	bne.n	8018846 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8018830:	6878      	ldr	r0, [r7, #4]
 8018832:	f00a fcec 	bl	802320e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	695a      	ldr	r2, [r3, #20]
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f002 0208 	and.w	r2, r2, #8
 8018844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4618      	mov	r0, r3
 801884c:	f004 fdc2 	bl	801d3d4 <USB_ReadInterrupts>
 8018850:	4603      	mov	r3, r0
 8018852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018856:	2b80      	cmp	r3, #128	; 0x80
 8018858:	d123      	bne.n	80188a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801885a:	6a3b      	ldr	r3, [r7, #32]
 801885c:	699b      	ldr	r3, [r3, #24]
 801885e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018862:	6a3b      	ldr	r3, [r7, #32]
 8018864:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8018866:	2301      	movs	r3, #1
 8018868:	627b      	str	r3, [r7, #36]	; 0x24
 801886a:	e014      	b.n	8018896 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801886c:	6879      	ldr	r1, [r7, #4]
 801886e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018870:	4613      	mov	r3, r2
 8018872:	00db      	lsls	r3, r3, #3
 8018874:	4413      	add	r3, r2
 8018876:	009b      	lsls	r3, r3, #2
 8018878:	440b      	add	r3, r1
 801887a:	f203 2357 	addw	r3, r3, #599	; 0x257
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	2b01      	cmp	r3, #1
 8018882:	d105      	bne.n	8018890 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8018884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018886:	b2db      	uxtb	r3, r3
 8018888:	4619      	mov	r1, r3
 801888a:	6878      	ldr	r0, [r7, #4]
 801888c:	f000 fb08 	bl	8018ea0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8018890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018892:	3301      	adds	r3, #1
 8018894:	627b      	str	r3, [r7, #36]	; 0x24
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	791b      	ldrb	r3, [r3, #4]
 801889a:	461a      	mov	r2, r3
 801889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801889e:	4293      	cmp	r3, r2
 80188a0:	d3e4      	bcc.n	801886c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	4618      	mov	r0, r3
 80188a8:	f004 fd94 	bl	801d3d4 <USB_ReadInterrupts>
 80188ac:	4603      	mov	r3, r0
 80188ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80188b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80188b6:	d13c      	bne.n	8018932 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80188b8:	2301      	movs	r3, #1
 80188ba:	627b      	str	r3, [r7, #36]	; 0x24
 80188bc:	e02b      	b.n	8018916 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80188be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c0:	015a      	lsls	r2, r3, #5
 80188c2:	69fb      	ldr	r3, [r7, #28]
 80188c4:	4413      	add	r3, r2
 80188c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80188ce:	6879      	ldr	r1, [r7, #4]
 80188d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188d2:	4613      	mov	r3, r2
 80188d4:	00db      	lsls	r3, r3, #3
 80188d6:	4413      	add	r3, r2
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	440b      	add	r3, r1
 80188dc:	3318      	adds	r3, #24
 80188de:	781b      	ldrb	r3, [r3, #0]
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d115      	bne.n	8018910 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80188e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	da12      	bge.n	8018910 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80188ea:	6879      	ldr	r1, [r7, #4]
 80188ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ee:	4613      	mov	r3, r2
 80188f0:	00db      	lsls	r3, r3, #3
 80188f2:	4413      	add	r3, r2
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	440b      	add	r3, r1
 80188f8:	3317      	adds	r3, #23
 80188fa:	2201      	movs	r2, #1
 80188fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80188fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018900:	b2db      	uxtb	r3, r3
 8018902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018906:	b2db      	uxtb	r3, r3
 8018908:	4619      	mov	r1, r3
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f000 fac8 	bl	8018ea0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8018910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018912:	3301      	adds	r3, #1
 8018914:	627b      	str	r3, [r7, #36]	; 0x24
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	791b      	ldrb	r3, [r3, #4]
 801891a:	461a      	mov	r2, r3
 801891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891e:	4293      	cmp	r3, r2
 8018920:	d3cd      	bcc.n	80188be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	695a      	ldr	r2, [r3, #20]
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8018930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	4618      	mov	r0, r3
 8018938:	f004 fd4c 	bl	801d3d4 <USB_ReadInterrupts>
 801893c:	4603      	mov	r3, r0
 801893e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018946:	d156      	bne.n	80189f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8018948:	2301      	movs	r3, #1
 801894a:	627b      	str	r3, [r7, #36]	; 0x24
 801894c:	e045      	b.n	80189da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018950:	015a      	lsls	r2, r3, #5
 8018952:	69fb      	ldr	r3, [r7, #28]
 8018954:	4413      	add	r3, r2
 8018956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801895e:	6879      	ldr	r1, [r7, #4]
 8018960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018962:	4613      	mov	r3, r2
 8018964:	00db      	lsls	r3, r3, #3
 8018966:	4413      	add	r3, r2
 8018968:	009b      	lsls	r3, r3, #2
 801896a:	440b      	add	r3, r1
 801896c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8018970:	781b      	ldrb	r3, [r3, #0]
 8018972:	2b01      	cmp	r3, #1
 8018974:	d12e      	bne.n	80189d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8018976:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8018978:	2b00      	cmp	r3, #0
 801897a:	da2b      	bge.n	80189d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801897c:	69bb      	ldr	r3, [r7, #24]
 801897e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8018988:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801898c:	429a      	cmp	r2, r3
 801898e:	d121      	bne.n	80189d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8018990:	6879      	ldr	r1, [r7, #4]
 8018992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018994:	4613      	mov	r3, r2
 8018996:	00db      	lsls	r3, r3, #3
 8018998:	4413      	add	r3, r2
 801899a:	009b      	lsls	r3, r3, #2
 801899c:	440b      	add	r3, r1
 801899e:	f203 2357 	addw	r3, r3, #599	; 0x257
 80189a2:	2201      	movs	r2, #1
 80189a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80189a6:	6a3b      	ldr	r3, [r7, #32]
 80189a8:	699b      	ldr	r3, [r3, #24]
 80189aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80189ae:	6a3b      	ldr	r3, [r7, #32]
 80189b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80189b2:	6a3b      	ldr	r3, [r7, #32]
 80189b4:	695b      	ldr	r3, [r3, #20]
 80189b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d10a      	bne.n	80189d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80189be:	69fb      	ldr	r3, [r7, #28]
 80189c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	69fa      	ldr	r2, [r7, #28]
 80189c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80189cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80189d0:	6053      	str	r3, [r2, #4]
            break;
 80189d2:	e008      	b.n	80189e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80189d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d6:	3301      	adds	r3, #1
 80189d8:	627b      	str	r3, [r7, #36]	; 0x24
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	791b      	ldrb	r3, [r3, #4]
 80189de:	461a      	mov	r2, r3
 80189e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d3b3      	bcc.n	801894e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	695a      	ldr	r2, [r3, #20]
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80189f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	4618      	mov	r0, r3
 80189fc:	f004 fcea 	bl	801d3d4 <USB_ReadInterrupts>
 8018a00:	4603      	mov	r3, r0
 8018a02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018a0a:	d10a      	bne.n	8018a22 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f00a fc8d 	bl	802332c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	695a      	ldr	r2, [r3, #20]
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8018a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	4618      	mov	r0, r3
 8018a28:	f004 fcd4 	bl	801d3d4 <USB_ReadInterrupts>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	f003 0304 	and.w	r3, r3, #4
 8018a32:	2b04      	cmp	r3, #4
 8018a34:	d115      	bne.n	8018a62 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	685b      	ldr	r3, [r3, #4]
 8018a3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8018a3e:	69bb      	ldr	r3, [r7, #24]
 8018a40:	f003 0304 	and.w	r3, r3, #4
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d002      	beq.n	8018a4e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f00a fc7d 	bl	8023348 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	6859      	ldr	r1, [r3, #4]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	69ba      	ldr	r2, [r7, #24]
 8018a5a:	430a      	orrs	r2, r1
 8018a5c:	605a      	str	r2, [r3, #4]
 8018a5e:	e000      	b.n	8018a62 <HAL_PCD_IRQHandler+0x93c>
      return;
 8018a60:	bf00      	nop
    }
  }
}
 8018a62:	3734      	adds	r7, #52	; 0x34
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd90      	pop	{r4, r7, pc}

08018a68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
 8018a70:	460b      	mov	r3, r1
 8018a72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8018a7a:	2b01      	cmp	r3, #1
 8018a7c:	d101      	bne.n	8018a82 <HAL_PCD_SetAddress+0x1a>
 8018a7e:	2302      	movs	r3, #2
 8018a80:	e012      	b.n	8018aa8 <HAL_PCD_SetAddress+0x40>
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2201      	movs	r2, #1
 8018a86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	78fa      	ldrb	r2, [r7, #3]
 8018a8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	78fa      	ldrb	r2, [r7, #3]
 8018a96:	4611      	mov	r1, r2
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f004 fc33 	bl	801d304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3708      	adds	r7, #8
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b084      	sub	sp, #16
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
 8018ab8:	4608      	mov	r0, r1
 8018aba:	4611      	mov	r1, r2
 8018abc:	461a      	mov	r2, r3
 8018abe:	4603      	mov	r3, r0
 8018ac0:	70fb      	strb	r3, [r7, #3]
 8018ac2:	460b      	mov	r3, r1
 8018ac4:	803b      	strh	r3, [r7, #0]
 8018ac6:	4613      	mov	r3, r2
 8018ac8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018aca:	2300      	movs	r3, #0
 8018acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	da0f      	bge.n	8018af6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018ad6:	78fb      	ldrb	r3, [r7, #3]
 8018ad8:	f003 020f 	and.w	r2, r3, #15
 8018adc:	4613      	mov	r3, r2
 8018ade:	00db      	lsls	r3, r3, #3
 8018ae0:	4413      	add	r3, r2
 8018ae2:	009b      	lsls	r3, r3, #2
 8018ae4:	3310      	adds	r3, #16
 8018ae6:	687a      	ldr	r2, [r7, #4]
 8018ae8:	4413      	add	r3, r2
 8018aea:	3304      	adds	r3, #4
 8018aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	2201      	movs	r2, #1
 8018af2:	705a      	strb	r2, [r3, #1]
 8018af4:	e00f      	b.n	8018b16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018af6:	78fb      	ldrb	r3, [r7, #3]
 8018af8:	f003 020f 	and.w	r2, r3, #15
 8018afc:	4613      	mov	r3, r2
 8018afe:	00db      	lsls	r3, r3, #3
 8018b00:	4413      	add	r3, r2
 8018b02:	009b      	lsls	r3, r3, #2
 8018b04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018b08:	687a      	ldr	r2, [r7, #4]
 8018b0a:	4413      	add	r3, r2
 8018b0c:	3304      	adds	r3, #4
 8018b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	2200      	movs	r2, #0
 8018b14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018b16:	78fb      	ldrb	r3, [r7, #3]
 8018b18:	f003 030f 	and.w	r3, r3, #15
 8018b1c:	b2da      	uxtb	r2, r3
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8018b22:	883a      	ldrh	r2, [r7, #0]
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	78ba      	ldrb	r2, [r7, #2]
 8018b2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	785b      	ldrb	r3, [r3, #1]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d004      	beq.n	8018b40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	b29a      	uxth	r2, r3
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8018b40:	78bb      	ldrb	r3, [r7, #2]
 8018b42:	2b02      	cmp	r3, #2
 8018b44:	d102      	bne.n	8018b4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	2200      	movs	r2, #0
 8018b4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d101      	bne.n	8018b5a <HAL_PCD_EP_Open+0xaa>
 8018b56:	2302      	movs	r3, #2
 8018b58:	e00e      	b.n	8018b78 <HAL_PCD_EP_Open+0xc8>
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2201      	movs	r2, #1
 8018b5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	68f9      	ldr	r1, [r7, #12]
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f003 fdbb 	bl	801c6e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2200      	movs	r2, #0
 8018b72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8018b76:	7afb      	ldrb	r3, [r7, #11]
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3710      	adds	r7, #16
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b084      	sub	sp, #16
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	460b      	mov	r3, r1
 8018b8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	da0f      	bge.n	8018bb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018b94:	78fb      	ldrb	r3, [r7, #3]
 8018b96:	f003 020f 	and.w	r2, r3, #15
 8018b9a:	4613      	mov	r3, r2
 8018b9c:	00db      	lsls	r3, r3, #3
 8018b9e:	4413      	add	r3, r2
 8018ba0:	009b      	lsls	r3, r3, #2
 8018ba2:	3310      	adds	r3, #16
 8018ba4:	687a      	ldr	r2, [r7, #4]
 8018ba6:	4413      	add	r3, r2
 8018ba8:	3304      	adds	r3, #4
 8018baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2201      	movs	r2, #1
 8018bb0:	705a      	strb	r2, [r3, #1]
 8018bb2:	e00f      	b.n	8018bd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018bb4:	78fb      	ldrb	r3, [r7, #3]
 8018bb6:	f003 020f 	and.w	r2, r3, #15
 8018bba:	4613      	mov	r3, r2
 8018bbc:	00db      	lsls	r3, r3, #3
 8018bbe:	4413      	add	r3, r2
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018bc6:	687a      	ldr	r2, [r7, #4]
 8018bc8:	4413      	add	r3, r2
 8018bca:	3304      	adds	r3, #4
 8018bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018bd4:	78fb      	ldrb	r3, [r7, #3]
 8018bd6:	f003 030f 	and.w	r3, r3, #15
 8018bda:	b2da      	uxtb	r2, r3
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d101      	bne.n	8018bee <HAL_PCD_EP_Close+0x6e>
 8018bea:	2302      	movs	r3, #2
 8018bec:	e00e      	b.n	8018c0c <HAL_PCD_EP_Close+0x8c>
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	2201      	movs	r2, #1
 8018bf2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	68f9      	ldr	r1, [r7, #12]
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	f003 fdf9 	bl	801c7f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2200      	movs	r2, #0
 8018c06:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8018c0a:	2300      	movs	r3, #0
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	3710      	adds	r7, #16
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}

08018c14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b086      	sub	sp, #24
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	60f8      	str	r0, [r7, #12]
 8018c1c:	607a      	str	r2, [r7, #4]
 8018c1e:	603b      	str	r3, [r7, #0]
 8018c20:	460b      	mov	r3, r1
 8018c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018c24:	7afb      	ldrb	r3, [r7, #11]
 8018c26:	f003 020f 	and.w	r2, r3, #15
 8018c2a:	4613      	mov	r3, r2
 8018c2c:	00db      	lsls	r3, r3, #3
 8018c2e:	4413      	add	r3, r2
 8018c30:	009b      	lsls	r3, r3, #2
 8018c32:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018c36:	68fa      	ldr	r2, [r7, #12]
 8018c38:	4413      	add	r3, r2
 8018c3a:	3304      	adds	r3, #4
 8018c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	687a      	ldr	r2, [r7, #4]
 8018c42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	683a      	ldr	r2, [r7, #0]
 8018c48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8018c50:	697b      	ldr	r3, [r7, #20]
 8018c52:	2200      	movs	r2, #0
 8018c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018c56:	7afb      	ldrb	r3, [r7, #11]
 8018c58:	f003 030f 	and.w	r3, r3, #15
 8018c5c:	b2da      	uxtb	r2, r3
 8018c5e:	697b      	ldr	r3, [r7, #20]
 8018c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	799b      	ldrb	r3, [r3, #6]
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d102      	bne.n	8018c70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8018c6a:	687a      	ldr	r2, [r7, #4]
 8018c6c:	697b      	ldr	r3, [r7, #20]
 8018c6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	6818      	ldr	r0, [r3, #0]
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	799b      	ldrb	r3, [r3, #6]
 8018c78:	461a      	mov	r2, r3
 8018c7a:	6979      	ldr	r1, [r7, #20]
 8018c7c:	f003 fe96 	bl	801c9ac <USB_EPStartXfer>

  return HAL_OK;
 8018c80:	2300      	movs	r3, #0
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3718      	adds	r7, #24
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}

08018c8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8018c8a:	b480      	push	{r7}
 8018c8c:	b083      	sub	sp, #12
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	6078      	str	r0, [r7, #4]
 8018c92:	460b      	mov	r3, r1
 8018c94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8018c96:	78fb      	ldrb	r3, [r7, #3]
 8018c98:	f003 020f 	and.w	r2, r3, #15
 8018c9c:	6879      	ldr	r1, [r7, #4]
 8018c9e:	4613      	mov	r3, r2
 8018ca0:	00db      	lsls	r3, r3, #3
 8018ca2:	4413      	add	r3, r2
 8018ca4:	009b      	lsls	r3, r3, #2
 8018ca6:	440b      	add	r3, r1
 8018ca8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8018cac:	681b      	ldr	r3, [r3, #0]
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	370c      	adds	r7, #12
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb8:	4770      	bx	lr

08018cba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018cba:	b580      	push	{r7, lr}
 8018cbc:	b086      	sub	sp, #24
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	60f8      	str	r0, [r7, #12]
 8018cc2:	607a      	str	r2, [r7, #4]
 8018cc4:	603b      	str	r3, [r7, #0]
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018cca:	7afb      	ldrb	r3, [r7, #11]
 8018ccc:	f003 020f 	and.w	r2, r3, #15
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	00db      	lsls	r3, r3, #3
 8018cd4:	4413      	add	r3, r2
 8018cd6:	009b      	lsls	r3, r3, #2
 8018cd8:	3310      	adds	r3, #16
 8018cda:	68fa      	ldr	r2, [r7, #12]
 8018cdc:	4413      	add	r3, r2
 8018cde:	3304      	adds	r3, #4
 8018ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018ce2:	697b      	ldr	r3, [r7, #20]
 8018ce4:	687a      	ldr	r2, [r7, #4]
 8018ce6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	683a      	ldr	r2, [r7, #0]
 8018cec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8018cee:	697b      	ldr	r3, [r7, #20]
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8018cf4:	697b      	ldr	r3, [r7, #20]
 8018cf6:	2201      	movs	r2, #1
 8018cf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018cfa:	7afb      	ldrb	r3, [r7, #11]
 8018cfc:	f003 030f 	and.w	r3, r3, #15
 8018d00:	b2da      	uxtb	r2, r3
 8018d02:	697b      	ldr	r3, [r7, #20]
 8018d04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	799b      	ldrb	r3, [r3, #6]
 8018d0a:	2b01      	cmp	r3, #1
 8018d0c:	d102      	bne.n	8018d14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8018d0e:	687a      	ldr	r2, [r7, #4]
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	6818      	ldr	r0, [r3, #0]
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	799b      	ldrb	r3, [r3, #6]
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	6979      	ldr	r1, [r7, #20]
 8018d20:	f003 fe44 	bl	801c9ac <USB_EPStartXfer>

  return HAL_OK;
 8018d24:	2300      	movs	r3, #0
}
 8018d26:	4618      	mov	r0, r3
 8018d28:	3718      	adds	r7, #24
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}

08018d2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018d2e:	b580      	push	{r7, lr}
 8018d30:	b084      	sub	sp, #16
 8018d32:	af00      	add	r7, sp, #0
 8018d34:	6078      	str	r0, [r7, #4]
 8018d36:	460b      	mov	r3, r1
 8018d38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8018d3a:	78fb      	ldrb	r3, [r7, #3]
 8018d3c:	f003 030f 	and.w	r3, r3, #15
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	7912      	ldrb	r2, [r2, #4]
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d901      	bls.n	8018d4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	e04f      	b.n	8018dec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	da0f      	bge.n	8018d74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018d54:	78fb      	ldrb	r3, [r7, #3]
 8018d56:	f003 020f 	and.w	r2, r3, #15
 8018d5a:	4613      	mov	r3, r2
 8018d5c:	00db      	lsls	r3, r3, #3
 8018d5e:	4413      	add	r3, r2
 8018d60:	009b      	lsls	r3, r3, #2
 8018d62:	3310      	adds	r3, #16
 8018d64:	687a      	ldr	r2, [r7, #4]
 8018d66:	4413      	add	r3, r2
 8018d68:	3304      	adds	r3, #4
 8018d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	2201      	movs	r2, #1
 8018d70:	705a      	strb	r2, [r3, #1]
 8018d72:	e00d      	b.n	8018d90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018d74:	78fa      	ldrb	r2, [r7, #3]
 8018d76:	4613      	mov	r3, r2
 8018d78:	00db      	lsls	r3, r3, #3
 8018d7a:	4413      	add	r3, r2
 8018d7c:	009b      	lsls	r3, r3, #2
 8018d7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	4413      	add	r3, r2
 8018d86:	3304      	adds	r3, #4
 8018d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	2201      	movs	r2, #1
 8018d94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018d96:	78fb      	ldrb	r3, [r7, #3]
 8018d98:	f003 030f 	and.w	r3, r3, #15
 8018d9c:	b2da      	uxtb	r2, r3
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8018da8:	2b01      	cmp	r3, #1
 8018daa:	d101      	bne.n	8018db0 <HAL_PCD_EP_SetStall+0x82>
 8018dac:	2302      	movs	r3, #2
 8018dae:	e01d      	b.n	8018dec <HAL_PCD_EP_SetStall+0xbe>
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2201      	movs	r2, #1
 8018db4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	68f9      	ldr	r1, [r7, #12]
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f004 f9cc 	bl	801d15c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8018dc4:	78fb      	ldrb	r3, [r7, #3]
 8018dc6:	f003 030f 	and.w	r3, r3, #15
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d109      	bne.n	8018de2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	6818      	ldr	r0, [r3, #0]
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	7999      	ldrb	r1, [r3, #6]
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8018ddc:	461a      	mov	r2, r3
 8018dde:	f004 fbbd 	bl	801d55c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	2200      	movs	r2, #0
 8018de6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8018dea:	2300      	movs	r3, #0
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3710      	adds	r7, #16
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b084      	sub	sp, #16
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
 8018dfc:	460b      	mov	r3, r1
 8018dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018e00:	78fb      	ldrb	r3, [r7, #3]
 8018e02:	f003 030f 	and.w	r3, r3, #15
 8018e06:	687a      	ldr	r2, [r7, #4]
 8018e08:	7912      	ldrb	r2, [r2, #4]
 8018e0a:	4293      	cmp	r3, r2
 8018e0c:	d901      	bls.n	8018e12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8018e0e:	2301      	movs	r3, #1
 8018e10:	e042      	b.n	8018e98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	da0f      	bge.n	8018e3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018e1a:	78fb      	ldrb	r3, [r7, #3]
 8018e1c:	f003 020f 	and.w	r2, r3, #15
 8018e20:	4613      	mov	r3, r2
 8018e22:	00db      	lsls	r3, r3, #3
 8018e24:	4413      	add	r3, r2
 8018e26:	009b      	lsls	r3, r3, #2
 8018e28:	3310      	adds	r3, #16
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	4413      	add	r3, r2
 8018e2e:	3304      	adds	r3, #4
 8018e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	2201      	movs	r2, #1
 8018e36:	705a      	strb	r2, [r3, #1]
 8018e38:	e00f      	b.n	8018e5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018e3a:	78fb      	ldrb	r3, [r7, #3]
 8018e3c:	f003 020f 	and.w	r2, r3, #15
 8018e40:	4613      	mov	r3, r2
 8018e42:	00db      	lsls	r3, r3, #3
 8018e44:	4413      	add	r3, r2
 8018e46:	009b      	lsls	r3, r3, #2
 8018e48:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	4413      	add	r3, r2
 8018e50:	3304      	adds	r3, #4
 8018e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	2200      	movs	r2, #0
 8018e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018e60:	78fb      	ldrb	r3, [r7, #3]
 8018e62:	f003 030f 	and.w	r3, r3, #15
 8018e66:	b2da      	uxtb	r2, r3
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d101      	bne.n	8018e7a <HAL_PCD_EP_ClrStall+0x86>
 8018e76:	2302      	movs	r3, #2
 8018e78:	e00e      	b.n	8018e98 <HAL_PCD_EP_ClrStall+0xa4>
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	2201      	movs	r2, #1
 8018e7e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	68f9      	ldr	r1, [r7, #12]
 8018e88:	4618      	mov	r0, r3
 8018e8a:	f004 f9d5 	bl	801d238 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2200      	movs	r2, #0
 8018e92:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8018e96:	2300      	movs	r3, #0
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3710      	adds	r7, #16
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}

08018ea0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b084      	sub	sp, #16
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	460b      	mov	r3, r1
 8018eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8018eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	da0c      	bge.n	8018ece <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018eb4:	78fb      	ldrb	r3, [r7, #3]
 8018eb6:	f003 020f 	and.w	r2, r3, #15
 8018eba:	4613      	mov	r3, r2
 8018ebc:	00db      	lsls	r3, r3, #3
 8018ebe:	4413      	add	r3, r2
 8018ec0:	009b      	lsls	r3, r3, #2
 8018ec2:	3310      	adds	r3, #16
 8018ec4:	687a      	ldr	r2, [r7, #4]
 8018ec6:	4413      	add	r3, r2
 8018ec8:	3304      	adds	r3, #4
 8018eca:	60fb      	str	r3, [r7, #12]
 8018ecc:	e00c      	b.n	8018ee8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018ece:	78fb      	ldrb	r3, [r7, #3]
 8018ed0:	f003 020f 	and.w	r2, r3, #15
 8018ed4:	4613      	mov	r3, r2
 8018ed6:	00db      	lsls	r3, r3, #3
 8018ed8:	4413      	add	r3, r2
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8018ee0:	687a      	ldr	r2, [r7, #4]
 8018ee2:	4413      	add	r3, r2
 8018ee4:	3304      	adds	r3, #4
 8018ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	68f9      	ldr	r1, [r7, #12]
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f003 fff4 	bl	801cedc <USB_EPStopXfer>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8018ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8018efa:	4618      	mov	r0, r3
 8018efc:	3710      	adds	r7, #16
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}

08018f02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8018f02:	b580      	push	{r7, lr}
 8018f04:	b08a      	sub	sp, #40	; 0x28
 8018f06:	af02      	add	r7, sp, #8
 8018f08:	6078      	str	r0, [r7, #4]
 8018f0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018f12:	697b      	ldr	r3, [r7, #20]
 8018f14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8018f16:	683a      	ldr	r2, [r7, #0]
 8018f18:	4613      	mov	r3, r2
 8018f1a:	00db      	lsls	r3, r3, #3
 8018f1c:	4413      	add	r3, r2
 8018f1e:	009b      	lsls	r3, r3, #2
 8018f20:	3310      	adds	r3, #16
 8018f22:	687a      	ldr	r2, [r7, #4]
 8018f24:	4413      	add	r3, r2
 8018f26:	3304      	adds	r3, #4
 8018f28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	695a      	ldr	r2, [r3, #20]
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	691b      	ldr	r3, [r3, #16]
 8018f32:	429a      	cmp	r2, r3
 8018f34:	d901      	bls.n	8018f3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8018f36:	2301      	movs	r3, #1
 8018f38:	e06b      	b.n	8019012 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	691a      	ldr	r2, [r3, #16]
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	695b      	ldr	r3, [r3, #20]
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	689b      	ldr	r3, [r3, #8]
 8018f4a:	69fa      	ldr	r2, [r7, #28]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d902      	bls.n	8018f56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	689b      	ldr	r3, [r3, #8]
 8018f54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8018f56:	69fb      	ldr	r3, [r7, #28]
 8018f58:	3303      	adds	r3, #3
 8018f5a:	089b      	lsrs	r3, r3, #2
 8018f5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018f5e:	e02a      	b.n	8018fb6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	691a      	ldr	r2, [r3, #16]
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	695b      	ldr	r3, [r3, #20]
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	689b      	ldr	r3, [r3, #8]
 8018f70:	69fa      	ldr	r2, [r7, #28]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d902      	bls.n	8018f7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	689b      	ldr	r3, [r3, #8]
 8018f7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8018f7c:	69fb      	ldr	r3, [r7, #28]
 8018f7e:	3303      	adds	r3, #3
 8018f80:	089b      	lsrs	r3, r3, #2
 8018f82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	68d9      	ldr	r1, [r3, #12]
 8018f88:	683b      	ldr	r3, [r7, #0]
 8018f8a:	b2da      	uxtb	r2, r3
 8018f8c:	69fb      	ldr	r3, [r7, #28]
 8018f8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8018f94:	9300      	str	r3, [sp, #0]
 8018f96:	4603      	mov	r3, r0
 8018f98:	6978      	ldr	r0, [r7, #20]
 8018f9a:	f004 f849 	bl	801d030 <USB_WritePacket>

    ep->xfer_buff  += len;
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	68da      	ldr	r2, [r3, #12]
 8018fa2:	69fb      	ldr	r3, [r7, #28]
 8018fa4:	441a      	add	r2, r3
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	695a      	ldr	r2, [r3, #20]
 8018fae:	69fb      	ldr	r3, [r7, #28]
 8018fb0:	441a      	add	r2, r3
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	015a      	lsls	r2, r3, #5
 8018fba:	693b      	ldr	r3, [r7, #16]
 8018fbc:	4413      	add	r3, r2
 8018fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018fc2:	699b      	ldr	r3, [r3, #24]
 8018fc4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8018fc6:	69ba      	ldr	r2, [r7, #24]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d809      	bhi.n	8018fe0 <PCD_WriteEmptyTxFifo+0xde>
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	695a      	ldr	r2, [r3, #20]
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018fd4:	429a      	cmp	r2, r3
 8018fd6:	d203      	bcs.n	8018fe0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	691b      	ldr	r3, [r3, #16]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d1bf      	bne.n	8018f60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	691a      	ldr	r2, [r3, #16]
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	695b      	ldr	r3, [r3, #20]
 8018fe8:	429a      	cmp	r2, r3
 8018fea:	d811      	bhi.n	8019010 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	f003 030f 	and.w	r3, r3, #15
 8018ff2:	2201      	movs	r2, #1
 8018ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8018ff8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8018ffa:	693b      	ldr	r3, [r7, #16]
 8018ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019002:	68bb      	ldr	r3, [r7, #8]
 8019004:	43db      	mvns	r3, r3
 8019006:	6939      	ldr	r1, [r7, #16]
 8019008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801900c:	4013      	ands	r3, r2
 801900e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8019010:	2300      	movs	r3, #0
}
 8019012:	4618      	mov	r0, r3
 8019014:	3720      	adds	r7, #32
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}
	...

0801901c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b088      	sub	sp, #32
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
 8019024:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801902c:	69fb      	ldr	r3, [r7, #28]
 801902e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8019030:	69fb      	ldr	r3, [r7, #28]
 8019032:	333c      	adds	r3, #60	; 0x3c
 8019034:	3304      	adds	r3, #4
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	015a      	lsls	r2, r3, #5
 801903e:	69bb      	ldr	r3, [r7, #24]
 8019040:	4413      	add	r3, r2
 8019042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019046:	689b      	ldr	r3, [r3, #8]
 8019048:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	799b      	ldrb	r3, [r3, #6]
 801904e:	2b01      	cmp	r3, #1
 8019050:	d17b      	bne.n	801914a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8019052:	693b      	ldr	r3, [r7, #16]
 8019054:	f003 0308 	and.w	r3, r3, #8
 8019058:	2b00      	cmp	r3, #0
 801905a:	d015      	beq.n	8019088 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	4a61      	ldr	r2, [pc, #388]	; (80191e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8019060:	4293      	cmp	r3, r2
 8019062:	f240 80b9 	bls.w	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801906c:	2b00      	cmp	r3, #0
 801906e:	f000 80b3 	beq.w	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8019072:	683b      	ldr	r3, [r7, #0]
 8019074:	015a      	lsls	r2, r3, #5
 8019076:	69bb      	ldr	r3, [r7, #24]
 8019078:	4413      	add	r3, r2
 801907a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801907e:	461a      	mov	r2, r3
 8019080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019084:	6093      	str	r3, [r2, #8]
 8019086:	e0a7      	b.n	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8019088:	693b      	ldr	r3, [r7, #16]
 801908a:	f003 0320 	and.w	r3, r3, #32
 801908e:	2b00      	cmp	r3, #0
 8019090:	d009      	beq.n	80190a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	015a      	lsls	r2, r3, #5
 8019096:	69bb      	ldr	r3, [r7, #24]
 8019098:	4413      	add	r3, r2
 801909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801909e:	461a      	mov	r2, r3
 80190a0:	2320      	movs	r3, #32
 80190a2:	6093      	str	r3, [r2, #8]
 80190a4:	e098      	b.n	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	f040 8093 	bne.w	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80190b2:	697b      	ldr	r3, [r7, #20]
 80190b4:	4a4b      	ldr	r2, [pc, #300]	; (80191e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80190b6:	4293      	cmp	r3, r2
 80190b8:	d90f      	bls.n	80190da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80190ba:	693b      	ldr	r3, [r7, #16]
 80190bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d00a      	beq.n	80190da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	015a      	lsls	r2, r3, #5
 80190c8:	69bb      	ldr	r3, [r7, #24]
 80190ca:	4413      	add	r3, r2
 80190cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80190d0:	461a      	mov	r2, r3
 80190d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190d6:	6093      	str	r3, [r2, #8]
 80190d8:	e07e      	b.n	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80190da:	683a      	ldr	r2, [r7, #0]
 80190dc:	4613      	mov	r3, r2
 80190de:	00db      	lsls	r3, r3, #3
 80190e0:	4413      	add	r3, r2
 80190e2:	009b      	lsls	r3, r3, #2
 80190e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80190e8:	687a      	ldr	r2, [r7, #4]
 80190ea:	4413      	add	r3, r2
 80190ec:	3304      	adds	r3, #4
 80190ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	6a1a      	ldr	r2, [r3, #32]
 80190f4:	683b      	ldr	r3, [r7, #0]
 80190f6:	0159      	lsls	r1, r3, #5
 80190f8:	69bb      	ldr	r3, [r7, #24]
 80190fa:	440b      	add	r3, r1
 80190fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019100:	691b      	ldr	r3, [r3, #16]
 8019102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019106:	1ad2      	subs	r2, r2, r3
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d114      	bne.n	801913c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	691b      	ldr	r3, [r3, #16]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d109      	bne.n	801912e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6818      	ldr	r0, [r3, #0]
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8019124:	461a      	mov	r2, r3
 8019126:	2101      	movs	r1, #1
 8019128:	f004 fa18 	bl	801d55c <USB_EP0_OutStart>
 801912c:	e006      	b.n	801913c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	68da      	ldr	r2, [r3, #12]
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	695b      	ldr	r3, [r3, #20]
 8019136:	441a      	add	r2, r3
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	b2db      	uxtb	r3, r3
 8019140:	4619      	mov	r1, r3
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f00a f82e 	bl	80231a4 <HAL_PCD_DataOutStageCallback>
 8019148:	e046      	b.n	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	4a26      	ldr	r2, [pc, #152]	; (80191e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801914e:	4293      	cmp	r3, r2
 8019150:	d124      	bne.n	801919c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8019152:	693b      	ldr	r3, [r7, #16]
 8019154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019158:	2b00      	cmp	r3, #0
 801915a:	d00a      	beq.n	8019172 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	015a      	lsls	r2, r3, #5
 8019160:	69bb      	ldr	r3, [r7, #24]
 8019162:	4413      	add	r3, r2
 8019164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019168:	461a      	mov	r2, r3
 801916a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801916e:	6093      	str	r3, [r2, #8]
 8019170:	e032      	b.n	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8019172:	693b      	ldr	r3, [r7, #16]
 8019174:	f003 0320 	and.w	r3, r3, #32
 8019178:	2b00      	cmp	r3, #0
 801917a:	d008      	beq.n	801918e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	015a      	lsls	r2, r3, #5
 8019180:	69bb      	ldr	r3, [r7, #24]
 8019182:	4413      	add	r3, r2
 8019184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019188:	461a      	mov	r2, r3
 801918a:	2320      	movs	r3, #32
 801918c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801918e:	683b      	ldr	r3, [r7, #0]
 8019190:	b2db      	uxtb	r3, r3
 8019192:	4619      	mov	r1, r3
 8019194:	6878      	ldr	r0, [r7, #4]
 8019196:	f00a f805 	bl	80231a4 <HAL_PCD_DataOutStageCallback>
 801919a:	e01d      	b.n	80191d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d114      	bne.n	80191cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80191a2:	6879      	ldr	r1, [r7, #4]
 80191a4:	683a      	ldr	r2, [r7, #0]
 80191a6:	4613      	mov	r3, r2
 80191a8:	00db      	lsls	r3, r3, #3
 80191aa:	4413      	add	r3, r2
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	440b      	add	r3, r1
 80191b0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d108      	bne.n	80191cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6818      	ldr	r0, [r3, #0]
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80191c4:	461a      	mov	r2, r3
 80191c6:	2100      	movs	r1, #0
 80191c8:	f004 f9c8 	bl	801d55c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	4619      	mov	r1, r3
 80191d2:	6878      	ldr	r0, [r7, #4]
 80191d4:	f009 ffe6 	bl	80231a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80191d8:	2300      	movs	r3, #0
}
 80191da:	4618      	mov	r0, r3
 80191dc:	3720      	adds	r7, #32
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd80      	pop	{r7, pc}
 80191e2:	bf00      	nop
 80191e4:	4f54300a 	.word	0x4f54300a
 80191e8:	4f54310a 	.word	0x4f54310a

080191ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b086      	sub	sp, #24
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	333c      	adds	r3, #60	; 0x3c
 8019204:	3304      	adds	r3, #4
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	015a      	lsls	r2, r3, #5
 801920e:	693b      	ldr	r3, [r7, #16]
 8019210:	4413      	add	r3, r2
 8019212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019216:	689b      	ldr	r3, [r3, #8]
 8019218:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	4a15      	ldr	r2, [pc, #84]	; (8019274 <PCD_EP_OutSetupPacket_int+0x88>)
 801921e:	4293      	cmp	r3, r2
 8019220:	d90e      	bls.n	8019240 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8019222:	68bb      	ldr	r3, [r7, #8]
 8019224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8019228:	2b00      	cmp	r3, #0
 801922a:	d009      	beq.n	8019240 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	015a      	lsls	r2, r3, #5
 8019230:	693b      	ldr	r3, [r7, #16]
 8019232:	4413      	add	r3, r2
 8019234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019238:	461a      	mov	r2, r3
 801923a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801923e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f009 ff9d 	bl	8023180 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	4a0a      	ldr	r2, [pc, #40]	; (8019274 <PCD_EP_OutSetupPacket_int+0x88>)
 801924a:	4293      	cmp	r3, r2
 801924c:	d90c      	bls.n	8019268 <PCD_EP_OutSetupPacket_int+0x7c>
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	799b      	ldrb	r3, [r3, #6]
 8019252:	2b01      	cmp	r3, #1
 8019254:	d108      	bne.n	8019268 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	6818      	ldr	r0, [r3, #0]
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8019260:	461a      	mov	r2, r3
 8019262:	2101      	movs	r1, #1
 8019264:	f004 f97a 	bl	801d55c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8019268:	2300      	movs	r3, #0
}
 801926a:	4618      	mov	r0, r3
 801926c:	3718      	adds	r7, #24
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
 8019272:	bf00      	nop
 8019274:	4f54300a 	.word	0x4f54300a

08019278 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8019278:	b480      	push	{r7}
 801927a:	b085      	sub	sp, #20
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
 8019280:	460b      	mov	r3, r1
 8019282:	70fb      	strb	r3, [r7, #3]
 8019284:	4613      	mov	r3, r2
 8019286:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801928e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8019290:	78fb      	ldrb	r3, [r7, #3]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d107      	bne.n	80192a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8019296:	883b      	ldrh	r3, [r7, #0]
 8019298:	0419      	lsls	r1, r3, #16
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	68ba      	ldr	r2, [r7, #8]
 80192a0:	430a      	orrs	r2, r1
 80192a2:	629a      	str	r2, [r3, #40]	; 0x28
 80192a4:	e028      	b.n	80192f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ac:	0c1b      	lsrs	r3, r3, #16
 80192ae:	68ba      	ldr	r2, [r7, #8]
 80192b0:	4413      	add	r3, r2
 80192b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80192b4:	2300      	movs	r3, #0
 80192b6:	73fb      	strb	r3, [r7, #15]
 80192b8:	e00d      	b.n	80192d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681a      	ldr	r2, [r3, #0]
 80192be:	7bfb      	ldrb	r3, [r7, #15]
 80192c0:	3340      	adds	r3, #64	; 0x40
 80192c2:	009b      	lsls	r3, r3, #2
 80192c4:	4413      	add	r3, r2
 80192c6:	685b      	ldr	r3, [r3, #4]
 80192c8:	0c1b      	lsrs	r3, r3, #16
 80192ca:	68ba      	ldr	r2, [r7, #8]
 80192cc:	4413      	add	r3, r2
 80192ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80192d0:	7bfb      	ldrb	r3, [r7, #15]
 80192d2:	3301      	adds	r3, #1
 80192d4:	73fb      	strb	r3, [r7, #15]
 80192d6:	7bfa      	ldrb	r2, [r7, #15]
 80192d8:	78fb      	ldrb	r3, [r7, #3]
 80192da:	3b01      	subs	r3, #1
 80192dc:	429a      	cmp	r2, r3
 80192de:	d3ec      	bcc.n	80192ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80192e0:	883b      	ldrh	r3, [r7, #0]
 80192e2:	0418      	lsls	r0, r3, #16
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6819      	ldr	r1, [r3, #0]
 80192e8:	78fb      	ldrb	r3, [r7, #3]
 80192ea:	3b01      	subs	r3, #1
 80192ec:	68ba      	ldr	r2, [r7, #8]
 80192ee:	4302      	orrs	r2, r0
 80192f0:	3340      	adds	r3, #64	; 0x40
 80192f2:	009b      	lsls	r3, r3, #2
 80192f4:	440b      	add	r3, r1
 80192f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80192f8:	2300      	movs	r3, #0
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3714      	adds	r7, #20
 80192fe:	46bd      	mov	sp, r7
 8019300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019304:	4770      	bx	lr

08019306 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8019306:	b480      	push	{r7}
 8019308:	b083      	sub	sp, #12
 801930a:	af00      	add	r7, sp, #0
 801930c:	6078      	str	r0, [r7, #4]
 801930e:	460b      	mov	r3, r1
 8019310:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	887a      	ldrh	r2, [r7, #2]
 8019318:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801931a:	2300      	movs	r3, #0
}
 801931c:	4618      	mov	r0, r3
 801931e:	370c      	adds	r7, #12
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr

08019328 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
 8019330:	460b      	mov	r3, r1
 8019332:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8019334:	bf00      	nop
 8019336:	370c      	adds	r7, #12
 8019338:	46bd      	mov	sp, r7
 801933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933e:	4770      	bx	lr

08019340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b086      	sub	sp, #24
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d101      	bne.n	8019352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801934e:	2301      	movs	r3, #1
 8019350:	e267      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	f003 0301 	and.w	r3, r3, #1
 801935a:	2b00      	cmp	r3, #0
 801935c:	d075      	beq.n	801944a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801935e:	4b88      	ldr	r3, [pc, #544]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019360:	689b      	ldr	r3, [r3, #8]
 8019362:	f003 030c 	and.w	r3, r3, #12
 8019366:	2b04      	cmp	r3, #4
 8019368:	d00c      	beq.n	8019384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801936a:	4b85      	ldr	r3, [pc, #532]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 801936c:	689b      	ldr	r3, [r3, #8]
 801936e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019372:	2b08      	cmp	r3, #8
 8019374:	d112      	bne.n	801939c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019376:	4b82      	ldr	r3, [pc, #520]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801937e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019382:	d10b      	bne.n	801939c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019384:	4b7e      	ldr	r3, [pc, #504]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801938c:	2b00      	cmp	r3, #0
 801938e:	d05b      	beq.n	8019448 <HAL_RCC_OscConfig+0x108>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d157      	bne.n	8019448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019398:	2301      	movs	r3, #1
 801939a:	e242      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	685b      	ldr	r3, [r3, #4]
 80193a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80193a4:	d106      	bne.n	80193b4 <HAL_RCC_OscConfig+0x74>
 80193a6:	4b76      	ldr	r3, [pc, #472]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	4a75      	ldr	r2, [pc, #468]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80193b0:	6013      	str	r3, [r2, #0]
 80193b2:	e01d      	b.n	80193f0 <HAL_RCC_OscConfig+0xb0>
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	685b      	ldr	r3, [r3, #4]
 80193b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80193bc:	d10c      	bne.n	80193d8 <HAL_RCC_OscConfig+0x98>
 80193be:	4b70      	ldr	r3, [pc, #448]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	4a6f      	ldr	r2, [pc, #444]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80193c8:	6013      	str	r3, [r2, #0]
 80193ca:	4b6d      	ldr	r3, [pc, #436]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	4a6c      	ldr	r2, [pc, #432]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80193d4:	6013      	str	r3, [r2, #0]
 80193d6:	e00b      	b.n	80193f0 <HAL_RCC_OscConfig+0xb0>
 80193d8:	4b69      	ldr	r3, [pc, #420]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	4a68      	ldr	r2, [pc, #416]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80193e2:	6013      	str	r3, [r2, #0]
 80193e4:	4b66      	ldr	r3, [pc, #408]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	4a65      	ldr	r2, [pc, #404]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80193ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80193ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	685b      	ldr	r3, [r3, #4]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d013      	beq.n	8019420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80193f8:	f7fd fa38 	bl	801686c <HAL_GetTick>
 80193fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80193fe:	e008      	b.n	8019412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019400:	f7fd fa34 	bl	801686c <HAL_GetTick>
 8019404:	4602      	mov	r2, r0
 8019406:	693b      	ldr	r3, [r7, #16]
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	2b64      	cmp	r3, #100	; 0x64
 801940c:	d901      	bls.n	8019412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801940e:	2303      	movs	r3, #3
 8019410:	e207      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019412:	4b5b      	ldr	r3, [pc, #364]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801941a:	2b00      	cmp	r3, #0
 801941c:	d0f0      	beq.n	8019400 <HAL_RCC_OscConfig+0xc0>
 801941e:	e014      	b.n	801944a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019420:	f7fd fa24 	bl	801686c <HAL_GetTick>
 8019424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019426:	e008      	b.n	801943a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019428:	f7fd fa20 	bl	801686c <HAL_GetTick>
 801942c:	4602      	mov	r2, r0
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	1ad3      	subs	r3, r2, r3
 8019432:	2b64      	cmp	r3, #100	; 0x64
 8019434:	d901      	bls.n	801943a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019436:	2303      	movs	r3, #3
 8019438:	e1f3      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801943a:	4b51      	ldr	r3, [pc, #324]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019442:	2b00      	cmp	r3, #0
 8019444:	d1f0      	bne.n	8019428 <HAL_RCC_OscConfig+0xe8>
 8019446:	e000      	b.n	801944a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	f003 0302 	and.w	r3, r3, #2
 8019452:	2b00      	cmp	r3, #0
 8019454:	d063      	beq.n	801951e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019456:	4b4a      	ldr	r3, [pc, #296]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019458:	689b      	ldr	r3, [r3, #8]
 801945a:	f003 030c 	and.w	r3, r3, #12
 801945e:	2b00      	cmp	r3, #0
 8019460:	d00b      	beq.n	801947a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019462:	4b47      	ldr	r3, [pc, #284]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019464:	689b      	ldr	r3, [r3, #8]
 8019466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801946a:	2b08      	cmp	r3, #8
 801946c:	d11c      	bne.n	80194a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801946e:	4b44      	ldr	r3, [pc, #272]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019476:	2b00      	cmp	r3, #0
 8019478:	d116      	bne.n	80194a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801947a:	4b41      	ldr	r3, [pc, #260]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	f003 0302 	and.w	r3, r3, #2
 8019482:	2b00      	cmp	r3, #0
 8019484:	d005      	beq.n	8019492 <HAL_RCC_OscConfig+0x152>
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	68db      	ldr	r3, [r3, #12]
 801948a:	2b01      	cmp	r3, #1
 801948c:	d001      	beq.n	8019492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801948e:	2301      	movs	r3, #1
 8019490:	e1c7      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019492:	4b3b      	ldr	r3, [pc, #236]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	691b      	ldr	r3, [r3, #16]
 801949e:	00db      	lsls	r3, r3, #3
 80194a0:	4937      	ldr	r1, [pc, #220]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80194a2:	4313      	orrs	r3, r2
 80194a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80194a6:	e03a      	b.n	801951e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	68db      	ldr	r3, [r3, #12]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d020      	beq.n	80194f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80194b0:	4b34      	ldr	r3, [pc, #208]	; (8019584 <HAL_RCC_OscConfig+0x244>)
 80194b2:	2201      	movs	r2, #1
 80194b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80194b6:	f7fd f9d9 	bl	801686c <HAL_GetTick>
 80194ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80194bc:	e008      	b.n	80194d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80194be:	f7fd f9d5 	bl	801686c <HAL_GetTick>
 80194c2:	4602      	mov	r2, r0
 80194c4:	693b      	ldr	r3, [r7, #16]
 80194c6:	1ad3      	subs	r3, r2, r3
 80194c8:	2b02      	cmp	r3, #2
 80194ca:	d901      	bls.n	80194d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80194cc:	2303      	movs	r3, #3
 80194ce:	e1a8      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80194d0:	4b2b      	ldr	r3, [pc, #172]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	f003 0302 	and.w	r3, r3, #2
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d0f0      	beq.n	80194be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80194dc:	4b28      	ldr	r3, [pc, #160]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	691b      	ldr	r3, [r3, #16]
 80194e8:	00db      	lsls	r3, r3, #3
 80194ea:	4925      	ldr	r1, [pc, #148]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 80194ec:	4313      	orrs	r3, r2
 80194ee:	600b      	str	r3, [r1, #0]
 80194f0:	e015      	b.n	801951e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80194f2:	4b24      	ldr	r3, [pc, #144]	; (8019584 <HAL_RCC_OscConfig+0x244>)
 80194f4:	2200      	movs	r2, #0
 80194f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80194f8:	f7fd f9b8 	bl	801686c <HAL_GetTick>
 80194fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80194fe:	e008      	b.n	8019512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019500:	f7fd f9b4 	bl	801686c <HAL_GetTick>
 8019504:	4602      	mov	r2, r0
 8019506:	693b      	ldr	r3, [r7, #16]
 8019508:	1ad3      	subs	r3, r2, r3
 801950a:	2b02      	cmp	r3, #2
 801950c:	d901      	bls.n	8019512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801950e:	2303      	movs	r3, #3
 8019510:	e187      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019512:	4b1b      	ldr	r3, [pc, #108]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	f003 0302 	and.w	r3, r3, #2
 801951a:	2b00      	cmp	r3, #0
 801951c:	d1f0      	bne.n	8019500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	f003 0308 	and.w	r3, r3, #8
 8019526:	2b00      	cmp	r3, #0
 8019528:	d036      	beq.n	8019598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	695b      	ldr	r3, [r3, #20]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d016      	beq.n	8019560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019532:	4b15      	ldr	r3, [pc, #84]	; (8019588 <HAL_RCC_OscConfig+0x248>)
 8019534:	2201      	movs	r2, #1
 8019536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019538:	f7fd f998 	bl	801686c <HAL_GetTick>
 801953c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801953e:	e008      	b.n	8019552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019540:	f7fd f994 	bl	801686c <HAL_GetTick>
 8019544:	4602      	mov	r2, r0
 8019546:	693b      	ldr	r3, [r7, #16]
 8019548:	1ad3      	subs	r3, r2, r3
 801954a:	2b02      	cmp	r3, #2
 801954c:	d901      	bls.n	8019552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801954e:	2303      	movs	r3, #3
 8019550:	e167      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019552:	4b0b      	ldr	r3, [pc, #44]	; (8019580 <HAL_RCC_OscConfig+0x240>)
 8019554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019556:	f003 0302 	and.w	r3, r3, #2
 801955a:	2b00      	cmp	r3, #0
 801955c:	d0f0      	beq.n	8019540 <HAL_RCC_OscConfig+0x200>
 801955e:	e01b      	b.n	8019598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019560:	4b09      	ldr	r3, [pc, #36]	; (8019588 <HAL_RCC_OscConfig+0x248>)
 8019562:	2200      	movs	r2, #0
 8019564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019566:	f7fd f981 	bl	801686c <HAL_GetTick>
 801956a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801956c:	e00e      	b.n	801958c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801956e:	f7fd f97d 	bl	801686c <HAL_GetTick>
 8019572:	4602      	mov	r2, r0
 8019574:	693b      	ldr	r3, [r7, #16]
 8019576:	1ad3      	subs	r3, r2, r3
 8019578:	2b02      	cmp	r3, #2
 801957a:	d907      	bls.n	801958c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801957c:	2303      	movs	r3, #3
 801957e:	e150      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
 8019580:	40023800 	.word	0x40023800
 8019584:	42470000 	.word	0x42470000
 8019588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801958c:	4b88      	ldr	r3, [pc, #544]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801958e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019590:	f003 0302 	and.w	r3, r3, #2
 8019594:	2b00      	cmp	r3, #0
 8019596:	d1ea      	bne.n	801956e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f003 0304 	and.w	r3, r3, #4
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	f000 8097 	beq.w	80196d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80195a6:	2300      	movs	r3, #0
 80195a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80195aa:	4b81      	ldr	r3, [pc, #516]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80195ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d10f      	bne.n	80195d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80195b6:	2300      	movs	r3, #0
 80195b8:	60bb      	str	r3, [r7, #8]
 80195ba:	4b7d      	ldr	r3, [pc, #500]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80195bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195be:	4a7c      	ldr	r2, [pc, #496]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80195c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80195c4:	6413      	str	r3, [r2, #64]	; 0x40
 80195c6:	4b7a      	ldr	r3, [pc, #488]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80195c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80195ce:	60bb      	str	r3, [r7, #8]
 80195d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80195d2:	2301      	movs	r3, #1
 80195d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80195d6:	4b77      	ldr	r3, [pc, #476]	; (80197b4 <HAL_RCC_OscConfig+0x474>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d118      	bne.n	8019614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80195e2:	4b74      	ldr	r3, [pc, #464]	; (80197b4 <HAL_RCC_OscConfig+0x474>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	4a73      	ldr	r2, [pc, #460]	; (80197b4 <HAL_RCC_OscConfig+0x474>)
 80195e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80195ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80195ee:	f7fd f93d 	bl	801686c <HAL_GetTick>
 80195f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80195f4:	e008      	b.n	8019608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80195f6:	f7fd f939 	bl	801686c <HAL_GetTick>
 80195fa:	4602      	mov	r2, r0
 80195fc:	693b      	ldr	r3, [r7, #16]
 80195fe:	1ad3      	subs	r3, r2, r3
 8019600:	2b02      	cmp	r3, #2
 8019602:	d901      	bls.n	8019608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8019604:	2303      	movs	r3, #3
 8019606:	e10c      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019608:	4b6a      	ldr	r3, [pc, #424]	; (80197b4 <HAL_RCC_OscConfig+0x474>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019610:	2b00      	cmp	r3, #0
 8019612:	d0f0      	beq.n	80195f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	689b      	ldr	r3, [r3, #8]
 8019618:	2b01      	cmp	r3, #1
 801961a:	d106      	bne.n	801962a <HAL_RCC_OscConfig+0x2ea>
 801961c:	4b64      	ldr	r3, [pc, #400]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801961e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019620:	4a63      	ldr	r2, [pc, #396]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019622:	f043 0301 	orr.w	r3, r3, #1
 8019626:	6713      	str	r3, [r2, #112]	; 0x70
 8019628:	e01c      	b.n	8019664 <HAL_RCC_OscConfig+0x324>
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	689b      	ldr	r3, [r3, #8]
 801962e:	2b05      	cmp	r3, #5
 8019630:	d10c      	bne.n	801964c <HAL_RCC_OscConfig+0x30c>
 8019632:	4b5f      	ldr	r3, [pc, #380]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019636:	4a5e      	ldr	r2, [pc, #376]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019638:	f043 0304 	orr.w	r3, r3, #4
 801963c:	6713      	str	r3, [r2, #112]	; 0x70
 801963e:	4b5c      	ldr	r3, [pc, #368]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019642:	4a5b      	ldr	r2, [pc, #364]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019644:	f043 0301 	orr.w	r3, r3, #1
 8019648:	6713      	str	r3, [r2, #112]	; 0x70
 801964a:	e00b      	b.n	8019664 <HAL_RCC_OscConfig+0x324>
 801964c:	4b58      	ldr	r3, [pc, #352]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019650:	4a57      	ldr	r2, [pc, #348]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019652:	f023 0301 	bic.w	r3, r3, #1
 8019656:	6713      	str	r3, [r2, #112]	; 0x70
 8019658:	4b55      	ldr	r3, [pc, #340]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801965a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801965c:	4a54      	ldr	r2, [pc, #336]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801965e:	f023 0304 	bic.w	r3, r3, #4
 8019662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	689b      	ldr	r3, [r3, #8]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d015      	beq.n	8019698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801966c:	f7fd f8fe 	bl	801686c <HAL_GetTick>
 8019670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019672:	e00a      	b.n	801968a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019674:	f7fd f8fa 	bl	801686c <HAL_GetTick>
 8019678:	4602      	mov	r2, r0
 801967a:	693b      	ldr	r3, [r7, #16]
 801967c:	1ad3      	subs	r3, r2, r3
 801967e:	f241 3288 	movw	r2, #5000	; 0x1388
 8019682:	4293      	cmp	r3, r2
 8019684:	d901      	bls.n	801968a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8019686:	2303      	movs	r3, #3
 8019688:	e0cb      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801968a:	4b49      	ldr	r3, [pc, #292]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801968c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801968e:	f003 0302 	and.w	r3, r3, #2
 8019692:	2b00      	cmp	r3, #0
 8019694:	d0ee      	beq.n	8019674 <HAL_RCC_OscConfig+0x334>
 8019696:	e014      	b.n	80196c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019698:	f7fd f8e8 	bl	801686c <HAL_GetTick>
 801969c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801969e:	e00a      	b.n	80196b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80196a0:	f7fd f8e4 	bl	801686c <HAL_GetTick>
 80196a4:	4602      	mov	r2, r0
 80196a6:	693b      	ldr	r3, [r7, #16]
 80196a8:	1ad3      	subs	r3, r2, r3
 80196aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80196ae:	4293      	cmp	r3, r2
 80196b0:	d901      	bls.n	80196b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80196b2:	2303      	movs	r3, #3
 80196b4:	e0b5      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80196b6:	4b3e      	ldr	r3, [pc, #248]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80196b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196ba:	f003 0302 	and.w	r3, r3, #2
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d1ee      	bne.n	80196a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80196c2:	7dfb      	ldrb	r3, [r7, #23]
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	d105      	bne.n	80196d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80196c8:	4b39      	ldr	r3, [pc, #228]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80196ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196cc:	4a38      	ldr	r2, [pc, #224]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80196ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80196d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	699b      	ldr	r3, [r3, #24]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	f000 80a1 	beq.w	8019820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80196de:	4b34      	ldr	r3, [pc, #208]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 80196e0:	689b      	ldr	r3, [r3, #8]
 80196e2:	f003 030c 	and.w	r3, r3, #12
 80196e6:	2b08      	cmp	r3, #8
 80196e8:	d05c      	beq.n	80197a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	699b      	ldr	r3, [r3, #24]
 80196ee:	2b02      	cmp	r3, #2
 80196f0:	d141      	bne.n	8019776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80196f2:	4b31      	ldr	r3, [pc, #196]	; (80197b8 <HAL_RCC_OscConfig+0x478>)
 80196f4:	2200      	movs	r2, #0
 80196f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80196f8:	f7fd f8b8 	bl	801686c <HAL_GetTick>
 80196fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80196fe:	e008      	b.n	8019712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019700:	f7fd f8b4 	bl	801686c <HAL_GetTick>
 8019704:	4602      	mov	r2, r0
 8019706:	693b      	ldr	r3, [r7, #16]
 8019708:	1ad3      	subs	r3, r2, r3
 801970a:	2b02      	cmp	r3, #2
 801970c:	d901      	bls.n	8019712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801970e:	2303      	movs	r3, #3
 8019710:	e087      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019712:	4b27      	ldr	r3, [pc, #156]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801971a:	2b00      	cmp	r3, #0
 801971c:	d1f0      	bne.n	8019700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	69da      	ldr	r2, [r3, #28]
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	6a1b      	ldr	r3, [r3, #32]
 8019726:	431a      	orrs	r2, r3
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801972c:	019b      	lsls	r3, r3, #6
 801972e:	431a      	orrs	r2, r3
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019734:	085b      	lsrs	r3, r3, #1
 8019736:	3b01      	subs	r3, #1
 8019738:	041b      	lsls	r3, r3, #16
 801973a:	431a      	orrs	r2, r3
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019740:	061b      	lsls	r3, r3, #24
 8019742:	491b      	ldr	r1, [pc, #108]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019744:	4313      	orrs	r3, r2
 8019746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019748:	4b1b      	ldr	r3, [pc, #108]	; (80197b8 <HAL_RCC_OscConfig+0x478>)
 801974a:	2201      	movs	r2, #1
 801974c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801974e:	f7fd f88d 	bl	801686c <HAL_GetTick>
 8019752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019754:	e008      	b.n	8019768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019756:	f7fd f889 	bl	801686c <HAL_GetTick>
 801975a:	4602      	mov	r2, r0
 801975c:	693b      	ldr	r3, [r7, #16]
 801975e:	1ad3      	subs	r3, r2, r3
 8019760:	2b02      	cmp	r3, #2
 8019762:	d901      	bls.n	8019768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8019764:	2303      	movs	r3, #3
 8019766:	e05c      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019768:	4b11      	ldr	r3, [pc, #68]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019770:	2b00      	cmp	r3, #0
 8019772:	d0f0      	beq.n	8019756 <HAL_RCC_OscConfig+0x416>
 8019774:	e054      	b.n	8019820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019776:	4b10      	ldr	r3, [pc, #64]	; (80197b8 <HAL_RCC_OscConfig+0x478>)
 8019778:	2200      	movs	r2, #0
 801977a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801977c:	f7fd f876 	bl	801686c <HAL_GetTick>
 8019780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019782:	e008      	b.n	8019796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019784:	f7fd f872 	bl	801686c <HAL_GetTick>
 8019788:	4602      	mov	r2, r0
 801978a:	693b      	ldr	r3, [r7, #16]
 801978c:	1ad3      	subs	r3, r2, r3
 801978e:	2b02      	cmp	r3, #2
 8019790:	d901      	bls.n	8019796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8019792:	2303      	movs	r3, #3
 8019794:	e045      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019796:	4b06      	ldr	r3, [pc, #24]	; (80197b0 <HAL_RCC_OscConfig+0x470>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d1f0      	bne.n	8019784 <HAL_RCC_OscConfig+0x444>
 80197a2:	e03d      	b.n	8019820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	699b      	ldr	r3, [r3, #24]
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	d107      	bne.n	80197bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80197ac:	2301      	movs	r3, #1
 80197ae:	e038      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
 80197b0:	40023800 	.word	0x40023800
 80197b4:	40007000 	.word	0x40007000
 80197b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80197bc:	4b1b      	ldr	r3, [pc, #108]	; (801982c <HAL_RCC_OscConfig+0x4ec>)
 80197be:	685b      	ldr	r3, [r3, #4]
 80197c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	699b      	ldr	r3, [r3, #24]
 80197c6:	2b01      	cmp	r3, #1
 80197c8:	d028      	beq.n	801981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d121      	bne.n	801981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80197e2:	429a      	cmp	r2, r3
 80197e4:	d11a      	bne.n	801981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80197e6:	68fa      	ldr	r2, [r7, #12]
 80197e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80197ec:	4013      	ands	r3, r2
 80197ee:	687a      	ldr	r2, [r7, #4]
 80197f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80197f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80197f4:	4293      	cmp	r3, r2
 80197f6:	d111      	bne.n	801981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019802:	085b      	lsrs	r3, r3, #1
 8019804:	3b01      	subs	r3, #1
 8019806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019808:	429a      	cmp	r2, r3
 801980a:	d107      	bne.n	801981c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019818:	429a      	cmp	r2, r3
 801981a:	d001      	beq.n	8019820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801981c:	2301      	movs	r3, #1
 801981e:	e000      	b.n	8019822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8019820:	2300      	movs	r3, #0
}
 8019822:	4618      	mov	r0, r3
 8019824:	3718      	adds	r7, #24
 8019826:	46bd      	mov	sp, r7
 8019828:	bd80      	pop	{r7, pc}
 801982a:	bf00      	nop
 801982c:	40023800 	.word	0x40023800

08019830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b084      	sub	sp, #16
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
 8019838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d101      	bne.n	8019844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019840:	2301      	movs	r3, #1
 8019842:	e0cc      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019844:	4b68      	ldr	r3, [pc, #416]	; (80199e8 <HAL_RCC_ClockConfig+0x1b8>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	f003 0307 	and.w	r3, r3, #7
 801984c:	683a      	ldr	r2, [r7, #0]
 801984e:	429a      	cmp	r2, r3
 8019850:	d90c      	bls.n	801986c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019852:	4b65      	ldr	r3, [pc, #404]	; (80199e8 <HAL_RCC_ClockConfig+0x1b8>)
 8019854:	683a      	ldr	r2, [r7, #0]
 8019856:	b2d2      	uxtb	r2, r2
 8019858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801985a:	4b63      	ldr	r3, [pc, #396]	; (80199e8 <HAL_RCC_ClockConfig+0x1b8>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	f003 0307 	and.w	r3, r3, #7
 8019862:	683a      	ldr	r2, [r7, #0]
 8019864:	429a      	cmp	r2, r3
 8019866:	d001      	beq.n	801986c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8019868:	2301      	movs	r3, #1
 801986a:	e0b8      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	f003 0302 	and.w	r3, r3, #2
 8019874:	2b00      	cmp	r3, #0
 8019876:	d020      	beq.n	80198ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	f003 0304 	and.w	r3, r3, #4
 8019880:	2b00      	cmp	r3, #0
 8019882:	d005      	beq.n	8019890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8019884:	4b59      	ldr	r3, [pc, #356]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 8019886:	689b      	ldr	r3, [r3, #8]
 8019888:	4a58      	ldr	r2, [pc, #352]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 801988a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801988e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	f003 0308 	and.w	r3, r3, #8
 8019898:	2b00      	cmp	r3, #0
 801989a:	d005      	beq.n	80198a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801989c:	4b53      	ldr	r3, [pc, #332]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 801989e:	689b      	ldr	r3, [r3, #8]
 80198a0:	4a52      	ldr	r2, [pc, #328]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80198a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80198a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80198a8:	4b50      	ldr	r3, [pc, #320]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80198aa:	689b      	ldr	r3, [r3, #8]
 80198ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	689b      	ldr	r3, [r3, #8]
 80198b4:	494d      	ldr	r1, [pc, #308]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80198b6:	4313      	orrs	r3, r2
 80198b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	f003 0301 	and.w	r3, r3, #1
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d044      	beq.n	8019950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	685b      	ldr	r3, [r3, #4]
 80198ca:	2b01      	cmp	r3, #1
 80198cc:	d107      	bne.n	80198de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80198ce:	4b47      	ldr	r3, [pc, #284]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d119      	bne.n	801990e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80198da:	2301      	movs	r3, #1
 80198dc:	e07f      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	685b      	ldr	r3, [r3, #4]
 80198e2:	2b02      	cmp	r3, #2
 80198e4:	d003      	beq.n	80198ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80198ea:	2b03      	cmp	r3, #3
 80198ec:	d107      	bne.n	80198fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80198ee:	4b3f      	ldr	r3, [pc, #252]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d109      	bne.n	801990e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80198fa:	2301      	movs	r3, #1
 80198fc:	e06f      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80198fe:	4b3b      	ldr	r3, [pc, #236]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	f003 0302 	and.w	r3, r3, #2
 8019906:	2b00      	cmp	r3, #0
 8019908:	d101      	bne.n	801990e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801990a:	2301      	movs	r3, #1
 801990c:	e067      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801990e:	4b37      	ldr	r3, [pc, #220]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 8019910:	689b      	ldr	r3, [r3, #8]
 8019912:	f023 0203 	bic.w	r2, r3, #3
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	685b      	ldr	r3, [r3, #4]
 801991a:	4934      	ldr	r1, [pc, #208]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 801991c:	4313      	orrs	r3, r2
 801991e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019920:	f7fc ffa4 	bl	801686c <HAL_GetTick>
 8019924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019926:	e00a      	b.n	801993e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019928:	f7fc ffa0 	bl	801686c <HAL_GetTick>
 801992c:	4602      	mov	r2, r0
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	f241 3288 	movw	r2, #5000	; 0x1388
 8019936:	4293      	cmp	r3, r2
 8019938:	d901      	bls.n	801993e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801993a:	2303      	movs	r3, #3
 801993c:	e04f      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801993e:	4b2b      	ldr	r3, [pc, #172]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 8019940:	689b      	ldr	r3, [r3, #8]
 8019942:	f003 020c 	and.w	r2, r3, #12
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	685b      	ldr	r3, [r3, #4]
 801994a:	009b      	lsls	r3, r3, #2
 801994c:	429a      	cmp	r2, r3
 801994e:	d1eb      	bne.n	8019928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019950:	4b25      	ldr	r3, [pc, #148]	; (80199e8 <HAL_RCC_ClockConfig+0x1b8>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	f003 0307 	and.w	r3, r3, #7
 8019958:	683a      	ldr	r2, [r7, #0]
 801995a:	429a      	cmp	r2, r3
 801995c:	d20c      	bcs.n	8019978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801995e:	4b22      	ldr	r3, [pc, #136]	; (80199e8 <HAL_RCC_ClockConfig+0x1b8>)
 8019960:	683a      	ldr	r2, [r7, #0]
 8019962:	b2d2      	uxtb	r2, r2
 8019964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019966:	4b20      	ldr	r3, [pc, #128]	; (80199e8 <HAL_RCC_ClockConfig+0x1b8>)
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	f003 0307 	and.w	r3, r3, #7
 801996e:	683a      	ldr	r2, [r7, #0]
 8019970:	429a      	cmp	r2, r3
 8019972:	d001      	beq.n	8019978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8019974:	2301      	movs	r3, #1
 8019976:	e032      	b.n	80199de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	f003 0304 	and.w	r3, r3, #4
 8019980:	2b00      	cmp	r3, #0
 8019982:	d008      	beq.n	8019996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019984:	4b19      	ldr	r3, [pc, #100]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 8019986:	689b      	ldr	r3, [r3, #8]
 8019988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	68db      	ldr	r3, [r3, #12]
 8019990:	4916      	ldr	r1, [pc, #88]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 8019992:	4313      	orrs	r3, r2
 8019994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	f003 0308 	and.w	r3, r3, #8
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d009      	beq.n	80199b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80199a2:	4b12      	ldr	r3, [pc, #72]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80199a4:	689b      	ldr	r3, [r3, #8]
 80199a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	691b      	ldr	r3, [r3, #16]
 80199ae:	00db      	lsls	r3, r3, #3
 80199b0:	490e      	ldr	r1, [pc, #56]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80199b2:	4313      	orrs	r3, r2
 80199b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80199b6:	f000 f821 	bl	80199fc <HAL_RCC_GetSysClockFreq>
 80199ba:	4602      	mov	r2, r0
 80199bc:	4b0b      	ldr	r3, [pc, #44]	; (80199ec <HAL_RCC_ClockConfig+0x1bc>)
 80199be:	689b      	ldr	r3, [r3, #8]
 80199c0:	091b      	lsrs	r3, r3, #4
 80199c2:	f003 030f 	and.w	r3, r3, #15
 80199c6:	490a      	ldr	r1, [pc, #40]	; (80199f0 <HAL_RCC_ClockConfig+0x1c0>)
 80199c8:	5ccb      	ldrb	r3, [r1, r3]
 80199ca:	fa22 f303 	lsr.w	r3, r2, r3
 80199ce:	4a09      	ldr	r2, [pc, #36]	; (80199f4 <HAL_RCC_ClockConfig+0x1c4>)
 80199d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80199d2:	4b09      	ldr	r3, [pc, #36]	; (80199f8 <HAL_RCC_ClockConfig+0x1c8>)
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	4618      	mov	r0, r3
 80199d8:	f7fc ff04 	bl	80167e4 <HAL_InitTick>

  return HAL_OK;
 80199dc:	2300      	movs	r3, #0
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3710      	adds	r7, #16
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	bf00      	nop
 80199e8:	40023c00 	.word	0x40023c00
 80199ec:	40023800 	.word	0x40023800
 80199f0:	0802f09c 	.word	0x0802f09c
 80199f4:	20000ef8 	.word	0x20000ef8
 80199f8:	20000efc 	.word	0x20000efc

080199fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80199fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019a00:	b094      	sub	sp, #80	; 0x50
 8019a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8019a04:	2300      	movs	r3, #0
 8019a06:	647b      	str	r3, [r7, #68]	; 0x44
 8019a08:	2300      	movs	r3, #0
 8019a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8019a10:	2300      	movs	r3, #0
 8019a12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019a14:	4b79      	ldr	r3, [pc, #484]	; (8019bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8019a16:	689b      	ldr	r3, [r3, #8]
 8019a18:	f003 030c 	and.w	r3, r3, #12
 8019a1c:	2b08      	cmp	r3, #8
 8019a1e:	d00d      	beq.n	8019a3c <HAL_RCC_GetSysClockFreq+0x40>
 8019a20:	2b08      	cmp	r3, #8
 8019a22:	f200 80e1 	bhi.w	8019be8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d002      	beq.n	8019a30 <HAL_RCC_GetSysClockFreq+0x34>
 8019a2a:	2b04      	cmp	r3, #4
 8019a2c:	d003      	beq.n	8019a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8019a2e:	e0db      	b.n	8019be8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019a30:	4b73      	ldr	r3, [pc, #460]	; (8019c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8019a32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8019a34:	e0db      	b.n	8019bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8019a36:	4b73      	ldr	r3, [pc, #460]	; (8019c04 <HAL_RCC_GetSysClockFreq+0x208>)
 8019a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019a3a:	e0d8      	b.n	8019bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019a3c:	4b6f      	ldr	r3, [pc, #444]	; (8019bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019a46:	4b6d      	ldr	r3, [pc, #436]	; (8019bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8019a48:	685b      	ldr	r3, [r3, #4]
 8019a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d063      	beq.n	8019b1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019a52:	4b6a      	ldr	r3, [pc, #424]	; (8019bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	099b      	lsrs	r3, r3, #6
 8019a58:	2200      	movs	r2, #0
 8019a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8019a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8019a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a64:	633b      	str	r3, [r7, #48]	; 0x30
 8019a66:	2300      	movs	r3, #0
 8019a68:	637b      	str	r3, [r7, #52]	; 0x34
 8019a6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8019a6e:	4622      	mov	r2, r4
 8019a70:	462b      	mov	r3, r5
 8019a72:	f04f 0000 	mov.w	r0, #0
 8019a76:	f04f 0100 	mov.w	r1, #0
 8019a7a:	0159      	lsls	r1, r3, #5
 8019a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019a80:	0150      	lsls	r0, r2, #5
 8019a82:	4602      	mov	r2, r0
 8019a84:	460b      	mov	r3, r1
 8019a86:	4621      	mov	r1, r4
 8019a88:	1a51      	subs	r1, r2, r1
 8019a8a:	6139      	str	r1, [r7, #16]
 8019a8c:	4629      	mov	r1, r5
 8019a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8019a92:	617b      	str	r3, [r7, #20]
 8019a94:	f04f 0200 	mov.w	r2, #0
 8019a98:	f04f 0300 	mov.w	r3, #0
 8019a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8019aa0:	4659      	mov	r1, fp
 8019aa2:	018b      	lsls	r3, r1, #6
 8019aa4:	4651      	mov	r1, sl
 8019aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8019aaa:	4651      	mov	r1, sl
 8019aac:	018a      	lsls	r2, r1, #6
 8019aae:	4651      	mov	r1, sl
 8019ab0:	ebb2 0801 	subs.w	r8, r2, r1
 8019ab4:	4659      	mov	r1, fp
 8019ab6:	eb63 0901 	sbc.w	r9, r3, r1
 8019aba:	f04f 0200 	mov.w	r2, #0
 8019abe:	f04f 0300 	mov.w	r3, #0
 8019ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8019ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8019aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8019ace:	4690      	mov	r8, r2
 8019ad0:	4699      	mov	r9, r3
 8019ad2:	4623      	mov	r3, r4
 8019ad4:	eb18 0303 	adds.w	r3, r8, r3
 8019ad8:	60bb      	str	r3, [r7, #8]
 8019ada:	462b      	mov	r3, r5
 8019adc:	eb49 0303 	adc.w	r3, r9, r3
 8019ae0:	60fb      	str	r3, [r7, #12]
 8019ae2:	f04f 0200 	mov.w	r2, #0
 8019ae6:	f04f 0300 	mov.w	r3, #0
 8019aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8019aee:	4629      	mov	r1, r5
 8019af0:	024b      	lsls	r3, r1, #9
 8019af2:	4621      	mov	r1, r4
 8019af4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8019af8:	4621      	mov	r1, r4
 8019afa:	024a      	lsls	r2, r1, #9
 8019afc:	4610      	mov	r0, r2
 8019afe:	4619      	mov	r1, r3
 8019b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b02:	2200      	movs	r2, #0
 8019b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8019b0c:	f7e7 f8ac 	bl	8000c68 <__aeabi_uldivmod>
 8019b10:	4602      	mov	r2, r0
 8019b12:	460b      	mov	r3, r1
 8019b14:	4613      	mov	r3, r2
 8019b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019b18:	e058      	b.n	8019bcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019b1a:	4b38      	ldr	r3, [pc, #224]	; (8019bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8019b1c:	685b      	ldr	r3, [r3, #4]
 8019b1e:	099b      	lsrs	r3, r3, #6
 8019b20:	2200      	movs	r2, #0
 8019b22:	4618      	mov	r0, r3
 8019b24:	4611      	mov	r1, r2
 8019b26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8019b2a:	623b      	str	r3, [r7, #32]
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8019b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8019b34:	4642      	mov	r2, r8
 8019b36:	464b      	mov	r3, r9
 8019b38:	f04f 0000 	mov.w	r0, #0
 8019b3c:	f04f 0100 	mov.w	r1, #0
 8019b40:	0159      	lsls	r1, r3, #5
 8019b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019b46:	0150      	lsls	r0, r2, #5
 8019b48:	4602      	mov	r2, r0
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	4641      	mov	r1, r8
 8019b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8019b52:	4649      	mov	r1, r9
 8019b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8019b58:	f04f 0200 	mov.w	r2, #0
 8019b5c:	f04f 0300 	mov.w	r3, #0
 8019b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8019b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8019b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8019b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8019b70:	eb63 050b 	sbc.w	r5, r3, fp
 8019b74:	f04f 0200 	mov.w	r2, #0
 8019b78:	f04f 0300 	mov.w	r3, #0
 8019b7c:	00eb      	lsls	r3, r5, #3
 8019b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019b82:	00e2      	lsls	r2, r4, #3
 8019b84:	4614      	mov	r4, r2
 8019b86:	461d      	mov	r5, r3
 8019b88:	4643      	mov	r3, r8
 8019b8a:	18e3      	adds	r3, r4, r3
 8019b8c:	603b      	str	r3, [r7, #0]
 8019b8e:	464b      	mov	r3, r9
 8019b90:	eb45 0303 	adc.w	r3, r5, r3
 8019b94:	607b      	str	r3, [r7, #4]
 8019b96:	f04f 0200 	mov.w	r2, #0
 8019b9a:	f04f 0300 	mov.w	r3, #0
 8019b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019ba2:	4629      	mov	r1, r5
 8019ba4:	028b      	lsls	r3, r1, #10
 8019ba6:	4621      	mov	r1, r4
 8019ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8019bac:	4621      	mov	r1, r4
 8019bae:	028a      	lsls	r2, r1, #10
 8019bb0:	4610      	mov	r0, r2
 8019bb2:	4619      	mov	r1, r3
 8019bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	61bb      	str	r3, [r7, #24]
 8019bba:	61fa      	str	r2, [r7, #28]
 8019bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019bc0:	f7e7 f852 	bl	8000c68 <__aeabi_uldivmod>
 8019bc4:	4602      	mov	r2, r0
 8019bc6:	460b      	mov	r3, r1
 8019bc8:	4613      	mov	r3, r2
 8019bca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8019bcc:	4b0b      	ldr	r3, [pc, #44]	; (8019bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8019bce:	685b      	ldr	r3, [r3, #4]
 8019bd0:	0c1b      	lsrs	r3, r3, #16
 8019bd2:	f003 0303 	and.w	r3, r3, #3
 8019bd6:	3301      	adds	r3, #1
 8019bd8:	005b      	lsls	r3, r3, #1
 8019bda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8019bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8019be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019be6:	e002      	b.n	8019bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019be8:	4b05      	ldr	r3, [pc, #20]	; (8019c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8019bea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8019bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3750      	adds	r7, #80	; 0x50
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019bfa:	bf00      	nop
 8019bfc:	40023800 	.word	0x40023800
 8019c00:	00f42400 	.word	0x00f42400
 8019c04:	007a1200 	.word	0x007a1200

08019c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019c08:	b480      	push	{r7}
 8019c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019c0c:	4b03      	ldr	r3, [pc, #12]	; (8019c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	46bd      	mov	sp, r7
 8019c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c18:	4770      	bx	lr
 8019c1a:	bf00      	nop
 8019c1c:	20000ef8 	.word	0x20000ef8

08019c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8019c24:	f7ff fff0 	bl	8019c08 <HAL_RCC_GetHCLKFreq>
 8019c28:	4602      	mov	r2, r0
 8019c2a:	4b05      	ldr	r3, [pc, #20]	; (8019c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019c2c:	689b      	ldr	r3, [r3, #8]
 8019c2e:	0a9b      	lsrs	r3, r3, #10
 8019c30:	f003 0307 	and.w	r3, r3, #7
 8019c34:	4903      	ldr	r1, [pc, #12]	; (8019c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019c36:	5ccb      	ldrb	r3, [r1, r3]
 8019c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	bd80      	pop	{r7, pc}
 8019c40:	40023800 	.word	0x40023800
 8019c44:	0802f0ac 	.word	0x0802f0ac

08019c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8019c4c:	f7ff ffdc 	bl	8019c08 <HAL_RCC_GetHCLKFreq>
 8019c50:	4602      	mov	r2, r0
 8019c52:	4b05      	ldr	r3, [pc, #20]	; (8019c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019c54:	689b      	ldr	r3, [r3, #8]
 8019c56:	0b5b      	lsrs	r3, r3, #13
 8019c58:	f003 0307 	and.w	r3, r3, #7
 8019c5c:	4903      	ldr	r1, [pc, #12]	; (8019c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8019c5e:	5ccb      	ldrb	r3, [r1, r3]
 8019c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	40023800 	.word	0x40023800
 8019c6c:	0802f0ac 	.word	0x0802f0ac

08019c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d101      	bne.n	8019c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019c7e:	2301      	movs	r3, #1
 8019c80:	e07b      	b.n	8019d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d108      	bne.n	8019c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019c92:	d009      	beq.n	8019ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2200      	movs	r2, #0
 8019c98:	61da      	str	r2, [r3, #28]
 8019c9a:	e005      	b.n	8019ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	2200      	movs	r2, #0
 8019cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019cb4:	b2db      	uxtb	r3, r3
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d106      	bne.n	8019cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019cc2:	6878      	ldr	r0, [r7, #4]
 8019cc4:	f7fc f9b4 	bl	8016030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	2202      	movs	r2, #2
 8019ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	681a      	ldr	r2, [r3, #0]
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	689b      	ldr	r3, [r3, #8]
 8019cec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8019cf0:	431a      	orrs	r2, r3
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019cfa:	431a      	orrs	r2, r3
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	691b      	ldr	r3, [r3, #16]
 8019d00:	f003 0302 	and.w	r3, r3, #2
 8019d04:	431a      	orrs	r2, r3
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	695b      	ldr	r3, [r3, #20]
 8019d0a:	f003 0301 	and.w	r3, r3, #1
 8019d0e:	431a      	orrs	r2, r3
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	699b      	ldr	r3, [r3, #24]
 8019d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019d18:	431a      	orrs	r2, r3
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	69db      	ldr	r3, [r3, #28]
 8019d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019d22:	431a      	orrs	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	6a1b      	ldr	r3, [r3, #32]
 8019d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019d2c:	ea42 0103 	orr.w	r1, r2, r3
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	430a      	orrs	r2, r1
 8019d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	699b      	ldr	r3, [r3, #24]
 8019d44:	0c1b      	lsrs	r3, r3, #16
 8019d46:	f003 0104 	and.w	r1, r3, #4
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d4e:	f003 0210 	and.w	r2, r3, #16
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	430a      	orrs	r2, r1
 8019d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	69da      	ldr	r2, [r3, #28]
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	2201      	movs	r2, #1
 8019d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8019d78:	2300      	movs	r3, #0
}
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	3708      	adds	r7, #8
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bd80      	pop	{r7, pc}

08019d82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019d82:	b580      	push	{r7, lr}
 8019d84:	b082      	sub	sp, #8
 8019d86:	af00      	add	r7, sp, #0
 8019d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019d90:	2301      	movs	r3, #1
 8019d92:	e041      	b.n	8019e18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019d9a:	b2db      	uxtb	r3, r3
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d106      	bne.n	8019dae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2200      	movs	r2, #0
 8019da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f7fc f9ed 	bl	8016188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	2202      	movs	r2, #2
 8019db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681a      	ldr	r2, [r3, #0]
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	3304      	adds	r3, #4
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	4610      	mov	r0, r2
 8019dc2:	f000 fd09 	bl	801a7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	2201      	movs	r2, #1
 8019dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2201      	movs	r2, #1
 8019dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	2201      	movs	r2, #1
 8019dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	2201      	movs	r2, #1
 8019de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	2201      	movs	r2, #1
 8019dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2201      	movs	r2, #1
 8019df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	2201      	movs	r2, #1
 8019dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2201      	movs	r2, #1
 8019e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	2201      	movs	r2, #1
 8019e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	2201      	movs	r2, #1
 8019e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019e16:	2300      	movs	r3, #0
}
 8019e18:	4618      	mov	r0, r3
 8019e1a:	3708      	adds	r7, #8
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}

08019e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019e20:	b480      	push	{r7}
 8019e22:	b085      	sub	sp, #20
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	2b01      	cmp	r3, #1
 8019e32:	d001      	beq.n	8019e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019e34:	2301      	movs	r3, #1
 8019e36:	e04e      	b.n	8019ed6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2202      	movs	r2, #2
 8019e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	68da      	ldr	r2, [r3, #12]
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	f042 0201 	orr.w	r2, r2, #1
 8019e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	4a23      	ldr	r2, [pc, #140]	; (8019ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8019e56:	4293      	cmp	r3, r2
 8019e58:	d022      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019e62:	d01d      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	4a1f      	ldr	r2, [pc, #124]	; (8019ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	d018      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	4a1e      	ldr	r2, [pc, #120]	; (8019eec <HAL_TIM_Base_Start_IT+0xcc>)
 8019e74:	4293      	cmp	r3, r2
 8019e76:	d013      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	4a1c      	ldr	r2, [pc, #112]	; (8019ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	d00e      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	4a1b      	ldr	r2, [pc, #108]	; (8019ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8019e88:	4293      	cmp	r3, r2
 8019e8a:	d009      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4a19      	ldr	r2, [pc, #100]	; (8019ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8019e92:	4293      	cmp	r3, r2
 8019e94:	d004      	beq.n	8019ea0 <HAL_TIM_Base_Start_IT+0x80>
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	4a18      	ldr	r2, [pc, #96]	; (8019efc <HAL_TIM_Base_Start_IT+0xdc>)
 8019e9c:	4293      	cmp	r3, r2
 8019e9e:	d111      	bne.n	8019ec4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	689b      	ldr	r3, [r3, #8]
 8019ea6:	f003 0307 	and.w	r3, r3, #7
 8019eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	2b06      	cmp	r3, #6
 8019eb0:	d010      	beq.n	8019ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	681a      	ldr	r2, [r3, #0]
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	f042 0201 	orr.w	r2, r2, #1
 8019ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019ec2:	e007      	b.n	8019ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	681a      	ldr	r2, [r3, #0]
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	f042 0201 	orr.w	r2, r2, #1
 8019ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019ed4:	2300      	movs	r3, #0
}
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3714      	adds	r7, #20
 8019eda:	46bd      	mov	sp, r7
 8019edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee0:	4770      	bx	lr
 8019ee2:	bf00      	nop
 8019ee4:	40010000 	.word	0x40010000
 8019ee8:	40000400 	.word	0x40000400
 8019eec:	40000800 	.word	0x40000800
 8019ef0:	40000c00 	.word	0x40000c00
 8019ef4:	40010400 	.word	0x40010400
 8019ef8:	40014000 	.word	0x40014000
 8019efc:	40001800 	.word	0x40001800

08019f00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8019f00:	b480      	push	{r7}
 8019f02:	b083      	sub	sp, #12
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	68da      	ldr	r2, [r3, #12]
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	f022 0201 	bic.w	r2, r2, #1
 8019f16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	6a1a      	ldr	r2, [r3, #32]
 8019f1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8019f22:	4013      	ands	r3, r2
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d10f      	bne.n	8019f48 <HAL_TIM_Base_Stop_IT+0x48>
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	6a1a      	ldr	r2, [r3, #32]
 8019f2e:	f240 4344 	movw	r3, #1092	; 0x444
 8019f32:	4013      	ands	r3, r2
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d107      	bne.n	8019f48 <HAL_TIM_Base_Stop_IT+0x48>
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	681a      	ldr	r2, [r3, #0]
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	f022 0201 	bic.w	r2, r2, #1
 8019f46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2201      	movs	r2, #1
 8019f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8019f50:	2300      	movs	r3, #0
}
 8019f52:	4618      	mov	r0, r3
 8019f54:	370c      	adds	r7, #12
 8019f56:	46bd      	mov	sp, r7
 8019f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5c:	4770      	bx	lr

08019f5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019f5e:	b580      	push	{r7, lr}
 8019f60:	b082      	sub	sp, #8
 8019f62:	af00      	add	r7, sp, #0
 8019f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d101      	bne.n	8019f70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019f6c:	2301      	movs	r3, #1
 8019f6e:	e041      	b.n	8019ff4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019f76:	b2db      	uxtb	r3, r3
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d106      	bne.n	8019f8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	2200      	movs	r2, #0
 8019f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019f84:	6878      	ldr	r0, [r7, #4]
 8019f86:	f000 f839 	bl	8019ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	2202      	movs	r2, #2
 8019f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681a      	ldr	r2, [r3, #0]
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	3304      	adds	r3, #4
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	4610      	mov	r0, r2
 8019f9e:	f000 fc1b 	bl	801a7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	2201      	movs	r2, #1
 8019fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	2201      	movs	r2, #1
 8019fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2201      	movs	r2, #1
 8019fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	2201      	movs	r2, #1
 8019fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	2201      	movs	r2, #1
 8019fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2201      	movs	r2, #1
 8019fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2201      	movs	r2, #1
 8019fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	2201      	movs	r2, #1
 8019fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	2201      	movs	r2, #1
 8019fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2201      	movs	r2, #1
 8019fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019ff2:	2300      	movs	r3, #0
}
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	3708      	adds	r7, #8
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}

08019ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8019ffc:	b480      	push	{r7}
 8019ffe:	b083      	sub	sp, #12
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801a004:	bf00      	nop
 801a006:	370c      	adds	r7, #12
 801a008:	46bd      	mov	sp, r7
 801a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00e:	4770      	bx	lr

0801a010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b084      	sub	sp, #16
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a01a:	683b      	ldr	r3, [r7, #0]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d109      	bne.n	801a034 <HAL_TIM_PWM_Start+0x24>
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a026:	b2db      	uxtb	r3, r3
 801a028:	2b01      	cmp	r3, #1
 801a02a:	bf14      	ite	ne
 801a02c:	2301      	movne	r3, #1
 801a02e:	2300      	moveq	r3, #0
 801a030:	b2db      	uxtb	r3, r3
 801a032:	e022      	b.n	801a07a <HAL_TIM_PWM_Start+0x6a>
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	2b04      	cmp	r3, #4
 801a038:	d109      	bne.n	801a04e <HAL_TIM_PWM_Start+0x3e>
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a040:	b2db      	uxtb	r3, r3
 801a042:	2b01      	cmp	r3, #1
 801a044:	bf14      	ite	ne
 801a046:	2301      	movne	r3, #1
 801a048:	2300      	moveq	r3, #0
 801a04a:	b2db      	uxtb	r3, r3
 801a04c:	e015      	b.n	801a07a <HAL_TIM_PWM_Start+0x6a>
 801a04e:	683b      	ldr	r3, [r7, #0]
 801a050:	2b08      	cmp	r3, #8
 801a052:	d109      	bne.n	801a068 <HAL_TIM_PWM_Start+0x58>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a05a:	b2db      	uxtb	r3, r3
 801a05c:	2b01      	cmp	r3, #1
 801a05e:	bf14      	ite	ne
 801a060:	2301      	movne	r3, #1
 801a062:	2300      	moveq	r3, #0
 801a064:	b2db      	uxtb	r3, r3
 801a066:	e008      	b.n	801a07a <HAL_TIM_PWM_Start+0x6a>
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a06e:	b2db      	uxtb	r3, r3
 801a070:	2b01      	cmp	r3, #1
 801a072:	bf14      	ite	ne
 801a074:	2301      	movne	r3, #1
 801a076:	2300      	moveq	r3, #0
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d001      	beq.n	801a082 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801a07e:	2301      	movs	r3, #1
 801a080:	e07c      	b.n	801a17c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a082:	683b      	ldr	r3, [r7, #0]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d104      	bne.n	801a092 <HAL_TIM_PWM_Start+0x82>
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2202      	movs	r2, #2
 801a08c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a090:	e013      	b.n	801a0ba <HAL_TIM_PWM_Start+0xaa>
 801a092:	683b      	ldr	r3, [r7, #0]
 801a094:	2b04      	cmp	r3, #4
 801a096:	d104      	bne.n	801a0a2 <HAL_TIM_PWM_Start+0x92>
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	2202      	movs	r2, #2
 801a09c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a0a0:	e00b      	b.n	801a0ba <HAL_TIM_PWM_Start+0xaa>
 801a0a2:	683b      	ldr	r3, [r7, #0]
 801a0a4:	2b08      	cmp	r3, #8
 801a0a6:	d104      	bne.n	801a0b2 <HAL_TIM_PWM_Start+0xa2>
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2202      	movs	r2, #2
 801a0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a0b0:	e003      	b.n	801a0ba <HAL_TIM_PWM_Start+0xaa>
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	2202      	movs	r2, #2
 801a0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	2201      	movs	r2, #1
 801a0c0:	6839      	ldr	r1, [r7, #0]
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	f000 fe7e 	bl	801adc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	4a2d      	ldr	r2, [pc, #180]	; (801a184 <HAL_TIM_PWM_Start+0x174>)
 801a0ce:	4293      	cmp	r3, r2
 801a0d0:	d004      	beq.n	801a0dc <HAL_TIM_PWM_Start+0xcc>
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	4a2c      	ldr	r2, [pc, #176]	; (801a188 <HAL_TIM_PWM_Start+0x178>)
 801a0d8:	4293      	cmp	r3, r2
 801a0da:	d101      	bne.n	801a0e0 <HAL_TIM_PWM_Start+0xd0>
 801a0dc:	2301      	movs	r3, #1
 801a0de:	e000      	b.n	801a0e2 <HAL_TIM_PWM_Start+0xd2>
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d007      	beq.n	801a0f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a0f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	4a22      	ldr	r2, [pc, #136]	; (801a184 <HAL_TIM_PWM_Start+0x174>)
 801a0fc:	4293      	cmp	r3, r2
 801a0fe:	d022      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a108:	d01d      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4a1f      	ldr	r2, [pc, #124]	; (801a18c <HAL_TIM_PWM_Start+0x17c>)
 801a110:	4293      	cmp	r3, r2
 801a112:	d018      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	4a1d      	ldr	r2, [pc, #116]	; (801a190 <HAL_TIM_PWM_Start+0x180>)
 801a11a:	4293      	cmp	r3, r2
 801a11c:	d013      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	4a1c      	ldr	r2, [pc, #112]	; (801a194 <HAL_TIM_PWM_Start+0x184>)
 801a124:	4293      	cmp	r3, r2
 801a126:	d00e      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	4a16      	ldr	r2, [pc, #88]	; (801a188 <HAL_TIM_PWM_Start+0x178>)
 801a12e:	4293      	cmp	r3, r2
 801a130:	d009      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	4a18      	ldr	r2, [pc, #96]	; (801a198 <HAL_TIM_PWM_Start+0x188>)
 801a138:	4293      	cmp	r3, r2
 801a13a:	d004      	beq.n	801a146 <HAL_TIM_PWM_Start+0x136>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	4a16      	ldr	r2, [pc, #88]	; (801a19c <HAL_TIM_PWM_Start+0x18c>)
 801a142:	4293      	cmp	r3, r2
 801a144:	d111      	bne.n	801a16a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	689b      	ldr	r3, [r3, #8]
 801a14c:	f003 0307 	and.w	r3, r3, #7
 801a150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	2b06      	cmp	r3, #6
 801a156:	d010      	beq.n	801a17a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	681a      	ldr	r2, [r3, #0]
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	f042 0201 	orr.w	r2, r2, #1
 801a166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a168:	e007      	b.n	801a17a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	681a      	ldr	r2, [r3, #0]
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	f042 0201 	orr.w	r2, r2, #1
 801a178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a17a:	2300      	movs	r3, #0
}
 801a17c:	4618      	mov	r0, r3
 801a17e:	3710      	adds	r7, #16
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}
 801a184:	40010000 	.word	0x40010000
 801a188:	40010400 	.word	0x40010400
 801a18c:	40000400 	.word	0x40000400
 801a190:	40000800 	.word	0x40000800
 801a194:	40000c00 	.word	0x40000c00
 801a198:	40014000 	.word	0x40014000
 801a19c:	40001800 	.word	0x40001800

0801a1a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b082      	sub	sp, #8
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	6839      	ldr	r1, [r7, #0]
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f000 fe06 	bl	801adc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	4a2e      	ldr	r2, [pc, #184]	; (801a278 <HAL_TIM_PWM_Stop+0xd8>)
 801a1be:	4293      	cmp	r3, r2
 801a1c0:	d004      	beq.n	801a1cc <HAL_TIM_PWM_Stop+0x2c>
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	4a2d      	ldr	r2, [pc, #180]	; (801a27c <HAL_TIM_PWM_Stop+0xdc>)
 801a1c8:	4293      	cmp	r3, r2
 801a1ca:	d101      	bne.n	801a1d0 <HAL_TIM_PWM_Stop+0x30>
 801a1cc:	2301      	movs	r3, #1
 801a1ce:	e000      	b.n	801a1d2 <HAL_TIM_PWM_Stop+0x32>
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d017      	beq.n	801a206 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	6a1a      	ldr	r2, [r3, #32]
 801a1dc:	f241 1311 	movw	r3, #4369	; 0x1111
 801a1e0:	4013      	ands	r3, r2
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d10f      	bne.n	801a206 <HAL_TIM_PWM_Stop+0x66>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	6a1a      	ldr	r2, [r3, #32]
 801a1ec:	f240 4344 	movw	r3, #1092	; 0x444
 801a1f0:	4013      	ands	r3, r2
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d107      	bne.n	801a206 <HAL_TIM_PWM_Stop+0x66>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	6a1a      	ldr	r2, [r3, #32]
 801a20c:	f241 1311 	movw	r3, #4369	; 0x1111
 801a210:	4013      	ands	r3, r2
 801a212:	2b00      	cmp	r3, #0
 801a214:	d10f      	bne.n	801a236 <HAL_TIM_PWM_Stop+0x96>
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	6a1a      	ldr	r2, [r3, #32]
 801a21c:	f240 4344 	movw	r3, #1092	; 0x444
 801a220:	4013      	ands	r3, r2
 801a222:	2b00      	cmp	r3, #0
 801a224:	d107      	bne.n	801a236 <HAL_TIM_PWM_Stop+0x96>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	681a      	ldr	r2, [r3, #0]
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	f022 0201 	bic.w	r2, r2, #1
 801a234:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d104      	bne.n	801a246 <HAL_TIM_PWM_Stop+0xa6>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	2201      	movs	r2, #1
 801a240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a244:	e013      	b.n	801a26e <HAL_TIM_PWM_Stop+0xce>
 801a246:	683b      	ldr	r3, [r7, #0]
 801a248:	2b04      	cmp	r3, #4
 801a24a:	d104      	bne.n	801a256 <HAL_TIM_PWM_Stop+0xb6>
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2201      	movs	r2, #1
 801a250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a254:	e00b      	b.n	801a26e <HAL_TIM_PWM_Stop+0xce>
 801a256:	683b      	ldr	r3, [r7, #0]
 801a258:	2b08      	cmp	r3, #8
 801a25a:	d104      	bne.n	801a266 <HAL_TIM_PWM_Stop+0xc6>
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2201      	movs	r2, #1
 801a260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a264:	e003      	b.n	801a26e <HAL_TIM_PWM_Stop+0xce>
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	2201      	movs	r2, #1
 801a26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 801a26e:	2300      	movs	r3, #0
}
 801a270:	4618      	mov	r0, r3
 801a272:	3708      	adds	r7, #8
 801a274:	46bd      	mov	sp, r7
 801a276:	bd80      	pop	{r7, pc}
 801a278:	40010000 	.word	0x40010000
 801a27c:	40010400 	.word	0x40010400

0801a280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b084      	sub	sp, #16
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	68db      	ldr	r3, [r3, #12]
 801a28e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	691b      	ldr	r3, [r3, #16]
 801a296:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801a298:	68bb      	ldr	r3, [r7, #8]
 801a29a:	f003 0302 	and.w	r3, r3, #2
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d020      	beq.n	801a2e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	f003 0302 	and.w	r3, r3, #2
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d01b      	beq.n	801a2e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	f06f 0202 	mvn.w	r2, #2
 801a2b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	2201      	movs	r2, #1
 801a2ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	699b      	ldr	r3, [r3, #24]
 801a2c2:	f003 0303 	and.w	r3, r3, #3
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d003      	beq.n	801a2d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f000 fa65 	bl	801a79a <HAL_TIM_IC_CaptureCallback>
 801a2d0:	e005      	b.n	801a2de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f000 fa57 	bl	801a786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a2d8:	6878      	ldr	r0, [r7, #4]
 801a2da:	f000 fa68 	bl	801a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	2200      	movs	r2, #0
 801a2e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801a2e4:	68bb      	ldr	r3, [r7, #8]
 801a2e6:	f003 0304 	and.w	r3, r3, #4
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d020      	beq.n	801a330 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	f003 0304 	and.w	r3, r3, #4
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d01b      	beq.n	801a330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	f06f 0204 	mvn.w	r2, #4
 801a300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	2202      	movs	r2, #2
 801a306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	699b      	ldr	r3, [r3, #24]
 801a30e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a312:	2b00      	cmp	r3, #0
 801a314:	d003      	beq.n	801a31e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a316:	6878      	ldr	r0, [r7, #4]
 801a318:	f000 fa3f 	bl	801a79a <HAL_TIM_IC_CaptureCallback>
 801a31c:	e005      	b.n	801a32a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a31e:	6878      	ldr	r0, [r7, #4]
 801a320:	f000 fa31 	bl	801a786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	f000 fa42 	bl	801a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	2200      	movs	r2, #0
 801a32e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801a330:	68bb      	ldr	r3, [r7, #8]
 801a332:	f003 0308 	and.w	r3, r3, #8
 801a336:	2b00      	cmp	r3, #0
 801a338:	d020      	beq.n	801a37c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	f003 0308 	and.w	r3, r3, #8
 801a340:	2b00      	cmp	r3, #0
 801a342:	d01b      	beq.n	801a37c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	f06f 0208 	mvn.w	r2, #8
 801a34c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	2204      	movs	r2, #4
 801a352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	69db      	ldr	r3, [r3, #28]
 801a35a:	f003 0303 	and.w	r3, r3, #3
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d003      	beq.n	801a36a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f000 fa19 	bl	801a79a <HAL_TIM_IC_CaptureCallback>
 801a368:	e005      	b.n	801a376 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	f000 fa0b 	bl	801a786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a370:	6878      	ldr	r0, [r7, #4]
 801a372:	f000 fa1c 	bl	801a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	2200      	movs	r2, #0
 801a37a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801a37c:	68bb      	ldr	r3, [r7, #8]
 801a37e:	f003 0310 	and.w	r3, r3, #16
 801a382:	2b00      	cmp	r3, #0
 801a384:	d020      	beq.n	801a3c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	f003 0310 	and.w	r3, r3, #16
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d01b      	beq.n	801a3c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	f06f 0210 	mvn.w	r2, #16
 801a398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2208      	movs	r2, #8
 801a39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	69db      	ldr	r3, [r3, #28]
 801a3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d003      	beq.n	801a3b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a3ae:	6878      	ldr	r0, [r7, #4]
 801a3b0:	f000 f9f3 	bl	801a79a <HAL_TIM_IC_CaptureCallback>
 801a3b4:	e005      	b.n	801a3c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a3b6:	6878      	ldr	r0, [r7, #4]
 801a3b8:	f000 f9e5 	bl	801a786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a3bc:	6878      	ldr	r0, [r7, #4]
 801a3be:	f000 f9f6 	bl	801a7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	f003 0301 	and.w	r3, r3, #1
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d00c      	beq.n	801a3ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	f003 0301 	and.w	r3, r3, #1
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d007      	beq.n	801a3ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	f06f 0201 	mvn.w	r2, #1
 801a3e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f000 f9c3 	bl	801a772 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801a3ec:	68bb      	ldr	r3, [r7, #8]
 801a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d00c      	beq.n	801a410 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d007      	beq.n	801a410 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f000 fd86 	bl	801af1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801a410:	68bb      	ldr	r3, [r7, #8]
 801a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a416:	2b00      	cmp	r3, #0
 801a418:	d00c      	beq.n	801a434 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a420:	2b00      	cmp	r3, #0
 801a422:	d007      	beq.n	801a434 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a42e:	6878      	ldr	r0, [r7, #4]
 801a430:	f000 f9c7 	bl	801a7c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801a434:	68bb      	ldr	r3, [r7, #8]
 801a436:	f003 0320 	and.w	r3, r3, #32
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d00c      	beq.n	801a458 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	f003 0320 	and.w	r3, r3, #32
 801a444:	2b00      	cmp	r3, #0
 801a446:	d007      	beq.n	801a458 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	f06f 0220 	mvn.w	r2, #32
 801a450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	f000 fd58 	bl	801af08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a458:	bf00      	nop
 801a45a:	3710      	adds	r7, #16
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}

0801a460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b086      	sub	sp, #24
 801a464:	af00      	add	r7, sp, #0
 801a466:	60f8      	str	r0, [r7, #12]
 801a468:	60b9      	str	r1, [r7, #8]
 801a46a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a46c:	2300      	movs	r3, #0
 801a46e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a476:	2b01      	cmp	r3, #1
 801a478:	d101      	bne.n	801a47e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801a47a:	2302      	movs	r3, #2
 801a47c:	e0ae      	b.n	801a5dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	2201      	movs	r2, #1
 801a482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	2b0c      	cmp	r3, #12
 801a48a:	f200 809f 	bhi.w	801a5cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 801a48e:	a201      	add	r2, pc, #4	; (adr r2, 801a494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a494:	0801a4c9 	.word	0x0801a4c9
 801a498:	0801a5cd 	.word	0x0801a5cd
 801a49c:	0801a5cd 	.word	0x0801a5cd
 801a4a0:	0801a5cd 	.word	0x0801a5cd
 801a4a4:	0801a509 	.word	0x0801a509
 801a4a8:	0801a5cd 	.word	0x0801a5cd
 801a4ac:	0801a5cd 	.word	0x0801a5cd
 801a4b0:	0801a5cd 	.word	0x0801a5cd
 801a4b4:	0801a54b 	.word	0x0801a54b
 801a4b8:	0801a5cd 	.word	0x0801a5cd
 801a4bc:	0801a5cd 	.word	0x0801a5cd
 801a4c0:	0801a5cd 	.word	0x0801a5cd
 801a4c4:	0801a58b 	.word	0x0801a58b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	68b9      	ldr	r1, [r7, #8]
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f000 fa2e 	bl	801a930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	699a      	ldr	r2, [r3, #24]
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	f042 0208 	orr.w	r2, r2, #8
 801a4e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	699a      	ldr	r2, [r3, #24]
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f022 0204 	bic.w	r2, r2, #4
 801a4f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	6999      	ldr	r1, [r3, #24]
 801a4fa:	68bb      	ldr	r3, [r7, #8]
 801a4fc:	691a      	ldr	r2, [r3, #16]
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	430a      	orrs	r2, r1
 801a504:	619a      	str	r2, [r3, #24]
      break;
 801a506:	e064      	b.n	801a5d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	68b9      	ldr	r1, [r7, #8]
 801a50e:	4618      	mov	r0, r3
 801a510:	f000 fa7e 	bl	801aa10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	699a      	ldr	r2, [r3, #24]
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	699a      	ldr	r2, [r3, #24]
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	6999      	ldr	r1, [r3, #24]
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	691b      	ldr	r3, [r3, #16]
 801a53e:	021a      	lsls	r2, r3, #8
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	430a      	orrs	r2, r1
 801a546:	619a      	str	r2, [r3, #24]
      break;
 801a548:	e043      	b.n	801a5d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	68b9      	ldr	r1, [r7, #8]
 801a550:	4618      	mov	r0, r3
 801a552:	f000 fad3 	bl	801aafc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	69da      	ldr	r2, [r3, #28]
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	f042 0208 	orr.w	r2, r2, #8
 801a564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	69da      	ldr	r2, [r3, #28]
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	f022 0204 	bic.w	r2, r2, #4
 801a574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	69d9      	ldr	r1, [r3, #28]
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	691a      	ldr	r2, [r3, #16]
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	430a      	orrs	r2, r1
 801a586:	61da      	str	r2, [r3, #28]
      break;
 801a588:	e023      	b.n	801a5d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	68b9      	ldr	r1, [r7, #8]
 801a590:	4618      	mov	r0, r3
 801a592:	f000 fb27 	bl	801abe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	69da      	ldr	r2, [r3, #28]
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a5a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	69da      	ldr	r2, [r3, #28]
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a5b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	69d9      	ldr	r1, [r3, #28]
 801a5bc:	68bb      	ldr	r3, [r7, #8]
 801a5be:	691b      	ldr	r3, [r3, #16]
 801a5c0:	021a      	lsls	r2, r3, #8
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	430a      	orrs	r2, r1
 801a5c8:	61da      	str	r2, [r3, #28]
      break;
 801a5ca:	e002      	b.n	801a5d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	75fb      	strb	r3, [r7, #23]
      break;
 801a5d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a5da:	7dfb      	ldrb	r3, [r7, #23]
}
 801a5dc:	4618      	mov	r0, r3
 801a5de:	3718      	adds	r7, #24
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}

0801a5e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b084      	sub	sp, #16
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
 801a5ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a5f8:	2b01      	cmp	r3, #1
 801a5fa:	d101      	bne.n	801a600 <HAL_TIM_ConfigClockSource+0x1c>
 801a5fc:	2302      	movs	r3, #2
 801a5fe:	e0b4      	b.n	801a76a <HAL_TIM_ConfigClockSource+0x186>
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	2201      	movs	r2, #1
 801a604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	2202      	movs	r2, #2
 801a60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	689b      	ldr	r3, [r3, #8]
 801a616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a618:	68bb      	ldr	r3, [r7, #8]
 801a61a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801a61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a620:	68bb      	ldr	r3, [r7, #8]
 801a622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	68ba      	ldr	r2, [r7, #8]
 801a62e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a638:	d03e      	beq.n	801a6b8 <HAL_TIM_ConfigClockSource+0xd4>
 801a63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a63e:	f200 8087 	bhi.w	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a646:	f000 8086 	beq.w	801a756 <HAL_TIM_ConfigClockSource+0x172>
 801a64a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a64e:	d87f      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a650:	2b70      	cmp	r3, #112	; 0x70
 801a652:	d01a      	beq.n	801a68a <HAL_TIM_ConfigClockSource+0xa6>
 801a654:	2b70      	cmp	r3, #112	; 0x70
 801a656:	d87b      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a658:	2b60      	cmp	r3, #96	; 0x60
 801a65a:	d050      	beq.n	801a6fe <HAL_TIM_ConfigClockSource+0x11a>
 801a65c:	2b60      	cmp	r3, #96	; 0x60
 801a65e:	d877      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a660:	2b50      	cmp	r3, #80	; 0x50
 801a662:	d03c      	beq.n	801a6de <HAL_TIM_ConfigClockSource+0xfa>
 801a664:	2b50      	cmp	r3, #80	; 0x50
 801a666:	d873      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a668:	2b40      	cmp	r3, #64	; 0x40
 801a66a:	d058      	beq.n	801a71e <HAL_TIM_ConfigClockSource+0x13a>
 801a66c:	2b40      	cmp	r3, #64	; 0x40
 801a66e:	d86f      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a670:	2b30      	cmp	r3, #48	; 0x30
 801a672:	d064      	beq.n	801a73e <HAL_TIM_ConfigClockSource+0x15a>
 801a674:	2b30      	cmp	r3, #48	; 0x30
 801a676:	d86b      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a678:	2b20      	cmp	r3, #32
 801a67a:	d060      	beq.n	801a73e <HAL_TIM_ConfigClockSource+0x15a>
 801a67c:	2b20      	cmp	r3, #32
 801a67e:	d867      	bhi.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
 801a680:	2b00      	cmp	r3, #0
 801a682:	d05c      	beq.n	801a73e <HAL_TIM_ConfigClockSource+0x15a>
 801a684:	2b10      	cmp	r3, #16
 801a686:	d05a      	beq.n	801a73e <HAL_TIM_ConfigClockSource+0x15a>
 801a688:	e062      	b.n	801a750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a69a:	f000 fb73 	bl	801ad84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	689b      	ldr	r3, [r3, #8]
 801a6a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801a6ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	68ba      	ldr	r2, [r7, #8]
 801a6b4:	609a      	str	r2, [r3, #8]
      break;
 801a6b6:	e04f      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a6bc:	683b      	ldr	r3, [r7, #0]
 801a6be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a6c4:	683b      	ldr	r3, [r7, #0]
 801a6c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a6c8:	f000 fb5c 	bl	801ad84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	689a      	ldr	r2, [r3, #8]
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a6da:	609a      	str	r2, [r3, #8]
      break;
 801a6dc:	e03c      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a6e6:	683b      	ldr	r3, [r7, #0]
 801a6e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a6ea:	461a      	mov	r2, r3
 801a6ec:	f000 fad0 	bl	801ac90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	2150      	movs	r1, #80	; 0x50
 801a6f6:	4618      	mov	r0, r3
 801a6f8:	f000 fb29 	bl	801ad4e <TIM_ITRx_SetConfig>
      break;
 801a6fc:	e02c      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a70a:	461a      	mov	r2, r3
 801a70c:	f000 faef 	bl	801acee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	2160      	movs	r1, #96	; 0x60
 801a716:	4618      	mov	r0, r3
 801a718:	f000 fb19 	bl	801ad4e <TIM_ITRx_SetConfig>
      break;
 801a71c:	e01c      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a726:	683b      	ldr	r3, [r7, #0]
 801a728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a72a:	461a      	mov	r2, r3
 801a72c:	f000 fab0 	bl	801ac90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	2140      	movs	r1, #64	; 0x40
 801a736:	4618      	mov	r0, r3
 801a738:	f000 fb09 	bl	801ad4e <TIM_ITRx_SetConfig>
      break;
 801a73c:	e00c      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681a      	ldr	r2, [r3, #0]
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	4619      	mov	r1, r3
 801a748:	4610      	mov	r0, r2
 801a74a:	f000 fb00 	bl	801ad4e <TIM_ITRx_SetConfig>
      break;
 801a74e:	e003      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801a750:	2301      	movs	r3, #1
 801a752:	73fb      	strb	r3, [r7, #15]
      break;
 801a754:	e000      	b.n	801a758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801a756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	2201      	movs	r2, #1
 801a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	2200      	movs	r2, #0
 801a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a768:	7bfb      	ldrb	r3, [r7, #15]
}
 801a76a:	4618      	mov	r0, r3
 801a76c:	3710      	adds	r7, #16
 801a76e:	46bd      	mov	sp, r7
 801a770:	bd80      	pop	{r7, pc}

0801a772 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a772:	b480      	push	{r7}
 801a774:	b083      	sub	sp, #12
 801a776:	af00      	add	r7, sp, #0
 801a778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801a77a:	bf00      	nop
 801a77c:	370c      	adds	r7, #12
 801a77e:	46bd      	mov	sp, r7
 801a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a784:	4770      	bx	lr

0801a786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a786:	b480      	push	{r7}
 801a788:	b083      	sub	sp, #12
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a78e:	bf00      	nop
 801a790:	370c      	adds	r7, #12
 801a792:	46bd      	mov	sp, r7
 801a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a798:	4770      	bx	lr

0801a79a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a79a:	b480      	push	{r7}
 801a79c:	b083      	sub	sp, #12
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a7a2:	bf00      	nop
 801a7a4:	370c      	adds	r7, #12
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ac:	4770      	bx	lr

0801a7ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a7ae:	b480      	push	{r7}
 801a7b0:	b083      	sub	sp, #12
 801a7b2:	af00      	add	r7, sp, #0
 801a7b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a7b6:	bf00      	nop
 801a7b8:	370c      	adds	r7, #12
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c0:	4770      	bx	lr

0801a7c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a7c2:	b480      	push	{r7}
 801a7c4:	b083      	sub	sp, #12
 801a7c6:	af00      	add	r7, sp, #0
 801a7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a7ca:	bf00      	nop
 801a7cc:	370c      	adds	r7, #12
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d4:	4770      	bx	lr
	...

0801a7d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a7d8:	b480      	push	{r7}
 801a7da:	b085      	sub	sp, #20
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	6078      	str	r0, [r7, #4]
 801a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	4a46      	ldr	r2, [pc, #280]	; (801a904 <TIM_Base_SetConfig+0x12c>)
 801a7ec:	4293      	cmp	r3, r2
 801a7ee:	d013      	beq.n	801a818 <TIM_Base_SetConfig+0x40>
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a7f6:	d00f      	beq.n	801a818 <TIM_Base_SetConfig+0x40>
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	4a43      	ldr	r2, [pc, #268]	; (801a908 <TIM_Base_SetConfig+0x130>)
 801a7fc:	4293      	cmp	r3, r2
 801a7fe:	d00b      	beq.n	801a818 <TIM_Base_SetConfig+0x40>
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	4a42      	ldr	r2, [pc, #264]	; (801a90c <TIM_Base_SetConfig+0x134>)
 801a804:	4293      	cmp	r3, r2
 801a806:	d007      	beq.n	801a818 <TIM_Base_SetConfig+0x40>
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	4a41      	ldr	r2, [pc, #260]	; (801a910 <TIM_Base_SetConfig+0x138>)
 801a80c:	4293      	cmp	r3, r2
 801a80e:	d003      	beq.n	801a818 <TIM_Base_SetConfig+0x40>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	4a40      	ldr	r2, [pc, #256]	; (801a914 <TIM_Base_SetConfig+0x13c>)
 801a814:	4293      	cmp	r3, r2
 801a816:	d108      	bne.n	801a82a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a81e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a820:	683b      	ldr	r3, [r7, #0]
 801a822:	685b      	ldr	r3, [r3, #4]
 801a824:	68fa      	ldr	r2, [r7, #12]
 801a826:	4313      	orrs	r3, r2
 801a828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	4a35      	ldr	r2, [pc, #212]	; (801a904 <TIM_Base_SetConfig+0x12c>)
 801a82e:	4293      	cmp	r3, r2
 801a830:	d02b      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a838:	d027      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	4a32      	ldr	r2, [pc, #200]	; (801a908 <TIM_Base_SetConfig+0x130>)
 801a83e:	4293      	cmp	r3, r2
 801a840:	d023      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	4a31      	ldr	r2, [pc, #196]	; (801a90c <TIM_Base_SetConfig+0x134>)
 801a846:	4293      	cmp	r3, r2
 801a848:	d01f      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	4a30      	ldr	r2, [pc, #192]	; (801a910 <TIM_Base_SetConfig+0x138>)
 801a84e:	4293      	cmp	r3, r2
 801a850:	d01b      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	4a2f      	ldr	r2, [pc, #188]	; (801a914 <TIM_Base_SetConfig+0x13c>)
 801a856:	4293      	cmp	r3, r2
 801a858:	d017      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	4a2e      	ldr	r2, [pc, #184]	; (801a918 <TIM_Base_SetConfig+0x140>)
 801a85e:	4293      	cmp	r3, r2
 801a860:	d013      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	4a2d      	ldr	r2, [pc, #180]	; (801a91c <TIM_Base_SetConfig+0x144>)
 801a866:	4293      	cmp	r3, r2
 801a868:	d00f      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	4a2c      	ldr	r2, [pc, #176]	; (801a920 <TIM_Base_SetConfig+0x148>)
 801a86e:	4293      	cmp	r3, r2
 801a870:	d00b      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	4a2b      	ldr	r2, [pc, #172]	; (801a924 <TIM_Base_SetConfig+0x14c>)
 801a876:	4293      	cmp	r3, r2
 801a878:	d007      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	4a2a      	ldr	r2, [pc, #168]	; (801a928 <TIM_Base_SetConfig+0x150>)
 801a87e:	4293      	cmp	r3, r2
 801a880:	d003      	beq.n	801a88a <TIM_Base_SetConfig+0xb2>
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	4a29      	ldr	r2, [pc, #164]	; (801a92c <TIM_Base_SetConfig+0x154>)
 801a886:	4293      	cmp	r3, r2
 801a888:	d108      	bne.n	801a89c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	68db      	ldr	r3, [r3, #12]
 801a896:	68fa      	ldr	r2, [r7, #12]
 801a898:	4313      	orrs	r3, r2
 801a89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	695b      	ldr	r3, [r3, #20]
 801a8a6:	4313      	orrs	r3, r2
 801a8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	68fa      	ldr	r2, [r7, #12]
 801a8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a8b0:	683b      	ldr	r3, [r7, #0]
 801a8b2:	689a      	ldr	r2, [r3, #8]
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	681a      	ldr	r2, [r3, #0]
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	4a10      	ldr	r2, [pc, #64]	; (801a904 <TIM_Base_SetConfig+0x12c>)
 801a8c4:	4293      	cmp	r3, r2
 801a8c6:	d003      	beq.n	801a8d0 <TIM_Base_SetConfig+0xf8>
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	4a12      	ldr	r2, [pc, #72]	; (801a914 <TIM_Base_SetConfig+0x13c>)
 801a8cc:	4293      	cmp	r3, r2
 801a8ce:	d103      	bne.n	801a8d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a8d0:	683b      	ldr	r3, [r7, #0]
 801a8d2:	691a      	ldr	r2, [r3, #16]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	2201      	movs	r2, #1
 801a8dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	691b      	ldr	r3, [r3, #16]
 801a8e2:	f003 0301 	and.w	r3, r3, #1
 801a8e6:	2b01      	cmp	r3, #1
 801a8e8:	d105      	bne.n	801a8f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	691b      	ldr	r3, [r3, #16]
 801a8ee:	f023 0201 	bic.w	r2, r3, #1
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	611a      	str	r2, [r3, #16]
  }
}
 801a8f6:	bf00      	nop
 801a8f8:	3714      	adds	r7, #20
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a900:	4770      	bx	lr
 801a902:	bf00      	nop
 801a904:	40010000 	.word	0x40010000
 801a908:	40000400 	.word	0x40000400
 801a90c:	40000800 	.word	0x40000800
 801a910:	40000c00 	.word	0x40000c00
 801a914:	40010400 	.word	0x40010400
 801a918:	40014000 	.word	0x40014000
 801a91c:	40014400 	.word	0x40014400
 801a920:	40014800 	.word	0x40014800
 801a924:	40001800 	.word	0x40001800
 801a928:	40001c00 	.word	0x40001c00
 801a92c:	40002000 	.word	0x40002000

0801a930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a930:	b480      	push	{r7}
 801a932:	b087      	sub	sp, #28
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
 801a938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6a1b      	ldr	r3, [r3, #32]
 801a93e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	6a1b      	ldr	r3, [r3, #32]
 801a944:	f023 0201 	bic.w	r2, r3, #1
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	685b      	ldr	r3, [r3, #4]
 801a950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	699b      	ldr	r3, [r3, #24]
 801a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	f023 0303 	bic.w	r3, r3, #3
 801a966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a968:	683b      	ldr	r3, [r7, #0]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	68fa      	ldr	r2, [r7, #12]
 801a96e:	4313      	orrs	r3, r2
 801a970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a972:	697b      	ldr	r3, [r7, #20]
 801a974:	f023 0302 	bic.w	r3, r3, #2
 801a978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	689b      	ldr	r3, [r3, #8]
 801a97e:	697a      	ldr	r2, [r7, #20]
 801a980:	4313      	orrs	r3, r2
 801a982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	4a20      	ldr	r2, [pc, #128]	; (801aa08 <TIM_OC1_SetConfig+0xd8>)
 801a988:	4293      	cmp	r3, r2
 801a98a:	d003      	beq.n	801a994 <TIM_OC1_SetConfig+0x64>
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	4a1f      	ldr	r2, [pc, #124]	; (801aa0c <TIM_OC1_SetConfig+0xdc>)
 801a990:	4293      	cmp	r3, r2
 801a992:	d10c      	bne.n	801a9ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a994:	697b      	ldr	r3, [r7, #20]
 801a996:	f023 0308 	bic.w	r3, r3, #8
 801a99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a99c:	683b      	ldr	r3, [r7, #0]
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	697a      	ldr	r2, [r7, #20]
 801a9a2:	4313      	orrs	r3, r2
 801a9a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a9a6:	697b      	ldr	r3, [r7, #20]
 801a9a8:	f023 0304 	bic.w	r3, r3, #4
 801a9ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	4a15      	ldr	r2, [pc, #84]	; (801aa08 <TIM_OC1_SetConfig+0xd8>)
 801a9b2:	4293      	cmp	r3, r2
 801a9b4:	d003      	beq.n	801a9be <TIM_OC1_SetConfig+0x8e>
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	4a14      	ldr	r2, [pc, #80]	; (801aa0c <TIM_OC1_SetConfig+0xdc>)
 801a9ba:	4293      	cmp	r3, r2
 801a9bc:	d111      	bne.n	801a9e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a9be:	693b      	ldr	r3, [r7, #16]
 801a9c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a9c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a9c6:	693b      	ldr	r3, [r7, #16]
 801a9c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a9cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	695b      	ldr	r3, [r3, #20]
 801a9d2:	693a      	ldr	r2, [r7, #16]
 801a9d4:	4313      	orrs	r3, r2
 801a9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	699b      	ldr	r3, [r3, #24]
 801a9dc:	693a      	ldr	r2, [r7, #16]
 801a9de:	4313      	orrs	r3, r2
 801a9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	693a      	ldr	r2, [r7, #16]
 801a9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	68fa      	ldr	r2, [r7, #12]
 801a9ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a9ee:	683b      	ldr	r3, [r7, #0]
 801a9f0:	685a      	ldr	r2, [r3, #4]
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	697a      	ldr	r2, [r7, #20]
 801a9fa:	621a      	str	r2, [r3, #32]
}
 801a9fc:	bf00      	nop
 801a9fe:	371c      	adds	r7, #28
 801aa00:	46bd      	mov	sp, r7
 801aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa06:	4770      	bx	lr
 801aa08:	40010000 	.word	0x40010000
 801aa0c:	40010400 	.word	0x40010400

0801aa10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801aa10:	b480      	push	{r7}
 801aa12:	b087      	sub	sp, #28
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
 801aa18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	6a1b      	ldr	r3, [r3, #32]
 801aa1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6a1b      	ldr	r3, [r3, #32]
 801aa24:	f023 0210 	bic.w	r2, r3, #16
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	685b      	ldr	r3, [r3, #4]
 801aa30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	699b      	ldr	r3, [r3, #24]
 801aa36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aa3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801aa46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	021b      	lsls	r3, r3, #8
 801aa4e:	68fa      	ldr	r2, [r7, #12]
 801aa50:	4313      	orrs	r3, r2
 801aa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	f023 0320 	bic.w	r3, r3, #32
 801aa5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801aa5c:	683b      	ldr	r3, [r7, #0]
 801aa5e:	689b      	ldr	r3, [r3, #8]
 801aa60:	011b      	lsls	r3, r3, #4
 801aa62:	697a      	ldr	r2, [r7, #20]
 801aa64:	4313      	orrs	r3, r2
 801aa66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	4a22      	ldr	r2, [pc, #136]	; (801aaf4 <TIM_OC2_SetConfig+0xe4>)
 801aa6c:	4293      	cmp	r3, r2
 801aa6e:	d003      	beq.n	801aa78 <TIM_OC2_SetConfig+0x68>
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	4a21      	ldr	r2, [pc, #132]	; (801aaf8 <TIM_OC2_SetConfig+0xe8>)
 801aa74:	4293      	cmp	r3, r2
 801aa76:	d10d      	bne.n	801aa94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801aa78:	697b      	ldr	r3, [r7, #20]
 801aa7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801aa7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	68db      	ldr	r3, [r3, #12]
 801aa84:	011b      	lsls	r3, r3, #4
 801aa86:	697a      	ldr	r2, [r7, #20]
 801aa88:	4313      	orrs	r3, r2
 801aa8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aa92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	4a17      	ldr	r2, [pc, #92]	; (801aaf4 <TIM_OC2_SetConfig+0xe4>)
 801aa98:	4293      	cmp	r3, r2
 801aa9a:	d003      	beq.n	801aaa4 <TIM_OC2_SetConfig+0x94>
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	4a16      	ldr	r2, [pc, #88]	; (801aaf8 <TIM_OC2_SetConfig+0xe8>)
 801aaa0:	4293      	cmp	r3, r2
 801aaa2:	d113      	bne.n	801aacc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801aaa4:	693b      	ldr	r3, [r7, #16]
 801aaa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801aaaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801aaac:	693b      	ldr	r3, [r7, #16]
 801aaae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	695b      	ldr	r3, [r3, #20]
 801aab8:	009b      	lsls	r3, r3, #2
 801aaba:	693a      	ldr	r2, [r7, #16]
 801aabc:	4313      	orrs	r3, r2
 801aabe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801aac0:	683b      	ldr	r3, [r7, #0]
 801aac2:	699b      	ldr	r3, [r3, #24]
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	693a      	ldr	r2, [r7, #16]
 801aac8:	4313      	orrs	r3, r2
 801aaca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	693a      	ldr	r2, [r7, #16]
 801aad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	68fa      	ldr	r2, [r7, #12]
 801aad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	685a      	ldr	r2, [r3, #4]
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	697a      	ldr	r2, [r7, #20]
 801aae4:	621a      	str	r2, [r3, #32]
}
 801aae6:	bf00      	nop
 801aae8:	371c      	adds	r7, #28
 801aaea:	46bd      	mov	sp, r7
 801aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf0:	4770      	bx	lr
 801aaf2:	bf00      	nop
 801aaf4:	40010000 	.word	0x40010000
 801aaf8:	40010400 	.word	0x40010400

0801aafc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801aafc:	b480      	push	{r7}
 801aafe:	b087      	sub	sp, #28
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
 801ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	6a1b      	ldr	r3, [r3, #32]
 801ab0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	6a1b      	ldr	r3, [r3, #32]
 801ab10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	685b      	ldr	r3, [r3, #4]
 801ab1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	69db      	ldr	r3, [r3, #28]
 801ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ab2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	f023 0303 	bic.w	r3, r3, #3
 801ab32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	68fa      	ldr	r2, [r7, #12]
 801ab3a:	4313      	orrs	r3, r2
 801ab3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ab44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	689b      	ldr	r3, [r3, #8]
 801ab4a:	021b      	lsls	r3, r3, #8
 801ab4c:	697a      	ldr	r2, [r7, #20]
 801ab4e:	4313      	orrs	r3, r2
 801ab50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	4a21      	ldr	r2, [pc, #132]	; (801abdc <TIM_OC3_SetConfig+0xe0>)
 801ab56:	4293      	cmp	r3, r2
 801ab58:	d003      	beq.n	801ab62 <TIM_OC3_SetConfig+0x66>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	4a20      	ldr	r2, [pc, #128]	; (801abe0 <TIM_OC3_SetConfig+0xe4>)
 801ab5e:	4293      	cmp	r3, r2
 801ab60:	d10d      	bne.n	801ab7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ab62:	697b      	ldr	r3, [r7, #20]
 801ab64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ab68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ab6a:	683b      	ldr	r3, [r7, #0]
 801ab6c:	68db      	ldr	r3, [r3, #12]
 801ab6e:	021b      	lsls	r3, r3, #8
 801ab70:	697a      	ldr	r2, [r7, #20]
 801ab72:	4313      	orrs	r3, r2
 801ab74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ab76:	697b      	ldr	r3, [r7, #20]
 801ab78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ab7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	4a16      	ldr	r2, [pc, #88]	; (801abdc <TIM_OC3_SetConfig+0xe0>)
 801ab82:	4293      	cmp	r3, r2
 801ab84:	d003      	beq.n	801ab8e <TIM_OC3_SetConfig+0x92>
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	4a15      	ldr	r2, [pc, #84]	; (801abe0 <TIM_OC3_SetConfig+0xe4>)
 801ab8a:	4293      	cmp	r3, r2
 801ab8c:	d113      	bne.n	801abb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ab8e:	693b      	ldr	r3, [r7, #16]
 801ab90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ab96:	693b      	ldr	r3, [r7, #16]
 801ab98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ab9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	695b      	ldr	r3, [r3, #20]
 801aba2:	011b      	lsls	r3, r3, #4
 801aba4:	693a      	ldr	r2, [r7, #16]
 801aba6:	4313      	orrs	r3, r2
 801aba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	699b      	ldr	r3, [r3, #24]
 801abae:	011b      	lsls	r3, r3, #4
 801abb0:	693a      	ldr	r2, [r7, #16]
 801abb2:	4313      	orrs	r3, r2
 801abb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	693a      	ldr	r2, [r7, #16]
 801abba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	68fa      	ldr	r2, [r7, #12]
 801abc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	685a      	ldr	r2, [r3, #4]
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	697a      	ldr	r2, [r7, #20]
 801abce:	621a      	str	r2, [r3, #32]
}
 801abd0:	bf00      	nop
 801abd2:	371c      	adds	r7, #28
 801abd4:	46bd      	mov	sp, r7
 801abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abda:	4770      	bx	lr
 801abdc:	40010000 	.word	0x40010000
 801abe0:	40010400 	.word	0x40010400

0801abe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801abe4:	b480      	push	{r7}
 801abe6:	b087      	sub	sp, #28
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
 801abec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	6a1b      	ldr	r3, [r3, #32]
 801abf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	6a1b      	ldr	r3, [r3, #32]
 801abf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	685b      	ldr	r3, [r3, #4]
 801ac04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	69db      	ldr	r3, [r3, #28]
 801ac0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ac12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ac1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ac1c:	683b      	ldr	r3, [r7, #0]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	021b      	lsls	r3, r3, #8
 801ac22:	68fa      	ldr	r2, [r7, #12]
 801ac24:	4313      	orrs	r3, r2
 801ac26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ac28:	693b      	ldr	r3, [r7, #16]
 801ac2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ac2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	689b      	ldr	r3, [r3, #8]
 801ac34:	031b      	lsls	r3, r3, #12
 801ac36:	693a      	ldr	r2, [r7, #16]
 801ac38:	4313      	orrs	r3, r2
 801ac3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	4a12      	ldr	r2, [pc, #72]	; (801ac88 <TIM_OC4_SetConfig+0xa4>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d003      	beq.n	801ac4c <TIM_OC4_SetConfig+0x68>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	4a11      	ldr	r2, [pc, #68]	; (801ac8c <TIM_OC4_SetConfig+0xa8>)
 801ac48:	4293      	cmp	r3, r2
 801ac4a:	d109      	bne.n	801ac60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ac4c:	697b      	ldr	r3, [r7, #20]
 801ac4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ac52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	695b      	ldr	r3, [r3, #20]
 801ac58:	019b      	lsls	r3, r3, #6
 801ac5a:	697a      	ldr	r2, [r7, #20]
 801ac5c:	4313      	orrs	r3, r2
 801ac5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	697a      	ldr	r2, [r7, #20]
 801ac64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	68fa      	ldr	r2, [r7, #12]
 801ac6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	685a      	ldr	r2, [r3, #4]
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	693a      	ldr	r2, [r7, #16]
 801ac78:	621a      	str	r2, [r3, #32]
}
 801ac7a:	bf00      	nop
 801ac7c:	371c      	adds	r7, #28
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac84:	4770      	bx	lr
 801ac86:	bf00      	nop
 801ac88:	40010000 	.word	0x40010000
 801ac8c:	40010400 	.word	0x40010400

0801ac90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ac90:	b480      	push	{r7}
 801ac92:	b087      	sub	sp, #28
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	60f8      	str	r0, [r7, #12]
 801ac98:	60b9      	str	r1, [r7, #8]
 801ac9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	6a1b      	ldr	r3, [r3, #32]
 801aca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	6a1b      	ldr	r3, [r3, #32]
 801aca6:	f023 0201 	bic.w	r2, r3, #1
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	699b      	ldr	r3, [r3, #24]
 801acb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801acb4:	693b      	ldr	r3, [r7, #16]
 801acb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801acba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	011b      	lsls	r3, r3, #4
 801acc0:	693a      	ldr	r2, [r7, #16]
 801acc2:	4313      	orrs	r3, r2
 801acc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	f023 030a 	bic.w	r3, r3, #10
 801accc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801acce:	697a      	ldr	r2, [r7, #20]
 801acd0:	68bb      	ldr	r3, [r7, #8]
 801acd2:	4313      	orrs	r3, r2
 801acd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	693a      	ldr	r2, [r7, #16]
 801acda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	697a      	ldr	r2, [r7, #20]
 801ace0:	621a      	str	r2, [r3, #32]
}
 801ace2:	bf00      	nop
 801ace4:	371c      	adds	r7, #28
 801ace6:	46bd      	mov	sp, r7
 801ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acec:	4770      	bx	lr

0801acee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801acee:	b480      	push	{r7}
 801acf0:	b087      	sub	sp, #28
 801acf2:	af00      	add	r7, sp, #0
 801acf4:	60f8      	str	r0, [r7, #12]
 801acf6:	60b9      	str	r1, [r7, #8]
 801acf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	6a1b      	ldr	r3, [r3, #32]
 801acfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	6a1b      	ldr	r3, [r3, #32]
 801ad04:	f023 0210 	bic.w	r2, r3, #16
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	699b      	ldr	r3, [r3, #24]
 801ad10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801ad18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	031b      	lsls	r3, r3, #12
 801ad1e:	693a      	ldr	r2, [r7, #16]
 801ad20:	4313      	orrs	r3, r2
 801ad22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801ad2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	011b      	lsls	r3, r3, #4
 801ad30:	697a      	ldr	r2, [r7, #20]
 801ad32:	4313      	orrs	r3, r2
 801ad34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	693a      	ldr	r2, [r7, #16]
 801ad3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	697a      	ldr	r2, [r7, #20]
 801ad40:	621a      	str	r2, [r3, #32]
}
 801ad42:	bf00      	nop
 801ad44:	371c      	adds	r7, #28
 801ad46:	46bd      	mov	sp, r7
 801ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad4c:	4770      	bx	lr

0801ad4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801ad4e:	b480      	push	{r7}
 801ad50:	b085      	sub	sp, #20
 801ad52:	af00      	add	r7, sp, #0
 801ad54:	6078      	str	r0, [r7, #4]
 801ad56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	689b      	ldr	r3, [r3, #8]
 801ad5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ad64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801ad66:	683a      	ldr	r2, [r7, #0]
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	4313      	orrs	r3, r2
 801ad6c:	f043 0307 	orr.w	r3, r3, #7
 801ad70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	68fa      	ldr	r2, [r7, #12]
 801ad76:	609a      	str	r2, [r3, #8]
}
 801ad78:	bf00      	nop
 801ad7a:	3714      	adds	r7, #20
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad82:	4770      	bx	lr

0801ad84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ad84:	b480      	push	{r7}
 801ad86:	b087      	sub	sp, #28
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	60f8      	str	r0, [r7, #12]
 801ad8c:	60b9      	str	r1, [r7, #8]
 801ad8e:	607a      	str	r2, [r7, #4]
 801ad90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	689b      	ldr	r3, [r3, #8]
 801ad96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ad98:	697b      	ldr	r3, [r7, #20]
 801ad9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ad9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ada0:	683b      	ldr	r3, [r7, #0]
 801ada2:	021a      	lsls	r2, r3, #8
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	431a      	orrs	r2, r3
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	4313      	orrs	r3, r2
 801adac:	697a      	ldr	r2, [r7, #20]
 801adae:	4313      	orrs	r3, r2
 801adb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	697a      	ldr	r2, [r7, #20]
 801adb6:	609a      	str	r2, [r3, #8]
}
 801adb8:	bf00      	nop
 801adba:	371c      	adds	r7, #28
 801adbc:	46bd      	mov	sp, r7
 801adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc2:	4770      	bx	lr

0801adc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b087      	sub	sp, #28
 801adc8:	af00      	add	r7, sp, #0
 801adca:	60f8      	str	r0, [r7, #12]
 801adcc:	60b9      	str	r1, [r7, #8]
 801adce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	f003 031f 	and.w	r3, r3, #31
 801add6:	2201      	movs	r2, #1
 801add8:	fa02 f303 	lsl.w	r3, r2, r3
 801addc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	6a1a      	ldr	r2, [r3, #32]
 801ade2:	697b      	ldr	r3, [r7, #20]
 801ade4:	43db      	mvns	r3, r3
 801ade6:	401a      	ands	r2, r3
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	6a1a      	ldr	r2, [r3, #32]
 801adf0:	68bb      	ldr	r3, [r7, #8]
 801adf2:	f003 031f 	and.w	r3, r3, #31
 801adf6:	6879      	ldr	r1, [r7, #4]
 801adf8:	fa01 f303 	lsl.w	r3, r1, r3
 801adfc:	431a      	orrs	r2, r3
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	621a      	str	r2, [r3, #32]
}
 801ae02:	bf00      	nop
 801ae04:	371c      	adds	r7, #28
 801ae06:	46bd      	mov	sp, r7
 801ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0c:	4770      	bx	lr
	...

0801ae10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801ae10:	b480      	push	{r7}
 801ae12:	b085      	sub	sp, #20
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	6078      	str	r0, [r7, #4]
 801ae18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d101      	bne.n	801ae28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801ae24:	2302      	movs	r3, #2
 801ae26:	e05a      	b.n	801aede <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	2201      	movs	r2, #1
 801ae2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	2202      	movs	r2, #2
 801ae34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	685b      	ldr	r3, [r3, #4]
 801ae3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	689b      	ldr	r3, [r3, #8]
 801ae46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ae4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801ae50:	683b      	ldr	r3, [r7, #0]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	68fa      	ldr	r2, [r7, #12]
 801ae56:	4313      	orrs	r3, r2
 801ae58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	68fa      	ldr	r2, [r7, #12]
 801ae60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	4a21      	ldr	r2, [pc, #132]	; (801aeec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801ae68:	4293      	cmp	r3, r2
 801ae6a:	d022      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ae74:	d01d      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	4a1d      	ldr	r2, [pc, #116]	; (801aef0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	d018      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	4a1b      	ldr	r2, [pc, #108]	; (801aef4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d013      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4a1a      	ldr	r2, [pc, #104]	; (801aef8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801ae90:	4293      	cmp	r3, r2
 801ae92:	d00e      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	4a18      	ldr	r2, [pc, #96]	; (801aefc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801ae9a:	4293      	cmp	r3, r2
 801ae9c:	d009      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	4a17      	ldr	r2, [pc, #92]	; (801af00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d004      	beq.n	801aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	4a15      	ldr	r2, [pc, #84]	; (801af04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	d10c      	bne.n	801aecc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801aeb2:	68bb      	ldr	r3, [r7, #8]
 801aeb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801aeb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801aeba:	683b      	ldr	r3, [r7, #0]
 801aebc:	685b      	ldr	r3, [r3, #4]
 801aebe:	68ba      	ldr	r2, [r7, #8]
 801aec0:	4313      	orrs	r3, r2
 801aec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	68ba      	ldr	r2, [r7, #8]
 801aeca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	2201      	movs	r2, #1
 801aed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	2200      	movs	r2, #0
 801aed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801aedc:	2300      	movs	r3, #0
}
 801aede:	4618      	mov	r0, r3
 801aee0:	3714      	adds	r7, #20
 801aee2:	46bd      	mov	sp, r7
 801aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee8:	4770      	bx	lr
 801aeea:	bf00      	nop
 801aeec:	40010000 	.word	0x40010000
 801aef0:	40000400 	.word	0x40000400
 801aef4:	40000800 	.word	0x40000800
 801aef8:	40000c00 	.word	0x40000c00
 801aefc:	40010400 	.word	0x40010400
 801af00:	40014000 	.word	0x40014000
 801af04:	40001800 	.word	0x40001800

0801af08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801af08:	b480      	push	{r7}
 801af0a:	b083      	sub	sp, #12
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801af10:	bf00      	nop
 801af12:	370c      	adds	r7, #12
 801af14:	46bd      	mov	sp, r7
 801af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af1a:	4770      	bx	lr

0801af1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801af1c:	b480      	push	{r7}
 801af1e:	b083      	sub	sp, #12
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801af24:	bf00      	nop
 801af26:	370c      	adds	r7, #12
 801af28:	46bd      	mov	sp, r7
 801af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2e:	4770      	bx	lr

0801af30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b082      	sub	sp, #8
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d101      	bne.n	801af42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801af3e:	2301      	movs	r3, #1
 801af40:	e042      	b.n	801afc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801af48:	b2db      	uxtb	r3, r3
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d106      	bne.n	801af5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2200      	movs	r2, #0
 801af52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801af56:	6878      	ldr	r0, [r7, #4]
 801af58:	f7fb f98e 	bl	8016278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2224      	movs	r2, #36	; 0x24
 801af60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	68da      	ldr	r2, [r3, #12]
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801af72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801af74:	6878      	ldr	r0, [r7, #4]
 801af76:	f000 fdcb 	bl	801bb10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	691a      	ldr	r2, [r3, #16]
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801af88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	695a      	ldr	r2, [r3, #20]
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801af98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	68da      	ldr	r2, [r3, #12]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801afa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	2200      	movs	r2, #0
 801afae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2220      	movs	r2, #32
 801afb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	2220      	movs	r2, #32
 801afbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	2200      	movs	r2, #0
 801afc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801afc6:	2300      	movs	r3, #0
}
 801afc8:	4618      	mov	r0, r3
 801afca:	3708      	adds	r7, #8
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}

0801afd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b08c      	sub	sp, #48	; 0x30
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	60f8      	str	r0, [r7, #12]
 801afd8:	60b9      	str	r1, [r7, #8]
 801afda:	4613      	mov	r3, r2
 801afdc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	2b20      	cmp	r3, #32
 801afe8:	d156      	bne.n	801b098 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 801afea:	68bb      	ldr	r3, [r7, #8]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d002      	beq.n	801aff6 <HAL_UART_Transmit_DMA+0x26>
 801aff0:	88fb      	ldrh	r3, [r7, #6]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d101      	bne.n	801affa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801aff6:	2301      	movs	r3, #1
 801aff8:	e04f      	b.n	801b09a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 801affa:	68ba      	ldr	r2, [r7, #8]
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	88fa      	ldrh	r2, [r7, #6]
 801b004:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	88fa      	ldrh	r2, [r7, #6]
 801b00a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	2200      	movs	r2, #0
 801b010:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	2221      	movs	r2, #33	; 0x21
 801b016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b01e:	4a21      	ldr	r2, [pc, #132]	; (801b0a4 <HAL_UART_Transmit_DMA+0xd4>)
 801b020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b026:	4a20      	ldr	r2, [pc, #128]	; (801b0a8 <HAL_UART_Transmit_DMA+0xd8>)
 801b028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b02e:	4a1f      	ldr	r2, [pc, #124]	; (801b0ac <HAL_UART_Transmit_DMA+0xdc>)
 801b030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b036:	2200      	movs	r2, #0
 801b038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 801b03a:	f107 0308 	add.w	r3, r7, #8
 801b03e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b046:	6819      	ldr	r1, [r3, #0]
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	3304      	adds	r3, #4
 801b04e:	461a      	mov	r2, r3
 801b050:	88fb      	ldrh	r3, [r7, #6]
 801b052:	f7fc fa0d 	bl	8017470 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b05e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	3314      	adds	r3, #20
 801b066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b068:	69bb      	ldr	r3, [r7, #24]
 801b06a:	e853 3f00 	ldrex	r3, [r3]
 801b06e:	617b      	str	r3, [r7, #20]
   return(result);
 801b070:	697b      	ldr	r3, [r7, #20]
 801b072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b076:	62bb      	str	r3, [r7, #40]	; 0x28
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	3314      	adds	r3, #20
 801b07e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b080:	627a      	str	r2, [r7, #36]	; 0x24
 801b082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b084:	6a39      	ldr	r1, [r7, #32]
 801b086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b088:	e841 2300 	strex	r3, r2, [r1]
 801b08c:	61fb      	str	r3, [r7, #28]
   return(result);
 801b08e:	69fb      	ldr	r3, [r7, #28]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d1e5      	bne.n	801b060 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 801b094:	2300      	movs	r3, #0
 801b096:	e000      	b.n	801b09a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 801b098:	2302      	movs	r3, #2
  }
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3730      	adds	r7, #48	; 0x30
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	bf00      	nop
 801b0a4:	0801b63d 	.word	0x0801b63d
 801b0a8:	0801b6d7 	.word	0x0801b6d7
 801b0ac:	0801b6f3 	.word	0x0801b6f3

0801b0b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b0ba      	sub	sp, #232	; 0xe8
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	695b      	ldr	r3, [r3, #20]
 801b0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801b0dc:	2300      	movs	r3, #0
 801b0de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801b0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0e6:	f003 030f 	and.w	r3, r3, #15
 801b0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801b0ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d10f      	bne.n	801b116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0fa:	f003 0320 	and.w	r3, r3, #32
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d009      	beq.n	801b116 <HAL_UART_IRQHandler+0x66>
 801b102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b106:	f003 0320 	and.w	r3, r3, #32
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d003      	beq.n	801b116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801b10e:	6878      	ldr	r0, [r7, #4]
 801b110:	f000 fc40 	bl	801b994 <UART_Receive_IT>
      return;
 801b114:	e25b      	b.n	801b5ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801b116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	f000 80de 	beq.w	801b2dc <HAL_UART_IRQHandler+0x22c>
 801b120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b124:	f003 0301 	and.w	r3, r3, #1
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d106      	bne.n	801b13a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801b12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801b134:	2b00      	cmp	r3, #0
 801b136:	f000 80d1 	beq.w	801b2dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801b13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b13e:	f003 0301 	and.w	r3, r3, #1
 801b142:	2b00      	cmp	r3, #0
 801b144:	d00b      	beq.n	801b15e <HAL_UART_IRQHandler+0xae>
 801b146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d005      	beq.n	801b15e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b156:	f043 0201 	orr.w	r2, r3, #1
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801b15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b162:	f003 0304 	and.w	r3, r3, #4
 801b166:	2b00      	cmp	r3, #0
 801b168:	d00b      	beq.n	801b182 <HAL_UART_IRQHandler+0xd2>
 801b16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b16e:	f003 0301 	and.w	r3, r3, #1
 801b172:	2b00      	cmp	r3, #0
 801b174:	d005      	beq.n	801b182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b17a:	f043 0202 	orr.w	r2, r3, #2
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801b182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b186:	f003 0302 	and.w	r3, r3, #2
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d00b      	beq.n	801b1a6 <HAL_UART_IRQHandler+0xf6>
 801b18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b192:	f003 0301 	and.w	r3, r3, #1
 801b196:	2b00      	cmp	r3, #0
 801b198:	d005      	beq.n	801b1a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b19e:	f043 0204 	orr.w	r2, r3, #4
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801b1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1aa:	f003 0308 	and.w	r3, r3, #8
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d011      	beq.n	801b1d6 <HAL_UART_IRQHandler+0x126>
 801b1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b1b6:	f003 0320 	and.w	r3, r3, #32
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d105      	bne.n	801b1ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801b1be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b1c2:	f003 0301 	and.w	r3, r3, #1
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d005      	beq.n	801b1d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1ce:	f043 0208 	orr.w	r2, r3, #8
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	f000 81f2 	beq.w	801b5c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1e4:	f003 0320 	and.w	r3, r3, #32
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d008      	beq.n	801b1fe <HAL_UART_IRQHandler+0x14e>
 801b1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b1f0:	f003 0320 	and.w	r3, r3, #32
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d002      	beq.n	801b1fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801b1f8:	6878      	ldr	r0, [r7, #4]
 801b1fa:	f000 fbcb 	bl	801b994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	695b      	ldr	r3, [r3, #20]
 801b204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b208:	2b40      	cmp	r3, #64	; 0x40
 801b20a:	bf0c      	ite	eq
 801b20c:	2301      	moveq	r3, #1
 801b20e:	2300      	movne	r3, #0
 801b210:	b2db      	uxtb	r3, r3
 801b212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b21a:	f003 0308 	and.w	r3, r3, #8
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d103      	bne.n	801b22a <HAL_UART_IRQHandler+0x17a>
 801b222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b226:	2b00      	cmp	r3, #0
 801b228:	d04f      	beq.n	801b2ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f000 fad3 	bl	801b7d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	695b      	ldr	r3, [r3, #20]
 801b236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b23a:	2b40      	cmp	r3, #64	; 0x40
 801b23c:	d141      	bne.n	801b2c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	3314      	adds	r3, #20
 801b244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b24c:	e853 3f00 	ldrex	r3, [r3]
 801b250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b25c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	3314      	adds	r3, #20
 801b266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b26a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b26e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b27a:	e841 2300 	strex	r3, r2, [r1]
 801b27e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b286:	2b00      	cmp	r3, #0
 801b288:	d1d9      	bne.n	801b23e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d013      	beq.n	801b2ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b296:	4a7e      	ldr	r2, [pc, #504]	; (801b490 <HAL_UART_IRQHandler+0x3e0>)
 801b298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f7fc f9ae 	bl	8017600 <HAL_DMA_Abort_IT>
 801b2a4:	4603      	mov	r3, r0
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d016      	beq.n	801b2d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b2b0:	687a      	ldr	r2, [r7, #4]
 801b2b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801b2b4:	4610      	mov	r0, r2
 801b2b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b2b8:	e00e      	b.n	801b2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b2ba:	6878      	ldr	r0, [r7, #4]
 801b2bc:	f000 f9a8 	bl	801b610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b2c0:	e00a      	b.n	801b2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b2c2:	6878      	ldr	r0, [r7, #4]
 801b2c4:	f000 f9a4 	bl	801b610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b2c8:	e006      	b.n	801b2d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b2ca:	6878      	ldr	r0, [r7, #4]
 801b2cc:	f000 f9a0 	bl	801b610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 801b2d6:	e175      	b.n	801b5c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b2d8:	bf00      	nop
    return;
 801b2da:	e173      	b.n	801b5c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2e0:	2b01      	cmp	r3, #1
 801b2e2:	f040 814f 	bne.w	801b584 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801b2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b2ea:	f003 0310 	and.w	r3, r3, #16
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	f000 8148 	beq.w	801b584 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b2f8:	f003 0310 	and.w	r3, r3, #16
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	f000 8141 	beq.w	801b584 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801b302:	2300      	movs	r3, #0
 801b304:	60bb      	str	r3, [r7, #8]
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	60bb      	str	r3, [r7, #8]
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	685b      	ldr	r3, [r3, #4]
 801b314:	60bb      	str	r3, [r7, #8]
 801b316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	695b      	ldr	r3, [r3, #20]
 801b31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b322:	2b40      	cmp	r3, #64	; 0x40
 801b324:	f040 80b6 	bne.w	801b494 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	685b      	ldr	r3, [r3, #4]
 801b330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b338:	2b00      	cmp	r3, #0
 801b33a:	f000 8145 	beq.w	801b5c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b346:	429a      	cmp	r2, r3
 801b348:	f080 813e 	bcs.w	801b5c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b358:	69db      	ldr	r3, [r3, #28]
 801b35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b35e:	f000 8088 	beq.w	801b472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	330c      	adds	r3, #12
 801b368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b36c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b370:	e853 3f00 	ldrex	r3, [r3]
 801b374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	330c      	adds	r3, #12
 801b38a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801b38e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801b392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b39a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b39e:	e841 2300 	strex	r3, r2, [r1]
 801b3a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b3a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d1d9      	bne.n	801b362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	3314      	adds	r3, #20
 801b3b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b3b8:	e853 3f00 	ldrex	r3, [r3]
 801b3bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b3be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b3c0:	f023 0301 	bic.w	r3, r3, #1
 801b3c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	3314      	adds	r3, #20
 801b3ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b3d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b3d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b3da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b3de:	e841 2300 	strex	r3, r2, [r1]
 801b3e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d1e1      	bne.n	801b3ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	3314      	adds	r3, #20
 801b3f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3f4:	e853 3f00 	ldrex	r3, [r3]
 801b3f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b3fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	3314      	adds	r3, #20
 801b40a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b40e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b416:	e841 2300 	strex	r3, r2, [r1]
 801b41a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d1e3      	bne.n	801b3ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2220      	movs	r2, #32
 801b426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	2200      	movs	r2, #0
 801b42e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	330c      	adds	r3, #12
 801b436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b43a:	e853 3f00 	ldrex	r3, [r3]
 801b43e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b442:	f023 0310 	bic.w	r3, r3, #16
 801b446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	330c      	adds	r3, #12
 801b450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b454:	65ba      	str	r2, [r7, #88]	; 0x58
 801b456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b45a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b45c:	e841 2300 	strex	r3, r2, [r1]
 801b460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b464:	2b00      	cmp	r3, #0
 801b466:	d1e3      	bne.n	801b430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7fc f857 	bl	8017520 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	2202      	movs	r2, #2
 801b476:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b480:	b29b      	uxth	r3, r3
 801b482:	1ad3      	subs	r3, r2, r3
 801b484:	b29b      	uxth	r3, r3
 801b486:	4619      	mov	r1, r3
 801b488:	6878      	ldr	r0, [r7, #4]
 801b48a:	f000 f8cb 	bl	801b624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801b48e:	e09b      	b.n	801b5c8 <HAL_UART_IRQHandler+0x518>
 801b490:	0801b89d 	.word	0x0801b89d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b49c:	b29b      	uxth	r3, r3
 801b49e:	1ad3      	subs	r3, r2, r3
 801b4a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b4a8:	b29b      	uxth	r3, r3
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	f000 808e 	beq.w	801b5cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 801b4b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f000 8089 	beq.w	801b5cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	330c      	adds	r3, #12
 801b4c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4c4:	e853 3f00 	ldrex	r3, [r3]
 801b4c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b4d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	330c      	adds	r3, #12
 801b4da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801b4de:	647a      	str	r2, [r7, #68]	; 0x44
 801b4e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b4e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b4e6:	e841 2300 	strex	r3, r2, [r1]
 801b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d1e3      	bne.n	801b4ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	3314      	adds	r3, #20
 801b4f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4fc:	e853 3f00 	ldrex	r3, [r3]
 801b500:	623b      	str	r3, [r7, #32]
   return(result);
 801b502:	6a3b      	ldr	r3, [r7, #32]
 801b504:	f023 0301 	bic.w	r3, r3, #1
 801b508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	3314      	adds	r3, #20
 801b512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b516:	633a      	str	r2, [r7, #48]	; 0x30
 801b518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b51a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b51c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b51e:	e841 2300 	strex	r3, r2, [r1]
 801b522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b526:	2b00      	cmp	r3, #0
 801b528:	d1e3      	bne.n	801b4f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	2220      	movs	r2, #32
 801b52e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	2200      	movs	r2, #0
 801b536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	330c      	adds	r3, #12
 801b53e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	e853 3f00 	ldrex	r3, [r3]
 801b546:	60fb      	str	r3, [r7, #12]
   return(result);
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	f023 0310 	bic.w	r3, r3, #16
 801b54e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	330c      	adds	r3, #12
 801b558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801b55c:	61fa      	str	r2, [r7, #28]
 801b55e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b560:	69b9      	ldr	r1, [r7, #24]
 801b562:	69fa      	ldr	r2, [r7, #28]
 801b564:	e841 2300 	strex	r3, r2, [r1]
 801b568:	617b      	str	r3, [r7, #20]
   return(result);
 801b56a:	697b      	ldr	r3, [r7, #20]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d1e3      	bne.n	801b538 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2202      	movs	r2, #2
 801b574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801b576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b57a:	4619      	mov	r1, r3
 801b57c:	6878      	ldr	r0, [r7, #4]
 801b57e:	f000 f851 	bl	801b624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801b582:	e023      	b.n	801b5cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801b584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d009      	beq.n	801b5a4 <HAL_UART_IRQHandler+0x4f4>
 801b590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d003      	beq.n	801b5a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 801b59c:	6878      	ldr	r0, [r7, #4]
 801b59e:	f000 f991 	bl	801b8c4 <UART_Transmit_IT>
    return;
 801b5a2:	e014      	b.n	801b5ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801b5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d00e      	beq.n	801b5ce <HAL_UART_IRQHandler+0x51e>
 801b5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d008      	beq.n	801b5ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f000 f9d1 	bl	801b964 <UART_EndTransmit_IT>
    return;
 801b5c2:	e004      	b.n	801b5ce <HAL_UART_IRQHandler+0x51e>
    return;
 801b5c4:	bf00      	nop
 801b5c6:	e002      	b.n	801b5ce <HAL_UART_IRQHandler+0x51e>
      return;
 801b5c8:	bf00      	nop
 801b5ca:	e000      	b.n	801b5ce <HAL_UART_IRQHandler+0x51e>
      return;
 801b5cc:	bf00      	nop
  }
}
 801b5ce:	37e8      	adds	r7, #232	; 0xe8
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bd80      	pop	{r7, pc}

0801b5d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b5d4:	b480      	push	{r7}
 801b5d6:	b083      	sub	sp, #12
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801b5dc:	bf00      	nop
 801b5de:	370c      	adds	r7, #12
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e6:	4770      	bx	lr

0801b5e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b5e8:	b480      	push	{r7}
 801b5ea:	b083      	sub	sp, #12
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801b5f0:	bf00      	nop
 801b5f2:	370c      	adds	r7, #12
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5fa:	4770      	bx	lr

0801b5fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b5fc:	b480      	push	{r7}
 801b5fe:	b083      	sub	sp, #12
 801b600:	af00      	add	r7, sp, #0
 801b602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801b604:	bf00      	nop
 801b606:	370c      	adds	r7, #12
 801b608:	46bd      	mov	sp, r7
 801b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60e:	4770      	bx	lr

0801b610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b610:	b480      	push	{r7}
 801b612:	b083      	sub	sp, #12
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801b618:	bf00      	nop
 801b61a:	370c      	adds	r7, #12
 801b61c:	46bd      	mov	sp, r7
 801b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b622:	4770      	bx	lr

0801b624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b624:	b480      	push	{r7}
 801b626:	b083      	sub	sp, #12
 801b628:	af00      	add	r7, sp, #0
 801b62a:	6078      	str	r0, [r7, #4]
 801b62c:	460b      	mov	r3, r1
 801b62e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b630:	bf00      	nop
 801b632:	370c      	adds	r7, #12
 801b634:	46bd      	mov	sp, r7
 801b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63a:	4770      	bx	lr

0801b63c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	b090      	sub	sp, #64	; 0x40
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b648:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b654:	2b00      	cmp	r3, #0
 801b656:	d137      	bne.n	801b6c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801b658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b65a:	2200      	movs	r2, #0
 801b65c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	3314      	adds	r3, #20
 801b664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b668:	e853 3f00 	ldrex	r3, [r3]
 801b66c:	623b      	str	r3, [r7, #32]
   return(result);
 801b66e:	6a3b      	ldr	r3, [r7, #32]
 801b670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b674:	63bb      	str	r3, [r7, #56]	; 0x38
 801b676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	3314      	adds	r3, #20
 801b67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b67e:	633a      	str	r2, [r7, #48]	; 0x30
 801b680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b686:	e841 2300 	strex	r3, r2, [r1]
 801b68a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d1e5      	bne.n	801b65e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	330c      	adds	r3, #12
 801b698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b69a:	693b      	ldr	r3, [r7, #16]
 801b69c:	e853 3f00 	ldrex	r3, [r3]
 801b6a0:	60fb      	str	r3, [r7, #12]
   return(result);
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b6a8:	637b      	str	r3, [r7, #52]	; 0x34
 801b6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	330c      	adds	r3, #12
 801b6b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b6b2:	61fa      	str	r2, [r7, #28]
 801b6b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6b6:	69b9      	ldr	r1, [r7, #24]
 801b6b8:	69fa      	ldr	r2, [r7, #28]
 801b6ba:	e841 2300 	strex	r3, r2, [r1]
 801b6be:	617b      	str	r3, [r7, #20]
   return(result);
 801b6c0:	697b      	ldr	r3, [r7, #20]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d1e5      	bne.n	801b692 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b6c6:	e002      	b.n	801b6ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801b6c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b6ca:	f7ff ff83 	bl	801b5d4 <HAL_UART_TxCpltCallback>
}
 801b6ce:	bf00      	nop
 801b6d0:	3740      	adds	r7, #64	; 0x40
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	bd80      	pop	{r7, pc}

0801b6d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b6d6:	b580      	push	{r7, lr}
 801b6d8:	b084      	sub	sp, #16
 801b6da:	af00      	add	r7, sp, #0
 801b6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801b6e4:	68f8      	ldr	r0, [r7, #12]
 801b6e6:	f7ff ff7f 	bl	801b5e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b6ea:	bf00      	nop
 801b6ec:	3710      	adds	r7, #16
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}

0801b6f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b6f2:	b580      	push	{r7, lr}
 801b6f4:	b084      	sub	sp, #16
 801b6f6:	af00      	add	r7, sp, #0
 801b6f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b702:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801b704:	68bb      	ldr	r3, [r7, #8]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	695b      	ldr	r3, [r3, #20]
 801b70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b70e:	2b80      	cmp	r3, #128	; 0x80
 801b710:	bf0c      	ite	eq
 801b712:	2301      	moveq	r3, #1
 801b714:	2300      	movne	r3, #0
 801b716:	b2db      	uxtb	r3, r3
 801b718:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801b71a:	68bb      	ldr	r3, [r7, #8]
 801b71c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b720:	b2db      	uxtb	r3, r3
 801b722:	2b21      	cmp	r3, #33	; 0x21
 801b724:	d108      	bne.n	801b738 <UART_DMAError+0x46>
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d005      	beq.n	801b738 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	2200      	movs	r2, #0
 801b730:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801b732:	68b8      	ldr	r0, [r7, #8]
 801b734:	f000 f827 	bl	801b786 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	695b      	ldr	r3, [r3, #20]
 801b73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b742:	2b40      	cmp	r3, #64	; 0x40
 801b744:	bf0c      	ite	eq
 801b746:	2301      	moveq	r3, #1
 801b748:	2300      	movne	r3, #0
 801b74a:	b2db      	uxtb	r3, r3
 801b74c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b754:	b2db      	uxtb	r3, r3
 801b756:	2b22      	cmp	r3, #34	; 0x22
 801b758:	d108      	bne.n	801b76c <UART_DMAError+0x7a>
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d005      	beq.n	801b76c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	2200      	movs	r2, #0
 801b764:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801b766:	68b8      	ldr	r0, [r7, #8]
 801b768:	f000 f835 	bl	801b7d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b76c:	68bb      	ldr	r3, [r7, #8]
 801b76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b770:	f043 0210 	orr.w	r2, r3, #16
 801b774:	68bb      	ldr	r3, [r7, #8]
 801b776:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b778:	68b8      	ldr	r0, [r7, #8]
 801b77a:	f7ff ff49 	bl	801b610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b77e:	bf00      	nop
 801b780:	3710      	adds	r7, #16
 801b782:	46bd      	mov	sp, r7
 801b784:	bd80      	pop	{r7, pc}

0801b786 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b786:	b480      	push	{r7}
 801b788:	b089      	sub	sp, #36	; 0x24
 801b78a:	af00      	add	r7, sp, #0
 801b78c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	330c      	adds	r3, #12
 801b794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	e853 3f00 	ldrex	r3, [r3]
 801b79c:	60bb      	str	r3, [r7, #8]
   return(result);
 801b79e:	68bb      	ldr	r3, [r7, #8]
 801b7a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801b7a4:	61fb      	str	r3, [r7, #28]
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	330c      	adds	r3, #12
 801b7ac:	69fa      	ldr	r2, [r7, #28]
 801b7ae:	61ba      	str	r2, [r7, #24]
 801b7b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b7b2:	6979      	ldr	r1, [r7, #20]
 801b7b4:	69ba      	ldr	r2, [r7, #24]
 801b7b6:	e841 2300 	strex	r3, r2, [r1]
 801b7ba:	613b      	str	r3, [r7, #16]
   return(result);
 801b7bc:	693b      	ldr	r3, [r7, #16]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d1e5      	bne.n	801b78e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	2220      	movs	r2, #32
 801b7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 801b7ca:	bf00      	nop
 801b7cc:	3724      	adds	r7, #36	; 0x24
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d4:	4770      	bx	lr

0801b7d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b7d6:	b480      	push	{r7}
 801b7d8:	b095      	sub	sp, #84	; 0x54
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	330c      	adds	r3, #12
 801b7e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7e8:	e853 3f00 	ldrex	r3, [r3]
 801b7ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	330c      	adds	r3, #12
 801b7fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b7fe:	643a      	str	r2, [r7, #64]	; 0x40
 801b800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b806:	e841 2300 	strex	r3, r2, [r1]
 801b80a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d1e5      	bne.n	801b7de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	3314      	adds	r3, #20
 801b818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b81a:	6a3b      	ldr	r3, [r7, #32]
 801b81c:	e853 3f00 	ldrex	r3, [r3]
 801b820:	61fb      	str	r3, [r7, #28]
   return(result);
 801b822:	69fb      	ldr	r3, [r7, #28]
 801b824:	f023 0301 	bic.w	r3, r3, #1
 801b828:	64bb      	str	r3, [r7, #72]	; 0x48
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	3314      	adds	r3, #20
 801b830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b832:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b83a:	e841 2300 	strex	r3, r2, [r1]
 801b83e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b842:	2b00      	cmp	r3, #0
 801b844:	d1e5      	bne.n	801b812 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b84a:	2b01      	cmp	r3, #1
 801b84c:	d119      	bne.n	801b882 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	330c      	adds	r3, #12
 801b854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	e853 3f00 	ldrex	r3, [r3]
 801b85c:	60bb      	str	r3, [r7, #8]
   return(result);
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	f023 0310 	bic.w	r3, r3, #16
 801b864:	647b      	str	r3, [r7, #68]	; 0x44
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	330c      	adds	r3, #12
 801b86c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b86e:	61ba      	str	r2, [r7, #24]
 801b870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b872:	6979      	ldr	r1, [r7, #20]
 801b874:	69ba      	ldr	r2, [r7, #24]
 801b876:	e841 2300 	strex	r3, r2, [r1]
 801b87a:	613b      	str	r3, [r7, #16]
   return(result);
 801b87c:	693b      	ldr	r3, [r7, #16]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d1e5      	bne.n	801b84e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2220      	movs	r2, #32
 801b886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	2200      	movs	r2, #0
 801b88e:	631a      	str	r2, [r3, #48]	; 0x30
}
 801b890:	bf00      	nop
 801b892:	3754      	adds	r7, #84	; 0x54
 801b894:	46bd      	mov	sp, r7
 801b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89a:	4770      	bx	lr

0801b89c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b89c:	b580      	push	{r7, lr}
 801b89e:	b084      	sub	sp, #16
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b8b6:	68f8      	ldr	r0, [r7, #12]
 801b8b8:	f7ff feaa 	bl	801b610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b8bc:	bf00      	nop
 801b8be:	3710      	adds	r7, #16
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	bd80      	pop	{r7, pc}

0801b8c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801b8c4:	b480      	push	{r7}
 801b8c6:	b085      	sub	sp, #20
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b8d2:	b2db      	uxtb	r3, r3
 801b8d4:	2b21      	cmp	r3, #33	; 0x21
 801b8d6:	d13e      	bne.n	801b956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	689b      	ldr	r3, [r3, #8]
 801b8dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b8e0:	d114      	bne.n	801b90c <UART_Transmit_IT+0x48>
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	691b      	ldr	r3, [r3, #16]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d110      	bne.n	801b90c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	6a1b      	ldr	r3, [r3, #32]
 801b8ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	881b      	ldrh	r3, [r3, #0]
 801b8f4:	461a      	mov	r2, r3
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b8fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	6a1b      	ldr	r3, [r3, #32]
 801b904:	1c9a      	adds	r2, r3, #2
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	621a      	str	r2, [r3, #32]
 801b90a:	e008      	b.n	801b91e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	6a1b      	ldr	r3, [r3, #32]
 801b910:	1c59      	adds	r1, r3, #1
 801b912:	687a      	ldr	r2, [r7, #4]
 801b914:	6211      	str	r1, [r2, #32]
 801b916:	781a      	ldrb	r2, [r3, #0]
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b922:	b29b      	uxth	r3, r3
 801b924:	3b01      	subs	r3, #1
 801b926:	b29b      	uxth	r3, r3
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	4619      	mov	r1, r3
 801b92c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d10f      	bne.n	801b952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	68da      	ldr	r2, [r3, #12]
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	68da      	ldr	r2, [r3, #12]
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801b950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801b952:	2300      	movs	r3, #0
 801b954:	e000      	b.n	801b958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801b956:	2302      	movs	r3, #2
  }
}
 801b958:	4618      	mov	r0, r3
 801b95a:	3714      	adds	r7, #20
 801b95c:	46bd      	mov	sp, r7
 801b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b962:	4770      	bx	lr

0801b964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b082      	sub	sp, #8
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	68da      	ldr	r2, [r3, #12]
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801b97a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2220      	movs	r2, #32
 801b980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b984:	6878      	ldr	r0, [r7, #4]
 801b986:	f7ff fe25 	bl	801b5d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801b98a:	2300      	movs	r3, #0
}
 801b98c:	4618      	mov	r0, r3
 801b98e:	3708      	adds	r7, #8
 801b990:	46bd      	mov	sp, r7
 801b992:	bd80      	pop	{r7, pc}

0801b994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b08c      	sub	sp, #48	; 0x30
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b9a2:	b2db      	uxtb	r3, r3
 801b9a4:	2b22      	cmp	r3, #34	; 0x22
 801b9a6:	f040 80ae 	bne.w	801bb06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	689b      	ldr	r3, [r3, #8]
 801b9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b9b2:	d117      	bne.n	801b9e4 <UART_Receive_IT+0x50>
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	691b      	ldr	r3, [r3, #16]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d113      	bne.n	801b9e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801b9bc:	2300      	movs	r3, #0
 801b9be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	685b      	ldr	r3, [r3, #4]
 801b9cc:	b29b      	uxth	r3, r3
 801b9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9dc:	1c9a      	adds	r2, r3, #2
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	629a      	str	r2, [r3, #40]	; 0x28
 801b9e2:	e026      	b.n	801ba32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	689b      	ldr	r3, [r3, #8]
 801b9f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b9f6:	d007      	beq.n	801ba08 <UART_Receive_IT+0x74>
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d10a      	bne.n	801ba16 <UART_Receive_IT+0x82>
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	691b      	ldr	r3, [r3, #16]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d106      	bne.n	801ba16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	685b      	ldr	r3, [r3, #4]
 801ba0e:	b2da      	uxtb	r2, r3
 801ba10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba12:	701a      	strb	r2, [r3, #0]
 801ba14:	e008      	b.n	801ba28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	685b      	ldr	r3, [r3, #4]
 801ba1c:	b2db      	uxtb	r3, r3
 801ba1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ba22:	b2da      	uxtb	r2, r3
 801ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba2c:	1c5a      	adds	r2, r3, #1
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801ba36:	b29b      	uxth	r3, r3
 801ba38:	3b01      	subs	r3, #1
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	687a      	ldr	r2, [r7, #4]
 801ba3e:	4619      	mov	r1, r3
 801ba40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d15d      	bne.n	801bb02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	68da      	ldr	r2, [r3, #12]
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	f022 0220 	bic.w	r2, r2, #32
 801ba54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	68da      	ldr	r2, [r3, #12]
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ba64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	695a      	ldr	r2, [r3, #20]
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	f022 0201 	bic.w	r2, r2, #1
 801ba74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	2220      	movs	r2, #32
 801ba7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	2200      	movs	r2, #0
 801ba82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba88:	2b01      	cmp	r3, #1
 801ba8a:	d135      	bne.n	801baf8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2200      	movs	r2, #0
 801ba90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	330c      	adds	r3, #12
 801ba98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba9a:	697b      	ldr	r3, [r7, #20]
 801ba9c:	e853 3f00 	ldrex	r3, [r3]
 801baa0:	613b      	str	r3, [r7, #16]
   return(result);
 801baa2:	693b      	ldr	r3, [r7, #16]
 801baa4:	f023 0310 	bic.w	r3, r3, #16
 801baa8:	627b      	str	r3, [r7, #36]	; 0x24
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	330c      	adds	r3, #12
 801bab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bab2:	623a      	str	r2, [r7, #32]
 801bab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bab6:	69f9      	ldr	r1, [r7, #28]
 801bab8:	6a3a      	ldr	r2, [r7, #32]
 801baba:	e841 2300 	strex	r3, r2, [r1]
 801babe:	61bb      	str	r3, [r7, #24]
   return(result);
 801bac0:	69bb      	ldr	r3, [r7, #24]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d1e5      	bne.n	801ba92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	f003 0310 	and.w	r3, r3, #16
 801bad0:	2b10      	cmp	r3, #16
 801bad2:	d10a      	bne.n	801baea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bad4:	2300      	movs	r3, #0
 801bad6:	60fb      	str	r3, [r7, #12]
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	60fb      	str	r3, [r7, #12]
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	685b      	ldr	r3, [r3, #4]
 801bae6:	60fb      	str	r3, [r7, #12]
 801bae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801baee:	4619      	mov	r1, r3
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f7ff fd97 	bl	801b624 <HAL_UARTEx_RxEventCallback>
 801baf6:	e002      	b.n	801bafe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801baf8:	6878      	ldr	r0, [r7, #4]
 801bafa:	f7ff fd7f 	bl	801b5fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801bafe:	2300      	movs	r3, #0
 801bb00:	e002      	b.n	801bb08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 801bb02:	2300      	movs	r3, #0
 801bb04:	e000      	b.n	801bb08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801bb06:	2302      	movs	r3, #2
  }
}
 801bb08:	4618      	mov	r0, r3
 801bb0a:	3730      	adds	r7, #48	; 0x30
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	bd80      	pop	{r7, pc}

0801bb10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bb10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bb14:	b0c0      	sub	sp, #256	; 0x100
 801bb16:	af00      	add	r7, sp, #0
 801bb18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bb1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	691b      	ldr	r3, [r3, #16]
 801bb24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801bb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb2c:	68d9      	ldr	r1, [r3, #12]
 801bb2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb32:	681a      	ldr	r2, [r3, #0]
 801bb34:	ea40 0301 	orr.w	r3, r0, r1
 801bb38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801bb3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb3e:	689a      	ldr	r2, [r3, #8]
 801bb40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb44:	691b      	ldr	r3, [r3, #16]
 801bb46:	431a      	orrs	r2, r3
 801bb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb4c:	695b      	ldr	r3, [r3, #20]
 801bb4e:	431a      	orrs	r2, r3
 801bb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb54:	69db      	ldr	r3, [r3, #28]
 801bb56:	4313      	orrs	r3, r2
 801bb58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	68db      	ldr	r3, [r3, #12]
 801bb64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801bb68:	f021 010c 	bic.w	r1, r1, #12
 801bb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb70:	681a      	ldr	r2, [r3, #0]
 801bb72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801bb76:	430b      	orrs	r3, r1
 801bb78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801bb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	695b      	ldr	r3, [r3, #20]
 801bb82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801bb86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb8a:	6999      	ldr	r1, [r3, #24]
 801bb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb90:	681a      	ldr	r2, [r3, #0]
 801bb92:	ea40 0301 	orr.w	r3, r0, r1
 801bb96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801bb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bb9c:	681a      	ldr	r2, [r3, #0]
 801bb9e:	4b8f      	ldr	r3, [pc, #572]	; (801bddc <UART_SetConfig+0x2cc>)
 801bba0:	429a      	cmp	r2, r3
 801bba2:	d005      	beq.n	801bbb0 <UART_SetConfig+0xa0>
 801bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bba8:	681a      	ldr	r2, [r3, #0]
 801bbaa:	4b8d      	ldr	r3, [pc, #564]	; (801bde0 <UART_SetConfig+0x2d0>)
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d104      	bne.n	801bbba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801bbb0:	f7fe f84a 	bl	8019c48 <HAL_RCC_GetPCLK2Freq>
 801bbb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801bbb8:	e003      	b.n	801bbc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801bbba:	f7fe f831 	bl	8019c20 <HAL_RCC_GetPCLK1Freq>
 801bbbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bbc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bbc6:	69db      	ldr	r3, [r3, #28]
 801bbc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bbcc:	f040 810c 	bne.w	801bde8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801bbd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801bbda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801bbde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801bbe2:	4622      	mov	r2, r4
 801bbe4:	462b      	mov	r3, r5
 801bbe6:	1891      	adds	r1, r2, r2
 801bbe8:	65b9      	str	r1, [r7, #88]	; 0x58
 801bbea:	415b      	adcs	r3, r3
 801bbec:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bbee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801bbf2:	4621      	mov	r1, r4
 801bbf4:	eb12 0801 	adds.w	r8, r2, r1
 801bbf8:	4629      	mov	r1, r5
 801bbfa:	eb43 0901 	adc.w	r9, r3, r1
 801bbfe:	f04f 0200 	mov.w	r2, #0
 801bc02:	f04f 0300 	mov.w	r3, #0
 801bc06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801bc0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801bc0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801bc12:	4690      	mov	r8, r2
 801bc14:	4699      	mov	r9, r3
 801bc16:	4623      	mov	r3, r4
 801bc18:	eb18 0303 	adds.w	r3, r8, r3
 801bc1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801bc20:	462b      	mov	r3, r5
 801bc22:	eb49 0303 	adc.w	r3, r9, r3
 801bc26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801bc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bc2e:	685b      	ldr	r3, [r3, #4]
 801bc30:	2200      	movs	r2, #0
 801bc32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801bc36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801bc3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801bc3e:	460b      	mov	r3, r1
 801bc40:	18db      	adds	r3, r3, r3
 801bc42:	653b      	str	r3, [r7, #80]	; 0x50
 801bc44:	4613      	mov	r3, r2
 801bc46:	eb42 0303 	adc.w	r3, r2, r3
 801bc4a:	657b      	str	r3, [r7, #84]	; 0x54
 801bc4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801bc50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801bc54:	f7e5 f808 	bl	8000c68 <__aeabi_uldivmod>
 801bc58:	4602      	mov	r2, r0
 801bc5a:	460b      	mov	r3, r1
 801bc5c:	4b61      	ldr	r3, [pc, #388]	; (801bde4 <UART_SetConfig+0x2d4>)
 801bc5e:	fba3 2302 	umull	r2, r3, r3, r2
 801bc62:	095b      	lsrs	r3, r3, #5
 801bc64:	011c      	lsls	r4, r3, #4
 801bc66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bc70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801bc74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801bc78:	4642      	mov	r2, r8
 801bc7a:	464b      	mov	r3, r9
 801bc7c:	1891      	adds	r1, r2, r2
 801bc7e:	64b9      	str	r1, [r7, #72]	; 0x48
 801bc80:	415b      	adcs	r3, r3
 801bc82:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bc84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801bc88:	4641      	mov	r1, r8
 801bc8a:	eb12 0a01 	adds.w	sl, r2, r1
 801bc8e:	4649      	mov	r1, r9
 801bc90:	eb43 0b01 	adc.w	fp, r3, r1
 801bc94:	f04f 0200 	mov.w	r2, #0
 801bc98:	f04f 0300 	mov.w	r3, #0
 801bc9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801bca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801bca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801bca8:	4692      	mov	sl, r2
 801bcaa:	469b      	mov	fp, r3
 801bcac:	4643      	mov	r3, r8
 801bcae:	eb1a 0303 	adds.w	r3, sl, r3
 801bcb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bcb6:	464b      	mov	r3, r9
 801bcb8:	eb4b 0303 	adc.w	r3, fp, r3
 801bcbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bcc4:	685b      	ldr	r3, [r3, #4]
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bccc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801bcd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801bcd4:	460b      	mov	r3, r1
 801bcd6:	18db      	adds	r3, r3, r3
 801bcd8:	643b      	str	r3, [r7, #64]	; 0x40
 801bcda:	4613      	mov	r3, r2
 801bcdc:	eb42 0303 	adc.w	r3, r2, r3
 801bce0:	647b      	str	r3, [r7, #68]	; 0x44
 801bce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801bce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801bcea:	f7e4 ffbd 	bl	8000c68 <__aeabi_uldivmod>
 801bcee:	4602      	mov	r2, r0
 801bcf0:	460b      	mov	r3, r1
 801bcf2:	4611      	mov	r1, r2
 801bcf4:	4b3b      	ldr	r3, [pc, #236]	; (801bde4 <UART_SetConfig+0x2d4>)
 801bcf6:	fba3 2301 	umull	r2, r3, r3, r1
 801bcfa:	095b      	lsrs	r3, r3, #5
 801bcfc:	2264      	movs	r2, #100	; 0x64
 801bcfe:	fb02 f303 	mul.w	r3, r2, r3
 801bd02:	1acb      	subs	r3, r1, r3
 801bd04:	00db      	lsls	r3, r3, #3
 801bd06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801bd0a:	4b36      	ldr	r3, [pc, #216]	; (801bde4 <UART_SetConfig+0x2d4>)
 801bd0c:	fba3 2302 	umull	r2, r3, r3, r2
 801bd10:	095b      	lsrs	r3, r3, #5
 801bd12:	005b      	lsls	r3, r3, #1
 801bd14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801bd18:	441c      	add	r4, r3
 801bd1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bd1e:	2200      	movs	r2, #0
 801bd20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bd24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801bd28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801bd2c:	4642      	mov	r2, r8
 801bd2e:	464b      	mov	r3, r9
 801bd30:	1891      	adds	r1, r2, r2
 801bd32:	63b9      	str	r1, [r7, #56]	; 0x38
 801bd34:	415b      	adcs	r3, r3
 801bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bd38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bd3c:	4641      	mov	r1, r8
 801bd3e:	1851      	adds	r1, r2, r1
 801bd40:	6339      	str	r1, [r7, #48]	; 0x30
 801bd42:	4649      	mov	r1, r9
 801bd44:	414b      	adcs	r3, r1
 801bd46:	637b      	str	r3, [r7, #52]	; 0x34
 801bd48:	f04f 0200 	mov.w	r2, #0
 801bd4c:	f04f 0300 	mov.w	r3, #0
 801bd50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801bd54:	4659      	mov	r1, fp
 801bd56:	00cb      	lsls	r3, r1, #3
 801bd58:	4651      	mov	r1, sl
 801bd5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801bd5e:	4651      	mov	r1, sl
 801bd60:	00ca      	lsls	r2, r1, #3
 801bd62:	4610      	mov	r0, r2
 801bd64:	4619      	mov	r1, r3
 801bd66:	4603      	mov	r3, r0
 801bd68:	4642      	mov	r2, r8
 801bd6a:	189b      	adds	r3, r3, r2
 801bd6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bd70:	464b      	mov	r3, r9
 801bd72:	460a      	mov	r2, r1
 801bd74:	eb42 0303 	adc.w	r3, r2, r3
 801bd78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bd7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	2200      	movs	r2, #0
 801bd84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801bd88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801bd8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801bd90:	460b      	mov	r3, r1
 801bd92:	18db      	adds	r3, r3, r3
 801bd94:	62bb      	str	r3, [r7, #40]	; 0x28
 801bd96:	4613      	mov	r3, r2
 801bd98:	eb42 0303 	adc.w	r3, r2, r3
 801bd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bda2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801bda6:	f7e4 ff5f 	bl	8000c68 <__aeabi_uldivmod>
 801bdaa:	4602      	mov	r2, r0
 801bdac:	460b      	mov	r3, r1
 801bdae:	4b0d      	ldr	r3, [pc, #52]	; (801bde4 <UART_SetConfig+0x2d4>)
 801bdb0:	fba3 1302 	umull	r1, r3, r3, r2
 801bdb4:	095b      	lsrs	r3, r3, #5
 801bdb6:	2164      	movs	r1, #100	; 0x64
 801bdb8:	fb01 f303 	mul.w	r3, r1, r3
 801bdbc:	1ad3      	subs	r3, r2, r3
 801bdbe:	00db      	lsls	r3, r3, #3
 801bdc0:	3332      	adds	r3, #50	; 0x32
 801bdc2:	4a08      	ldr	r2, [pc, #32]	; (801bde4 <UART_SetConfig+0x2d4>)
 801bdc4:	fba2 2303 	umull	r2, r3, r2, r3
 801bdc8:	095b      	lsrs	r3, r3, #5
 801bdca:	f003 0207 	and.w	r2, r3, #7
 801bdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	4422      	add	r2, r4
 801bdd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801bdd8:	e106      	b.n	801bfe8 <UART_SetConfig+0x4d8>
 801bdda:	bf00      	nop
 801bddc:	40011000 	.word	0x40011000
 801bde0:	40011400 	.word	0x40011400
 801bde4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801bde8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bdec:	2200      	movs	r2, #0
 801bdee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801bdf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801bdf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801bdfa:	4642      	mov	r2, r8
 801bdfc:	464b      	mov	r3, r9
 801bdfe:	1891      	adds	r1, r2, r2
 801be00:	6239      	str	r1, [r7, #32]
 801be02:	415b      	adcs	r3, r3
 801be04:	627b      	str	r3, [r7, #36]	; 0x24
 801be06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801be0a:	4641      	mov	r1, r8
 801be0c:	1854      	adds	r4, r2, r1
 801be0e:	4649      	mov	r1, r9
 801be10:	eb43 0501 	adc.w	r5, r3, r1
 801be14:	f04f 0200 	mov.w	r2, #0
 801be18:	f04f 0300 	mov.w	r3, #0
 801be1c:	00eb      	lsls	r3, r5, #3
 801be1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801be22:	00e2      	lsls	r2, r4, #3
 801be24:	4614      	mov	r4, r2
 801be26:	461d      	mov	r5, r3
 801be28:	4643      	mov	r3, r8
 801be2a:	18e3      	adds	r3, r4, r3
 801be2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801be30:	464b      	mov	r3, r9
 801be32:	eb45 0303 	adc.w	r3, r5, r3
 801be36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801be3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801be3e:	685b      	ldr	r3, [r3, #4]
 801be40:	2200      	movs	r2, #0
 801be42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801be46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801be4a:	f04f 0200 	mov.w	r2, #0
 801be4e:	f04f 0300 	mov.w	r3, #0
 801be52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801be56:	4629      	mov	r1, r5
 801be58:	008b      	lsls	r3, r1, #2
 801be5a:	4621      	mov	r1, r4
 801be5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801be60:	4621      	mov	r1, r4
 801be62:	008a      	lsls	r2, r1, #2
 801be64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801be68:	f7e4 fefe 	bl	8000c68 <__aeabi_uldivmod>
 801be6c:	4602      	mov	r2, r0
 801be6e:	460b      	mov	r3, r1
 801be70:	4b60      	ldr	r3, [pc, #384]	; (801bff4 <UART_SetConfig+0x4e4>)
 801be72:	fba3 2302 	umull	r2, r3, r3, r2
 801be76:	095b      	lsrs	r3, r3, #5
 801be78:	011c      	lsls	r4, r3, #4
 801be7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801be7e:	2200      	movs	r2, #0
 801be80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801be84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801be88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801be8c:	4642      	mov	r2, r8
 801be8e:	464b      	mov	r3, r9
 801be90:	1891      	adds	r1, r2, r2
 801be92:	61b9      	str	r1, [r7, #24]
 801be94:	415b      	adcs	r3, r3
 801be96:	61fb      	str	r3, [r7, #28]
 801be98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801be9c:	4641      	mov	r1, r8
 801be9e:	1851      	adds	r1, r2, r1
 801bea0:	6139      	str	r1, [r7, #16]
 801bea2:	4649      	mov	r1, r9
 801bea4:	414b      	adcs	r3, r1
 801bea6:	617b      	str	r3, [r7, #20]
 801bea8:	f04f 0200 	mov.w	r2, #0
 801beac:	f04f 0300 	mov.w	r3, #0
 801beb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801beb4:	4659      	mov	r1, fp
 801beb6:	00cb      	lsls	r3, r1, #3
 801beb8:	4651      	mov	r1, sl
 801beba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801bebe:	4651      	mov	r1, sl
 801bec0:	00ca      	lsls	r2, r1, #3
 801bec2:	4610      	mov	r0, r2
 801bec4:	4619      	mov	r1, r3
 801bec6:	4603      	mov	r3, r0
 801bec8:	4642      	mov	r2, r8
 801beca:	189b      	adds	r3, r3, r2
 801becc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801bed0:	464b      	mov	r3, r9
 801bed2:	460a      	mov	r2, r1
 801bed4:	eb42 0303 	adc.w	r3, r2, r3
 801bed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801bedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bee0:	685b      	ldr	r3, [r3, #4]
 801bee2:	2200      	movs	r2, #0
 801bee4:	67bb      	str	r3, [r7, #120]	; 0x78
 801bee6:	67fa      	str	r2, [r7, #124]	; 0x7c
 801bee8:	f04f 0200 	mov.w	r2, #0
 801beec:	f04f 0300 	mov.w	r3, #0
 801bef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801bef4:	4649      	mov	r1, r9
 801bef6:	008b      	lsls	r3, r1, #2
 801bef8:	4641      	mov	r1, r8
 801befa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801befe:	4641      	mov	r1, r8
 801bf00:	008a      	lsls	r2, r1, #2
 801bf02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801bf06:	f7e4 feaf 	bl	8000c68 <__aeabi_uldivmod>
 801bf0a:	4602      	mov	r2, r0
 801bf0c:	460b      	mov	r3, r1
 801bf0e:	4611      	mov	r1, r2
 801bf10:	4b38      	ldr	r3, [pc, #224]	; (801bff4 <UART_SetConfig+0x4e4>)
 801bf12:	fba3 2301 	umull	r2, r3, r3, r1
 801bf16:	095b      	lsrs	r3, r3, #5
 801bf18:	2264      	movs	r2, #100	; 0x64
 801bf1a:	fb02 f303 	mul.w	r3, r2, r3
 801bf1e:	1acb      	subs	r3, r1, r3
 801bf20:	011b      	lsls	r3, r3, #4
 801bf22:	3332      	adds	r3, #50	; 0x32
 801bf24:	4a33      	ldr	r2, [pc, #204]	; (801bff4 <UART_SetConfig+0x4e4>)
 801bf26:	fba2 2303 	umull	r2, r3, r2, r3
 801bf2a:	095b      	lsrs	r3, r3, #5
 801bf2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bf30:	441c      	add	r4, r3
 801bf32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bf36:	2200      	movs	r2, #0
 801bf38:	673b      	str	r3, [r7, #112]	; 0x70
 801bf3a:	677a      	str	r2, [r7, #116]	; 0x74
 801bf3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801bf40:	4642      	mov	r2, r8
 801bf42:	464b      	mov	r3, r9
 801bf44:	1891      	adds	r1, r2, r2
 801bf46:	60b9      	str	r1, [r7, #8]
 801bf48:	415b      	adcs	r3, r3
 801bf4a:	60fb      	str	r3, [r7, #12]
 801bf4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bf50:	4641      	mov	r1, r8
 801bf52:	1851      	adds	r1, r2, r1
 801bf54:	6039      	str	r1, [r7, #0]
 801bf56:	4649      	mov	r1, r9
 801bf58:	414b      	adcs	r3, r1
 801bf5a:	607b      	str	r3, [r7, #4]
 801bf5c:	f04f 0200 	mov.w	r2, #0
 801bf60:	f04f 0300 	mov.w	r3, #0
 801bf64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801bf68:	4659      	mov	r1, fp
 801bf6a:	00cb      	lsls	r3, r1, #3
 801bf6c:	4651      	mov	r1, sl
 801bf6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801bf72:	4651      	mov	r1, sl
 801bf74:	00ca      	lsls	r2, r1, #3
 801bf76:	4610      	mov	r0, r2
 801bf78:	4619      	mov	r1, r3
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	4642      	mov	r2, r8
 801bf7e:	189b      	adds	r3, r3, r2
 801bf80:	66bb      	str	r3, [r7, #104]	; 0x68
 801bf82:	464b      	mov	r3, r9
 801bf84:	460a      	mov	r2, r1
 801bf86:	eb42 0303 	adc.w	r3, r2, r3
 801bf8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801bf8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf90:	685b      	ldr	r3, [r3, #4]
 801bf92:	2200      	movs	r2, #0
 801bf94:	663b      	str	r3, [r7, #96]	; 0x60
 801bf96:	667a      	str	r2, [r7, #100]	; 0x64
 801bf98:	f04f 0200 	mov.w	r2, #0
 801bf9c:	f04f 0300 	mov.w	r3, #0
 801bfa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801bfa4:	4649      	mov	r1, r9
 801bfa6:	008b      	lsls	r3, r1, #2
 801bfa8:	4641      	mov	r1, r8
 801bfaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801bfae:	4641      	mov	r1, r8
 801bfb0:	008a      	lsls	r2, r1, #2
 801bfb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801bfb6:	f7e4 fe57 	bl	8000c68 <__aeabi_uldivmod>
 801bfba:	4602      	mov	r2, r0
 801bfbc:	460b      	mov	r3, r1
 801bfbe:	4b0d      	ldr	r3, [pc, #52]	; (801bff4 <UART_SetConfig+0x4e4>)
 801bfc0:	fba3 1302 	umull	r1, r3, r3, r2
 801bfc4:	095b      	lsrs	r3, r3, #5
 801bfc6:	2164      	movs	r1, #100	; 0x64
 801bfc8:	fb01 f303 	mul.w	r3, r1, r3
 801bfcc:	1ad3      	subs	r3, r2, r3
 801bfce:	011b      	lsls	r3, r3, #4
 801bfd0:	3332      	adds	r3, #50	; 0x32
 801bfd2:	4a08      	ldr	r2, [pc, #32]	; (801bff4 <UART_SetConfig+0x4e4>)
 801bfd4:	fba2 2303 	umull	r2, r3, r2, r3
 801bfd8:	095b      	lsrs	r3, r3, #5
 801bfda:	f003 020f 	and.w	r2, r3, #15
 801bfde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	4422      	add	r2, r4
 801bfe6:	609a      	str	r2, [r3, #8]
}
 801bfe8:	bf00      	nop
 801bfea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801bfee:	46bd      	mov	sp, r7
 801bff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bff4:	51eb851f 	.word	0x51eb851f

0801bff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801bff8:	b084      	sub	sp, #16
 801bffa:	b580      	push	{r7, lr}
 801bffc:	b084      	sub	sp, #16
 801bffe:	af00      	add	r7, sp, #0
 801c000:	6078      	str	r0, [r7, #4]
 801c002:	f107 001c 	add.w	r0, r7, #28
 801c006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801c00a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c00e:	2b01      	cmp	r3, #1
 801c010:	d123      	bne.n	801c05a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c016:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	68db      	ldr	r3, [r3, #12]
 801c022:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801c026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c02a:	687a      	ldr	r2, [r7, #4]
 801c02c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	68db      	ldr	r3, [r3, #12]
 801c032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801c03a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c03e:	2b01      	cmp	r3, #1
 801c040:	d105      	bne.n	801c04e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	68db      	ldr	r3, [r3, #12]
 801c046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801c04e:	6878      	ldr	r0, [r7, #4]
 801c050:	f001 fae2 	bl	801d618 <USB_CoreReset>
 801c054:	4603      	mov	r3, r0
 801c056:	73fb      	strb	r3, [r7, #15]
 801c058:	e01b      	b.n	801c092 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	68db      	ldr	r3, [r3, #12]
 801c05e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801c066:	6878      	ldr	r0, [r7, #4]
 801c068:	f001 fad6 	bl	801d618 <USB_CoreReset>
 801c06c:	4603      	mov	r3, r0
 801c06e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801c070:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801c074:	2b00      	cmp	r3, #0
 801c076:	d106      	bne.n	801c086 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c07c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	639a      	str	r2, [r3, #56]	; 0x38
 801c084:	e005      	b.n	801c092 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c08a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801c092:	7fbb      	ldrb	r3, [r7, #30]
 801c094:	2b01      	cmp	r3, #1
 801c096:	d10b      	bne.n	801c0b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	689b      	ldr	r3, [r3, #8]
 801c09c:	f043 0206 	orr.w	r2, r3, #6
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	689b      	ldr	r3, [r3, #8]
 801c0a8:	f043 0220 	orr.w	r2, r3, #32
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801c0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	3710      	adds	r7, #16
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c0bc:	b004      	add	sp, #16
 801c0be:	4770      	bx	lr

0801c0c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801c0c0:	b480      	push	{r7}
 801c0c2:	b087      	sub	sp, #28
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	60f8      	str	r0, [r7, #12]
 801c0c8:	60b9      	str	r1, [r7, #8]
 801c0ca:	4613      	mov	r3, r2
 801c0cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801c0ce:	79fb      	ldrb	r3, [r7, #7]
 801c0d0:	2b02      	cmp	r3, #2
 801c0d2:	d165      	bne.n	801c1a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	4a41      	ldr	r2, [pc, #260]	; (801c1dc <USB_SetTurnaroundTime+0x11c>)
 801c0d8:	4293      	cmp	r3, r2
 801c0da:	d906      	bls.n	801c0ea <USB_SetTurnaroundTime+0x2a>
 801c0dc:	68bb      	ldr	r3, [r7, #8]
 801c0de:	4a40      	ldr	r2, [pc, #256]	; (801c1e0 <USB_SetTurnaroundTime+0x120>)
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d202      	bcs.n	801c0ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801c0e4:	230f      	movs	r3, #15
 801c0e6:	617b      	str	r3, [r7, #20]
 801c0e8:	e062      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801c0ea:	68bb      	ldr	r3, [r7, #8]
 801c0ec:	4a3c      	ldr	r2, [pc, #240]	; (801c1e0 <USB_SetTurnaroundTime+0x120>)
 801c0ee:	4293      	cmp	r3, r2
 801c0f0:	d306      	bcc.n	801c100 <USB_SetTurnaroundTime+0x40>
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	4a3b      	ldr	r2, [pc, #236]	; (801c1e4 <USB_SetTurnaroundTime+0x124>)
 801c0f6:	4293      	cmp	r3, r2
 801c0f8:	d202      	bcs.n	801c100 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801c0fa:	230e      	movs	r3, #14
 801c0fc:	617b      	str	r3, [r7, #20]
 801c0fe:	e057      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	4a38      	ldr	r2, [pc, #224]	; (801c1e4 <USB_SetTurnaroundTime+0x124>)
 801c104:	4293      	cmp	r3, r2
 801c106:	d306      	bcc.n	801c116 <USB_SetTurnaroundTime+0x56>
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	4a37      	ldr	r2, [pc, #220]	; (801c1e8 <USB_SetTurnaroundTime+0x128>)
 801c10c:	4293      	cmp	r3, r2
 801c10e:	d202      	bcs.n	801c116 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801c110:	230d      	movs	r3, #13
 801c112:	617b      	str	r3, [r7, #20]
 801c114:	e04c      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801c116:	68bb      	ldr	r3, [r7, #8]
 801c118:	4a33      	ldr	r2, [pc, #204]	; (801c1e8 <USB_SetTurnaroundTime+0x128>)
 801c11a:	4293      	cmp	r3, r2
 801c11c:	d306      	bcc.n	801c12c <USB_SetTurnaroundTime+0x6c>
 801c11e:	68bb      	ldr	r3, [r7, #8]
 801c120:	4a32      	ldr	r2, [pc, #200]	; (801c1ec <USB_SetTurnaroundTime+0x12c>)
 801c122:	4293      	cmp	r3, r2
 801c124:	d802      	bhi.n	801c12c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801c126:	230c      	movs	r3, #12
 801c128:	617b      	str	r3, [r7, #20]
 801c12a:	e041      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801c12c:	68bb      	ldr	r3, [r7, #8]
 801c12e:	4a2f      	ldr	r2, [pc, #188]	; (801c1ec <USB_SetTurnaroundTime+0x12c>)
 801c130:	4293      	cmp	r3, r2
 801c132:	d906      	bls.n	801c142 <USB_SetTurnaroundTime+0x82>
 801c134:	68bb      	ldr	r3, [r7, #8]
 801c136:	4a2e      	ldr	r2, [pc, #184]	; (801c1f0 <USB_SetTurnaroundTime+0x130>)
 801c138:	4293      	cmp	r3, r2
 801c13a:	d802      	bhi.n	801c142 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801c13c:	230b      	movs	r3, #11
 801c13e:	617b      	str	r3, [r7, #20]
 801c140:	e036      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801c142:	68bb      	ldr	r3, [r7, #8]
 801c144:	4a2a      	ldr	r2, [pc, #168]	; (801c1f0 <USB_SetTurnaroundTime+0x130>)
 801c146:	4293      	cmp	r3, r2
 801c148:	d906      	bls.n	801c158 <USB_SetTurnaroundTime+0x98>
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	4a29      	ldr	r2, [pc, #164]	; (801c1f4 <USB_SetTurnaroundTime+0x134>)
 801c14e:	4293      	cmp	r3, r2
 801c150:	d802      	bhi.n	801c158 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801c152:	230a      	movs	r3, #10
 801c154:	617b      	str	r3, [r7, #20]
 801c156:	e02b      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	4a26      	ldr	r2, [pc, #152]	; (801c1f4 <USB_SetTurnaroundTime+0x134>)
 801c15c:	4293      	cmp	r3, r2
 801c15e:	d906      	bls.n	801c16e <USB_SetTurnaroundTime+0xae>
 801c160:	68bb      	ldr	r3, [r7, #8]
 801c162:	4a25      	ldr	r2, [pc, #148]	; (801c1f8 <USB_SetTurnaroundTime+0x138>)
 801c164:	4293      	cmp	r3, r2
 801c166:	d202      	bcs.n	801c16e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801c168:	2309      	movs	r3, #9
 801c16a:	617b      	str	r3, [r7, #20]
 801c16c:	e020      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801c16e:	68bb      	ldr	r3, [r7, #8]
 801c170:	4a21      	ldr	r2, [pc, #132]	; (801c1f8 <USB_SetTurnaroundTime+0x138>)
 801c172:	4293      	cmp	r3, r2
 801c174:	d306      	bcc.n	801c184 <USB_SetTurnaroundTime+0xc4>
 801c176:	68bb      	ldr	r3, [r7, #8]
 801c178:	4a20      	ldr	r2, [pc, #128]	; (801c1fc <USB_SetTurnaroundTime+0x13c>)
 801c17a:	4293      	cmp	r3, r2
 801c17c:	d802      	bhi.n	801c184 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801c17e:	2308      	movs	r3, #8
 801c180:	617b      	str	r3, [r7, #20]
 801c182:	e015      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801c184:	68bb      	ldr	r3, [r7, #8]
 801c186:	4a1d      	ldr	r2, [pc, #116]	; (801c1fc <USB_SetTurnaroundTime+0x13c>)
 801c188:	4293      	cmp	r3, r2
 801c18a:	d906      	bls.n	801c19a <USB_SetTurnaroundTime+0xda>
 801c18c:	68bb      	ldr	r3, [r7, #8]
 801c18e:	4a1c      	ldr	r2, [pc, #112]	; (801c200 <USB_SetTurnaroundTime+0x140>)
 801c190:	4293      	cmp	r3, r2
 801c192:	d202      	bcs.n	801c19a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801c194:	2307      	movs	r3, #7
 801c196:	617b      	str	r3, [r7, #20]
 801c198:	e00a      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801c19a:	2306      	movs	r3, #6
 801c19c:	617b      	str	r3, [r7, #20]
 801c19e:	e007      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801c1a0:	79fb      	ldrb	r3, [r7, #7]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d102      	bne.n	801c1ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801c1a6:	2309      	movs	r3, #9
 801c1a8:	617b      	str	r3, [r7, #20]
 801c1aa:	e001      	b.n	801c1b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801c1ac:	2309      	movs	r3, #9
 801c1ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	68db      	ldr	r3, [r3, #12]
 801c1b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	68da      	ldr	r2, [r3, #12]
 801c1c0:	697b      	ldr	r3, [r7, #20]
 801c1c2:	029b      	lsls	r3, r3, #10
 801c1c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801c1c8:	431a      	orrs	r2, r3
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801c1ce:	2300      	movs	r3, #0
}
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	371c      	adds	r7, #28
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1da:	4770      	bx	lr
 801c1dc:	00d8acbf 	.word	0x00d8acbf
 801c1e0:	00e4e1c0 	.word	0x00e4e1c0
 801c1e4:	00f42400 	.word	0x00f42400
 801c1e8:	01067380 	.word	0x01067380
 801c1ec:	011a499f 	.word	0x011a499f
 801c1f0:	01312cff 	.word	0x01312cff
 801c1f4:	014ca43f 	.word	0x014ca43f
 801c1f8:	016e3600 	.word	0x016e3600
 801c1fc:	01a6ab1f 	.word	0x01a6ab1f
 801c200:	01e84800 	.word	0x01e84800

0801c204 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801c204:	b480      	push	{r7}
 801c206:	b083      	sub	sp, #12
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	689b      	ldr	r3, [r3, #8]
 801c210:	f043 0201 	orr.w	r2, r3, #1
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801c218:	2300      	movs	r3, #0
}
 801c21a:	4618      	mov	r0, r3
 801c21c:	370c      	adds	r7, #12
 801c21e:	46bd      	mov	sp, r7
 801c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c224:	4770      	bx	lr

0801c226 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801c226:	b480      	push	{r7}
 801c228:	b083      	sub	sp, #12
 801c22a:	af00      	add	r7, sp, #0
 801c22c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	689b      	ldr	r3, [r3, #8]
 801c232:	f023 0201 	bic.w	r2, r3, #1
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801c23a:	2300      	movs	r3, #0
}
 801c23c:	4618      	mov	r0, r3
 801c23e:	370c      	adds	r7, #12
 801c240:	46bd      	mov	sp, r7
 801c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c246:	4770      	bx	lr

0801c248 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	b084      	sub	sp, #16
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	6078      	str	r0, [r7, #4]
 801c250:	460b      	mov	r3, r1
 801c252:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801c254:	2300      	movs	r3, #0
 801c256:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	68db      	ldr	r3, [r3, #12]
 801c25c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801c264:	78fb      	ldrb	r3, [r7, #3]
 801c266:	2b01      	cmp	r3, #1
 801c268:	d115      	bne.n	801c296 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	68db      	ldr	r3, [r3, #12]
 801c26e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801c276:	200a      	movs	r0, #10
 801c278:	f7fa fb04 	bl	8016884 <HAL_Delay>
      ms += 10U;
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	330a      	adds	r3, #10
 801c280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801c282:	6878      	ldr	r0, [r7, #4]
 801c284:	f001 f939 	bl	801d4fa <USB_GetMode>
 801c288:	4603      	mov	r3, r0
 801c28a:	2b01      	cmp	r3, #1
 801c28c:	d01e      	beq.n	801c2cc <USB_SetCurrentMode+0x84>
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	2bc7      	cmp	r3, #199	; 0xc7
 801c292:	d9f0      	bls.n	801c276 <USB_SetCurrentMode+0x2e>
 801c294:	e01a      	b.n	801c2cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801c296:	78fb      	ldrb	r3, [r7, #3]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d115      	bne.n	801c2c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	68db      	ldr	r3, [r3, #12]
 801c2a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801c2a8:	200a      	movs	r0, #10
 801c2aa:	f7fa faeb 	bl	8016884 <HAL_Delay>
      ms += 10U;
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	330a      	adds	r3, #10
 801c2b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801c2b4:	6878      	ldr	r0, [r7, #4]
 801c2b6:	f001 f920 	bl	801d4fa <USB_GetMode>
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d005      	beq.n	801c2cc <USB_SetCurrentMode+0x84>
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	2bc7      	cmp	r3, #199	; 0xc7
 801c2c4:	d9f0      	bls.n	801c2a8 <USB_SetCurrentMode+0x60>
 801c2c6:	e001      	b.n	801c2cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801c2c8:	2301      	movs	r3, #1
 801c2ca:	e005      	b.n	801c2d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	2bc8      	cmp	r3, #200	; 0xc8
 801c2d0:	d101      	bne.n	801c2d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	e000      	b.n	801c2d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801c2d6:	2300      	movs	r3, #0
}
 801c2d8:	4618      	mov	r0, r3
 801c2da:	3710      	adds	r7, #16
 801c2dc:	46bd      	mov	sp, r7
 801c2de:	bd80      	pop	{r7, pc}

0801c2e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801c2e0:	b084      	sub	sp, #16
 801c2e2:	b580      	push	{r7, lr}
 801c2e4:	b086      	sub	sp, #24
 801c2e6:	af00      	add	r7, sp, #0
 801c2e8:	6078      	str	r0, [r7, #4]
 801c2ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801c2ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	613b      	str	r3, [r7, #16]
 801c2fe:	e009      	b.n	801c314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801c300:	687a      	ldr	r2, [r7, #4]
 801c302:	693b      	ldr	r3, [r7, #16]
 801c304:	3340      	adds	r3, #64	; 0x40
 801c306:	009b      	lsls	r3, r3, #2
 801c308:	4413      	add	r3, r2
 801c30a:	2200      	movs	r2, #0
 801c30c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801c30e:	693b      	ldr	r3, [r7, #16]
 801c310:	3301      	adds	r3, #1
 801c312:	613b      	str	r3, [r7, #16]
 801c314:	693b      	ldr	r3, [r7, #16]
 801c316:	2b0e      	cmp	r3, #14
 801c318:	d9f2      	bls.n	801c300 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801c31a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d11c      	bne.n	801c35c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c328:	685b      	ldr	r3, [r3, #4]
 801c32a:	68fa      	ldr	r2, [r7, #12]
 801c32c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c330:	f043 0302 	orr.w	r3, r3, #2
 801c334:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c33a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c346:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c352:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	639a      	str	r2, [r3, #56]	; 0x38
 801c35a:	e00b      	b.n	801c374 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c360:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c36c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c37a:	461a      	mov	r2, r3
 801c37c:	2300      	movs	r3, #0
 801c37e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801c380:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801c384:	2b01      	cmp	r3, #1
 801c386:	d10d      	bne.n	801c3a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801c388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d104      	bne.n	801c39a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801c390:	2100      	movs	r1, #0
 801c392:	6878      	ldr	r0, [r7, #4]
 801c394:	f000 f968 	bl	801c668 <USB_SetDevSpeed>
 801c398:	e008      	b.n	801c3ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801c39a:	2101      	movs	r1, #1
 801c39c:	6878      	ldr	r0, [r7, #4]
 801c39e:	f000 f963 	bl	801c668 <USB_SetDevSpeed>
 801c3a2:	e003      	b.n	801c3ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801c3a4:	2103      	movs	r1, #3
 801c3a6:	6878      	ldr	r0, [r7, #4]
 801c3a8:	f000 f95e 	bl	801c668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801c3ac:	2110      	movs	r1, #16
 801c3ae:	6878      	ldr	r0, [r7, #4]
 801c3b0:	f000 f8fa 	bl	801c5a8 <USB_FlushTxFifo>
 801c3b4:	4603      	mov	r3, r0
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d001      	beq.n	801c3be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 801c3ba:	2301      	movs	r3, #1
 801c3bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801c3be:	6878      	ldr	r0, [r7, #4]
 801c3c0:	f000 f924 	bl	801c60c <USB_FlushRxFifo>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d001      	beq.n	801c3ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 801c3ca:	2301      	movs	r3, #1
 801c3cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c3d4:	461a      	mov	r2, r3
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c3e0:	461a      	mov	r2, r3
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c3ec:	461a      	mov	r2, r3
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801c3f2:	2300      	movs	r3, #0
 801c3f4:	613b      	str	r3, [r7, #16]
 801c3f6:	e043      	b.n	801c480 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801c3f8:	693b      	ldr	r3, [r7, #16]
 801c3fa:	015a      	lsls	r2, r3, #5
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	4413      	add	r3, r2
 801c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c40a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c40e:	d118      	bne.n	801c442 <USB_DevInit+0x162>
    {
      if (i == 0U)
 801c410:	693b      	ldr	r3, [r7, #16]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d10a      	bne.n	801c42c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801c416:	693b      	ldr	r3, [r7, #16]
 801c418:	015a      	lsls	r2, r3, #5
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	4413      	add	r3, r2
 801c41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c422:	461a      	mov	r2, r3
 801c424:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801c428:	6013      	str	r3, [r2, #0]
 801c42a:	e013      	b.n	801c454 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801c42c:	693b      	ldr	r3, [r7, #16]
 801c42e:	015a      	lsls	r2, r3, #5
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	4413      	add	r3, r2
 801c434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c438:	461a      	mov	r2, r3
 801c43a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801c43e:	6013      	str	r3, [r2, #0]
 801c440:	e008      	b.n	801c454 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801c442:	693b      	ldr	r3, [r7, #16]
 801c444:	015a      	lsls	r2, r3, #5
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	4413      	add	r3, r2
 801c44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c44e:	461a      	mov	r2, r3
 801c450:	2300      	movs	r3, #0
 801c452:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	015a      	lsls	r2, r3, #5
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	4413      	add	r3, r2
 801c45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c460:	461a      	mov	r2, r3
 801c462:	2300      	movs	r3, #0
 801c464:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801c466:	693b      	ldr	r3, [r7, #16]
 801c468:	015a      	lsls	r2, r3, #5
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	4413      	add	r3, r2
 801c46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c472:	461a      	mov	r2, r3
 801c474:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801c478:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801c47a:	693b      	ldr	r3, [r7, #16]
 801c47c:	3301      	adds	r3, #1
 801c47e:	613b      	str	r3, [r7, #16]
 801c480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c484:	461a      	mov	r2, r3
 801c486:	693b      	ldr	r3, [r7, #16]
 801c488:	4293      	cmp	r3, r2
 801c48a:	d3b5      	bcc.n	801c3f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801c48c:	2300      	movs	r3, #0
 801c48e:	613b      	str	r3, [r7, #16]
 801c490:	e043      	b.n	801c51a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c492:	693b      	ldr	r3, [r7, #16]
 801c494:	015a      	lsls	r2, r3, #5
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	4413      	add	r3, r2
 801c49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c4a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c4a8:	d118      	bne.n	801c4dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 801c4aa:	693b      	ldr	r3, [r7, #16]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d10a      	bne.n	801c4c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	015a      	lsls	r2, r3, #5
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	4413      	add	r3, r2
 801c4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4bc:	461a      	mov	r2, r3
 801c4be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801c4c2:	6013      	str	r3, [r2, #0]
 801c4c4:	e013      	b.n	801c4ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801c4c6:	693b      	ldr	r3, [r7, #16]
 801c4c8:	015a      	lsls	r2, r3, #5
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	4413      	add	r3, r2
 801c4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4d2:	461a      	mov	r2, r3
 801c4d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801c4d8:	6013      	str	r3, [r2, #0]
 801c4da:	e008      	b.n	801c4ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801c4dc:	693b      	ldr	r3, [r7, #16]
 801c4de:	015a      	lsls	r2, r3, #5
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	4413      	add	r3, r2
 801c4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4e8:	461a      	mov	r2, r3
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801c4ee:	693b      	ldr	r3, [r7, #16]
 801c4f0:	015a      	lsls	r2, r3, #5
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	4413      	add	r3, r2
 801c4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c4fa:	461a      	mov	r2, r3
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801c500:	693b      	ldr	r3, [r7, #16]
 801c502:	015a      	lsls	r2, r3, #5
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	4413      	add	r3, r2
 801c508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c50c:	461a      	mov	r2, r3
 801c50e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801c512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	3301      	adds	r3, #1
 801c518:	613b      	str	r3, [r7, #16]
 801c51a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c51e:	461a      	mov	r2, r3
 801c520:	693b      	ldr	r3, [r7, #16]
 801c522:	4293      	cmp	r3, r2
 801c524:	d3b5      	bcc.n	801c492 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c52c:	691b      	ldr	r3, [r3, #16]
 801c52e:	68fa      	ldr	r2, [r7, #12]
 801c530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c538:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	2200      	movs	r2, #0
 801c53e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801c546:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801c548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d105      	bne.n	801c55c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	699b      	ldr	r3, [r3, #24]
 801c554:	f043 0210 	orr.w	r2, r3, #16
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	699a      	ldr	r2, [r3, #24]
 801c560:	4b10      	ldr	r3, [pc, #64]	; (801c5a4 <USB_DevInit+0x2c4>)
 801c562:	4313      	orrs	r3, r2
 801c564:	687a      	ldr	r2, [r7, #4]
 801c566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801c568:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d005      	beq.n	801c57c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	699b      	ldr	r3, [r3, #24]
 801c574:	f043 0208 	orr.w	r2, r3, #8
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801c57c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801c580:	2b01      	cmp	r3, #1
 801c582:	d107      	bne.n	801c594 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	699b      	ldr	r3, [r3, #24]
 801c588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801c58c:	f043 0304 	orr.w	r3, r3, #4
 801c590:	687a      	ldr	r2, [r7, #4]
 801c592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801c594:	7dfb      	ldrb	r3, [r7, #23]
}
 801c596:	4618      	mov	r0, r3
 801c598:	3718      	adds	r7, #24
 801c59a:	46bd      	mov	sp, r7
 801c59c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c5a0:	b004      	add	sp, #16
 801c5a2:	4770      	bx	lr
 801c5a4:	803c3800 	.word	0x803c3800

0801c5a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801c5a8:	b480      	push	{r7}
 801c5aa:	b085      	sub	sp, #20
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
 801c5b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	3301      	adds	r3, #1
 801c5ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801c5c2:	d901      	bls.n	801c5c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801c5c4:	2303      	movs	r3, #3
 801c5c6:	e01b      	b.n	801c600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	691b      	ldr	r3, [r3, #16]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	daf2      	bge.n	801c5b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	019b      	lsls	r3, r3, #6
 801c5d8:	f043 0220 	orr.w	r2, r3, #32
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801c5ec:	d901      	bls.n	801c5f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801c5ee:	2303      	movs	r3, #3
 801c5f0:	e006      	b.n	801c600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	691b      	ldr	r3, [r3, #16]
 801c5f6:	f003 0320 	and.w	r3, r3, #32
 801c5fa:	2b20      	cmp	r3, #32
 801c5fc:	d0f0      	beq.n	801c5e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801c5fe:	2300      	movs	r3, #0
}
 801c600:	4618      	mov	r0, r3
 801c602:	3714      	adds	r7, #20
 801c604:	46bd      	mov	sp, r7
 801c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c60a:	4770      	bx	lr

0801c60c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801c60c:	b480      	push	{r7}
 801c60e:	b085      	sub	sp, #20
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801c614:	2300      	movs	r3, #0
 801c616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	3301      	adds	r3, #1
 801c61c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801c624:	d901      	bls.n	801c62a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801c626:	2303      	movs	r3, #3
 801c628:	e018      	b.n	801c65c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	691b      	ldr	r3, [r3, #16]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	daf2      	bge.n	801c618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801c632:	2300      	movs	r3, #0
 801c634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	2210      	movs	r2, #16
 801c63a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	3301      	adds	r3, #1
 801c640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801c648:	d901      	bls.n	801c64e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801c64a:	2303      	movs	r3, #3
 801c64c:	e006      	b.n	801c65c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	691b      	ldr	r3, [r3, #16]
 801c652:	f003 0310 	and.w	r3, r3, #16
 801c656:	2b10      	cmp	r3, #16
 801c658:	d0f0      	beq.n	801c63c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801c65a:	2300      	movs	r3, #0
}
 801c65c:	4618      	mov	r0, r3
 801c65e:	3714      	adds	r7, #20
 801c660:	46bd      	mov	sp, r7
 801c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c666:	4770      	bx	lr

0801c668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801c668:	b480      	push	{r7}
 801c66a:	b085      	sub	sp, #20
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	6078      	str	r0, [r7, #4]
 801c670:	460b      	mov	r3, r1
 801c672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c67e:	681a      	ldr	r2, [r3, #0]
 801c680:	78fb      	ldrb	r3, [r7, #3]
 801c682:	68f9      	ldr	r1, [r7, #12]
 801c684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c688:	4313      	orrs	r3, r2
 801c68a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801c68c:	2300      	movs	r3, #0
}
 801c68e:	4618      	mov	r0, r3
 801c690:	3714      	adds	r7, #20
 801c692:	46bd      	mov	sp, r7
 801c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c698:	4770      	bx	lr

0801c69a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801c69a:	b480      	push	{r7}
 801c69c:	b087      	sub	sp, #28
 801c69e:	af00      	add	r7, sp, #0
 801c6a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801c6a6:	693b      	ldr	r3, [r7, #16]
 801c6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c6ac:	689b      	ldr	r3, [r3, #8]
 801c6ae:	f003 0306 	and.w	r3, r3, #6
 801c6b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d102      	bne.n	801c6c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	75fb      	strb	r3, [r7, #23]
 801c6be:	e00a      	b.n	801c6d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	2b02      	cmp	r3, #2
 801c6c4:	d002      	beq.n	801c6cc <USB_GetDevSpeed+0x32>
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	2b06      	cmp	r3, #6
 801c6ca:	d102      	bne.n	801c6d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801c6cc:	2302      	movs	r3, #2
 801c6ce:	75fb      	strb	r3, [r7, #23]
 801c6d0:	e001      	b.n	801c6d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801c6d2:	230f      	movs	r3, #15
 801c6d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801c6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6d8:	4618      	mov	r0, r3
 801c6da:	371c      	adds	r7, #28
 801c6dc:	46bd      	mov	sp, r7
 801c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e2:	4770      	bx	lr

0801c6e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801c6e4:	b480      	push	{r7}
 801c6e6:	b085      	sub	sp, #20
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c6f2:	683b      	ldr	r3, [r7, #0]
 801c6f4:	781b      	ldrb	r3, [r3, #0]
 801c6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c6f8:	683b      	ldr	r3, [r7, #0]
 801c6fa:	785b      	ldrb	r3, [r3, #1]
 801c6fc:	2b01      	cmp	r3, #1
 801c6fe:	d13a      	bne.n	801c776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c706:	69da      	ldr	r2, [r3, #28]
 801c708:	683b      	ldr	r3, [r7, #0]
 801c70a:	781b      	ldrb	r3, [r3, #0]
 801c70c:	f003 030f 	and.w	r3, r3, #15
 801c710:	2101      	movs	r1, #1
 801c712:	fa01 f303 	lsl.w	r3, r1, r3
 801c716:	b29b      	uxth	r3, r3
 801c718:	68f9      	ldr	r1, [r7, #12]
 801c71a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c71e:	4313      	orrs	r3, r2
 801c720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801c722:	68bb      	ldr	r3, [r7, #8]
 801c724:	015a      	lsls	r2, r3, #5
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	4413      	add	r3, r2
 801c72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c734:	2b00      	cmp	r3, #0
 801c736:	d155      	bne.n	801c7e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801c738:	68bb      	ldr	r3, [r7, #8]
 801c73a:	015a      	lsls	r2, r3, #5
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	4413      	add	r3, r2
 801c740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c744:	681a      	ldr	r2, [r3, #0]
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	689b      	ldr	r3, [r3, #8]
 801c74a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	791b      	ldrb	r3, [r3, #4]
 801c752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801c754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801c756:	68bb      	ldr	r3, [r7, #8]
 801c758:	059b      	lsls	r3, r3, #22
 801c75a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801c75c:	4313      	orrs	r3, r2
 801c75e:	68ba      	ldr	r2, [r7, #8]
 801c760:	0151      	lsls	r1, r2, #5
 801c762:	68fa      	ldr	r2, [r7, #12]
 801c764:	440a      	add	r2, r1
 801c766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c76a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c76e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c772:	6013      	str	r3, [r2, #0]
 801c774:	e036      	b.n	801c7e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c77c:	69da      	ldr	r2, [r3, #28]
 801c77e:	683b      	ldr	r3, [r7, #0]
 801c780:	781b      	ldrb	r3, [r3, #0]
 801c782:	f003 030f 	and.w	r3, r3, #15
 801c786:	2101      	movs	r1, #1
 801c788:	fa01 f303 	lsl.w	r3, r1, r3
 801c78c:	041b      	lsls	r3, r3, #16
 801c78e:	68f9      	ldr	r1, [r7, #12]
 801c790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c794:	4313      	orrs	r3, r2
 801c796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801c798:	68bb      	ldr	r3, [r7, #8]
 801c79a:	015a      	lsls	r2, r3, #5
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	4413      	add	r3, r2
 801c7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d11a      	bne.n	801c7e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801c7ae:	68bb      	ldr	r3, [r7, #8]
 801c7b0:	015a      	lsls	r2, r3, #5
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	4413      	add	r3, r2
 801c7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c7ba:	681a      	ldr	r2, [r3, #0]
 801c7bc:	683b      	ldr	r3, [r7, #0]
 801c7be:	689b      	ldr	r3, [r3, #8]
 801c7c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801c7c4:	683b      	ldr	r3, [r7, #0]
 801c7c6:	791b      	ldrb	r3, [r3, #4]
 801c7c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801c7ca:	430b      	orrs	r3, r1
 801c7cc:	4313      	orrs	r3, r2
 801c7ce:	68ba      	ldr	r2, [r7, #8]
 801c7d0:	0151      	lsls	r1, r2, #5
 801c7d2:	68fa      	ldr	r2, [r7, #12]
 801c7d4:	440a      	add	r2, r1
 801c7d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c7da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c7e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801c7e4:	2300      	movs	r3, #0
}
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	3714      	adds	r7, #20
 801c7ea:	46bd      	mov	sp, r7
 801c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7f0:	4770      	bx	lr
	...

0801c7f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801c7f4:	b480      	push	{r7}
 801c7f6:	b085      	sub	sp, #20
 801c7f8:	af00      	add	r7, sp, #0
 801c7fa:	6078      	str	r0, [r7, #4]
 801c7fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c802:	683b      	ldr	r3, [r7, #0]
 801c804:	781b      	ldrb	r3, [r3, #0]
 801c806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	785b      	ldrb	r3, [r3, #1]
 801c80c:	2b01      	cmp	r3, #1
 801c80e:	d161      	bne.n	801c8d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801c810:	68bb      	ldr	r3, [r7, #8]
 801c812:	015a      	lsls	r2, r3, #5
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	4413      	add	r3, r2
 801c818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c826:	d11f      	bne.n	801c868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	015a      	lsls	r2, r3, #5
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	4413      	add	r3, r2
 801c830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	68ba      	ldr	r2, [r7, #8]
 801c838:	0151      	lsls	r1, r2, #5
 801c83a:	68fa      	ldr	r2, [r7, #12]
 801c83c:	440a      	add	r2, r1
 801c83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801c848:	68bb      	ldr	r3, [r7, #8]
 801c84a:	015a      	lsls	r2, r3, #5
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	4413      	add	r3, r2
 801c850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	68ba      	ldr	r2, [r7, #8]
 801c858:	0151      	lsls	r1, r2, #5
 801c85a:	68fa      	ldr	r2, [r7, #12]
 801c85c:	440a      	add	r2, r1
 801c85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801c866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c870:	683b      	ldr	r3, [r7, #0]
 801c872:	781b      	ldrb	r3, [r3, #0]
 801c874:	f003 030f 	and.w	r3, r3, #15
 801c878:	2101      	movs	r1, #1
 801c87a:	fa01 f303 	lsl.w	r3, r1, r3
 801c87e:	b29b      	uxth	r3, r3
 801c880:	43db      	mvns	r3, r3
 801c882:	68f9      	ldr	r1, [r7, #12]
 801c884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c888:	4013      	ands	r3, r2
 801c88a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c892:	69da      	ldr	r2, [r3, #28]
 801c894:	683b      	ldr	r3, [r7, #0]
 801c896:	781b      	ldrb	r3, [r3, #0]
 801c898:	f003 030f 	and.w	r3, r3, #15
 801c89c:	2101      	movs	r1, #1
 801c89e:	fa01 f303 	lsl.w	r3, r1, r3
 801c8a2:	b29b      	uxth	r3, r3
 801c8a4:	43db      	mvns	r3, r3
 801c8a6:	68f9      	ldr	r1, [r7, #12]
 801c8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c8ac:	4013      	ands	r3, r2
 801c8ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801c8b0:	68bb      	ldr	r3, [r7, #8]
 801c8b2:	015a      	lsls	r2, r3, #5
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	4413      	add	r3, r2
 801c8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c8bc:	681a      	ldr	r2, [r3, #0]
 801c8be:	68bb      	ldr	r3, [r7, #8]
 801c8c0:	0159      	lsls	r1, r3, #5
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	440b      	add	r3, r1
 801c8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c8ca:	4619      	mov	r1, r3
 801c8cc:	4b35      	ldr	r3, [pc, #212]	; (801c9a4 <USB_DeactivateEndpoint+0x1b0>)
 801c8ce:	4013      	ands	r3, r2
 801c8d0:	600b      	str	r3, [r1, #0]
 801c8d2:	e060      	b.n	801c996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c8d4:	68bb      	ldr	r3, [r7, #8]
 801c8d6:	015a      	lsls	r2, r3, #5
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	4413      	add	r3, r2
 801c8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c8e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c8ea:	d11f      	bne.n	801c92c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	015a      	lsls	r2, r3, #5
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	4413      	add	r3, r2
 801c8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	68ba      	ldr	r2, [r7, #8]
 801c8fc:	0151      	lsls	r1, r2, #5
 801c8fe:	68fa      	ldr	r2, [r7, #12]
 801c900:	440a      	add	r2, r1
 801c902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c90a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801c90c:	68bb      	ldr	r3, [r7, #8]
 801c90e:	015a      	lsls	r2, r3, #5
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	4413      	add	r3, r2
 801c914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c918:	681b      	ldr	r3, [r3, #0]
 801c91a:	68ba      	ldr	r2, [r7, #8]
 801c91c:	0151      	lsls	r1, r2, #5
 801c91e:	68fa      	ldr	r2, [r7, #12]
 801c920:	440a      	add	r2, r1
 801c922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801c92a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c934:	683b      	ldr	r3, [r7, #0]
 801c936:	781b      	ldrb	r3, [r3, #0]
 801c938:	f003 030f 	and.w	r3, r3, #15
 801c93c:	2101      	movs	r1, #1
 801c93e:	fa01 f303 	lsl.w	r3, r1, r3
 801c942:	041b      	lsls	r3, r3, #16
 801c944:	43db      	mvns	r3, r3
 801c946:	68f9      	ldr	r1, [r7, #12]
 801c948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c94c:	4013      	ands	r3, r2
 801c94e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c956:	69da      	ldr	r2, [r3, #28]
 801c958:	683b      	ldr	r3, [r7, #0]
 801c95a:	781b      	ldrb	r3, [r3, #0]
 801c95c:	f003 030f 	and.w	r3, r3, #15
 801c960:	2101      	movs	r1, #1
 801c962:	fa01 f303 	lsl.w	r3, r1, r3
 801c966:	041b      	lsls	r3, r3, #16
 801c968:	43db      	mvns	r3, r3
 801c96a:	68f9      	ldr	r1, [r7, #12]
 801c96c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c970:	4013      	ands	r3, r2
 801c972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801c974:	68bb      	ldr	r3, [r7, #8]
 801c976:	015a      	lsls	r2, r3, #5
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	4413      	add	r3, r2
 801c97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c980:	681a      	ldr	r2, [r3, #0]
 801c982:	68bb      	ldr	r3, [r7, #8]
 801c984:	0159      	lsls	r1, r3, #5
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	440b      	add	r3, r1
 801c98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c98e:	4619      	mov	r1, r3
 801c990:	4b05      	ldr	r3, [pc, #20]	; (801c9a8 <USB_DeactivateEndpoint+0x1b4>)
 801c992:	4013      	ands	r3, r2
 801c994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801c996:	2300      	movs	r3, #0
}
 801c998:	4618      	mov	r0, r3
 801c99a:	3714      	adds	r7, #20
 801c99c:	46bd      	mov	sp, r7
 801c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a2:	4770      	bx	lr
 801c9a4:	ec337800 	.word	0xec337800
 801c9a8:	eff37800 	.word	0xeff37800

0801c9ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b08a      	sub	sp, #40	; 0x28
 801c9b0:	af02      	add	r7, sp, #8
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	4613      	mov	r3, r2
 801c9b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801c9be:	68bb      	ldr	r3, [r7, #8]
 801c9c0:	781b      	ldrb	r3, [r3, #0]
 801c9c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c9c4:	68bb      	ldr	r3, [r7, #8]
 801c9c6:	785b      	ldrb	r3, [r3, #1]
 801c9c8:	2b01      	cmp	r3, #1
 801c9ca:	f040 817a 	bne.w	801ccc2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801c9ce:	68bb      	ldr	r3, [r7, #8]
 801c9d0:	691b      	ldr	r3, [r3, #16]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d132      	bne.n	801ca3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801c9d6:	69bb      	ldr	r3, [r7, #24]
 801c9d8:	015a      	lsls	r2, r3, #5
 801c9da:	69fb      	ldr	r3, [r7, #28]
 801c9dc:	4413      	add	r3, r2
 801c9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c9e2:	691b      	ldr	r3, [r3, #16]
 801c9e4:	69ba      	ldr	r2, [r7, #24]
 801c9e6:	0151      	lsls	r1, r2, #5
 801c9e8:	69fa      	ldr	r2, [r7, #28]
 801c9ea:	440a      	add	r2, r1
 801c9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c9f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801c9f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801c9f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801c9fa:	69bb      	ldr	r3, [r7, #24]
 801c9fc:	015a      	lsls	r2, r3, #5
 801c9fe:	69fb      	ldr	r3, [r7, #28]
 801ca00:	4413      	add	r3, r2
 801ca02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca06:	691b      	ldr	r3, [r3, #16]
 801ca08:	69ba      	ldr	r2, [r7, #24]
 801ca0a:	0151      	lsls	r1, r2, #5
 801ca0c:	69fa      	ldr	r2, [r7, #28]
 801ca0e:	440a      	add	r2, r1
 801ca10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ca14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ca18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ca1a:	69bb      	ldr	r3, [r7, #24]
 801ca1c:	015a      	lsls	r2, r3, #5
 801ca1e:	69fb      	ldr	r3, [r7, #28]
 801ca20:	4413      	add	r3, r2
 801ca22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca26:	691b      	ldr	r3, [r3, #16]
 801ca28:	69ba      	ldr	r2, [r7, #24]
 801ca2a:	0151      	lsls	r1, r2, #5
 801ca2c:	69fa      	ldr	r2, [r7, #28]
 801ca2e:	440a      	add	r2, r1
 801ca30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ca34:	0cdb      	lsrs	r3, r3, #19
 801ca36:	04db      	lsls	r3, r3, #19
 801ca38:	6113      	str	r3, [r2, #16]
 801ca3a:	e092      	b.n	801cb62 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ca3c:	69bb      	ldr	r3, [r7, #24]
 801ca3e:	015a      	lsls	r2, r3, #5
 801ca40:	69fb      	ldr	r3, [r7, #28]
 801ca42:	4413      	add	r3, r2
 801ca44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca48:	691b      	ldr	r3, [r3, #16]
 801ca4a:	69ba      	ldr	r2, [r7, #24]
 801ca4c:	0151      	lsls	r1, r2, #5
 801ca4e:	69fa      	ldr	r2, [r7, #28]
 801ca50:	440a      	add	r2, r1
 801ca52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ca56:	0cdb      	lsrs	r3, r3, #19
 801ca58:	04db      	lsls	r3, r3, #19
 801ca5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ca5c:	69bb      	ldr	r3, [r7, #24]
 801ca5e:	015a      	lsls	r2, r3, #5
 801ca60:	69fb      	ldr	r3, [r7, #28]
 801ca62:	4413      	add	r3, r2
 801ca64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ca68:	691b      	ldr	r3, [r3, #16]
 801ca6a:	69ba      	ldr	r2, [r7, #24]
 801ca6c:	0151      	lsls	r1, r2, #5
 801ca6e:	69fa      	ldr	r2, [r7, #28]
 801ca70:	440a      	add	r2, r1
 801ca72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ca76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ca7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ca7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 801ca80:	69bb      	ldr	r3, [r7, #24]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d11a      	bne.n	801cabc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801ca86:	68bb      	ldr	r3, [r7, #8]
 801ca88:	691a      	ldr	r2, [r3, #16]
 801ca8a:	68bb      	ldr	r3, [r7, #8]
 801ca8c:	689b      	ldr	r3, [r3, #8]
 801ca8e:	429a      	cmp	r2, r3
 801ca90:	d903      	bls.n	801ca9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801ca92:	68bb      	ldr	r3, [r7, #8]
 801ca94:	689a      	ldr	r2, [r3, #8]
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ca9a:	69bb      	ldr	r3, [r7, #24]
 801ca9c:	015a      	lsls	r2, r3, #5
 801ca9e:	69fb      	ldr	r3, [r7, #28]
 801caa0:	4413      	add	r3, r2
 801caa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801caa6:	691b      	ldr	r3, [r3, #16]
 801caa8:	69ba      	ldr	r2, [r7, #24]
 801caaa:	0151      	lsls	r1, r2, #5
 801caac:	69fa      	ldr	r2, [r7, #28]
 801caae:	440a      	add	r2, r1
 801cab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801cab8:	6113      	str	r3, [r2, #16]
 801caba:	e01b      	b.n	801caf4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801cabc:	69bb      	ldr	r3, [r7, #24]
 801cabe:	015a      	lsls	r2, r3, #5
 801cac0:	69fb      	ldr	r3, [r7, #28]
 801cac2:	4413      	add	r3, r2
 801cac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cac8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801caca:	68bb      	ldr	r3, [r7, #8]
 801cacc:	6919      	ldr	r1, [r3, #16]
 801cace:	68bb      	ldr	r3, [r7, #8]
 801cad0:	689b      	ldr	r3, [r3, #8]
 801cad2:	440b      	add	r3, r1
 801cad4:	1e59      	subs	r1, r3, #1
 801cad6:	68bb      	ldr	r3, [r7, #8]
 801cad8:	689b      	ldr	r3, [r3, #8]
 801cada:	fbb1 f3f3 	udiv	r3, r1, r3
 801cade:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801cae0:	4ba2      	ldr	r3, [pc, #648]	; (801cd6c <USB_EPStartXfer+0x3c0>)
 801cae2:	400b      	ands	r3, r1
 801cae4:	69b9      	ldr	r1, [r7, #24]
 801cae6:	0148      	lsls	r0, r1, #5
 801cae8:	69f9      	ldr	r1, [r7, #28]
 801caea:	4401      	add	r1, r0
 801caec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801caf0:	4313      	orrs	r3, r2
 801caf2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801caf4:	69bb      	ldr	r3, [r7, #24]
 801caf6:	015a      	lsls	r2, r3, #5
 801caf8:	69fb      	ldr	r3, [r7, #28]
 801cafa:	4413      	add	r3, r2
 801cafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cb00:	691a      	ldr	r2, [r3, #16]
 801cb02:	68bb      	ldr	r3, [r7, #8]
 801cb04:	691b      	ldr	r3, [r3, #16]
 801cb06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801cb0a:	69b9      	ldr	r1, [r7, #24]
 801cb0c:	0148      	lsls	r0, r1, #5
 801cb0e:	69f9      	ldr	r1, [r7, #28]
 801cb10:	4401      	add	r1, r0
 801cb12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801cb16:	4313      	orrs	r3, r2
 801cb18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801cb1a:	68bb      	ldr	r3, [r7, #8]
 801cb1c:	791b      	ldrb	r3, [r3, #4]
 801cb1e:	2b01      	cmp	r3, #1
 801cb20:	d11f      	bne.n	801cb62 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801cb22:	69bb      	ldr	r3, [r7, #24]
 801cb24:	015a      	lsls	r2, r3, #5
 801cb26:	69fb      	ldr	r3, [r7, #28]
 801cb28:	4413      	add	r3, r2
 801cb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cb2e:	691b      	ldr	r3, [r3, #16]
 801cb30:	69ba      	ldr	r2, [r7, #24]
 801cb32:	0151      	lsls	r1, r2, #5
 801cb34:	69fa      	ldr	r2, [r7, #28]
 801cb36:	440a      	add	r2, r1
 801cb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cb3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801cb40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801cb42:	69bb      	ldr	r3, [r7, #24]
 801cb44:	015a      	lsls	r2, r3, #5
 801cb46:	69fb      	ldr	r3, [r7, #28]
 801cb48:	4413      	add	r3, r2
 801cb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cb4e:	691b      	ldr	r3, [r3, #16]
 801cb50:	69ba      	ldr	r2, [r7, #24]
 801cb52:	0151      	lsls	r1, r2, #5
 801cb54:	69fa      	ldr	r2, [r7, #28]
 801cb56:	440a      	add	r2, r1
 801cb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cb5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801cb60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801cb62:	79fb      	ldrb	r3, [r7, #7]
 801cb64:	2b01      	cmp	r3, #1
 801cb66:	d14b      	bne.n	801cc00 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801cb68:	68bb      	ldr	r3, [r7, #8]
 801cb6a:	69db      	ldr	r3, [r3, #28]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d009      	beq.n	801cb84 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801cb70:	69bb      	ldr	r3, [r7, #24]
 801cb72:	015a      	lsls	r2, r3, #5
 801cb74:	69fb      	ldr	r3, [r7, #28]
 801cb76:	4413      	add	r3, r2
 801cb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cb7c:	461a      	mov	r2, r3
 801cb7e:	68bb      	ldr	r3, [r7, #8]
 801cb80:	69db      	ldr	r3, [r3, #28]
 801cb82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801cb84:	68bb      	ldr	r3, [r7, #8]
 801cb86:	791b      	ldrb	r3, [r3, #4]
 801cb88:	2b01      	cmp	r3, #1
 801cb8a:	d128      	bne.n	801cbde <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801cb8c:	69fb      	ldr	r3, [r7, #28]
 801cb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cb92:	689b      	ldr	r3, [r3, #8]
 801cb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d110      	bne.n	801cbbe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801cb9c:	69bb      	ldr	r3, [r7, #24]
 801cb9e:	015a      	lsls	r2, r3, #5
 801cba0:	69fb      	ldr	r3, [r7, #28]
 801cba2:	4413      	add	r3, r2
 801cba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	69ba      	ldr	r2, [r7, #24]
 801cbac:	0151      	lsls	r1, r2, #5
 801cbae:	69fa      	ldr	r2, [r7, #28]
 801cbb0:	440a      	add	r2, r1
 801cbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cbb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801cbba:	6013      	str	r3, [r2, #0]
 801cbbc:	e00f      	b.n	801cbde <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801cbbe:	69bb      	ldr	r3, [r7, #24]
 801cbc0:	015a      	lsls	r2, r3, #5
 801cbc2:	69fb      	ldr	r3, [r7, #28]
 801cbc4:	4413      	add	r3, r2
 801cbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	69ba      	ldr	r2, [r7, #24]
 801cbce:	0151      	lsls	r1, r2, #5
 801cbd0:	69fa      	ldr	r2, [r7, #28]
 801cbd2:	440a      	add	r2, r1
 801cbd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cbd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cbdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801cbde:	69bb      	ldr	r3, [r7, #24]
 801cbe0:	015a      	lsls	r2, r3, #5
 801cbe2:	69fb      	ldr	r3, [r7, #28]
 801cbe4:	4413      	add	r3, r2
 801cbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	69ba      	ldr	r2, [r7, #24]
 801cbee:	0151      	lsls	r1, r2, #5
 801cbf0:	69fa      	ldr	r2, [r7, #28]
 801cbf2:	440a      	add	r2, r1
 801cbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cbf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801cbfc:	6013      	str	r3, [r2, #0]
 801cbfe:	e165      	b.n	801cecc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801cc00:	69bb      	ldr	r3, [r7, #24]
 801cc02:	015a      	lsls	r2, r3, #5
 801cc04:	69fb      	ldr	r3, [r7, #28]
 801cc06:	4413      	add	r3, r2
 801cc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	69ba      	ldr	r2, [r7, #24]
 801cc10:	0151      	lsls	r1, r2, #5
 801cc12:	69fa      	ldr	r2, [r7, #28]
 801cc14:	440a      	add	r2, r1
 801cc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cc1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801cc1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801cc20:	68bb      	ldr	r3, [r7, #8]
 801cc22:	791b      	ldrb	r3, [r3, #4]
 801cc24:	2b01      	cmp	r3, #1
 801cc26:	d015      	beq.n	801cc54 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801cc28:	68bb      	ldr	r3, [r7, #8]
 801cc2a:	691b      	ldr	r3, [r3, #16]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	f000 814d 	beq.w	801cecc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801cc32:	69fb      	ldr	r3, [r7, #28]
 801cc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cc3a:	68bb      	ldr	r3, [r7, #8]
 801cc3c:	781b      	ldrb	r3, [r3, #0]
 801cc3e:	f003 030f 	and.w	r3, r3, #15
 801cc42:	2101      	movs	r1, #1
 801cc44:	fa01 f303 	lsl.w	r3, r1, r3
 801cc48:	69f9      	ldr	r1, [r7, #28]
 801cc4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801cc4e:	4313      	orrs	r3, r2
 801cc50:	634b      	str	r3, [r1, #52]	; 0x34
 801cc52:	e13b      	b.n	801cecc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801cc54:	69fb      	ldr	r3, [r7, #28]
 801cc56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cc5a:	689b      	ldr	r3, [r3, #8]
 801cc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d110      	bne.n	801cc86 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801cc64:	69bb      	ldr	r3, [r7, #24]
 801cc66:	015a      	lsls	r2, r3, #5
 801cc68:	69fb      	ldr	r3, [r7, #28]
 801cc6a:	4413      	add	r3, r2
 801cc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	69ba      	ldr	r2, [r7, #24]
 801cc74:	0151      	lsls	r1, r2, #5
 801cc76:	69fa      	ldr	r2, [r7, #28]
 801cc78:	440a      	add	r2, r1
 801cc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cc7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801cc82:	6013      	str	r3, [r2, #0]
 801cc84:	e00f      	b.n	801cca6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801cc86:	69bb      	ldr	r3, [r7, #24]
 801cc88:	015a      	lsls	r2, r3, #5
 801cc8a:	69fb      	ldr	r3, [r7, #28]
 801cc8c:	4413      	add	r3, r2
 801cc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	69ba      	ldr	r2, [r7, #24]
 801cc96:	0151      	lsls	r1, r2, #5
 801cc98:	69fa      	ldr	r2, [r7, #28]
 801cc9a:	440a      	add	r2, r1
 801cc9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cca4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801cca6:	68bb      	ldr	r3, [r7, #8]
 801cca8:	68d9      	ldr	r1, [r3, #12]
 801ccaa:	68bb      	ldr	r3, [r7, #8]
 801ccac:	781a      	ldrb	r2, [r3, #0]
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	691b      	ldr	r3, [r3, #16]
 801ccb2:	b298      	uxth	r0, r3
 801ccb4:	79fb      	ldrb	r3, [r7, #7]
 801ccb6:	9300      	str	r3, [sp, #0]
 801ccb8:	4603      	mov	r3, r0
 801ccba:	68f8      	ldr	r0, [r7, #12]
 801ccbc:	f000 f9b8 	bl	801d030 <USB_WritePacket>
 801ccc0:	e104      	b.n	801cecc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ccc2:	69bb      	ldr	r3, [r7, #24]
 801ccc4:	015a      	lsls	r2, r3, #5
 801ccc6:	69fb      	ldr	r3, [r7, #28]
 801ccc8:	4413      	add	r3, r2
 801ccca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ccce:	691b      	ldr	r3, [r3, #16]
 801ccd0:	69ba      	ldr	r2, [r7, #24]
 801ccd2:	0151      	lsls	r1, r2, #5
 801ccd4:	69fa      	ldr	r2, [r7, #28]
 801ccd6:	440a      	add	r2, r1
 801ccd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ccdc:	0cdb      	lsrs	r3, r3, #19
 801ccde:	04db      	lsls	r3, r3, #19
 801cce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801cce2:	69bb      	ldr	r3, [r7, #24]
 801cce4:	015a      	lsls	r2, r3, #5
 801cce6:	69fb      	ldr	r3, [r7, #28]
 801cce8:	4413      	add	r3, r2
 801ccea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ccee:	691b      	ldr	r3, [r3, #16]
 801ccf0:	69ba      	ldr	r2, [r7, #24]
 801ccf2:	0151      	lsls	r1, r2, #5
 801ccf4:	69fa      	ldr	r2, [r7, #28]
 801ccf6:	440a      	add	r2, r1
 801ccf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ccfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801cd00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801cd04:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 801cd06:	69bb      	ldr	r3, [r7, #24]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d131      	bne.n	801cd70 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	691b      	ldr	r3, [r3, #16]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d003      	beq.n	801cd1c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 801cd14:	68bb      	ldr	r3, [r7, #8]
 801cd16:	689a      	ldr	r2, [r3, #8]
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801cd1c:	68bb      	ldr	r3, [r7, #8]
 801cd1e:	689a      	ldr	r2, [r3, #8]
 801cd20:	68bb      	ldr	r3, [r7, #8]
 801cd22:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801cd24:	69bb      	ldr	r3, [r7, #24]
 801cd26:	015a      	lsls	r2, r3, #5
 801cd28:	69fb      	ldr	r3, [r7, #28]
 801cd2a:	4413      	add	r3, r2
 801cd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cd30:	691a      	ldr	r2, [r3, #16]
 801cd32:	68bb      	ldr	r3, [r7, #8]
 801cd34:	6a1b      	ldr	r3, [r3, #32]
 801cd36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801cd3a:	69b9      	ldr	r1, [r7, #24]
 801cd3c:	0148      	lsls	r0, r1, #5
 801cd3e:	69f9      	ldr	r1, [r7, #28]
 801cd40:	4401      	add	r1, r0
 801cd42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801cd46:	4313      	orrs	r3, r2
 801cd48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801cd4a:	69bb      	ldr	r3, [r7, #24]
 801cd4c:	015a      	lsls	r2, r3, #5
 801cd4e:	69fb      	ldr	r3, [r7, #28]
 801cd50:	4413      	add	r3, r2
 801cd52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cd56:	691b      	ldr	r3, [r3, #16]
 801cd58:	69ba      	ldr	r2, [r7, #24]
 801cd5a:	0151      	lsls	r1, r2, #5
 801cd5c:	69fa      	ldr	r2, [r7, #28]
 801cd5e:	440a      	add	r2, r1
 801cd60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cd64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801cd68:	6113      	str	r3, [r2, #16]
 801cd6a:	e061      	b.n	801ce30 <USB_EPStartXfer+0x484>
 801cd6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801cd70:	68bb      	ldr	r3, [r7, #8]
 801cd72:	691b      	ldr	r3, [r3, #16]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d123      	bne.n	801cdc0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801cd78:	69bb      	ldr	r3, [r7, #24]
 801cd7a:	015a      	lsls	r2, r3, #5
 801cd7c:	69fb      	ldr	r3, [r7, #28]
 801cd7e:	4413      	add	r3, r2
 801cd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cd84:	691a      	ldr	r2, [r3, #16]
 801cd86:	68bb      	ldr	r3, [r7, #8]
 801cd88:	689b      	ldr	r3, [r3, #8]
 801cd8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801cd8e:	69b9      	ldr	r1, [r7, #24]
 801cd90:	0148      	lsls	r0, r1, #5
 801cd92:	69f9      	ldr	r1, [r7, #28]
 801cd94:	4401      	add	r1, r0
 801cd96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801cd9a:	4313      	orrs	r3, r2
 801cd9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801cd9e:	69bb      	ldr	r3, [r7, #24]
 801cda0:	015a      	lsls	r2, r3, #5
 801cda2:	69fb      	ldr	r3, [r7, #28]
 801cda4:	4413      	add	r3, r2
 801cda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cdaa:	691b      	ldr	r3, [r3, #16]
 801cdac:	69ba      	ldr	r2, [r7, #24]
 801cdae:	0151      	lsls	r1, r2, #5
 801cdb0:	69fa      	ldr	r2, [r7, #28]
 801cdb2:	440a      	add	r2, r1
 801cdb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cdb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801cdbc:	6113      	str	r3, [r2, #16]
 801cdbe:	e037      	b.n	801ce30 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	691a      	ldr	r2, [r3, #16]
 801cdc4:	68bb      	ldr	r3, [r7, #8]
 801cdc6:	689b      	ldr	r3, [r3, #8]
 801cdc8:	4413      	add	r3, r2
 801cdca:	1e5a      	subs	r2, r3, #1
 801cdcc:	68bb      	ldr	r3, [r7, #8]
 801cdce:	689b      	ldr	r3, [r3, #8]
 801cdd0:	fbb2 f3f3 	udiv	r3, r2, r3
 801cdd4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801cdd6:	68bb      	ldr	r3, [r7, #8]
 801cdd8:	689b      	ldr	r3, [r3, #8]
 801cdda:	8afa      	ldrh	r2, [r7, #22]
 801cddc:	fb03 f202 	mul.w	r2, r3, r2
 801cde0:	68bb      	ldr	r3, [r7, #8]
 801cde2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801cde4:	69bb      	ldr	r3, [r7, #24]
 801cde6:	015a      	lsls	r2, r3, #5
 801cde8:	69fb      	ldr	r3, [r7, #28]
 801cdea:	4413      	add	r3, r2
 801cdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cdf0:	691a      	ldr	r2, [r3, #16]
 801cdf2:	8afb      	ldrh	r3, [r7, #22]
 801cdf4:	04d9      	lsls	r1, r3, #19
 801cdf6:	4b38      	ldr	r3, [pc, #224]	; (801ced8 <USB_EPStartXfer+0x52c>)
 801cdf8:	400b      	ands	r3, r1
 801cdfa:	69b9      	ldr	r1, [r7, #24]
 801cdfc:	0148      	lsls	r0, r1, #5
 801cdfe:	69f9      	ldr	r1, [r7, #28]
 801ce00:	4401      	add	r1, r0
 801ce02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ce06:	4313      	orrs	r3, r2
 801ce08:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801ce0a:	69bb      	ldr	r3, [r7, #24]
 801ce0c:	015a      	lsls	r2, r3, #5
 801ce0e:	69fb      	ldr	r3, [r7, #28]
 801ce10:	4413      	add	r3, r2
 801ce12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce16:	691a      	ldr	r2, [r3, #16]
 801ce18:	68bb      	ldr	r3, [r7, #8]
 801ce1a:	6a1b      	ldr	r3, [r3, #32]
 801ce1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ce20:	69b9      	ldr	r1, [r7, #24]
 801ce22:	0148      	lsls	r0, r1, #5
 801ce24:	69f9      	ldr	r1, [r7, #28]
 801ce26:	4401      	add	r1, r0
 801ce28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ce2c:	4313      	orrs	r3, r2
 801ce2e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801ce30:	79fb      	ldrb	r3, [r7, #7]
 801ce32:	2b01      	cmp	r3, #1
 801ce34:	d10d      	bne.n	801ce52 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ce36:	68bb      	ldr	r3, [r7, #8]
 801ce38:	68db      	ldr	r3, [r3, #12]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d009      	beq.n	801ce52 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ce3e:	68bb      	ldr	r3, [r7, #8]
 801ce40:	68d9      	ldr	r1, [r3, #12]
 801ce42:	69bb      	ldr	r3, [r7, #24]
 801ce44:	015a      	lsls	r2, r3, #5
 801ce46:	69fb      	ldr	r3, [r7, #28]
 801ce48:	4413      	add	r3, r2
 801ce4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce4e:	460a      	mov	r2, r1
 801ce50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801ce52:	68bb      	ldr	r3, [r7, #8]
 801ce54:	791b      	ldrb	r3, [r3, #4]
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	d128      	bne.n	801ceac <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ce5a:	69fb      	ldr	r3, [r7, #28]
 801ce5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ce60:	689b      	ldr	r3, [r3, #8]
 801ce62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d110      	bne.n	801ce8c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801ce6a:	69bb      	ldr	r3, [r7, #24]
 801ce6c:	015a      	lsls	r2, r3, #5
 801ce6e:	69fb      	ldr	r3, [r7, #28]
 801ce70:	4413      	add	r3, r2
 801ce72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	69ba      	ldr	r2, [r7, #24]
 801ce7a:	0151      	lsls	r1, r2, #5
 801ce7c:	69fa      	ldr	r2, [r7, #28]
 801ce7e:	440a      	add	r2, r1
 801ce80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ce84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ce88:	6013      	str	r3, [r2, #0]
 801ce8a:	e00f      	b.n	801ceac <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801ce8c:	69bb      	ldr	r3, [r7, #24]
 801ce8e:	015a      	lsls	r2, r3, #5
 801ce90:	69fb      	ldr	r3, [r7, #28]
 801ce92:	4413      	add	r3, r2
 801ce94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	69ba      	ldr	r2, [r7, #24]
 801ce9c:	0151      	lsls	r1, r2, #5
 801ce9e:	69fa      	ldr	r2, [r7, #28]
 801cea0:	440a      	add	r2, r1
 801cea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ceaa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ceac:	69bb      	ldr	r3, [r7, #24]
 801ceae:	015a      	lsls	r2, r3, #5
 801ceb0:	69fb      	ldr	r3, [r7, #28]
 801ceb2:	4413      	add	r3, r2
 801ceb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	69ba      	ldr	r2, [r7, #24]
 801cebc:	0151      	lsls	r1, r2, #5
 801cebe:	69fa      	ldr	r2, [r7, #28]
 801cec0:	440a      	add	r2, r1
 801cec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ceca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801cecc:	2300      	movs	r3, #0
}
 801cece:	4618      	mov	r0, r3
 801ced0:	3720      	adds	r7, #32
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd80      	pop	{r7, pc}
 801ced6:	bf00      	nop
 801ced8:	1ff80000 	.word	0x1ff80000

0801cedc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801cedc:	b480      	push	{r7}
 801cede:	b087      	sub	sp, #28
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	6078      	str	r0, [r7, #4]
 801cee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801cee6:	2300      	movs	r3, #0
 801cee8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801ceea:	2300      	movs	r3, #0
 801ceec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	785b      	ldrb	r3, [r3, #1]
 801cef6:	2b01      	cmp	r3, #1
 801cef8:	d14a      	bne.n	801cf90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	781b      	ldrb	r3, [r3, #0]
 801cefe:	015a      	lsls	r2, r3, #5
 801cf00:	693b      	ldr	r3, [r7, #16]
 801cf02:	4413      	add	r3, r2
 801cf04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801cf0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801cf12:	f040 8086 	bne.w	801d022 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801cf16:	683b      	ldr	r3, [r7, #0]
 801cf18:	781b      	ldrb	r3, [r3, #0]
 801cf1a:	015a      	lsls	r2, r3, #5
 801cf1c:	693b      	ldr	r3, [r7, #16]
 801cf1e:	4413      	add	r3, r2
 801cf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	683a      	ldr	r2, [r7, #0]
 801cf28:	7812      	ldrb	r2, [r2, #0]
 801cf2a:	0151      	lsls	r1, r2, #5
 801cf2c:	693a      	ldr	r2, [r7, #16]
 801cf2e:	440a      	add	r2, r1
 801cf30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cf34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801cf38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801cf3a:	683b      	ldr	r3, [r7, #0]
 801cf3c:	781b      	ldrb	r3, [r3, #0]
 801cf3e:	015a      	lsls	r2, r3, #5
 801cf40:	693b      	ldr	r3, [r7, #16]
 801cf42:	4413      	add	r3, r2
 801cf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	683a      	ldr	r2, [r7, #0]
 801cf4c:	7812      	ldrb	r2, [r2, #0]
 801cf4e:	0151      	lsls	r1, r2, #5
 801cf50:	693a      	ldr	r2, [r7, #16]
 801cf52:	440a      	add	r2, r1
 801cf54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cf58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801cf5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	3301      	adds	r3, #1
 801cf62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	f242 7210 	movw	r2, #10000	; 0x2710
 801cf6a:	4293      	cmp	r3, r2
 801cf6c:	d902      	bls.n	801cf74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801cf6e:	2301      	movs	r3, #1
 801cf70:	75fb      	strb	r3, [r7, #23]
          break;
 801cf72:	e056      	b.n	801d022 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801cf74:	683b      	ldr	r3, [r7, #0]
 801cf76:	781b      	ldrb	r3, [r3, #0]
 801cf78:	015a      	lsls	r2, r3, #5
 801cf7a:	693b      	ldr	r3, [r7, #16]
 801cf7c:	4413      	add	r3, r2
 801cf7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801cf88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801cf8c:	d0e7      	beq.n	801cf5e <USB_EPStopXfer+0x82>
 801cf8e:	e048      	b.n	801d022 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801cf90:	683b      	ldr	r3, [r7, #0]
 801cf92:	781b      	ldrb	r3, [r3, #0]
 801cf94:	015a      	lsls	r2, r3, #5
 801cf96:	693b      	ldr	r3, [r7, #16]
 801cf98:	4413      	add	r3, r2
 801cf9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801cfa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801cfa8:	d13b      	bne.n	801d022 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801cfaa:	683b      	ldr	r3, [r7, #0]
 801cfac:	781b      	ldrb	r3, [r3, #0]
 801cfae:	015a      	lsls	r2, r3, #5
 801cfb0:	693b      	ldr	r3, [r7, #16]
 801cfb2:	4413      	add	r3, r2
 801cfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	683a      	ldr	r2, [r7, #0]
 801cfbc:	7812      	ldrb	r2, [r2, #0]
 801cfbe:	0151      	lsls	r1, r2, #5
 801cfc0:	693a      	ldr	r2, [r7, #16]
 801cfc2:	440a      	add	r2, r1
 801cfc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cfc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801cfcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801cfce:	683b      	ldr	r3, [r7, #0]
 801cfd0:	781b      	ldrb	r3, [r3, #0]
 801cfd2:	015a      	lsls	r2, r3, #5
 801cfd4:	693b      	ldr	r3, [r7, #16]
 801cfd6:	4413      	add	r3, r2
 801cfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	683a      	ldr	r2, [r7, #0]
 801cfe0:	7812      	ldrb	r2, [r2, #0]
 801cfe2:	0151      	lsls	r1, r2, #5
 801cfe4:	693a      	ldr	r2, [r7, #16]
 801cfe6:	440a      	add	r2, r1
 801cfe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cfec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801cff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	3301      	adds	r3, #1
 801cff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	f242 7210 	movw	r2, #10000	; 0x2710
 801cffe:	4293      	cmp	r3, r2
 801d000:	d902      	bls.n	801d008 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801d002:	2301      	movs	r3, #1
 801d004:	75fb      	strb	r3, [r7, #23]
          break;
 801d006:	e00c      	b.n	801d022 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801d008:	683b      	ldr	r3, [r7, #0]
 801d00a:	781b      	ldrb	r3, [r3, #0]
 801d00c:	015a      	lsls	r2, r3, #5
 801d00e:	693b      	ldr	r3, [r7, #16]
 801d010:	4413      	add	r3, r2
 801d012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801d01c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801d020:	d0e7      	beq.n	801cff2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801d022:	7dfb      	ldrb	r3, [r7, #23]
}
 801d024:	4618      	mov	r0, r3
 801d026:	371c      	adds	r7, #28
 801d028:	46bd      	mov	sp, r7
 801d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d02e:	4770      	bx	lr

0801d030 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801d030:	b480      	push	{r7}
 801d032:	b089      	sub	sp, #36	; 0x24
 801d034:	af00      	add	r7, sp, #0
 801d036:	60f8      	str	r0, [r7, #12]
 801d038:	60b9      	str	r1, [r7, #8]
 801d03a:	4611      	mov	r1, r2
 801d03c:	461a      	mov	r2, r3
 801d03e:	460b      	mov	r3, r1
 801d040:	71fb      	strb	r3, [r7, #7]
 801d042:	4613      	mov	r3, r2
 801d044:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801d04a:	68bb      	ldr	r3, [r7, #8]
 801d04c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801d04e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d052:	2b00      	cmp	r3, #0
 801d054:	d123      	bne.n	801d09e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801d056:	88bb      	ldrh	r3, [r7, #4]
 801d058:	3303      	adds	r3, #3
 801d05a:	089b      	lsrs	r3, r3, #2
 801d05c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801d05e:	2300      	movs	r3, #0
 801d060:	61bb      	str	r3, [r7, #24]
 801d062:	e018      	b.n	801d096 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801d064:	79fb      	ldrb	r3, [r7, #7]
 801d066:	031a      	lsls	r2, r3, #12
 801d068:	697b      	ldr	r3, [r7, #20]
 801d06a:	4413      	add	r3, r2
 801d06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d070:	461a      	mov	r2, r3
 801d072:	69fb      	ldr	r3, [r7, #28]
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	6013      	str	r3, [r2, #0]
      pSrc++;
 801d078:	69fb      	ldr	r3, [r7, #28]
 801d07a:	3301      	adds	r3, #1
 801d07c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801d07e:	69fb      	ldr	r3, [r7, #28]
 801d080:	3301      	adds	r3, #1
 801d082:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801d084:	69fb      	ldr	r3, [r7, #28]
 801d086:	3301      	adds	r3, #1
 801d088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801d08a:	69fb      	ldr	r3, [r7, #28]
 801d08c:	3301      	adds	r3, #1
 801d08e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801d090:	69bb      	ldr	r3, [r7, #24]
 801d092:	3301      	adds	r3, #1
 801d094:	61bb      	str	r3, [r7, #24]
 801d096:	69ba      	ldr	r2, [r7, #24]
 801d098:	693b      	ldr	r3, [r7, #16]
 801d09a:	429a      	cmp	r2, r3
 801d09c:	d3e2      	bcc.n	801d064 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801d09e:	2300      	movs	r3, #0
}
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	3724      	adds	r7, #36	; 0x24
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0aa:	4770      	bx	lr

0801d0ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801d0ac:	b480      	push	{r7}
 801d0ae:	b08b      	sub	sp, #44	; 0x2c
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	60f8      	str	r0, [r7, #12]
 801d0b4:	60b9      	str	r1, [r7, #8]
 801d0b6:	4613      	mov	r3, r2
 801d0b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801d0be:	68bb      	ldr	r3, [r7, #8]
 801d0c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801d0c2:	88fb      	ldrh	r3, [r7, #6]
 801d0c4:	089b      	lsrs	r3, r3, #2
 801d0c6:	b29b      	uxth	r3, r3
 801d0c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801d0ca:	88fb      	ldrh	r3, [r7, #6]
 801d0cc:	f003 0303 	and.w	r3, r3, #3
 801d0d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801d0d2:	2300      	movs	r3, #0
 801d0d4:	623b      	str	r3, [r7, #32]
 801d0d6:	e014      	b.n	801d102 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801d0d8:	69bb      	ldr	r3, [r7, #24]
 801d0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d0de:	681a      	ldr	r2, [r3, #0]
 801d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e2:	601a      	str	r2, [r3, #0]
    pDest++;
 801d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e6:	3301      	adds	r3, #1
 801d0e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ec:	3301      	adds	r3, #1
 801d0ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0f2:	3301      	adds	r3, #1
 801d0f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0f8:	3301      	adds	r3, #1
 801d0fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801d0fc:	6a3b      	ldr	r3, [r7, #32]
 801d0fe:	3301      	adds	r3, #1
 801d100:	623b      	str	r3, [r7, #32]
 801d102:	6a3a      	ldr	r2, [r7, #32]
 801d104:	697b      	ldr	r3, [r7, #20]
 801d106:	429a      	cmp	r2, r3
 801d108:	d3e6      	bcc.n	801d0d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801d10a:	8bfb      	ldrh	r3, [r7, #30]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d01e      	beq.n	801d14e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801d110:	2300      	movs	r3, #0
 801d112:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801d114:	69bb      	ldr	r3, [r7, #24]
 801d116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d11a:	461a      	mov	r2, r3
 801d11c:	f107 0310 	add.w	r3, r7, #16
 801d120:	6812      	ldr	r2, [r2, #0]
 801d122:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801d124:	693a      	ldr	r2, [r7, #16]
 801d126:	6a3b      	ldr	r3, [r7, #32]
 801d128:	b2db      	uxtb	r3, r3
 801d12a:	00db      	lsls	r3, r3, #3
 801d12c:	fa22 f303 	lsr.w	r3, r2, r3
 801d130:	b2da      	uxtb	r2, r3
 801d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d134:	701a      	strb	r2, [r3, #0]
      i++;
 801d136:	6a3b      	ldr	r3, [r7, #32]
 801d138:	3301      	adds	r3, #1
 801d13a:	623b      	str	r3, [r7, #32]
      pDest++;
 801d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d13e:	3301      	adds	r3, #1
 801d140:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801d142:	8bfb      	ldrh	r3, [r7, #30]
 801d144:	3b01      	subs	r3, #1
 801d146:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801d148:	8bfb      	ldrh	r3, [r7, #30]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d1ea      	bne.n	801d124 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d150:	4618      	mov	r0, r3
 801d152:	372c      	adds	r7, #44	; 0x2c
 801d154:	46bd      	mov	sp, r7
 801d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d15a:	4770      	bx	lr

0801d15c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801d15c:	b480      	push	{r7}
 801d15e:	b085      	sub	sp, #20
 801d160:	af00      	add	r7, sp, #0
 801d162:	6078      	str	r0, [r7, #4]
 801d164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801d16a:	683b      	ldr	r3, [r7, #0]
 801d16c:	781b      	ldrb	r3, [r3, #0]
 801d16e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801d170:	683b      	ldr	r3, [r7, #0]
 801d172:	785b      	ldrb	r3, [r3, #1]
 801d174:	2b01      	cmp	r3, #1
 801d176:	d12c      	bne.n	801d1d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801d178:	68bb      	ldr	r3, [r7, #8]
 801d17a:	015a      	lsls	r2, r3, #5
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	4413      	add	r3, r2
 801d180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	2b00      	cmp	r3, #0
 801d188:	db12      	blt.n	801d1b0 <USB_EPSetStall+0x54>
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d00f      	beq.n	801d1b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801d190:	68bb      	ldr	r3, [r7, #8]
 801d192:	015a      	lsls	r2, r3, #5
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	4413      	add	r3, r2
 801d198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	68ba      	ldr	r2, [r7, #8]
 801d1a0:	0151      	lsls	r1, r2, #5
 801d1a2:	68fa      	ldr	r2, [r7, #12]
 801d1a4:	440a      	add	r2, r1
 801d1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801d1aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801d1ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801d1b0:	68bb      	ldr	r3, [r7, #8]
 801d1b2:	015a      	lsls	r2, r3, #5
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	4413      	add	r3, r2
 801d1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	68ba      	ldr	r2, [r7, #8]
 801d1c0:	0151      	lsls	r1, r2, #5
 801d1c2:	68fa      	ldr	r2, [r7, #12]
 801d1c4:	440a      	add	r2, r1
 801d1c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801d1ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801d1ce:	6013      	str	r3, [r2, #0]
 801d1d0:	e02b      	b.n	801d22a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801d1d2:	68bb      	ldr	r3, [r7, #8]
 801d1d4:	015a      	lsls	r2, r3, #5
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	4413      	add	r3, r2
 801d1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	db12      	blt.n	801d20a <USB_EPSetStall+0xae>
 801d1e4:	68bb      	ldr	r3, [r7, #8]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d00f      	beq.n	801d20a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801d1ea:	68bb      	ldr	r3, [r7, #8]
 801d1ec:	015a      	lsls	r2, r3, #5
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	4413      	add	r3, r2
 801d1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	68ba      	ldr	r2, [r7, #8]
 801d1fa:	0151      	lsls	r1, r2, #5
 801d1fc:	68fa      	ldr	r2, [r7, #12]
 801d1fe:	440a      	add	r2, r1
 801d200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801d208:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801d20a:	68bb      	ldr	r3, [r7, #8]
 801d20c:	015a      	lsls	r2, r3, #5
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	4413      	add	r3, r2
 801d212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	68ba      	ldr	r2, [r7, #8]
 801d21a:	0151      	lsls	r1, r2, #5
 801d21c:	68fa      	ldr	r2, [r7, #12]
 801d21e:	440a      	add	r2, r1
 801d220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801d228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801d22a:	2300      	movs	r3, #0
}
 801d22c:	4618      	mov	r0, r3
 801d22e:	3714      	adds	r7, #20
 801d230:	46bd      	mov	sp, r7
 801d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d236:	4770      	bx	lr

0801d238 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801d238:	b480      	push	{r7}
 801d23a:	b085      	sub	sp, #20
 801d23c:	af00      	add	r7, sp, #0
 801d23e:	6078      	str	r0, [r7, #4]
 801d240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801d246:	683b      	ldr	r3, [r7, #0]
 801d248:	781b      	ldrb	r3, [r3, #0]
 801d24a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801d24c:	683b      	ldr	r3, [r7, #0]
 801d24e:	785b      	ldrb	r3, [r3, #1]
 801d250:	2b01      	cmp	r3, #1
 801d252:	d128      	bne.n	801d2a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801d254:	68bb      	ldr	r3, [r7, #8]
 801d256:	015a      	lsls	r2, r3, #5
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	4413      	add	r3, r2
 801d25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	68ba      	ldr	r2, [r7, #8]
 801d264:	0151      	lsls	r1, r2, #5
 801d266:	68fa      	ldr	r2, [r7, #12]
 801d268:	440a      	add	r2, r1
 801d26a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801d26e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801d272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801d274:	683b      	ldr	r3, [r7, #0]
 801d276:	791b      	ldrb	r3, [r3, #4]
 801d278:	2b03      	cmp	r3, #3
 801d27a:	d003      	beq.n	801d284 <USB_EPClearStall+0x4c>
 801d27c:	683b      	ldr	r3, [r7, #0]
 801d27e:	791b      	ldrb	r3, [r3, #4]
 801d280:	2b02      	cmp	r3, #2
 801d282:	d138      	bne.n	801d2f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801d284:	68bb      	ldr	r3, [r7, #8]
 801d286:	015a      	lsls	r2, r3, #5
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	4413      	add	r3, r2
 801d28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	68ba      	ldr	r2, [r7, #8]
 801d294:	0151      	lsls	r1, r2, #5
 801d296:	68fa      	ldr	r2, [r7, #12]
 801d298:	440a      	add	r2, r1
 801d29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801d29e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d2a2:	6013      	str	r3, [r2, #0]
 801d2a4:	e027      	b.n	801d2f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801d2a6:	68bb      	ldr	r3, [r7, #8]
 801d2a8:	015a      	lsls	r2, r3, #5
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	4413      	add	r3, r2
 801d2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	68ba      	ldr	r2, [r7, #8]
 801d2b6:	0151      	lsls	r1, r2, #5
 801d2b8:	68fa      	ldr	r2, [r7, #12]
 801d2ba:	440a      	add	r2, r1
 801d2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d2c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801d2c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801d2c6:	683b      	ldr	r3, [r7, #0]
 801d2c8:	791b      	ldrb	r3, [r3, #4]
 801d2ca:	2b03      	cmp	r3, #3
 801d2cc:	d003      	beq.n	801d2d6 <USB_EPClearStall+0x9e>
 801d2ce:	683b      	ldr	r3, [r7, #0]
 801d2d0:	791b      	ldrb	r3, [r3, #4]
 801d2d2:	2b02      	cmp	r3, #2
 801d2d4:	d10f      	bne.n	801d2f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801d2d6:	68bb      	ldr	r3, [r7, #8]
 801d2d8:	015a      	lsls	r2, r3, #5
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	4413      	add	r3, r2
 801d2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	68ba      	ldr	r2, [r7, #8]
 801d2e6:	0151      	lsls	r1, r2, #5
 801d2e8:	68fa      	ldr	r2, [r7, #12]
 801d2ea:	440a      	add	r2, r1
 801d2ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d2f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d2f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801d2f6:	2300      	movs	r3, #0
}
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	3714      	adds	r7, #20
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d302:	4770      	bx	lr

0801d304 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801d304:	b480      	push	{r7}
 801d306:	b085      	sub	sp, #20
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]
 801d30c:	460b      	mov	r3, r1
 801d30e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	68fa      	ldr	r2, [r7, #12]
 801d31e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d322:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801d326:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d32e:	681a      	ldr	r2, [r3, #0]
 801d330:	78fb      	ldrb	r3, [r7, #3]
 801d332:	011b      	lsls	r3, r3, #4
 801d334:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801d338:	68f9      	ldr	r1, [r7, #12]
 801d33a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801d33e:	4313      	orrs	r3, r2
 801d340:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801d342:	2300      	movs	r3, #0
}
 801d344:	4618      	mov	r0, r3
 801d346:	3714      	adds	r7, #20
 801d348:	46bd      	mov	sp, r7
 801d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d34e:	4770      	bx	lr

0801d350 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801d350:	b480      	push	{r7}
 801d352:	b085      	sub	sp, #20
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	68fa      	ldr	r2, [r7, #12]
 801d366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d36a:	f023 0303 	bic.w	r3, r3, #3
 801d36e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d376:	685b      	ldr	r3, [r3, #4]
 801d378:	68fa      	ldr	r2, [r7, #12]
 801d37a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d37e:	f023 0302 	bic.w	r3, r3, #2
 801d382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801d384:	2300      	movs	r3, #0
}
 801d386:	4618      	mov	r0, r3
 801d388:	3714      	adds	r7, #20
 801d38a:	46bd      	mov	sp, r7
 801d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d390:	4770      	bx	lr

0801d392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801d392:	b480      	push	{r7}
 801d394:	b085      	sub	sp, #20
 801d396:	af00      	add	r7, sp, #0
 801d398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	68fa      	ldr	r2, [r7, #12]
 801d3a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d3ac:	f023 0303 	bic.w	r3, r3, #3
 801d3b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d3b8:	685b      	ldr	r3, [r3, #4]
 801d3ba:	68fa      	ldr	r2, [r7, #12]
 801d3bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d3c0:	f043 0302 	orr.w	r3, r3, #2
 801d3c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801d3c6:	2300      	movs	r3, #0
}
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	3714      	adds	r7, #20
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d2:	4770      	bx	lr

0801d3d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801d3d4:	b480      	push	{r7}
 801d3d6:	b085      	sub	sp, #20
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	695b      	ldr	r3, [r3, #20]
 801d3e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	699b      	ldr	r3, [r3, #24]
 801d3e6:	68fa      	ldr	r2, [r7, #12]
 801d3e8:	4013      	ands	r3, r2
 801d3ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801d3ec:	68fb      	ldr	r3, [r7, #12]
}
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	3714      	adds	r7, #20
 801d3f2:	46bd      	mov	sp, r7
 801d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f8:	4770      	bx	lr

0801d3fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801d3fa:	b480      	push	{r7}
 801d3fc:	b085      	sub	sp, #20
 801d3fe:	af00      	add	r7, sp, #0
 801d400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d40c:	699b      	ldr	r3, [r3, #24]
 801d40e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d416:	69db      	ldr	r3, [r3, #28]
 801d418:	68ba      	ldr	r2, [r7, #8]
 801d41a:	4013      	ands	r3, r2
 801d41c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801d41e:	68bb      	ldr	r3, [r7, #8]
 801d420:	0c1b      	lsrs	r3, r3, #16
}
 801d422:	4618      	mov	r0, r3
 801d424:	3714      	adds	r7, #20
 801d426:	46bd      	mov	sp, r7
 801d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d42c:	4770      	bx	lr

0801d42e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801d42e:	b480      	push	{r7}
 801d430:	b085      	sub	sp, #20
 801d432:	af00      	add	r7, sp, #0
 801d434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d440:	699b      	ldr	r3, [r3, #24]
 801d442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d44a:	69db      	ldr	r3, [r3, #28]
 801d44c:	68ba      	ldr	r2, [r7, #8]
 801d44e:	4013      	ands	r3, r2
 801d450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801d452:	68bb      	ldr	r3, [r7, #8]
 801d454:	b29b      	uxth	r3, r3
}
 801d456:	4618      	mov	r0, r3
 801d458:	3714      	adds	r7, #20
 801d45a:	46bd      	mov	sp, r7
 801d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d460:	4770      	bx	lr

0801d462 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801d462:	b480      	push	{r7}
 801d464:	b085      	sub	sp, #20
 801d466:	af00      	add	r7, sp, #0
 801d468:	6078      	str	r0, [r7, #4]
 801d46a:	460b      	mov	r3, r1
 801d46c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801d472:	78fb      	ldrb	r3, [r7, #3]
 801d474:	015a      	lsls	r2, r3, #5
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	4413      	add	r3, r2
 801d47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d47e:	689b      	ldr	r3, [r3, #8]
 801d480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d488:	695b      	ldr	r3, [r3, #20]
 801d48a:	68ba      	ldr	r2, [r7, #8]
 801d48c:	4013      	ands	r3, r2
 801d48e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801d490:	68bb      	ldr	r3, [r7, #8]
}
 801d492:	4618      	mov	r0, r3
 801d494:	3714      	adds	r7, #20
 801d496:	46bd      	mov	sp, r7
 801d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d49c:	4770      	bx	lr

0801d49e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801d49e:	b480      	push	{r7}
 801d4a0:	b087      	sub	sp, #28
 801d4a2:	af00      	add	r7, sp, #0
 801d4a4:	6078      	str	r0, [r7, #4]
 801d4a6:	460b      	mov	r3, r1
 801d4a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801d4ae:	697b      	ldr	r3, [r7, #20]
 801d4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d4b4:	691b      	ldr	r3, [r3, #16]
 801d4b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801d4b8:	697b      	ldr	r3, [r7, #20]
 801d4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801d4c2:	78fb      	ldrb	r3, [r7, #3]
 801d4c4:	f003 030f 	and.w	r3, r3, #15
 801d4c8:	68fa      	ldr	r2, [r7, #12]
 801d4ca:	fa22 f303 	lsr.w	r3, r2, r3
 801d4ce:	01db      	lsls	r3, r3, #7
 801d4d0:	b2db      	uxtb	r3, r3
 801d4d2:	693a      	ldr	r2, [r7, #16]
 801d4d4:	4313      	orrs	r3, r2
 801d4d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801d4d8:	78fb      	ldrb	r3, [r7, #3]
 801d4da:	015a      	lsls	r2, r3, #5
 801d4dc:	697b      	ldr	r3, [r7, #20]
 801d4de:	4413      	add	r3, r2
 801d4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d4e4:	689b      	ldr	r3, [r3, #8]
 801d4e6:	693a      	ldr	r2, [r7, #16]
 801d4e8:	4013      	ands	r3, r2
 801d4ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801d4ec:	68bb      	ldr	r3, [r7, #8]
}
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	371c      	adds	r7, #28
 801d4f2:	46bd      	mov	sp, r7
 801d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f8:	4770      	bx	lr

0801d4fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801d4fa:	b480      	push	{r7}
 801d4fc:	b083      	sub	sp, #12
 801d4fe:	af00      	add	r7, sp, #0
 801d500:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	695b      	ldr	r3, [r3, #20]
 801d506:	f003 0301 	and.w	r3, r3, #1
}
 801d50a:	4618      	mov	r0, r3
 801d50c:	370c      	adds	r7, #12
 801d50e:	46bd      	mov	sp, r7
 801d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d514:	4770      	bx	lr

0801d516 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801d516:	b480      	push	{r7}
 801d518:	b085      	sub	sp, #20
 801d51a:	af00      	add	r7, sp, #0
 801d51c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	68fa      	ldr	r2, [r7, #12]
 801d52c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801d530:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801d534:	f023 0307 	bic.w	r3, r3, #7
 801d538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d540:	685b      	ldr	r3, [r3, #4]
 801d542:	68fa      	ldr	r2, [r7, #12]
 801d544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d54c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801d54e:	2300      	movs	r3, #0
}
 801d550:	4618      	mov	r0, r3
 801d552:	3714      	adds	r7, #20
 801d554:	46bd      	mov	sp, r7
 801d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d55a:	4770      	bx	lr

0801d55c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801d55c:	b480      	push	{r7}
 801d55e:	b087      	sub	sp, #28
 801d560:	af00      	add	r7, sp, #0
 801d562:	60f8      	str	r0, [r7, #12]
 801d564:	460b      	mov	r3, r1
 801d566:	607a      	str	r2, [r7, #4]
 801d568:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	333c      	adds	r3, #60	; 0x3c
 801d572:	3304      	adds	r3, #4
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801d578:	693b      	ldr	r3, [r7, #16]
 801d57a:	4a26      	ldr	r2, [pc, #152]	; (801d614 <USB_EP0_OutStart+0xb8>)
 801d57c:	4293      	cmp	r3, r2
 801d57e:	d90a      	bls.n	801d596 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801d580:	697b      	ldr	r3, [r7, #20]
 801d582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801d58c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801d590:	d101      	bne.n	801d596 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801d592:	2300      	movs	r3, #0
 801d594:	e037      	b.n	801d606 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801d596:	697b      	ldr	r3, [r7, #20]
 801d598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d59c:	461a      	mov	r2, r3
 801d59e:	2300      	movs	r3, #0
 801d5a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801d5a2:	697b      	ldr	r3, [r7, #20]
 801d5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d5a8:	691b      	ldr	r3, [r3, #16]
 801d5aa:	697a      	ldr	r2, [r7, #20]
 801d5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d5b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801d5b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801d5b6:	697b      	ldr	r3, [r7, #20]
 801d5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d5bc:	691b      	ldr	r3, [r3, #16]
 801d5be:	697a      	ldr	r2, [r7, #20]
 801d5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d5c4:	f043 0318 	orr.w	r3, r3, #24
 801d5c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801d5ca:	697b      	ldr	r3, [r7, #20]
 801d5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d5d0:	691b      	ldr	r3, [r3, #16]
 801d5d2:	697a      	ldr	r2, [r7, #20]
 801d5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d5d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801d5dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801d5de:	7afb      	ldrb	r3, [r7, #11]
 801d5e0:	2b01      	cmp	r3, #1
 801d5e2:	d10f      	bne.n	801d604 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801d5e4:	697b      	ldr	r3, [r7, #20]
 801d5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d5ea:	461a      	mov	r2, r3
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801d5f0:	697b      	ldr	r3, [r7, #20]
 801d5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	697a      	ldr	r2, [r7, #20]
 801d5fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801d5fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801d602:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801d604:	2300      	movs	r3, #0
}
 801d606:	4618      	mov	r0, r3
 801d608:	371c      	adds	r7, #28
 801d60a:	46bd      	mov	sp, r7
 801d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d610:	4770      	bx	lr
 801d612:	bf00      	nop
 801d614:	4f54300a 	.word	0x4f54300a

0801d618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801d618:	b480      	push	{r7}
 801d61a:	b085      	sub	sp, #20
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801d620:	2300      	movs	r3, #0
 801d622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	3301      	adds	r3, #1
 801d628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801d630:	d901      	bls.n	801d636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801d632:	2303      	movs	r3, #3
 801d634:	e01b      	b.n	801d66e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	691b      	ldr	r3, [r3, #16]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	daf2      	bge.n	801d624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801d63e:	2300      	movs	r3, #0
 801d640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	691b      	ldr	r3, [r3, #16]
 801d646:	f043 0201 	orr.w	r2, r3, #1
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801d64e:	68fb      	ldr	r3, [r7, #12]
 801d650:	3301      	adds	r3, #1
 801d652:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801d65a:	d901      	bls.n	801d660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801d65c:	2303      	movs	r3, #3
 801d65e:	e006      	b.n	801d66e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	691b      	ldr	r3, [r3, #16]
 801d664:	f003 0301 	and.w	r3, r3, #1
 801d668:	2b01      	cmp	r3, #1
 801d66a:	d0f0      	beq.n	801d64e <USB_CoreReset+0x36>

  return HAL_OK;
 801d66c:	2300      	movs	r3, #0
}
 801d66e:	4618      	mov	r0, r3
 801d670:	3714      	adds	r7, #20
 801d672:	46bd      	mov	sp, r7
 801d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d678:	4770      	bx	lr
	...

0801d67c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d67c:	b580      	push	{r7, lr}
 801d67e:	b084      	sub	sp, #16
 801d680:	af00      	add	r7, sp, #0
 801d682:	6078      	str	r0, [r7, #4]
 801d684:	460b      	mov	r3, r1
 801d686:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801d688:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801d68c:	f005 fff4 	bl	8023678 <USBD_static_malloc>
 801d690:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d109      	bne.n	801d6ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	32b0      	adds	r2, #176	; 0xb0
 801d6a2:	2100      	movs	r1, #0
 801d6a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801d6a8:	2302      	movs	r3, #2
 801d6aa:	e0d4      	b.n	801d856 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801d6ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801d6b0:	2100      	movs	r1, #0
 801d6b2:	68f8      	ldr	r0, [r7, #12]
 801d6b4:	f007 f9e4 	bl	8024a80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	32b0      	adds	r2, #176	; 0xb0
 801d6c2:	68f9      	ldr	r1, [r7, #12]
 801d6c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	32b0      	adds	r2, #176	; 0xb0
 801d6d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	7c1b      	ldrb	r3, [r3, #16]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d138      	bne.n	801d756 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801d6e4:	4b5e      	ldr	r3, [pc, #376]	; (801d860 <USBD_CDC_Init+0x1e4>)
 801d6e6:	7819      	ldrb	r1, [r3, #0]
 801d6e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d6ec:	2202      	movs	r2, #2
 801d6ee:	6878      	ldr	r0, [r7, #4]
 801d6f0:	f005 fe9f 	bl	8023432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801d6f4:	4b5a      	ldr	r3, [pc, #360]	; (801d860 <USBD_CDC_Init+0x1e4>)
 801d6f6:	781b      	ldrb	r3, [r3, #0]
 801d6f8:	f003 020f 	and.w	r2, r3, #15
 801d6fc:	6879      	ldr	r1, [r7, #4]
 801d6fe:	4613      	mov	r3, r2
 801d700:	009b      	lsls	r3, r3, #2
 801d702:	4413      	add	r3, r2
 801d704:	009b      	lsls	r3, r3, #2
 801d706:	440b      	add	r3, r1
 801d708:	3324      	adds	r3, #36	; 0x24
 801d70a:	2201      	movs	r2, #1
 801d70c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801d70e:	4b55      	ldr	r3, [pc, #340]	; (801d864 <USBD_CDC_Init+0x1e8>)
 801d710:	7819      	ldrb	r1, [r3, #0]
 801d712:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d716:	2202      	movs	r2, #2
 801d718:	6878      	ldr	r0, [r7, #4]
 801d71a:	f005 fe8a 	bl	8023432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801d71e:	4b51      	ldr	r3, [pc, #324]	; (801d864 <USBD_CDC_Init+0x1e8>)
 801d720:	781b      	ldrb	r3, [r3, #0]
 801d722:	f003 020f 	and.w	r2, r3, #15
 801d726:	6879      	ldr	r1, [r7, #4]
 801d728:	4613      	mov	r3, r2
 801d72a:	009b      	lsls	r3, r3, #2
 801d72c:	4413      	add	r3, r2
 801d72e:	009b      	lsls	r3, r3, #2
 801d730:	440b      	add	r3, r1
 801d732:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801d736:	2201      	movs	r2, #1
 801d738:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801d73a:	4b4b      	ldr	r3, [pc, #300]	; (801d868 <USBD_CDC_Init+0x1ec>)
 801d73c:	781b      	ldrb	r3, [r3, #0]
 801d73e:	f003 020f 	and.w	r2, r3, #15
 801d742:	6879      	ldr	r1, [r7, #4]
 801d744:	4613      	mov	r3, r2
 801d746:	009b      	lsls	r3, r3, #2
 801d748:	4413      	add	r3, r2
 801d74a:	009b      	lsls	r3, r3, #2
 801d74c:	440b      	add	r3, r1
 801d74e:	3326      	adds	r3, #38	; 0x26
 801d750:	2210      	movs	r2, #16
 801d752:	801a      	strh	r2, [r3, #0]
 801d754:	e035      	b.n	801d7c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801d756:	4b42      	ldr	r3, [pc, #264]	; (801d860 <USBD_CDC_Init+0x1e4>)
 801d758:	7819      	ldrb	r1, [r3, #0]
 801d75a:	2340      	movs	r3, #64	; 0x40
 801d75c:	2202      	movs	r2, #2
 801d75e:	6878      	ldr	r0, [r7, #4]
 801d760:	f005 fe67 	bl	8023432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801d764:	4b3e      	ldr	r3, [pc, #248]	; (801d860 <USBD_CDC_Init+0x1e4>)
 801d766:	781b      	ldrb	r3, [r3, #0]
 801d768:	f003 020f 	and.w	r2, r3, #15
 801d76c:	6879      	ldr	r1, [r7, #4]
 801d76e:	4613      	mov	r3, r2
 801d770:	009b      	lsls	r3, r3, #2
 801d772:	4413      	add	r3, r2
 801d774:	009b      	lsls	r3, r3, #2
 801d776:	440b      	add	r3, r1
 801d778:	3324      	adds	r3, #36	; 0x24
 801d77a:	2201      	movs	r2, #1
 801d77c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801d77e:	4b39      	ldr	r3, [pc, #228]	; (801d864 <USBD_CDC_Init+0x1e8>)
 801d780:	7819      	ldrb	r1, [r3, #0]
 801d782:	2340      	movs	r3, #64	; 0x40
 801d784:	2202      	movs	r2, #2
 801d786:	6878      	ldr	r0, [r7, #4]
 801d788:	f005 fe53 	bl	8023432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801d78c:	4b35      	ldr	r3, [pc, #212]	; (801d864 <USBD_CDC_Init+0x1e8>)
 801d78e:	781b      	ldrb	r3, [r3, #0]
 801d790:	f003 020f 	and.w	r2, r3, #15
 801d794:	6879      	ldr	r1, [r7, #4]
 801d796:	4613      	mov	r3, r2
 801d798:	009b      	lsls	r3, r3, #2
 801d79a:	4413      	add	r3, r2
 801d79c:	009b      	lsls	r3, r3, #2
 801d79e:	440b      	add	r3, r1
 801d7a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801d7a4:	2201      	movs	r2, #1
 801d7a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801d7a8:	4b2f      	ldr	r3, [pc, #188]	; (801d868 <USBD_CDC_Init+0x1ec>)
 801d7aa:	781b      	ldrb	r3, [r3, #0]
 801d7ac:	f003 020f 	and.w	r2, r3, #15
 801d7b0:	6879      	ldr	r1, [r7, #4]
 801d7b2:	4613      	mov	r3, r2
 801d7b4:	009b      	lsls	r3, r3, #2
 801d7b6:	4413      	add	r3, r2
 801d7b8:	009b      	lsls	r3, r3, #2
 801d7ba:	440b      	add	r3, r1
 801d7bc:	3326      	adds	r3, #38	; 0x26
 801d7be:	2210      	movs	r2, #16
 801d7c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801d7c2:	4b29      	ldr	r3, [pc, #164]	; (801d868 <USBD_CDC_Init+0x1ec>)
 801d7c4:	7819      	ldrb	r1, [r3, #0]
 801d7c6:	2308      	movs	r3, #8
 801d7c8:	2203      	movs	r2, #3
 801d7ca:	6878      	ldr	r0, [r7, #4]
 801d7cc:	f005 fe31 	bl	8023432 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801d7d0:	4b25      	ldr	r3, [pc, #148]	; (801d868 <USBD_CDC_Init+0x1ec>)
 801d7d2:	781b      	ldrb	r3, [r3, #0]
 801d7d4:	f003 020f 	and.w	r2, r3, #15
 801d7d8:	6879      	ldr	r1, [r7, #4]
 801d7da:	4613      	mov	r3, r2
 801d7dc:	009b      	lsls	r3, r3, #2
 801d7de:	4413      	add	r3, r2
 801d7e0:	009b      	lsls	r3, r3, #2
 801d7e2:	440b      	add	r3, r1
 801d7e4:	3324      	adds	r3, #36	; 0x24
 801d7e6:	2201      	movs	r2, #1
 801d7e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	2200      	movs	r2, #0
 801d7ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801d7f8:	687a      	ldr	r2, [r7, #4]
 801d7fa:	33b0      	adds	r3, #176	; 0xb0
 801d7fc:	009b      	lsls	r3, r3, #2
 801d7fe:	4413      	add	r3, r2
 801d800:	685b      	ldr	r3, [r3, #4]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	2200      	movs	r2, #0
 801d80a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	2200      	movs	r2, #0
 801d812:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d101      	bne.n	801d824 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801d820:	2302      	movs	r3, #2
 801d822:	e018      	b.n	801d856 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	7c1b      	ldrb	r3, [r3, #16]
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d10a      	bne.n	801d842 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801d82c:	4b0d      	ldr	r3, [pc, #52]	; (801d864 <USBD_CDC_Init+0x1e8>)
 801d82e:	7819      	ldrb	r1, [r3, #0]
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801d836:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d83a:	6878      	ldr	r0, [r7, #4]
 801d83c:	f005 fee8 	bl	8023610 <USBD_LL_PrepareReceive>
 801d840:	e008      	b.n	801d854 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801d842:	4b08      	ldr	r3, [pc, #32]	; (801d864 <USBD_CDC_Init+0x1e8>)
 801d844:	7819      	ldrb	r1, [r3, #0]
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801d84c:	2340      	movs	r3, #64	; 0x40
 801d84e:	6878      	ldr	r0, [r7, #4]
 801d850:	f005 fede 	bl	8023610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801d854:	2300      	movs	r3, #0
}
 801d856:	4618      	mov	r0, r3
 801d858:	3710      	adds	r7, #16
 801d85a:	46bd      	mov	sp, r7
 801d85c:	bd80      	pop	{r7, pc}
 801d85e:	bf00      	nop
 801d860:	20000f8b 	.word	0x20000f8b
 801d864:	20000f8c 	.word	0x20000f8c
 801d868:	20000f8d 	.word	0x20000f8d

0801d86c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d86c:	b580      	push	{r7, lr}
 801d86e:	b082      	sub	sp, #8
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]
 801d874:	460b      	mov	r3, r1
 801d876:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801d878:	4b3a      	ldr	r3, [pc, #232]	; (801d964 <USBD_CDC_DeInit+0xf8>)
 801d87a:	781b      	ldrb	r3, [r3, #0]
 801d87c:	4619      	mov	r1, r3
 801d87e:	6878      	ldr	r0, [r7, #4]
 801d880:	f005 fdfd 	bl	802347e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801d884:	4b37      	ldr	r3, [pc, #220]	; (801d964 <USBD_CDC_DeInit+0xf8>)
 801d886:	781b      	ldrb	r3, [r3, #0]
 801d888:	f003 020f 	and.w	r2, r3, #15
 801d88c:	6879      	ldr	r1, [r7, #4]
 801d88e:	4613      	mov	r3, r2
 801d890:	009b      	lsls	r3, r3, #2
 801d892:	4413      	add	r3, r2
 801d894:	009b      	lsls	r3, r3, #2
 801d896:	440b      	add	r3, r1
 801d898:	3324      	adds	r3, #36	; 0x24
 801d89a:	2200      	movs	r2, #0
 801d89c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801d89e:	4b32      	ldr	r3, [pc, #200]	; (801d968 <USBD_CDC_DeInit+0xfc>)
 801d8a0:	781b      	ldrb	r3, [r3, #0]
 801d8a2:	4619      	mov	r1, r3
 801d8a4:	6878      	ldr	r0, [r7, #4]
 801d8a6:	f005 fdea 	bl	802347e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801d8aa:	4b2f      	ldr	r3, [pc, #188]	; (801d968 <USBD_CDC_DeInit+0xfc>)
 801d8ac:	781b      	ldrb	r3, [r3, #0]
 801d8ae:	f003 020f 	and.w	r2, r3, #15
 801d8b2:	6879      	ldr	r1, [r7, #4]
 801d8b4:	4613      	mov	r3, r2
 801d8b6:	009b      	lsls	r3, r3, #2
 801d8b8:	4413      	add	r3, r2
 801d8ba:	009b      	lsls	r3, r3, #2
 801d8bc:	440b      	add	r3, r1
 801d8be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801d8c6:	4b29      	ldr	r3, [pc, #164]	; (801d96c <USBD_CDC_DeInit+0x100>)
 801d8c8:	781b      	ldrb	r3, [r3, #0]
 801d8ca:	4619      	mov	r1, r3
 801d8cc:	6878      	ldr	r0, [r7, #4]
 801d8ce:	f005 fdd6 	bl	802347e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801d8d2:	4b26      	ldr	r3, [pc, #152]	; (801d96c <USBD_CDC_DeInit+0x100>)
 801d8d4:	781b      	ldrb	r3, [r3, #0]
 801d8d6:	f003 020f 	and.w	r2, r3, #15
 801d8da:	6879      	ldr	r1, [r7, #4]
 801d8dc:	4613      	mov	r3, r2
 801d8de:	009b      	lsls	r3, r3, #2
 801d8e0:	4413      	add	r3, r2
 801d8e2:	009b      	lsls	r3, r3, #2
 801d8e4:	440b      	add	r3, r1
 801d8e6:	3324      	adds	r3, #36	; 0x24
 801d8e8:	2200      	movs	r2, #0
 801d8ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801d8ec:	4b1f      	ldr	r3, [pc, #124]	; (801d96c <USBD_CDC_DeInit+0x100>)
 801d8ee:	781b      	ldrb	r3, [r3, #0]
 801d8f0:	f003 020f 	and.w	r2, r3, #15
 801d8f4:	6879      	ldr	r1, [r7, #4]
 801d8f6:	4613      	mov	r3, r2
 801d8f8:	009b      	lsls	r3, r3, #2
 801d8fa:	4413      	add	r3, r2
 801d8fc:	009b      	lsls	r3, r3, #2
 801d8fe:	440b      	add	r3, r1
 801d900:	3326      	adds	r3, #38	; 0x26
 801d902:	2200      	movs	r2, #0
 801d904:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	32b0      	adds	r2, #176	; 0xb0
 801d910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d01f      	beq.n	801d958 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801d91e:	687a      	ldr	r2, [r7, #4]
 801d920:	33b0      	adds	r3, #176	; 0xb0
 801d922:	009b      	lsls	r3, r3, #2
 801d924:	4413      	add	r3, r2
 801d926:	685b      	ldr	r3, [r3, #4]
 801d928:	685b      	ldr	r3, [r3, #4]
 801d92a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	32b0      	adds	r2, #176	; 0xb0
 801d936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d93a:	4618      	mov	r0, r3
 801d93c:	f005 feaa 	bl	8023694 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	32b0      	adds	r2, #176	; 0xb0
 801d94a:	2100      	movs	r1, #0
 801d94c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	2200      	movs	r2, #0
 801d954:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801d958:	2300      	movs	r3, #0
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	3708      	adds	r7, #8
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd80      	pop	{r7, pc}
 801d962:	bf00      	nop
 801d964:	20000f8b 	.word	0x20000f8b
 801d968:	20000f8c 	.word	0x20000f8c
 801d96c:	20000f8d 	.word	0x20000f8d

0801d970 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b086      	sub	sp, #24
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
 801d978:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	32b0      	adds	r2, #176	; 0xb0
 801d984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d988:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801d98a:	2300      	movs	r3, #0
 801d98c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801d98e:	2300      	movs	r3, #0
 801d990:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801d992:	2300      	movs	r3, #0
 801d994:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801d996:	693b      	ldr	r3, [r7, #16]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d101      	bne.n	801d9a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801d99c:	2303      	movs	r3, #3
 801d99e:	e0bf      	b.n	801db20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d9a0:	683b      	ldr	r3, [r7, #0]
 801d9a2:	781b      	ldrb	r3, [r3, #0]
 801d9a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d050      	beq.n	801da4e <USBD_CDC_Setup+0xde>
 801d9ac:	2b20      	cmp	r3, #32
 801d9ae:	f040 80af 	bne.w	801db10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	88db      	ldrh	r3, [r3, #6]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d03a      	beq.n	801da30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801d9ba:	683b      	ldr	r3, [r7, #0]
 801d9bc:	781b      	ldrb	r3, [r3, #0]
 801d9be:	b25b      	sxtb	r3, r3
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	da1b      	bge.n	801d9fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801d9ca:	687a      	ldr	r2, [r7, #4]
 801d9cc:	33b0      	adds	r3, #176	; 0xb0
 801d9ce:	009b      	lsls	r3, r3, #2
 801d9d0:	4413      	add	r3, r2
 801d9d2:	685b      	ldr	r3, [r3, #4]
 801d9d4:	689b      	ldr	r3, [r3, #8]
 801d9d6:	683a      	ldr	r2, [r7, #0]
 801d9d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801d9da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801d9dc:	683a      	ldr	r2, [r7, #0]
 801d9de:	88d2      	ldrh	r2, [r2, #6]
 801d9e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801d9e2:	683b      	ldr	r3, [r7, #0]
 801d9e4:	88db      	ldrh	r3, [r3, #6]
 801d9e6:	2b07      	cmp	r3, #7
 801d9e8:	bf28      	it	cs
 801d9ea:	2307      	movcs	r3, #7
 801d9ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	89fa      	ldrh	r2, [r7, #14]
 801d9f2:	4619      	mov	r1, r3
 801d9f4:	6878      	ldr	r0, [r7, #4]
 801d9f6:	f001 fd49 	bl	801f48c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801d9fa:	e090      	b.n	801db1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801d9fc:	683b      	ldr	r3, [r7, #0]
 801d9fe:	785a      	ldrb	r2, [r3, #1]
 801da00:	693b      	ldr	r3, [r7, #16]
 801da02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801da06:	683b      	ldr	r3, [r7, #0]
 801da08:	88db      	ldrh	r3, [r3, #6]
 801da0a:	2b3f      	cmp	r3, #63	; 0x3f
 801da0c:	d803      	bhi.n	801da16 <USBD_CDC_Setup+0xa6>
 801da0e:	683b      	ldr	r3, [r7, #0]
 801da10:	88db      	ldrh	r3, [r3, #6]
 801da12:	b2da      	uxtb	r2, r3
 801da14:	e000      	b.n	801da18 <USBD_CDC_Setup+0xa8>
 801da16:	2240      	movs	r2, #64	; 0x40
 801da18:	693b      	ldr	r3, [r7, #16]
 801da1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801da1e:	6939      	ldr	r1, [r7, #16]
 801da20:	693b      	ldr	r3, [r7, #16]
 801da22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801da26:	461a      	mov	r2, r3
 801da28:	6878      	ldr	r0, [r7, #4]
 801da2a:	f001 fd5b 	bl	801f4e4 <USBD_CtlPrepareRx>
      break;
 801da2e:	e076      	b.n	801db1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801da36:	687a      	ldr	r2, [r7, #4]
 801da38:	33b0      	adds	r3, #176	; 0xb0
 801da3a:	009b      	lsls	r3, r3, #2
 801da3c:	4413      	add	r3, r2
 801da3e:	685b      	ldr	r3, [r3, #4]
 801da40:	689b      	ldr	r3, [r3, #8]
 801da42:	683a      	ldr	r2, [r7, #0]
 801da44:	7850      	ldrb	r0, [r2, #1]
 801da46:	2200      	movs	r2, #0
 801da48:	6839      	ldr	r1, [r7, #0]
 801da4a:	4798      	blx	r3
      break;
 801da4c:	e067      	b.n	801db1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801da4e:	683b      	ldr	r3, [r7, #0]
 801da50:	785b      	ldrb	r3, [r3, #1]
 801da52:	2b0b      	cmp	r3, #11
 801da54:	d851      	bhi.n	801dafa <USBD_CDC_Setup+0x18a>
 801da56:	a201      	add	r2, pc, #4	; (adr r2, 801da5c <USBD_CDC_Setup+0xec>)
 801da58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da5c:	0801da8d 	.word	0x0801da8d
 801da60:	0801db09 	.word	0x0801db09
 801da64:	0801dafb 	.word	0x0801dafb
 801da68:	0801dafb 	.word	0x0801dafb
 801da6c:	0801dafb 	.word	0x0801dafb
 801da70:	0801dafb 	.word	0x0801dafb
 801da74:	0801dafb 	.word	0x0801dafb
 801da78:	0801dafb 	.word	0x0801dafb
 801da7c:	0801dafb 	.word	0x0801dafb
 801da80:	0801dafb 	.word	0x0801dafb
 801da84:	0801dab7 	.word	0x0801dab7
 801da88:	0801dae1 	.word	0x0801dae1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801da92:	b2db      	uxtb	r3, r3
 801da94:	2b03      	cmp	r3, #3
 801da96:	d107      	bne.n	801daa8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801da98:	f107 030a 	add.w	r3, r7, #10
 801da9c:	2202      	movs	r2, #2
 801da9e:	4619      	mov	r1, r3
 801daa0:	6878      	ldr	r0, [r7, #4]
 801daa2:	f001 fcf3 	bl	801f48c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801daa6:	e032      	b.n	801db0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801daa8:	6839      	ldr	r1, [r7, #0]
 801daaa:	6878      	ldr	r0, [r7, #4]
 801daac:	f001 fc7d 	bl	801f3aa <USBD_CtlError>
            ret = USBD_FAIL;
 801dab0:	2303      	movs	r3, #3
 801dab2:	75fb      	strb	r3, [r7, #23]
          break;
 801dab4:	e02b      	b.n	801db0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dabc:	b2db      	uxtb	r3, r3
 801dabe:	2b03      	cmp	r3, #3
 801dac0:	d107      	bne.n	801dad2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801dac2:	f107 030d 	add.w	r3, r7, #13
 801dac6:	2201      	movs	r2, #1
 801dac8:	4619      	mov	r1, r3
 801daca:	6878      	ldr	r0, [r7, #4]
 801dacc:	f001 fcde 	bl	801f48c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801dad0:	e01d      	b.n	801db0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801dad2:	6839      	ldr	r1, [r7, #0]
 801dad4:	6878      	ldr	r0, [r7, #4]
 801dad6:	f001 fc68 	bl	801f3aa <USBD_CtlError>
            ret = USBD_FAIL;
 801dada:	2303      	movs	r3, #3
 801dadc:	75fb      	strb	r3, [r7, #23]
          break;
 801dade:	e016      	b.n	801db0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801dae6:	b2db      	uxtb	r3, r3
 801dae8:	2b03      	cmp	r3, #3
 801daea:	d00f      	beq.n	801db0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801daec:	6839      	ldr	r1, [r7, #0]
 801daee:	6878      	ldr	r0, [r7, #4]
 801daf0:	f001 fc5b 	bl	801f3aa <USBD_CtlError>
            ret = USBD_FAIL;
 801daf4:	2303      	movs	r3, #3
 801daf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801daf8:	e008      	b.n	801db0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801dafa:	6839      	ldr	r1, [r7, #0]
 801dafc:	6878      	ldr	r0, [r7, #4]
 801dafe:	f001 fc54 	bl	801f3aa <USBD_CtlError>
          ret = USBD_FAIL;
 801db02:	2303      	movs	r3, #3
 801db04:	75fb      	strb	r3, [r7, #23]
          break;
 801db06:	e002      	b.n	801db0e <USBD_CDC_Setup+0x19e>
          break;
 801db08:	bf00      	nop
 801db0a:	e008      	b.n	801db1e <USBD_CDC_Setup+0x1ae>
          break;
 801db0c:	bf00      	nop
      }
      break;
 801db0e:	e006      	b.n	801db1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801db10:	6839      	ldr	r1, [r7, #0]
 801db12:	6878      	ldr	r0, [r7, #4]
 801db14:	f001 fc49 	bl	801f3aa <USBD_CtlError>
      ret = USBD_FAIL;
 801db18:	2303      	movs	r3, #3
 801db1a:	75fb      	strb	r3, [r7, #23]
      break;
 801db1c:	bf00      	nop
  }

  return (uint8_t)ret;
 801db1e:	7dfb      	ldrb	r3, [r7, #23]
}
 801db20:	4618      	mov	r0, r3
 801db22:	3718      	adds	r7, #24
 801db24:	46bd      	mov	sp, r7
 801db26:	bd80      	pop	{r7, pc}

0801db28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801db28:	b580      	push	{r7, lr}
 801db2a:	b084      	sub	sp, #16
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
 801db30:	460b      	mov	r3, r1
 801db32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801db3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	32b0      	adds	r2, #176	; 0xb0
 801db46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d101      	bne.n	801db52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801db4e:	2303      	movs	r3, #3
 801db50:	e065      	b.n	801dc1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	32b0      	adds	r2, #176	; 0xb0
 801db5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801db60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801db62:	78fb      	ldrb	r3, [r7, #3]
 801db64:	f003 020f 	and.w	r2, r3, #15
 801db68:	6879      	ldr	r1, [r7, #4]
 801db6a:	4613      	mov	r3, r2
 801db6c:	009b      	lsls	r3, r3, #2
 801db6e:	4413      	add	r3, r2
 801db70:	009b      	lsls	r3, r3, #2
 801db72:	440b      	add	r3, r1
 801db74:	3318      	adds	r3, #24
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d02f      	beq.n	801dbdc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801db7c:	78fb      	ldrb	r3, [r7, #3]
 801db7e:	f003 020f 	and.w	r2, r3, #15
 801db82:	6879      	ldr	r1, [r7, #4]
 801db84:	4613      	mov	r3, r2
 801db86:	009b      	lsls	r3, r3, #2
 801db88:	4413      	add	r3, r2
 801db8a:	009b      	lsls	r3, r3, #2
 801db8c:	440b      	add	r3, r1
 801db8e:	3318      	adds	r3, #24
 801db90:	681a      	ldr	r2, [r3, #0]
 801db92:	78fb      	ldrb	r3, [r7, #3]
 801db94:	f003 010f 	and.w	r1, r3, #15
 801db98:	68f8      	ldr	r0, [r7, #12]
 801db9a:	460b      	mov	r3, r1
 801db9c:	00db      	lsls	r3, r3, #3
 801db9e:	440b      	add	r3, r1
 801dba0:	009b      	lsls	r3, r3, #2
 801dba2:	4403      	add	r3, r0
 801dba4:	331c      	adds	r3, #28
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	fbb2 f1f3 	udiv	r1, r2, r3
 801dbac:	fb01 f303 	mul.w	r3, r1, r3
 801dbb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d112      	bne.n	801dbdc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801dbb6:	78fb      	ldrb	r3, [r7, #3]
 801dbb8:	f003 020f 	and.w	r2, r3, #15
 801dbbc:	6879      	ldr	r1, [r7, #4]
 801dbbe:	4613      	mov	r3, r2
 801dbc0:	009b      	lsls	r3, r3, #2
 801dbc2:	4413      	add	r3, r2
 801dbc4:	009b      	lsls	r3, r3, #2
 801dbc6:	440b      	add	r3, r1
 801dbc8:	3318      	adds	r3, #24
 801dbca:	2200      	movs	r2, #0
 801dbcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801dbce:	78f9      	ldrb	r1, [r7, #3]
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	2200      	movs	r2, #0
 801dbd4:	6878      	ldr	r0, [r7, #4]
 801dbd6:	f005 fcfa 	bl	80235ce <USBD_LL_Transmit>
 801dbda:	e01f      	b.n	801dc1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801dbdc:	68bb      	ldr	r3, [r7, #8]
 801dbde:	2200      	movs	r2, #0
 801dbe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801dbea:	687a      	ldr	r2, [r7, #4]
 801dbec:	33b0      	adds	r3, #176	; 0xb0
 801dbee:	009b      	lsls	r3, r3, #2
 801dbf0:	4413      	add	r3, r2
 801dbf2:	685b      	ldr	r3, [r3, #4]
 801dbf4:	691b      	ldr	r3, [r3, #16]
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d010      	beq.n	801dc1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801dc00:	687a      	ldr	r2, [r7, #4]
 801dc02:	33b0      	adds	r3, #176	; 0xb0
 801dc04:	009b      	lsls	r3, r3, #2
 801dc06:	4413      	add	r3, r2
 801dc08:	685b      	ldr	r3, [r3, #4]
 801dc0a:	691b      	ldr	r3, [r3, #16]
 801dc0c:	68ba      	ldr	r2, [r7, #8]
 801dc0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801dc12:	68ba      	ldr	r2, [r7, #8]
 801dc14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801dc18:	78fa      	ldrb	r2, [r7, #3]
 801dc1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801dc1c:	2300      	movs	r3, #0
}
 801dc1e:	4618      	mov	r0, r3
 801dc20:	3710      	adds	r7, #16
 801dc22:	46bd      	mov	sp, r7
 801dc24:	bd80      	pop	{r7, pc}

0801dc26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801dc26:	b580      	push	{r7, lr}
 801dc28:	b084      	sub	sp, #16
 801dc2a:	af00      	add	r7, sp, #0
 801dc2c:	6078      	str	r0, [r7, #4]
 801dc2e:	460b      	mov	r3, r1
 801dc30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	32b0      	adds	r2, #176	; 0xb0
 801dc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dc40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	32b0      	adds	r2, #176	; 0xb0
 801dc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d101      	bne.n	801dc58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801dc54:	2303      	movs	r3, #3
 801dc56:	e01a      	b.n	801dc8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801dc58:	78fb      	ldrb	r3, [r7, #3]
 801dc5a:	4619      	mov	r1, r3
 801dc5c:	6878      	ldr	r0, [r7, #4]
 801dc5e:	f005 fcf8 	bl	8023652 <USBD_LL_GetRxDataSize>
 801dc62:	4602      	mov	r2, r0
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801dc70:	687a      	ldr	r2, [r7, #4]
 801dc72:	33b0      	adds	r3, #176	; 0xb0
 801dc74:	009b      	lsls	r3, r3, #2
 801dc76:	4413      	add	r3, r2
 801dc78:	685b      	ldr	r3, [r3, #4]
 801dc7a:	68db      	ldr	r3, [r3, #12]
 801dc7c:	68fa      	ldr	r2, [r7, #12]
 801dc7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801dc82:	68fa      	ldr	r2, [r7, #12]
 801dc84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801dc88:	4611      	mov	r1, r2
 801dc8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801dc8c:	2300      	movs	r3, #0
}
 801dc8e:	4618      	mov	r0, r3
 801dc90:	3710      	adds	r7, #16
 801dc92:	46bd      	mov	sp, r7
 801dc94:	bd80      	pop	{r7, pc}

0801dc96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801dc96:	b580      	push	{r7, lr}
 801dc98:	b084      	sub	sp, #16
 801dc9a:	af00      	add	r7, sp, #0
 801dc9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	32b0      	adds	r2, #176	; 0xb0
 801dca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dcac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d101      	bne.n	801dcb8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801dcb4:	2303      	movs	r3, #3
 801dcb6:	e025      	b.n	801dd04 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801dcbe:	687a      	ldr	r2, [r7, #4]
 801dcc0:	33b0      	adds	r3, #176	; 0xb0
 801dcc2:	009b      	lsls	r3, r3, #2
 801dcc4:	4413      	add	r3, r2
 801dcc6:	685b      	ldr	r3, [r3, #4]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d01a      	beq.n	801dd02 <USBD_CDC_EP0_RxReady+0x6c>
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801dcd2:	2bff      	cmp	r3, #255	; 0xff
 801dcd4:	d015      	beq.n	801dd02 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801dcdc:	687a      	ldr	r2, [r7, #4]
 801dcde:	33b0      	adds	r3, #176	; 0xb0
 801dce0:	009b      	lsls	r3, r3, #2
 801dce2:	4413      	add	r3, r2
 801dce4:	685b      	ldr	r3, [r3, #4]
 801dce6:	689b      	ldr	r3, [r3, #8]
 801dce8:	68fa      	ldr	r2, [r7, #12]
 801dcea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801dcee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801dcf0:	68fa      	ldr	r2, [r7, #12]
 801dcf2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801dcf6:	b292      	uxth	r2, r2
 801dcf8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	22ff      	movs	r2, #255	; 0xff
 801dcfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801dd02:	2300      	movs	r3, #0
}
 801dd04:	4618      	mov	r0, r3
 801dd06:	3710      	adds	r7, #16
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	bd80      	pop	{r7, pc}

0801dd0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b086      	sub	sp, #24
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801dd14:	2182      	movs	r1, #130	; 0x82
 801dd16:	4818      	ldr	r0, [pc, #96]	; (801dd78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801dd18:	f000 fd0f 	bl	801e73a <USBD_GetEpDesc>
 801dd1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801dd1e:	2101      	movs	r1, #1
 801dd20:	4815      	ldr	r0, [pc, #84]	; (801dd78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801dd22:	f000 fd0a 	bl	801e73a <USBD_GetEpDesc>
 801dd26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801dd28:	2181      	movs	r1, #129	; 0x81
 801dd2a:	4813      	ldr	r0, [pc, #76]	; (801dd78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801dd2c:	f000 fd05 	bl	801e73a <USBD_GetEpDesc>
 801dd30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801dd32:	697b      	ldr	r3, [r7, #20]
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d002      	beq.n	801dd3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801dd38:	697b      	ldr	r3, [r7, #20]
 801dd3a:	2210      	movs	r2, #16
 801dd3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801dd3e:	693b      	ldr	r3, [r7, #16]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d006      	beq.n	801dd52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801dd44:	693b      	ldr	r3, [r7, #16]
 801dd46:	2200      	movs	r2, #0
 801dd48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dd4c:	711a      	strb	r2, [r3, #4]
 801dd4e:	2200      	movs	r2, #0
 801dd50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d006      	beq.n	801dd66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	2200      	movs	r2, #0
 801dd5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dd60:	711a      	strb	r2, [r3, #4]
 801dd62:	2200      	movs	r2, #0
 801dd64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	2243      	movs	r2, #67	; 0x43
 801dd6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801dd6c:	4b02      	ldr	r3, [pc, #8]	; (801dd78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3718      	adds	r7, #24
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	bf00      	nop
 801dd78:	20000f48 	.word	0x20000f48

0801dd7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801dd7c:	b580      	push	{r7, lr}
 801dd7e:	b086      	sub	sp, #24
 801dd80:	af00      	add	r7, sp, #0
 801dd82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801dd84:	2182      	movs	r1, #130	; 0x82
 801dd86:	4818      	ldr	r0, [pc, #96]	; (801dde8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801dd88:	f000 fcd7 	bl	801e73a <USBD_GetEpDesc>
 801dd8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801dd8e:	2101      	movs	r1, #1
 801dd90:	4815      	ldr	r0, [pc, #84]	; (801dde8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801dd92:	f000 fcd2 	bl	801e73a <USBD_GetEpDesc>
 801dd96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801dd98:	2181      	movs	r1, #129	; 0x81
 801dd9a:	4813      	ldr	r0, [pc, #76]	; (801dde8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801dd9c:	f000 fccd 	bl	801e73a <USBD_GetEpDesc>
 801dda0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801dda2:	697b      	ldr	r3, [r7, #20]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d002      	beq.n	801ddae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801dda8:	697b      	ldr	r3, [r7, #20]
 801ddaa:	2210      	movs	r2, #16
 801ddac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ddae:	693b      	ldr	r3, [r7, #16]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d006      	beq.n	801ddc2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801ddb4:	693b      	ldr	r3, [r7, #16]
 801ddb6:	2200      	movs	r2, #0
 801ddb8:	711a      	strb	r2, [r3, #4]
 801ddba:	2200      	movs	r2, #0
 801ddbc:	f042 0202 	orr.w	r2, r2, #2
 801ddc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d006      	beq.n	801ddd6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	2200      	movs	r2, #0
 801ddcc:	711a      	strb	r2, [r3, #4]
 801ddce:	2200      	movs	r2, #0
 801ddd0:	f042 0202 	orr.w	r2, r2, #2
 801ddd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	2243      	movs	r2, #67	; 0x43
 801ddda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801dddc:	4b02      	ldr	r3, [pc, #8]	; (801dde8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801ddde:	4618      	mov	r0, r3
 801dde0:	3718      	adds	r7, #24
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bd80      	pop	{r7, pc}
 801dde6:	bf00      	nop
 801dde8:	20000f48 	.word	0x20000f48

0801ddec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ddec:	b580      	push	{r7, lr}
 801ddee:	b086      	sub	sp, #24
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ddf4:	2182      	movs	r1, #130	; 0x82
 801ddf6:	4818      	ldr	r0, [pc, #96]	; (801de58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ddf8:	f000 fc9f 	bl	801e73a <USBD_GetEpDesc>
 801ddfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ddfe:	2101      	movs	r1, #1
 801de00:	4815      	ldr	r0, [pc, #84]	; (801de58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801de02:	f000 fc9a 	bl	801e73a <USBD_GetEpDesc>
 801de06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801de08:	2181      	movs	r1, #129	; 0x81
 801de0a:	4813      	ldr	r0, [pc, #76]	; (801de58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801de0c:	f000 fc95 	bl	801e73a <USBD_GetEpDesc>
 801de10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801de12:	697b      	ldr	r3, [r7, #20]
 801de14:	2b00      	cmp	r3, #0
 801de16:	d002      	beq.n	801de1e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801de18:	697b      	ldr	r3, [r7, #20]
 801de1a:	2210      	movs	r2, #16
 801de1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801de1e:	693b      	ldr	r3, [r7, #16]
 801de20:	2b00      	cmp	r3, #0
 801de22:	d006      	beq.n	801de32 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801de24:	693b      	ldr	r3, [r7, #16]
 801de26:	2200      	movs	r2, #0
 801de28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801de2c:	711a      	strb	r2, [r3, #4]
 801de2e:	2200      	movs	r2, #0
 801de30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	2b00      	cmp	r3, #0
 801de36:	d006      	beq.n	801de46 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	2200      	movs	r2, #0
 801de3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801de40:	711a      	strb	r2, [r3, #4]
 801de42:	2200      	movs	r2, #0
 801de44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	2243      	movs	r2, #67	; 0x43
 801de4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801de4c:	4b02      	ldr	r3, [pc, #8]	; (801de58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801de4e:	4618      	mov	r0, r3
 801de50:	3718      	adds	r7, #24
 801de52:	46bd      	mov	sp, r7
 801de54:	bd80      	pop	{r7, pc}
 801de56:	bf00      	nop
 801de58:	20000f48 	.word	0x20000f48

0801de5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801de5c:	b480      	push	{r7}
 801de5e:	b083      	sub	sp, #12
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	220a      	movs	r2, #10
 801de68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801de6a:	4b03      	ldr	r3, [pc, #12]	; (801de78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801de6c:	4618      	mov	r0, r3
 801de6e:	370c      	adds	r7, #12
 801de70:	46bd      	mov	sp, r7
 801de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de76:	4770      	bx	lr
 801de78:	20000f04 	.word	0x20000f04

0801de7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801de7c:	b480      	push	{r7}
 801de7e:	b083      	sub	sp, #12
 801de80:	af00      	add	r7, sp, #0
 801de82:	6078      	str	r0, [r7, #4]
 801de84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801de86:	683b      	ldr	r3, [r7, #0]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d101      	bne.n	801de90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801de8c:	2303      	movs	r3, #3
 801de8e:	e009      	b.n	801dea4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801de96:	687a      	ldr	r2, [r7, #4]
 801de98:	33b0      	adds	r3, #176	; 0xb0
 801de9a:	009b      	lsls	r3, r3, #2
 801de9c:	4413      	add	r3, r2
 801de9e:	683a      	ldr	r2, [r7, #0]
 801dea0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801dea2:	2300      	movs	r3, #0
}
 801dea4:	4618      	mov	r0, r3
 801dea6:	370c      	adds	r7, #12
 801dea8:	46bd      	mov	sp, r7
 801deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deae:	4770      	bx	lr

0801deb0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801deb0:	b480      	push	{r7}
 801deb2:	b087      	sub	sp, #28
 801deb4:	af00      	add	r7, sp, #0
 801deb6:	60f8      	str	r0, [r7, #12]
 801deb8:	60b9      	str	r1, [r7, #8]
 801deba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801debc:	68fb      	ldr	r3, [r7, #12]
 801debe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	32b0      	adds	r2, #176	; 0xb0
 801dec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801deca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801decc:	697b      	ldr	r3, [r7, #20]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d101      	bne.n	801ded6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801ded2:	2303      	movs	r3, #3
 801ded4:	e008      	b.n	801dee8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801ded6:	697b      	ldr	r3, [r7, #20]
 801ded8:	68ba      	ldr	r2, [r7, #8]
 801deda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801dede:	697b      	ldr	r3, [r7, #20]
 801dee0:	687a      	ldr	r2, [r7, #4]
 801dee2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801dee6:	2300      	movs	r3, #0
}
 801dee8:	4618      	mov	r0, r3
 801deea:	371c      	adds	r7, #28
 801deec:	46bd      	mov	sp, r7
 801deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801def2:	4770      	bx	lr

0801def4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801def4:	b480      	push	{r7}
 801def6:	b085      	sub	sp, #20
 801def8:	af00      	add	r7, sp, #0
 801defa:	6078      	str	r0, [r7, #4]
 801defc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	32b0      	adds	r2, #176	; 0xb0
 801df08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801df0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d101      	bne.n	801df18 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801df14:	2303      	movs	r3, #3
 801df16:	e004      	b.n	801df22 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	683a      	ldr	r2, [r7, #0]
 801df1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801df20:	2300      	movs	r3, #0
}
 801df22:	4618      	mov	r0, r3
 801df24:	3714      	adds	r7, #20
 801df26:	46bd      	mov	sp, r7
 801df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df2c:	4770      	bx	lr
	...

0801df30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801df30:	b580      	push	{r7, lr}
 801df32:	b084      	sub	sp, #16
 801df34:	af00      	add	r7, sp, #0
 801df36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	32b0      	adds	r2, #176	; 0xb0
 801df42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801df46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	32b0      	adds	r2, #176	; 0xb0
 801df52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801df56:	2b00      	cmp	r3, #0
 801df58:	d101      	bne.n	801df5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801df5a:	2303      	movs	r3, #3
 801df5c:	e018      	b.n	801df90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	7c1b      	ldrb	r3, [r3, #16]
 801df62:	2b00      	cmp	r3, #0
 801df64:	d10a      	bne.n	801df7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801df66:	4b0c      	ldr	r3, [pc, #48]	; (801df98 <USBD_CDC_ReceivePacket+0x68>)
 801df68:	7819      	ldrb	r1, [r3, #0]
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801df70:	f44f 7300 	mov.w	r3, #512	; 0x200
 801df74:	6878      	ldr	r0, [r7, #4]
 801df76:	f005 fb4b 	bl	8023610 <USBD_LL_PrepareReceive>
 801df7a:	e008      	b.n	801df8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801df7c:	4b06      	ldr	r3, [pc, #24]	; (801df98 <USBD_CDC_ReceivePacket+0x68>)
 801df7e:	7819      	ldrb	r1, [r3, #0]
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801df86:	2340      	movs	r3, #64	; 0x40
 801df88:	6878      	ldr	r0, [r7, #4]
 801df8a:	f005 fb41 	bl	8023610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801df8e:	2300      	movs	r3, #0
}
 801df90:	4618      	mov	r0, r3
 801df92:	3710      	adds	r7, #16
 801df94:	46bd      	mov	sp, r7
 801df96:	bd80      	pop	{r7, pc}
 801df98:	20000f8c 	.word	0x20000f8c

0801df9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801df9c:	b580      	push	{r7, lr}
 801df9e:	b086      	sub	sp, #24
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	60f8      	str	r0, [r7, #12]
 801dfa4:	60b9      	str	r1, [r7, #8]
 801dfa6:	4613      	mov	r3, r2
 801dfa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d101      	bne.n	801dfb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801dfb0:	2303      	movs	r3, #3
 801dfb2:	e01f      	b.n	801dff4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	2200      	movs	r2, #0
 801dfc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801dfc4:	68fb      	ldr	r3, [r7, #12]
 801dfc6:	2200      	movs	r2, #0
 801dfc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801dfcc:	68bb      	ldr	r3, [r7, #8]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d003      	beq.n	801dfda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	68ba      	ldr	r2, [r7, #8]
 801dfd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	2201      	movs	r2, #1
 801dfde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	79fa      	ldrb	r2, [r7, #7]
 801dfe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801dfe8:	68f8      	ldr	r0, [r7, #12]
 801dfea:	f005 f9bb 	bl	8023364 <USBD_LL_Init>
 801dfee:	4603      	mov	r3, r0
 801dff0:	75fb      	strb	r3, [r7, #23]

  return ret;
 801dff2:	7dfb      	ldrb	r3, [r7, #23]
}
 801dff4:	4618      	mov	r0, r3
 801dff6:	3718      	adds	r7, #24
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bd80      	pop	{r7, pc}

0801dffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b084      	sub	sp, #16
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
 801e004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801e006:	2300      	movs	r3, #0
 801e008:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801e00a:	683b      	ldr	r3, [r7, #0]
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d101      	bne.n	801e014 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801e010:	2303      	movs	r3, #3
 801e012:	e025      	b.n	801e060 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	683a      	ldr	r2, [r7, #0]
 801e018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	32ae      	adds	r2, #174	; 0xae
 801e026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d00f      	beq.n	801e050 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	32ae      	adds	r2, #174	; 0xae
 801e03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e040:	f107 020e 	add.w	r2, r7, #14
 801e044:	4610      	mov	r0, r2
 801e046:	4798      	blx	r3
 801e048:	4602      	mov	r2, r0
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801e056:	1c5a      	adds	r2, r3, #1
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801e05e:	2300      	movs	r3, #0
}
 801e060:	4618      	mov	r0, r3
 801e062:	3710      	adds	r7, #16
 801e064:	46bd      	mov	sp, r7
 801e066:	bd80      	pop	{r7, pc}

0801e068 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801e068:	b580      	push	{r7, lr}
 801e06a:	b082      	sub	sp, #8
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801e070:	6878      	ldr	r0, [r7, #4]
 801e072:	f005 f9c3 	bl	80233fc <USBD_LL_Start>
 801e076:	4603      	mov	r3, r0
}
 801e078:	4618      	mov	r0, r3
 801e07a:	3708      	adds	r7, #8
 801e07c:	46bd      	mov	sp, r7
 801e07e:	bd80      	pop	{r7, pc}

0801e080 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801e080:	b480      	push	{r7}
 801e082:	b083      	sub	sp, #12
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801e088:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801e08a:	4618      	mov	r0, r3
 801e08c:	370c      	adds	r7, #12
 801e08e:	46bd      	mov	sp, r7
 801e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e094:	4770      	bx	lr

0801e096 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801e096:	b580      	push	{r7, lr}
 801e098:	b084      	sub	sp, #16
 801e09a:	af00      	add	r7, sp, #0
 801e09c:	6078      	str	r0, [r7, #4]
 801e09e:	460b      	mov	r3, r1
 801e0a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d009      	beq.n	801e0c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	78fa      	ldrb	r2, [r7, #3]
 801e0ba:	4611      	mov	r1, r2
 801e0bc:	6878      	ldr	r0, [r7, #4]
 801e0be:	4798      	blx	r3
 801e0c0:	4603      	mov	r3, r0
 801e0c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801e0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	3710      	adds	r7, #16
 801e0ca:	46bd      	mov	sp, r7
 801e0cc:	bd80      	pop	{r7, pc}

0801e0ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801e0ce:	b580      	push	{r7, lr}
 801e0d0:	b084      	sub	sp, #16
 801e0d2:	af00      	add	r7, sp, #0
 801e0d4:	6078      	str	r0, [r7, #4]
 801e0d6:	460b      	mov	r3, r1
 801e0d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801e0da:	2300      	movs	r3, #0
 801e0dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e0e4:	685b      	ldr	r3, [r3, #4]
 801e0e6:	78fa      	ldrb	r2, [r7, #3]
 801e0e8:	4611      	mov	r1, r2
 801e0ea:	6878      	ldr	r0, [r7, #4]
 801e0ec:	4798      	blx	r3
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d001      	beq.n	801e0f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801e0f4:	2303      	movs	r3, #3
 801e0f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801e0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	3710      	adds	r7, #16
 801e0fe:	46bd      	mov	sp, r7
 801e100:	bd80      	pop	{r7, pc}

0801e102 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801e102:	b580      	push	{r7, lr}
 801e104:	b084      	sub	sp, #16
 801e106:	af00      	add	r7, sp, #0
 801e108:	6078      	str	r0, [r7, #4]
 801e10a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801e112:	6839      	ldr	r1, [r7, #0]
 801e114:	4618      	mov	r0, r3
 801e116:	f001 f90e 	bl	801f336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	2201      	movs	r2, #1
 801e11e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801e128:	461a      	mov	r2, r3
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801e136:	f003 031f 	and.w	r3, r3, #31
 801e13a:	2b02      	cmp	r3, #2
 801e13c:	d01a      	beq.n	801e174 <USBD_LL_SetupStage+0x72>
 801e13e:	2b02      	cmp	r3, #2
 801e140:	d822      	bhi.n	801e188 <USBD_LL_SetupStage+0x86>
 801e142:	2b00      	cmp	r3, #0
 801e144:	d002      	beq.n	801e14c <USBD_LL_SetupStage+0x4a>
 801e146:	2b01      	cmp	r3, #1
 801e148:	d00a      	beq.n	801e160 <USBD_LL_SetupStage+0x5e>
 801e14a:	e01d      	b.n	801e188 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801e152:	4619      	mov	r1, r3
 801e154:	6878      	ldr	r0, [r7, #4]
 801e156:	f000 fb65 	bl	801e824 <USBD_StdDevReq>
 801e15a:	4603      	mov	r3, r0
 801e15c:	73fb      	strb	r3, [r7, #15]
      break;
 801e15e:	e020      	b.n	801e1a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801e166:	4619      	mov	r1, r3
 801e168:	6878      	ldr	r0, [r7, #4]
 801e16a:	f000 fbcd 	bl	801e908 <USBD_StdItfReq>
 801e16e:	4603      	mov	r3, r0
 801e170:	73fb      	strb	r3, [r7, #15]
      break;
 801e172:	e016      	b.n	801e1a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801e17a:	4619      	mov	r1, r3
 801e17c:	6878      	ldr	r0, [r7, #4]
 801e17e:	f000 fc2f 	bl	801e9e0 <USBD_StdEPReq>
 801e182:	4603      	mov	r3, r0
 801e184:	73fb      	strb	r3, [r7, #15]
      break;
 801e186:	e00c      	b.n	801e1a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801e18e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801e192:	b2db      	uxtb	r3, r3
 801e194:	4619      	mov	r1, r3
 801e196:	6878      	ldr	r0, [r7, #4]
 801e198:	f005 f990 	bl	80234bc <USBD_LL_StallEP>
 801e19c:	4603      	mov	r3, r0
 801e19e:	73fb      	strb	r3, [r7, #15]
      break;
 801e1a0:	bf00      	nop
  }

  return ret;
 801e1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	3710      	adds	r7, #16
 801e1a8:	46bd      	mov	sp, r7
 801e1aa:	bd80      	pop	{r7, pc}

0801e1ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801e1ac:	b580      	push	{r7, lr}
 801e1ae:	b086      	sub	sp, #24
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	60f8      	str	r0, [r7, #12]
 801e1b4:	460b      	mov	r3, r1
 801e1b6:	607a      	str	r2, [r7, #4]
 801e1b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801e1be:	7afb      	ldrb	r3, [r7, #11]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d16e      	bne.n	801e2a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801e1ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801e1d2:	2b03      	cmp	r3, #3
 801e1d4:	f040 8098 	bne.w	801e308 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801e1d8:	693b      	ldr	r3, [r7, #16]
 801e1da:	689a      	ldr	r2, [r3, #8]
 801e1dc:	693b      	ldr	r3, [r7, #16]
 801e1de:	68db      	ldr	r3, [r3, #12]
 801e1e0:	429a      	cmp	r2, r3
 801e1e2:	d913      	bls.n	801e20c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801e1e4:	693b      	ldr	r3, [r7, #16]
 801e1e6:	689a      	ldr	r2, [r3, #8]
 801e1e8:	693b      	ldr	r3, [r7, #16]
 801e1ea:	68db      	ldr	r3, [r3, #12]
 801e1ec:	1ad2      	subs	r2, r2, r3
 801e1ee:	693b      	ldr	r3, [r7, #16]
 801e1f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801e1f2:	693b      	ldr	r3, [r7, #16]
 801e1f4:	68da      	ldr	r2, [r3, #12]
 801e1f6:	693b      	ldr	r3, [r7, #16]
 801e1f8:	689b      	ldr	r3, [r3, #8]
 801e1fa:	4293      	cmp	r3, r2
 801e1fc:	bf28      	it	cs
 801e1fe:	4613      	movcs	r3, r2
 801e200:	461a      	mov	r2, r3
 801e202:	6879      	ldr	r1, [r7, #4]
 801e204:	68f8      	ldr	r0, [r7, #12]
 801e206:	f001 f98a 	bl	801f51e <USBD_CtlContinueRx>
 801e20a:	e07d      	b.n	801e308 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801e212:	f003 031f 	and.w	r3, r3, #31
 801e216:	2b02      	cmp	r3, #2
 801e218:	d014      	beq.n	801e244 <USBD_LL_DataOutStage+0x98>
 801e21a:	2b02      	cmp	r3, #2
 801e21c:	d81d      	bhi.n	801e25a <USBD_LL_DataOutStage+0xae>
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d002      	beq.n	801e228 <USBD_LL_DataOutStage+0x7c>
 801e222:	2b01      	cmp	r3, #1
 801e224:	d003      	beq.n	801e22e <USBD_LL_DataOutStage+0x82>
 801e226:	e018      	b.n	801e25a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801e228:	2300      	movs	r3, #0
 801e22a:	75bb      	strb	r3, [r7, #22]
            break;
 801e22c:	e018      	b.n	801e260 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801e234:	b2db      	uxtb	r3, r3
 801e236:	4619      	mov	r1, r3
 801e238:	68f8      	ldr	r0, [r7, #12]
 801e23a:	f000 fa64 	bl	801e706 <USBD_CoreFindIF>
 801e23e:	4603      	mov	r3, r0
 801e240:	75bb      	strb	r3, [r7, #22]
            break;
 801e242:	e00d      	b.n	801e260 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801e24a:	b2db      	uxtb	r3, r3
 801e24c:	4619      	mov	r1, r3
 801e24e:	68f8      	ldr	r0, [r7, #12]
 801e250:	f000 fa66 	bl	801e720 <USBD_CoreFindEP>
 801e254:	4603      	mov	r3, r0
 801e256:	75bb      	strb	r3, [r7, #22]
            break;
 801e258:	e002      	b.n	801e260 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801e25a:	2300      	movs	r3, #0
 801e25c:	75bb      	strb	r3, [r7, #22]
            break;
 801e25e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801e260:	7dbb      	ldrb	r3, [r7, #22]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d119      	bne.n	801e29a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e26c:	b2db      	uxtb	r3, r3
 801e26e:	2b03      	cmp	r3, #3
 801e270:	d113      	bne.n	801e29a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801e272:	7dba      	ldrb	r2, [r7, #22]
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	32ae      	adds	r2, #174	; 0xae
 801e278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e27c:	691b      	ldr	r3, [r3, #16]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d00b      	beq.n	801e29a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801e282:	7dba      	ldrb	r2, [r7, #22]
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801e28a:	7dba      	ldrb	r2, [r7, #22]
 801e28c:	68fb      	ldr	r3, [r7, #12]
 801e28e:	32ae      	adds	r2, #174	; 0xae
 801e290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e294:	691b      	ldr	r3, [r3, #16]
 801e296:	68f8      	ldr	r0, [r7, #12]
 801e298:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801e29a:	68f8      	ldr	r0, [r7, #12]
 801e29c:	f001 f950 	bl	801f540 <USBD_CtlSendStatus>
 801e2a0:	e032      	b.n	801e308 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801e2a2:	7afb      	ldrb	r3, [r7, #11]
 801e2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e2a8:	b2db      	uxtb	r3, r3
 801e2aa:	4619      	mov	r1, r3
 801e2ac:	68f8      	ldr	r0, [r7, #12]
 801e2ae:	f000 fa37 	bl	801e720 <USBD_CoreFindEP>
 801e2b2:	4603      	mov	r3, r0
 801e2b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801e2b6:	7dbb      	ldrb	r3, [r7, #22]
 801e2b8:	2bff      	cmp	r3, #255	; 0xff
 801e2ba:	d025      	beq.n	801e308 <USBD_LL_DataOutStage+0x15c>
 801e2bc:	7dbb      	ldrb	r3, [r7, #22]
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d122      	bne.n	801e308 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e2c8:	b2db      	uxtb	r3, r3
 801e2ca:	2b03      	cmp	r3, #3
 801e2cc:	d117      	bne.n	801e2fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801e2ce:	7dba      	ldrb	r2, [r7, #22]
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	32ae      	adds	r2, #174	; 0xae
 801e2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e2d8:	699b      	ldr	r3, [r3, #24]
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d00f      	beq.n	801e2fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801e2de:	7dba      	ldrb	r2, [r7, #22]
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801e2e6:	7dba      	ldrb	r2, [r7, #22]
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	32ae      	adds	r2, #174	; 0xae
 801e2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e2f0:	699b      	ldr	r3, [r3, #24]
 801e2f2:	7afa      	ldrb	r2, [r7, #11]
 801e2f4:	4611      	mov	r1, r2
 801e2f6:	68f8      	ldr	r0, [r7, #12]
 801e2f8:	4798      	blx	r3
 801e2fa:	4603      	mov	r3, r0
 801e2fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801e2fe:	7dfb      	ldrb	r3, [r7, #23]
 801e300:	2b00      	cmp	r3, #0
 801e302:	d001      	beq.n	801e308 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801e304:	7dfb      	ldrb	r3, [r7, #23]
 801e306:	e000      	b.n	801e30a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801e308:	2300      	movs	r3, #0
}
 801e30a:	4618      	mov	r0, r3
 801e30c:	3718      	adds	r7, #24
 801e30e:	46bd      	mov	sp, r7
 801e310:	bd80      	pop	{r7, pc}

0801e312 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801e312:	b580      	push	{r7, lr}
 801e314:	b086      	sub	sp, #24
 801e316:	af00      	add	r7, sp, #0
 801e318:	60f8      	str	r0, [r7, #12]
 801e31a:	460b      	mov	r3, r1
 801e31c:	607a      	str	r2, [r7, #4]
 801e31e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801e320:	7afb      	ldrb	r3, [r7, #11]
 801e322:	2b00      	cmp	r3, #0
 801e324:	d16f      	bne.n	801e406 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	3314      	adds	r3, #20
 801e32a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801e332:	2b02      	cmp	r3, #2
 801e334:	d15a      	bne.n	801e3ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801e336:	693b      	ldr	r3, [r7, #16]
 801e338:	689a      	ldr	r2, [r3, #8]
 801e33a:	693b      	ldr	r3, [r7, #16]
 801e33c:	68db      	ldr	r3, [r3, #12]
 801e33e:	429a      	cmp	r2, r3
 801e340:	d914      	bls.n	801e36c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801e342:	693b      	ldr	r3, [r7, #16]
 801e344:	689a      	ldr	r2, [r3, #8]
 801e346:	693b      	ldr	r3, [r7, #16]
 801e348:	68db      	ldr	r3, [r3, #12]
 801e34a:	1ad2      	subs	r2, r2, r3
 801e34c:	693b      	ldr	r3, [r7, #16]
 801e34e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801e350:	693b      	ldr	r3, [r7, #16]
 801e352:	689b      	ldr	r3, [r3, #8]
 801e354:	461a      	mov	r2, r3
 801e356:	6879      	ldr	r1, [r7, #4]
 801e358:	68f8      	ldr	r0, [r7, #12]
 801e35a:	f001 f8b2 	bl	801f4c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e35e:	2300      	movs	r3, #0
 801e360:	2200      	movs	r2, #0
 801e362:	2100      	movs	r1, #0
 801e364:	68f8      	ldr	r0, [r7, #12]
 801e366:	f005 f953 	bl	8023610 <USBD_LL_PrepareReceive>
 801e36a:	e03f      	b.n	801e3ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801e36c:	693b      	ldr	r3, [r7, #16]
 801e36e:	68da      	ldr	r2, [r3, #12]
 801e370:	693b      	ldr	r3, [r7, #16]
 801e372:	689b      	ldr	r3, [r3, #8]
 801e374:	429a      	cmp	r2, r3
 801e376:	d11c      	bne.n	801e3b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801e378:	693b      	ldr	r3, [r7, #16]
 801e37a:	685a      	ldr	r2, [r3, #4]
 801e37c:	693b      	ldr	r3, [r7, #16]
 801e37e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801e380:	429a      	cmp	r2, r3
 801e382:	d316      	bcc.n	801e3b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801e384:	693b      	ldr	r3, [r7, #16]
 801e386:	685a      	ldr	r2, [r3, #4]
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801e38e:	429a      	cmp	r2, r3
 801e390:	d20f      	bcs.n	801e3b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801e392:	2200      	movs	r2, #0
 801e394:	2100      	movs	r1, #0
 801e396:	68f8      	ldr	r0, [r7, #12]
 801e398:	f001 f893 	bl	801f4c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	2200      	movs	r2, #0
 801e3a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	2100      	movs	r1, #0
 801e3aa:	68f8      	ldr	r0, [r7, #12]
 801e3ac:	f005 f930 	bl	8023610 <USBD_LL_PrepareReceive>
 801e3b0:	e01c      	b.n	801e3ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e3b8:	b2db      	uxtb	r3, r3
 801e3ba:	2b03      	cmp	r3, #3
 801e3bc:	d10f      	bne.n	801e3de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e3c4:	68db      	ldr	r3, [r3, #12]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d009      	beq.n	801e3de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801e3ca:	68fb      	ldr	r3, [r7, #12]
 801e3cc:	2200      	movs	r2, #0
 801e3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e3d8:	68db      	ldr	r3, [r3, #12]
 801e3da:	68f8      	ldr	r0, [r7, #12]
 801e3dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801e3de:	2180      	movs	r1, #128	; 0x80
 801e3e0:	68f8      	ldr	r0, [r7, #12]
 801e3e2:	f005 f86b 	bl	80234bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801e3e6:	68f8      	ldr	r0, [r7, #12]
 801e3e8:	f001 f8bd 	bl	801f566 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d03a      	beq.n	801e46c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801e3f6:	68f8      	ldr	r0, [r7, #12]
 801e3f8:	f7ff fe42 	bl	801e080 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801e3fc:	68fb      	ldr	r3, [r7, #12]
 801e3fe:	2200      	movs	r2, #0
 801e400:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801e404:	e032      	b.n	801e46c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801e406:	7afb      	ldrb	r3, [r7, #11]
 801e408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e40c:	b2db      	uxtb	r3, r3
 801e40e:	4619      	mov	r1, r3
 801e410:	68f8      	ldr	r0, [r7, #12]
 801e412:	f000 f985 	bl	801e720 <USBD_CoreFindEP>
 801e416:	4603      	mov	r3, r0
 801e418:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801e41a:	7dfb      	ldrb	r3, [r7, #23]
 801e41c:	2bff      	cmp	r3, #255	; 0xff
 801e41e:	d025      	beq.n	801e46c <USBD_LL_DataInStage+0x15a>
 801e420:	7dfb      	ldrb	r3, [r7, #23]
 801e422:	2b00      	cmp	r3, #0
 801e424:	d122      	bne.n	801e46c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e42c:	b2db      	uxtb	r3, r3
 801e42e:	2b03      	cmp	r3, #3
 801e430:	d11c      	bne.n	801e46c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801e432:	7dfa      	ldrb	r2, [r7, #23]
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	32ae      	adds	r2, #174	; 0xae
 801e438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e43c:	695b      	ldr	r3, [r3, #20]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d014      	beq.n	801e46c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801e442:	7dfa      	ldrb	r2, [r7, #23]
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801e44a:	7dfa      	ldrb	r2, [r7, #23]
 801e44c:	68fb      	ldr	r3, [r7, #12]
 801e44e:	32ae      	adds	r2, #174	; 0xae
 801e450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e454:	695b      	ldr	r3, [r3, #20]
 801e456:	7afa      	ldrb	r2, [r7, #11]
 801e458:	4611      	mov	r1, r2
 801e45a:	68f8      	ldr	r0, [r7, #12]
 801e45c:	4798      	blx	r3
 801e45e:	4603      	mov	r3, r0
 801e460:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801e462:	7dbb      	ldrb	r3, [r7, #22]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d001      	beq.n	801e46c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801e468:	7dbb      	ldrb	r3, [r7, #22]
 801e46a:	e000      	b.n	801e46e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801e46c:	2300      	movs	r3, #0
}
 801e46e:	4618      	mov	r0, r3
 801e470:	3718      	adds	r7, #24
 801e472:	46bd      	mov	sp, r7
 801e474:	bd80      	pop	{r7, pc}

0801e476 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801e476:	b580      	push	{r7, lr}
 801e478:	b084      	sub	sp, #16
 801e47a:	af00      	add	r7, sp, #0
 801e47c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801e47e:	2300      	movs	r3, #0
 801e480:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	2201      	movs	r2, #1
 801e486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	2200      	movs	r2, #0
 801e48e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	2200      	movs	r2, #0
 801e496:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	2200      	movs	r2, #0
 801e49c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	2200      	movs	r2, #0
 801e4a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d014      	beq.n	801e4dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e4b8:	685b      	ldr	r3, [r3, #4]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d00e      	beq.n	801e4dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e4c4:	685b      	ldr	r3, [r3, #4]
 801e4c6:	687a      	ldr	r2, [r7, #4]
 801e4c8:	6852      	ldr	r2, [r2, #4]
 801e4ca:	b2d2      	uxtb	r2, r2
 801e4cc:	4611      	mov	r1, r2
 801e4ce:	6878      	ldr	r0, [r7, #4]
 801e4d0:	4798      	blx	r3
 801e4d2:	4603      	mov	r3, r0
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d001      	beq.n	801e4dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801e4d8:	2303      	movs	r3, #3
 801e4da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e4dc:	2340      	movs	r3, #64	; 0x40
 801e4de:	2200      	movs	r2, #0
 801e4e0:	2100      	movs	r1, #0
 801e4e2:	6878      	ldr	r0, [r7, #4]
 801e4e4:	f004 ffa5 	bl	8023432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	2201      	movs	r2, #1
 801e4ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	2240      	movs	r2, #64	; 0x40
 801e4f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e4f8:	2340      	movs	r3, #64	; 0x40
 801e4fa:	2200      	movs	r2, #0
 801e4fc:	2180      	movs	r1, #128	; 0x80
 801e4fe:	6878      	ldr	r0, [r7, #4]
 801e500:	f004 ff97 	bl	8023432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	2201      	movs	r2, #1
 801e508:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	2240      	movs	r2, #64	; 0x40
 801e50e:	621a      	str	r2, [r3, #32]

  return ret;
 801e510:	7bfb      	ldrb	r3, [r7, #15]
}
 801e512:	4618      	mov	r0, r3
 801e514:	3710      	adds	r7, #16
 801e516:	46bd      	mov	sp, r7
 801e518:	bd80      	pop	{r7, pc}

0801e51a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801e51a:	b480      	push	{r7}
 801e51c:	b083      	sub	sp, #12
 801e51e:	af00      	add	r7, sp, #0
 801e520:	6078      	str	r0, [r7, #4]
 801e522:	460b      	mov	r3, r1
 801e524:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	78fa      	ldrb	r2, [r7, #3]
 801e52a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801e52c:	2300      	movs	r3, #0
}
 801e52e:	4618      	mov	r0, r3
 801e530:	370c      	adds	r7, #12
 801e532:	46bd      	mov	sp, r7
 801e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e538:	4770      	bx	lr

0801e53a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801e53a:	b480      	push	{r7}
 801e53c:	b083      	sub	sp, #12
 801e53e:	af00      	add	r7, sp, #0
 801e540:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e548:	b2db      	uxtb	r3, r3
 801e54a:	2b04      	cmp	r3, #4
 801e54c:	d006      	beq.n	801e55c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e554:	b2da      	uxtb	r2, r3
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	2204      	movs	r2, #4
 801e560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801e564:	2300      	movs	r3, #0
}
 801e566:	4618      	mov	r0, r3
 801e568:	370c      	adds	r7, #12
 801e56a:	46bd      	mov	sp, r7
 801e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e570:	4770      	bx	lr

0801e572 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801e572:	b480      	push	{r7}
 801e574:	b083      	sub	sp, #12
 801e576:	af00      	add	r7, sp, #0
 801e578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e580:	b2db      	uxtb	r3, r3
 801e582:	2b04      	cmp	r3, #4
 801e584:	d106      	bne.n	801e594 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801e58c:	b2da      	uxtb	r2, r3
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801e594:	2300      	movs	r3, #0
}
 801e596:	4618      	mov	r0, r3
 801e598:	370c      	adds	r7, #12
 801e59a:	46bd      	mov	sp, r7
 801e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5a0:	4770      	bx	lr

0801e5a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801e5a2:	b580      	push	{r7, lr}
 801e5a4:	b082      	sub	sp, #8
 801e5a6:	af00      	add	r7, sp, #0
 801e5a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e5b0:	b2db      	uxtb	r3, r3
 801e5b2:	2b03      	cmp	r3, #3
 801e5b4:	d110      	bne.n	801e5d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d00b      	beq.n	801e5d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e5c6:	69db      	ldr	r3, [r3, #28]
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d005      	beq.n	801e5d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e5d2:	69db      	ldr	r3, [r3, #28]
 801e5d4:	6878      	ldr	r0, [r7, #4]
 801e5d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801e5d8:	2300      	movs	r3, #0
}
 801e5da:	4618      	mov	r0, r3
 801e5dc:	3708      	adds	r7, #8
 801e5de:	46bd      	mov	sp, r7
 801e5e0:	bd80      	pop	{r7, pc}

0801e5e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801e5e2:	b580      	push	{r7, lr}
 801e5e4:	b082      	sub	sp, #8
 801e5e6:	af00      	add	r7, sp, #0
 801e5e8:	6078      	str	r0, [r7, #4]
 801e5ea:	460b      	mov	r3, r1
 801e5ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	32ae      	adds	r2, #174	; 0xae
 801e5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d101      	bne.n	801e604 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801e600:	2303      	movs	r3, #3
 801e602:	e01c      	b.n	801e63e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e60a:	b2db      	uxtb	r3, r3
 801e60c:	2b03      	cmp	r3, #3
 801e60e:	d115      	bne.n	801e63c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	32ae      	adds	r2, #174	; 0xae
 801e61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e61e:	6a1b      	ldr	r3, [r3, #32]
 801e620:	2b00      	cmp	r3, #0
 801e622:	d00b      	beq.n	801e63c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	32ae      	adds	r2, #174	; 0xae
 801e62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e632:	6a1b      	ldr	r3, [r3, #32]
 801e634:	78fa      	ldrb	r2, [r7, #3]
 801e636:	4611      	mov	r1, r2
 801e638:	6878      	ldr	r0, [r7, #4]
 801e63a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801e63c:	2300      	movs	r3, #0
}
 801e63e:	4618      	mov	r0, r3
 801e640:	3708      	adds	r7, #8
 801e642:	46bd      	mov	sp, r7
 801e644:	bd80      	pop	{r7, pc}

0801e646 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801e646:	b580      	push	{r7, lr}
 801e648:	b082      	sub	sp, #8
 801e64a:	af00      	add	r7, sp, #0
 801e64c:	6078      	str	r0, [r7, #4]
 801e64e:	460b      	mov	r3, r1
 801e650:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	32ae      	adds	r2, #174	; 0xae
 801e65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d101      	bne.n	801e668 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801e664:	2303      	movs	r3, #3
 801e666:	e01c      	b.n	801e6a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e66e:	b2db      	uxtb	r3, r3
 801e670:	2b03      	cmp	r3, #3
 801e672:	d115      	bne.n	801e6a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	32ae      	adds	r2, #174	; 0xae
 801e67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e684:	2b00      	cmp	r3, #0
 801e686:	d00b      	beq.n	801e6a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	32ae      	adds	r2, #174	; 0xae
 801e692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e698:	78fa      	ldrb	r2, [r7, #3]
 801e69a:	4611      	mov	r1, r2
 801e69c:	6878      	ldr	r0, [r7, #4]
 801e69e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801e6a0:	2300      	movs	r3, #0
}
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	3708      	adds	r7, #8
 801e6a6:	46bd      	mov	sp, r7
 801e6a8:	bd80      	pop	{r7, pc}

0801e6aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801e6aa:	b480      	push	{r7}
 801e6ac:	b083      	sub	sp, #12
 801e6ae:	af00      	add	r7, sp, #0
 801e6b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801e6b2:	2300      	movs	r3, #0
}
 801e6b4:	4618      	mov	r0, r3
 801e6b6:	370c      	adds	r7, #12
 801e6b8:	46bd      	mov	sp, r7
 801e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6be:	4770      	bx	lr

0801e6c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801e6c0:	b580      	push	{r7, lr}
 801e6c2:	b084      	sub	sp, #16
 801e6c4:	af00      	add	r7, sp, #0
 801e6c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	2201      	movs	r2, #1
 801e6d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d00e      	beq.n	801e6fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801e6e4:	685b      	ldr	r3, [r3, #4]
 801e6e6:	687a      	ldr	r2, [r7, #4]
 801e6e8:	6852      	ldr	r2, [r2, #4]
 801e6ea:	b2d2      	uxtb	r2, r2
 801e6ec:	4611      	mov	r1, r2
 801e6ee:	6878      	ldr	r0, [r7, #4]
 801e6f0:	4798      	blx	r3
 801e6f2:	4603      	mov	r3, r0
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d001      	beq.n	801e6fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801e6f8:	2303      	movs	r3, #3
 801e6fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801e6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801e6fe:	4618      	mov	r0, r3
 801e700:	3710      	adds	r7, #16
 801e702:	46bd      	mov	sp, r7
 801e704:	bd80      	pop	{r7, pc}

0801e706 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801e706:	b480      	push	{r7}
 801e708:	b083      	sub	sp, #12
 801e70a:	af00      	add	r7, sp, #0
 801e70c:	6078      	str	r0, [r7, #4]
 801e70e:	460b      	mov	r3, r1
 801e710:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801e712:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801e714:	4618      	mov	r0, r3
 801e716:	370c      	adds	r7, #12
 801e718:	46bd      	mov	sp, r7
 801e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e71e:	4770      	bx	lr

0801e720 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801e720:	b480      	push	{r7}
 801e722:	b083      	sub	sp, #12
 801e724:	af00      	add	r7, sp, #0
 801e726:	6078      	str	r0, [r7, #4]
 801e728:	460b      	mov	r3, r1
 801e72a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801e72c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801e72e:	4618      	mov	r0, r3
 801e730:	370c      	adds	r7, #12
 801e732:	46bd      	mov	sp, r7
 801e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e738:	4770      	bx	lr

0801e73a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801e73a:	b580      	push	{r7, lr}
 801e73c:	b086      	sub	sp, #24
 801e73e:	af00      	add	r7, sp, #0
 801e740:	6078      	str	r0, [r7, #4]
 801e742:	460b      	mov	r3, r1
 801e744:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801e74e:	2300      	movs	r3, #0
 801e750:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	885b      	ldrh	r3, [r3, #2]
 801e756:	b29a      	uxth	r2, r3
 801e758:	68fb      	ldr	r3, [r7, #12]
 801e75a:	781b      	ldrb	r3, [r3, #0]
 801e75c:	b29b      	uxth	r3, r3
 801e75e:	429a      	cmp	r2, r3
 801e760:	d920      	bls.n	801e7a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	781b      	ldrb	r3, [r3, #0]
 801e766:	b29b      	uxth	r3, r3
 801e768:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801e76a:	e013      	b.n	801e794 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801e76c:	f107 030a 	add.w	r3, r7, #10
 801e770:	4619      	mov	r1, r3
 801e772:	6978      	ldr	r0, [r7, #20]
 801e774:	f000 f81b 	bl	801e7ae <USBD_GetNextDesc>
 801e778:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801e77a:	697b      	ldr	r3, [r7, #20]
 801e77c:	785b      	ldrb	r3, [r3, #1]
 801e77e:	2b05      	cmp	r3, #5
 801e780:	d108      	bne.n	801e794 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801e782:	697b      	ldr	r3, [r7, #20]
 801e784:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801e786:	693b      	ldr	r3, [r7, #16]
 801e788:	789b      	ldrb	r3, [r3, #2]
 801e78a:	78fa      	ldrb	r2, [r7, #3]
 801e78c:	429a      	cmp	r2, r3
 801e78e:	d008      	beq.n	801e7a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801e790:	2300      	movs	r3, #0
 801e792:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	885b      	ldrh	r3, [r3, #2]
 801e798:	b29a      	uxth	r2, r3
 801e79a:	897b      	ldrh	r3, [r7, #10]
 801e79c:	429a      	cmp	r2, r3
 801e79e:	d8e5      	bhi.n	801e76c <USBD_GetEpDesc+0x32>
 801e7a0:	e000      	b.n	801e7a4 <USBD_GetEpDesc+0x6a>
          break;
 801e7a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801e7a4:	693b      	ldr	r3, [r7, #16]
}
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	3718      	adds	r7, #24
 801e7aa:	46bd      	mov	sp, r7
 801e7ac:	bd80      	pop	{r7, pc}

0801e7ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801e7ae:	b480      	push	{r7}
 801e7b0:	b085      	sub	sp, #20
 801e7b2:	af00      	add	r7, sp, #0
 801e7b4:	6078      	str	r0, [r7, #4]
 801e7b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801e7bc:	683b      	ldr	r3, [r7, #0]
 801e7be:	881a      	ldrh	r2, [r3, #0]
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	781b      	ldrb	r3, [r3, #0]
 801e7c4:	b29b      	uxth	r3, r3
 801e7c6:	4413      	add	r3, r2
 801e7c8:	b29a      	uxth	r2, r3
 801e7ca:	683b      	ldr	r3, [r7, #0]
 801e7cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801e7ce:	68fb      	ldr	r3, [r7, #12]
 801e7d0:	781b      	ldrb	r3, [r3, #0]
 801e7d2:	461a      	mov	r2, r3
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	4413      	add	r3, r2
 801e7d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801e7da:	68fb      	ldr	r3, [r7, #12]
}
 801e7dc:	4618      	mov	r0, r3
 801e7de:	3714      	adds	r7, #20
 801e7e0:	46bd      	mov	sp, r7
 801e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7e6:	4770      	bx	lr

0801e7e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801e7e8:	b480      	push	{r7}
 801e7ea:	b087      	sub	sp, #28
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801e7f4:	697b      	ldr	r3, [r7, #20]
 801e7f6:	781b      	ldrb	r3, [r3, #0]
 801e7f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801e7fa:	697b      	ldr	r3, [r7, #20]
 801e7fc:	3301      	adds	r3, #1
 801e7fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801e800:	697b      	ldr	r3, [r7, #20]
 801e802:	781b      	ldrb	r3, [r3, #0]
 801e804:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801e806:	8a3b      	ldrh	r3, [r7, #16]
 801e808:	021b      	lsls	r3, r3, #8
 801e80a:	b21a      	sxth	r2, r3
 801e80c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e810:	4313      	orrs	r3, r2
 801e812:	b21b      	sxth	r3, r3
 801e814:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801e816:	89fb      	ldrh	r3, [r7, #14]
}
 801e818:	4618      	mov	r0, r3
 801e81a:	371c      	adds	r7, #28
 801e81c:	46bd      	mov	sp, r7
 801e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e822:	4770      	bx	lr

0801e824 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e824:	b580      	push	{r7, lr}
 801e826:	b084      	sub	sp, #16
 801e828:	af00      	add	r7, sp, #0
 801e82a:	6078      	str	r0, [r7, #4]
 801e82c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e82e:	2300      	movs	r3, #0
 801e830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e832:	683b      	ldr	r3, [r7, #0]
 801e834:	781b      	ldrb	r3, [r3, #0]
 801e836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e83a:	2b40      	cmp	r3, #64	; 0x40
 801e83c:	d005      	beq.n	801e84a <USBD_StdDevReq+0x26>
 801e83e:	2b40      	cmp	r3, #64	; 0x40
 801e840:	d857      	bhi.n	801e8f2 <USBD_StdDevReq+0xce>
 801e842:	2b00      	cmp	r3, #0
 801e844:	d00f      	beq.n	801e866 <USBD_StdDevReq+0x42>
 801e846:	2b20      	cmp	r3, #32
 801e848:	d153      	bne.n	801e8f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	32ae      	adds	r2, #174	; 0xae
 801e854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e858:	689b      	ldr	r3, [r3, #8]
 801e85a:	6839      	ldr	r1, [r7, #0]
 801e85c:	6878      	ldr	r0, [r7, #4]
 801e85e:	4798      	blx	r3
 801e860:	4603      	mov	r3, r0
 801e862:	73fb      	strb	r3, [r7, #15]
      break;
 801e864:	e04a      	b.n	801e8fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801e866:	683b      	ldr	r3, [r7, #0]
 801e868:	785b      	ldrb	r3, [r3, #1]
 801e86a:	2b09      	cmp	r3, #9
 801e86c:	d83b      	bhi.n	801e8e6 <USBD_StdDevReq+0xc2>
 801e86e:	a201      	add	r2, pc, #4	; (adr r2, 801e874 <USBD_StdDevReq+0x50>)
 801e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e874:	0801e8c9 	.word	0x0801e8c9
 801e878:	0801e8dd 	.word	0x0801e8dd
 801e87c:	0801e8e7 	.word	0x0801e8e7
 801e880:	0801e8d3 	.word	0x0801e8d3
 801e884:	0801e8e7 	.word	0x0801e8e7
 801e888:	0801e8a7 	.word	0x0801e8a7
 801e88c:	0801e89d 	.word	0x0801e89d
 801e890:	0801e8e7 	.word	0x0801e8e7
 801e894:	0801e8bf 	.word	0x0801e8bf
 801e898:	0801e8b1 	.word	0x0801e8b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801e89c:	6839      	ldr	r1, [r7, #0]
 801e89e:	6878      	ldr	r0, [r7, #4]
 801e8a0:	f000 fa3c 	bl	801ed1c <USBD_GetDescriptor>
          break;
 801e8a4:	e024      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801e8a6:	6839      	ldr	r1, [r7, #0]
 801e8a8:	6878      	ldr	r0, [r7, #4]
 801e8aa:	f000 fba1 	bl	801eff0 <USBD_SetAddress>
          break;
 801e8ae:	e01f      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801e8b0:	6839      	ldr	r1, [r7, #0]
 801e8b2:	6878      	ldr	r0, [r7, #4]
 801e8b4:	f000 fbe0 	bl	801f078 <USBD_SetConfig>
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	73fb      	strb	r3, [r7, #15]
          break;
 801e8bc:	e018      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801e8be:	6839      	ldr	r1, [r7, #0]
 801e8c0:	6878      	ldr	r0, [r7, #4]
 801e8c2:	f000 fc83 	bl	801f1cc <USBD_GetConfig>
          break;
 801e8c6:	e013      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801e8c8:	6839      	ldr	r1, [r7, #0]
 801e8ca:	6878      	ldr	r0, [r7, #4]
 801e8cc:	f000 fcb4 	bl	801f238 <USBD_GetStatus>
          break;
 801e8d0:	e00e      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801e8d2:	6839      	ldr	r1, [r7, #0]
 801e8d4:	6878      	ldr	r0, [r7, #4]
 801e8d6:	f000 fce3 	bl	801f2a0 <USBD_SetFeature>
          break;
 801e8da:	e009      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801e8dc:	6839      	ldr	r1, [r7, #0]
 801e8de:	6878      	ldr	r0, [r7, #4]
 801e8e0:	f000 fd07 	bl	801f2f2 <USBD_ClrFeature>
          break;
 801e8e4:	e004      	b.n	801e8f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801e8e6:	6839      	ldr	r1, [r7, #0]
 801e8e8:	6878      	ldr	r0, [r7, #4]
 801e8ea:	f000 fd5e 	bl	801f3aa <USBD_CtlError>
          break;
 801e8ee:	bf00      	nop
      }
      break;
 801e8f0:	e004      	b.n	801e8fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801e8f2:	6839      	ldr	r1, [r7, #0]
 801e8f4:	6878      	ldr	r0, [r7, #4]
 801e8f6:	f000 fd58 	bl	801f3aa <USBD_CtlError>
      break;
 801e8fa:	bf00      	nop
  }

  return ret;
 801e8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801e8fe:	4618      	mov	r0, r3
 801e900:	3710      	adds	r7, #16
 801e902:	46bd      	mov	sp, r7
 801e904:	bd80      	pop	{r7, pc}
 801e906:	bf00      	nop

0801e908 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e908:	b580      	push	{r7, lr}
 801e90a:	b084      	sub	sp, #16
 801e90c:	af00      	add	r7, sp, #0
 801e90e:	6078      	str	r0, [r7, #4]
 801e910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e912:	2300      	movs	r3, #0
 801e914:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e916:	683b      	ldr	r3, [r7, #0]
 801e918:	781b      	ldrb	r3, [r3, #0]
 801e91a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e91e:	2b40      	cmp	r3, #64	; 0x40
 801e920:	d005      	beq.n	801e92e <USBD_StdItfReq+0x26>
 801e922:	2b40      	cmp	r3, #64	; 0x40
 801e924:	d852      	bhi.n	801e9cc <USBD_StdItfReq+0xc4>
 801e926:	2b00      	cmp	r3, #0
 801e928:	d001      	beq.n	801e92e <USBD_StdItfReq+0x26>
 801e92a:	2b20      	cmp	r3, #32
 801e92c:	d14e      	bne.n	801e9cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801e934:	b2db      	uxtb	r3, r3
 801e936:	3b01      	subs	r3, #1
 801e938:	2b02      	cmp	r3, #2
 801e93a:	d840      	bhi.n	801e9be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	889b      	ldrh	r3, [r3, #4]
 801e940:	b2db      	uxtb	r3, r3
 801e942:	2b01      	cmp	r3, #1
 801e944:	d836      	bhi.n	801e9b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801e946:	683b      	ldr	r3, [r7, #0]
 801e948:	889b      	ldrh	r3, [r3, #4]
 801e94a:	b2db      	uxtb	r3, r3
 801e94c:	4619      	mov	r1, r3
 801e94e:	6878      	ldr	r0, [r7, #4]
 801e950:	f7ff fed9 	bl	801e706 <USBD_CoreFindIF>
 801e954:	4603      	mov	r3, r0
 801e956:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801e958:	7bbb      	ldrb	r3, [r7, #14]
 801e95a:	2bff      	cmp	r3, #255	; 0xff
 801e95c:	d01d      	beq.n	801e99a <USBD_StdItfReq+0x92>
 801e95e:	7bbb      	ldrb	r3, [r7, #14]
 801e960:	2b00      	cmp	r3, #0
 801e962:	d11a      	bne.n	801e99a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801e964:	7bba      	ldrb	r2, [r7, #14]
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	32ae      	adds	r2, #174	; 0xae
 801e96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e96e:	689b      	ldr	r3, [r3, #8]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d00f      	beq.n	801e994 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801e974:	7bba      	ldrb	r2, [r7, #14]
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801e97c:	7bba      	ldrb	r2, [r7, #14]
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	32ae      	adds	r2, #174	; 0xae
 801e982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e986:	689b      	ldr	r3, [r3, #8]
 801e988:	6839      	ldr	r1, [r7, #0]
 801e98a:	6878      	ldr	r0, [r7, #4]
 801e98c:	4798      	blx	r3
 801e98e:	4603      	mov	r3, r0
 801e990:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801e992:	e004      	b.n	801e99e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801e994:	2303      	movs	r3, #3
 801e996:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801e998:	e001      	b.n	801e99e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801e99a:	2303      	movs	r3, #3
 801e99c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801e99e:	683b      	ldr	r3, [r7, #0]
 801e9a0:	88db      	ldrh	r3, [r3, #6]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d110      	bne.n	801e9c8 <USBD_StdItfReq+0xc0>
 801e9a6:	7bfb      	ldrb	r3, [r7, #15]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d10d      	bne.n	801e9c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801e9ac:	6878      	ldr	r0, [r7, #4]
 801e9ae:	f000 fdc7 	bl	801f540 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801e9b2:	e009      	b.n	801e9c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801e9b4:	6839      	ldr	r1, [r7, #0]
 801e9b6:	6878      	ldr	r0, [r7, #4]
 801e9b8:	f000 fcf7 	bl	801f3aa <USBD_CtlError>
          break;
 801e9bc:	e004      	b.n	801e9c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801e9be:	6839      	ldr	r1, [r7, #0]
 801e9c0:	6878      	ldr	r0, [r7, #4]
 801e9c2:	f000 fcf2 	bl	801f3aa <USBD_CtlError>
          break;
 801e9c6:	e000      	b.n	801e9ca <USBD_StdItfReq+0xc2>
          break;
 801e9c8:	bf00      	nop
      }
      break;
 801e9ca:	e004      	b.n	801e9d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801e9cc:	6839      	ldr	r1, [r7, #0]
 801e9ce:	6878      	ldr	r0, [r7, #4]
 801e9d0:	f000 fceb 	bl	801f3aa <USBD_CtlError>
      break;
 801e9d4:	bf00      	nop
  }

  return ret;
 801e9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9d8:	4618      	mov	r0, r3
 801e9da:	3710      	adds	r7, #16
 801e9dc:	46bd      	mov	sp, r7
 801e9de:	bd80      	pop	{r7, pc}

0801e9e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e9e0:	b580      	push	{r7, lr}
 801e9e2:	b084      	sub	sp, #16
 801e9e4:	af00      	add	r7, sp, #0
 801e9e6:	6078      	str	r0, [r7, #4]
 801e9e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801e9ee:	683b      	ldr	r3, [r7, #0]
 801e9f0:	889b      	ldrh	r3, [r3, #4]
 801e9f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e9f4:	683b      	ldr	r3, [r7, #0]
 801e9f6:	781b      	ldrb	r3, [r3, #0]
 801e9f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e9fc:	2b40      	cmp	r3, #64	; 0x40
 801e9fe:	d007      	beq.n	801ea10 <USBD_StdEPReq+0x30>
 801ea00:	2b40      	cmp	r3, #64	; 0x40
 801ea02:	f200 817f 	bhi.w	801ed04 <USBD_StdEPReq+0x324>
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d02a      	beq.n	801ea60 <USBD_StdEPReq+0x80>
 801ea0a:	2b20      	cmp	r3, #32
 801ea0c:	f040 817a 	bne.w	801ed04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801ea10:	7bbb      	ldrb	r3, [r7, #14]
 801ea12:	4619      	mov	r1, r3
 801ea14:	6878      	ldr	r0, [r7, #4]
 801ea16:	f7ff fe83 	bl	801e720 <USBD_CoreFindEP>
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801ea1e:	7b7b      	ldrb	r3, [r7, #13]
 801ea20:	2bff      	cmp	r3, #255	; 0xff
 801ea22:	f000 8174 	beq.w	801ed0e <USBD_StdEPReq+0x32e>
 801ea26:	7b7b      	ldrb	r3, [r7, #13]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	f040 8170 	bne.w	801ed0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801ea2e:	7b7a      	ldrb	r2, [r7, #13]
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801ea36:	7b7a      	ldrb	r2, [r7, #13]
 801ea38:	687b      	ldr	r3, [r7, #4]
 801ea3a:	32ae      	adds	r2, #174	; 0xae
 801ea3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ea40:	689b      	ldr	r3, [r3, #8]
 801ea42:	2b00      	cmp	r3, #0
 801ea44:	f000 8163 	beq.w	801ed0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801ea48:	7b7a      	ldrb	r2, [r7, #13]
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	32ae      	adds	r2, #174	; 0xae
 801ea4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ea52:	689b      	ldr	r3, [r3, #8]
 801ea54:	6839      	ldr	r1, [r7, #0]
 801ea56:	6878      	ldr	r0, [r7, #4]
 801ea58:	4798      	blx	r3
 801ea5a:	4603      	mov	r3, r0
 801ea5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801ea5e:	e156      	b.n	801ed0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ea60:	683b      	ldr	r3, [r7, #0]
 801ea62:	785b      	ldrb	r3, [r3, #1]
 801ea64:	2b03      	cmp	r3, #3
 801ea66:	d008      	beq.n	801ea7a <USBD_StdEPReq+0x9a>
 801ea68:	2b03      	cmp	r3, #3
 801ea6a:	f300 8145 	bgt.w	801ecf8 <USBD_StdEPReq+0x318>
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	f000 809b 	beq.w	801ebaa <USBD_StdEPReq+0x1ca>
 801ea74:	2b01      	cmp	r3, #1
 801ea76:	d03c      	beq.n	801eaf2 <USBD_StdEPReq+0x112>
 801ea78:	e13e      	b.n	801ecf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ea80:	b2db      	uxtb	r3, r3
 801ea82:	2b02      	cmp	r3, #2
 801ea84:	d002      	beq.n	801ea8c <USBD_StdEPReq+0xac>
 801ea86:	2b03      	cmp	r3, #3
 801ea88:	d016      	beq.n	801eab8 <USBD_StdEPReq+0xd8>
 801ea8a:	e02c      	b.n	801eae6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ea8c:	7bbb      	ldrb	r3, [r7, #14]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d00d      	beq.n	801eaae <USBD_StdEPReq+0xce>
 801ea92:	7bbb      	ldrb	r3, [r7, #14]
 801ea94:	2b80      	cmp	r3, #128	; 0x80
 801ea96:	d00a      	beq.n	801eaae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801ea98:	7bbb      	ldrb	r3, [r7, #14]
 801ea9a:	4619      	mov	r1, r3
 801ea9c:	6878      	ldr	r0, [r7, #4]
 801ea9e:	f004 fd0d 	bl	80234bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801eaa2:	2180      	movs	r1, #128	; 0x80
 801eaa4:	6878      	ldr	r0, [r7, #4]
 801eaa6:	f004 fd09 	bl	80234bc <USBD_LL_StallEP>
 801eaaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801eaac:	e020      	b.n	801eaf0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801eaae:	6839      	ldr	r1, [r7, #0]
 801eab0:	6878      	ldr	r0, [r7, #4]
 801eab2:	f000 fc7a 	bl	801f3aa <USBD_CtlError>
              break;
 801eab6:	e01b      	b.n	801eaf0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801eab8:	683b      	ldr	r3, [r7, #0]
 801eaba:	885b      	ldrh	r3, [r3, #2]
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	d10e      	bne.n	801eade <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801eac0:	7bbb      	ldrb	r3, [r7, #14]
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d00b      	beq.n	801eade <USBD_StdEPReq+0xfe>
 801eac6:	7bbb      	ldrb	r3, [r7, #14]
 801eac8:	2b80      	cmp	r3, #128	; 0x80
 801eaca:	d008      	beq.n	801eade <USBD_StdEPReq+0xfe>
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	88db      	ldrh	r3, [r3, #6]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d104      	bne.n	801eade <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801ead4:	7bbb      	ldrb	r3, [r7, #14]
 801ead6:	4619      	mov	r1, r3
 801ead8:	6878      	ldr	r0, [r7, #4]
 801eada:	f004 fcef 	bl	80234bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801eade:	6878      	ldr	r0, [r7, #4]
 801eae0:	f000 fd2e 	bl	801f540 <USBD_CtlSendStatus>

              break;
 801eae4:	e004      	b.n	801eaf0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801eae6:	6839      	ldr	r1, [r7, #0]
 801eae8:	6878      	ldr	r0, [r7, #4]
 801eaea:	f000 fc5e 	bl	801f3aa <USBD_CtlError>
              break;
 801eaee:	bf00      	nop
          }
          break;
 801eaf0:	e107      	b.n	801ed02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801eaf8:	b2db      	uxtb	r3, r3
 801eafa:	2b02      	cmp	r3, #2
 801eafc:	d002      	beq.n	801eb04 <USBD_StdEPReq+0x124>
 801eafe:	2b03      	cmp	r3, #3
 801eb00:	d016      	beq.n	801eb30 <USBD_StdEPReq+0x150>
 801eb02:	e04b      	b.n	801eb9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801eb04:	7bbb      	ldrb	r3, [r7, #14]
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d00d      	beq.n	801eb26 <USBD_StdEPReq+0x146>
 801eb0a:	7bbb      	ldrb	r3, [r7, #14]
 801eb0c:	2b80      	cmp	r3, #128	; 0x80
 801eb0e:	d00a      	beq.n	801eb26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801eb10:	7bbb      	ldrb	r3, [r7, #14]
 801eb12:	4619      	mov	r1, r3
 801eb14:	6878      	ldr	r0, [r7, #4]
 801eb16:	f004 fcd1 	bl	80234bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801eb1a:	2180      	movs	r1, #128	; 0x80
 801eb1c:	6878      	ldr	r0, [r7, #4]
 801eb1e:	f004 fccd 	bl	80234bc <USBD_LL_StallEP>
 801eb22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801eb24:	e040      	b.n	801eba8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801eb26:	6839      	ldr	r1, [r7, #0]
 801eb28:	6878      	ldr	r0, [r7, #4]
 801eb2a:	f000 fc3e 	bl	801f3aa <USBD_CtlError>
              break;
 801eb2e:	e03b      	b.n	801eba8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801eb30:	683b      	ldr	r3, [r7, #0]
 801eb32:	885b      	ldrh	r3, [r3, #2]
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	d136      	bne.n	801eba6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801eb38:	7bbb      	ldrb	r3, [r7, #14]
 801eb3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d004      	beq.n	801eb4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801eb42:	7bbb      	ldrb	r3, [r7, #14]
 801eb44:	4619      	mov	r1, r3
 801eb46:	6878      	ldr	r0, [r7, #4]
 801eb48:	f004 fcd7 	bl	80234fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801eb4c:	6878      	ldr	r0, [r7, #4]
 801eb4e:	f000 fcf7 	bl	801f540 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801eb52:	7bbb      	ldrb	r3, [r7, #14]
 801eb54:	4619      	mov	r1, r3
 801eb56:	6878      	ldr	r0, [r7, #4]
 801eb58:	f7ff fde2 	bl	801e720 <USBD_CoreFindEP>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801eb60:	7b7b      	ldrb	r3, [r7, #13]
 801eb62:	2bff      	cmp	r3, #255	; 0xff
 801eb64:	d01f      	beq.n	801eba6 <USBD_StdEPReq+0x1c6>
 801eb66:	7b7b      	ldrb	r3, [r7, #13]
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	d11c      	bne.n	801eba6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801eb6c:	7b7a      	ldrb	r2, [r7, #13]
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801eb74:	7b7a      	ldrb	r2, [r7, #13]
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	32ae      	adds	r2, #174	; 0xae
 801eb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eb7e:	689b      	ldr	r3, [r3, #8]
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d010      	beq.n	801eba6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801eb84:	7b7a      	ldrb	r2, [r7, #13]
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	32ae      	adds	r2, #174	; 0xae
 801eb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eb8e:	689b      	ldr	r3, [r3, #8]
 801eb90:	6839      	ldr	r1, [r7, #0]
 801eb92:	6878      	ldr	r0, [r7, #4]
 801eb94:	4798      	blx	r3
 801eb96:	4603      	mov	r3, r0
 801eb98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801eb9a:	e004      	b.n	801eba6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801eb9c:	6839      	ldr	r1, [r7, #0]
 801eb9e:	6878      	ldr	r0, [r7, #4]
 801eba0:	f000 fc03 	bl	801f3aa <USBD_CtlError>
              break;
 801eba4:	e000      	b.n	801eba8 <USBD_StdEPReq+0x1c8>
              break;
 801eba6:	bf00      	nop
          }
          break;
 801eba8:	e0ab      	b.n	801ed02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	2b02      	cmp	r3, #2
 801ebb4:	d002      	beq.n	801ebbc <USBD_StdEPReq+0x1dc>
 801ebb6:	2b03      	cmp	r3, #3
 801ebb8:	d032      	beq.n	801ec20 <USBD_StdEPReq+0x240>
 801ebba:	e097      	b.n	801ecec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ebbc:	7bbb      	ldrb	r3, [r7, #14]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d007      	beq.n	801ebd2 <USBD_StdEPReq+0x1f2>
 801ebc2:	7bbb      	ldrb	r3, [r7, #14]
 801ebc4:	2b80      	cmp	r3, #128	; 0x80
 801ebc6:	d004      	beq.n	801ebd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801ebc8:	6839      	ldr	r1, [r7, #0]
 801ebca:	6878      	ldr	r0, [r7, #4]
 801ebcc:	f000 fbed 	bl	801f3aa <USBD_CtlError>
                break;
 801ebd0:	e091      	b.n	801ecf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ebd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	da0b      	bge.n	801ebf2 <USBD_StdEPReq+0x212>
 801ebda:	7bbb      	ldrb	r3, [r7, #14]
 801ebdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ebe0:	4613      	mov	r3, r2
 801ebe2:	009b      	lsls	r3, r3, #2
 801ebe4:	4413      	add	r3, r2
 801ebe6:	009b      	lsls	r3, r3, #2
 801ebe8:	3310      	adds	r3, #16
 801ebea:	687a      	ldr	r2, [r7, #4]
 801ebec:	4413      	add	r3, r2
 801ebee:	3304      	adds	r3, #4
 801ebf0:	e00b      	b.n	801ec0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ebf2:	7bbb      	ldrb	r3, [r7, #14]
 801ebf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ebf8:	4613      	mov	r3, r2
 801ebfa:	009b      	lsls	r3, r3, #2
 801ebfc:	4413      	add	r3, r2
 801ebfe:	009b      	lsls	r3, r3, #2
 801ec00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801ec04:	687a      	ldr	r2, [r7, #4]
 801ec06:	4413      	add	r3, r2
 801ec08:	3304      	adds	r3, #4
 801ec0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801ec0c:	68bb      	ldr	r3, [r7, #8]
 801ec0e:	2200      	movs	r2, #0
 801ec10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801ec12:	68bb      	ldr	r3, [r7, #8]
 801ec14:	2202      	movs	r2, #2
 801ec16:	4619      	mov	r1, r3
 801ec18:	6878      	ldr	r0, [r7, #4]
 801ec1a:	f000 fc37 	bl	801f48c <USBD_CtlSendData>
              break;
 801ec1e:	e06a      	b.n	801ecf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801ec20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	da11      	bge.n	801ec4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ec28:	7bbb      	ldrb	r3, [r7, #14]
 801ec2a:	f003 020f 	and.w	r2, r3, #15
 801ec2e:	6879      	ldr	r1, [r7, #4]
 801ec30:	4613      	mov	r3, r2
 801ec32:	009b      	lsls	r3, r3, #2
 801ec34:	4413      	add	r3, r2
 801ec36:	009b      	lsls	r3, r3, #2
 801ec38:	440b      	add	r3, r1
 801ec3a:	3324      	adds	r3, #36	; 0x24
 801ec3c:	881b      	ldrh	r3, [r3, #0]
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d117      	bne.n	801ec72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801ec42:	6839      	ldr	r1, [r7, #0]
 801ec44:	6878      	ldr	r0, [r7, #4]
 801ec46:	f000 fbb0 	bl	801f3aa <USBD_CtlError>
                  break;
 801ec4a:	e054      	b.n	801ecf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801ec4c:	7bbb      	ldrb	r3, [r7, #14]
 801ec4e:	f003 020f 	and.w	r2, r3, #15
 801ec52:	6879      	ldr	r1, [r7, #4]
 801ec54:	4613      	mov	r3, r2
 801ec56:	009b      	lsls	r3, r3, #2
 801ec58:	4413      	add	r3, r2
 801ec5a:	009b      	lsls	r3, r3, #2
 801ec5c:	440b      	add	r3, r1
 801ec5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801ec62:	881b      	ldrh	r3, [r3, #0]
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d104      	bne.n	801ec72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801ec68:	6839      	ldr	r1, [r7, #0]
 801ec6a:	6878      	ldr	r0, [r7, #4]
 801ec6c:	f000 fb9d 	bl	801f3aa <USBD_CtlError>
                  break;
 801ec70:	e041      	b.n	801ecf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ec72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	da0b      	bge.n	801ec92 <USBD_StdEPReq+0x2b2>
 801ec7a:	7bbb      	ldrb	r3, [r7, #14]
 801ec7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ec80:	4613      	mov	r3, r2
 801ec82:	009b      	lsls	r3, r3, #2
 801ec84:	4413      	add	r3, r2
 801ec86:	009b      	lsls	r3, r3, #2
 801ec88:	3310      	adds	r3, #16
 801ec8a:	687a      	ldr	r2, [r7, #4]
 801ec8c:	4413      	add	r3, r2
 801ec8e:	3304      	adds	r3, #4
 801ec90:	e00b      	b.n	801ecaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ec92:	7bbb      	ldrb	r3, [r7, #14]
 801ec94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ec98:	4613      	mov	r3, r2
 801ec9a:	009b      	lsls	r3, r3, #2
 801ec9c:	4413      	add	r3, r2
 801ec9e:	009b      	lsls	r3, r3, #2
 801eca0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801eca4:	687a      	ldr	r2, [r7, #4]
 801eca6:	4413      	add	r3, r2
 801eca8:	3304      	adds	r3, #4
 801ecaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ecac:	7bbb      	ldrb	r3, [r7, #14]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d002      	beq.n	801ecb8 <USBD_StdEPReq+0x2d8>
 801ecb2:	7bbb      	ldrb	r3, [r7, #14]
 801ecb4:	2b80      	cmp	r3, #128	; 0x80
 801ecb6:	d103      	bne.n	801ecc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801ecb8:	68bb      	ldr	r3, [r7, #8]
 801ecba:	2200      	movs	r2, #0
 801ecbc:	601a      	str	r2, [r3, #0]
 801ecbe:	e00e      	b.n	801ecde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801ecc0:	7bbb      	ldrb	r3, [r7, #14]
 801ecc2:	4619      	mov	r1, r3
 801ecc4:	6878      	ldr	r0, [r7, #4]
 801ecc6:	f004 fc37 	bl	8023538 <USBD_LL_IsStallEP>
 801ecca:	4603      	mov	r3, r0
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d003      	beq.n	801ecd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801ecd0:	68bb      	ldr	r3, [r7, #8]
 801ecd2:	2201      	movs	r2, #1
 801ecd4:	601a      	str	r2, [r3, #0]
 801ecd6:	e002      	b.n	801ecde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801ecd8:	68bb      	ldr	r3, [r7, #8]
 801ecda:	2200      	movs	r2, #0
 801ecdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801ecde:	68bb      	ldr	r3, [r7, #8]
 801ece0:	2202      	movs	r2, #2
 801ece2:	4619      	mov	r1, r3
 801ece4:	6878      	ldr	r0, [r7, #4]
 801ece6:	f000 fbd1 	bl	801f48c <USBD_CtlSendData>
              break;
 801ecea:	e004      	b.n	801ecf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801ecec:	6839      	ldr	r1, [r7, #0]
 801ecee:	6878      	ldr	r0, [r7, #4]
 801ecf0:	f000 fb5b 	bl	801f3aa <USBD_CtlError>
              break;
 801ecf4:	bf00      	nop
          }
          break;
 801ecf6:	e004      	b.n	801ed02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801ecf8:	6839      	ldr	r1, [r7, #0]
 801ecfa:	6878      	ldr	r0, [r7, #4]
 801ecfc:	f000 fb55 	bl	801f3aa <USBD_CtlError>
          break;
 801ed00:	bf00      	nop
      }
      break;
 801ed02:	e005      	b.n	801ed10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801ed04:	6839      	ldr	r1, [r7, #0]
 801ed06:	6878      	ldr	r0, [r7, #4]
 801ed08:	f000 fb4f 	bl	801f3aa <USBD_CtlError>
      break;
 801ed0c:	e000      	b.n	801ed10 <USBD_StdEPReq+0x330>
      break;
 801ed0e:	bf00      	nop
  }

  return ret;
 801ed10:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed12:	4618      	mov	r0, r3
 801ed14:	3710      	adds	r7, #16
 801ed16:	46bd      	mov	sp, r7
 801ed18:	bd80      	pop	{r7, pc}
	...

0801ed1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ed1c:	b580      	push	{r7, lr}
 801ed1e:	b084      	sub	sp, #16
 801ed20:	af00      	add	r7, sp, #0
 801ed22:	6078      	str	r0, [r7, #4]
 801ed24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ed26:	2300      	movs	r3, #0
 801ed28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801ed2a:	2300      	movs	r3, #0
 801ed2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ed2e:	2300      	movs	r3, #0
 801ed30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801ed32:	683b      	ldr	r3, [r7, #0]
 801ed34:	885b      	ldrh	r3, [r3, #2]
 801ed36:	0a1b      	lsrs	r3, r3, #8
 801ed38:	b29b      	uxth	r3, r3
 801ed3a:	3b01      	subs	r3, #1
 801ed3c:	2b06      	cmp	r3, #6
 801ed3e:	f200 8128 	bhi.w	801ef92 <USBD_GetDescriptor+0x276>
 801ed42:	a201      	add	r2, pc, #4	; (adr r2, 801ed48 <USBD_GetDescriptor+0x2c>)
 801ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ed48:	0801ed65 	.word	0x0801ed65
 801ed4c:	0801ed7d 	.word	0x0801ed7d
 801ed50:	0801edbd 	.word	0x0801edbd
 801ed54:	0801ef93 	.word	0x0801ef93
 801ed58:	0801ef93 	.word	0x0801ef93
 801ed5c:	0801ef33 	.word	0x0801ef33
 801ed60:	0801ef5f 	.word	0x0801ef5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	687a      	ldr	r2, [r7, #4]
 801ed6e:	7c12      	ldrb	r2, [r2, #16]
 801ed70:	f107 0108 	add.w	r1, r7, #8
 801ed74:	4610      	mov	r0, r2
 801ed76:	4798      	blx	r3
 801ed78:	60f8      	str	r0, [r7, #12]
      break;
 801ed7a:	e112      	b.n	801efa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	7c1b      	ldrb	r3, [r3, #16]
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d10d      	bne.n	801eda0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ed8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed8c:	f107 0208 	add.w	r2, r7, #8
 801ed90:	4610      	mov	r0, r2
 801ed92:	4798      	blx	r3
 801ed94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	3301      	adds	r3, #1
 801ed9a:	2202      	movs	r2, #2
 801ed9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ed9e:	e100      	b.n	801efa2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eda8:	f107 0208 	add.w	r2, r7, #8
 801edac:	4610      	mov	r0, r2
 801edae:	4798      	blx	r3
 801edb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801edb2:	68fb      	ldr	r3, [r7, #12]
 801edb4:	3301      	adds	r3, #1
 801edb6:	2202      	movs	r2, #2
 801edb8:	701a      	strb	r2, [r3, #0]
      break;
 801edba:	e0f2      	b.n	801efa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801edbc:	683b      	ldr	r3, [r7, #0]
 801edbe:	885b      	ldrh	r3, [r3, #2]
 801edc0:	b2db      	uxtb	r3, r3
 801edc2:	2b05      	cmp	r3, #5
 801edc4:	f200 80ac 	bhi.w	801ef20 <USBD_GetDescriptor+0x204>
 801edc8:	a201      	add	r2, pc, #4	; (adr r2, 801edd0 <USBD_GetDescriptor+0xb4>)
 801edca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801edce:	bf00      	nop
 801edd0:	0801ede9 	.word	0x0801ede9
 801edd4:	0801ee1d 	.word	0x0801ee1d
 801edd8:	0801ee51 	.word	0x0801ee51
 801eddc:	0801ee85 	.word	0x0801ee85
 801ede0:	0801eeb9 	.word	0x0801eeb9
 801ede4:	0801eeed 	.word	0x0801eeed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801edee:	685b      	ldr	r3, [r3, #4]
 801edf0:	2b00      	cmp	r3, #0
 801edf2:	d00b      	beq.n	801ee0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801edfa:	685b      	ldr	r3, [r3, #4]
 801edfc:	687a      	ldr	r2, [r7, #4]
 801edfe:	7c12      	ldrb	r2, [r2, #16]
 801ee00:	f107 0108 	add.w	r1, r7, #8
 801ee04:	4610      	mov	r0, r2
 801ee06:	4798      	blx	r3
 801ee08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ee0a:	e091      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ee0c:	6839      	ldr	r1, [r7, #0]
 801ee0e:	6878      	ldr	r0, [r7, #4]
 801ee10:	f000 facb 	bl	801f3aa <USBD_CtlError>
            err++;
 801ee14:	7afb      	ldrb	r3, [r7, #11]
 801ee16:	3301      	adds	r3, #1
 801ee18:	72fb      	strb	r3, [r7, #11]
          break;
 801ee1a:	e089      	b.n	801ef30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ee22:	689b      	ldr	r3, [r3, #8]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d00b      	beq.n	801ee40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ee2e:	689b      	ldr	r3, [r3, #8]
 801ee30:	687a      	ldr	r2, [r7, #4]
 801ee32:	7c12      	ldrb	r2, [r2, #16]
 801ee34:	f107 0108 	add.w	r1, r7, #8
 801ee38:	4610      	mov	r0, r2
 801ee3a:	4798      	blx	r3
 801ee3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ee3e:	e077      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ee40:	6839      	ldr	r1, [r7, #0]
 801ee42:	6878      	ldr	r0, [r7, #4]
 801ee44:	f000 fab1 	bl	801f3aa <USBD_CtlError>
            err++;
 801ee48:	7afb      	ldrb	r3, [r7, #11]
 801ee4a:	3301      	adds	r3, #1
 801ee4c:	72fb      	strb	r3, [r7, #11]
          break;
 801ee4e:	e06f      	b.n	801ef30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ee56:	68db      	ldr	r3, [r3, #12]
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d00b      	beq.n	801ee74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ee62:	68db      	ldr	r3, [r3, #12]
 801ee64:	687a      	ldr	r2, [r7, #4]
 801ee66:	7c12      	ldrb	r2, [r2, #16]
 801ee68:	f107 0108 	add.w	r1, r7, #8
 801ee6c:	4610      	mov	r0, r2
 801ee6e:	4798      	blx	r3
 801ee70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ee72:	e05d      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ee74:	6839      	ldr	r1, [r7, #0]
 801ee76:	6878      	ldr	r0, [r7, #4]
 801ee78:	f000 fa97 	bl	801f3aa <USBD_CtlError>
            err++;
 801ee7c:	7afb      	ldrb	r3, [r7, #11]
 801ee7e:	3301      	adds	r3, #1
 801ee80:	72fb      	strb	r3, [r7, #11]
          break;
 801ee82:	e055      	b.n	801ef30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ee8a:	691b      	ldr	r3, [r3, #16]
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	d00b      	beq.n	801eea8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ee96:	691b      	ldr	r3, [r3, #16]
 801ee98:	687a      	ldr	r2, [r7, #4]
 801ee9a:	7c12      	ldrb	r2, [r2, #16]
 801ee9c:	f107 0108 	add.w	r1, r7, #8
 801eea0:	4610      	mov	r0, r2
 801eea2:	4798      	blx	r3
 801eea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eea6:	e043      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801eea8:	6839      	ldr	r1, [r7, #0]
 801eeaa:	6878      	ldr	r0, [r7, #4]
 801eeac:	f000 fa7d 	bl	801f3aa <USBD_CtlError>
            err++;
 801eeb0:	7afb      	ldrb	r3, [r7, #11]
 801eeb2:	3301      	adds	r3, #1
 801eeb4:	72fb      	strb	r3, [r7, #11]
          break;
 801eeb6:	e03b      	b.n	801ef30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801eebe:	695b      	ldr	r3, [r3, #20]
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d00b      	beq.n	801eedc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801eeca:	695b      	ldr	r3, [r3, #20]
 801eecc:	687a      	ldr	r2, [r7, #4]
 801eece:	7c12      	ldrb	r2, [r2, #16]
 801eed0:	f107 0108 	add.w	r1, r7, #8
 801eed4:	4610      	mov	r0, r2
 801eed6:	4798      	blx	r3
 801eed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eeda:	e029      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801eedc:	6839      	ldr	r1, [r7, #0]
 801eede:	6878      	ldr	r0, [r7, #4]
 801eee0:	f000 fa63 	bl	801f3aa <USBD_CtlError>
            err++;
 801eee4:	7afb      	ldrb	r3, [r7, #11]
 801eee6:	3301      	adds	r3, #1
 801eee8:	72fb      	strb	r3, [r7, #11]
          break;
 801eeea:	e021      	b.n	801ef30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801eef2:	699b      	ldr	r3, [r3, #24]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d00b      	beq.n	801ef10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801eefe:	699b      	ldr	r3, [r3, #24]
 801ef00:	687a      	ldr	r2, [r7, #4]
 801ef02:	7c12      	ldrb	r2, [r2, #16]
 801ef04:	f107 0108 	add.w	r1, r7, #8
 801ef08:	4610      	mov	r0, r2
 801ef0a:	4798      	blx	r3
 801ef0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ef0e:	e00f      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ef10:	6839      	ldr	r1, [r7, #0]
 801ef12:	6878      	ldr	r0, [r7, #4]
 801ef14:	f000 fa49 	bl	801f3aa <USBD_CtlError>
            err++;
 801ef18:	7afb      	ldrb	r3, [r7, #11]
 801ef1a:	3301      	adds	r3, #1
 801ef1c:	72fb      	strb	r3, [r7, #11]
          break;
 801ef1e:	e007      	b.n	801ef30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801ef20:	6839      	ldr	r1, [r7, #0]
 801ef22:	6878      	ldr	r0, [r7, #4]
 801ef24:	f000 fa41 	bl	801f3aa <USBD_CtlError>
          err++;
 801ef28:	7afb      	ldrb	r3, [r7, #11]
 801ef2a:	3301      	adds	r3, #1
 801ef2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801ef2e:	bf00      	nop
      }
      break;
 801ef30:	e037      	b.n	801efa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	7c1b      	ldrb	r3, [r3, #16]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d109      	bne.n	801ef4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ef40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef42:	f107 0208 	add.w	r2, r7, #8
 801ef46:	4610      	mov	r0, r2
 801ef48:	4798      	blx	r3
 801ef4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ef4c:	e029      	b.n	801efa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801ef4e:	6839      	ldr	r1, [r7, #0]
 801ef50:	6878      	ldr	r0, [r7, #4]
 801ef52:	f000 fa2a 	bl	801f3aa <USBD_CtlError>
        err++;
 801ef56:	7afb      	ldrb	r3, [r7, #11]
 801ef58:	3301      	adds	r3, #1
 801ef5a:	72fb      	strb	r3, [r7, #11]
      break;
 801ef5c:	e021      	b.n	801efa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	7c1b      	ldrb	r3, [r3, #16]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d10d      	bne.n	801ef82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ef6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef6e:	f107 0208 	add.w	r2, r7, #8
 801ef72:	4610      	mov	r0, r2
 801ef74:	4798      	blx	r3
 801ef76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	3301      	adds	r3, #1
 801ef7c:	2207      	movs	r2, #7
 801ef7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ef80:	e00f      	b.n	801efa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801ef82:	6839      	ldr	r1, [r7, #0]
 801ef84:	6878      	ldr	r0, [r7, #4]
 801ef86:	f000 fa10 	bl	801f3aa <USBD_CtlError>
        err++;
 801ef8a:	7afb      	ldrb	r3, [r7, #11]
 801ef8c:	3301      	adds	r3, #1
 801ef8e:	72fb      	strb	r3, [r7, #11]
      break;
 801ef90:	e007      	b.n	801efa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801ef92:	6839      	ldr	r1, [r7, #0]
 801ef94:	6878      	ldr	r0, [r7, #4]
 801ef96:	f000 fa08 	bl	801f3aa <USBD_CtlError>
      err++;
 801ef9a:	7afb      	ldrb	r3, [r7, #11]
 801ef9c:	3301      	adds	r3, #1
 801ef9e:	72fb      	strb	r3, [r7, #11]
      break;
 801efa0:	bf00      	nop
  }

  if (err != 0U)
 801efa2:	7afb      	ldrb	r3, [r7, #11]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d11e      	bne.n	801efe6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801efa8:	683b      	ldr	r3, [r7, #0]
 801efaa:	88db      	ldrh	r3, [r3, #6]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d016      	beq.n	801efde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801efb0:	893b      	ldrh	r3, [r7, #8]
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d00e      	beq.n	801efd4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	88da      	ldrh	r2, [r3, #6]
 801efba:	893b      	ldrh	r3, [r7, #8]
 801efbc:	4293      	cmp	r3, r2
 801efbe:	bf28      	it	cs
 801efc0:	4613      	movcs	r3, r2
 801efc2:	b29b      	uxth	r3, r3
 801efc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801efc6:	893b      	ldrh	r3, [r7, #8]
 801efc8:	461a      	mov	r2, r3
 801efca:	68f9      	ldr	r1, [r7, #12]
 801efcc:	6878      	ldr	r0, [r7, #4]
 801efce:	f000 fa5d 	bl	801f48c <USBD_CtlSendData>
 801efd2:	e009      	b.n	801efe8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801efd4:	6839      	ldr	r1, [r7, #0]
 801efd6:	6878      	ldr	r0, [r7, #4]
 801efd8:	f000 f9e7 	bl	801f3aa <USBD_CtlError>
 801efdc:	e004      	b.n	801efe8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801efde:	6878      	ldr	r0, [r7, #4]
 801efe0:	f000 faae 	bl	801f540 <USBD_CtlSendStatus>
 801efe4:	e000      	b.n	801efe8 <USBD_GetDescriptor+0x2cc>
    return;
 801efe6:	bf00      	nop
  }
}
 801efe8:	3710      	adds	r7, #16
 801efea:	46bd      	mov	sp, r7
 801efec:	bd80      	pop	{r7, pc}
 801efee:	bf00      	nop

0801eff0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801eff0:	b580      	push	{r7, lr}
 801eff2:	b084      	sub	sp, #16
 801eff4:	af00      	add	r7, sp, #0
 801eff6:	6078      	str	r0, [r7, #4]
 801eff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	889b      	ldrh	r3, [r3, #4]
 801effe:	2b00      	cmp	r3, #0
 801f000:	d131      	bne.n	801f066 <USBD_SetAddress+0x76>
 801f002:	683b      	ldr	r3, [r7, #0]
 801f004:	88db      	ldrh	r3, [r3, #6]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d12d      	bne.n	801f066 <USBD_SetAddress+0x76>
 801f00a:	683b      	ldr	r3, [r7, #0]
 801f00c:	885b      	ldrh	r3, [r3, #2]
 801f00e:	2b7f      	cmp	r3, #127	; 0x7f
 801f010:	d829      	bhi.n	801f066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801f012:	683b      	ldr	r3, [r7, #0]
 801f014:	885b      	ldrh	r3, [r3, #2]
 801f016:	b2db      	uxtb	r3, r3
 801f018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f01c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f024:	b2db      	uxtb	r3, r3
 801f026:	2b03      	cmp	r3, #3
 801f028:	d104      	bne.n	801f034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801f02a:	6839      	ldr	r1, [r7, #0]
 801f02c:	6878      	ldr	r0, [r7, #4]
 801f02e:	f000 f9bc 	bl	801f3aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f032:	e01d      	b.n	801f070 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	7bfa      	ldrb	r2, [r7, #15]
 801f038:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801f03c:	7bfb      	ldrb	r3, [r7, #15]
 801f03e:	4619      	mov	r1, r3
 801f040:	6878      	ldr	r0, [r7, #4]
 801f042:	f004 faa5 	bl	8023590 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801f046:	6878      	ldr	r0, [r7, #4]
 801f048:	f000 fa7a 	bl	801f540 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801f04c:	7bfb      	ldrb	r3, [r7, #15]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d004      	beq.n	801f05c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	2202      	movs	r2, #2
 801f056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f05a:	e009      	b.n	801f070 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	2201      	movs	r2, #1
 801f060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f064:	e004      	b.n	801f070 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801f066:	6839      	ldr	r1, [r7, #0]
 801f068:	6878      	ldr	r0, [r7, #4]
 801f06a:	f000 f99e 	bl	801f3aa <USBD_CtlError>
  }
}
 801f06e:	bf00      	nop
 801f070:	bf00      	nop
 801f072:	3710      	adds	r7, #16
 801f074:	46bd      	mov	sp, r7
 801f076:	bd80      	pop	{r7, pc}

0801f078 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f078:	b580      	push	{r7, lr}
 801f07a:	b084      	sub	sp, #16
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	6078      	str	r0, [r7, #4]
 801f080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f082:	2300      	movs	r3, #0
 801f084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801f086:	683b      	ldr	r3, [r7, #0]
 801f088:	885b      	ldrh	r3, [r3, #2]
 801f08a:	b2da      	uxtb	r2, r3
 801f08c:	4b4e      	ldr	r3, [pc, #312]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f08e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801f090:	4b4d      	ldr	r3, [pc, #308]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f092:	781b      	ldrb	r3, [r3, #0]
 801f094:	2b01      	cmp	r3, #1
 801f096:	d905      	bls.n	801f0a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801f098:	6839      	ldr	r1, [r7, #0]
 801f09a:	6878      	ldr	r0, [r7, #4]
 801f09c:	f000 f985 	bl	801f3aa <USBD_CtlError>
    return USBD_FAIL;
 801f0a0:	2303      	movs	r3, #3
 801f0a2:	e08c      	b.n	801f1be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f0aa:	b2db      	uxtb	r3, r3
 801f0ac:	2b02      	cmp	r3, #2
 801f0ae:	d002      	beq.n	801f0b6 <USBD_SetConfig+0x3e>
 801f0b0:	2b03      	cmp	r3, #3
 801f0b2:	d029      	beq.n	801f108 <USBD_SetConfig+0x90>
 801f0b4:	e075      	b.n	801f1a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801f0b6:	4b44      	ldr	r3, [pc, #272]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f0b8:	781b      	ldrb	r3, [r3, #0]
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d020      	beq.n	801f100 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801f0be:	4b42      	ldr	r3, [pc, #264]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f0c0:	781b      	ldrb	r3, [r3, #0]
 801f0c2:	461a      	mov	r2, r3
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801f0c8:	4b3f      	ldr	r3, [pc, #252]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f0ca:	781b      	ldrb	r3, [r3, #0]
 801f0cc:	4619      	mov	r1, r3
 801f0ce:	6878      	ldr	r0, [r7, #4]
 801f0d0:	f7fe ffe1 	bl	801e096 <USBD_SetClassConfig>
 801f0d4:	4603      	mov	r3, r0
 801f0d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801f0d8:	7bfb      	ldrb	r3, [r7, #15]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d008      	beq.n	801f0f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801f0de:	6839      	ldr	r1, [r7, #0]
 801f0e0:	6878      	ldr	r0, [r7, #4]
 801f0e2:	f000 f962 	bl	801f3aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	2202      	movs	r2, #2
 801f0ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801f0ee:	e065      	b.n	801f1bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801f0f0:	6878      	ldr	r0, [r7, #4]
 801f0f2:	f000 fa25 	bl	801f540 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	2203      	movs	r2, #3
 801f0fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801f0fe:	e05d      	b.n	801f1bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801f100:	6878      	ldr	r0, [r7, #4]
 801f102:	f000 fa1d 	bl	801f540 <USBD_CtlSendStatus>
      break;
 801f106:	e059      	b.n	801f1bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801f108:	4b2f      	ldr	r3, [pc, #188]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f10a:	781b      	ldrb	r3, [r3, #0]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d112      	bne.n	801f136 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	2202      	movs	r2, #2
 801f114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801f118:	4b2b      	ldr	r3, [pc, #172]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f11a:	781b      	ldrb	r3, [r3, #0]
 801f11c:	461a      	mov	r2, r3
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801f122:	4b29      	ldr	r3, [pc, #164]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f124:	781b      	ldrb	r3, [r3, #0]
 801f126:	4619      	mov	r1, r3
 801f128:	6878      	ldr	r0, [r7, #4]
 801f12a:	f7fe ffd0 	bl	801e0ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801f12e:	6878      	ldr	r0, [r7, #4]
 801f130:	f000 fa06 	bl	801f540 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801f134:	e042      	b.n	801f1bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801f136:	4b24      	ldr	r3, [pc, #144]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f138:	781b      	ldrb	r3, [r3, #0]
 801f13a:	461a      	mov	r2, r3
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	685b      	ldr	r3, [r3, #4]
 801f140:	429a      	cmp	r2, r3
 801f142:	d02a      	beq.n	801f19a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	685b      	ldr	r3, [r3, #4]
 801f148:	b2db      	uxtb	r3, r3
 801f14a:	4619      	mov	r1, r3
 801f14c:	6878      	ldr	r0, [r7, #4]
 801f14e:	f7fe ffbe 	bl	801e0ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801f152:	4b1d      	ldr	r3, [pc, #116]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f154:	781b      	ldrb	r3, [r3, #0]
 801f156:	461a      	mov	r2, r3
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801f15c:	4b1a      	ldr	r3, [pc, #104]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f15e:	781b      	ldrb	r3, [r3, #0]
 801f160:	4619      	mov	r1, r3
 801f162:	6878      	ldr	r0, [r7, #4]
 801f164:	f7fe ff97 	bl	801e096 <USBD_SetClassConfig>
 801f168:	4603      	mov	r3, r0
 801f16a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801f16c:	7bfb      	ldrb	r3, [r7, #15]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d00f      	beq.n	801f192 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801f172:	6839      	ldr	r1, [r7, #0]
 801f174:	6878      	ldr	r0, [r7, #4]
 801f176:	f000 f918 	bl	801f3aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	685b      	ldr	r3, [r3, #4]
 801f17e:	b2db      	uxtb	r3, r3
 801f180:	4619      	mov	r1, r3
 801f182:	6878      	ldr	r0, [r7, #4]
 801f184:	f7fe ffa3 	bl	801e0ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	2202      	movs	r2, #2
 801f18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801f190:	e014      	b.n	801f1bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801f192:	6878      	ldr	r0, [r7, #4]
 801f194:	f000 f9d4 	bl	801f540 <USBD_CtlSendStatus>
      break;
 801f198:	e010      	b.n	801f1bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801f19a:	6878      	ldr	r0, [r7, #4]
 801f19c:	f000 f9d0 	bl	801f540 <USBD_CtlSendStatus>
      break;
 801f1a0:	e00c      	b.n	801f1bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801f1a2:	6839      	ldr	r1, [r7, #0]
 801f1a4:	6878      	ldr	r0, [r7, #4]
 801f1a6:	f000 f900 	bl	801f3aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801f1aa:	4b07      	ldr	r3, [pc, #28]	; (801f1c8 <USBD_SetConfig+0x150>)
 801f1ac:	781b      	ldrb	r3, [r3, #0]
 801f1ae:	4619      	mov	r1, r3
 801f1b0:	6878      	ldr	r0, [r7, #4]
 801f1b2:	f7fe ff8c 	bl	801e0ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801f1b6:	2303      	movs	r3, #3
 801f1b8:	73fb      	strb	r3, [r7, #15]
      break;
 801f1ba:	bf00      	nop
  }

  return ret;
 801f1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801f1be:	4618      	mov	r0, r3
 801f1c0:	3710      	adds	r7, #16
 801f1c2:	46bd      	mov	sp, r7
 801f1c4:	bd80      	pop	{r7, pc}
 801f1c6:	bf00      	nop
 801f1c8:	2000d464 	.word	0x2000d464

0801f1cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f1cc:	b580      	push	{r7, lr}
 801f1ce:	b082      	sub	sp, #8
 801f1d0:	af00      	add	r7, sp, #0
 801f1d2:	6078      	str	r0, [r7, #4]
 801f1d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801f1d6:	683b      	ldr	r3, [r7, #0]
 801f1d8:	88db      	ldrh	r3, [r3, #6]
 801f1da:	2b01      	cmp	r3, #1
 801f1dc:	d004      	beq.n	801f1e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801f1de:	6839      	ldr	r1, [r7, #0]
 801f1e0:	6878      	ldr	r0, [r7, #4]
 801f1e2:	f000 f8e2 	bl	801f3aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801f1e6:	e023      	b.n	801f230 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f1ee:	b2db      	uxtb	r3, r3
 801f1f0:	2b02      	cmp	r3, #2
 801f1f2:	dc02      	bgt.n	801f1fa <USBD_GetConfig+0x2e>
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	dc03      	bgt.n	801f200 <USBD_GetConfig+0x34>
 801f1f8:	e015      	b.n	801f226 <USBD_GetConfig+0x5a>
 801f1fa:	2b03      	cmp	r3, #3
 801f1fc:	d00b      	beq.n	801f216 <USBD_GetConfig+0x4a>
 801f1fe:	e012      	b.n	801f226 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	2200      	movs	r2, #0
 801f204:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	3308      	adds	r3, #8
 801f20a:	2201      	movs	r2, #1
 801f20c:	4619      	mov	r1, r3
 801f20e:	6878      	ldr	r0, [r7, #4]
 801f210:	f000 f93c 	bl	801f48c <USBD_CtlSendData>
        break;
 801f214:	e00c      	b.n	801f230 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	3304      	adds	r3, #4
 801f21a:	2201      	movs	r2, #1
 801f21c:	4619      	mov	r1, r3
 801f21e:	6878      	ldr	r0, [r7, #4]
 801f220:	f000 f934 	bl	801f48c <USBD_CtlSendData>
        break;
 801f224:	e004      	b.n	801f230 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801f226:	6839      	ldr	r1, [r7, #0]
 801f228:	6878      	ldr	r0, [r7, #4]
 801f22a:	f000 f8be 	bl	801f3aa <USBD_CtlError>
        break;
 801f22e:	bf00      	nop
}
 801f230:	bf00      	nop
 801f232:	3708      	adds	r7, #8
 801f234:	46bd      	mov	sp, r7
 801f236:	bd80      	pop	{r7, pc}

0801f238 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f238:	b580      	push	{r7, lr}
 801f23a:	b082      	sub	sp, #8
 801f23c:	af00      	add	r7, sp, #0
 801f23e:	6078      	str	r0, [r7, #4]
 801f240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f248:	b2db      	uxtb	r3, r3
 801f24a:	3b01      	subs	r3, #1
 801f24c:	2b02      	cmp	r3, #2
 801f24e:	d81e      	bhi.n	801f28e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801f250:	683b      	ldr	r3, [r7, #0]
 801f252:	88db      	ldrh	r3, [r3, #6]
 801f254:	2b02      	cmp	r3, #2
 801f256:	d004      	beq.n	801f262 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801f258:	6839      	ldr	r1, [r7, #0]
 801f25a:	6878      	ldr	r0, [r7, #4]
 801f25c:	f000 f8a5 	bl	801f3aa <USBD_CtlError>
        break;
 801f260:	e01a      	b.n	801f298 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	2201      	movs	r2, #1
 801f266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801f26e:	2b00      	cmp	r3, #0
 801f270:	d005      	beq.n	801f27e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	68db      	ldr	r3, [r3, #12]
 801f276:	f043 0202 	orr.w	r2, r3, #2
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	330c      	adds	r3, #12
 801f282:	2202      	movs	r2, #2
 801f284:	4619      	mov	r1, r3
 801f286:	6878      	ldr	r0, [r7, #4]
 801f288:	f000 f900 	bl	801f48c <USBD_CtlSendData>
      break;
 801f28c:	e004      	b.n	801f298 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801f28e:	6839      	ldr	r1, [r7, #0]
 801f290:	6878      	ldr	r0, [r7, #4]
 801f292:	f000 f88a 	bl	801f3aa <USBD_CtlError>
      break;
 801f296:	bf00      	nop
  }
}
 801f298:	bf00      	nop
 801f29a:	3708      	adds	r7, #8
 801f29c:	46bd      	mov	sp, r7
 801f29e:	bd80      	pop	{r7, pc}

0801f2a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f2a0:	b580      	push	{r7, lr}
 801f2a2:	b082      	sub	sp, #8
 801f2a4:	af00      	add	r7, sp, #0
 801f2a6:	6078      	str	r0, [r7, #4]
 801f2a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f2aa:	683b      	ldr	r3, [r7, #0]
 801f2ac:	885b      	ldrh	r3, [r3, #2]
 801f2ae:	2b01      	cmp	r3, #1
 801f2b0:	d107      	bne.n	801f2c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	2201      	movs	r2, #1
 801f2b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801f2ba:	6878      	ldr	r0, [r7, #4]
 801f2bc:	f000 f940 	bl	801f540 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801f2c0:	e013      	b.n	801f2ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801f2c2:	683b      	ldr	r3, [r7, #0]
 801f2c4:	885b      	ldrh	r3, [r3, #2]
 801f2c6:	2b02      	cmp	r3, #2
 801f2c8:	d10b      	bne.n	801f2e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801f2ca:	683b      	ldr	r3, [r7, #0]
 801f2cc:	889b      	ldrh	r3, [r3, #4]
 801f2ce:	0a1b      	lsrs	r3, r3, #8
 801f2d0:	b29b      	uxth	r3, r3
 801f2d2:	b2da      	uxtb	r2, r3
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801f2da:	6878      	ldr	r0, [r7, #4]
 801f2dc:	f000 f930 	bl	801f540 <USBD_CtlSendStatus>
}
 801f2e0:	e003      	b.n	801f2ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801f2e2:	6839      	ldr	r1, [r7, #0]
 801f2e4:	6878      	ldr	r0, [r7, #4]
 801f2e6:	f000 f860 	bl	801f3aa <USBD_CtlError>
}
 801f2ea:	bf00      	nop
 801f2ec:	3708      	adds	r7, #8
 801f2ee:	46bd      	mov	sp, r7
 801f2f0:	bd80      	pop	{r7, pc}

0801f2f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f2f2:	b580      	push	{r7, lr}
 801f2f4:	b082      	sub	sp, #8
 801f2f6:	af00      	add	r7, sp, #0
 801f2f8:	6078      	str	r0, [r7, #4]
 801f2fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f302:	b2db      	uxtb	r3, r3
 801f304:	3b01      	subs	r3, #1
 801f306:	2b02      	cmp	r3, #2
 801f308:	d80b      	bhi.n	801f322 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f30a:	683b      	ldr	r3, [r7, #0]
 801f30c:	885b      	ldrh	r3, [r3, #2]
 801f30e:	2b01      	cmp	r3, #1
 801f310:	d10c      	bne.n	801f32c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	2200      	movs	r2, #0
 801f316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801f31a:	6878      	ldr	r0, [r7, #4]
 801f31c:	f000 f910 	bl	801f540 <USBD_CtlSendStatus>
      }
      break;
 801f320:	e004      	b.n	801f32c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801f322:	6839      	ldr	r1, [r7, #0]
 801f324:	6878      	ldr	r0, [r7, #4]
 801f326:	f000 f840 	bl	801f3aa <USBD_CtlError>
      break;
 801f32a:	e000      	b.n	801f32e <USBD_ClrFeature+0x3c>
      break;
 801f32c:	bf00      	nop
  }
}
 801f32e:	bf00      	nop
 801f330:	3708      	adds	r7, #8
 801f332:	46bd      	mov	sp, r7
 801f334:	bd80      	pop	{r7, pc}

0801f336 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801f336:	b580      	push	{r7, lr}
 801f338:	b084      	sub	sp, #16
 801f33a:	af00      	add	r7, sp, #0
 801f33c:	6078      	str	r0, [r7, #4]
 801f33e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801f340:	683b      	ldr	r3, [r7, #0]
 801f342:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	781a      	ldrb	r2, [r3, #0]
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	3301      	adds	r3, #1
 801f350:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	781a      	ldrb	r2, [r3, #0]
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	3301      	adds	r3, #1
 801f35e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801f360:	68f8      	ldr	r0, [r7, #12]
 801f362:	f7ff fa41 	bl	801e7e8 <SWAPBYTE>
 801f366:	4603      	mov	r3, r0
 801f368:	461a      	mov	r2, r3
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	3301      	adds	r3, #1
 801f372:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	3301      	adds	r3, #1
 801f378:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801f37a:	68f8      	ldr	r0, [r7, #12]
 801f37c:	f7ff fa34 	bl	801e7e8 <SWAPBYTE>
 801f380:	4603      	mov	r3, r0
 801f382:	461a      	mov	r2, r3
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	3301      	adds	r3, #1
 801f38c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	3301      	adds	r3, #1
 801f392:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801f394:	68f8      	ldr	r0, [r7, #12]
 801f396:	f7ff fa27 	bl	801e7e8 <SWAPBYTE>
 801f39a:	4603      	mov	r3, r0
 801f39c:	461a      	mov	r2, r3
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	80da      	strh	r2, [r3, #6]
}
 801f3a2:	bf00      	nop
 801f3a4:	3710      	adds	r7, #16
 801f3a6:	46bd      	mov	sp, r7
 801f3a8:	bd80      	pop	{r7, pc}

0801f3aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f3aa:	b580      	push	{r7, lr}
 801f3ac:	b082      	sub	sp, #8
 801f3ae:	af00      	add	r7, sp, #0
 801f3b0:	6078      	str	r0, [r7, #4]
 801f3b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801f3b4:	2180      	movs	r1, #128	; 0x80
 801f3b6:	6878      	ldr	r0, [r7, #4]
 801f3b8:	f004 f880 	bl	80234bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801f3bc:	2100      	movs	r1, #0
 801f3be:	6878      	ldr	r0, [r7, #4]
 801f3c0:	f004 f87c 	bl	80234bc <USBD_LL_StallEP>
}
 801f3c4:	bf00      	nop
 801f3c6:	3708      	adds	r7, #8
 801f3c8:	46bd      	mov	sp, r7
 801f3ca:	bd80      	pop	{r7, pc}

0801f3cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801f3cc:	b580      	push	{r7, lr}
 801f3ce:	b086      	sub	sp, #24
 801f3d0:	af00      	add	r7, sp, #0
 801f3d2:	60f8      	str	r0, [r7, #12]
 801f3d4:	60b9      	str	r1, [r7, #8]
 801f3d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801f3d8:	2300      	movs	r3, #0
 801f3da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801f3dc:	68fb      	ldr	r3, [r7, #12]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d036      	beq.n	801f450 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801f3e2:	68fb      	ldr	r3, [r7, #12]
 801f3e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801f3e6:	6938      	ldr	r0, [r7, #16]
 801f3e8:	f000 f836 	bl	801f458 <USBD_GetLen>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	3301      	adds	r3, #1
 801f3f0:	b29b      	uxth	r3, r3
 801f3f2:	005b      	lsls	r3, r3, #1
 801f3f4:	b29a      	uxth	r2, r3
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801f3fa:	7dfb      	ldrb	r3, [r7, #23]
 801f3fc:	68ba      	ldr	r2, [r7, #8]
 801f3fe:	4413      	add	r3, r2
 801f400:	687a      	ldr	r2, [r7, #4]
 801f402:	7812      	ldrb	r2, [r2, #0]
 801f404:	701a      	strb	r2, [r3, #0]
  idx++;
 801f406:	7dfb      	ldrb	r3, [r7, #23]
 801f408:	3301      	adds	r3, #1
 801f40a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801f40c:	7dfb      	ldrb	r3, [r7, #23]
 801f40e:	68ba      	ldr	r2, [r7, #8]
 801f410:	4413      	add	r3, r2
 801f412:	2203      	movs	r2, #3
 801f414:	701a      	strb	r2, [r3, #0]
  idx++;
 801f416:	7dfb      	ldrb	r3, [r7, #23]
 801f418:	3301      	adds	r3, #1
 801f41a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801f41c:	e013      	b.n	801f446 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801f41e:	7dfb      	ldrb	r3, [r7, #23]
 801f420:	68ba      	ldr	r2, [r7, #8]
 801f422:	4413      	add	r3, r2
 801f424:	693a      	ldr	r2, [r7, #16]
 801f426:	7812      	ldrb	r2, [r2, #0]
 801f428:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801f42a:	693b      	ldr	r3, [r7, #16]
 801f42c:	3301      	adds	r3, #1
 801f42e:	613b      	str	r3, [r7, #16]
    idx++;
 801f430:	7dfb      	ldrb	r3, [r7, #23]
 801f432:	3301      	adds	r3, #1
 801f434:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801f436:	7dfb      	ldrb	r3, [r7, #23]
 801f438:	68ba      	ldr	r2, [r7, #8]
 801f43a:	4413      	add	r3, r2
 801f43c:	2200      	movs	r2, #0
 801f43e:	701a      	strb	r2, [r3, #0]
    idx++;
 801f440:	7dfb      	ldrb	r3, [r7, #23]
 801f442:	3301      	adds	r3, #1
 801f444:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801f446:	693b      	ldr	r3, [r7, #16]
 801f448:	781b      	ldrb	r3, [r3, #0]
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d1e7      	bne.n	801f41e <USBD_GetString+0x52>
 801f44e:	e000      	b.n	801f452 <USBD_GetString+0x86>
    return;
 801f450:	bf00      	nop
  }
}
 801f452:	3718      	adds	r7, #24
 801f454:	46bd      	mov	sp, r7
 801f456:	bd80      	pop	{r7, pc}

0801f458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801f458:	b480      	push	{r7}
 801f45a:	b085      	sub	sp, #20
 801f45c:	af00      	add	r7, sp, #0
 801f45e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801f460:	2300      	movs	r3, #0
 801f462:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801f468:	e005      	b.n	801f476 <USBD_GetLen+0x1e>
  {
    len++;
 801f46a:	7bfb      	ldrb	r3, [r7, #15]
 801f46c:	3301      	adds	r3, #1
 801f46e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801f470:	68bb      	ldr	r3, [r7, #8]
 801f472:	3301      	adds	r3, #1
 801f474:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801f476:	68bb      	ldr	r3, [r7, #8]
 801f478:	781b      	ldrb	r3, [r3, #0]
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d1f5      	bne.n	801f46a <USBD_GetLen+0x12>
  }

  return len;
 801f47e:	7bfb      	ldrb	r3, [r7, #15]
}
 801f480:	4618      	mov	r0, r3
 801f482:	3714      	adds	r7, #20
 801f484:	46bd      	mov	sp, r7
 801f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f48a:	4770      	bx	lr

0801f48c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801f48c:	b580      	push	{r7, lr}
 801f48e:	b084      	sub	sp, #16
 801f490:	af00      	add	r7, sp, #0
 801f492:	60f8      	str	r0, [r7, #12]
 801f494:	60b9      	str	r1, [r7, #8]
 801f496:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	2202      	movs	r2, #2
 801f49c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801f4a0:	68fb      	ldr	r3, [r7, #12]
 801f4a2:	687a      	ldr	r2, [r7, #4]
 801f4a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	687a      	ldr	r2, [r7, #4]
 801f4aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	68ba      	ldr	r2, [r7, #8]
 801f4b0:	2100      	movs	r1, #0
 801f4b2:	68f8      	ldr	r0, [r7, #12]
 801f4b4:	f004 f88b 	bl	80235ce <USBD_LL_Transmit>

  return USBD_OK;
 801f4b8:	2300      	movs	r3, #0
}
 801f4ba:	4618      	mov	r0, r3
 801f4bc:	3710      	adds	r7, #16
 801f4be:	46bd      	mov	sp, r7
 801f4c0:	bd80      	pop	{r7, pc}

0801f4c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801f4c2:	b580      	push	{r7, lr}
 801f4c4:	b084      	sub	sp, #16
 801f4c6:	af00      	add	r7, sp, #0
 801f4c8:	60f8      	str	r0, [r7, #12]
 801f4ca:	60b9      	str	r1, [r7, #8]
 801f4cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	68ba      	ldr	r2, [r7, #8]
 801f4d2:	2100      	movs	r1, #0
 801f4d4:	68f8      	ldr	r0, [r7, #12]
 801f4d6:	f004 f87a 	bl	80235ce <USBD_LL_Transmit>

  return USBD_OK;
 801f4da:	2300      	movs	r3, #0
}
 801f4dc:	4618      	mov	r0, r3
 801f4de:	3710      	adds	r7, #16
 801f4e0:	46bd      	mov	sp, r7
 801f4e2:	bd80      	pop	{r7, pc}

0801f4e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801f4e4:	b580      	push	{r7, lr}
 801f4e6:	b084      	sub	sp, #16
 801f4e8:	af00      	add	r7, sp, #0
 801f4ea:	60f8      	str	r0, [r7, #12]
 801f4ec:	60b9      	str	r1, [r7, #8]
 801f4ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	2203      	movs	r2, #3
 801f4f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801f4f8:	68fb      	ldr	r3, [r7, #12]
 801f4fa:	687a      	ldr	r2, [r7, #4]
 801f4fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	687a      	ldr	r2, [r7, #4]
 801f504:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	68ba      	ldr	r2, [r7, #8]
 801f50c:	2100      	movs	r1, #0
 801f50e:	68f8      	ldr	r0, [r7, #12]
 801f510:	f004 f87e 	bl	8023610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f514:	2300      	movs	r3, #0
}
 801f516:	4618      	mov	r0, r3
 801f518:	3710      	adds	r7, #16
 801f51a:	46bd      	mov	sp, r7
 801f51c:	bd80      	pop	{r7, pc}

0801f51e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801f51e:	b580      	push	{r7, lr}
 801f520:	b084      	sub	sp, #16
 801f522:	af00      	add	r7, sp, #0
 801f524:	60f8      	str	r0, [r7, #12]
 801f526:	60b9      	str	r1, [r7, #8]
 801f528:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	68ba      	ldr	r2, [r7, #8]
 801f52e:	2100      	movs	r1, #0
 801f530:	68f8      	ldr	r0, [r7, #12]
 801f532:	f004 f86d 	bl	8023610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f536:	2300      	movs	r3, #0
}
 801f538:	4618      	mov	r0, r3
 801f53a:	3710      	adds	r7, #16
 801f53c:	46bd      	mov	sp, r7
 801f53e:	bd80      	pop	{r7, pc}

0801f540 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801f540:	b580      	push	{r7, lr}
 801f542:	b082      	sub	sp, #8
 801f544:	af00      	add	r7, sp, #0
 801f546:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	2204      	movs	r2, #4
 801f54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801f550:	2300      	movs	r3, #0
 801f552:	2200      	movs	r2, #0
 801f554:	2100      	movs	r1, #0
 801f556:	6878      	ldr	r0, [r7, #4]
 801f558:	f004 f839 	bl	80235ce <USBD_LL_Transmit>

  return USBD_OK;
 801f55c:	2300      	movs	r3, #0
}
 801f55e:	4618      	mov	r0, r3
 801f560:	3708      	adds	r7, #8
 801f562:	46bd      	mov	sp, r7
 801f564:	bd80      	pop	{r7, pc}

0801f566 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801f566:	b580      	push	{r7, lr}
 801f568:	b082      	sub	sp, #8
 801f56a:	af00      	add	r7, sp, #0
 801f56c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	2205      	movs	r2, #5
 801f572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f576:	2300      	movs	r3, #0
 801f578:	2200      	movs	r2, #0
 801f57a:	2100      	movs	r1, #0
 801f57c:	6878      	ldr	r0, [r7, #4]
 801f57e:	f004 f847 	bl	8023610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f582:	2300      	movs	r3, #0
}
 801f584:	4618      	mov	r0, r3
 801f586:	3708      	adds	r7, #8
 801f588:	46bd      	mov	sp, r7
 801f58a:	bd80      	pop	{r7, pc}

0801f58c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801f58c:	b480      	push	{r7}
 801f58e:	b085      	sub	sp, #20
 801f590:	af00      	add	r7, sp, #0
 801f592:	4603      	mov	r3, r0
 801f594:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801f596:	2300      	movs	r3, #0
 801f598:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801f59a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f59e:	2b84      	cmp	r3, #132	; 0x84
 801f5a0:	d005      	beq.n	801f5ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801f5a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f5a6:	68fb      	ldr	r3, [r7, #12]
 801f5a8:	4413      	add	r3, r2
 801f5aa:	3303      	adds	r3, #3
 801f5ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801f5ae:	68fb      	ldr	r3, [r7, #12]
}
 801f5b0:	4618      	mov	r0, r3
 801f5b2:	3714      	adds	r7, #20
 801f5b4:	46bd      	mov	sp, r7
 801f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ba:	4770      	bx	lr

0801f5bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801f5c0:	f001 fae8 	bl	8020b94 <vTaskStartScheduler>
  
  return osOK;
 801f5c4:	2300      	movs	r3, #0
}
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	bd80      	pop	{r7, pc}

0801f5ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801f5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5cc:	b089      	sub	sp, #36	; 0x24
 801f5ce:	af04      	add	r7, sp, #16
 801f5d0:	6078      	str	r0, [r7, #4]
 801f5d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	695b      	ldr	r3, [r3, #20]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d020      	beq.n	801f61e <osThreadCreate+0x54>
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	699b      	ldr	r3, [r3, #24]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d01c      	beq.n	801f61e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	685c      	ldr	r4, [r3, #4]
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	691e      	ldr	r6, [r3, #16]
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f7ff ffc8 	bl	801f58c <makeFreeRtosPriority>
 801f5fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	695b      	ldr	r3, [r3, #20]
 801f602:	687a      	ldr	r2, [r7, #4]
 801f604:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801f606:	9202      	str	r2, [sp, #8]
 801f608:	9301      	str	r3, [sp, #4]
 801f60a:	9100      	str	r1, [sp, #0]
 801f60c:	683b      	ldr	r3, [r7, #0]
 801f60e:	4632      	mov	r2, r6
 801f610:	4629      	mov	r1, r5
 801f612:	4620      	mov	r0, r4
 801f614:	f001 f86c 	bl	80206f0 <xTaskCreateStatic>
 801f618:	4603      	mov	r3, r0
 801f61a:	60fb      	str	r3, [r7, #12]
 801f61c:	e01c      	b.n	801f658 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	685c      	ldr	r4, [r3, #4]
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801f62a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801f632:	4618      	mov	r0, r3
 801f634:	f7ff ffaa 	bl	801f58c <makeFreeRtosPriority>
 801f638:	4602      	mov	r2, r0
 801f63a:	f107 030c 	add.w	r3, r7, #12
 801f63e:	9301      	str	r3, [sp, #4]
 801f640:	9200      	str	r2, [sp, #0]
 801f642:	683b      	ldr	r3, [r7, #0]
 801f644:	4632      	mov	r2, r6
 801f646:	4629      	mov	r1, r5
 801f648:	4620      	mov	r0, r4
 801f64a:	f001 f8a7 	bl	802079c <xTaskCreate>
 801f64e:	4603      	mov	r3, r0
 801f650:	2b01      	cmp	r3, #1
 801f652:	d001      	beq.n	801f658 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801f654:	2300      	movs	r3, #0
 801f656:	e000      	b.n	801f65a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801f658:	68fb      	ldr	r3, [r7, #12]
}
 801f65a:	4618      	mov	r0, r3
 801f65c:	3714      	adds	r7, #20
 801f65e:	46bd      	mov	sp, r7
 801f660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801f664 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801f664:	b580      	push	{r7, lr}
 801f666:	b084      	sub	sp, #16
 801f668:	af00      	add	r7, sp, #0
 801f66a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	4a09      	ldr	r2, [pc, #36]	; (801f694 <osDelay+0x30>)
 801f670:	fba2 2303 	umull	r2, r3, r2, r3
 801f674:	099b      	lsrs	r3, r3, #6
 801f676:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801f678:	68fb      	ldr	r3, [r7, #12]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d001      	beq.n	801f682 <osDelay+0x1e>
 801f67e:	68fb      	ldr	r3, [r7, #12]
 801f680:	e000      	b.n	801f684 <osDelay+0x20>
 801f682:	2301      	movs	r3, #1
 801f684:	4618      	mov	r0, r3
 801f686:	f001 f9eb 	bl	8020a60 <vTaskDelay>
  
  return osOK;
 801f68a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801f68c:	4618      	mov	r0, r3
 801f68e:	3710      	adds	r7, #16
 801f690:	46bd      	mov	sp, r7
 801f692:	bd80      	pop	{r7, pc}
 801f694:	10624dd3 	.word	0x10624dd3

0801f698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801f698:	b480      	push	{r7}
 801f69a:	b083      	sub	sp, #12
 801f69c:	af00      	add	r7, sp, #0
 801f69e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	f103 0208 	add.w	r2, r3, #8
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f6b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	f103 0208 	add.w	r2, r3, #8
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	f103 0208 	add.w	r2, r3, #8
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	2200      	movs	r2, #0
 801f6ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801f6cc:	bf00      	nop
 801f6ce:	370c      	adds	r7, #12
 801f6d0:	46bd      	mov	sp, r7
 801f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6d6:	4770      	bx	lr

0801f6d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801f6d8:	b480      	push	{r7}
 801f6da:	b083      	sub	sp, #12
 801f6dc:	af00      	add	r7, sp, #0
 801f6de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	2200      	movs	r2, #0
 801f6e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801f6e6:	bf00      	nop
 801f6e8:	370c      	adds	r7, #12
 801f6ea:	46bd      	mov	sp, r7
 801f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6f0:	4770      	bx	lr

0801f6f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f6f2:	b480      	push	{r7}
 801f6f4:	b085      	sub	sp, #20
 801f6f6:	af00      	add	r7, sp, #0
 801f6f8:	6078      	str	r0, [r7, #4]
 801f6fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	685b      	ldr	r3, [r3, #4]
 801f700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801f702:	683b      	ldr	r3, [r7, #0]
 801f704:	68fa      	ldr	r2, [r7, #12]
 801f706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801f708:	68fb      	ldr	r3, [r7, #12]
 801f70a:	689a      	ldr	r2, [r3, #8]
 801f70c:	683b      	ldr	r3, [r7, #0]
 801f70e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801f710:	68fb      	ldr	r3, [r7, #12]
 801f712:	689b      	ldr	r3, [r3, #8]
 801f714:	683a      	ldr	r2, [r7, #0]
 801f716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	683a      	ldr	r2, [r7, #0]
 801f71c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801f71e:	683b      	ldr	r3, [r7, #0]
 801f720:	687a      	ldr	r2, [r7, #4]
 801f722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	1c5a      	adds	r2, r3, #1
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	601a      	str	r2, [r3, #0]
}
 801f72e:	bf00      	nop
 801f730:	3714      	adds	r7, #20
 801f732:	46bd      	mov	sp, r7
 801f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f738:	4770      	bx	lr

0801f73a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f73a:	b480      	push	{r7}
 801f73c:	b085      	sub	sp, #20
 801f73e:	af00      	add	r7, sp, #0
 801f740:	6078      	str	r0, [r7, #4]
 801f742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801f744:	683b      	ldr	r3, [r7, #0]
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801f74a:	68bb      	ldr	r3, [r7, #8]
 801f74c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f750:	d103      	bne.n	801f75a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	691b      	ldr	r3, [r3, #16]
 801f756:	60fb      	str	r3, [r7, #12]
 801f758:	e00c      	b.n	801f774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	3308      	adds	r3, #8
 801f75e:	60fb      	str	r3, [r7, #12]
 801f760:	e002      	b.n	801f768 <vListInsert+0x2e>
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	685b      	ldr	r3, [r3, #4]
 801f766:	60fb      	str	r3, [r7, #12]
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	685b      	ldr	r3, [r3, #4]
 801f76c:	681b      	ldr	r3, [r3, #0]
 801f76e:	68ba      	ldr	r2, [r7, #8]
 801f770:	429a      	cmp	r2, r3
 801f772:	d2f6      	bcs.n	801f762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	685a      	ldr	r2, [r3, #4]
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801f77c:	683b      	ldr	r3, [r7, #0]
 801f77e:	685b      	ldr	r3, [r3, #4]
 801f780:	683a      	ldr	r2, [r7, #0]
 801f782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801f784:	683b      	ldr	r3, [r7, #0]
 801f786:	68fa      	ldr	r2, [r7, #12]
 801f788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	683a      	ldr	r2, [r7, #0]
 801f78e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801f790:	683b      	ldr	r3, [r7, #0]
 801f792:	687a      	ldr	r2, [r7, #4]
 801f794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	1c5a      	adds	r2, r3, #1
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	601a      	str	r2, [r3, #0]
}
 801f7a0:	bf00      	nop
 801f7a2:	3714      	adds	r7, #20
 801f7a4:	46bd      	mov	sp, r7
 801f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7aa:	4770      	bx	lr

0801f7ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801f7ac:	b480      	push	{r7}
 801f7ae:	b085      	sub	sp, #20
 801f7b0:	af00      	add	r7, sp, #0
 801f7b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	691b      	ldr	r3, [r3, #16]
 801f7b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	685b      	ldr	r3, [r3, #4]
 801f7be:	687a      	ldr	r2, [r7, #4]
 801f7c0:	6892      	ldr	r2, [r2, #8]
 801f7c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	689b      	ldr	r3, [r3, #8]
 801f7c8:	687a      	ldr	r2, [r7, #4]
 801f7ca:	6852      	ldr	r2, [r2, #4]
 801f7cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801f7ce:	68fb      	ldr	r3, [r7, #12]
 801f7d0:	685b      	ldr	r3, [r3, #4]
 801f7d2:	687a      	ldr	r2, [r7, #4]
 801f7d4:	429a      	cmp	r2, r3
 801f7d6:	d103      	bne.n	801f7e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	689a      	ldr	r2, [r3, #8]
 801f7dc:	68fb      	ldr	r3, [r7, #12]
 801f7de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801f7e6:	68fb      	ldr	r3, [r7, #12]
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	1e5a      	subs	r2, r3, #1
 801f7ec:	68fb      	ldr	r3, [r7, #12]
 801f7ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	681b      	ldr	r3, [r3, #0]
}
 801f7f4:	4618      	mov	r0, r3
 801f7f6:	3714      	adds	r7, #20
 801f7f8:	46bd      	mov	sp, r7
 801f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7fe:	4770      	bx	lr

0801f800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801f800:	b580      	push	{r7, lr}
 801f802:	b084      	sub	sp, #16
 801f804:	af00      	add	r7, sp, #0
 801f806:	6078      	str	r0, [r7, #4]
 801f808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801f80e:	68fb      	ldr	r3, [r7, #12]
 801f810:	2b00      	cmp	r3, #0
 801f812:	d105      	bne.n	801f820 <xQueueGenericReset+0x20>
 801f814:	f240 1203 	movw	r2, #259	; 0x103
 801f818:	492a      	ldr	r1, [pc, #168]	; (801f8c4 <xQueueGenericReset+0xc4>)
 801f81a:	482b      	ldr	r0, [pc, #172]	; (801f8c8 <xQueueGenericReset+0xc8>)
 801f81c:	f7f2 fc06 	bl	801202c <assertFail>

	taskENTER_CRITICAL();
 801f820:	f002 ff8e 	bl	8022740 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	681a      	ldr	r2, [r3, #0]
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f82c:	68f9      	ldr	r1, [r7, #12]
 801f82e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801f830:	fb01 f303 	mul.w	r3, r1, r3
 801f834:	441a      	add	r2, r3
 801f836:	68fb      	ldr	r3, [r7, #12]
 801f838:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801f83a:	68fb      	ldr	r3, [r7, #12]
 801f83c:	2200      	movs	r2, #0
 801f83e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	681a      	ldr	r2, [r3, #0]
 801f844:	68fb      	ldr	r3, [r7, #12]
 801f846:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	681a      	ldr	r2, [r3, #0]
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f850:	3b01      	subs	r3, #1
 801f852:	68f9      	ldr	r1, [r7, #12]
 801f854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801f856:	fb01 f303 	mul.w	r3, r1, r3
 801f85a:	441a      	add	r2, r3
 801f85c:	68fb      	ldr	r3, [r7, #12]
 801f85e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	22ff      	movs	r2, #255	; 0xff
 801f864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801f868:	68fb      	ldr	r3, [r7, #12]
 801f86a:	22ff      	movs	r2, #255	; 0xff
 801f86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801f870:	683b      	ldr	r3, [r7, #0]
 801f872:	2b00      	cmp	r3, #0
 801f874:	d114      	bne.n	801f8a0 <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	691b      	ldr	r3, [r3, #16]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d01a      	beq.n	801f8b4 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	3310      	adds	r3, #16
 801f882:	4618      	mov	r0, r3
 801f884:	f001 fd16 	bl	80212b4 <xTaskRemoveFromEventList>
 801f888:	4603      	mov	r3, r0
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d012      	beq.n	801f8b4 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801f88e:	4b0f      	ldr	r3, [pc, #60]	; (801f8cc <xQueueGenericReset+0xcc>)
 801f890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f894:	601a      	str	r2, [r3, #0]
 801f896:	f3bf 8f4f 	dsb	sy
 801f89a:	f3bf 8f6f 	isb	sy
 801f89e:	e009      	b.n	801f8b4 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	3310      	adds	r3, #16
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	f7ff fef7 	bl	801f698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801f8aa:	68fb      	ldr	r3, [r7, #12]
 801f8ac:	3324      	adds	r3, #36	; 0x24
 801f8ae:	4618      	mov	r0, r3
 801f8b0:	f7ff fef2 	bl	801f698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801f8b4:	f002 ff72 	bl	802279c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801f8b8:	2301      	movs	r3, #1
}
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	3710      	adds	r7, #16
 801f8be:	46bd      	mov	sp, r7
 801f8c0:	bd80      	pop	{r7, pc}
 801f8c2:	bf00      	nop
 801f8c4:	0802e2a8 	.word	0x0802e2a8
 801f8c8:	0802e2dc 	.word	0x0802e2dc
 801f8cc:	e000ed04 	.word	0xe000ed04

0801f8d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801f8d0:	b580      	push	{r7, lr}
 801f8d2:	b088      	sub	sp, #32
 801f8d4:	af02      	add	r7, sp, #8
 801f8d6:	60f8      	str	r0, [r7, #12]
 801f8d8:	60b9      	str	r1, [r7, #8]
 801f8da:	607a      	str	r2, [r7, #4]
 801f8dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d105      	bne.n	801f8f0 <xQueueGenericCreateStatic+0x20>
 801f8e4:	f44f 729d 	mov.w	r2, #314	; 0x13a
 801f8e8:	4929      	ldr	r1, [pc, #164]	; (801f990 <xQueueGenericCreateStatic+0xc0>)
 801f8ea:	482a      	ldr	r0, [pc, #168]	; (801f994 <xQueueGenericCreateStatic+0xc4>)
 801f8ec:	f7f2 fb9e 	bl	801202c <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801f8f0:	683b      	ldr	r3, [r7, #0]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d105      	bne.n	801f902 <xQueueGenericCreateStatic+0x32>
 801f8f6:	f44f 729f 	mov.w	r2, #318	; 0x13e
 801f8fa:	4925      	ldr	r1, [pc, #148]	; (801f990 <xQueueGenericCreateStatic+0xc0>)
 801f8fc:	4826      	ldr	r0, [pc, #152]	; (801f998 <xQueueGenericCreateStatic+0xc8>)
 801f8fe:	f7f2 fb95 	bl	801202c <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d002      	beq.n	801f90e <xQueueGenericCreateStatic+0x3e>
 801f908:	68bb      	ldr	r3, [r7, #8]
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	d001      	beq.n	801f912 <xQueueGenericCreateStatic+0x42>
 801f90e:	2301      	movs	r3, #1
 801f910:	e000      	b.n	801f914 <xQueueGenericCreateStatic+0x44>
 801f912:	2300      	movs	r3, #0
 801f914:	2b00      	cmp	r3, #0
 801f916:	d105      	bne.n	801f924 <xQueueGenericCreateStatic+0x54>
 801f918:	f44f 72a1 	mov.w	r2, #322	; 0x142
 801f91c:	491c      	ldr	r1, [pc, #112]	; (801f990 <xQueueGenericCreateStatic+0xc0>)
 801f91e:	481f      	ldr	r0, [pc, #124]	; (801f99c <xQueueGenericCreateStatic+0xcc>)
 801f920:	f7f2 fb84 	bl	801202c <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	2b00      	cmp	r3, #0
 801f928:	d102      	bne.n	801f930 <xQueueGenericCreateStatic+0x60>
 801f92a:	68bb      	ldr	r3, [r7, #8]
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	d101      	bne.n	801f934 <xQueueGenericCreateStatic+0x64>
 801f930:	2301      	movs	r3, #1
 801f932:	e000      	b.n	801f936 <xQueueGenericCreateStatic+0x66>
 801f934:	2300      	movs	r3, #0
 801f936:	2b00      	cmp	r3, #0
 801f938:	d105      	bne.n	801f946 <xQueueGenericCreateStatic+0x76>
 801f93a:	f240 1243 	movw	r2, #323	; 0x143
 801f93e:	4914      	ldr	r1, [pc, #80]	; (801f990 <xQueueGenericCreateStatic+0xc0>)
 801f940:	4817      	ldr	r0, [pc, #92]	; (801f9a0 <xQueueGenericCreateStatic+0xd0>)
 801f942:	f7f2 fb73 	bl	801202c <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801f946:	2350      	movs	r3, #80	; 0x50
 801f948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801f94a:	693b      	ldr	r3, [r7, #16]
 801f94c:	2b50      	cmp	r3, #80	; 0x50
 801f94e:	d005      	beq.n	801f95c <xQueueGenericCreateStatic+0x8c>
 801f950:	f240 124b 	movw	r2, #331	; 0x14b
 801f954:	490e      	ldr	r1, [pc, #56]	; (801f990 <xQueueGenericCreateStatic+0xc0>)
 801f956:	4813      	ldr	r0, [pc, #76]	; (801f9a4 <xQueueGenericCreateStatic+0xd4>)
 801f958:	f7f2 fb68 	bl	801202c <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801f95c:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f95e:	683b      	ldr	r3, [r7, #0]
 801f960:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801f962:	697b      	ldr	r3, [r7, #20]
 801f964:	2b00      	cmp	r3, #0
 801f966:	d00d      	beq.n	801f984 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801f968:	697b      	ldr	r3, [r7, #20]
 801f96a:	2201      	movs	r2, #1
 801f96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801f970:	f897 2020 	ldrb.w	r2, [r7, #32]
 801f974:	697b      	ldr	r3, [r7, #20]
 801f976:	9300      	str	r3, [sp, #0]
 801f978:	4613      	mov	r3, r2
 801f97a:	687a      	ldr	r2, [r7, #4]
 801f97c:	68b9      	ldr	r1, [r7, #8]
 801f97e:	68f8      	ldr	r0, [r7, #12]
 801f980:	f000 f84c 	bl	801fa1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801f984:	697b      	ldr	r3, [r7, #20]
	}
 801f986:	4618      	mov	r0, r3
 801f988:	3718      	adds	r7, #24
 801f98a:	46bd      	mov	sp, r7
 801f98c:	bd80      	pop	{r7, pc}
 801f98e:	bf00      	nop
 801f990:	0802e2a8 	.word	0x0802e2a8
 801f994:	0802e2e4 	.word	0x0802e2e4
 801f998:	0802e308 	.word	0x0802e308
 801f99c:	0802e320 	.word	0x0802e320
 801f9a0:	0802e358 	.word	0x0802e358
 801f9a4:	0802e390 	.word	0x0802e390

0801f9a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b08a      	sub	sp, #40	; 0x28
 801f9ac:	af02      	add	r7, sp, #8
 801f9ae:	60f8      	str	r0, [r7, #12]
 801f9b0:	60b9      	str	r1, [r7, #8]
 801f9b2:	4613      	mov	r3, r2
 801f9b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d105      	bne.n	801f9c8 <xQueueGenericCreate+0x20>
 801f9bc:	f44f 72bb 	mov.w	r2, #374	; 0x176
 801f9c0:	4914      	ldr	r1, [pc, #80]	; (801fa14 <xQueueGenericCreate+0x6c>)
 801f9c2:	4815      	ldr	r0, [pc, #84]	; (801fa18 <xQueueGenericCreate+0x70>)
 801f9c4:	f7f2 fb32 	bl	801202c <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	68ba      	ldr	r2, [r7, #8]
 801f9cc:	fb02 f303 	mul.w	r3, r2, r3
 801f9d0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801f9d2:	69fb      	ldr	r3, [r7, #28]
 801f9d4:	3350      	adds	r3, #80	; 0x50
 801f9d6:	4618      	mov	r0, r3
 801f9d8:	f002 ffc2 	bl	8022960 <pvPortMalloc>
 801f9dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801f9de:	69bb      	ldr	r3, [r7, #24]
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d011      	beq.n	801fa08 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801f9e4:	69bb      	ldr	r3, [r7, #24]
 801f9e6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801f9e8:	697b      	ldr	r3, [r7, #20]
 801f9ea:	3350      	adds	r3, #80	; 0x50
 801f9ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801f9ee:	69bb      	ldr	r3, [r7, #24]
 801f9f0:	2200      	movs	r2, #0
 801f9f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801f9f6:	79fa      	ldrb	r2, [r7, #7]
 801f9f8:	69bb      	ldr	r3, [r7, #24]
 801f9fa:	9300      	str	r3, [sp, #0]
 801f9fc:	4613      	mov	r3, r2
 801f9fe:	697a      	ldr	r2, [r7, #20]
 801fa00:	68b9      	ldr	r1, [r7, #8]
 801fa02:	68f8      	ldr	r0, [r7, #12]
 801fa04:	f000 f80a 	bl	801fa1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801fa08:	69bb      	ldr	r3, [r7, #24]
	}
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	3720      	adds	r7, #32
 801fa0e:	46bd      	mov	sp, r7
 801fa10:	bd80      	pop	{r7, pc}
 801fa12:	bf00      	nop
 801fa14:	0802e2a8 	.word	0x0802e2a8
 801fa18:	0802e2e4 	.word	0x0802e2e4

0801fa1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801fa1c:	b580      	push	{r7, lr}
 801fa1e:	b084      	sub	sp, #16
 801fa20:	af00      	add	r7, sp, #0
 801fa22:	60f8      	str	r0, [r7, #12]
 801fa24:	60b9      	str	r1, [r7, #8]
 801fa26:	607a      	str	r2, [r7, #4]
 801fa28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801fa2a:	68bb      	ldr	r3, [r7, #8]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d103      	bne.n	801fa38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801fa30:	69bb      	ldr	r3, [r7, #24]
 801fa32:	69ba      	ldr	r2, [r7, #24]
 801fa34:	601a      	str	r2, [r3, #0]
 801fa36:	e002      	b.n	801fa3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801fa38:	69bb      	ldr	r3, [r7, #24]
 801fa3a:	687a      	ldr	r2, [r7, #4]
 801fa3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801fa3e:	69bb      	ldr	r3, [r7, #24]
 801fa40:	68fa      	ldr	r2, [r7, #12]
 801fa42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801fa44:	69bb      	ldr	r3, [r7, #24]
 801fa46:	68ba      	ldr	r2, [r7, #8]
 801fa48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801fa4a:	2101      	movs	r1, #1
 801fa4c:	69b8      	ldr	r0, [r7, #24]
 801fa4e:	f7ff fed7 	bl	801f800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801fa52:	69bb      	ldr	r3, [r7, #24]
 801fa54:	78fa      	ldrb	r2, [r7, #3]
 801fa56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801fa5a:	bf00      	nop
 801fa5c:	3710      	adds	r7, #16
 801fa5e:	46bd      	mov	sp, r7
 801fa60:	bd80      	pop	{r7, pc}

0801fa62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801fa62:	b580      	push	{r7, lr}
 801fa64:	b082      	sub	sp, #8
 801fa66:	af00      	add	r7, sp, #0
 801fa68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d00e      	beq.n	801fa8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	2200      	movs	r2, #0
 801fa74:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	2200      	movs	r2, #0
 801fa7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	2200      	movs	r2, #0
 801fa80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801fa82:	2300      	movs	r3, #0
 801fa84:	2200      	movs	r2, #0
 801fa86:	2100      	movs	r1, #0
 801fa88:	6878      	ldr	r0, [r7, #4]
 801fa8a:	f000 f837 	bl	801fafc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801fa8e:	bf00      	nop
 801fa90:	3708      	adds	r7, #8
 801fa92:	46bd      	mov	sp, r7
 801fa94:	bd80      	pop	{r7, pc}

0801fa96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801fa96:	b580      	push	{r7, lr}
 801fa98:	b086      	sub	sp, #24
 801fa9a:	af00      	add	r7, sp, #0
 801fa9c:	4603      	mov	r3, r0
 801fa9e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801faa0:	2301      	movs	r3, #1
 801faa2:	617b      	str	r3, [r7, #20]
 801faa4:	2300      	movs	r3, #0
 801faa6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801faa8:	79fb      	ldrb	r3, [r7, #7]
 801faaa:	461a      	mov	r2, r3
 801faac:	6939      	ldr	r1, [r7, #16]
 801faae:	6978      	ldr	r0, [r7, #20]
 801fab0:	f7ff ff7a 	bl	801f9a8 <xQueueGenericCreate>
 801fab4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801fab6:	68f8      	ldr	r0, [r7, #12]
 801fab8:	f7ff ffd3 	bl	801fa62 <prvInitialiseMutex>

		return xNewQueue;
 801fabc:	68fb      	ldr	r3, [r7, #12]
	}
 801fabe:	4618      	mov	r0, r3
 801fac0:	3718      	adds	r7, #24
 801fac2:	46bd      	mov	sp, r7
 801fac4:	bd80      	pop	{r7, pc}

0801fac6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801fac6:	b580      	push	{r7, lr}
 801fac8:	b088      	sub	sp, #32
 801faca:	af02      	add	r7, sp, #8
 801facc:	4603      	mov	r3, r0
 801face:	6039      	str	r1, [r7, #0]
 801fad0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801fad2:	2301      	movs	r3, #1
 801fad4:	617b      	str	r3, [r7, #20]
 801fad6:	2300      	movs	r3, #0
 801fad8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801fada:	79fb      	ldrb	r3, [r7, #7]
 801fadc:	9300      	str	r3, [sp, #0]
 801fade:	683b      	ldr	r3, [r7, #0]
 801fae0:	2200      	movs	r2, #0
 801fae2:	6939      	ldr	r1, [r7, #16]
 801fae4:	6978      	ldr	r0, [r7, #20]
 801fae6:	f7ff fef3 	bl	801f8d0 <xQueueGenericCreateStatic>
 801faea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801faec:	68f8      	ldr	r0, [r7, #12]
 801faee:	f7ff ffb8 	bl	801fa62 <prvInitialiseMutex>

		return xNewQueue;
 801faf2:	68fb      	ldr	r3, [r7, #12]
	}
 801faf4:	4618      	mov	r0, r3
 801faf6:	3718      	adds	r7, #24
 801faf8:	46bd      	mov	sp, r7
 801fafa:	bd80      	pop	{r7, pc}

0801fafc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801fafc:	b580      	push	{r7, lr}
 801fafe:	b08a      	sub	sp, #40	; 0x28
 801fb00:	af00      	add	r7, sp, #0
 801fb02:	60f8      	str	r0, [r7, #12]
 801fb04:	60b9      	str	r1, [r7, #8]
 801fb06:	607a      	str	r2, [r7, #4]
 801fb08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801fb0a:	2300      	movs	r3, #0
 801fb0c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801fb0e:	68fb      	ldr	r3, [r7, #12]
 801fb10:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801fb12:	6a3b      	ldr	r3, [r7, #32]
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	d105      	bne.n	801fb24 <xQueueGenericSend+0x28>
 801fb18:	f240 22ea 	movw	r2, #746	; 0x2ea
 801fb1c:	4977      	ldr	r1, [pc, #476]	; (801fcfc <xQueueGenericSend+0x200>)
 801fb1e:	4878      	ldr	r0, [pc, #480]	; (801fd00 <xQueueGenericSend+0x204>)
 801fb20:	f7f2 fa84 	bl	801202c <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801fb24:	68bb      	ldr	r3, [r7, #8]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d103      	bne.n	801fb32 <xQueueGenericSend+0x36>
 801fb2a:	6a3b      	ldr	r3, [r7, #32]
 801fb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d101      	bne.n	801fb36 <xQueueGenericSend+0x3a>
 801fb32:	2301      	movs	r3, #1
 801fb34:	e000      	b.n	801fb38 <xQueueGenericSend+0x3c>
 801fb36:	2300      	movs	r3, #0
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d105      	bne.n	801fb48 <xQueueGenericSend+0x4c>
 801fb3c:	f240 22eb 	movw	r2, #747	; 0x2eb
 801fb40:	496e      	ldr	r1, [pc, #440]	; (801fcfc <xQueueGenericSend+0x200>)
 801fb42:	4870      	ldr	r0, [pc, #448]	; (801fd04 <xQueueGenericSend+0x208>)
 801fb44:	f7f2 fa72 	bl	801202c <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801fb48:	683b      	ldr	r3, [r7, #0]
 801fb4a:	2b02      	cmp	r3, #2
 801fb4c:	d103      	bne.n	801fb56 <xQueueGenericSend+0x5a>
 801fb4e:	6a3b      	ldr	r3, [r7, #32]
 801fb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fb52:	2b01      	cmp	r3, #1
 801fb54:	d101      	bne.n	801fb5a <xQueueGenericSend+0x5e>
 801fb56:	2301      	movs	r3, #1
 801fb58:	e000      	b.n	801fb5c <xQueueGenericSend+0x60>
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d105      	bne.n	801fb6c <xQueueGenericSend+0x70>
 801fb60:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 801fb64:	4965      	ldr	r1, [pc, #404]	; (801fcfc <xQueueGenericSend+0x200>)
 801fb66:	4868      	ldr	r0, [pc, #416]	; (801fd08 <xQueueGenericSend+0x20c>)
 801fb68:	f7f2 fa60 	bl	801202c <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801fb6c:	f001 fe34 	bl	80217d8 <xTaskGetSchedulerState>
 801fb70:	4603      	mov	r3, r0
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d102      	bne.n	801fb7c <xQueueGenericSend+0x80>
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d101      	bne.n	801fb80 <xQueueGenericSend+0x84>
 801fb7c:	2301      	movs	r3, #1
 801fb7e:	e000      	b.n	801fb82 <xQueueGenericSend+0x86>
 801fb80:	2300      	movs	r3, #0
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d105      	bne.n	801fb92 <xQueueGenericSend+0x96>
 801fb86:	f240 22ef 	movw	r2, #751	; 0x2ef
 801fb8a:	495c      	ldr	r1, [pc, #368]	; (801fcfc <xQueueGenericSend+0x200>)
 801fb8c:	485f      	ldr	r0, [pc, #380]	; (801fd0c <xQueueGenericSend+0x210>)
 801fb8e:	f7f2 fa4d 	bl	801202c <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801fb92:	f002 fdd5 	bl	8022740 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801fb96:	6a3b      	ldr	r3, [r7, #32]
 801fb98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fb9a:	6a3b      	ldr	r3, [r7, #32]
 801fb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fb9e:	429a      	cmp	r2, r3
 801fba0:	d302      	bcc.n	801fba8 <xQueueGenericSend+0xac>
 801fba2:	683b      	ldr	r3, [r7, #0]
 801fba4:	2b02      	cmp	r3, #2
 801fba6:	d12f      	bne.n	801fc08 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 801fba8:	6a3b      	ldr	r3, [r7, #32]
 801fbaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fbac:	4a58      	ldr	r2, [pc, #352]	; (801fd10 <xQueueGenericSend+0x214>)
 801fbae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fbb2:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801fbb4:	683a      	ldr	r2, [r7, #0]
 801fbb6:	68b9      	ldr	r1, [r7, #8]
 801fbb8:	6a38      	ldr	r0, [r7, #32]
 801fbba:	f000 fc2b 	bl	8020414 <prvCopyDataToQueue>
 801fbbe:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801fbc0:	6a3b      	ldr	r3, [r7, #32]
 801fbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	d010      	beq.n	801fbea <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801fbc8:	6a3b      	ldr	r3, [r7, #32]
 801fbca:	3324      	adds	r3, #36	; 0x24
 801fbcc:	4618      	mov	r0, r3
 801fbce:	f001 fb71 	bl	80212b4 <xTaskRemoveFromEventList>
 801fbd2:	4603      	mov	r3, r0
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	d013      	beq.n	801fc00 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801fbd8:	4b4e      	ldr	r3, [pc, #312]	; (801fd14 <xQueueGenericSend+0x218>)
 801fbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fbde:	601a      	str	r2, [r3, #0]
 801fbe0:	f3bf 8f4f 	dsb	sy
 801fbe4:	f3bf 8f6f 	isb	sy
 801fbe8:	e00a      	b.n	801fc00 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801fbea:	69fb      	ldr	r3, [r7, #28]
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d007      	beq.n	801fc00 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801fbf0:	4b48      	ldr	r3, [pc, #288]	; (801fd14 <xQueueGenericSend+0x218>)
 801fbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fbf6:	601a      	str	r2, [r3, #0]
 801fbf8:	f3bf 8f4f 	dsb	sy
 801fbfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801fc00:	f002 fdcc 	bl	802279c <vPortExitCritical>
				return pdPASS;
 801fc04:	2301      	movs	r3, #1
 801fc06:	e075      	b.n	801fcf4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	d109      	bne.n	801fc22 <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801fc0e:	f002 fdc5 	bl	802279c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 801fc12:	6a3b      	ldr	r3, [r7, #32]
 801fc14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fc16:	4a3e      	ldr	r2, [pc, #248]	; (801fd10 <xQueueGenericSend+0x214>)
 801fc18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801fc1c:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 801fc1e:	2300      	movs	r3, #0
 801fc20:	e068      	b.n	801fcf4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801fc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d106      	bne.n	801fc36 <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801fc28:	f107 0314 	add.w	r3, r7, #20
 801fc2c:	4618      	mov	r0, r3
 801fc2e:	f001 fba3 	bl	8021378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801fc32:	2301      	movs	r3, #1
 801fc34:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801fc36:	f002 fdb1 	bl	802279c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801fc3a:	f001 f825 	bl	8020c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801fc3e:	f002 fd7f 	bl	8022740 <vPortEnterCritical>
 801fc42:	6a3b      	ldr	r3, [r7, #32]
 801fc44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fc48:	b25b      	sxtb	r3, r3
 801fc4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fc4e:	d103      	bne.n	801fc58 <xQueueGenericSend+0x15c>
 801fc50:	6a3b      	ldr	r3, [r7, #32]
 801fc52:	2200      	movs	r2, #0
 801fc54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fc58:	6a3b      	ldr	r3, [r7, #32]
 801fc5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fc5e:	b25b      	sxtb	r3, r3
 801fc60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fc64:	d103      	bne.n	801fc6e <xQueueGenericSend+0x172>
 801fc66:	6a3b      	ldr	r3, [r7, #32]
 801fc68:	2200      	movs	r2, #0
 801fc6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fc6e:	f002 fd95 	bl	802279c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801fc72:	1d3a      	adds	r2, r7, #4
 801fc74:	f107 0314 	add.w	r3, r7, #20
 801fc78:	4611      	mov	r1, r2
 801fc7a:	4618      	mov	r0, r3
 801fc7c:	f001 fb92 	bl	80213a4 <xTaskCheckForTimeOut>
 801fc80:	4603      	mov	r3, r0
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	d12a      	bne.n	801fcdc <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801fc86:	6a38      	ldr	r0, [r7, #32]
 801fc88:	f000 fcbc 	bl	8020604 <prvIsQueueFull>
 801fc8c:	4603      	mov	r3, r0
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d01e      	beq.n	801fcd0 <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 801fc92:	6a3b      	ldr	r3, [r7, #32]
 801fc94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fc96:	4a1e      	ldr	r2, [pc, #120]	; (801fd10 <xQueueGenericSend+0x214>)
 801fc98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801fc9c:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801fc9e:	6a3b      	ldr	r3, [r7, #32]
 801fca0:	3310      	adds	r3, #16
 801fca2:	687a      	ldr	r2, [r7, #4]
 801fca4:	4611      	mov	r1, r2
 801fca6:	4618      	mov	r0, r3
 801fca8:	f001 fab6 	bl	8021218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801fcac:	6a38      	ldr	r0, [r7, #32]
 801fcae:	f000 fc41 	bl	8020534 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801fcb2:	f000 fff7 	bl	8020ca4 <xTaskResumeAll>
 801fcb6:	4603      	mov	r3, r0
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	f47f af6a 	bne.w	801fb92 <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 801fcbe:	4b15      	ldr	r3, [pc, #84]	; (801fd14 <xQueueGenericSend+0x218>)
 801fcc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fcc4:	601a      	str	r2, [r3, #0]
 801fcc6:	f3bf 8f4f 	dsb	sy
 801fcca:	f3bf 8f6f 	isb	sy
 801fcce:	e760      	b.n	801fb92 <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801fcd0:	6a38      	ldr	r0, [r7, #32]
 801fcd2:	f000 fc2f 	bl	8020534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801fcd6:	f000 ffe5 	bl	8020ca4 <xTaskResumeAll>
 801fcda:	e75a      	b.n	801fb92 <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801fcdc:	6a38      	ldr	r0, [r7, #32]
 801fcde:	f000 fc29 	bl	8020534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801fce2:	f000 ffdf 	bl	8020ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 801fce6:	6a3b      	ldr	r3, [r7, #32]
 801fce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fcea:	4a09      	ldr	r2, [pc, #36]	; (801fd10 <xQueueGenericSend+0x214>)
 801fcec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801fcf0:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 801fcf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801fcf4:	4618      	mov	r0, r3
 801fcf6:	3728      	adds	r7, #40	; 0x28
 801fcf8:	46bd      	mov	sp, r7
 801fcfa:	bd80      	pop	{r7, pc}
 801fcfc:	0802e2a8 	.word	0x0802e2a8
 801fd00:	0802e2dc 	.word	0x0802e2dc
 801fd04:	0802e3ac 	.word	0x0802e3ac
 801fd08:	0802e3fc 	.word	0x0802e3fc
 801fd0c:	0802e444 	.word	0x0802e444
 801fd10:	e000000c 	.word	0xe000000c
 801fd14:	e000ed04 	.word	0xe000ed04

0801fd18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801fd18:	b580      	push	{r7, lr}
 801fd1a:	b08c      	sub	sp, #48	; 0x30
 801fd1c:	af00      	add	r7, sp, #0
 801fd1e:	60f8      	str	r0, [r7, #12]
 801fd20:	60b9      	str	r1, [r7, #8]
 801fd22:	607a      	str	r2, [r7, #4]
 801fd24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 801fd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	d105      	bne.n	801fd3c <xQueueGenericSendFromISR+0x24>
 801fd30:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 801fd34:	493e      	ldr	r1, [pc, #248]	; (801fe30 <xQueueGenericSendFromISR+0x118>)
 801fd36:	483f      	ldr	r0, [pc, #252]	; (801fe34 <xQueueGenericSendFromISR+0x11c>)
 801fd38:	f7f2 f978 	bl	801202c <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801fd3c:	68bb      	ldr	r3, [r7, #8]
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d103      	bne.n	801fd4a <xQueueGenericSendFromISR+0x32>
 801fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d101      	bne.n	801fd4e <xQueueGenericSendFromISR+0x36>
 801fd4a:	2301      	movs	r3, #1
 801fd4c:	e000      	b.n	801fd50 <xQueueGenericSendFromISR+0x38>
 801fd4e:	2300      	movs	r3, #0
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d105      	bne.n	801fd60 <xQueueGenericSendFromISR+0x48>
 801fd54:	f240 32bd 	movw	r2, #957	; 0x3bd
 801fd58:	4935      	ldr	r1, [pc, #212]	; (801fe30 <xQueueGenericSendFromISR+0x118>)
 801fd5a:	4837      	ldr	r0, [pc, #220]	; (801fe38 <xQueueGenericSendFromISR+0x120>)
 801fd5c:	f7f2 f966 	bl	801202c <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801fd60:	683b      	ldr	r3, [r7, #0]
 801fd62:	2b02      	cmp	r3, #2
 801fd64:	d103      	bne.n	801fd6e <xQueueGenericSendFromISR+0x56>
 801fd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd6a:	2b01      	cmp	r3, #1
 801fd6c:	d101      	bne.n	801fd72 <xQueueGenericSendFromISR+0x5a>
 801fd6e:	2301      	movs	r3, #1
 801fd70:	e000      	b.n	801fd74 <xQueueGenericSendFromISR+0x5c>
 801fd72:	2300      	movs	r3, #0
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d105      	bne.n	801fd84 <xQueueGenericSendFromISR+0x6c>
 801fd78:	f240 32be 	movw	r2, #958	; 0x3be
 801fd7c:	492c      	ldr	r1, [pc, #176]	; (801fe30 <xQueueGenericSendFromISR+0x118>)
 801fd7e:	482f      	ldr	r0, [pc, #188]	; (801fe3c <xQueueGenericSendFromISR+0x124>)
 801fd80:	f7f2 f954 	bl	801202c <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801fd84:	f002 fdb2 	bl	80228ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801fd88:	f3ef 8211 	mrs	r2, BASEPRI
 801fd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd90:	f383 8811 	msr	BASEPRI, r3
 801fd94:	f3bf 8f6f 	isb	sy
 801fd98:	f3bf 8f4f 	dsb	sy
 801fd9c:	61ba      	str	r2, [r7, #24]
 801fd9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801fda0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801fda2:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fda6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fdac:	429a      	cmp	r2, r3
 801fdae:	d302      	bcc.n	801fdb6 <xQueueGenericSendFromISR+0x9e>
 801fdb0:	683b      	ldr	r3, [r7, #0]
 801fdb2:	2b02      	cmp	r3, #2
 801fdb4:	d12f      	bne.n	801fe16 <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801fdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fdbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdc4:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801fdc6:	683a      	ldr	r2, [r7, #0]
 801fdc8:	68b9      	ldr	r1, [r7, #8]
 801fdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fdcc:	f000 fb22 	bl	8020414 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801fdd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801fdd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fdd8:	d112      	bne.n	801fe00 <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801fdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d016      	beq.n	801fe10 <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fde4:	3324      	adds	r3, #36	; 0x24
 801fde6:	4618      	mov	r0, r3
 801fde8:	f001 fa64 	bl	80212b4 <xTaskRemoveFromEventList>
 801fdec:	4603      	mov	r3, r0
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	d00e      	beq.n	801fe10 <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d00b      	beq.n	801fe10 <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	2201      	movs	r2, #1
 801fdfc:	601a      	str	r2, [r3, #0]
 801fdfe:	e007      	b.n	801fe10 <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801fe00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fe04:	3301      	adds	r3, #1
 801fe06:	b2db      	uxtb	r3, r3
 801fe08:	b25a      	sxtb	r2, r3
 801fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801fe10:	2301      	movs	r3, #1
 801fe12:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 801fe14:	e001      	b.n	801fe1a <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801fe16:	2300      	movs	r3, #0
 801fe18:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fe1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801fe1e:	693b      	ldr	r3, [r7, #16]
 801fe20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801fe24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801fe26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801fe28:	4618      	mov	r0, r3
 801fe2a:	3730      	adds	r7, #48	; 0x30
 801fe2c:	46bd      	mov	sp, r7
 801fe2e:	bd80      	pop	{r7, pc}
 801fe30:	0802e2a8 	.word	0x0802e2a8
 801fe34:	0802e2dc 	.word	0x0802e2dc
 801fe38:	0802e3ac 	.word	0x0802e3ac
 801fe3c:	0802e3fc 	.word	0x0802e3fc

0801fe40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801fe40:	b580      	push	{r7, lr}
 801fe42:	b08a      	sub	sp, #40	; 0x28
 801fe44:	af00      	add	r7, sp, #0
 801fe46:	60f8      	str	r0, [r7, #12]
 801fe48:	60b9      	str	r1, [r7, #8]
 801fe4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801fe4c:	2300      	movs	r3, #0
 801fe4e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801fe50:	68fb      	ldr	r3, [r7, #12]
 801fe52:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801fe54:	6a3b      	ldr	r3, [r7, #32]
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d105      	bne.n	801fe66 <xQueueReceive+0x26>
 801fe5a:	f240 5204 	movw	r2, #1284	; 0x504
 801fe5e:	4962      	ldr	r1, [pc, #392]	; (801ffe8 <xQueueReceive+0x1a8>)
 801fe60:	4862      	ldr	r0, [pc, #392]	; (801ffec <xQueueReceive+0x1ac>)
 801fe62:	f7f2 f8e3 	bl	801202c <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801fe66:	68bb      	ldr	r3, [r7, #8]
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	d103      	bne.n	801fe74 <xQueueReceive+0x34>
 801fe6c:	6a3b      	ldr	r3, [r7, #32]
 801fe6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	d101      	bne.n	801fe78 <xQueueReceive+0x38>
 801fe74:	2301      	movs	r3, #1
 801fe76:	e000      	b.n	801fe7a <xQueueReceive+0x3a>
 801fe78:	2300      	movs	r3, #0
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d105      	bne.n	801fe8a <xQueueReceive+0x4a>
 801fe7e:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 801fe82:	4959      	ldr	r1, [pc, #356]	; (801ffe8 <xQueueReceive+0x1a8>)
 801fe84:	485a      	ldr	r0, [pc, #360]	; (801fff0 <xQueueReceive+0x1b0>)
 801fe86:	f7f2 f8d1 	bl	801202c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801fe8a:	f001 fca5 	bl	80217d8 <xTaskGetSchedulerState>
 801fe8e:	4603      	mov	r3, r0
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	d102      	bne.n	801fe9a <xQueueReceive+0x5a>
 801fe94:	687b      	ldr	r3, [r7, #4]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d101      	bne.n	801fe9e <xQueueReceive+0x5e>
 801fe9a:	2301      	movs	r3, #1
 801fe9c:	e000      	b.n	801fea0 <xQueueReceive+0x60>
 801fe9e:	2300      	movs	r3, #0
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	d105      	bne.n	801feb0 <xQueueReceive+0x70>
 801fea4:	f240 520d 	movw	r2, #1293	; 0x50d
 801fea8:	494f      	ldr	r1, [pc, #316]	; (801ffe8 <xQueueReceive+0x1a8>)
 801feaa:	4852      	ldr	r0, [pc, #328]	; (801fff4 <xQueueReceive+0x1b4>)
 801feac:	f7f2 f8be 	bl	801202c <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801feb0:	f002 fc46 	bl	8022740 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801feb4:	6a3b      	ldr	r3, [r7, #32]
 801feb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801feb8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801feba:	69fb      	ldr	r3, [r7, #28]
 801febc:	2b00      	cmp	r3, #0
 801febe:	d01f      	beq.n	801ff00 <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801fec0:	68b9      	ldr	r1, [r7, #8]
 801fec2:	6a38      	ldr	r0, [r7, #32]
 801fec4:	f000 fb10 	bl	80204e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801fec8:	69fb      	ldr	r3, [r7, #28]
 801feca:	1e5a      	subs	r2, r3, #1
 801fecc:	6a3b      	ldr	r3, [r7, #32]
 801fece:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801fed0:	6a3b      	ldr	r3, [r7, #32]
 801fed2:	691b      	ldr	r3, [r3, #16]
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d00f      	beq.n	801fef8 <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801fed8:	6a3b      	ldr	r3, [r7, #32]
 801feda:	3310      	adds	r3, #16
 801fedc:	4618      	mov	r0, r3
 801fede:	f001 f9e9 	bl	80212b4 <xTaskRemoveFromEventList>
 801fee2:	4603      	mov	r3, r0
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d007      	beq.n	801fef8 <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801fee8:	4b43      	ldr	r3, [pc, #268]	; (801fff8 <xQueueReceive+0x1b8>)
 801feea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801feee:	601a      	str	r2, [r3, #0]
 801fef0:	f3bf 8f4f 	dsb	sy
 801fef4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801fef8:	f002 fc50 	bl	802279c <vPortExitCritical>
				return pdPASS;
 801fefc:	2301      	movs	r3, #1
 801fefe:	e06f      	b.n	801ffe0 <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d103      	bne.n	801ff0e <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ff06:	f002 fc49 	bl	802279c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	e068      	b.n	801ffe0 <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ff0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d106      	bne.n	801ff22 <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ff14:	f107 0314 	add.w	r3, r7, #20
 801ff18:	4618      	mov	r0, r3
 801ff1a:	f001 fa2d 	bl	8021378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ff1e:	2301      	movs	r3, #1
 801ff20:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ff22:	f002 fc3b 	bl	802279c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ff26:	f000 feaf 	bl	8020c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ff2a:	f002 fc09 	bl	8022740 <vPortEnterCritical>
 801ff2e:	6a3b      	ldr	r3, [r7, #32]
 801ff30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ff34:	b25b      	sxtb	r3, r3
 801ff36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ff3a:	d103      	bne.n	801ff44 <xQueueReceive+0x104>
 801ff3c:	6a3b      	ldr	r3, [r7, #32]
 801ff3e:	2200      	movs	r2, #0
 801ff40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ff44:	6a3b      	ldr	r3, [r7, #32]
 801ff46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ff4a:	b25b      	sxtb	r3, r3
 801ff4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ff50:	d103      	bne.n	801ff5a <xQueueReceive+0x11a>
 801ff52:	6a3b      	ldr	r3, [r7, #32]
 801ff54:	2200      	movs	r2, #0
 801ff56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ff5a:	f002 fc1f 	bl	802279c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ff5e:	1d3a      	adds	r2, r7, #4
 801ff60:	f107 0314 	add.w	r3, r7, #20
 801ff64:	4611      	mov	r1, r2
 801ff66:	4618      	mov	r0, r3
 801ff68:	f001 fa1c 	bl	80213a4 <xTaskCheckForTimeOut>
 801ff6c:	4603      	mov	r3, r0
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	d129      	bne.n	801ffc6 <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ff72:	6a38      	ldr	r0, [r7, #32]
 801ff74:	f000 fb30 	bl	80205d8 <prvIsQueueEmpty>
 801ff78:	4603      	mov	r3, r0
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	d01d      	beq.n	801ffba <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 801ff7e:	6a3b      	ldr	r3, [r7, #32]
 801ff80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ff82:	4a1e      	ldr	r2, [pc, #120]	; (801fffc <xQueueReceive+0x1bc>)
 801ff84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801ff88:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801ff8a:	6a3b      	ldr	r3, [r7, #32]
 801ff8c:	3324      	adds	r3, #36	; 0x24
 801ff8e:	687a      	ldr	r2, [r7, #4]
 801ff90:	4611      	mov	r1, r2
 801ff92:	4618      	mov	r0, r3
 801ff94:	f001 f940 	bl	8021218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801ff98:	6a38      	ldr	r0, [r7, #32]
 801ff9a:	f000 facb 	bl	8020534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801ff9e:	f000 fe81 	bl	8020ca4 <xTaskResumeAll>
 801ffa2:	4603      	mov	r3, r0
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d183      	bne.n	801feb0 <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 801ffa8:	4b13      	ldr	r3, [pc, #76]	; (801fff8 <xQueueReceive+0x1b8>)
 801ffaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ffae:	601a      	str	r2, [r3, #0]
 801ffb0:	f3bf 8f4f 	dsb	sy
 801ffb4:	f3bf 8f6f 	isb	sy
 801ffb8:	e77a      	b.n	801feb0 <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801ffba:	6a38      	ldr	r0, [r7, #32]
 801ffbc:	f000 faba 	bl	8020534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ffc0:	f000 fe70 	bl	8020ca4 <xTaskResumeAll>
 801ffc4:	e774      	b.n	801feb0 <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801ffc6:	6a38      	ldr	r0, [r7, #32]
 801ffc8:	f000 fab4 	bl	8020534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ffcc:	f000 fe6a 	bl	8020ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ffd0:	6a38      	ldr	r0, [r7, #32]
 801ffd2:	f000 fb01 	bl	80205d8 <prvIsQueueEmpty>
 801ffd6:	4603      	mov	r3, r0
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	f43f af69 	beq.w	801feb0 <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ffde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	3728      	adds	r7, #40	; 0x28
 801ffe4:	46bd      	mov	sp, r7
 801ffe6:	bd80      	pop	{r7, pc}
 801ffe8:	0802e2a8 	.word	0x0802e2a8
 801ffec:	0802e520 	.word	0x0802e520
 801fff0:	0802e52c 	.word	0x0802e52c
 801fff4:	0802e444 	.word	0x0802e444
 801fff8:	e000ed04 	.word	0xe000ed04
 801fffc:	e000000c 	.word	0xe000000c

08020000 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8020000:	b580      	push	{r7, lr}
 8020002:	b08a      	sub	sp, #40	; 0x28
 8020004:	af00      	add	r7, sp, #0
 8020006:	6078      	str	r0, [r7, #4]
 8020008:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 802000a:	2300      	movs	r3, #0
 802000c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8020012:	2300      	movs	r3, #0
 8020014:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020016:	69fb      	ldr	r3, [r7, #28]
 8020018:	2b00      	cmp	r3, #0
 802001a:	d105      	bne.n	8020028 <xQueueSemaphoreTake+0x28>
 802001c:	f240 5295 	movw	r2, #1429	; 0x595
 8020020:	4975      	ldr	r1, [pc, #468]	; (80201f8 <xQueueSemaphoreTake+0x1f8>)
 8020022:	4876      	ldr	r0, [pc, #472]	; (80201fc <xQueueSemaphoreTake+0x1fc>)
 8020024:	f7f2 f802 	bl	801202c <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8020028:	69fb      	ldr	r3, [r7, #28]
 802002a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802002c:	2b00      	cmp	r3, #0
 802002e:	d005      	beq.n	802003c <xQueueSemaphoreTake+0x3c>
 8020030:	f240 5299 	movw	r2, #1433	; 0x599
 8020034:	4970      	ldr	r1, [pc, #448]	; (80201f8 <xQueueSemaphoreTake+0x1f8>)
 8020036:	4872      	ldr	r0, [pc, #456]	; (8020200 <xQueueSemaphoreTake+0x200>)
 8020038:	f7f1 fff8 	bl	801202c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802003c:	f001 fbcc 	bl	80217d8 <xTaskGetSchedulerState>
 8020040:	4603      	mov	r3, r0
 8020042:	2b00      	cmp	r3, #0
 8020044:	d102      	bne.n	802004c <xQueueSemaphoreTake+0x4c>
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	2b00      	cmp	r3, #0
 802004a:	d101      	bne.n	8020050 <xQueueSemaphoreTake+0x50>
 802004c:	2301      	movs	r3, #1
 802004e:	e000      	b.n	8020052 <xQueueSemaphoreTake+0x52>
 8020050:	2300      	movs	r3, #0
 8020052:	2b00      	cmp	r3, #0
 8020054:	d105      	bne.n	8020062 <xQueueSemaphoreTake+0x62>
 8020056:	f240 529e 	movw	r2, #1438	; 0x59e
 802005a:	4967      	ldr	r1, [pc, #412]	; (80201f8 <xQueueSemaphoreTake+0x1f8>)
 802005c:	4869      	ldr	r0, [pc, #420]	; (8020204 <xQueueSemaphoreTake+0x204>)
 802005e:	f7f1 ffe5 	bl	801202c <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020062:	f002 fb6d 	bl	8022740 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8020066:	69fb      	ldr	r3, [r7, #28]
 8020068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802006a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802006c:	69bb      	ldr	r3, [r7, #24]
 802006e:	2b00      	cmp	r3, #0
 8020070:	d024      	beq.n	80200bc <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8020072:	69bb      	ldr	r3, [r7, #24]
 8020074:	1e5a      	subs	r2, r3, #1
 8020076:	69fb      	ldr	r3, [r7, #28]
 8020078:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802007a:	69fb      	ldr	r3, [r7, #28]
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	2b00      	cmp	r3, #0
 8020080:	d104      	bne.n	802008c <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8020082:	f001 fd49 	bl	8021b18 <pvTaskIncrementMutexHeldCount>
 8020086:	4602      	mov	r2, r0
 8020088:	69fb      	ldr	r3, [r7, #28]
 802008a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802008c:	69fb      	ldr	r3, [r7, #28]
 802008e:	691b      	ldr	r3, [r3, #16]
 8020090:	2b00      	cmp	r3, #0
 8020092:	d00f      	beq.n	80200b4 <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020094:	69fb      	ldr	r3, [r7, #28]
 8020096:	3310      	adds	r3, #16
 8020098:	4618      	mov	r0, r3
 802009a:	f001 f90b 	bl	80212b4 <xTaskRemoveFromEventList>
 802009e:	4603      	mov	r3, r0
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	d007      	beq.n	80200b4 <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80200a4:	4b58      	ldr	r3, [pc, #352]	; (8020208 <xQueueSemaphoreTake+0x208>)
 80200a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80200aa:	601a      	str	r2, [r3, #0]
 80200ac:	f3bf 8f4f 	dsb	sy
 80200b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80200b4:	f002 fb72 	bl	802279c <vPortExitCritical>
				return pdPASS;
 80200b8:	2301      	movs	r3, #1
 80200ba:	e098      	b.n	80201ee <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80200bc:	683b      	ldr	r3, [r7, #0]
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d10c      	bne.n	80200dc <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80200c2:	6a3b      	ldr	r3, [r7, #32]
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	d005      	beq.n	80200d4 <xQueueSemaphoreTake+0xd4>
 80200c8:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80200cc:	494a      	ldr	r1, [pc, #296]	; (80201f8 <xQueueSemaphoreTake+0x1f8>)
 80200ce:	484f      	ldr	r0, [pc, #316]	; (802020c <xQueueSemaphoreTake+0x20c>)
 80200d0:	f7f1 ffac 	bl	801202c <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80200d4:	f002 fb62 	bl	802279c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80200d8:	2300      	movs	r3, #0
 80200da:	e088      	b.n	80201ee <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 80200dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200de:	2b00      	cmp	r3, #0
 80200e0:	d106      	bne.n	80200f0 <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80200e2:	f107 030c 	add.w	r3, r7, #12
 80200e6:	4618      	mov	r0, r3
 80200e8:	f001 f946 	bl	8021378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80200ec:	2301      	movs	r3, #1
 80200ee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80200f0:	f002 fb54 	bl	802279c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80200f4:	f000 fdc8 	bl	8020c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80200f8:	f002 fb22 	bl	8022740 <vPortEnterCritical>
 80200fc:	69fb      	ldr	r3, [r7, #28]
 80200fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020102:	b25b      	sxtb	r3, r3
 8020104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020108:	d103      	bne.n	8020112 <xQueueSemaphoreTake+0x112>
 802010a:	69fb      	ldr	r3, [r7, #28]
 802010c:	2200      	movs	r2, #0
 802010e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020112:	69fb      	ldr	r3, [r7, #28]
 8020114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020118:	b25b      	sxtb	r3, r3
 802011a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802011e:	d103      	bne.n	8020128 <xQueueSemaphoreTake+0x128>
 8020120:	69fb      	ldr	r3, [r7, #28]
 8020122:	2200      	movs	r2, #0
 8020124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020128:	f002 fb38 	bl	802279c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802012c:	463a      	mov	r2, r7
 802012e:	f107 030c 	add.w	r3, r7, #12
 8020132:	4611      	mov	r1, r2
 8020134:	4618      	mov	r0, r3
 8020136:	f001 f935 	bl	80213a4 <xTaskCheckForTimeOut>
 802013a:	4603      	mov	r3, r0
 802013c:	2b00      	cmp	r3, #0
 802013e:	d138      	bne.n	80201b2 <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020140:	69f8      	ldr	r0, [r7, #28]
 8020142:	f000 fa49 	bl	80205d8 <prvIsQueueEmpty>
 8020146:	4603      	mov	r3, r0
 8020148:	2b00      	cmp	r3, #0
 802014a:	d02c      	beq.n	80201a6 <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 802014c:	69fb      	ldr	r3, [r7, #28]
 802014e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020150:	4a2f      	ldr	r2, [pc, #188]	; (8020210 <xQueueSemaphoreTake+0x210>)
 8020152:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8020156:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020158:	69fb      	ldr	r3, [r7, #28]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	2b00      	cmp	r3, #0
 802015e:	d109      	bne.n	8020174 <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 8020160:	f002 faee 	bl	8022740 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8020164:	69fb      	ldr	r3, [r7, #28]
 8020166:	689b      	ldr	r3, [r3, #8]
 8020168:	4618      	mov	r0, r3
 802016a:	f001 fb53 	bl	8021814 <xTaskPriorityInherit>
 802016e:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8020170:	f002 fb14 	bl	802279c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020174:	69fb      	ldr	r3, [r7, #28]
 8020176:	3324      	adds	r3, #36	; 0x24
 8020178:	683a      	ldr	r2, [r7, #0]
 802017a:	4611      	mov	r1, r2
 802017c:	4618      	mov	r0, r3
 802017e:	f001 f84b 	bl	8021218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020182:	69f8      	ldr	r0, [r7, #28]
 8020184:	f000 f9d6 	bl	8020534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020188:	f000 fd8c 	bl	8020ca4 <xTaskResumeAll>
 802018c:	4603      	mov	r3, r0
 802018e:	2b00      	cmp	r3, #0
 8020190:	f47f af67 	bne.w	8020062 <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 8020194:	4b1c      	ldr	r3, [pc, #112]	; (8020208 <xQueueSemaphoreTake+0x208>)
 8020196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802019a:	601a      	str	r2, [r3, #0]
 802019c:	f3bf 8f4f 	dsb	sy
 80201a0:	f3bf 8f6f 	isb	sy
 80201a4:	e75d      	b.n	8020062 <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80201a6:	69f8      	ldr	r0, [r7, #28]
 80201a8:	f000 f9c4 	bl	8020534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80201ac:	f000 fd7a 	bl	8020ca4 <xTaskResumeAll>
 80201b0:	e757      	b.n	8020062 <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80201b2:	69f8      	ldr	r0, [r7, #28]
 80201b4:	f000 f9be 	bl	8020534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80201b8:	f000 fd74 	bl	8020ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80201bc:	69f8      	ldr	r0, [r7, #28]
 80201be:	f000 fa0b 	bl	80205d8 <prvIsQueueEmpty>
 80201c2:	4603      	mov	r3, r0
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	f43f af4c 	beq.w	8020062 <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80201ca:	6a3b      	ldr	r3, [r7, #32]
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	d00d      	beq.n	80201ec <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 80201d0:	f002 fab6 	bl	8022740 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80201d4:	69f8      	ldr	r0, [r7, #28]
 80201d6:	f000 f905 	bl	80203e4 <prvGetDisinheritPriorityAfterTimeout>
 80201da:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80201dc:	69fb      	ldr	r3, [r7, #28]
 80201de:	689b      	ldr	r3, [r3, #8]
 80201e0:	6979      	ldr	r1, [r7, #20]
 80201e2:	4618      	mov	r0, r3
 80201e4:	f001 fc0e 	bl	8021a04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80201e8:	f002 fad8 	bl	802279c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80201ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80201ee:	4618      	mov	r0, r3
 80201f0:	3728      	adds	r7, #40	; 0x28
 80201f2:	46bd      	mov	sp, r7
 80201f4:	bd80      	pop	{r7, pc}
 80201f6:	bf00      	nop
 80201f8:	0802e2a8 	.word	0x0802e2a8
 80201fc:	0802e520 	.word	0x0802e520
 8020200:	0802e49c 	.word	0x0802e49c
 8020204:	0802e444 	.word	0x0802e444
 8020208:	e000ed04 	.word	0xe000ed04
 802020c:	0802e580 	.word	0x0802e580
 8020210:	e000000c 	.word	0xe000000c

08020214 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020214:	b580      	push	{r7, lr}
 8020216:	b08a      	sub	sp, #40	; 0x28
 8020218:	af00      	add	r7, sp, #0
 802021a:	60f8      	str	r0, [r7, #12]
 802021c:	60b9      	str	r1, [r7, #8]
 802021e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020220:	2300      	movs	r3, #0
 8020222:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8020224:	68fb      	ldr	r3, [r7, #12]
 8020226:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020228:	6a3b      	ldr	r3, [r7, #32]
 802022a:	2b00      	cmp	r3, #0
 802022c:	d105      	bne.n	802023a <xQueuePeek+0x26>
 802022e:	f240 626c 	movw	r2, #1644	; 0x66c
 8020232:	4960      	ldr	r1, [pc, #384]	; (80203b4 <xQueuePeek+0x1a0>)
 8020234:	4860      	ldr	r0, [pc, #384]	; (80203b8 <xQueuePeek+0x1a4>)
 8020236:	f7f1 fef9 	bl	801202c <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802023a:	68bb      	ldr	r3, [r7, #8]
 802023c:	2b00      	cmp	r3, #0
 802023e:	d103      	bne.n	8020248 <xQueuePeek+0x34>
 8020240:	6a3b      	ldr	r3, [r7, #32]
 8020242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020244:	2b00      	cmp	r3, #0
 8020246:	d101      	bne.n	802024c <xQueuePeek+0x38>
 8020248:	2301      	movs	r3, #1
 802024a:	e000      	b.n	802024e <xQueuePeek+0x3a>
 802024c:	2300      	movs	r3, #0
 802024e:	2b00      	cmp	r3, #0
 8020250:	d105      	bne.n	802025e <xQueuePeek+0x4a>
 8020252:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8020256:	4957      	ldr	r1, [pc, #348]	; (80203b4 <xQueuePeek+0x1a0>)
 8020258:	4858      	ldr	r0, [pc, #352]	; (80203bc <xQueuePeek+0x1a8>)
 802025a:	f7f1 fee7 	bl	801202c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802025e:	f001 fabb 	bl	80217d8 <xTaskGetSchedulerState>
 8020262:	4603      	mov	r3, r0
 8020264:	2b00      	cmp	r3, #0
 8020266:	d102      	bne.n	802026e <xQueuePeek+0x5a>
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d101      	bne.n	8020272 <xQueuePeek+0x5e>
 802026e:	2301      	movs	r3, #1
 8020270:	e000      	b.n	8020274 <xQueuePeek+0x60>
 8020272:	2300      	movs	r3, #0
 8020274:	2b00      	cmp	r3, #0
 8020276:	d105      	bne.n	8020284 <xQueuePeek+0x70>
 8020278:	f240 6275 	movw	r2, #1653	; 0x675
 802027c:	494d      	ldr	r1, [pc, #308]	; (80203b4 <xQueuePeek+0x1a0>)
 802027e:	4850      	ldr	r0, [pc, #320]	; (80203c0 <xQueuePeek+0x1ac>)
 8020280:	f7f1 fed4 	bl	801202c <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020284:	f002 fa5c 	bl	8022740 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020288:	6a3b      	ldr	r3, [r7, #32]
 802028a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802028c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802028e:	69fb      	ldr	r3, [r7, #28]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d021      	beq.n	80202d8 <xQueuePeek+0xc4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8020294:	6a3b      	ldr	r3, [r7, #32]
 8020296:	68db      	ldr	r3, [r3, #12]
 8020298:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802029a:	68b9      	ldr	r1, [r7, #8]
 802029c:	6a38      	ldr	r0, [r7, #32]
 802029e:	f000 f923 	bl	80204e8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80202a2:	6a3b      	ldr	r3, [r7, #32]
 80202a4:	69ba      	ldr	r2, [r7, #24]
 80202a6:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80202a8:	6a3b      	ldr	r3, [r7, #32]
 80202aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d00f      	beq.n	80202d0 <xQueuePeek+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80202b0:	6a3b      	ldr	r3, [r7, #32]
 80202b2:	3324      	adds	r3, #36	; 0x24
 80202b4:	4618      	mov	r0, r3
 80202b6:	f000 fffd 	bl	80212b4 <xTaskRemoveFromEventList>
 80202ba:	4603      	mov	r3, r0
 80202bc:	2b00      	cmp	r3, #0
 80202be:	d007      	beq.n	80202d0 <xQueuePeek+0xbc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80202c0:	4b40      	ldr	r3, [pc, #256]	; (80203c4 <xQueuePeek+0x1b0>)
 80202c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80202c6:	601a      	str	r2, [r3, #0]
 80202c8:	f3bf 8f4f 	dsb	sy
 80202cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80202d0:	f002 fa64 	bl	802279c <vPortExitCritical>
				return pdPASS;
 80202d4:	2301      	movs	r3, #1
 80202d6:	e069      	b.n	80203ac <xQueuePeek+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	2b00      	cmp	r3, #0
 80202dc:	d103      	bne.n	80202e6 <xQueuePeek+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80202de:	f002 fa5d 	bl	802279c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80202e2:	2300      	movs	r3, #0
 80202e4:	e062      	b.n	80203ac <xQueuePeek+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
 80202e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d106      	bne.n	80202fa <xQueuePeek+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80202ec:	f107 0310 	add.w	r3, r7, #16
 80202f0:	4618      	mov	r0, r3
 80202f2:	f001 f841 	bl	8021378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80202f6:	2301      	movs	r3, #1
 80202f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80202fa:	f002 fa4f 	bl	802279c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80202fe:	f000 fcc3 	bl	8020c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020302:	f002 fa1d 	bl	8022740 <vPortEnterCritical>
 8020306:	6a3b      	ldr	r3, [r7, #32]
 8020308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802030c:	b25b      	sxtb	r3, r3
 802030e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020312:	d103      	bne.n	802031c <xQueuePeek+0x108>
 8020314:	6a3b      	ldr	r3, [r7, #32]
 8020316:	2200      	movs	r2, #0
 8020318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802031c:	6a3b      	ldr	r3, [r7, #32]
 802031e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020322:	b25b      	sxtb	r3, r3
 8020324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020328:	d103      	bne.n	8020332 <xQueuePeek+0x11e>
 802032a:	6a3b      	ldr	r3, [r7, #32]
 802032c:	2200      	movs	r2, #0
 802032e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020332:	f002 fa33 	bl	802279c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020336:	1d3a      	adds	r2, r7, #4
 8020338:	f107 0310 	add.w	r3, r7, #16
 802033c:	4611      	mov	r1, r2
 802033e:	4618      	mov	r0, r3
 8020340:	f001 f830 	bl	80213a4 <xTaskCheckForTimeOut>
 8020344:	4603      	mov	r3, r0
 8020346:	2b00      	cmp	r3, #0
 8020348:	d123      	bne.n	8020392 <xQueuePeek+0x17e>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802034a:	6a38      	ldr	r0, [r7, #32]
 802034c:	f000 f944 	bl	80205d8 <prvIsQueueEmpty>
 8020350:	4603      	mov	r3, r0
 8020352:	2b00      	cmp	r3, #0
 8020354:	d017      	beq.n	8020386 <xQueuePeek+0x172>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020356:	6a3b      	ldr	r3, [r7, #32]
 8020358:	3324      	adds	r3, #36	; 0x24
 802035a:	687a      	ldr	r2, [r7, #4]
 802035c:	4611      	mov	r1, r2
 802035e:	4618      	mov	r0, r3
 8020360:	f000 ff5a 	bl	8021218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020364:	6a38      	ldr	r0, [r7, #32]
 8020366:	f000 f8e5 	bl	8020534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802036a:	f000 fc9b 	bl	8020ca4 <xTaskResumeAll>
 802036e:	4603      	mov	r3, r0
 8020370:	2b00      	cmp	r3, #0
 8020372:	d187      	bne.n	8020284 <xQueuePeek+0x70>
				{
					portYIELD_WITHIN_API();
 8020374:	4b13      	ldr	r3, [pc, #76]	; (80203c4 <xQueuePeek+0x1b0>)
 8020376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802037a:	601a      	str	r2, [r3, #0]
 802037c:	f3bf 8f4f 	dsb	sy
 8020380:	f3bf 8f6f 	isb	sy
 8020384:	e77e      	b.n	8020284 <xQueuePeek+0x70>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8020386:	6a38      	ldr	r0, [r7, #32]
 8020388:	f000 f8d4 	bl	8020534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802038c:	f000 fc8a 	bl	8020ca4 <xTaskResumeAll>
 8020390:	e778      	b.n	8020284 <xQueuePeek+0x70>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8020392:	6a38      	ldr	r0, [r7, #32]
 8020394:	f000 f8ce 	bl	8020534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020398:	f000 fc84 	bl	8020ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802039c:	6a38      	ldr	r0, [r7, #32]
 802039e:	f000 f91b 	bl	80205d8 <prvIsQueueEmpty>
 80203a2:	4603      	mov	r3, r0
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	f43f af6d 	beq.w	8020284 <xQueuePeek+0x70>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80203aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80203ac:	4618      	mov	r0, r3
 80203ae:	3728      	adds	r7, #40	; 0x28
 80203b0:	46bd      	mov	sp, r7
 80203b2:	bd80      	pop	{r7, pc}
 80203b4:	0802e2a8 	.word	0x0802e2a8
 80203b8:	0802e520 	.word	0x0802e520
 80203bc:	0802e52c 	.word	0x0802e52c
 80203c0:	0802e444 	.word	0x0802e444
 80203c4:	e000ed04 	.word	0xe000ed04

080203c8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80203c8:	b480      	push	{r7}
 80203ca:	b083      	sub	sp, #12
 80203cc:	af00      	add	r7, sp, #0
 80203ce:	6078      	str	r0, [r7, #4]
 80203d0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	683a      	ldr	r2, [r7, #0]
 80203d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
 80203d8:	bf00      	nop
 80203da:	370c      	adds	r7, #12
 80203dc:	46bd      	mov	sp, r7
 80203de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e2:	4770      	bx	lr

080203e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80203e4:	b480      	push	{r7}
 80203e6:	b085      	sub	sp, #20
 80203e8:	af00      	add	r7, sp, #0
 80203ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d006      	beq.n	8020402 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80203f8:	681b      	ldr	r3, [r3, #0]
 80203fa:	f1c3 0314 	rsb	r3, r3, #20
 80203fe:	60fb      	str	r3, [r7, #12]
 8020400:	e001      	b.n	8020406 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8020402:	2300      	movs	r3, #0
 8020404:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8020406:	68fb      	ldr	r3, [r7, #12]
	}
 8020408:	4618      	mov	r0, r3
 802040a:	3714      	adds	r7, #20
 802040c:	46bd      	mov	sp, r7
 802040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020412:	4770      	bx	lr

08020414 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8020414:	b580      	push	{r7, lr}
 8020416:	b086      	sub	sp, #24
 8020418:	af00      	add	r7, sp, #0
 802041a:	60f8      	str	r0, [r7, #12]
 802041c:	60b9      	str	r1, [r7, #8]
 802041e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8020420:	2300      	movs	r3, #0
 8020422:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020424:	68fb      	ldr	r3, [r7, #12]
 8020426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020428:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802042e:	2b00      	cmp	r3, #0
 8020430:	d10d      	bne.n	802044e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d14d      	bne.n	80204d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802043a:	68fb      	ldr	r3, [r7, #12]
 802043c:	689b      	ldr	r3, [r3, #8]
 802043e:	4618      	mov	r0, r3
 8020440:	f001 fa5e 	bl	8021900 <xTaskPriorityDisinherit>
 8020444:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8020446:	68fb      	ldr	r3, [r7, #12]
 8020448:	2200      	movs	r2, #0
 802044a:	609a      	str	r2, [r3, #8]
 802044c:	e043      	b.n	80204d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d119      	bne.n	8020488 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8020454:	68fb      	ldr	r3, [r7, #12]
 8020456:	6858      	ldr	r0, [r3, #4]
 8020458:	68fb      	ldr	r3, [r7, #12]
 802045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802045c:	461a      	mov	r2, r3
 802045e:	68b9      	ldr	r1, [r7, #8]
 8020460:	f004 fc89 	bl	8024d76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8020464:	68fb      	ldr	r3, [r7, #12]
 8020466:	685a      	ldr	r2, [r3, #4]
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802046c:	441a      	add	r2, r3
 802046e:	68fb      	ldr	r3, [r7, #12]
 8020470:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020472:	68fb      	ldr	r3, [r7, #12]
 8020474:	685a      	ldr	r2, [r3, #4]
 8020476:	68fb      	ldr	r3, [r7, #12]
 8020478:	689b      	ldr	r3, [r3, #8]
 802047a:	429a      	cmp	r2, r3
 802047c:	d32b      	bcc.n	80204d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	681a      	ldr	r2, [r3, #0]
 8020482:	68fb      	ldr	r3, [r7, #12]
 8020484:	605a      	str	r2, [r3, #4]
 8020486:	e026      	b.n	80204d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8020488:	68fb      	ldr	r3, [r7, #12]
 802048a:	68d8      	ldr	r0, [r3, #12]
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020490:	461a      	mov	r2, r3
 8020492:	68b9      	ldr	r1, [r7, #8]
 8020494:	f004 fc6f 	bl	8024d76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8020498:	68fb      	ldr	r3, [r7, #12]
 802049a:	68da      	ldr	r2, [r3, #12]
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80204a0:	425b      	negs	r3, r3
 80204a2:	441a      	add	r2, r3
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80204a8:	68fb      	ldr	r3, [r7, #12]
 80204aa:	68da      	ldr	r2, [r3, #12]
 80204ac:	68fb      	ldr	r3, [r7, #12]
 80204ae:	681b      	ldr	r3, [r3, #0]
 80204b0:	429a      	cmp	r2, r3
 80204b2:	d207      	bcs.n	80204c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80204b4:	68fb      	ldr	r3, [r7, #12]
 80204b6:	689a      	ldr	r2, [r3, #8]
 80204b8:	68fb      	ldr	r3, [r7, #12]
 80204ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80204bc:	425b      	negs	r3, r3
 80204be:	441a      	add	r2, r3
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	2b02      	cmp	r3, #2
 80204c8:	d105      	bne.n	80204d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80204ca:	693b      	ldr	r3, [r7, #16]
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d002      	beq.n	80204d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80204d0:	693b      	ldr	r3, [r7, #16]
 80204d2:	3b01      	subs	r3, #1
 80204d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80204d6:	693b      	ldr	r3, [r7, #16]
 80204d8:	1c5a      	adds	r2, r3, #1
 80204da:	68fb      	ldr	r3, [r7, #12]
 80204dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80204de:	697b      	ldr	r3, [r7, #20]
}
 80204e0:	4618      	mov	r0, r3
 80204e2:	3718      	adds	r7, #24
 80204e4:	46bd      	mov	sp, r7
 80204e6:	bd80      	pop	{r7, pc}

080204e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80204e8:	b580      	push	{r7, lr}
 80204ea:	b082      	sub	sp, #8
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	6078      	str	r0, [r7, #4]
 80204f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d018      	beq.n	802052c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	68da      	ldr	r2, [r3, #12]
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020502:	441a      	add	r2, r3
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	68da      	ldr	r2, [r3, #12]
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	689b      	ldr	r3, [r3, #8]
 8020510:	429a      	cmp	r2, r3
 8020512:	d303      	bcc.n	802051c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	681a      	ldr	r2, [r3, #0]
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	68d9      	ldr	r1, [r3, #12]
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020524:	461a      	mov	r2, r3
 8020526:	6838      	ldr	r0, [r7, #0]
 8020528:	f004 fc25 	bl	8024d76 <memcpy>
	}
}
 802052c:	bf00      	nop
 802052e:	3708      	adds	r7, #8
 8020530:	46bd      	mov	sp, r7
 8020532:	bd80      	pop	{r7, pc}

08020534 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8020534:	b580      	push	{r7, lr}
 8020536:	b084      	sub	sp, #16
 8020538:	af00      	add	r7, sp, #0
 802053a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802053c:	f002 f900 	bl	8022740 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020546:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020548:	e011      	b.n	802056e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802054e:	2b00      	cmp	r3, #0
 8020550:	d012      	beq.n	8020578 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	3324      	adds	r3, #36	; 0x24
 8020556:	4618      	mov	r0, r3
 8020558:	f000 feac 	bl	80212b4 <xTaskRemoveFromEventList>
 802055c:	4603      	mov	r3, r0
 802055e:	2b00      	cmp	r3, #0
 8020560:	d001      	beq.n	8020566 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8020562:	f000 ff7d 	bl	8021460 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8020566:	7bfb      	ldrb	r3, [r7, #15]
 8020568:	3b01      	subs	r3, #1
 802056a:	b2db      	uxtb	r3, r3
 802056c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802056e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020572:	2b00      	cmp	r3, #0
 8020574:	dce9      	bgt.n	802054a <prvUnlockQueue+0x16>
 8020576:	e000      	b.n	802057a <prvUnlockQueue+0x46>
					break;
 8020578:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	22ff      	movs	r2, #255	; 0xff
 802057e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8020582:	f002 f90b 	bl	802279c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8020586:	f002 f8db 	bl	8022740 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020590:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020592:	e011      	b.n	80205b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	691b      	ldr	r3, [r3, #16]
 8020598:	2b00      	cmp	r3, #0
 802059a:	d012      	beq.n	80205c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	3310      	adds	r3, #16
 80205a0:	4618      	mov	r0, r3
 80205a2:	f000 fe87 	bl	80212b4 <xTaskRemoveFromEventList>
 80205a6:	4603      	mov	r3, r0
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d001      	beq.n	80205b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80205ac:	f000 ff58 	bl	8021460 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80205b0:	7bbb      	ldrb	r3, [r7, #14]
 80205b2:	3b01      	subs	r3, #1
 80205b4:	b2db      	uxtb	r3, r3
 80205b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80205b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	dce9      	bgt.n	8020594 <prvUnlockQueue+0x60>
 80205c0:	e000      	b.n	80205c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80205c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	22ff      	movs	r2, #255	; 0xff
 80205c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80205cc:	f002 f8e6 	bl	802279c <vPortExitCritical>
}
 80205d0:	bf00      	nop
 80205d2:	3710      	adds	r7, #16
 80205d4:	46bd      	mov	sp, r7
 80205d6:	bd80      	pop	{r7, pc}

080205d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80205d8:	b580      	push	{r7, lr}
 80205da:	b084      	sub	sp, #16
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80205e0:	f002 f8ae 	bl	8022740 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d102      	bne.n	80205f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80205ec:	2301      	movs	r3, #1
 80205ee:	60fb      	str	r3, [r7, #12]
 80205f0:	e001      	b.n	80205f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80205f2:	2300      	movs	r3, #0
 80205f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80205f6:	f002 f8d1 	bl	802279c <vPortExitCritical>

	return xReturn;
 80205fa:	68fb      	ldr	r3, [r7, #12]
}
 80205fc:	4618      	mov	r0, r3
 80205fe:	3710      	adds	r7, #16
 8020600:	46bd      	mov	sp, r7
 8020602:	bd80      	pop	{r7, pc}

08020604 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8020604:	b580      	push	{r7, lr}
 8020606:	b084      	sub	sp, #16
 8020608:	af00      	add	r7, sp, #0
 802060a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802060c:	f002 f898 	bl	8022740 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8020610:	687b      	ldr	r3, [r7, #4]
 8020612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020618:	429a      	cmp	r2, r3
 802061a:	d102      	bne.n	8020622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 802061c:	2301      	movs	r3, #1
 802061e:	60fb      	str	r3, [r7, #12]
 8020620:	e001      	b.n	8020626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8020622:	2300      	movs	r3, #0
 8020624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8020626:	f002 f8b9 	bl	802279c <vPortExitCritical>

	return xReturn;
 802062a:	68fb      	ldr	r3, [r7, #12]
}
 802062c:	4618      	mov	r0, r3
 802062e:	3710      	adds	r7, #16
 8020630:	46bd      	mov	sp, r7
 8020632:	bd80      	pop	{r7, pc}

08020634 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8020634:	b480      	push	{r7}
 8020636:	b085      	sub	sp, #20
 8020638:	af00      	add	r7, sp, #0
 802063a:	6078      	str	r0, [r7, #4]
 802063c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802063e:	2300      	movs	r3, #0
 8020640:	60fb      	str	r3, [r7, #12]
 8020642:	e014      	b.n	802066e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8020644:	4a0f      	ldr	r2, [pc, #60]	; (8020684 <vQueueAddToRegistry+0x50>)
 8020646:	68fb      	ldr	r3, [r7, #12]
 8020648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802064c:	2b00      	cmp	r3, #0
 802064e:	d10b      	bne.n	8020668 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8020650:	490c      	ldr	r1, [pc, #48]	; (8020684 <vQueueAddToRegistry+0x50>)
 8020652:	68fb      	ldr	r3, [r7, #12]
 8020654:	683a      	ldr	r2, [r7, #0]
 8020656:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802065a:	4a0a      	ldr	r2, [pc, #40]	; (8020684 <vQueueAddToRegistry+0x50>)
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	00db      	lsls	r3, r3, #3
 8020660:	4413      	add	r3, r2
 8020662:	687a      	ldr	r2, [r7, #4]
 8020664:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8020666:	e006      	b.n	8020676 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020668:	68fb      	ldr	r3, [r7, #12]
 802066a:	3301      	adds	r3, #1
 802066c:	60fb      	str	r3, [r7, #12]
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	2b09      	cmp	r3, #9
 8020672:	d9e7      	bls.n	8020644 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8020674:	bf00      	nop
 8020676:	bf00      	nop
 8020678:	3714      	adds	r7, #20
 802067a:	46bd      	mov	sp, r7
 802067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop
 8020684:	2000d468 	.word	0x2000d468

08020688 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020688:	b580      	push	{r7, lr}
 802068a:	b086      	sub	sp, #24
 802068c:	af00      	add	r7, sp, #0
 802068e:	60f8      	str	r0, [r7, #12]
 8020690:	60b9      	str	r1, [r7, #8]
 8020692:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8020694:	68fb      	ldr	r3, [r7, #12]
 8020696:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8020698:	f002 f852 	bl	8022740 <vPortEnterCritical>
 802069c:	697b      	ldr	r3, [r7, #20]
 802069e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80206a2:	b25b      	sxtb	r3, r3
 80206a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80206a8:	d103      	bne.n	80206b2 <vQueueWaitForMessageRestricted+0x2a>
 80206aa:	697b      	ldr	r3, [r7, #20]
 80206ac:	2200      	movs	r2, #0
 80206ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80206b8:	b25b      	sxtb	r3, r3
 80206ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80206be:	d103      	bne.n	80206c8 <vQueueWaitForMessageRestricted+0x40>
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	2200      	movs	r2, #0
 80206c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80206c8:	f002 f868 	bl	802279c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80206cc:	697b      	ldr	r3, [r7, #20]
 80206ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d106      	bne.n	80206e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80206d4:	697b      	ldr	r3, [r7, #20]
 80206d6:	3324      	adds	r3, #36	; 0x24
 80206d8:	687a      	ldr	r2, [r7, #4]
 80206da:	68b9      	ldr	r1, [r7, #8]
 80206dc:	4618      	mov	r0, r3
 80206de:	f000 fdbf 	bl	8021260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80206e2:	6978      	ldr	r0, [r7, #20]
 80206e4:	f7ff ff26 	bl	8020534 <prvUnlockQueue>
	}
 80206e8:	bf00      	nop
 80206ea:	3718      	adds	r7, #24
 80206ec:	46bd      	mov	sp, r7
 80206ee:	bd80      	pop	{r7, pc}

080206f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80206f0:	b580      	push	{r7, lr}
 80206f2:	b08c      	sub	sp, #48	; 0x30
 80206f4:	af04      	add	r7, sp, #16
 80206f6:	60f8      	str	r0, [r7, #12]
 80206f8:	60b9      	str	r1, [r7, #8]
 80206fa:	607a      	str	r2, [r7, #4]
 80206fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80206fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020700:	2b00      	cmp	r3, #0
 8020702:	d105      	bne.n	8020710 <xTaskCreateStatic+0x20>
 8020704:	f44f 7214 	mov.w	r2, #592	; 0x250
 8020708:	4920      	ldr	r1, [pc, #128]	; (802078c <xTaskCreateStatic+0x9c>)
 802070a:	4821      	ldr	r0, [pc, #132]	; (8020790 <xTaskCreateStatic+0xa0>)
 802070c:	f7f1 fc8e 	bl	801202c <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 8020710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020712:	2b00      	cmp	r3, #0
 8020714:	d105      	bne.n	8020722 <xTaskCreateStatic+0x32>
 8020716:	f240 2251 	movw	r2, #593	; 0x251
 802071a:	491c      	ldr	r1, [pc, #112]	; (802078c <xTaskCreateStatic+0x9c>)
 802071c:	481d      	ldr	r0, [pc, #116]	; (8020794 <xTaskCreateStatic+0xa4>)
 802071e:	f7f1 fc85 	bl	801202c <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8020722:	23b8      	movs	r3, #184	; 0xb8
 8020724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8020726:	697b      	ldr	r3, [r7, #20]
 8020728:	2bb8      	cmp	r3, #184	; 0xb8
 802072a:	d005      	beq.n	8020738 <xTaskCreateStatic+0x48>
 802072c:	f240 2259 	movw	r2, #601	; 0x259
 8020730:	4916      	ldr	r1, [pc, #88]	; (802078c <xTaskCreateStatic+0x9c>)
 8020732:	4819      	ldr	r0, [pc, #100]	; (8020798 <xTaskCreateStatic+0xa8>)
 8020734:	f7f1 fc7a 	bl	801202c <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8020738:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 802073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802073c:	2b00      	cmp	r3, #0
 802073e:	d01e      	beq.n	802077e <xTaskCreateStatic+0x8e>
 8020740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020742:	2b00      	cmp	r3, #0
 8020744:	d01b      	beq.n	802077e <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020748:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 802074a:	69fb      	ldr	r3, [r7, #28]
 802074c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802074e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8020750:	69fb      	ldr	r3, [r7, #28]
 8020752:	2202      	movs	r2, #2
 8020754:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8020758:	2300      	movs	r3, #0
 802075a:	9303      	str	r3, [sp, #12]
 802075c:	69fb      	ldr	r3, [r7, #28]
 802075e:	9302      	str	r3, [sp, #8]
 8020760:	f107 0318 	add.w	r3, r7, #24
 8020764:	9301      	str	r3, [sp, #4]
 8020766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020768:	9300      	str	r3, [sp, #0]
 802076a:	683b      	ldr	r3, [r7, #0]
 802076c:	687a      	ldr	r2, [r7, #4]
 802076e:	68b9      	ldr	r1, [r7, #8]
 8020770:	68f8      	ldr	r0, [r7, #12]
 8020772:	f000 f859 	bl	8020828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020776:	69f8      	ldr	r0, [r7, #28]
 8020778:	f000 f904 	bl	8020984 <prvAddNewTaskToReadyList>
 802077c:	e001      	b.n	8020782 <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 802077e:	2300      	movs	r3, #0
 8020780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8020782:	69bb      	ldr	r3, [r7, #24]
	}
 8020784:	4618      	mov	r0, r3
 8020786:	3720      	adds	r7, #32
 8020788:	46bd      	mov	sp, r7
 802078a:	bd80      	pop	{r7, pc}
 802078c:	0802e610 	.word	0x0802e610
 8020790:	0802e644 	.word	0x0802e644
 8020794:	0802e65c 	.word	0x0802e65c
 8020798:	0802e674 	.word	0x0802e674

0802079c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 802079c:	b580      	push	{r7, lr}
 802079e:	b08c      	sub	sp, #48	; 0x30
 80207a0:	af04      	add	r7, sp, #16
 80207a2:	60f8      	str	r0, [r7, #12]
 80207a4:	60b9      	str	r1, [r7, #8]
 80207a6:	603b      	str	r3, [r7, #0]
 80207a8:	4613      	mov	r3, r2
 80207aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80207ac:	88fb      	ldrh	r3, [r7, #6]
 80207ae:	009b      	lsls	r3, r3, #2
 80207b0:	4618      	mov	r0, r3
 80207b2:	f002 f8d5 	bl	8022960 <pvPortMalloc>
 80207b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80207b8:	697b      	ldr	r3, [r7, #20]
 80207ba:	2b00      	cmp	r3, #0
 80207bc:	d00e      	beq.n	80207dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80207be:	20b8      	movs	r0, #184	; 0xb8
 80207c0:	f002 f8ce 	bl	8022960 <pvPortMalloc>
 80207c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80207c6:	69fb      	ldr	r3, [r7, #28]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	d003      	beq.n	80207d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80207cc:	69fb      	ldr	r3, [r7, #28]
 80207ce:	697a      	ldr	r2, [r7, #20]
 80207d0:	631a      	str	r2, [r3, #48]	; 0x30
 80207d2:	e005      	b.n	80207e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80207d4:	6978      	ldr	r0, [r7, #20]
 80207d6:	f002 f985 	bl	8022ae4 <vPortFree>
 80207da:	e001      	b.n	80207e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80207dc:	2300      	movs	r3, #0
 80207de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80207e0:	69fb      	ldr	r3, [r7, #28]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d017      	beq.n	8020816 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80207e6:	69fb      	ldr	r3, [r7, #28]
 80207e8:	2200      	movs	r2, #0
 80207ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80207ee:	88fa      	ldrh	r2, [r7, #6]
 80207f0:	2300      	movs	r3, #0
 80207f2:	9303      	str	r3, [sp, #12]
 80207f4:	69fb      	ldr	r3, [r7, #28]
 80207f6:	9302      	str	r3, [sp, #8]
 80207f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207fa:	9301      	str	r3, [sp, #4]
 80207fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207fe:	9300      	str	r3, [sp, #0]
 8020800:	683b      	ldr	r3, [r7, #0]
 8020802:	68b9      	ldr	r1, [r7, #8]
 8020804:	68f8      	ldr	r0, [r7, #12]
 8020806:	f000 f80f 	bl	8020828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802080a:	69f8      	ldr	r0, [r7, #28]
 802080c:	f000 f8ba 	bl	8020984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8020810:	2301      	movs	r3, #1
 8020812:	61bb      	str	r3, [r7, #24]
 8020814:	e002      	b.n	802081c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8020816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802081a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802081c:	69bb      	ldr	r3, [r7, #24]
	}
 802081e:	4618      	mov	r0, r3
 8020820:	3720      	adds	r7, #32
 8020822:	46bd      	mov	sp, r7
 8020824:	bd80      	pop	{r7, pc}
	...

08020828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8020828:	b580      	push	{r7, lr}
 802082a:	b086      	sub	sp, #24
 802082c:	af00      	add	r7, sp, #0
 802082e:	60f8      	str	r0, [r7, #12]
 8020830:	60b9      	str	r1, [r7, #8]
 8020832:	607a      	str	r2, [r7, #4]
 8020834:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8020836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020838:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	009b      	lsls	r3, r3, #2
 802083e:	461a      	mov	r2, r3
 8020840:	21a5      	movs	r1, #165	; 0xa5
 8020842:	f004 f91d 	bl	8024a80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8020846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020850:	3b01      	subs	r3, #1
 8020852:	009b      	lsls	r3, r3, #2
 8020854:	4413      	add	r3, r2
 8020856:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8020858:	693b      	ldr	r3, [r7, #16]
 802085a:	f023 0307 	bic.w	r3, r3, #7
 802085e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8020860:	693b      	ldr	r3, [r7, #16]
 8020862:	f003 0307 	and.w	r3, r3, #7
 8020866:	2b00      	cmp	r3, #0
 8020868:	d005      	beq.n	8020876 <prvInitialiseNewTask+0x4e>
 802086a:	f44f 7259 	mov.w	r2, #868	; 0x364
 802086e:	4940      	ldr	r1, [pc, #256]	; (8020970 <prvInitialiseNewTask+0x148>)
 8020870:	4840      	ldr	r0, [pc, #256]	; (8020974 <prvInitialiseNewTask+0x14c>)
 8020872:	f7f1 fbdb 	bl	801202c <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8020876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020878:	693a      	ldr	r2, [r7, #16]
 802087a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 802087c:	68bb      	ldr	r3, [r7, #8]
 802087e:	2b00      	cmp	r3, #0
 8020880:	d01f      	beq.n	80208c2 <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8020882:	2300      	movs	r3, #0
 8020884:	617b      	str	r3, [r7, #20]
 8020886:	e012      	b.n	80208ae <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8020888:	68ba      	ldr	r2, [r7, #8]
 802088a:	697b      	ldr	r3, [r7, #20]
 802088c:	4413      	add	r3, r2
 802088e:	7819      	ldrb	r1, [r3, #0]
 8020890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020892:	697b      	ldr	r3, [r7, #20]
 8020894:	4413      	add	r3, r2
 8020896:	3334      	adds	r3, #52	; 0x34
 8020898:	460a      	mov	r2, r1
 802089a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 802089c:	68ba      	ldr	r2, [r7, #8]
 802089e:	697b      	ldr	r3, [r7, #20]
 80208a0:	4413      	add	r3, r2
 80208a2:	781b      	ldrb	r3, [r3, #0]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d006      	beq.n	80208b6 <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80208a8:	697b      	ldr	r3, [r7, #20]
 80208aa:	3301      	adds	r3, #1
 80208ac:	617b      	str	r3, [r7, #20]
 80208ae:	697b      	ldr	r3, [r7, #20]
 80208b0:	2b0f      	cmp	r3, #15
 80208b2:	d9e9      	bls.n	8020888 <prvInitialiseNewTask+0x60>
 80208b4:	e000      	b.n	80208b8 <prvInitialiseNewTask+0x90>
			{
				break;
 80208b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80208b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208ba:	2200      	movs	r2, #0
 80208bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80208c0:	e003      	b.n	80208ca <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80208c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208c4:	2200      	movs	r2, #0
 80208c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80208ca:	6a3b      	ldr	r3, [r7, #32]
 80208cc:	2b13      	cmp	r3, #19
 80208ce:	d901      	bls.n	80208d4 <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80208d0:	2313      	movs	r3, #19
 80208d2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80208d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208d6:	6a3a      	ldr	r2, [r7, #32]
 80208d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80208da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208dc:	6a3a      	ldr	r2, [r7, #32]
 80208de:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80208e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208e2:	2200      	movs	r2, #0
 80208e4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80208e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208e8:	3304      	adds	r3, #4
 80208ea:	4618      	mov	r0, r3
 80208ec:	f7fe fef4 	bl	801f6d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80208f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208f2:	3318      	adds	r3, #24
 80208f4:	4618      	mov	r0, r3
 80208f6:	f7fe feef 	bl	801f6d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80208fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80208fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020900:	6a3b      	ldr	r3, [r7, #32]
 8020902:	f1c3 0214 	rsb	r2, r3, #20
 8020906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020908:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802090c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802090e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8020910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020912:	2200      	movs	r2, #0
 8020914:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8020916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020918:	2200      	movs	r2, #0
 802091a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 802091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802091e:	2200      	movs	r2, #0
 8020920:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8020924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020926:	2200      	movs	r2, #0
 8020928:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 802092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802092e:	3360      	adds	r3, #96	; 0x60
 8020930:	224c      	movs	r2, #76	; 0x4c
 8020932:	2100      	movs	r1, #0
 8020934:	4618      	mov	r0, r3
 8020936:	f004 f8a3 	bl	8024a80 <memset>
 802093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802093c:	4a0e      	ldr	r2, [pc, #56]	; (8020978 <prvInitialiseNewTask+0x150>)
 802093e:	665a      	str	r2, [r3, #100]	; 0x64
 8020940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020942:	4a0e      	ldr	r2, [pc, #56]	; (802097c <prvInitialiseNewTask+0x154>)
 8020944:	669a      	str	r2, [r3, #104]	; 0x68
 8020946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020948:	4a0d      	ldr	r2, [pc, #52]	; (8020980 <prvInitialiseNewTask+0x158>)
 802094a:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802094c:	683a      	ldr	r2, [r7, #0]
 802094e:	68f9      	ldr	r1, [r7, #12]
 8020950:	6938      	ldr	r0, [r7, #16]
 8020952:	f001 fdc9 	bl	80224e8 <pxPortInitialiseStack>
 8020956:	4602      	mov	r2, r0
 8020958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802095a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 802095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802095e:	2b00      	cmp	r3, #0
 8020960:	d002      	beq.n	8020968 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8020962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020966:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020968:	bf00      	nop
 802096a:	3718      	adds	r7, #24
 802096c:	46bd      	mov	sp, r7
 802096e:	bd80      	pop	{r7, pc}
 8020970:	0802e610 	.word	0x0802e610
 8020974:	0802e690 	.word	0x0802e690
 8020978:	200130c8 	.word	0x200130c8
 802097c:	20013130 	.word	0x20013130
 8020980:	20013198 	.word	0x20013198

08020984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8020984:	b580      	push	{r7, lr}
 8020986:	b082      	sub	sp, #8
 8020988:	af00      	add	r7, sp, #0
 802098a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 802098c:	f001 fed8 	bl	8022740 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8020990:	4b2c      	ldr	r3, [pc, #176]	; (8020a44 <prvAddNewTaskToReadyList+0xc0>)
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	3301      	adds	r3, #1
 8020996:	4a2b      	ldr	r2, [pc, #172]	; (8020a44 <prvAddNewTaskToReadyList+0xc0>)
 8020998:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802099a:	4b2b      	ldr	r3, [pc, #172]	; (8020a48 <prvAddNewTaskToReadyList+0xc4>)
 802099c:	681b      	ldr	r3, [r3, #0]
 802099e:	2b00      	cmp	r3, #0
 80209a0:	d109      	bne.n	80209b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80209a2:	4a29      	ldr	r2, [pc, #164]	; (8020a48 <prvAddNewTaskToReadyList+0xc4>)
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80209a8:	4b26      	ldr	r3, [pc, #152]	; (8020a44 <prvAddNewTaskToReadyList+0xc0>)
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	2b01      	cmp	r3, #1
 80209ae:	d110      	bne.n	80209d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80209b0:	f000 fd7c 	bl	80214ac <prvInitialiseTaskLists>
 80209b4:	e00d      	b.n	80209d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80209b6:	4b25      	ldr	r3, [pc, #148]	; (8020a4c <prvAddNewTaskToReadyList+0xc8>)
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	d109      	bne.n	80209d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80209be:	4b22      	ldr	r3, [pc, #136]	; (8020a48 <prvAddNewTaskToReadyList+0xc4>)
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209c8:	429a      	cmp	r2, r3
 80209ca:	d802      	bhi.n	80209d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80209cc:	4a1e      	ldr	r2, [pc, #120]	; (8020a48 <prvAddNewTaskToReadyList+0xc4>)
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80209d2:	4b1f      	ldr	r3, [pc, #124]	; (8020a50 <prvAddNewTaskToReadyList+0xcc>)
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	3301      	adds	r3, #1
 80209d8:	4a1d      	ldr	r2, [pc, #116]	; (8020a50 <prvAddNewTaskToReadyList+0xcc>)
 80209da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80209dc:	4b1c      	ldr	r3, [pc, #112]	; (8020a50 <prvAddNewTaskToReadyList+0xcc>)
 80209de:	681a      	ldr	r2, [r3, #0]
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209e8:	2201      	movs	r2, #1
 80209ea:	409a      	lsls	r2, r3
 80209ec:	4b19      	ldr	r3, [pc, #100]	; (8020a54 <prvAddNewTaskToReadyList+0xd0>)
 80209ee:	681b      	ldr	r3, [r3, #0]
 80209f0:	4313      	orrs	r3, r2
 80209f2:	4a18      	ldr	r2, [pc, #96]	; (8020a54 <prvAddNewTaskToReadyList+0xd0>)
 80209f4:	6013      	str	r3, [r2, #0]
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209fa:	4613      	mov	r3, r2
 80209fc:	009b      	lsls	r3, r3, #2
 80209fe:	4413      	add	r3, r2
 8020a00:	009b      	lsls	r3, r3, #2
 8020a02:	4a15      	ldr	r2, [pc, #84]	; (8020a58 <prvAddNewTaskToReadyList+0xd4>)
 8020a04:	441a      	add	r2, r3
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	3304      	adds	r3, #4
 8020a0a:	4619      	mov	r1, r3
 8020a0c:	4610      	mov	r0, r2
 8020a0e:	f7fe fe70 	bl	801f6f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8020a12:	f001 fec3 	bl	802279c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8020a16:	4b0d      	ldr	r3, [pc, #52]	; (8020a4c <prvAddNewTaskToReadyList+0xc8>)
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d00e      	beq.n	8020a3c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8020a1e:	4b0a      	ldr	r3, [pc, #40]	; (8020a48 <prvAddNewTaskToReadyList+0xc4>)
 8020a20:	681b      	ldr	r3, [r3, #0]
 8020a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a28:	429a      	cmp	r2, r3
 8020a2a:	d207      	bcs.n	8020a3c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8020a2c:	4b0b      	ldr	r3, [pc, #44]	; (8020a5c <prvAddNewTaskToReadyList+0xd8>)
 8020a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020a32:	601a      	str	r2, [r3, #0]
 8020a34:	f3bf 8f4f 	dsb	sy
 8020a38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020a3c:	bf00      	nop
 8020a3e:	3708      	adds	r7, #8
 8020a40:	46bd      	mov	sp, r7
 8020a42:	bd80      	pop	{r7, pc}
 8020a44:	2000d6c0 	.word	0x2000d6c0
 8020a48:	2000d4b8 	.word	0x2000d4b8
 8020a4c:	2000d6cc 	.word	0x2000d6cc
 8020a50:	2000d6dc 	.word	0x2000d6dc
 8020a54:	2000d6c8 	.word	0x2000d6c8
 8020a58:	2000d4bc 	.word	0x2000d4bc
 8020a5c:	e000ed04 	.word	0xe000ed04

08020a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b084      	sub	sp, #16
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8020a68:	2300      	movs	r3, #0
 8020a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d012      	beq.n	8020a98 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8020a72:	4b11      	ldr	r3, [pc, #68]	; (8020ab8 <vTaskDelay+0x58>)
 8020a74:	681b      	ldr	r3, [r3, #0]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d005      	beq.n	8020a86 <vTaskDelay+0x26>
 8020a7a:	f240 5244 	movw	r2, #1348	; 0x544
 8020a7e:	490f      	ldr	r1, [pc, #60]	; (8020abc <vTaskDelay+0x5c>)
 8020a80:	480f      	ldr	r0, [pc, #60]	; (8020ac0 <vTaskDelay+0x60>)
 8020a82:	f7f1 fad3 	bl	801202c <assertFail>
			vTaskSuspendAll();
 8020a86:	f000 f8ff 	bl	8020c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8020a8a:	2100      	movs	r1, #0
 8020a8c:	6878      	ldr	r0, [r7, #4]
 8020a8e:	f001 f8c9 	bl	8021c24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8020a92:	f000 f907 	bl	8020ca4 <xTaskResumeAll>
 8020a96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8020a98:	68fb      	ldr	r3, [r7, #12]
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d107      	bne.n	8020aae <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 8020a9e:	4b09      	ldr	r3, [pc, #36]	; (8020ac4 <vTaskDelay+0x64>)
 8020aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020aa4:	601a      	str	r2, [r3, #0]
 8020aa6:	f3bf 8f4f 	dsb	sy
 8020aaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8020aae:	bf00      	nop
 8020ab0:	3710      	adds	r7, #16
 8020ab2:	46bd      	mov	sp, r7
 8020ab4:	bd80      	pop	{r7, pc}
 8020ab6:	bf00      	nop
 8020ab8:	2000d6e8 	.word	0x2000d6e8
 8020abc:	0802e610 	.word	0x0802e610
 8020ac0:	0802e6fc 	.word	0x0802e6fc
 8020ac4:	e000ed04 	.word	0xe000ed04

08020ac8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8020ac8:	b580      	push	{r7, lr}
 8020aca:	b088      	sub	sp, #32
 8020acc:	af00      	add	r7, sp, #0
 8020ace:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8020ad4:	69bb      	ldr	r3, [r7, #24]
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	d105      	bne.n	8020ae6 <eTaskGetState+0x1e>
 8020ada:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8020ade:	4926      	ldr	r1, [pc, #152]	; (8020b78 <eTaskGetState+0xb0>)
 8020ae0:	4826      	ldr	r0, [pc, #152]	; (8020b7c <eTaskGetState+0xb4>)
 8020ae2:	f7f1 faa3 	bl	801202c <assertFail>

		if( pxTCB == pxCurrentTCB )
 8020ae6:	4b26      	ldr	r3, [pc, #152]	; (8020b80 <eTaskGetState+0xb8>)
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	69ba      	ldr	r2, [r7, #24]
 8020aec:	429a      	cmp	r2, r3
 8020aee:	d102      	bne.n	8020af6 <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8020af0:	2300      	movs	r3, #0
 8020af2:	77fb      	strb	r3, [r7, #31]
 8020af4:	e03a      	b.n	8020b6c <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 8020af6:	f001 fe23 	bl	8022740 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8020afa:	69bb      	ldr	r3, [r7, #24]
 8020afc:	695b      	ldr	r3, [r3, #20]
 8020afe:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8020b00:	4b20      	ldr	r3, [pc, #128]	; (8020b84 <eTaskGetState+0xbc>)
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8020b06:	4b20      	ldr	r3, [pc, #128]	; (8020b88 <eTaskGetState+0xc0>)
 8020b08:	681b      	ldr	r3, [r3, #0]
 8020b0a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8020b0c:	f001 fe46 	bl	802279c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8020b10:	697a      	ldr	r2, [r7, #20]
 8020b12:	693b      	ldr	r3, [r7, #16]
 8020b14:	429a      	cmp	r2, r3
 8020b16:	d003      	beq.n	8020b20 <eTaskGetState+0x58>
 8020b18:	697a      	ldr	r2, [r7, #20]
 8020b1a:	68fb      	ldr	r3, [r7, #12]
 8020b1c:	429a      	cmp	r2, r3
 8020b1e:	d102      	bne.n	8020b26 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8020b20:	2302      	movs	r3, #2
 8020b22:	77fb      	strb	r3, [r7, #31]
 8020b24:	e022      	b.n	8020b6c <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8020b26:	697b      	ldr	r3, [r7, #20]
 8020b28:	4a18      	ldr	r2, [pc, #96]	; (8020b8c <eTaskGetState+0xc4>)
 8020b2a:	4293      	cmp	r3, r2
 8020b2c:	d112      	bne.n	8020b54 <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8020b2e:	69bb      	ldr	r3, [r7, #24]
 8020b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d10b      	bne.n	8020b4e <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8020b36:	69bb      	ldr	r3, [r7, #24]
 8020b38:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8020b3c:	b2db      	uxtb	r3, r3
 8020b3e:	2b01      	cmp	r3, #1
 8020b40:	d102      	bne.n	8020b48 <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 8020b42:	2302      	movs	r3, #2
 8020b44:	77fb      	strb	r3, [r7, #31]
 8020b46:	e011      	b.n	8020b6c <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 8020b48:	2303      	movs	r3, #3
 8020b4a:	77fb      	strb	r3, [r7, #31]
 8020b4c:	e00e      	b.n	8020b6c <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8020b4e:	2302      	movs	r3, #2
 8020b50:	77fb      	strb	r3, [r7, #31]
 8020b52:	e00b      	b.n	8020b6c <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8020b54:	697b      	ldr	r3, [r7, #20]
 8020b56:	4a0e      	ldr	r2, [pc, #56]	; (8020b90 <eTaskGetState+0xc8>)
 8020b58:	4293      	cmp	r3, r2
 8020b5a:	d002      	beq.n	8020b62 <eTaskGetState+0x9a>
 8020b5c:	697b      	ldr	r3, [r7, #20]
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	d102      	bne.n	8020b68 <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8020b62:	2304      	movs	r3, #4
 8020b64:	77fb      	strb	r3, [r7, #31]
 8020b66:	e001      	b.n	8020b6c <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8020b68:	2301      	movs	r3, #1
 8020b6a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8020b6c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8020b6e:	4618      	mov	r0, r3
 8020b70:	3720      	adds	r7, #32
 8020b72:	46bd      	mov	sp, r7
 8020b74:	bd80      	pop	{r7, pc}
 8020b76:	bf00      	nop
 8020b78:	0802e610 	.word	0x0802e610
 8020b7c:	0802e744 	.word	0x0802e744
 8020b80:	2000d4b8 	.word	0x2000d4b8
 8020b84:	2000d674 	.word	0x2000d674
 8020b88:	2000d678 	.word	0x2000d678
 8020b8c:	2000d6a8 	.word	0x2000d6a8
 8020b90:	2000d690 	.word	0x2000d690

08020b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b08a      	sub	sp, #40	; 0x28
 8020b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8020b9a:	2300      	movs	r3, #0
 8020b9c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8020b9e:	2300      	movs	r3, #0
 8020ba0:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8020ba2:	1d3a      	adds	r2, r7, #4
 8020ba4:	f107 0108 	add.w	r1, r7, #8
 8020ba8:	f107 030c 	add.w	r3, r7, #12
 8020bac:	4618      	mov	r0, r3
 8020bae:	f7f4 fcd9 	bl	8015564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8020bb2:	6879      	ldr	r1, [r7, #4]
 8020bb4:	68bb      	ldr	r3, [r7, #8]
 8020bb6:	68fa      	ldr	r2, [r7, #12]
 8020bb8:	9202      	str	r2, [sp, #8]
 8020bba:	9301      	str	r3, [sp, #4]
 8020bbc:	2300      	movs	r3, #0
 8020bbe:	9300      	str	r3, [sp, #0]
 8020bc0:	2300      	movs	r3, #0
 8020bc2:	460a      	mov	r2, r1
 8020bc4:	4925      	ldr	r1, [pc, #148]	; (8020c5c <vTaskStartScheduler+0xc8>)
 8020bc6:	4826      	ldr	r0, [pc, #152]	; (8020c60 <vTaskStartScheduler+0xcc>)
 8020bc8:	f7ff fd92 	bl	80206f0 <xTaskCreateStatic>
 8020bcc:	4603      	mov	r3, r0
 8020bce:	4a25      	ldr	r2, [pc, #148]	; (8020c64 <vTaskStartScheduler+0xd0>)
 8020bd0:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8020bd2:	4b24      	ldr	r3, [pc, #144]	; (8020c64 <vTaskStartScheduler+0xd0>)
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d002      	beq.n	8020be0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8020bda:	2301      	movs	r3, #1
 8020bdc:	617b      	str	r3, [r7, #20]
 8020bde:	e001      	b.n	8020be4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8020be0:	2300      	movs	r3, #0
 8020be2:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8020be4:	697b      	ldr	r3, [r7, #20]
 8020be6:	2b01      	cmp	r3, #1
 8020be8:	d102      	bne.n	8020bf0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8020bea:	f001 f881 	bl	8021cf0 <xTimerCreateTimerTask>
 8020bee:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	2b01      	cmp	r3, #1
 8020bf4:	d123      	bne.n	8020c3e <vTaskStartScheduler+0xaa>
	__asm volatile
 8020bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020bfa:	f383 8811 	msr	BASEPRI, r3
 8020bfe:	f3bf 8f6f 	isb	sy
 8020c02:	f3bf 8f4f 	dsb	sy
 8020c06:	613b      	str	r3, [r7, #16]
}
 8020c08:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8020c0a:	4b17      	ldr	r3, [pc, #92]	; (8020c68 <vTaskStartScheduler+0xd4>)
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	3360      	adds	r3, #96	; 0x60
 8020c10:	4a16      	ldr	r2, [pc, #88]	; (8020c6c <vTaskStartScheduler+0xd8>)
 8020c12:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8020c14:	4b16      	ldr	r3, [pc, #88]	; (8020c70 <vTaskStartScheduler+0xdc>)
 8020c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020c1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8020c1c:	4b15      	ldr	r3, [pc, #84]	; (8020c74 <vTaskStartScheduler+0xe0>)
 8020c1e:	2201      	movs	r2, #1
 8020c20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8020c22:	4b15      	ldr	r3, [pc, #84]	; (8020c78 <vTaskStartScheduler+0xe4>)
 8020c24:	2200      	movs	r2, #0
 8020c26:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8020c28:	f7f4 fc82 	bl	8015530 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8020c2c:	4b0e      	ldr	r3, [pc, #56]	; (8020c68 <vTaskStartScheduler+0xd4>)
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	3334      	adds	r3, #52	; 0x34
 8020c32:	4a12      	ldr	r2, [pc, #72]	; (8020c7c <vTaskStartScheduler+0xe8>)
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8020c38:	f001 fcda 	bl	80225f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8020c3c:	e009      	b.n	8020c52 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8020c3e:	697b      	ldr	r3, [r7, #20]
 8020c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020c44:	d105      	bne.n	8020c52 <vTaskStartScheduler+0xbe>
 8020c46:	f640 022a 	movw	r2, #2090	; 0x82a
 8020c4a:	490d      	ldr	r1, [pc, #52]	; (8020c80 <vTaskStartScheduler+0xec>)
 8020c4c:	480d      	ldr	r0, [pc, #52]	; (8020c84 <vTaskStartScheduler+0xf0>)
 8020c4e:	f7f1 f9ed 	bl	801202c <assertFail>
}
 8020c52:	bf00      	nop
 8020c54:	3718      	adds	r7, #24
 8020c56:	46bd      	mov	sp, r7
 8020c58:	bd80      	pop	{r7, pc}
 8020c5a:	bf00      	nop
 8020c5c:	0802e790 	.word	0x0802e790
 8020c60:	08021479 	.word	0x08021479
 8020c64:	2000d6e4 	.word	0x2000d6e4
 8020c68:	2000d4b8 	.word	0x2000d4b8
 8020c6c:	20001050 	.word	0x20001050
 8020c70:	2000d6e0 	.word	0x2000d6e0
 8020c74:	2000d6cc 	.word	0x2000d6cc
 8020c78:	2000d6c4 	.word	0x2000d6c4
 8020c7c:	e0000004 	.word	0xe0000004
 8020c80:	0802e610 	.word	0x0802e610
 8020c84:	0802e798 	.word	0x0802e798

08020c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8020c88:	b480      	push	{r7}
 8020c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8020c8c:	4b04      	ldr	r3, [pc, #16]	; (8020ca0 <vTaskSuspendAll+0x18>)
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	3301      	adds	r3, #1
 8020c92:	4a03      	ldr	r2, [pc, #12]	; (8020ca0 <vTaskSuspendAll+0x18>)
 8020c94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8020c96:	bf00      	nop
 8020c98:	46bd      	mov	sp, r7
 8020c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c9e:	4770      	bx	lr
 8020ca0:	2000d6e8 	.word	0x2000d6e8

08020ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8020ca4:	b580      	push	{r7, lr}
 8020ca6:	b084      	sub	sp, #16
 8020ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8020caa:	2300      	movs	r3, #0
 8020cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8020cae:	2300      	movs	r3, #0
 8020cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8020cb2:	4b3f      	ldr	r3, [pc, #252]	; (8020db0 <xTaskResumeAll+0x10c>)
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d105      	bne.n	8020cc6 <xTaskResumeAll+0x22>
 8020cba:	f640 0299 	movw	r2, #2201	; 0x899
 8020cbe:	493d      	ldr	r1, [pc, #244]	; (8020db4 <xTaskResumeAll+0x110>)
 8020cc0:	483d      	ldr	r0, [pc, #244]	; (8020db8 <xTaskResumeAll+0x114>)
 8020cc2:	f7f1 f9b3 	bl	801202c <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8020cc6:	f001 fd3b 	bl	8022740 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8020cca:	4b39      	ldr	r3, [pc, #228]	; (8020db0 <xTaskResumeAll+0x10c>)
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	3b01      	subs	r3, #1
 8020cd0:	4a37      	ldr	r2, [pc, #220]	; (8020db0 <xTaskResumeAll+0x10c>)
 8020cd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020cd4:	4b36      	ldr	r3, [pc, #216]	; (8020db0 <xTaskResumeAll+0x10c>)
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	d161      	bne.n	8020da0 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8020cdc:	4b37      	ldr	r3, [pc, #220]	; (8020dbc <xTaskResumeAll+0x118>)
 8020cde:	681b      	ldr	r3, [r3, #0]
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d05d      	beq.n	8020da0 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8020ce4:	e02e      	b.n	8020d44 <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020ce6:	4b36      	ldr	r3, [pc, #216]	; (8020dc0 <xTaskResumeAll+0x11c>)
 8020ce8:	68db      	ldr	r3, [r3, #12]
 8020cea:	68db      	ldr	r3, [r3, #12]
 8020cec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	3318      	adds	r3, #24
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	f7fe fd5a 	bl	801f7ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	3304      	adds	r3, #4
 8020cfc:	4618      	mov	r0, r3
 8020cfe:	f7fe fd55 	bl	801f7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8020d02:	68fb      	ldr	r3, [r7, #12]
 8020d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d06:	2201      	movs	r2, #1
 8020d08:	409a      	lsls	r2, r3
 8020d0a:	4b2e      	ldr	r3, [pc, #184]	; (8020dc4 <xTaskResumeAll+0x120>)
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	4313      	orrs	r3, r2
 8020d10:	4a2c      	ldr	r2, [pc, #176]	; (8020dc4 <xTaskResumeAll+0x120>)
 8020d12:	6013      	str	r3, [r2, #0]
 8020d14:	68fb      	ldr	r3, [r7, #12]
 8020d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020d18:	4613      	mov	r3, r2
 8020d1a:	009b      	lsls	r3, r3, #2
 8020d1c:	4413      	add	r3, r2
 8020d1e:	009b      	lsls	r3, r3, #2
 8020d20:	4a29      	ldr	r2, [pc, #164]	; (8020dc8 <xTaskResumeAll+0x124>)
 8020d22:	441a      	add	r2, r3
 8020d24:	68fb      	ldr	r3, [r7, #12]
 8020d26:	3304      	adds	r3, #4
 8020d28:	4619      	mov	r1, r3
 8020d2a:	4610      	mov	r0, r2
 8020d2c:	f7fe fce1 	bl	801f6f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8020d30:	68fb      	ldr	r3, [r7, #12]
 8020d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020d34:	4b25      	ldr	r3, [pc, #148]	; (8020dcc <xTaskResumeAll+0x128>)
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d3a:	429a      	cmp	r2, r3
 8020d3c:	d302      	bcc.n	8020d44 <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 8020d3e:	4b24      	ldr	r3, [pc, #144]	; (8020dd0 <xTaskResumeAll+0x12c>)
 8020d40:	2201      	movs	r2, #1
 8020d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8020d44:	4b1e      	ldr	r3, [pc, #120]	; (8020dc0 <xTaskResumeAll+0x11c>)
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	d1cc      	bne.n	8020ce6 <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d001      	beq.n	8020d56 <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8020d52:	f000 fd21 	bl	8021798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8020d56:	4b1f      	ldr	r3, [pc, #124]	; (8020dd4 <xTaskResumeAll+0x130>)
 8020d58:	681b      	ldr	r3, [r3, #0]
 8020d5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d010      	beq.n	8020d84 <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8020d62:	f000 f8db 	bl	8020f1c <xTaskIncrementTick>
 8020d66:	4603      	mov	r3, r0
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	d002      	beq.n	8020d72 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 8020d6c:	4b18      	ldr	r3, [pc, #96]	; (8020dd0 <xTaskResumeAll+0x12c>)
 8020d6e:	2201      	movs	r2, #1
 8020d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	3b01      	subs	r3, #1
 8020d76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	2b00      	cmp	r3, #0
 8020d7c:	d1f1      	bne.n	8020d62 <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 8020d7e:	4b15      	ldr	r3, [pc, #84]	; (8020dd4 <xTaskResumeAll+0x130>)
 8020d80:	2200      	movs	r2, #0
 8020d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8020d84:	4b12      	ldr	r3, [pc, #72]	; (8020dd0 <xTaskResumeAll+0x12c>)
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	d009      	beq.n	8020da0 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8020d8c:	2301      	movs	r3, #1
 8020d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8020d90:	4b11      	ldr	r3, [pc, #68]	; (8020dd8 <xTaskResumeAll+0x134>)
 8020d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020d96:	601a      	str	r2, [r3, #0]
 8020d98:	f3bf 8f4f 	dsb	sy
 8020d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020da0:	f001 fcfc 	bl	802279c <vPortExitCritical>

	return xAlreadyYielded;
 8020da4:	68bb      	ldr	r3, [r7, #8]
}
 8020da6:	4618      	mov	r0, r3
 8020da8:	3710      	adds	r7, #16
 8020daa:	46bd      	mov	sp, r7
 8020dac:	bd80      	pop	{r7, pc}
 8020dae:	bf00      	nop
 8020db0:	2000d6e8 	.word	0x2000d6e8
 8020db4:	0802e610 	.word	0x0802e610
 8020db8:	0802e7cc 	.word	0x0802e7cc
 8020dbc:	2000d6c0 	.word	0x2000d6c0
 8020dc0:	2000d67c 	.word	0x2000d67c
 8020dc4:	2000d6c8 	.word	0x2000d6c8
 8020dc8:	2000d4bc 	.word	0x2000d4bc
 8020dcc:	2000d4b8 	.word	0x2000d4b8
 8020dd0:	2000d6d4 	.word	0x2000d6d4
 8020dd4:	2000d6d0 	.word	0x2000d6d0
 8020dd8:	e000ed04 	.word	0xe000ed04

08020ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8020ddc:	b480      	push	{r7}
 8020dde:	b083      	sub	sp, #12
 8020de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8020de2:	4b05      	ldr	r3, [pc, #20]	; (8020df8 <xTaskGetTickCount+0x1c>)
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8020de8:	687b      	ldr	r3, [r7, #4]
}
 8020dea:	4618      	mov	r0, r3
 8020dec:	370c      	adds	r7, #12
 8020dee:	46bd      	mov	sp, r7
 8020df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020df4:	4770      	bx	lr
 8020df6:	bf00      	nop
 8020df8:	2000d6c4 	.word	0x2000d6c4

08020dfc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8020dfc:	b580      	push	{r7, lr}
 8020dfe:	b086      	sub	sp, #24
 8020e00:	af00      	add	r7, sp, #0
 8020e02:	60f8      	str	r0, [r7, #12]
 8020e04:	60b9      	str	r1, [r7, #8]
 8020e06:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8020e08:	2300      	movs	r3, #0
 8020e0a:	617b      	str	r3, [r7, #20]
 8020e0c:	2314      	movs	r3, #20
 8020e0e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8020e10:	f7ff ff3a 	bl	8020c88 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8020e14:	4b3b      	ldr	r3, [pc, #236]	; (8020f04 <uxTaskGetSystemState+0x108>)
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	68ba      	ldr	r2, [r7, #8]
 8020e1a:	429a      	cmp	r2, r3
 8020e1c:	d36a      	bcc.n	8020ef4 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8020e1e:	693b      	ldr	r3, [r7, #16]
 8020e20:	3b01      	subs	r3, #1
 8020e22:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8020e24:	697a      	ldr	r2, [r7, #20]
 8020e26:	4613      	mov	r3, r2
 8020e28:	00db      	lsls	r3, r3, #3
 8020e2a:	4413      	add	r3, r2
 8020e2c:	009b      	lsls	r3, r3, #2
 8020e2e:	461a      	mov	r2, r3
 8020e30:	68fb      	ldr	r3, [r7, #12]
 8020e32:	1898      	adds	r0, r3, r2
 8020e34:	693a      	ldr	r2, [r7, #16]
 8020e36:	4613      	mov	r3, r2
 8020e38:	009b      	lsls	r3, r3, #2
 8020e3a:	4413      	add	r3, r2
 8020e3c:	009b      	lsls	r3, r3, #2
 8020e3e:	4a32      	ldr	r2, [pc, #200]	; (8020f08 <uxTaskGetSystemState+0x10c>)
 8020e40:	4413      	add	r3, r2
 8020e42:	2201      	movs	r2, #1
 8020e44:	4619      	mov	r1, r3
 8020e46:	f000 fc05 	bl	8021654 <prvListTasksWithinSingleList>
 8020e4a:	4602      	mov	r2, r0
 8020e4c:	697b      	ldr	r3, [r7, #20]
 8020e4e:	4413      	add	r3, r2
 8020e50:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020e52:	693b      	ldr	r3, [r7, #16]
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	d1e2      	bne.n	8020e1e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8020e58:	697a      	ldr	r2, [r7, #20]
 8020e5a:	4613      	mov	r3, r2
 8020e5c:	00db      	lsls	r3, r3, #3
 8020e5e:	4413      	add	r3, r2
 8020e60:	009b      	lsls	r3, r3, #2
 8020e62:	461a      	mov	r2, r3
 8020e64:	68fb      	ldr	r3, [r7, #12]
 8020e66:	4413      	add	r3, r2
 8020e68:	4a28      	ldr	r2, [pc, #160]	; (8020f0c <uxTaskGetSystemState+0x110>)
 8020e6a:	6811      	ldr	r1, [r2, #0]
 8020e6c:	2202      	movs	r2, #2
 8020e6e:	4618      	mov	r0, r3
 8020e70:	f000 fbf0 	bl	8021654 <prvListTasksWithinSingleList>
 8020e74:	4602      	mov	r2, r0
 8020e76:	697b      	ldr	r3, [r7, #20]
 8020e78:	4413      	add	r3, r2
 8020e7a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8020e7c:	697a      	ldr	r2, [r7, #20]
 8020e7e:	4613      	mov	r3, r2
 8020e80:	00db      	lsls	r3, r3, #3
 8020e82:	4413      	add	r3, r2
 8020e84:	009b      	lsls	r3, r3, #2
 8020e86:	461a      	mov	r2, r3
 8020e88:	68fb      	ldr	r3, [r7, #12]
 8020e8a:	4413      	add	r3, r2
 8020e8c:	4a20      	ldr	r2, [pc, #128]	; (8020f10 <uxTaskGetSystemState+0x114>)
 8020e8e:	6811      	ldr	r1, [r2, #0]
 8020e90:	2202      	movs	r2, #2
 8020e92:	4618      	mov	r0, r3
 8020e94:	f000 fbde 	bl	8021654 <prvListTasksWithinSingleList>
 8020e98:	4602      	mov	r2, r0
 8020e9a:	697b      	ldr	r3, [r7, #20]
 8020e9c:	4413      	add	r3, r2
 8020e9e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8020ea0:	697a      	ldr	r2, [r7, #20]
 8020ea2:	4613      	mov	r3, r2
 8020ea4:	00db      	lsls	r3, r3, #3
 8020ea6:	4413      	add	r3, r2
 8020ea8:	009b      	lsls	r3, r3, #2
 8020eaa:	461a      	mov	r2, r3
 8020eac:	68fb      	ldr	r3, [r7, #12]
 8020eae:	4413      	add	r3, r2
 8020eb0:	2204      	movs	r2, #4
 8020eb2:	4918      	ldr	r1, [pc, #96]	; (8020f14 <uxTaskGetSystemState+0x118>)
 8020eb4:	4618      	mov	r0, r3
 8020eb6:	f000 fbcd 	bl	8021654 <prvListTasksWithinSingleList>
 8020eba:	4602      	mov	r2, r0
 8020ebc:	697b      	ldr	r3, [r7, #20]
 8020ebe:	4413      	add	r3, r2
 8020ec0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8020ec2:	697a      	ldr	r2, [r7, #20]
 8020ec4:	4613      	mov	r3, r2
 8020ec6:	00db      	lsls	r3, r3, #3
 8020ec8:	4413      	add	r3, r2
 8020eca:	009b      	lsls	r3, r3, #2
 8020ecc:	461a      	mov	r2, r3
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	4413      	add	r3, r2
 8020ed2:	2203      	movs	r2, #3
 8020ed4:	4910      	ldr	r1, [pc, #64]	; (8020f18 <uxTaskGetSystemState+0x11c>)
 8020ed6:	4618      	mov	r0, r3
 8020ed8:	f000 fbbc 	bl	8021654 <prvListTasksWithinSingleList>
 8020edc:	4602      	mov	r2, r0
 8020ede:	697b      	ldr	r3, [r7, #20]
 8020ee0:	4413      	add	r3, r2
 8020ee2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d004      	beq.n	8020ef4 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8020eea:	f7f4 fb28 	bl	801553e <getRunTimeCounterValue>
 8020eee:	4602      	mov	r2, r0
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8020ef4:	f7ff fed6 	bl	8020ca4 <xTaskResumeAll>

		return uxTask;
 8020ef8:	697b      	ldr	r3, [r7, #20]
	}
 8020efa:	4618      	mov	r0, r3
 8020efc:	3718      	adds	r7, #24
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd80      	pop	{r7, pc}
 8020f02:	bf00      	nop
 8020f04:	2000d6c0 	.word	0x2000d6c0
 8020f08:	2000d4bc 	.word	0x2000d4bc
 8020f0c:	2000d674 	.word	0x2000d674
 8020f10:	2000d678 	.word	0x2000d678
 8020f14:	2000d690 	.word	0x2000d690
 8020f18:	2000d6a8 	.word	0x2000d6a8

08020f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b086      	sub	sp, #24
 8020f20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8020f22:	2300      	movs	r3, #0
 8020f24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8020f26:	4a4e      	ldr	r2, [pc, #312]	; (8021060 <xTaskIncrementTick+0x144>)
 8020f28:	4b4e      	ldr	r3, [pc, #312]	; (8021064 <xTaskIncrementTick+0x148>)
 8020f2a:	681b      	ldr	r3, [r3, #0]
 8020f2c:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020f2e:	4b4e      	ldr	r3, [pc, #312]	; (8021068 <xTaskIncrementTick+0x14c>)
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	f040 8089 	bne.w	802104a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8020f38:	4b4a      	ldr	r3, [pc, #296]	; (8021064 <xTaskIncrementTick+0x148>)
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	3301      	adds	r3, #1
 8020f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8020f40:	4a48      	ldr	r2, [pc, #288]	; (8021064 <xTaskIncrementTick+0x148>)
 8020f42:	693b      	ldr	r3, [r7, #16]
 8020f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8020f46:	693b      	ldr	r3, [r7, #16]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d11b      	bne.n	8020f84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8020f4c:	4b47      	ldr	r3, [pc, #284]	; (802106c <xTaskIncrementTick+0x150>)
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	681b      	ldr	r3, [r3, #0]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d005      	beq.n	8020f62 <xTaskIncrementTick+0x46>
 8020f56:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8020f5a:	4945      	ldr	r1, [pc, #276]	; (8021070 <xTaskIncrementTick+0x154>)
 8020f5c:	4845      	ldr	r0, [pc, #276]	; (8021074 <xTaskIncrementTick+0x158>)
 8020f5e:	f7f1 f865 	bl	801202c <assertFail>
 8020f62:	4b42      	ldr	r3, [pc, #264]	; (802106c <xTaskIncrementTick+0x150>)
 8020f64:	681b      	ldr	r3, [r3, #0]
 8020f66:	60fb      	str	r3, [r7, #12]
 8020f68:	4b43      	ldr	r3, [pc, #268]	; (8021078 <xTaskIncrementTick+0x15c>)
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	4a3f      	ldr	r2, [pc, #252]	; (802106c <xTaskIncrementTick+0x150>)
 8020f6e:	6013      	str	r3, [r2, #0]
 8020f70:	4a41      	ldr	r2, [pc, #260]	; (8021078 <xTaskIncrementTick+0x15c>)
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	6013      	str	r3, [r2, #0]
 8020f76:	4b41      	ldr	r3, [pc, #260]	; (802107c <xTaskIncrementTick+0x160>)
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	3301      	adds	r3, #1
 8020f7c:	4a3f      	ldr	r2, [pc, #252]	; (802107c <xTaskIncrementTick+0x160>)
 8020f7e:	6013      	str	r3, [r2, #0]
 8020f80:	f000 fc0a 	bl	8021798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8020f84:	4b3e      	ldr	r3, [pc, #248]	; (8021080 <xTaskIncrementTick+0x164>)
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	693a      	ldr	r2, [r7, #16]
 8020f8a:	429a      	cmp	r2, r3
 8020f8c:	d348      	bcc.n	8021020 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8020f8e:	4b37      	ldr	r3, [pc, #220]	; (802106c <xTaskIncrementTick+0x150>)
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d104      	bne.n	8020fa2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020f98:	4b39      	ldr	r3, [pc, #228]	; (8021080 <xTaskIncrementTick+0x164>)
 8020f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020f9e:	601a      	str	r2, [r3, #0]
					break;
 8020fa0:	e03e      	b.n	8021020 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020fa2:	4b32      	ldr	r3, [pc, #200]	; (802106c <xTaskIncrementTick+0x150>)
 8020fa4:	681b      	ldr	r3, [r3, #0]
 8020fa6:	68db      	ldr	r3, [r3, #12]
 8020fa8:	68db      	ldr	r3, [r3, #12]
 8020faa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8020fac:	68bb      	ldr	r3, [r7, #8]
 8020fae:	685b      	ldr	r3, [r3, #4]
 8020fb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8020fb2:	693a      	ldr	r2, [r7, #16]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	429a      	cmp	r2, r3
 8020fb8:	d203      	bcs.n	8020fc2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8020fba:	4a31      	ldr	r2, [pc, #196]	; (8021080 <xTaskIncrementTick+0x164>)
 8020fbc:	687b      	ldr	r3, [r7, #4]
 8020fbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8020fc0:	e02e      	b.n	8021020 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020fc2:	68bb      	ldr	r3, [r7, #8]
 8020fc4:	3304      	adds	r3, #4
 8020fc6:	4618      	mov	r0, r3
 8020fc8:	f7fe fbf0 	bl	801f7ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8020fcc:	68bb      	ldr	r3, [r7, #8]
 8020fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d004      	beq.n	8020fde <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020fd4:	68bb      	ldr	r3, [r7, #8]
 8020fd6:	3318      	adds	r3, #24
 8020fd8:	4618      	mov	r0, r3
 8020fda:	f7fe fbe7 	bl	801f7ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8020fde:	68bb      	ldr	r3, [r7, #8]
 8020fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fe2:	2201      	movs	r2, #1
 8020fe4:	409a      	lsls	r2, r3
 8020fe6:	4b27      	ldr	r3, [pc, #156]	; (8021084 <xTaskIncrementTick+0x168>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	4313      	orrs	r3, r2
 8020fec:	4a25      	ldr	r2, [pc, #148]	; (8021084 <xTaskIncrementTick+0x168>)
 8020fee:	6013      	str	r3, [r2, #0]
 8020ff0:	68bb      	ldr	r3, [r7, #8]
 8020ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020ff4:	4613      	mov	r3, r2
 8020ff6:	009b      	lsls	r3, r3, #2
 8020ff8:	4413      	add	r3, r2
 8020ffa:	009b      	lsls	r3, r3, #2
 8020ffc:	4a22      	ldr	r2, [pc, #136]	; (8021088 <xTaskIncrementTick+0x16c>)
 8020ffe:	441a      	add	r2, r3
 8021000:	68bb      	ldr	r3, [r7, #8]
 8021002:	3304      	adds	r3, #4
 8021004:	4619      	mov	r1, r3
 8021006:	4610      	mov	r0, r2
 8021008:	f7fe fb73 	bl	801f6f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802100c:	68bb      	ldr	r3, [r7, #8]
 802100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021010:	4b1e      	ldr	r3, [pc, #120]	; (802108c <xTaskIncrementTick+0x170>)
 8021012:	681b      	ldr	r3, [r3, #0]
 8021014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021016:	429a      	cmp	r2, r3
 8021018:	d3b9      	bcc.n	8020f8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 802101a:	2301      	movs	r3, #1
 802101c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802101e:	e7b6      	b.n	8020f8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8021020:	4b1a      	ldr	r3, [pc, #104]	; (802108c <xTaskIncrementTick+0x170>)
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021026:	4918      	ldr	r1, [pc, #96]	; (8021088 <xTaskIncrementTick+0x16c>)
 8021028:	4613      	mov	r3, r2
 802102a:	009b      	lsls	r3, r3, #2
 802102c:	4413      	add	r3, r2
 802102e:	009b      	lsls	r3, r3, #2
 8021030:	440b      	add	r3, r1
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	2b01      	cmp	r3, #1
 8021036:	d901      	bls.n	802103c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8021038:	2301      	movs	r3, #1
 802103a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 802103c:	4b14      	ldr	r3, [pc, #80]	; (8021090 <xTaskIncrementTick+0x174>)
 802103e:	681b      	ldr	r3, [r3, #0]
 8021040:	2b00      	cmp	r3, #0
 8021042:	d007      	beq.n	8021054 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8021044:	2301      	movs	r3, #1
 8021046:	617b      	str	r3, [r7, #20]
 8021048:	e004      	b.n	8021054 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 802104a:	4b12      	ldr	r3, [pc, #72]	; (8021094 <xTaskIncrementTick+0x178>)
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	3301      	adds	r3, #1
 8021050:	4a10      	ldr	r2, [pc, #64]	; (8021094 <xTaskIncrementTick+0x178>)
 8021052:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8021054:	697b      	ldr	r3, [r7, #20]
}
 8021056:	4618      	mov	r0, r3
 8021058:	3718      	adds	r7, #24
 802105a:	46bd      	mov	sp, r7
 802105c:	bd80      	pop	{r7, pc}
 802105e:	bf00      	nop
 8021060:	e0000008 	.word	0xe0000008
 8021064:	2000d6c4 	.word	0x2000d6c4
 8021068:	2000d6e8 	.word	0x2000d6e8
 802106c:	2000d674 	.word	0x2000d674
 8021070:	0802e610 	.word	0x0802e610
 8021074:	0802e818 	.word	0x0802e818
 8021078:	2000d678 	.word	0x2000d678
 802107c:	2000d6d8 	.word	0x2000d6d8
 8021080:	2000d6e0 	.word	0x2000d6e0
 8021084:	2000d6c8 	.word	0x2000d6c8
 8021088:	2000d4bc 	.word	0x2000d4bc
 802108c:	2000d4b8 	.word	0x2000d4b8
 8021090:	2000d6d4 	.word	0x2000d6d4
 8021094:	2000d6d0 	.word	0x2000d6d0

08021098 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8021098:	b580      	push	{r7, lr}
 802109a:	b084      	sub	sp, #16
 802109c:	af00      	add	r7, sp, #0
 802109e:	6078      	str	r0, [r7, #4]
 80210a0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	d103      	bne.n	80210b0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80210a8:	4b08      	ldr	r3, [pc, #32]	; (80210cc <vTaskSetApplicationTaskTag+0x34>)
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	60fb      	str	r3, [r7, #12]
 80210ae:	e001      	b.n	80210b4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80210b4:	f001 fb44 	bl	8022740 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80210b8:	68fb      	ldr	r3, [r7, #12]
 80210ba:	683a      	ldr	r2, [r7, #0]
 80210bc:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80210be:	f001 fb6d 	bl	802279c <vPortExitCritical>
	}
 80210c2:	bf00      	nop
 80210c4:	3710      	adds	r7, #16
 80210c6:	46bd      	mov	sp, r7
 80210c8:	bd80      	pop	{r7, pc}
 80210ca:	bf00      	nop
 80210cc:	2000d4b8 	.word	0x2000d4b8

080210d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80210d0:	b580      	push	{r7, lr}
 80210d2:	b084      	sub	sp, #16
 80210d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80210d6:	4b44      	ldr	r3, [pc, #272]	; (80211e8 <vTaskSwitchContext+0x118>)
 80210d8:	681b      	ldr	r3, [r3, #0]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d003      	beq.n	80210e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80210de:	4b43      	ldr	r3, [pc, #268]	; (80211ec <vTaskSwitchContext+0x11c>)
 80210e0:	2201      	movs	r2, #1
 80210e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80210e4:	e07b      	b.n	80211de <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 80210e6:	4b41      	ldr	r3, [pc, #260]	; (80211ec <vTaskSwitchContext+0x11c>)
 80210e8:	2200      	movs	r2, #0
 80210ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80210ec:	f7f4 fa27 	bl	801553e <getRunTimeCounterValue>
 80210f0:	4603      	mov	r3, r0
 80210f2:	4a3f      	ldr	r2, [pc, #252]	; (80211f0 <vTaskSwitchContext+0x120>)
 80210f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80210f6:	4b3e      	ldr	r3, [pc, #248]	; (80211f0 <vTaskSwitchContext+0x120>)
 80210f8:	681a      	ldr	r2, [r3, #0]
 80210fa:	4b3e      	ldr	r3, [pc, #248]	; (80211f4 <vTaskSwitchContext+0x124>)
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	429a      	cmp	r2, r3
 8021100:	d909      	bls.n	8021116 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8021102:	4b3d      	ldr	r3, [pc, #244]	; (80211f8 <vTaskSwitchContext+0x128>)
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8021108:	4a39      	ldr	r2, [pc, #228]	; (80211f0 <vTaskSwitchContext+0x120>)
 802110a:	6810      	ldr	r0, [r2, #0]
 802110c:	4a39      	ldr	r2, [pc, #228]	; (80211f4 <vTaskSwitchContext+0x124>)
 802110e:	6812      	ldr	r2, [r2, #0]
 8021110:	1a82      	subs	r2, r0, r2
 8021112:	440a      	add	r2, r1
 8021114:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8021116:	4b36      	ldr	r3, [pc, #216]	; (80211f0 <vTaskSwitchContext+0x120>)
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	4a36      	ldr	r2, [pc, #216]	; (80211f4 <vTaskSwitchContext+0x124>)
 802111c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 802111e:	4b36      	ldr	r3, [pc, #216]	; (80211f8 <vTaskSwitchContext+0x128>)
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	681a      	ldr	r2, [r3, #0]
 8021124:	4b34      	ldr	r3, [pc, #208]	; (80211f8 <vTaskSwitchContext+0x128>)
 8021126:	681b      	ldr	r3, [r3, #0]
 8021128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802112a:	429a      	cmp	r2, r3
 802112c:	d808      	bhi.n	8021140 <vTaskSwitchContext+0x70>
 802112e:	4b32      	ldr	r3, [pc, #200]	; (80211f8 <vTaskSwitchContext+0x128>)
 8021130:	681a      	ldr	r2, [r3, #0]
 8021132:	4b31      	ldr	r3, [pc, #196]	; (80211f8 <vTaskSwitchContext+0x128>)
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	3334      	adds	r3, #52	; 0x34
 8021138:	4619      	mov	r1, r3
 802113a:	4610      	mov	r0, r2
 802113c:	f7f4 fa07 	bl	801554e <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8021140:	4b2d      	ldr	r3, [pc, #180]	; (80211f8 <vTaskSwitchContext+0x128>)
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	4a2d      	ldr	r2, [pc, #180]	; (80211fc <vTaskSwitchContext+0x12c>)
 8021146:	6812      	ldr	r2, [r2, #0]
 8021148:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802114c:	4b2c      	ldr	r3, [pc, #176]	; (8021200 <vTaskSwitchContext+0x130>)
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	fab3 f383 	clz	r3, r3
 8021158:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 802115a:	78fb      	ldrb	r3, [r7, #3]
 802115c:	f1c3 031f 	rsb	r3, r3, #31
 8021160:	60fb      	str	r3, [r7, #12]
 8021162:	4928      	ldr	r1, [pc, #160]	; (8021204 <vTaskSwitchContext+0x134>)
 8021164:	68fa      	ldr	r2, [r7, #12]
 8021166:	4613      	mov	r3, r2
 8021168:	009b      	lsls	r3, r3, #2
 802116a:	4413      	add	r3, r2
 802116c:	009b      	lsls	r3, r3, #2
 802116e:	440b      	add	r3, r1
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	2b00      	cmp	r3, #0
 8021174:	d105      	bne.n	8021182 <vTaskSwitchContext+0xb2>
 8021176:	f640 32e1 	movw	r2, #3041	; 0xbe1
 802117a:	4923      	ldr	r1, [pc, #140]	; (8021208 <vTaskSwitchContext+0x138>)
 802117c:	4823      	ldr	r0, [pc, #140]	; (802120c <vTaskSwitchContext+0x13c>)
 802117e:	f7f0 ff55 	bl	801202c <assertFail>
 8021182:	68fa      	ldr	r2, [r7, #12]
 8021184:	4613      	mov	r3, r2
 8021186:	009b      	lsls	r3, r3, #2
 8021188:	4413      	add	r3, r2
 802118a:	009b      	lsls	r3, r3, #2
 802118c:	4a1d      	ldr	r2, [pc, #116]	; (8021204 <vTaskSwitchContext+0x134>)
 802118e:	4413      	add	r3, r2
 8021190:	60bb      	str	r3, [r7, #8]
 8021192:	68bb      	ldr	r3, [r7, #8]
 8021194:	685b      	ldr	r3, [r3, #4]
 8021196:	685a      	ldr	r2, [r3, #4]
 8021198:	68bb      	ldr	r3, [r7, #8]
 802119a:	605a      	str	r2, [r3, #4]
 802119c:	68bb      	ldr	r3, [r7, #8]
 802119e:	685a      	ldr	r2, [r3, #4]
 80211a0:	68bb      	ldr	r3, [r7, #8]
 80211a2:	3308      	adds	r3, #8
 80211a4:	429a      	cmp	r2, r3
 80211a6:	d104      	bne.n	80211b2 <vTaskSwitchContext+0xe2>
 80211a8:	68bb      	ldr	r3, [r7, #8]
 80211aa:	685b      	ldr	r3, [r3, #4]
 80211ac:	685a      	ldr	r2, [r3, #4]
 80211ae:	68bb      	ldr	r3, [r7, #8]
 80211b0:	605a      	str	r2, [r3, #4]
 80211b2:	68bb      	ldr	r3, [r7, #8]
 80211b4:	685b      	ldr	r3, [r3, #4]
 80211b6:	68db      	ldr	r3, [r3, #12]
 80211b8:	4a0f      	ldr	r2, [pc, #60]	; (80211f8 <vTaskSwitchContext+0x128>)
 80211ba:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80211bc:	4b0e      	ldr	r3, [pc, #56]	; (80211f8 <vTaskSwitchContext+0x128>)
 80211be:	681b      	ldr	r3, [r3, #0]
 80211c0:	3334      	adds	r3, #52	; 0x34
 80211c2:	4a13      	ldr	r2, [pc, #76]	; (8021210 <vTaskSwitchContext+0x140>)
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80211c8:	4b0b      	ldr	r3, [pc, #44]	; (80211f8 <vTaskSwitchContext+0x128>)
 80211ca:	681b      	ldr	r3, [r3, #0]
 80211cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80211d0:	4a0a      	ldr	r2, [pc, #40]	; (80211fc <vTaskSwitchContext+0x12c>)
 80211d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80211d4:	4b08      	ldr	r3, [pc, #32]	; (80211f8 <vTaskSwitchContext+0x128>)
 80211d6:	681b      	ldr	r3, [r3, #0]
 80211d8:	3360      	adds	r3, #96	; 0x60
 80211da:	4a0e      	ldr	r2, [pc, #56]	; (8021214 <vTaskSwitchContext+0x144>)
 80211dc:	6013      	str	r3, [r2, #0]
}
 80211de:	bf00      	nop
 80211e0:	3710      	adds	r7, #16
 80211e2:	46bd      	mov	sp, r7
 80211e4:	bd80      	pop	{r7, pc}
 80211e6:	bf00      	nop
 80211e8:	2000d6e8 	.word	0x2000d6e8
 80211ec:	2000d6d4 	.word	0x2000d6d4
 80211f0:	2000d6f0 	.word	0x2000d6f0
 80211f4:	2000d6ec 	.word	0x2000d6ec
 80211f8:	2000d4b8 	.word	0x2000d4b8
 80211fc:	2000d6bc 	.word	0x2000d6bc
 8021200:	2000d6c8 	.word	0x2000d6c8
 8021204:	2000d4bc 	.word	0x2000d4bc
 8021208:	0802e610 	.word	0x0802e610
 802120c:	0802e844 	.word	0x0802e844
 8021210:	e0000004 	.word	0xe0000004
 8021214:	20001050 	.word	0x20001050

08021218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8021218:	b580      	push	{r7, lr}
 802121a:	b082      	sub	sp, #8
 802121c:	af00      	add	r7, sp, #0
 802121e:	6078      	str	r0, [r7, #4]
 8021220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	2b00      	cmp	r3, #0
 8021226:	d105      	bne.n	8021234 <vTaskPlaceOnEventList+0x1c>
 8021228:	f640 32fa 	movw	r2, #3066	; 0xbfa
 802122c:	4909      	ldr	r1, [pc, #36]	; (8021254 <vTaskPlaceOnEventList+0x3c>)
 802122e:	480a      	ldr	r0, [pc, #40]	; (8021258 <vTaskPlaceOnEventList+0x40>)
 8021230:	f7f0 fefc 	bl	801202c <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8021234:	4b09      	ldr	r3, [pc, #36]	; (802125c <vTaskPlaceOnEventList+0x44>)
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	3318      	adds	r3, #24
 802123a:	4619      	mov	r1, r3
 802123c:	6878      	ldr	r0, [r7, #4]
 802123e:	f7fe fa7c 	bl	801f73a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8021242:	2101      	movs	r1, #1
 8021244:	6838      	ldr	r0, [r7, #0]
 8021246:	f000 fced 	bl	8021c24 <prvAddCurrentTaskToDelayedList>
}
 802124a:	bf00      	nop
 802124c:	3708      	adds	r7, #8
 802124e:	46bd      	mov	sp, r7
 8021250:	bd80      	pop	{r7, pc}
 8021252:	bf00      	nop
 8021254:	0802e610 	.word	0x0802e610
 8021258:	0802e88c 	.word	0x0802e88c
 802125c:	2000d4b8 	.word	0x2000d4b8

08021260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021260:	b580      	push	{r7, lr}
 8021262:	b084      	sub	sp, #16
 8021264:	af00      	add	r7, sp, #0
 8021266:	60f8      	str	r0, [r7, #12]
 8021268:	60b9      	str	r1, [r7, #8]
 802126a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802126c:	68fb      	ldr	r3, [r7, #12]
 802126e:	2b00      	cmp	r3, #0
 8021270:	d105      	bne.n	802127e <vTaskPlaceOnEventListRestricted+0x1e>
 8021272:	f640 4225 	movw	r2, #3109	; 0xc25
 8021276:	490c      	ldr	r1, [pc, #48]	; (80212a8 <vTaskPlaceOnEventListRestricted+0x48>)
 8021278:	480c      	ldr	r0, [pc, #48]	; (80212ac <vTaskPlaceOnEventListRestricted+0x4c>)
 802127a:	f7f0 fed7 	bl	801202c <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802127e:	4b0c      	ldr	r3, [pc, #48]	; (80212b0 <vTaskPlaceOnEventListRestricted+0x50>)
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	3318      	adds	r3, #24
 8021284:	4619      	mov	r1, r3
 8021286:	68f8      	ldr	r0, [r7, #12]
 8021288:	f7fe fa33 	bl	801f6f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	2b00      	cmp	r3, #0
 8021290:	d002      	beq.n	8021298 <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 8021292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021296:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8021298:	6879      	ldr	r1, [r7, #4]
 802129a:	68b8      	ldr	r0, [r7, #8]
 802129c:	f000 fcc2 	bl	8021c24 <prvAddCurrentTaskToDelayedList>
	}
 80212a0:	bf00      	nop
 80212a2:	3710      	adds	r7, #16
 80212a4:	46bd      	mov	sp, r7
 80212a6:	bd80      	pop	{r7, pc}
 80212a8:	0802e610 	.word	0x0802e610
 80212ac:	0802e88c 	.word	0x0802e88c
 80212b0:	2000d4b8 	.word	0x2000d4b8

080212b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80212b4:	b580      	push	{r7, lr}
 80212b6:	b084      	sub	sp, #16
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80212bc:	687b      	ldr	r3, [r7, #4]
 80212be:	68db      	ldr	r3, [r3, #12]
 80212c0:	68db      	ldr	r3, [r3, #12]
 80212c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80212c4:	68bb      	ldr	r3, [r7, #8]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d105      	bne.n	80212d6 <xTaskRemoveFromEventList+0x22>
 80212ca:	f640 4255 	movw	r2, #3157	; 0xc55
 80212ce:	4922      	ldr	r1, [pc, #136]	; (8021358 <xTaskRemoveFromEventList+0xa4>)
 80212d0:	4822      	ldr	r0, [pc, #136]	; (802135c <xTaskRemoveFromEventList+0xa8>)
 80212d2:	f7f0 feab 	bl	801202c <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80212d6:	68bb      	ldr	r3, [r7, #8]
 80212d8:	3318      	adds	r3, #24
 80212da:	4618      	mov	r0, r3
 80212dc:	f7fe fa66 	bl	801f7ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80212e0:	4b1f      	ldr	r3, [pc, #124]	; (8021360 <xTaskRemoveFromEventList+0xac>)
 80212e2:	681b      	ldr	r3, [r3, #0]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d11c      	bne.n	8021322 <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80212e8:	68bb      	ldr	r3, [r7, #8]
 80212ea:	3304      	adds	r3, #4
 80212ec:	4618      	mov	r0, r3
 80212ee:	f7fe fa5d 	bl	801f7ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80212f2:	68bb      	ldr	r3, [r7, #8]
 80212f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80212f6:	2201      	movs	r2, #1
 80212f8:	409a      	lsls	r2, r3
 80212fa:	4b1a      	ldr	r3, [pc, #104]	; (8021364 <xTaskRemoveFromEventList+0xb0>)
 80212fc:	681b      	ldr	r3, [r3, #0]
 80212fe:	4313      	orrs	r3, r2
 8021300:	4a18      	ldr	r2, [pc, #96]	; (8021364 <xTaskRemoveFromEventList+0xb0>)
 8021302:	6013      	str	r3, [r2, #0]
 8021304:	68bb      	ldr	r3, [r7, #8]
 8021306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021308:	4613      	mov	r3, r2
 802130a:	009b      	lsls	r3, r3, #2
 802130c:	4413      	add	r3, r2
 802130e:	009b      	lsls	r3, r3, #2
 8021310:	4a15      	ldr	r2, [pc, #84]	; (8021368 <xTaskRemoveFromEventList+0xb4>)
 8021312:	441a      	add	r2, r3
 8021314:	68bb      	ldr	r3, [r7, #8]
 8021316:	3304      	adds	r3, #4
 8021318:	4619      	mov	r1, r3
 802131a:	4610      	mov	r0, r2
 802131c:	f7fe f9e9 	bl	801f6f2 <vListInsertEnd>
 8021320:	e005      	b.n	802132e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8021322:	68bb      	ldr	r3, [r7, #8]
 8021324:	3318      	adds	r3, #24
 8021326:	4619      	mov	r1, r3
 8021328:	4810      	ldr	r0, [pc, #64]	; (802136c <xTaskRemoveFromEventList+0xb8>)
 802132a:	f7fe f9e2 	bl	801f6f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802132e:	68bb      	ldr	r3, [r7, #8]
 8021330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021332:	4b0f      	ldr	r3, [pc, #60]	; (8021370 <xTaskRemoveFromEventList+0xbc>)
 8021334:	681b      	ldr	r3, [r3, #0]
 8021336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021338:	429a      	cmp	r2, r3
 802133a:	d905      	bls.n	8021348 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802133c:	2301      	movs	r3, #1
 802133e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8021340:	4b0c      	ldr	r3, [pc, #48]	; (8021374 <xTaskRemoveFromEventList+0xc0>)
 8021342:	2201      	movs	r2, #1
 8021344:	601a      	str	r2, [r3, #0]
 8021346:	e001      	b.n	802134c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8021348:	2300      	movs	r3, #0
 802134a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 802134c:	68fb      	ldr	r3, [r7, #12]
}
 802134e:	4618      	mov	r0, r3
 8021350:	3710      	adds	r7, #16
 8021352:	46bd      	mov	sp, r7
 8021354:	bd80      	pop	{r7, pc}
 8021356:	bf00      	nop
 8021358:	0802e610 	.word	0x0802e610
 802135c:	0802e8b4 	.word	0x0802e8b4
 8021360:	2000d6e8 	.word	0x2000d6e8
 8021364:	2000d6c8 	.word	0x2000d6c8
 8021368:	2000d4bc 	.word	0x2000d4bc
 802136c:	2000d67c 	.word	0x2000d67c
 8021370:	2000d4b8 	.word	0x2000d4b8
 8021374:	2000d6d4 	.word	0x2000d6d4

08021378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8021378:	b480      	push	{r7}
 802137a:	b083      	sub	sp, #12
 802137c:	af00      	add	r7, sp, #0
 802137e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8021380:	4b06      	ldr	r3, [pc, #24]	; (802139c <vTaskInternalSetTimeOutState+0x24>)
 8021382:	681a      	ldr	r2, [r3, #0]
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8021388:	4b05      	ldr	r3, [pc, #20]	; (80213a0 <vTaskInternalSetTimeOutState+0x28>)
 802138a:	681a      	ldr	r2, [r3, #0]
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	605a      	str	r2, [r3, #4]
}
 8021390:	bf00      	nop
 8021392:	370c      	adds	r7, #12
 8021394:	46bd      	mov	sp, r7
 8021396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802139a:	4770      	bx	lr
 802139c:	2000d6d8 	.word	0x2000d6d8
 80213a0:	2000d6c4 	.word	0x2000d6c4

080213a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80213a4:	b580      	push	{r7, lr}
 80213a6:	b086      	sub	sp, #24
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	6078      	str	r0, [r7, #4]
 80213ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d105      	bne.n	80213c0 <xTaskCheckForTimeOut+0x1c>
 80213b4:	f640 42ce 	movw	r2, #3278	; 0xcce
 80213b8:	4924      	ldr	r1, [pc, #144]	; (802144c <xTaskCheckForTimeOut+0xa8>)
 80213ba:	4825      	ldr	r0, [pc, #148]	; (8021450 <xTaskCheckForTimeOut+0xac>)
 80213bc:	f7f0 fe36 	bl	801202c <assertFail>
	configASSERT( pxTicksToWait );
 80213c0:	683b      	ldr	r3, [r7, #0]
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	d105      	bne.n	80213d2 <xTaskCheckForTimeOut+0x2e>
 80213c6:	f640 42cf 	movw	r2, #3279	; 0xccf
 80213ca:	4920      	ldr	r1, [pc, #128]	; (802144c <xTaskCheckForTimeOut+0xa8>)
 80213cc:	4821      	ldr	r0, [pc, #132]	; (8021454 <xTaskCheckForTimeOut+0xb0>)
 80213ce:	f7f0 fe2d 	bl	801202c <assertFail>

	taskENTER_CRITICAL();
 80213d2:	f001 f9b5 	bl	8022740 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80213d6:	4b20      	ldr	r3, [pc, #128]	; (8021458 <xTaskCheckForTimeOut+0xb4>)
 80213d8:	681b      	ldr	r3, [r3, #0]
 80213da:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	685b      	ldr	r3, [r3, #4]
 80213e0:	693a      	ldr	r2, [r7, #16]
 80213e2:	1ad3      	subs	r3, r2, r3
 80213e4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80213e6:	683b      	ldr	r3, [r7, #0]
 80213e8:	681b      	ldr	r3, [r3, #0]
 80213ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80213ee:	d102      	bne.n	80213f6 <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80213f0:	2300      	movs	r3, #0
 80213f2:	617b      	str	r3, [r7, #20]
 80213f4:	e023      	b.n	802143e <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	681a      	ldr	r2, [r3, #0]
 80213fa:	4b18      	ldr	r3, [pc, #96]	; (802145c <xTaskCheckForTimeOut+0xb8>)
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	429a      	cmp	r2, r3
 8021400:	d007      	beq.n	8021412 <xTaskCheckForTimeOut+0x6e>
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	685b      	ldr	r3, [r3, #4]
 8021406:	693a      	ldr	r2, [r7, #16]
 8021408:	429a      	cmp	r2, r3
 802140a:	d302      	bcc.n	8021412 <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802140c:	2301      	movs	r3, #1
 802140e:	617b      	str	r3, [r7, #20]
 8021410:	e015      	b.n	802143e <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8021412:	683b      	ldr	r3, [r7, #0]
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	68fa      	ldr	r2, [r7, #12]
 8021418:	429a      	cmp	r2, r3
 802141a:	d20b      	bcs.n	8021434 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802141c:	683b      	ldr	r3, [r7, #0]
 802141e:	681a      	ldr	r2, [r3, #0]
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	1ad2      	subs	r2, r2, r3
 8021424:	683b      	ldr	r3, [r7, #0]
 8021426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f7ff ffa5 	bl	8021378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802142e:	2300      	movs	r3, #0
 8021430:	617b      	str	r3, [r7, #20]
 8021432:	e004      	b.n	802143e <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 8021434:	683b      	ldr	r3, [r7, #0]
 8021436:	2200      	movs	r2, #0
 8021438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802143a:	2301      	movs	r3, #1
 802143c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 802143e:	f001 f9ad 	bl	802279c <vPortExitCritical>

	return xReturn;
 8021442:	697b      	ldr	r3, [r7, #20]
}
 8021444:	4618      	mov	r0, r3
 8021446:	3718      	adds	r7, #24
 8021448:	46bd      	mov	sp, r7
 802144a:	bd80      	pop	{r7, pc}
 802144c:	0802e610 	.word	0x0802e610
 8021450:	0802e8e4 	.word	0x0802e8e4
 8021454:	0802e8f0 	.word	0x0802e8f0
 8021458:	2000d6c4 	.word	0x2000d6c4
 802145c:	2000d6d8 	.word	0x2000d6d8

08021460 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8021460:	b480      	push	{r7}
 8021462:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8021464:	4b03      	ldr	r3, [pc, #12]	; (8021474 <vTaskMissedYield+0x14>)
 8021466:	2201      	movs	r2, #1
 8021468:	601a      	str	r2, [r3, #0]
}
 802146a:	bf00      	nop
 802146c:	46bd      	mov	sp, r7
 802146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021472:	4770      	bx	lr
 8021474:	2000d6d4 	.word	0x2000d6d4

08021478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8021478:	b580      	push	{r7, lr}
 802147a:	b082      	sub	sp, #8
 802147c:	af00      	add	r7, sp, #0
 802147e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8021480:	f000 f854 	bl	802152c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8021484:	4b07      	ldr	r3, [pc, #28]	; (80214a4 <prvIdleTask+0x2c>)
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	2b01      	cmp	r3, #1
 802148a:	d907      	bls.n	802149c <prvIdleTask+0x24>
			{
				taskYIELD();
 802148c:	4b06      	ldr	r3, [pc, #24]	; (80214a8 <prvIdleTask+0x30>)
 802148e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021492:	601a      	str	r2, [r3, #0]
 8021494:	f3bf 8f4f 	dsb	sy
 8021498:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 802149c:	f7f5 f946 	bl	801672c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80214a0:	e7ee      	b.n	8021480 <prvIdleTask+0x8>
 80214a2:	bf00      	nop
 80214a4:	2000d4bc 	.word	0x2000d4bc
 80214a8:	e000ed04 	.word	0xe000ed04

080214ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80214ac:	b580      	push	{r7, lr}
 80214ae:	b082      	sub	sp, #8
 80214b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80214b2:	2300      	movs	r3, #0
 80214b4:	607b      	str	r3, [r7, #4]
 80214b6:	e00c      	b.n	80214d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80214b8:	687a      	ldr	r2, [r7, #4]
 80214ba:	4613      	mov	r3, r2
 80214bc:	009b      	lsls	r3, r3, #2
 80214be:	4413      	add	r3, r2
 80214c0:	009b      	lsls	r3, r3, #2
 80214c2:	4a12      	ldr	r2, [pc, #72]	; (802150c <prvInitialiseTaskLists+0x60>)
 80214c4:	4413      	add	r3, r2
 80214c6:	4618      	mov	r0, r3
 80214c8:	f7fe f8e6 	bl	801f698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	3301      	adds	r3, #1
 80214d0:	607b      	str	r3, [r7, #4]
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	2b13      	cmp	r3, #19
 80214d6:	d9ef      	bls.n	80214b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80214d8:	480d      	ldr	r0, [pc, #52]	; (8021510 <prvInitialiseTaskLists+0x64>)
 80214da:	f7fe f8dd 	bl	801f698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80214de:	480d      	ldr	r0, [pc, #52]	; (8021514 <prvInitialiseTaskLists+0x68>)
 80214e0:	f7fe f8da 	bl	801f698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80214e4:	480c      	ldr	r0, [pc, #48]	; (8021518 <prvInitialiseTaskLists+0x6c>)
 80214e6:	f7fe f8d7 	bl	801f698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80214ea:	480c      	ldr	r0, [pc, #48]	; (802151c <prvInitialiseTaskLists+0x70>)
 80214ec:	f7fe f8d4 	bl	801f698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80214f0:	480b      	ldr	r0, [pc, #44]	; (8021520 <prvInitialiseTaskLists+0x74>)
 80214f2:	f7fe f8d1 	bl	801f698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80214f6:	4b0b      	ldr	r3, [pc, #44]	; (8021524 <prvInitialiseTaskLists+0x78>)
 80214f8:	4a05      	ldr	r2, [pc, #20]	; (8021510 <prvInitialiseTaskLists+0x64>)
 80214fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80214fc:	4b0a      	ldr	r3, [pc, #40]	; (8021528 <prvInitialiseTaskLists+0x7c>)
 80214fe:	4a05      	ldr	r2, [pc, #20]	; (8021514 <prvInitialiseTaskLists+0x68>)
 8021500:	601a      	str	r2, [r3, #0]
}
 8021502:	bf00      	nop
 8021504:	3708      	adds	r7, #8
 8021506:	46bd      	mov	sp, r7
 8021508:	bd80      	pop	{r7, pc}
 802150a:	bf00      	nop
 802150c:	2000d4bc 	.word	0x2000d4bc
 8021510:	2000d64c 	.word	0x2000d64c
 8021514:	2000d660 	.word	0x2000d660
 8021518:	2000d67c 	.word	0x2000d67c
 802151c:	2000d690 	.word	0x2000d690
 8021520:	2000d6a8 	.word	0x2000d6a8
 8021524:	2000d674 	.word	0x2000d674
 8021528:	2000d678 	.word	0x2000d678

0802152c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802152c:	b580      	push	{r7, lr}
 802152e:	b082      	sub	sp, #8
 8021530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021532:	e019      	b.n	8021568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8021534:	f001 f904 	bl	8022740 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021538:	4b10      	ldr	r3, [pc, #64]	; (802157c <prvCheckTasksWaitingTermination+0x50>)
 802153a:	68db      	ldr	r3, [r3, #12]
 802153c:	68db      	ldr	r3, [r3, #12]
 802153e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	3304      	adds	r3, #4
 8021544:	4618      	mov	r0, r3
 8021546:	f7fe f931 	bl	801f7ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 802154a:	4b0d      	ldr	r3, [pc, #52]	; (8021580 <prvCheckTasksWaitingTermination+0x54>)
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	3b01      	subs	r3, #1
 8021550:	4a0b      	ldr	r2, [pc, #44]	; (8021580 <prvCheckTasksWaitingTermination+0x54>)
 8021552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8021554:	4b0b      	ldr	r3, [pc, #44]	; (8021584 <prvCheckTasksWaitingTermination+0x58>)
 8021556:	681b      	ldr	r3, [r3, #0]
 8021558:	3b01      	subs	r3, #1
 802155a:	4a0a      	ldr	r2, [pc, #40]	; (8021584 <prvCheckTasksWaitingTermination+0x58>)
 802155c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802155e:	f001 f91d 	bl	802279c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8021562:	6878      	ldr	r0, [r7, #4]
 8021564:	f000 f8e4 	bl	8021730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021568:	4b06      	ldr	r3, [pc, #24]	; (8021584 <prvCheckTasksWaitingTermination+0x58>)
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	2b00      	cmp	r3, #0
 802156e:	d1e1      	bne.n	8021534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8021570:	bf00      	nop
 8021572:	bf00      	nop
 8021574:	3708      	adds	r7, #8
 8021576:	46bd      	mov	sp, r7
 8021578:	bd80      	pop	{r7, pc}
 802157a:	bf00      	nop
 802157c:	2000d690 	.word	0x2000d690
 8021580:	2000d6c0 	.word	0x2000d6c0
 8021584:	2000d6a4 	.word	0x2000d6a4

08021588 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8021588:	b580      	push	{r7, lr}
 802158a:	b086      	sub	sp, #24
 802158c:	af00      	add	r7, sp, #0
 802158e:	60f8      	str	r0, [r7, #12]
 8021590:	60b9      	str	r1, [r7, #8]
 8021592:	607a      	str	r2, [r7, #4]
 8021594:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8021596:	68fb      	ldr	r3, [r7, #12]
 8021598:	2b00      	cmp	r3, #0
 802159a:	d102      	bne.n	80215a2 <vTaskGetInfo+0x1a>
 802159c:	4b2c      	ldr	r3, [pc, #176]	; (8021650 <vTaskGetInfo+0xc8>)
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	e000      	b.n	80215a4 <vTaskGetInfo+0x1c>
 80215a2:	68fb      	ldr	r3, [r7, #12]
 80215a4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80215a6:	68bb      	ldr	r3, [r7, #8]
 80215a8:	697a      	ldr	r2, [r7, #20]
 80215aa:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80215ac:	697b      	ldr	r3, [r7, #20]
 80215ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80215b2:	68bb      	ldr	r3, [r7, #8]
 80215b4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80215b6:	697b      	ldr	r3, [r7, #20]
 80215b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80215ba:	68bb      	ldr	r3, [r7, #8]
 80215bc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80215be:	697b      	ldr	r3, [r7, #20]
 80215c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80215c2:	68bb      	ldr	r3, [r7, #8]
 80215c4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80215c6:	697b      	ldr	r3, [r7, #20]
 80215c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80215ca:	68bb      	ldr	r3, [r7, #8]
 80215cc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80215ce:	697b      	ldr	r3, [r7, #20]
 80215d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80215d2:	68bb      	ldr	r3, [r7, #8]
 80215d4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80215d6:	697b      	ldr	r3, [r7, #20]
 80215d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80215da:	68bb      	ldr	r3, [r7, #8]
 80215dc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80215de:	78fb      	ldrb	r3, [r7, #3]
 80215e0:	2b05      	cmp	r3, #5
 80215e2:	d01a      	beq.n	802161a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 80215e4:	4b1a      	ldr	r3, [pc, #104]	; (8021650 <vTaskGetInfo+0xc8>)
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	697a      	ldr	r2, [r7, #20]
 80215ea:	429a      	cmp	r2, r3
 80215ec:	d103      	bne.n	80215f6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80215ee:	68bb      	ldr	r3, [r7, #8]
 80215f0:	2200      	movs	r2, #0
 80215f2:	731a      	strb	r2, [r3, #12]
 80215f4:	e018      	b.n	8021628 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80215f6:	68bb      	ldr	r3, [r7, #8]
 80215f8:	78fa      	ldrb	r2, [r7, #3]
 80215fa:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80215fc:	78fb      	ldrb	r3, [r7, #3]
 80215fe:	2b03      	cmp	r3, #3
 8021600:	d112      	bne.n	8021628 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8021602:	f7ff fb41 	bl	8020c88 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8021606:	697b      	ldr	r3, [r7, #20]
 8021608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802160a:	2b00      	cmp	r3, #0
 802160c:	d002      	beq.n	8021614 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 802160e:	68bb      	ldr	r3, [r7, #8]
 8021610:	2202      	movs	r2, #2
 8021612:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8021614:	f7ff fb46 	bl	8020ca4 <xTaskResumeAll>
 8021618:	e006      	b.n	8021628 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 802161a:	6978      	ldr	r0, [r7, #20]
 802161c:	f7ff fa54 	bl	8020ac8 <eTaskGetState>
 8021620:	4603      	mov	r3, r0
 8021622:	461a      	mov	r2, r3
 8021624:	68bb      	ldr	r3, [r7, #8]
 8021626:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	2b00      	cmp	r3, #0
 802162c:	d009      	beq.n	8021642 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 802162e:	697b      	ldr	r3, [r7, #20]
 8021630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021632:	4618      	mov	r0, r3
 8021634:	f000 f860 	bl	80216f8 <prvTaskCheckFreeStackSpace>
 8021638:	4603      	mov	r3, r0
 802163a:	461a      	mov	r2, r3
 802163c:	68bb      	ldr	r3, [r7, #8]
 802163e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8021640:	e002      	b.n	8021648 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8021642:	68bb      	ldr	r3, [r7, #8]
 8021644:	2200      	movs	r2, #0
 8021646:	841a      	strh	r2, [r3, #32]
	}
 8021648:	bf00      	nop
 802164a:	3718      	adds	r7, #24
 802164c:	46bd      	mov	sp, r7
 802164e:	bd80      	pop	{r7, pc}
 8021650:	2000d4b8 	.word	0x2000d4b8

08021654 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8021654:	b580      	push	{r7, lr}
 8021656:	b08a      	sub	sp, #40	; 0x28
 8021658:	af00      	add	r7, sp, #0
 802165a:	60f8      	str	r0, [r7, #12]
 802165c:	60b9      	str	r1, [r7, #8]
 802165e:	4613      	mov	r3, r2
 8021660:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8021662:	2300      	movs	r3, #0
 8021664:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8021666:	68bb      	ldr	r3, [r7, #8]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	2b00      	cmp	r3, #0
 802166c:	d03f      	beq.n	80216ee <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802166e:	68bb      	ldr	r3, [r7, #8]
 8021670:	623b      	str	r3, [r7, #32]
 8021672:	6a3b      	ldr	r3, [r7, #32]
 8021674:	685b      	ldr	r3, [r3, #4]
 8021676:	685a      	ldr	r2, [r3, #4]
 8021678:	6a3b      	ldr	r3, [r7, #32]
 802167a:	605a      	str	r2, [r3, #4]
 802167c:	6a3b      	ldr	r3, [r7, #32]
 802167e:	685a      	ldr	r2, [r3, #4]
 8021680:	6a3b      	ldr	r3, [r7, #32]
 8021682:	3308      	adds	r3, #8
 8021684:	429a      	cmp	r2, r3
 8021686:	d104      	bne.n	8021692 <prvListTasksWithinSingleList+0x3e>
 8021688:	6a3b      	ldr	r3, [r7, #32]
 802168a:	685b      	ldr	r3, [r3, #4]
 802168c:	685a      	ldr	r2, [r3, #4]
 802168e:	6a3b      	ldr	r3, [r7, #32]
 8021690:	605a      	str	r2, [r3, #4]
 8021692:	6a3b      	ldr	r3, [r7, #32]
 8021694:	685b      	ldr	r3, [r3, #4]
 8021696:	68db      	ldr	r3, [r3, #12]
 8021698:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802169a:	68bb      	ldr	r3, [r7, #8]
 802169c:	61bb      	str	r3, [r7, #24]
 802169e:	69bb      	ldr	r3, [r7, #24]
 80216a0:	685b      	ldr	r3, [r3, #4]
 80216a2:	685a      	ldr	r2, [r3, #4]
 80216a4:	69bb      	ldr	r3, [r7, #24]
 80216a6:	605a      	str	r2, [r3, #4]
 80216a8:	69bb      	ldr	r3, [r7, #24]
 80216aa:	685a      	ldr	r2, [r3, #4]
 80216ac:	69bb      	ldr	r3, [r7, #24]
 80216ae:	3308      	adds	r3, #8
 80216b0:	429a      	cmp	r2, r3
 80216b2:	d104      	bne.n	80216be <prvListTasksWithinSingleList+0x6a>
 80216b4:	69bb      	ldr	r3, [r7, #24]
 80216b6:	685b      	ldr	r3, [r3, #4]
 80216b8:	685a      	ldr	r2, [r3, #4]
 80216ba:	69bb      	ldr	r3, [r7, #24]
 80216bc:	605a      	str	r2, [r3, #4]
 80216be:	69bb      	ldr	r3, [r7, #24]
 80216c0:	685b      	ldr	r3, [r3, #4]
 80216c2:	68db      	ldr	r3, [r3, #12]
 80216c4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80216c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80216c8:	4613      	mov	r3, r2
 80216ca:	00db      	lsls	r3, r3, #3
 80216cc:	4413      	add	r3, r2
 80216ce:	009b      	lsls	r3, r3, #2
 80216d0:	461a      	mov	r2, r3
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	1899      	adds	r1, r3, r2
 80216d6:	79fb      	ldrb	r3, [r7, #7]
 80216d8:	2201      	movs	r2, #1
 80216da:	6978      	ldr	r0, [r7, #20]
 80216dc:	f7ff ff54 	bl	8021588 <vTaskGetInfo>
				uxTask++;
 80216e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216e2:	3301      	adds	r3, #1
 80216e4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80216e6:	697a      	ldr	r2, [r7, #20]
 80216e8:	69fb      	ldr	r3, [r7, #28]
 80216ea:	429a      	cmp	r2, r3
 80216ec:	d1d5      	bne.n	802169a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80216ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80216f0:	4618      	mov	r0, r3
 80216f2:	3728      	adds	r7, #40	; 0x28
 80216f4:	46bd      	mov	sp, r7
 80216f6:	bd80      	pop	{r7, pc}

080216f8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80216f8:	b480      	push	{r7}
 80216fa:	b085      	sub	sp, #20
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8021700:	2300      	movs	r3, #0
 8021702:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8021704:	e005      	b.n	8021712 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	3301      	adds	r3, #1
 802170a:	607b      	str	r3, [r7, #4]
			ulCount++;
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	3301      	adds	r3, #1
 8021710:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	781b      	ldrb	r3, [r3, #0]
 8021716:	2ba5      	cmp	r3, #165	; 0xa5
 8021718:	d0f5      	beq.n	8021706 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802171a:	68fb      	ldr	r3, [r7, #12]
 802171c:	089b      	lsrs	r3, r3, #2
 802171e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8021720:	68fb      	ldr	r3, [r7, #12]
 8021722:	b29b      	uxth	r3, r3
	}
 8021724:	4618      	mov	r0, r3
 8021726:	3714      	adds	r7, #20
 8021728:	46bd      	mov	sp, r7
 802172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802172e:	4770      	bx	lr

08021730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8021730:	b580      	push	{r7, lr}
 8021732:	b082      	sub	sp, #8
 8021734:	af00      	add	r7, sp, #0
 8021736:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	3360      	adds	r3, #96	; 0x60
 802173c:	4618      	mov	r0, r3
 802173e:	f003 fa59 	bl	8024bf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8021748:	2b00      	cmp	r3, #0
 802174a:	d108      	bne.n	802175e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021750:	4618      	mov	r0, r3
 8021752:	f001 f9c7 	bl	8022ae4 <vPortFree>
				vPortFree( pxTCB );
 8021756:	6878      	ldr	r0, [r7, #4]
 8021758:	f001 f9c4 	bl	8022ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802175c:	e013      	b.n	8021786 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8021764:	2b01      	cmp	r3, #1
 8021766:	d103      	bne.n	8021770 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8021768:	6878      	ldr	r0, [r7, #4]
 802176a:	f001 f9bb 	bl	8022ae4 <vPortFree>
	}
 802176e:	e00a      	b.n	8021786 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8021776:	2b02      	cmp	r3, #2
 8021778:	d005      	beq.n	8021786 <prvDeleteTCB+0x56>
 802177a:	f640 725d 	movw	r2, #3933	; 0xf5d
 802177e:	4904      	ldr	r1, [pc, #16]	; (8021790 <prvDeleteTCB+0x60>)
 8021780:	4804      	ldr	r0, [pc, #16]	; (8021794 <prvDeleteTCB+0x64>)
 8021782:	f7f0 fc53 	bl	801202c <assertFail>
	}
 8021786:	bf00      	nop
 8021788:	3708      	adds	r7, #8
 802178a:	46bd      	mov	sp, r7
 802178c:	bd80      	pop	{r7, pc}
 802178e:	bf00      	nop
 8021790:	0802e610 	.word	0x0802e610
 8021794:	0802e900 	.word	0x0802e900

08021798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8021798:	b480      	push	{r7}
 802179a:	b083      	sub	sp, #12
 802179c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802179e:	4b0c      	ldr	r3, [pc, #48]	; (80217d0 <prvResetNextTaskUnblockTime+0x38>)
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	d104      	bne.n	80217b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80217a8:	4b0a      	ldr	r3, [pc, #40]	; (80217d4 <prvResetNextTaskUnblockTime+0x3c>)
 80217aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80217ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80217b0:	e008      	b.n	80217c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80217b2:	4b07      	ldr	r3, [pc, #28]	; (80217d0 <prvResetNextTaskUnblockTime+0x38>)
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	68db      	ldr	r3, [r3, #12]
 80217b8:	68db      	ldr	r3, [r3, #12]
 80217ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80217bc:	687b      	ldr	r3, [r7, #4]
 80217be:	685b      	ldr	r3, [r3, #4]
 80217c0:	4a04      	ldr	r2, [pc, #16]	; (80217d4 <prvResetNextTaskUnblockTime+0x3c>)
 80217c2:	6013      	str	r3, [r2, #0]
}
 80217c4:	bf00      	nop
 80217c6:	370c      	adds	r7, #12
 80217c8:	46bd      	mov	sp, r7
 80217ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217ce:	4770      	bx	lr
 80217d0:	2000d674 	.word	0x2000d674
 80217d4:	2000d6e0 	.word	0x2000d6e0

080217d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80217d8:	b480      	push	{r7}
 80217da:	b083      	sub	sp, #12
 80217dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80217de:	4b0b      	ldr	r3, [pc, #44]	; (802180c <xTaskGetSchedulerState+0x34>)
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	d102      	bne.n	80217ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80217e6:	2301      	movs	r3, #1
 80217e8:	607b      	str	r3, [r7, #4]
 80217ea:	e008      	b.n	80217fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80217ec:	4b08      	ldr	r3, [pc, #32]	; (8021810 <xTaskGetSchedulerState+0x38>)
 80217ee:	681b      	ldr	r3, [r3, #0]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d102      	bne.n	80217fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80217f4:	2302      	movs	r3, #2
 80217f6:	607b      	str	r3, [r7, #4]
 80217f8:	e001      	b.n	80217fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80217fa:	2300      	movs	r3, #0
 80217fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80217fe:	687b      	ldr	r3, [r7, #4]
	}
 8021800:	4618      	mov	r0, r3
 8021802:	370c      	adds	r7, #12
 8021804:	46bd      	mov	sp, r7
 8021806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802180a:	4770      	bx	lr
 802180c:	2000d6cc 	.word	0x2000d6cc
 8021810:	2000d6e8 	.word	0x2000d6e8

08021814 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8021814:	b580      	push	{r7, lr}
 8021816:	b084      	sub	sp, #16
 8021818:	af00      	add	r7, sp, #0
 802181a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8021820:	2300      	movs	r3, #0
 8021822:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	2b00      	cmp	r3, #0
 8021828:	d05e      	beq.n	80218e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 802182a:	68bb      	ldr	r3, [r7, #8]
 802182c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802182e:	4b31      	ldr	r3, [pc, #196]	; (80218f4 <xTaskPriorityInherit+0xe0>)
 8021830:	681b      	ldr	r3, [r3, #0]
 8021832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021834:	429a      	cmp	r2, r3
 8021836:	d24e      	bcs.n	80218d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021838:	68bb      	ldr	r3, [r7, #8]
 802183a:	699b      	ldr	r3, [r3, #24]
 802183c:	2b00      	cmp	r3, #0
 802183e:	db06      	blt.n	802184e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021840:	4b2c      	ldr	r3, [pc, #176]	; (80218f4 <xTaskPriorityInherit+0xe0>)
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021846:	f1c3 0214 	rsb	r2, r3, #20
 802184a:	68bb      	ldr	r3, [r7, #8]
 802184c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 802184e:	68bb      	ldr	r3, [r7, #8]
 8021850:	6959      	ldr	r1, [r3, #20]
 8021852:	68bb      	ldr	r3, [r7, #8]
 8021854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021856:	4613      	mov	r3, r2
 8021858:	009b      	lsls	r3, r3, #2
 802185a:	4413      	add	r3, r2
 802185c:	009b      	lsls	r3, r3, #2
 802185e:	4a26      	ldr	r2, [pc, #152]	; (80218f8 <xTaskPriorityInherit+0xe4>)
 8021860:	4413      	add	r3, r2
 8021862:	4299      	cmp	r1, r3
 8021864:	d12f      	bne.n	80218c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021866:	68bb      	ldr	r3, [r7, #8]
 8021868:	3304      	adds	r3, #4
 802186a:	4618      	mov	r0, r3
 802186c:	f7fd ff9e 	bl	801f7ac <uxListRemove>
 8021870:	4603      	mov	r3, r0
 8021872:	2b00      	cmp	r3, #0
 8021874:	d10a      	bne.n	802188c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8021876:	68bb      	ldr	r3, [r7, #8]
 8021878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802187a:	2201      	movs	r2, #1
 802187c:	fa02 f303 	lsl.w	r3, r2, r3
 8021880:	43da      	mvns	r2, r3
 8021882:	4b1e      	ldr	r3, [pc, #120]	; (80218fc <xTaskPriorityInherit+0xe8>)
 8021884:	681b      	ldr	r3, [r3, #0]
 8021886:	4013      	ands	r3, r2
 8021888:	4a1c      	ldr	r2, [pc, #112]	; (80218fc <xTaskPriorityInherit+0xe8>)
 802188a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802188c:	4b19      	ldr	r3, [pc, #100]	; (80218f4 <xTaskPriorityInherit+0xe0>)
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021892:	68bb      	ldr	r3, [r7, #8]
 8021894:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8021896:	68bb      	ldr	r3, [r7, #8]
 8021898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802189a:	2201      	movs	r2, #1
 802189c:	409a      	lsls	r2, r3
 802189e:	4b17      	ldr	r3, [pc, #92]	; (80218fc <xTaskPriorityInherit+0xe8>)
 80218a0:	681b      	ldr	r3, [r3, #0]
 80218a2:	4313      	orrs	r3, r2
 80218a4:	4a15      	ldr	r2, [pc, #84]	; (80218fc <xTaskPriorityInherit+0xe8>)
 80218a6:	6013      	str	r3, [r2, #0]
 80218a8:	68bb      	ldr	r3, [r7, #8]
 80218aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80218ac:	4613      	mov	r3, r2
 80218ae:	009b      	lsls	r3, r3, #2
 80218b0:	4413      	add	r3, r2
 80218b2:	009b      	lsls	r3, r3, #2
 80218b4:	4a10      	ldr	r2, [pc, #64]	; (80218f8 <xTaskPriorityInherit+0xe4>)
 80218b6:	441a      	add	r2, r3
 80218b8:	68bb      	ldr	r3, [r7, #8]
 80218ba:	3304      	adds	r3, #4
 80218bc:	4619      	mov	r1, r3
 80218be:	4610      	mov	r0, r2
 80218c0:	f7fd ff17 	bl	801f6f2 <vListInsertEnd>
 80218c4:	e004      	b.n	80218d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80218c6:	4b0b      	ldr	r3, [pc, #44]	; (80218f4 <xTaskPriorityInherit+0xe0>)
 80218c8:	681b      	ldr	r3, [r3, #0]
 80218ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80218cc:	68bb      	ldr	r3, [r7, #8]
 80218ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80218d0:	2301      	movs	r3, #1
 80218d2:	60fb      	str	r3, [r7, #12]
 80218d4:	e008      	b.n	80218e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80218d6:	68bb      	ldr	r3, [r7, #8]
 80218d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80218da:	4b06      	ldr	r3, [pc, #24]	; (80218f4 <xTaskPriorityInherit+0xe0>)
 80218dc:	681b      	ldr	r3, [r3, #0]
 80218de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80218e0:	429a      	cmp	r2, r3
 80218e2:	d201      	bcs.n	80218e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80218e4:	2301      	movs	r3, #1
 80218e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80218e8:	68fb      	ldr	r3, [r7, #12]
	}
 80218ea:	4618      	mov	r0, r3
 80218ec:	3710      	adds	r7, #16
 80218ee:	46bd      	mov	sp, r7
 80218f0:	bd80      	pop	{r7, pc}
 80218f2:	bf00      	nop
 80218f4:	2000d4b8 	.word	0x2000d4b8
 80218f8:	2000d4bc 	.word	0x2000d4bc
 80218fc:	2000d6c8 	.word	0x2000d6c8

08021900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8021900:	b580      	push	{r7, lr}
 8021902:	b084      	sub	sp, #16
 8021904:	af00      	add	r7, sp, #0
 8021906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8021908:	687b      	ldr	r3, [r7, #4]
 802190a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 802190c:	2300      	movs	r3, #0
 802190e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	2b00      	cmp	r3, #0
 8021914:	d064      	beq.n	80219e0 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8021916:	4b35      	ldr	r3, [pc, #212]	; (80219ec <xTaskPriorityDisinherit+0xec>)
 8021918:	681b      	ldr	r3, [r3, #0]
 802191a:	68ba      	ldr	r2, [r7, #8]
 802191c:	429a      	cmp	r2, r3
 802191e:	d005      	beq.n	802192c <xTaskPriorityDisinherit+0x2c>
 8021920:	f241 0213 	movw	r2, #4115	; 0x1013
 8021924:	4932      	ldr	r1, [pc, #200]	; (80219f0 <xTaskPriorityDisinherit+0xf0>)
 8021926:	4833      	ldr	r0, [pc, #204]	; (80219f4 <xTaskPriorityDisinherit+0xf4>)
 8021928:	f7f0 fb80 	bl	801202c <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 802192c:	68bb      	ldr	r3, [r7, #8]
 802192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021930:	2b00      	cmp	r3, #0
 8021932:	d105      	bne.n	8021940 <xTaskPriorityDisinherit+0x40>
 8021934:	f241 0214 	movw	r2, #4116	; 0x1014
 8021938:	492d      	ldr	r1, [pc, #180]	; (80219f0 <xTaskPriorityDisinherit+0xf0>)
 802193a:	482f      	ldr	r0, [pc, #188]	; (80219f8 <xTaskPriorityDisinherit+0xf8>)
 802193c:	f7f0 fb76 	bl	801202c <assertFail>
			( pxTCB->uxMutexesHeld )--;
 8021940:	68bb      	ldr	r3, [r7, #8]
 8021942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021944:	1e5a      	subs	r2, r3, #1
 8021946:	68bb      	ldr	r3, [r7, #8]
 8021948:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802194a:	68bb      	ldr	r3, [r7, #8]
 802194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802194e:	68bb      	ldr	r3, [r7, #8]
 8021950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021952:	429a      	cmp	r2, r3
 8021954:	d044      	beq.n	80219e0 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8021956:	68bb      	ldr	r3, [r7, #8]
 8021958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802195a:	2b00      	cmp	r3, #0
 802195c:	d140      	bne.n	80219e0 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802195e:	68bb      	ldr	r3, [r7, #8]
 8021960:	3304      	adds	r3, #4
 8021962:	4618      	mov	r0, r3
 8021964:	f7fd ff22 	bl	801f7ac <uxListRemove>
 8021968:	4603      	mov	r3, r0
 802196a:	2b00      	cmp	r3, #0
 802196c:	d115      	bne.n	802199a <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 802196e:	68bb      	ldr	r3, [r7, #8]
 8021970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021972:	4922      	ldr	r1, [pc, #136]	; (80219fc <xTaskPriorityDisinherit+0xfc>)
 8021974:	4613      	mov	r3, r2
 8021976:	009b      	lsls	r3, r3, #2
 8021978:	4413      	add	r3, r2
 802197a:	009b      	lsls	r3, r3, #2
 802197c:	440b      	add	r3, r1
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	2b00      	cmp	r3, #0
 8021982:	d10a      	bne.n	802199a <xTaskPriorityDisinherit+0x9a>
 8021984:	68bb      	ldr	r3, [r7, #8]
 8021986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021988:	2201      	movs	r2, #1
 802198a:	fa02 f303 	lsl.w	r3, r2, r3
 802198e:	43da      	mvns	r2, r3
 8021990:	4b1b      	ldr	r3, [pc, #108]	; (8021a00 <xTaskPriorityDisinherit+0x100>)
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	4013      	ands	r3, r2
 8021996:	4a1a      	ldr	r2, [pc, #104]	; (8021a00 <xTaskPriorityDisinherit+0x100>)
 8021998:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802199a:	68bb      	ldr	r3, [r7, #8]
 802199c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802199e:	68bb      	ldr	r3, [r7, #8]
 80219a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80219a2:	68bb      	ldr	r3, [r7, #8]
 80219a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219a6:	f1c3 0214 	rsb	r2, r3, #20
 80219aa:	68bb      	ldr	r3, [r7, #8]
 80219ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80219ae:	68bb      	ldr	r3, [r7, #8]
 80219b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219b2:	2201      	movs	r2, #1
 80219b4:	409a      	lsls	r2, r3
 80219b6:	4b12      	ldr	r3, [pc, #72]	; (8021a00 <xTaskPriorityDisinherit+0x100>)
 80219b8:	681b      	ldr	r3, [r3, #0]
 80219ba:	4313      	orrs	r3, r2
 80219bc:	4a10      	ldr	r2, [pc, #64]	; (8021a00 <xTaskPriorityDisinherit+0x100>)
 80219be:	6013      	str	r3, [r2, #0]
 80219c0:	68bb      	ldr	r3, [r7, #8]
 80219c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80219c4:	4613      	mov	r3, r2
 80219c6:	009b      	lsls	r3, r3, #2
 80219c8:	4413      	add	r3, r2
 80219ca:	009b      	lsls	r3, r3, #2
 80219cc:	4a0b      	ldr	r2, [pc, #44]	; (80219fc <xTaskPriorityDisinherit+0xfc>)
 80219ce:	441a      	add	r2, r3
 80219d0:	68bb      	ldr	r3, [r7, #8]
 80219d2:	3304      	adds	r3, #4
 80219d4:	4619      	mov	r1, r3
 80219d6:	4610      	mov	r0, r2
 80219d8:	f7fd fe8b 	bl	801f6f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80219dc:	2301      	movs	r3, #1
 80219de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80219e0:	68fb      	ldr	r3, [r7, #12]
	}
 80219e2:	4618      	mov	r0, r3
 80219e4:	3710      	adds	r7, #16
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd80      	pop	{r7, pc}
 80219ea:	bf00      	nop
 80219ec:	2000d4b8 	.word	0x2000d4b8
 80219f0:	0802e610 	.word	0x0802e610
 80219f4:	0802e948 	.word	0x0802e948
 80219f8:	0802e960 	.word	0x0802e960
 80219fc:	2000d4bc 	.word	0x2000d4bc
 8021a00:	2000d6c8 	.word	0x2000d6c8

08021a04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8021a04:	b580      	push	{r7, lr}
 8021a06:	b086      	sub	sp, #24
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	6078      	str	r0, [r7, #4]
 8021a0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8021a12:	2301      	movs	r3, #1
 8021a14:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d06d      	beq.n	8021af8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8021a1c:	693b      	ldr	r3, [r7, #16]
 8021a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	d105      	bne.n	8021a30 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8021a24:	f241 0262 	movw	r2, #4194	; 0x1062
 8021a28:	4935      	ldr	r1, [pc, #212]	; (8021b00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8021a2a:	4836      	ldr	r0, [pc, #216]	; (8021b04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021a2c:	f7f0 fafe 	bl	801202c <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8021a30:	693b      	ldr	r3, [r7, #16]
 8021a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021a34:	683a      	ldr	r2, [r7, #0]
 8021a36:	429a      	cmp	r2, r3
 8021a38:	d902      	bls.n	8021a40 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8021a3a:	683b      	ldr	r3, [r7, #0]
 8021a3c:	617b      	str	r3, [r7, #20]
 8021a3e:	e002      	b.n	8021a46 <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8021a40:	693b      	ldr	r3, [r7, #16]
 8021a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021a44:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8021a46:	693b      	ldr	r3, [r7, #16]
 8021a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a4a:	697a      	ldr	r2, [r7, #20]
 8021a4c:	429a      	cmp	r2, r3
 8021a4e:	d053      	beq.n	8021af8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8021a50:	693b      	ldr	r3, [r7, #16]
 8021a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021a54:	68fa      	ldr	r2, [r7, #12]
 8021a56:	429a      	cmp	r2, r3
 8021a58:	d14e      	bne.n	8021af8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8021a5a:	4b2b      	ldr	r3, [pc, #172]	; (8021b08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	693a      	ldr	r2, [r7, #16]
 8021a60:	429a      	cmp	r2, r3
 8021a62:	d105      	bne.n	8021a70 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8021a64:	f241 027d 	movw	r2, #4221	; 0x107d
 8021a68:	4925      	ldr	r1, [pc, #148]	; (8021b00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8021a6a:	4828      	ldr	r0, [pc, #160]	; (8021b0c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8021a6c:	f7f0 fade 	bl	801202c <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8021a70:	693b      	ldr	r3, [r7, #16]
 8021a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a74:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8021a76:	693b      	ldr	r3, [r7, #16]
 8021a78:	697a      	ldr	r2, [r7, #20]
 8021a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021a7c:	693b      	ldr	r3, [r7, #16]
 8021a7e:	699b      	ldr	r3, [r3, #24]
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	db04      	blt.n	8021a8e <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021a84:	697b      	ldr	r3, [r7, #20]
 8021a86:	f1c3 0214 	rsb	r2, r3, #20
 8021a8a:	693b      	ldr	r3, [r7, #16]
 8021a8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8021a8e:	693b      	ldr	r3, [r7, #16]
 8021a90:	6959      	ldr	r1, [r3, #20]
 8021a92:	68ba      	ldr	r2, [r7, #8]
 8021a94:	4613      	mov	r3, r2
 8021a96:	009b      	lsls	r3, r3, #2
 8021a98:	4413      	add	r3, r2
 8021a9a:	009b      	lsls	r3, r3, #2
 8021a9c:	4a1c      	ldr	r2, [pc, #112]	; (8021b10 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8021a9e:	4413      	add	r3, r2
 8021aa0:	4299      	cmp	r1, r3
 8021aa2:	d129      	bne.n	8021af8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021aa4:	693b      	ldr	r3, [r7, #16]
 8021aa6:	3304      	adds	r3, #4
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	f7fd fe7f 	bl	801f7ac <uxListRemove>
 8021aae:	4603      	mov	r3, r0
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	d10a      	bne.n	8021aca <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8021ab4:	693b      	ldr	r3, [r7, #16]
 8021ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ab8:	2201      	movs	r2, #1
 8021aba:	fa02 f303 	lsl.w	r3, r2, r3
 8021abe:	43da      	mvns	r2, r3
 8021ac0:	4b14      	ldr	r3, [pc, #80]	; (8021b14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	4013      	ands	r3, r2
 8021ac6:	4a13      	ldr	r2, [pc, #76]	; (8021b14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8021ac8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8021aca:	693b      	ldr	r3, [r7, #16]
 8021acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ace:	2201      	movs	r2, #1
 8021ad0:	409a      	lsls	r2, r3
 8021ad2:	4b10      	ldr	r3, [pc, #64]	; (8021b14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	4313      	orrs	r3, r2
 8021ad8:	4a0e      	ldr	r2, [pc, #56]	; (8021b14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8021ada:	6013      	str	r3, [r2, #0]
 8021adc:	693b      	ldr	r3, [r7, #16]
 8021ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ae0:	4613      	mov	r3, r2
 8021ae2:	009b      	lsls	r3, r3, #2
 8021ae4:	4413      	add	r3, r2
 8021ae6:	009b      	lsls	r3, r3, #2
 8021ae8:	4a09      	ldr	r2, [pc, #36]	; (8021b10 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8021aea:	441a      	add	r2, r3
 8021aec:	693b      	ldr	r3, [r7, #16]
 8021aee:	3304      	adds	r3, #4
 8021af0:	4619      	mov	r1, r3
 8021af2:	4610      	mov	r0, r2
 8021af4:	f7fd fdfd 	bl	801f6f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021af8:	bf00      	nop
 8021afa:	3718      	adds	r7, #24
 8021afc:	46bd      	mov	sp, r7
 8021afe:	bd80      	pop	{r7, pc}
 8021b00:	0802e610 	.word	0x0802e610
 8021b04:	0802e960 	.word	0x0802e960
 8021b08:	2000d4b8 	.word	0x2000d4b8
 8021b0c:	0802e978 	.word	0x0802e978
 8021b10:	2000d4bc 	.word	0x2000d4bc
 8021b14:	2000d6c8 	.word	0x2000d6c8

08021b18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8021b18:	b480      	push	{r7}
 8021b1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8021b1c:	4b07      	ldr	r3, [pc, #28]	; (8021b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8021b1e:	681b      	ldr	r3, [r3, #0]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d004      	beq.n	8021b2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8021b24:	4b05      	ldr	r3, [pc, #20]	; (8021b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8021b26:	681b      	ldr	r3, [r3, #0]
 8021b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8021b2a:	3201      	adds	r2, #1
 8021b2c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8021b2e:	4b03      	ldr	r3, [pc, #12]	; (8021b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8021b30:	681b      	ldr	r3, [r3, #0]
	}
 8021b32:	4618      	mov	r0, r3
 8021b34:	46bd      	mov	sp, r7
 8021b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3a:	4770      	bx	lr
 8021b3c:	2000d4b8 	.word	0x2000d4b8

08021b40 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b084      	sub	sp, #16
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
 8021b48:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8021b4a:	f000 fdf9 	bl	8022740 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8021b4e:	4b20      	ldr	r3, [pc, #128]	; (8021bd0 <ulTaskNotifyTake+0x90>)
 8021b50:	681b      	ldr	r3, [r3, #0]
 8021b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d113      	bne.n	8021b82 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8021b5a:	4b1d      	ldr	r3, [pc, #116]	; (8021bd0 <ulTaskNotifyTake+0x90>)
 8021b5c:	681b      	ldr	r3, [r3, #0]
 8021b5e:	2201      	movs	r2, #1
 8021b60:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8021b64:	683b      	ldr	r3, [r7, #0]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d00b      	beq.n	8021b82 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8021b6a:	2101      	movs	r1, #1
 8021b6c:	6838      	ldr	r0, [r7, #0]
 8021b6e:	f000 f859 	bl	8021c24 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8021b72:	4b18      	ldr	r3, [pc, #96]	; (8021bd4 <ulTaskNotifyTake+0x94>)
 8021b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021b78:	601a      	str	r2, [r3, #0]
 8021b7a:	f3bf 8f4f 	dsb	sy
 8021b7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8021b82:	f000 fe0b 	bl	802279c <vPortExitCritical>

		taskENTER_CRITICAL();
 8021b86:	f000 fddb 	bl	8022740 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8021b8a:	4b11      	ldr	r3, [pc, #68]	; (8021bd0 <ulTaskNotifyTake+0x90>)
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8021b92:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d00e      	beq.n	8021bb8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	d005      	beq.n	8021bac <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8021ba0:	4b0b      	ldr	r3, [pc, #44]	; (8021bd0 <ulTaskNotifyTake+0x90>)
 8021ba2:	681b      	ldr	r3, [r3, #0]
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8021baa:	e005      	b.n	8021bb8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8021bac:	4b08      	ldr	r3, [pc, #32]	; (8021bd0 <ulTaskNotifyTake+0x90>)
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	68fa      	ldr	r2, [r7, #12]
 8021bb2:	3a01      	subs	r2, #1
 8021bb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021bb8:	4b05      	ldr	r3, [pc, #20]	; (8021bd0 <ulTaskNotifyTake+0x90>)
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8021bc2:	f000 fdeb 	bl	802279c <vPortExitCritical>

		return ulReturn;
 8021bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8021bc8:	4618      	mov	r0, r3
 8021bca:	3710      	adds	r7, #16
 8021bcc:	46bd      	mov	sp, r7
 8021bce:	bd80      	pop	{r7, pc}
 8021bd0:	2000d4b8 	.word	0x2000d4b8
 8021bd4:	e000ed04 	.word	0xe000ed04

08021bd8 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8021bd8:	b580      	push	{r7, lr}
 8021bda:	b084      	sub	sp, #16
 8021bdc:	af00      	add	r7, sp, #0
 8021bde:	6078      	str	r0, [r7, #4]
 8021be0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d102      	bne.n	8021bee <ulTaskNotifyValueClear+0x16>
 8021be8:	4b0d      	ldr	r3, [pc, #52]	; (8021c20 <ulTaskNotifyValueClear+0x48>)
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	e000      	b.n	8021bf0 <ulTaskNotifyValueClear+0x18>
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 8021bf2:	f000 fda5 	bl	8022740 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8021bf6:	4b0a      	ldr	r3, [pc, #40]	; (8021c20 <ulTaskNotifyValueClear+0x48>)
 8021bf8:	681b      	ldr	r3, [r3, #0]
 8021bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8021bfe:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8021c00:	68fb      	ldr	r3, [r7, #12]
 8021c02:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8021c06:	683b      	ldr	r3, [r7, #0]
 8021c08:	43db      	mvns	r3, r3
 8021c0a:	401a      	ands	r2, r3
 8021c0c:	68fb      	ldr	r3, [r7, #12]
 8021c0e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8021c12:	f000 fdc3 	bl	802279c <vPortExitCritical>

		return ulReturn;
 8021c16:	68bb      	ldr	r3, [r7, #8]
	}
 8021c18:	4618      	mov	r0, r3
 8021c1a:	3710      	adds	r7, #16
 8021c1c:	46bd      	mov	sp, r7
 8021c1e:	bd80      	pop	{r7, pc}
 8021c20:	2000d4b8 	.word	0x2000d4b8

08021c24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8021c24:	b580      	push	{r7, lr}
 8021c26:	b084      	sub	sp, #16
 8021c28:	af00      	add	r7, sp, #0
 8021c2a:	6078      	str	r0, [r7, #4]
 8021c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8021c2e:	4b29      	ldr	r3, [pc, #164]	; (8021cd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8021c30:	681b      	ldr	r3, [r3, #0]
 8021c32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021c34:	4b28      	ldr	r3, [pc, #160]	; (8021cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	3304      	adds	r3, #4
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	f7fd fdb6 	bl	801f7ac <uxListRemove>
 8021c40:	4603      	mov	r3, r0
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d10b      	bne.n	8021c5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8021c46:	4b24      	ldr	r3, [pc, #144]	; (8021cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c4c:	2201      	movs	r2, #1
 8021c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8021c52:	43da      	mvns	r2, r3
 8021c54:	4b21      	ldr	r3, [pc, #132]	; (8021cdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8021c56:	681b      	ldr	r3, [r3, #0]
 8021c58:	4013      	ands	r3, r2
 8021c5a:	4a20      	ldr	r2, [pc, #128]	; (8021cdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8021c5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8021c5e:	687b      	ldr	r3, [r7, #4]
 8021c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021c64:	d10a      	bne.n	8021c7c <prvAddCurrentTaskToDelayedList+0x58>
 8021c66:	683b      	ldr	r3, [r7, #0]
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	d007      	beq.n	8021c7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8021c6c:	4b1a      	ldr	r3, [pc, #104]	; (8021cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8021c6e:	681b      	ldr	r3, [r3, #0]
 8021c70:	3304      	adds	r3, #4
 8021c72:	4619      	mov	r1, r3
 8021c74:	481a      	ldr	r0, [pc, #104]	; (8021ce0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8021c76:	f7fd fd3c 	bl	801f6f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8021c7a:	e026      	b.n	8021cca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8021c7c:	68fa      	ldr	r2, [r7, #12]
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	4413      	add	r3, r2
 8021c82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8021c84:	4b14      	ldr	r3, [pc, #80]	; (8021cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8021c86:	681b      	ldr	r3, [r3, #0]
 8021c88:	68ba      	ldr	r2, [r7, #8]
 8021c8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8021c8c:	68ba      	ldr	r2, [r7, #8]
 8021c8e:	68fb      	ldr	r3, [r7, #12]
 8021c90:	429a      	cmp	r2, r3
 8021c92:	d209      	bcs.n	8021ca8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8021c94:	4b13      	ldr	r3, [pc, #76]	; (8021ce4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8021c96:	681a      	ldr	r2, [r3, #0]
 8021c98:	4b0f      	ldr	r3, [pc, #60]	; (8021cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	3304      	adds	r3, #4
 8021c9e:	4619      	mov	r1, r3
 8021ca0:	4610      	mov	r0, r2
 8021ca2:	f7fd fd4a 	bl	801f73a <vListInsert>
}
 8021ca6:	e010      	b.n	8021cca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8021ca8:	4b0f      	ldr	r3, [pc, #60]	; (8021ce8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8021caa:	681a      	ldr	r2, [r3, #0]
 8021cac:	4b0a      	ldr	r3, [pc, #40]	; (8021cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	3304      	adds	r3, #4
 8021cb2:	4619      	mov	r1, r3
 8021cb4:	4610      	mov	r0, r2
 8021cb6:	f7fd fd40 	bl	801f73a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8021cba:	4b0c      	ldr	r3, [pc, #48]	; (8021cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8021cbc:	681b      	ldr	r3, [r3, #0]
 8021cbe:	68ba      	ldr	r2, [r7, #8]
 8021cc0:	429a      	cmp	r2, r3
 8021cc2:	d202      	bcs.n	8021cca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8021cc4:	4a09      	ldr	r2, [pc, #36]	; (8021cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8021cc6:	68bb      	ldr	r3, [r7, #8]
 8021cc8:	6013      	str	r3, [r2, #0]
}
 8021cca:	bf00      	nop
 8021ccc:	3710      	adds	r7, #16
 8021cce:	46bd      	mov	sp, r7
 8021cd0:	bd80      	pop	{r7, pc}
 8021cd2:	bf00      	nop
 8021cd4:	2000d6c4 	.word	0x2000d6c4
 8021cd8:	2000d4b8 	.word	0x2000d4b8
 8021cdc:	2000d6c8 	.word	0x2000d6c8
 8021ce0:	2000d6a8 	.word	0x2000d6a8
 8021ce4:	2000d678 	.word	0x2000d678
 8021ce8:	2000d674 	.word	0x2000d674
 8021cec:	2000d6e0 	.word	0x2000d6e0

08021cf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8021cf0:	b580      	push	{r7, lr}
 8021cf2:	b088      	sub	sp, #32
 8021cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8021cfa:	f000 fb95 	bl	8022428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8021cfe:	4b19      	ldr	r3, [pc, #100]	; (8021d64 <xTimerCreateTimerTask+0x74>)
 8021d00:	681b      	ldr	r3, [r3, #0]
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d020      	beq.n	8021d48 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8021d06:	2300      	movs	r3, #0
 8021d08:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8021d0a:	2300      	movs	r3, #0
 8021d0c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8021d0e:	463a      	mov	r2, r7
 8021d10:	1d39      	adds	r1, r7, #4
 8021d12:	f107 0308 	add.w	r3, r7, #8
 8021d16:	4618      	mov	r0, r3
 8021d18:	f7f3 fc3e 	bl	8015598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8021d1c:	6839      	ldr	r1, [r7, #0]
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	68ba      	ldr	r2, [r7, #8]
 8021d22:	9202      	str	r2, [sp, #8]
 8021d24:	9301      	str	r3, [sp, #4]
 8021d26:	2301      	movs	r3, #1
 8021d28:	9300      	str	r3, [sp, #0]
 8021d2a:	2300      	movs	r3, #0
 8021d2c:	460a      	mov	r2, r1
 8021d2e:	490e      	ldr	r1, [pc, #56]	; (8021d68 <xTimerCreateTimerTask+0x78>)
 8021d30:	480e      	ldr	r0, [pc, #56]	; (8021d6c <xTimerCreateTimerTask+0x7c>)
 8021d32:	f7fe fcdd 	bl	80206f0 <xTaskCreateStatic>
 8021d36:	4603      	mov	r3, r0
 8021d38:	4a0d      	ldr	r2, [pc, #52]	; (8021d70 <xTimerCreateTimerTask+0x80>)
 8021d3a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8021d3c:	4b0c      	ldr	r3, [pc, #48]	; (8021d70 <xTimerCreateTimerTask+0x80>)
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d001      	beq.n	8021d48 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8021d44:	2301      	movs	r3, #1
 8021d46:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8021d48:	68fb      	ldr	r3, [r7, #12]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d105      	bne.n	8021d5a <xTimerCreateTimerTask+0x6a>
 8021d4e:	f240 1213 	movw	r2, #275	; 0x113
 8021d52:	4908      	ldr	r1, [pc, #32]	; (8021d74 <xTimerCreateTimerTask+0x84>)
 8021d54:	4808      	ldr	r0, [pc, #32]	; (8021d78 <xTimerCreateTimerTask+0x88>)
 8021d56:	f7f0 f969 	bl	801202c <assertFail>
	return xReturn;
 8021d5a:	68fb      	ldr	r3, [r7, #12]
}
 8021d5c:	4618      	mov	r0, r3
 8021d5e:	3710      	adds	r7, #16
 8021d60:	46bd      	mov	sp, r7
 8021d62:	bd80      	pop	{r7, pc}
 8021d64:	2000d724 	.word	0x2000d724
 8021d68:	0802ea28 	.word	0x0802ea28
 8021d6c:	08021fd9 	.word	0x08021fd9
 8021d70:	2000d728 	.word	0x2000d728
 8021d74:	0802ea30 	.word	0x0802ea30
 8021d78:	0802ea64 	.word	0x0802ea64

08021d7c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8021d7c:	b580      	push	{r7, lr}
 8021d7e:	b088      	sub	sp, #32
 8021d80:	af02      	add	r7, sp, #8
 8021d82:	60f8      	str	r0, [r7, #12]
 8021d84:	60b9      	str	r1, [r7, #8]
 8021d86:	607a      	str	r2, [r7, #4]
 8021d88:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8021d8a:	202c      	movs	r0, #44	; 0x2c
 8021d8c:	f000 fde8 	bl	8022960 <pvPortMalloc>
 8021d90:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8021d92:	697b      	ldr	r3, [r7, #20]
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	d00d      	beq.n	8021db4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8021d98:	697b      	ldr	r3, [r7, #20]
 8021d9a:	2200      	movs	r2, #0
 8021d9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8021da0:	697b      	ldr	r3, [r7, #20]
 8021da2:	9301      	str	r3, [sp, #4]
 8021da4:	6a3b      	ldr	r3, [r7, #32]
 8021da6:	9300      	str	r3, [sp, #0]
 8021da8:	683b      	ldr	r3, [r7, #0]
 8021daa:	687a      	ldr	r2, [r7, #4]
 8021dac:	68b9      	ldr	r1, [r7, #8]
 8021dae:	68f8      	ldr	r0, [r7, #12]
 8021db0:	f000 f840 	bl	8021e34 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8021db4:	697b      	ldr	r3, [r7, #20]
	}
 8021db6:	4618      	mov	r0, r3
 8021db8:	3718      	adds	r7, #24
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	bd80      	pop	{r7, pc}
	...

08021dc0 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8021dc0:	b580      	push	{r7, lr}
 8021dc2:	b088      	sub	sp, #32
 8021dc4:	af02      	add	r7, sp, #8
 8021dc6:	60f8      	str	r0, [r7, #12]
 8021dc8:	60b9      	str	r1, [r7, #8]
 8021dca:	607a      	str	r2, [r7, #4]
 8021dcc:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8021dce:	232c      	movs	r3, #44	; 0x2c
 8021dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8021dd2:	693b      	ldr	r3, [r7, #16]
 8021dd4:	2b2c      	cmp	r3, #44	; 0x2c
 8021dd6:	d005      	beq.n	8021de4 <xTimerCreateStatic+0x24>
 8021dd8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8021ddc:	4912      	ldr	r1, [pc, #72]	; (8021e28 <xTimerCreateStatic+0x68>)
 8021dde:	4813      	ldr	r0, [pc, #76]	; (8021e2c <xTimerCreateStatic+0x6c>)
 8021de0:	f7f0 f924 	bl	801202c <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8021de4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8021de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d105      	bne.n	8021df8 <xTimerCreateStatic+0x38>
 8021dec:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8021df0:	490d      	ldr	r1, [pc, #52]	; (8021e28 <xTimerCreateStatic+0x68>)
 8021df2:	480f      	ldr	r0, [pc, #60]	; (8021e30 <xTimerCreateStatic+0x70>)
 8021df4:	f7f0 f91a 	bl	801202c <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8021df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dfa:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8021dfc:	697b      	ldr	r3, [r7, #20]
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d00d      	beq.n	8021e1e <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8021e02:	697b      	ldr	r3, [r7, #20]
 8021e04:	2202      	movs	r2, #2
 8021e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8021e0a:	697b      	ldr	r3, [r7, #20]
 8021e0c:	9301      	str	r3, [sp, #4]
 8021e0e:	6a3b      	ldr	r3, [r7, #32]
 8021e10:	9300      	str	r3, [sp, #0]
 8021e12:	683b      	ldr	r3, [r7, #0]
 8021e14:	687a      	ldr	r2, [r7, #4]
 8021e16:	68b9      	ldr	r1, [r7, #8]
 8021e18:	68f8      	ldr	r0, [r7, #12]
 8021e1a:	f000 f80b 	bl	8021e34 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8021e1e:	697b      	ldr	r3, [r7, #20]
	}
 8021e20:	4618      	mov	r0, r3
 8021e22:	3718      	adds	r7, #24
 8021e24:	46bd      	mov	sp, r7
 8021e26:	bd80      	pop	{r7, pc}
 8021e28:	0802ea30 	.word	0x0802ea30
 8021e2c:	0802ea6c 	.word	0x0802ea6c
 8021e30:	0802ea88 	.word	0x0802ea88

08021e34 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8021e34:	b580      	push	{r7, lr}
 8021e36:	b084      	sub	sp, #16
 8021e38:	af00      	add	r7, sp, #0
 8021e3a:	60f8      	str	r0, [r7, #12]
 8021e3c:	60b9      	str	r1, [r7, #8]
 8021e3e:	607a      	str	r2, [r7, #4]
 8021e40:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8021e42:	68bb      	ldr	r3, [r7, #8]
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d105      	bne.n	8021e54 <prvInitialiseNewTimer+0x20>
 8021e48:	f240 1265 	movw	r2, #357	; 0x165
 8021e4c:	4914      	ldr	r1, [pc, #80]	; (8021ea0 <prvInitialiseNewTimer+0x6c>)
 8021e4e:	4815      	ldr	r0, [pc, #84]	; (8021ea4 <prvInitialiseNewTimer+0x70>)
 8021e50:	f7f0 f8ec 	bl	801202c <assertFail>

	if( pxNewTimer != NULL )
 8021e54:	69fb      	ldr	r3, [r7, #28]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d01e      	beq.n	8021e98 <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8021e5a:	f000 fae5 	bl	8022428 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8021e5e:	69fb      	ldr	r3, [r7, #28]
 8021e60:	68fa      	ldr	r2, [r7, #12]
 8021e62:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8021e64:	69fb      	ldr	r3, [r7, #28]
 8021e66:	68ba      	ldr	r2, [r7, #8]
 8021e68:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8021e6a:	69fb      	ldr	r3, [r7, #28]
 8021e6c:	683a      	ldr	r2, [r7, #0]
 8021e6e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8021e70:	69fb      	ldr	r3, [r7, #28]
 8021e72:	69ba      	ldr	r2, [r7, #24]
 8021e74:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8021e76:	69fb      	ldr	r3, [r7, #28]
 8021e78:	3304      	adds	r3, #4
 8021e7a:	4618      	mov	r0, r3
 8021e7c:	f7fd fc2c 	bl	801f6d8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d008      	beq.n	8021e98 <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8021e86:	69fb      	ldr	r3, [r7, #28]
 8021e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021e8c:	f043 0304 	orr.w	r3, r3, #4
 8021e90:	b2da      	uxtb	r2, r3
 8021e92:	69fb      	ldr	r3, [r7, #28]
 8021e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8021e98:	bf00      	nop
 8021e9a:	3710      	adds	r7, #16
 8021e9c:	46bd      	mov	sp, r7
 8021e9e:	bd80      	pop	{r7, pc}
 8021ea0:	0802ea30 	.word	0x0802ea30
 8021ea4:	0802ea98 	.word	0x0802ea98

08021ea8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	b08a      	sub	sp, #40	; 0x28
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	60f8      	str	r0, [r7, #12]
 8021eb0:	60b9      	str	r1, [r7, #8]
 8021eb2:	607a      	str	r2, [r7, #4]
 8021eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8021eb6:	2300      	movs	r3, #0
 8021eb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8021eba:	68fb      	ldr	r3, [r7, #12]
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d105      	bne.n	8021ecc <xTimerGenericCommand+0x24>
 8021ec0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8021ec4:	491b      	ldr	r1, [pc, #108]	; (8021f34 <xTimerGenericCommand+0x8c>)
 8021ec6:	481c      	ldr	r0, [pc, #112]	; (8021f38 <xTimerGenericCommand+0x90>)
 8021ec8:	f7f0 f8b0 	bl	801202c <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8021ecc:	4b1b      	ldr	r3, [pc, #108]	; (8021f3c <xTimerGenericCommand+0x94>)
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d02a      	beq.n	8021f2a <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8021ed4:	68bb      	ldr	r3, [r7, #8]
 8021ed6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8021edc:	68fb      	ldr	r3, [r7, #12]
 8021ede:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8021ee0:	68bb      	ldr	r3, [r7, #8]
 8021ee2:	2b05      	cmp	r3, #5
 8021ee4:	dc18      	bgt.n	8021f18 <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8021ee6:	f7ff fc77 	bl	80217d8 <xTaskGetSchedulerState>
 8021eea:	4603      	mov	r3, r0
 8021eec:	2b02      	cmp	r3, #2
 8021eee:	d109      	bne.n	8021f04 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8021ef0:	4b12      	ldr	r3, [pc, #72]	; (8021f3c <xTimerGenericCommand+0x94>)
 8021ef2:	6818      	ldr	r0, [r3, #0]
 8021ef4:	f107 0114 	add.w	r1, r7, #20
 8021ef8:	2300      	movs	r3, #0
 8021efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021efc:	f7fd fdfe 	bl	801fafc <xQueueGenericSend>
 8021f00:	6278      	str	r0, [r7, #36]	; 0x24
 8021f02:	e012      	b.n	8021f2a <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8021f04:	4b0d      	ldr	r3, [pc, #52]	; (8021f3c <xTimerGenericCommand+0x94>)
 8021f06:	6818      	ldr	r0, [r3, #0]
 8021f08:	f107 0114 	add.w	r1, r7, #20
 8021f0c:	2300      	movs	r3, #0
 8021f0e:	2200      	movs	r2, #0
 8021f10:	f7fd fdf4 	bl	801fafc <xQueueGenericSend>
 8021f14:	6278      	str	r0, [r7, #36]	; 0x24
 8021f16:	e008      	b.n	8021f2a <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8021f18:	4b08      	ldr	r3, [pc, #32]	; (8021f3c <xTimerGenericCommand+0x94>)
 8021f1a:	6818      	ldr	r0, [r3, #0]
 8021f1c:	f107 0114 	add.w	r1, r7, #20
 8021f20:	2300      	movs	r3, #0
 8021f22:	683a      	ldr	r2, [r7, #0]
 8021f24:	f7fd fef8 	bl	801fd18 <xQueueGenericSendFromISR>
 8021f28:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8021f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021f2c:	4618      	mov	r0, r3
 8021f2e:	3728      	adds	r7, #40	; 0x28
 8021f30:	46bd      	mov	sp, r7
 8021f32:	bd80      	pop	{r7, pc}
 8021f34:	0802ea30 	.word	0x0802ea30
 8021f38:	0802eab4 	.word	0x0802eab4
 8021f3c:	2000d724 	.word	0x2000d724

08021f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8021f40:	b580      	push	{r7, lr}
 8021f42:	b086      	sub	sp, #24
 8021f44:	af02      	add	r7, sp, #8
 8021f46:	6078      	str	r0, [r7, #4]
 8021f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021f4a:	4b20      	ldr	r3, [pc, #128]	; (8021fcc <prvProcessExpiredTimer+0x8c>)
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	68db      	ldr	r3, [r3, #12]
 8021f50:	68db      	ldr	r3, [r3, #12]
 8021f52:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021f54:	68fb      	ldr	r3, [r7, #12]
 8021f56:	3304      	adds	r3, #4
 8021f58:	4618      	mov	r0, r3
 8021f5a:	f7fd fc27 	bl	801f7ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021f5e:	68fb      	ldr	r3, [r7, #12]
 8021f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021f64:	f003 0304 	and.w	r3, r3, #4
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	d01e      	beq.n	8021faa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	699a      	ldr	r2, [r3, #24]
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	18d1      	adds	r1, r2, r3
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	683a      	ldr	r2, [r7, #0]
 8021f78:	68f8      	ldr	r0, [r7, #12]
 8021f7a:	f000 f8d1 	bl	8022120 <prvInsertTimerInActiveList>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	d01b      	beq.n	8021fbc <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8021f84:	2300      	movs	r3, #0
 8021f86:	9300      	str	r3, [sp, #0]
 8021f88:	2300      	movs	r3, #0
 8021f8a:	687a      	ldr	r2, [r7, #4]
 8021f8c:	2100      	movs	r1, #0
 8021f8e:	68f8      	ldr	r0, [r7, #12]
 8021f90:	f7ff ff8a 	bl	8021ea8 <xTimerGenericCommand>
 8021f94:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8021f96:	68bb      	ldr	r3, [r7, #8]
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	d10f      	bne.n	8021fbc <prvProcessExpiredTimer+0x7c>
 8021f9c:	f240 2211 	movw	r2, #529	; 0x211
 8021fa0:	490b      	ldr	r1, [pc, #44]	; (8021fd0 <prvProcessExpiredTimer+0x90>)
 8021fa2:	480c      	ldr	r0, [pc, #48]	; (8021fd4 <prvProcessExpiredTimer+0x94>)
 8021fa4:	f7f0 f842 	bl	801202c <assertFail>
 8021fa8:	e008      	b.n	8021fbc <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021faa:	68fb      	ldr	r3, [r7, #12]
 8021fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021fb0:	f023 0301 	bic.w	r3, r3, #1
 8021fb4:	b2da      	uxtb	r2, r3
 8021fb6:	68fb      	ldr	r3, [r7, #12]
 8021fb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021fbc:	68fb      	ldr	r3, [r7, #12]
 8021fbe:	6a1b      	ldr	r3, [r3, #32]
 8021fc0:	68f8      	ldr	r0, [r7, #12]
 8021fc2:	4798      	blx	r3
}
 8021fc4:	bf00      	nop
 8021fc6:	3710      	adds	r7, #16
 8021fc8:	46bd      	mov	sp, r7
 8021fca:	bd80      	pop	{r7, pc}
 8021fcc:	2000d71c 	.word	0x2000d71c
 8021fd0:	0802ea30 	.word	0x0802ea30
 8021fd4:	0802eadc 	.word	0x0802eadc

08021fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8021fd8:	b580      	push	{r7, lr}
 8021fda:	b084      	sub	sp, #16
 8021fdc:	af00      	add	r7, sp, #0
 8021fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8021fe0:	f107 0308 	add.w	r3, r7, #8
 8021fe4:	4618      	mov	r0, r3
 8021fe6:	f000 f857 	bl	8022098 <prvGetNextExpireTime>
 8021fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8021fec:	68bb      	ldr	r3, [r7, #8]
 8021fee:	4619      	mov	r1, r3
 8021ff0:	68f8      	ldr	r0, [r7, #12]
 8021ff2:	f000 f803 	bl	8021ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8021ff6:	f000 f8d5 	bl	80221a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8021ffa:	e7f1      	b.n	8021fe0 <prvTimerTask+0x8>

08021ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b084      	sub	sp, #16
 8022000:	af00      	add	r7, sp, #0
 8022002:	6078      	str	r0, [r7, #4]
 8022004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022006:	f7fe fe3f 	bl	8020c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802200a:	f107 0308 	add.w	r3, r7, #8
 802200e:	4618      	mov	r0, r3
 8022010:	f000 f866 	bl	80220e0 <prvSampleTimeNow>
 8022014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022016:	68bb      	ldr	r3, [r7, #8]
 8022018:	2b00      	cmp	r3, #0
 802201a:	d130      	bne.n	802207e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802201c:	683b      	ldr	r3, [r7, #0]
 802201e:	2b00      	cmp	r3, #0
 8022020:	d10a      	bne.n	8022038 <prvProcessTimerOrBlockTask+0x3c>
 8022022:	687a      	ldr	r2, [r7, #4]
 8022024:	68fb      	ldr	r3, [r7, #12]
 8022026:	429a      	cmp	r2, r3
 8022028:	d806      	bhi.n	8022038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802202a:	f7fe fe3b 	bl	8020ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802202e:	68f9      	ldr	r1, [r7, #12]
 8022030:	6878      	ldr	r0, [r7, #4]
 8022032:	f7ff ff85 	bl	8021f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022036:	e024      	b.n	8022082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022038:	683b      	ldr	r3, [r7, #0]
 802203a:	2b00      	cmp	r3, #0
 802203c:	d008      	beq.n	8022050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802203e:	4b13      	ldr	r3, [pc, #76]	; (802208c <prvProcessTimerOrBlockTask+0x90>)
 8022040:	681b      	ldr	r3, [r3, #0]
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d101      	bne.n	802204c <prvProcessTimerOrBlockTask+0x50>
 8022048:	2301      	movs	r3, #1
 802204a:	e000      	b.n	802204e <prvProcessTimerOrBlockTask+0x52>
 802204c:	2300      	movs	r3, #0
 802204e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022050:	4b0f      	ldr	r3, [pc, #60]	; (8022090 <prvProcessTimerOrBlockTask+0x94>)
 8022052:	6818      	ldr	r0, [r3, #0]
 8022054:	687a      	ldr	r2, [r7, #4]
 8022056:	68fb      	ldr	r3, [r7, #12]
 8022058:	1ad3      	subs	r3, r2, r3
 802205a:	683a      	ldr	r2, [r7, #0]
 802205c:	4619      	mov	r1, r3
 802205e:	f7fe fb13 	bl	8020688 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022062:	f7fe fe1f 	bl	8020ca4 <xTaskResumeAll>
 8022066:	4603      	mov	r3, r0
 8022068:	2b00      	cmp	r3, #0
 802206a:	d10a      	bne.n	8022082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802206c:	4b09      	ldr	r3, [pc, #36]	; (8022094 <prvProcessTimerOrBlockTask+0x98>)
 802206e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022072:	601a      	str	r2, [r3, #0]
 8022074:	f3bf 8f4f 	dsb	sy
 8022078:	f3bf 8f6f 	isb	sy
}
 802207c:	e001      	b.n	8022082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802207e:	f7fe fe11 	bl	8020ca4 <xTaskResumeAll>
}
 8022082:	bf00      	nop
 8022084:	3710      	adds	r7, #16
 8022086:	46bd      	mov	sp, r7
 8022088:	bd80      	pop	{r7, pc}
 802208a:	bf00      	nop
 802208c:	2000d720 	.word	0x2000d720
 8022090:	2000d724 	.word	0x2000d724
 8022094:	e000ed04 	.word	0xe000ed04

08022098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022098:	b480      	push	{r7}
 802209a:	b085      	sub	sp, #20
 802209c:	af00      	add	r7, sp, #0
 802209e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80220a0:	4b0e      	ldr	r3, [pc, #56]	; (80220dc <prvGetNextExpireTime+0x44>)
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	681b      	ldr	r3, [r3, #0]
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d101      	bne.n	80220ae <prvGetNextExpireTime+0x16>
 80220aa:	2201      	movs	r2, #1
 80220ac:	e000      	b.n	80220b0 <prvGetNextExpireTime+0x18>
 80220ae:	2200      	movs	r2, #0
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d105      	bne.n	80220c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80220bc:	4b07      	ldr	r3, [pc, #28]	; (80220dc <prvGetNextExpireTime+0x44>)
 80220be:	681b      	ldr	r3, [r3, #0]
 80220c0:	68db      	ldr	r3, [r3, #12]
 80220c2:	681b      	ldr	r3, [r3, #0]
 80220c4:	60fb      	str	r3, [r7, #12]
 80220c6:	e001      	b.n	80220cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80220c8:	2300      	movs	r3, #0
 80220ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80220cc:	68fb      	ldr	r3, [r7, #12]
}
 80220ce:	4618      	mov	r0, r3
 80220d0:	3714      	adds	r7, #20
 80220d2:	46bd      	mov	sp, r7
 80220d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d8:	4770      	bx	lr
 80220da:	bf00      	nop
 80220dc:	2000d71c 	.word	0x2000d71c

080220e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80220e0:	b580      	push	{r7, lr}
 80220e2:	b084      	sub	sp, #16
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80220e8:	f7fe fe78 	bl	8020ddc <xTaskGetTickCount>
 80220ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80220ee:	4b0b      	ldr	r3, [pc, #44]	; (802211c <prvSampleTimeNow+0x3c>)
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	68fa      	ldr	r2, [r7, #12]
 80220f4:	429a      	cmp	r2, r3
 80220f6:	d205      	bcs.n	8022104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80220f8:	f000 f932 	bl	8022360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	2201      	movs	r2, #1
 8022100:	601a      	str	r2, [r3, #0]
 8022102:	e002      	b.n	802210a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022104:	687b      	ldr	r3, [r7, #4]
 8022106:	2200      	movs	r2, #0
 8022108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802210a:	4a04      	ldr	r2, [pc, #16]	; (802211c <prvSampleTimeNow+0x3c>)
 802210c:	68fb      	ldr	r3, [r7, #12]
 802210e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022110:	68fb      	ldr	r3, [r7, #12]
}
 8022112:	4618      	mov	r0, r3
 8022114:	3710      	adds	r7, #16
 8022116:	46bd      	mov	sp, r7
 8022118:	bd80      	pop	{r7, pc}
 802211a:	bf00      	nop
 802211c:	2000d72c 	.word	0x2000d72c

08022120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022120:	b580      	push	{r7, lr}
 8022122:	b086      	sub	sp, #24
 8022124:	af00      	add	r7, sp, #0
 8022126:	60f8      	str	r0, [r7, #12]
 8022128:	60b9      	str	r1, [r7, #8]
 802212a:	607a      	str	r2, [r7, #4]
 802212c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802212e:	2300      	movs	r3, #0
 8022130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022132:	68fb      	ldr	r3, [r7, #12]
 8022134:	68ba      	ldr	r2, [r7, #8]
 8022136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	68fa      	ldr	r2, [r7, #12]
 802213c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802213e:	68ba      	ldr	r2, [r7, #8]
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	429a      	cmp	r2, r3
 8022144:	d812      	bhi.n	802216c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022146:	687a      	ldr	r2, [r7, #4]
 8022148:	683b      	ldr	r3, [r7, #0]
 802214a:	1ad2      	subs	r2, r2, r3
 802214c:	68fb      	ldr	r3, [r7, #12]
 802214e:	699b      	ldr	r3, [r3, #24]
 8022150:	429a      	cmp	r2, r3
 8022152:	d302      	bcc.n	802215a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022154:	2301      	movs	r3, #1
 8022156:	617b      	str	r3, [r7, #20]
 8022158:	e01b      	b.n	8022192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802215a:	4b10      	ldr	r3, [pc, #64]	; (802219c <prvInsertTimerInActiveList+0x7c>)
 802215c:	681a      	ldr	r2, [r3, #0]
 802215e:	68fb      	ldr	r3, [r7, #12]
 8022160:	3304      	adds	r3, #4
 8022162:	4619      	mov	r1, r3
 8022164:	4610      	mov	r0, r2
 8022166:	f7fd fae8 	bl	801f73a <vListInsert>
 802216a:	e012      	b.n	8022192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802216c:	687a      	ldr	r2, [r7, #4]
 802216e:	683b      	ldr	r3, [r7, #0]
 8022170:	429a      	cmp	r2, r3
 8022172:	d206      	bcs.n	8022182 <prvInsertTimerInActiveList+0x62>
 8022174:	68ba      	ldr	r2, [r7, #8]
 8022176:	683b      	ldr	r3, [r7, #0]
 8022178:	429a      	cmp	r2, r3
 802217a:	d302      	bcc.n	8022182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802217c:	2301      	movs	r3, #1
 802217e:	617b      	str	r3, [r7, #20]
 8022180:	e007      	b.n	8022192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022182:	4b07      	ldr	r3, [pc, #28]	; (80221a0 <prvInsertTimerInActiveList+0x80>)
 8022184:	681a      	ldr	r2, [r3, #0]
 8022186:	68fb      	ldr	r3, [r7, #12]
 8022188:	3304      	adds	r3, #4
 802218a:	4619      	mov	r1, r3
 802218c:	4610      	mov	r0, r2
 802218e:	f7fd fad4 	bl	801f73a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8022192:	697b      	ldr	r3, [r7, #20]
}
 8022194:	4618      	mov	r0, r3
 8022196:	3718      	adds	r7, #24
 8022198:	46bd      	mov	sp, r7
 802219a:	bd80      	pop	{r7, pc}
 802219c:	2000d720 	.word	0x2000d720
 80221a0:	2000d71c 	.word	0x2000d71c

080221a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80221a4:	b580      	push	{r7, lr}
 80221a6:	b08c      	sub	sp, #48	; 0x30
 80221a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80221aa:	e0bd      	b.n	8022328 <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80221ac:	68bb      	ldr	r3, [r7, #8]
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	da14      	bge.n	80221dc <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80221b2:	f107 0308 	add.w	r3, r7, #8
 80221b6:	3304      	adds	r3, #4
 80221b8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80221ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d105      	bne.n	80221cc <prvProcessReceivedCommands+0x28>
 80221c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80221c4:	4961      	ldr	r1, [pc, #388]	; (802234c <prvProcessReceivedCommands+0x1a8>)
 80221c6:	4862      	ldr	r0, [pc, #392]	; (8022350 <prvProcessReceivedCommands+0x1ac>)
 80221c8:	f7ef ff30 	bl	801202c <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80221cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ce:	681b      	ldr	r3, [r3, #0]
 80221d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80221d2:	6850      	ldr	r0, [r2, #4]
 80221d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80221d6:	6892      	ldr	r2, [r2, #8]
 80221d8:	4611      	mov	r1, r2
 80221da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80221dc:	68bb      	ldr	r3, [r7, #8]
 80221de:	2b00      	cmp	r3, #0
 80221e0:	f2c0 80a2 	blt.w	8022328 <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80221e4:	693b      	ldr	r3, [r7, #16]
 80221e6:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80221e8:	6a3b      	ldr	r3, [r7, #32]
 80221ea:	695b      	ldr	r3, [r3, #20]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d004      	beq.n	80221fa <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80221f0:	6a3b      	ldr	r3, [r7, #32]
 80221f2:	3304      	adds	r3, #4
 80221f4:	4618      	mov	r0, r3
 80221f6:	f7fd fad9 	bl	801f7ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80221fa:	1d3b      	adds	r3, r7, #4
 80221fc:	4618      	mov	r0, r3
 80221fe:	f7ff ff6f 	bl	80220e0 <prvSampleTimeNow>
 8022202:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8022204:	68bb      	ldr	r3, [r7, #8]
 8022206:	2b09      	cmp	r3, #9
 8022208:	f200 808d 	bhi.w	8022326 <prvProcessReceivedCommands+0x182>
 802220c:	a201      	add	r2, pc, #4	; (adr r2, 8022214 <prvProcessReceivedCommands+0x70>)
 802220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022212:	bf00      	nop
 8022214:	0802223d 	.word	0x0802223d
 8022218:	0802223d 	.word	0x0802223d
 802221c:	0802223d 	.word	0x0802223d
 8022220:	080222a9 	.word	0x080222a9
 8022224:	080222bd 	.word	0x080222bd
 8022228:	080222fd 	.word	0x080222fd
 802222c:	0802223d 	.word	0x0802223d
 8022230:	0802223d 	.word	0x0802223d
 8022234:	080222a9 	.word	0x080222a9
 8022238:	080222bd 	.word	0x080222bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802223c:	6a3b      	ldr	r3, [r7, #32]
 802223e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022242:	f043 0301 	orr.w	r3, r3, #1
 8022246:	b2da      	uxtb	r2, r3
 8022248:	6a3b      	ldr	r3, [r7, #32]
 802224a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802224e:	68fa      	ldr	r2, [r7, #12]
 8022250:	6a3b      	ldr	r3, [r7, #32]
 8022252:	699b      	ldr	r3, [r3, #24]
 8022254:	18d1      	adds	r1, r2, r3
 8022256:	68fb      	ldr	r3, [r7, #12]
 8022258:	69fa      	ldr	r2, [r7, #28]
 802225a:	6a38      	ldr	r0, [r7, #32]
 802225c:	f7ff ff60 	bl	8022120 <prvInsertTimerInActiveList>
 8022260:	4603      	mov	r3, r0
 8022262:	2b00      	cmp	r3, #0
 8022264:	d060      	beq.n	8022328 <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022266:	6a3b      	ldr	r3, [r7, #32]
 8022268:	6a1b      	ldr	r3, [r3, #32]
 802226a:	6a38      	ldr	r0, [r7, #32]
 802226c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802226e:	6a3b      	ldr	r3, [r7, #32]
 8022270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022274:	f003 0304 	and.w	r3, r3, #4
 8022278:	2b00      	cmp	r3, #0
 802227a:	d055      	beq.n	8022328 <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802227c:	68fa      	ldr	r2, [r7, #12]
 802227e:	6a3b      	ldr	r3, [r7, #32]
 8022280:	699b      	ldr	r3, [r3, #24]
 8022282:	441a      	add	r2, r3
 8022284:	2300      	movs	r3, #0
 8022286:	9300      	str	r3, [sp, #0]
 8022288:	2300      	movs	r3, #0
 802228a:	2100      	movs	r1, #0
 802228c:	6a38      	ldr	r0, [r7, #32]
 802228e:	f7ff fe0b 	bl	8021ea8 <xTimerGenericCommand>
 8022292:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8022294:	69bb      	ldr	r3, [r7, #24]
 8022296:	2b00      	cmp	r3, #0
 8022298:	d146      	bne.n	8022328 <prvProcessReceivedCommands+0x184>
 802229a:	f44f 724b 	mov.w	r2, #812	; 0x32c
 802229e:	492b      	ldr	r1, [pc, #172]	; (802234c <prvProcessReceivedCommands+0x1a8>)
 80222a0:	482c      	ldr	r0, [pc, #176]	; (8022354 <prvProcessReceivedCommands+0x1b0>)
 80222a2:	f7ef fec3 	bl	801202c <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80222a6:	e03f      	b.n	8022328 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80222a8:	6a3b      	ldr	r3, [r7, #32]
 80222aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80222ae:	f023 0301 	bic.w	r3, r3, #1
 80222b2:	b2da      	uxtb	r2, r3
 80222b4:	6a3b      	ldr	r3, [r7, #32]
 80222b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80222ba:	e035      	b.n	8022328 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80222bc:	6a3b      	ldr	r3, [r7, #32]
 80222be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80222c2:	f043 0301 	orr.w	r3, r3, #1
 80222c6:	b2da      	uxtb	r2, r3
 80222c8:	6a3b      	ldr	r3, [r7, #32]
 80222ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80222ce:	68fa      	ldr	r2, [r7, #12]
 80222d0:	6a3b      	ldr	r3, [r7, #32]
 80222d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80222d4:	6a3b      	ldr	r3, [r7, #32]
 80222d6:	699b      	ldr	r3, [r3, #24]
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d105      	bne.n	80222e8 <prvProcessReceivedCommands+0x144>
 80222dc:	f44f 7251 	mov.w	r2, #836	; 0x344
 80222e0:	491a      	ldr	r1, [pc, #104]	; (802234c <prvProcessReceivedCommands+0x1a8>)
 80222e2:	481d      	ldr	r0, [pc, #116]	; (8022358 <prvProcessReceivedCommands+0x1b4>)
 80222e4:	f7ef fea2 	bl	801202c <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80222e8:	6a3b      	ldr	r3, [r7, #32]
 80222ea:	699a      	ldr	r2, [r3, #24]
 80222ec:	69fb      	ldr	r3, [r7, #28]
 80222ee:	18d1      	adds	r1, r2, r3
 80222f0:	69fb      	ldr	r3, [r7, #28]
 80222f2:	69fa      	ldr	r2, [r7, #28]
 80222f4:	6a38      	ldr	r0, [r7, #32]
 80222f6:	f7ff ff13 	bl	8022120 <prvInsertTimerInActiveList>
					break;
 80222fa:	e015      	b.n	8022328 <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80222fc:	6a3b      	ldr	r3, [r7, #32]
 80222fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022302:	f003 0302 	and.w	r3, r3, #2
 8022306:	2b00      	cmp	r3, #0
 8022308:	d103      	bne.n	8022312 <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 802230a:	6a38      	ldr	r0, [r7, #32]
 802230c:	f000 fbea 	bl	8022ae4 <vPortFree>
 8022310:	e00a      	b.n	8022328 <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022312:	6a3b      	ldr	r3, [r7, #32]
 8022314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022318:	f023 0301 	bic.w	r3, r3, #1
 802231c:	b2da      	uxtb	r2, r3
 802231e:	6a3b      	ldr	r3, [r7, #32]
 8022320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8022324:	e000      	b.n	8022328 <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 8022326:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022328:	4b0c      	ldr	r3, [pc, #48]	; (802235c <prvProcessReceivedCommands+0x1b8>)
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	f107 0108 	add.w	r1, r7, #8
 8022330:	2200      	movs	r2, #0
 8022332:	4618      	mov	r0, r3
 8022334:	f7fd fd84 	bl	801fe40 <xQueueReceive>
 8022338:	4603      	mov	r3, r0
 802233a:	2b00      	cmp	r3, #0
 802233c:	f47f af36 	bne.w	80221ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8022340:	bf00      	nop
 8022342:	bf00      	nop
 8022344:	3728      	adds	r7, #40	; 0x28
 8022346:	46bd      	mov	sp, r7
 8022348:	bd80      	pop	{r7, pc}
 802234a:	bf00      	nop
 802234c:	0802ea30 	.word	0x0802ea30
 8022350:	0802eae4 	.word	0x0802eae4
 8022354:	0802eadc 	.word	0x0802eadc
 8022358:	0802eaf0 	.word	0x0802eaf0
 802235c:	2000d724 	.word	0x2000d724

08022360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022360:	b580      	push	{r7, lr}
 8022362:	b088      	sub	sp, #32
 8022364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022366:	e043      	b.n	80223f0 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022368:	4b2b      	ldr	r3, [pc, #172]	; (8022418 <prvSwitchTimerLists+0xb8>)
 802236a:	681b      	ldr	r3, [r3, #0]
 802236c:	68db      	ldr	r3, [r3, #12]
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022372:	4b29      	ldr	r3, [pc, #164]	; (8022418 <prvSwitchTimerLists+0xb8>)
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	68db      	ldr	r3, [r3, #12]
 8022378:	68db      	ldr	r3, [r3, #12]
 802237a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802237c:	68fb      	ldr	r3, [r7, #12]
 802237e:	3304      	adds	r3, #4
 8022380:	4618      	mov	r0, r3
 8022382:	f7fd fa13 	bl	801f7ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022386:	68fb      	ldr	r3, [r7, #12]
 8022388:	6a1b      	ldr	r3, [r3, #32]
 802238a:	68f8      	ldr	r0, [r7, #12]
 802238c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802238e:	68fb      	ldr	r3, [r7, #12]
 8022390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022394:	f003 0304 	and.w	r3, r3, #4
 8022398:	2b00      	cmp	r3, #0
 802239a:	d029      	beq.n	80223f0 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802239c:	68fb      	ldr	r3, [r7, #12]
 802239e:	699b      	ldr	r3, [r3, #24]
 80223a0:	693a      	ldr	r2, [r7, #16]
 80223a2:	4413      	add	r3, r2
 80223a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80223a6:	68ba      	ldr	r2, [r7, #8]
 80223a8:	693b      	ldr	r3, [r7, #16]
 80223aa:	429a      	cmp	r2, r3
 80223ac:	d90e      	bls.n	80223cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80223ae:	68fb      	ldr	r3, [r7, #12]
 80223b0:	68ba      	ldr	r2, [r7, #8]
 80223b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80223b4:	68fb      	ldr	r3, [r7, #12]
 80223b6:	68fa      	ldr	r2, [r7, #12]
 80223b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80223ba:	4b17      	ldr	r3, [pc, #92]	; (8022418 <prvSwitchTimerLists+0xb8>)
 80223bc:	681a      	ldr	r2, [r3, #0]
 80223be:	68fb      	ldr	r3, [r7, #12]
 80223c0:	3304      	adds	r3, #4
 80223c2:	4619      	mov	r1, r3
 80223c4:	4610      	mov	r0, r2
 80223c6:	f7fd f9b8 	bl	801f73a <vListInsert>
 80223ca:	e011      	b.n	80223f0 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80223cc:	2300      	movs	r3, #0
 80223ce:	9300      	str	r3, [sp, #0]
 80223d0:	2300      	movs	r3, #0
 80223d2:	693a      	ldr	r2, [r7, #16]
 80223d4:	2100      	movs	r1, #0
 80223d6:	68f8      	ldr	r0, [r7, #12]
 80223d8:	f7ff fd66 	bl	8021ea8 <xTimerGenericCommand>
 80223dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d105      	bne.n	80223f0 <prvSwitchTimerLists+0x90>
 80223e4:	f240 329d 	movw	r2, #925	; 0x39d
 80223e8:	490c      	ldr	r1, [pc, #48]	; (802241c <prvSwitchTimerLists+0xbc>)
 80223ea:	480d      	ldr	r0, [pc, #52]	; (8022420 <prvSwitchTimerLists+0xc0>)
 80223ec:	f7ef fe1e 	bl	801202c <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80223f0:	4b09      	ldr	r3, [pc, #36]	; (8022418 <prvSwitchTimerLists+0xb8>)
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d1b6      	bne.n	8022368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80223fa:	4b07      	ldr	r3, [pc, #28]	; (8022418 <prvSwitchTimerLists+0xb8>)
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8022400:	4b08      	ldr	r3, [pc, #32]	; (8022424 <prvSwitchTimerLists+0xc4>)
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	4a04      	ldr	r2, [pc, #16]	; (8022418 <prvSwitchTimerLists+0xb8>)
 8022406:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8022408:	4a06      	ldr	r2, [pc, #24]	; (8022424 <prvSwitchTimerLists+0xc4>)
 802240a:	697b      	ldr	r3, [r7, #20]
 802240c:	6013      	str	r3, [r2, #0]
}
 802240e:	bf00      	nop
 8022410:	3718      	adds	r7, #24
 8022412:	46bd      	mov	sp, r7
 8022414:	bd80      	pop	{r7, pc}
 8022416:	bf00      	nop
 8022418:	2000d71c 	.word	0x2000d71c
 802241c:	0802ea30 	.word	0x0802ea30
 8022420:	0802eadc 	.word	0x0802eadc
 8022424:	2000d720 	.word	0x2000d720

08022428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8022428:	b580      	push	{r7, lr}
 802242a:	b082      	sub	sp, #8
 802242c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802242e:	f000 f987 	bl	8022740 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8022432:	4b15      	ldr	r3, [pc, #84]	; (8022488 <prvCheckForValidListAndQueue+0x60>)
 8022434:	681b      	ldr	r3, [r3, #0]
 8022436:	2b00      	cmp	r3, #0
 8022438:	d120      	bne.n	802247c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802243a:	4814      	ldr	r0, [pc, #80]	; (802248c <prvCheckForValidListAndQueue+0x64>)
 802243c:	f7fd f92c 	bl	801f698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8022440:	4813      	ldr	r0, [pc, #76]	; (8022490 <prvCheckForValidListAndQueue+0x68>)
 8022442:	f7fd f929 	bl	801f698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8022446:	4b13      	ldr	r3, [pc, #76]	; (8022494 <prvCheckForValidListAndQueue+0x6c>)
 8022448:	4a10      	ldr	r2, [pc, #64]	; (802248c <prvCheckForValidListAndQueue+0x64>)
 802244a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802244c:	4b12      	ldr	r3, [pc, #72]	; (8022498 <prvCheckForValidListAndQueue+0x70>)
 802244e:	4a10      	ldr	r2, [pc, #64]	; (8022490 <prvCheckForValidListAndQueue+0x68>)
 8022450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022452:	2300      	movs	r3, #0
 8022454:	9300      	str	r3, [sp, #0]
 8022456:	4b11      	ldr	r3, [pc, #68]	; (802249c <prvCheckForValidListAndQueue+0x74>)
 8022458:	4a11      	ldr	r2, [pc, #68]	; (80224a0 <prvCheckForValidListAndQueue+0x78>)
 802245a:	2110      	movs	r1, #16
 802245c:	2014      	movs	r0, #20
 802245e:	f7fd fa37 	bl	801f8d0 <xQueueGenericCreateStatic>
 8022462:	4603      	mov	r3, r0
 8022464:	4a08      	ldr	r2, [pc, #32]	; (8022488 <prvCheckForValidListAndQueue+0x60>)
 8022466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022468:	4b07      	ldr	r3, [pc, #28]	; (8022488 <prvCheckForValidListAndQueue+0x60>)
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	2b00      	cmp	r3, #0
 802246e:	d005      	beq.n	802247c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022470:	4b05      	ldr	r3, [pc, #20]	; (8022488 <prvCheckForValidListAndQueue+0x60>)
 8022472:	681b      	ldr	r3, [r3, #0]
 8022474:	490b      	ldr	r1, [pc, #44]	; (80224a4 <prvCheckForValidListAndQueue+0x7c>)
 8022476:	4618      	mov	r0, r3
 8022478:	f7fe f8dc 	bl	8020634 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802247c:	f000 f98e 	bl	802279c <vPortExitCritical>
}
 8022480:	bf00      	nop
 8022482:	46bd      	mov	sp, r7
 8022484:	bd80      	pop	{r7, pc}
 8022486:	bf00      	nop
 8022488:	2000d724 	.word	0x2000d724
 802248c:	2000d6f4 	.word	0x2000d6f4
 8022490:	2000d708 	.word	0x2000d708
 8022494:	2000d71c 	.word	0x2000d71c
 8022498:	2000d720 	.word	0x2000d720
 802249c:	2000d870 	.word	0x2000d870
 80224a0:	2000d730 	.word	0x2000d730
 80224a4:	0802eb18 	.word	0x0802eb18

080224a8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80224a8:	b580      	push	{r7, lr}
 80224aa:	b084      	sub	sp, #16
 80224ac:	af00      	add	r7, sp, #0
 80224ae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d105      	bne.n	80224c6 <pvTimerGetTimerID+0x1e>
 80224ba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80224be:	4908      	ldr	r1, [pc, #32]	; (80224e0 <pvTimerGetTimerID+0x38>)
 80224c0:	4808      	ldr	r0, [pc, #32]	; (80224e4 <pvTimerGetTimerID+0x3c>)
 80224c2:	f7ef fdb3 	bl	801202c <assertFail>

	taskENTER_CRITICAL();
 80224c6:	f000 f93b 	bl	8022740 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	69db      	ldr	r3, [r3, #28]
 80224ce:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80224d0:	f000 f964 	bl	802279c <vPortExitCritical>

	return pvReturn;
 80224d4:	68bb      	ldr	r3, [r7, #8]
}
 80224d6:	4618      	mov	r0, r3
 80224d8:	3710      	adds	r7, #16
 80224da:	46bd      	mov	sp, r7
 80224dc:	bd80      	pop	{r7, pc}
 80224de:	bf00      	nop
 80224e0:	0802ea30 	.word	0x0802ea30
 80224e4:	0802eab4 	.word	0x0802eab4

080224e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80224e8:	b480      	push	{r7}
 80224ea:	b085      	sub	sp, #20
 80224ec:	af00      	add	r7, sp, #0
 80224ee:	60f8      	str	r0, [r7, #12]
 80224f0:	60b9      	str	r1, [r7, #8]
 80224f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	3b04      	subs	r3, #4
 80224f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80224fa:	68fb      	ldr	r3, [r7, #12]
 80224fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022502:	68fb      	ldr	r3, [r7, #12]
 8022504:	3b04      	subs	r3, #4
 8022506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8022508:	68bb      	ldr	r3, [r7, #8]
 802250a:	f023 0201 	bic.w	r2, r3, #1
 802250e:	68fb      	ldr	r3, [r7, #12]
 8022510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022512:	68fb      	ldr	r3, [r7, #12]
 8022514:	3b04      	subs	r3, #4
 8022516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8022518:	4a0c      	ldr	r2, [pc, #48]	; (802254c <pxPortInitialiseStack+0x64>)
 802251a:	68fb      	ldr	r3, [r7, #12]
 802251c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	3b14      	subs	r3, #20
 8022522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8022524:	687a      	ldr	r2, [r7, #4]
 8022526:	68fb      	ldr	r3, [r7, #12]
 8022528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802252a:	68fb      	ldr	r3, [r7, #12]
 802252c:	3b04      	subs	r3, #4
 802252e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8022530:	68fb      	ldr	r3, [r7, #12]
 8022532:	f06f 0202 	mvn.w	r2, #2
 8022536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8022538:	68fb      	ldr	r3, [r7, #12]
 802253a:	3b20      	subs	r3, #32
 802253c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802253e:	68fb      	ldr	r3, [r7, #12]
}
 8022540:	4618      	mov	r0, r3
 8022542:	3714      	adds	r7, #20
 8022544:	46bd      	mov	sp, r7
 8022546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802254a:	4770      	bx	lr
 802254c:	08022551 	.word	0x08022551

08022550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8022550:	b580      	push	{r7, lr}
 8022552:	b082      	sub	sp, #8
 8022554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8022556:	2300      	movs	r3, #0
 8022558:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802255a:	4b0e      	ldr	r3, [pc, #56]	; (8022594 <prvTaskExitError+0x44>)
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022562:	d004      	beq.n	802256e <prvTaskExitError+0x1e>
 8022564:	22e3      	movs	r2, #227	; 0xe3
 8022566:	490c      	ldr	r1, [pc, #48]	; (8022598 <prvTaskExitError+0x48>)
 8022568:	480c      	ldr	r0, [pc, #48]	; (802259c <prvTaskExitError+0x4c>)
 802256a:	f7ef fd5f 	bl	801202c <assertFail>
	__asm volatile
 802256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022572:	f383 8811 	msr	BASEPRI, r3
 8022576:	f3bf 8f6f 	isb	sy
 802257a:	f3bf 8f4f 	dsb	sy
 802257e:	607b      	str	r3, [r7, #4]
}
 8022580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8022582:	bf00      	nop
 8022584:	683b      	ldr	r3, [r7, #0]
 8022586:	2b00      	cmp	r3, #0
 8022588:	d0fc      	beq.n	8022584 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802258a:	bf00      	nop
 802258c:	bf00      	nop
 802258e:	3708      	adds	r7, #8
 8022590:	46bd      	mov	sp, r7
 8022592:	bd80      	pop	{r7, pc}
 8022594:	20000f90 	.word	0x20000f90
 8022598:	0802eb2c 	.word	0x0802eb2c
 802259c:	0802eb74 	.word	0x0802eb74

080225a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80225a0:	4b07      	ldr	r3, [pc, #28]	; (80225c0 <pxCurrentTCBConst2>)
 80225a2:	6819      	ldr	r1, [r3, #0]
 80225a4:	6808      	ldr	r0, [r1, #0]
 80225a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225aa:	f380 8809 	msr	PSP, r0
 80225ae:	f3bf 8f6f 	isb	sy
 80225b2:	f04f 0000 	mov.w	r0, #0
 80225b6:	f380 8811 	msr	BASEPRI, r0
 80225ba:	4770      	bx	lr
 80225bc:	f3af 8000 	nop.w

080225c0 <pxCurrentTCBConst2>:
 80225c0:	2000d4b8 	.word	0x2000d4b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80225c4:	bf00      	nop
 80225c6:	bf00      	nop

080225c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80225c8:	4808      	ldr	r0, [pc, #32]	; (80225ec <prvPortStartFirstTask+0x24>)
 80225ca:	6800      	ldr	r0, [r0, #0]
 80225cc:	6800      	ldr	r0, [r0, #0]
 80225ce:	f380 8808 	msr	MSP, r0
 80225d2:	f04f 0000 	mov.w	r0, #0
 80225d6:	f380 8814 	msr	CONTROL, r0
 80225da:	b662      	cpsie	i
 80225dc:	b661      	cpsie	f
 80225de:	f3bf 8f4f 	dsb	sy
 80225e2:	f3bf 8f6f 	isb	sy
 80225e6:	df00      	svc	0
 80225e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80225ea:	bf00      	nop
 80225ec:	e000ed08 	.word	0xe000ed08

080225f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80225f0:	b580      	push	{r7, lr}
 80225f2:	b084      	sub	sp, #16
 80225f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80225f6:	4b44      	ldr	r3, [pc, #272]	; (8022708 <xPortStartScheduler+0x118>)
 80225f8:	681b      	ldr	r3, [r3, #0]
 80225fa:	4a44      	ldr	r2, [pc, #272]	; (802270c <xPortStartScheduler+0x11c>)
 80225fc:	4293      	cmp	r3, r2
 80225fe:	d105      	bne.n	802260c <xPortStartScheduler+0x1c>
 8022600:	f44f 7294 	mov.w	r2, #296	; 0x128
 8022604:	4942      	ldr	r1, [pc, #264]	; (8022710 <xPortStartScheduler+0x120>)
 8022606:	4843      	ldr	r0, [pc, #268]	; (8022714 <xPortStartScheduler+0x124>)
 8022608:	f7ef fd10 	bl	801202c <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802260c:	4b3e      	ldr	r3, [pc, #248]	; (8022708 <xPortStartScheduler+0x118>)
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	4a41      	ldr	r2, [pc, #260]	; (8022718 <xPortStartScheduler+0x128>)
 8022612:	4293      	cmp	r3, r2
 8022614:	d105      	bne.n	8022622 <xPortStartScheduler+0x32>
 8022616:	f240 1229 	movw	r2, #297	; 0x129
 802261a:	493d      	ldr	r1, [pc, #244]	; (8022710 <xPortStartScheduler+0x120>)
 802261c:	483f      	ldr	r0, [pc, #252]	; (802271c <xPortStartScheduler+0x12c>)
 802261e:	f7ef fd05 	bl	801202c <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8022622:	4b3f      	ldr	r3, [pc, #252]	; (8022720 <xPortStartScheduler+0x130>)
 8022624:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8022626:	68fb      	ldr	r3, [r7, #12]
 8022628:	781b      	ldrb	r3, [r3, #0]
 802262a:	b2db      	uxtb	r3, r3
 802262c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802262e:	68fb      	ldr	r3, [r7, #12]
 8022630:	22ff      	movs	r2, #255	; 0xff
 8022632:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8022634:	68fb      	ldr	r3, [r7, #12]
 8022636:	781b      	ldrb	r3, [r3, #0]
 8022638:	b2db      	uxtb	r3, r3
 802263a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802263c:	79fb      	ldrb	r3, [r7, #7]
 802263e:	b2db      	uxtb	r3, r3
 8022640:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8022644:	b2da      	uxtb	r2, r3
 8022646:	4b37      	ldr	r3, [pc, #220]	; (8022724 <xPortStartScheduler+0x134>)
 8022648:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802264a:	4b37      	ldr	r3, [pc, #220]	; (8022728 <xPortStartScheduler+0x138>)
 802264c:	2207      	movs	r2, #7
 802264e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022650:	e009      	b.n	8022666 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 8022652:	4b35      	ldr	r3, [pc, #212]	; (8022728 <xPortStartScheduler+0x138>)
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	3b01      	subs	r3, #1
 8022658:	4a33      	ldr	r2, [pc, #204]	; (8022728 <xPortStartScheduler+0x138>)
 802265a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802265c:	79fb      	ldrb	r3, [r7, #7]
 802265e:	b2db      	uxtb	r3, r3
 8022660:	005b      	lsls	r3, r3, #1
 8022662:	b2db      	uxtb	r3, r3
 8022664:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022666:	79fb      	ldrb	r3, [r7, #7]
 8022668:	b2db      	uxtb	r3, r3
 802266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802266e:	2b80      	cmp	r3, #128	; 0x80
 8022670:	d0ef      	beq.n	8022652 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8022672:	4b2d      	ldr	r3, [pc, #180]	; (8022728 <xPortStartScheduler+0x138>)
 8022674:	681b      	ldr	r3, [r3, #0]
 8022676:	f1c3 0307 	rsb	r3, r3, #7
 802267a:	2b04      	cmp	r3, #4
 802267c:	d005      	beq.n	802268a <xPortStartScheduler+0x9a>
 802267e:	f240 1251 	movw	r2, #337	; 0x151
 8022682:	4923      	ldr	r1, [pc, #140]	; (8022710 <xPortStartScheduler+0x120>)
 8022684:	4829      	ldr	r0, [pc, #164]	; (802272c <xPortStartScheduler+0x13c>)
 8022686:	f7ef fcd1 	bl	801202c <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802268a:	4b27      	ldr	r3, [pc, #156]	; (8022728 <xPortStartScheduler+0x138>)
 802268c:	681b      	ldr	r3, [r3, #0]
 802268e:	f1c3 0307 	rsb	r3, r3, #7
 8022692:	2b04      	cmp	r3, #4
 8022694:	d005      	beq.n	80226a2 <xPortStartScheduler+0xb2>
 8022696:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 802269a:	491d      	ldr	r1, [pc, #116]	; (8022710 <xPortStartScheduler+0x120>)
 802269c:	4824      	ldr	r0, [pc, #144]	; (8022730 <xPortStartScheduler+0x140>)
 802269e:	f7ef fcc5 	bl	801202c <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80226a2:	4b21      	ldr	r3, [pc, #132]	; (8022728 <xPortStartScheduler+0x138>)
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	021b      	lsls	r3, r3, #8
 80226a8:	4a1f      	ldr	r2, [pc, #124]	; (8022728 <xPortStartScheduler+0x138>)
 80226aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80226ac:	4b1e      	ldr	r3, [pc, #120]	; (8022728 <xPortStartScheduler+0x138>)
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80226b4:	4a1c      	ldr	r2, [pc, #112]	; (8022728 <xPortStartScheduler+0x138>)
 80226b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80226b8:	68bb      	ldr	r3, [r7, #8]
 80226ba:	b2da      	uxtb	r2, r3
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80226c0:	4b1c      	ldr	r3, [pc, #112]	; (8022734 <xPortStartScheduler+0x144>)
 80226c2:	681b      	ldr	r3, [r3, #0]
 80226c4:	4a1b      	ldr	r2, [pc, #108]	; (8022734 <xPortStartScheduler+0x144>)
 80226c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80226ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80226cc:	4b19      	ldr	r3, [pc, #100]	; (8022734 <xPortStartScheduler+0x144>)
 80226ce:	681b      	ldr	r3, [r3, #0]
 80226d0:	4a18      	ldr	r2, [pc, #96]	; (8022734 <xPortStartScheduler+0x144>)
 80226d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80226d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80226d8:	f000 f8e0 	bl	802289c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80226dc:	4b16      	ldr	r3, [pc, #88]	; (8022738 <xPortStartScheduler+0x148>)
 80226de:	2200      	movs	r2, #0
 80226e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80226e2:	f000 f8f9 	bl	80228d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80226e6:	4b15      	ldr	r3, [pc, #84]	; (802273c <xPortStartScheduler+0x14c>)
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	4a14      	ldr	r2, [pc, #80]	; (802273c <xPortStartScheduler+0x14c>)
 80226ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80226f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80226f2:	f7ff ff69 	bl	80225c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80226f6:	f7fe fceb 	bl	80210d0 <vTaskSwitchContext>
	prvTaskExitError();
 80226fa:	f7ff ff29 	bl	8022550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80226fe:	2300      	movs	r3, #0
}
 8022700:	4618      	mov	r0, r3
 8022702:	3710      	adds	r7, #16
 8022704:	46bd      	mov	sp, r7
 8022706:	bd80      	pop	{r7, pc}
 8022708:	e000ed00 	.word	0xe000ed00
 802270c:	410fc271 	.word	0x410fc271
 8022710:	0802eb2c 	.word	0x0802eb2c
 8022714:	0802eb90 	.word	0x0802eb90
 8022718:	410fc270 	.word	0x410fc270
 802271c:	0802ebb4 	.word	0x0802ebb4
 8022720:	e000e400 	.word	0xe000e400
 8022724:	2000d8c0 	.word	0x2000d8c0
 8022728:	2000d8c4 	.word	0x2000d8c4
 802272c:	0802ebd8 	.word	0x0802ebd8
 8022730:	0802ec1c 	.word	0x0802ec1c
 8022734:	e000ed20 	.word	0xe000ed20
 8022738:	20000f90 	.word	0x20000f90
 802273c:	e000ef34 	.word	0xe000ef34

08022740 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8022740:	b580      	push	{r7, lr}
 8022742:	b082      	sub	sp, #8
 8022744:	af00      	add	r7, sp, #0
	__asm volatile
 8022746:	f04f 0350 	mov.w	r3, #80	; 0x50
 802274a:	f383 8811 	msr	BASEPRI, r3
 802274e:	f3bf 8f6f 	isb	sy
 8022752:	f3bf 8f4f 	dsb	sy
 8022756:	607b      	str	r3, [r7, #4]
}
 8022758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802275a:	4b0c      	ldr	r3, [pc, #48]	; (802278c <vPortEnterCritical+0x4c>)
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	3301      	adds	r3, #1
 8022760:	4a0a      	ldr	r2, [pc, #40]	; (802278c <vPortEnterCritical+0x4c>)
 8022762:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8022764:	4b09      	ldr	r3, [pc, #36]	; (802278c <vPortEnterCritical+0x4c>)
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	2b01      	cmp	r3, #1
 802276a:	d10a      	bne.n	8022782 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802276c:	4b08      	ldr	r3, [pc, #32]	; (8022790 <vPortEnterCritical+0x50>)
 802276e:	681b      	ldr	r3, [r3, #0]
 8022770:	b2db      	uxtb	r3, r3
 8022772:	2b00      	cmp	r3, #0
 8022774:	d005      	beq.n	8022782 <vPortEnterCritical+0x42>
 8022776:	f240 129f 	movw	r2, #415	; 0x19f
 802277a:	4906      	ldr	r1, [pc, #24]	; (8022794 <vPortEnterCritical+0x54>)
 802277c:	4806      	ldr	r0, [pc, #24]	; (8022798 <vPortEnterCritical+0x58>)
 802277e:	f7ef fc55 	bl	801202c <assertFail>
	}
}
 8022782:	bf00      	nop
 8022784:	3708      	adds	r7, #8
 8022786:	46bd      	mov	sp, r7
 8022788:	bd80      	pop	{r7, pc}
 802278a:	bf00      	nop
 802278c:	20000f90 	.word	0x20000f90
 8022790:	e000ed04 	.word	0xe000ed04
 8022794:	0802eb2c 	.word	0x0802eb2c
 8022798:	0802ec7c 	.word	0x0802ec7c

0802279c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802279c:	b580      	push	{r7, lr}
 802279e:	b082      	sub	sp, #8
 80227a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80227a2:	4b0e      	ldr	r3, [pc, #56]	; (80227dc <vPortExitCritical+0x40>)
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	2b00      	cmp	r3, #0
 80227a8:	d105      	bne.n	80227b6 <vPortExitCritical+0x1a>
 80227aa:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 80227ae:	490c      	ldr	r1, [pc, #48]	; (80227e0 <vPortExitCritical+0x44>)
 80227b0:	480c      	ldr	r0, [pc, #48]	; (80227e4 <vPortExitCritical+0x48>)
 80227b2:	f7ef fc3b 	bl	801202c <assertFail>
	uxCriticalNesting--;
 80227b6:	4b09      	ldr	r3, [pc, #36]	; (80227dc <vPortExitCritical+0x40>)
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	3b01      	subs	r3, #1
 80227bc:	4a07      	ldr	r2, [pc, #28]	; (80227dc <vPortExitCritical+0x40>)
 80227be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80227c0:	4b06      	ldr	r3, [pc, #24]	; (80227dc <vPortExitCritical+0x40>)
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d105      	bne.n	80227d4 <vPortExitCritical+0x38>
 80227c8:	2300      	movs	r3, #0
 80227ca:	607b      	str	r3, [r7, #4]
	__asm volatile
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	f383 8811 	msr	BASEPRI, r3
}
 80227d2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80227d4:	bf00      	nop
 80227d6:	3708      	adds	r7, #8
 80227d8:	46bd      	mov	sp, r7
 80227da:	bd80      	pop	{r7, pc}
 80227dc:	20000f90 	.word	0x20000f90
 80227e0:	0802eb2c 	.word	0x0802eb2c
 80227e4:	0802ecb4 	.word	0x0802ecb4
	...

080227f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80227f0:	f3ef 8009 	mrs	r0, PSP
 80227f4:	f3bf 8f6f 	isb	sy
 80227f8:	4b15      	ldr	r3, [pc, #84]	; (8022850 <pxCurrentTCBConst>)
 80227fa:	681a      	ldr	r2, [r3, #0]
 80227fc:	f01e 0f10 	tst.w	lr, #16
 8022800:	bf08      	it	eq
 8022802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8022806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802280a:	6010      	str	r0, [r2, #0]
 802280c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8022810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8022814:	f380 8811 	msr	BASEPRI, r0
 8022818:	f3bf 8f4f 	dsb	sy
 802281c:	f3bf 8f6f 	isb	sy
 8022820:	f7fe fc56 	bl	80210d0 <vTaskSwitchContext>
 8022824:	f04f 0000 	mov.w	r0, #0
 8022828:	f380 8811 	msr	BASEPRI, r0
 802282c:	bc09      	pop	{r0, r3}
 802282e:	6819      	ldr	r1, [r3, #0]
 8022830:	6808      	ldr	r0, [r1, #0]
 8022832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022836:	f01e 0f10 	tst.w	lr, #16
 802283a:	bf08      	it	eq
 802283c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8022840:	f380 8809 	msr	PSP, r0
 8022844:	f3bf 8f6f 	isb	sy
 8022848:	4770      	bx	lr
 802284a:	bf00      	nop
 802284c:	f3af 8000 	nop.w

08022850 <pxCurrentTCBConst>:
 8022850:	2000d4b8 	.word	0x2000d4b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8022854:	bf00      	nop
 8022856:	bf00      	nop

08022858 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8022858:	b580      	push	{r7, lr}
 802285a:	b082      	sub	sp, #8
 802285c:	af00      	add	r7, sp, #0
	__asm volatile
 802285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022862:	f383 8811 	msr	BASEPRI, r3
 8022866:	f3bf 8f6f 	isb	sy
 802286a:	f3bf 8f4f 	dsb	sy
 802286e:	607b      	str	r3, [r7, #4]
}
 8022870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8022872:	f7fe fb53 	bl	8020f1c <xTaskIncrementTick>
 8022876:	4603      	mov	r3, r0
 8022878:	2b00      	cmp	r3, #0
 802287a:	d003      	beq.n	8022884 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802287c:	4b06      	ldr	r3, [pc, #24]	; (8022898 <tickFreeRTOS+0x40>)
 802287e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022882:	601a      	str	r2, [r3, #0]
 8022884:	2300      	movs	r3, #0
 8022886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8022888:	683b      	ldr	r3, [r7, #0]
 802288a:	f383 8811 	msr	BASEPRI, r3
}
 802288e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8022890:	bf00      	nop
 8022892:	3708      	adds	r7, #8
 8022894:	46bd      	mov	sp, r7
 8022896:	bd80      	pop	{r7, pc}
 8022898:	e000ed04 	.word	0xe000ed04

0802289c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802289c:	b480      	push	{r7}
 802289e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80228a0:	4b09      	ldr	r3, [pc, #36]	; (80228c8 <vPortSetupTimerInterrupt+0x2c>)
 80228a2:	2200      	movs	r2, #0
 80228a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80228a6:	4b09      	ldr	r3, [pc, #36]	; (80228cc <vPortSetupTimerInterrupt+0x30>)
 80228a8:	2200      	movs	r2, #0
 80228aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80228ac:	4b08      	ldr	r3, [pc, #32]	; (80228d0 <vPortSetupTimerInterrupt+0x34>)
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	4a08      	ldr	r2, [pc, #32]	; (80228d4 <vPortSetupTimerInterrupt+0x38>)
 80228b2:	3b01      	subs	r3, #1
 80228b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80228b6:	4b04      	ldr	r3, [pc, #16]	; (80228c8 <vPortSetupTimerInterrupt+0x2c>)
 80228b8:	2207      	movs	r2, #7
 80228ba:	601a      	str	r2, [r3, #0]
}
 80228bc:	bf00      	nop
 80228be:	46bd      	mov	sp, r7
 80228c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c4:	4770      	bx	lr
 80228c6:	bf00      	nop
 80228c8:	e000e010 	.word	0xe000e010
 80228cc:	e000e018 	.word	0xe000e018
 80228d0:	20000ef8 	.word	0x20000ef8
 80228d4:	e000e014 	.word	0xe000e014

080228d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80228d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80228e8 <vPortEnableVFP+0x10>
 80228dc:	6801      	ldr	r1, [r0, #0]
 80228de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80228e2:	6001      	str	r1, [r0, #0]
 80228e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80228e6:	bf00      	nop
 80228e8:	e000ed88 	.word	0xe000ed88

080228ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80228ec:	b580      	push	{r7, lr}
 80228ee:	b082      	sub	sp, #8
 80228f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80228f2:	f3ef 8305 	mrs	r3, IPSR
 80228f6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	2b0f      	cmp	r3, #15
 80228fc:	d90f      	bls.n	802291e <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80228fe:	4a11      	ldr	r2, [pc, #68]	; (8022944 <vPortValidateInterruptPriority+0x58>)
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	4413      	add	r3, r2
 8022904:	781b      	ldrb	r3, [r3, #0]
 8022906:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8022908:	4b0f      	ldr	r3, [pc, #60]	; (8022948 <vPortValidateInterruptPriority+0x5c>)
 802290a:	781b      	ldrb	r3, [r3, #0]
 802290c:	78fa      	ldrb	r2, [r7, #3]
 802290e:	429a      	cmp	r2, r3
 8022910:	d205      	bcs.n	802291e <vPortValidateInterruptPriority+0x32>
 8022912:	f240 22f2 	movw	r2, #754	; 0x2f2
 8022916:	490d      	ldr	r1, [pc, #52]	; (802294c <vPortValidateInterruptPriority+0x60>)
 8022918:	480d      	ldr	r0, [pc, #52]	; (8022950 <vPortValidateInterruptPriority+0x64>)
 802291a:	f7ef fb87 	bl	801202c <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802291e:	4b0d      	ldr	r3, [pc, #52]	; (8022954 <vPortValidateInterruptPriority+0x68>)
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8022926:	4b0c      	ldr	r3, [pc, #48]	; (8022958 <vPortValidateInterruptPriority+0x6c>)
 8022928:	681b      	ldr	r3, [r3, #0]
 802292a:	429a      	cmp	r2, r3
 802292c:	d905      	bls.n	802293a <vPortValidateInterruptPriority+0x4e>
 802292e:	f240 3202 	movw	r2, #770	; 0x302
 8022932:	4906      	ldr	r1, [pc, #24]	; (802294c <vPortValidateInterruptPriority+0x60>)
 8022934:	4809      	ldr	r0, [pc, #36]	; (802295c <vPortValidateInterruptPriority+0x70>)
 8022936:	f7ef fb79 	bl	801202c <assertFail>
	}
 802293a:	bf00      	nop
 802293c:	3708      	adds	r7, #8
 802293e:	46bd      	mov	sp, r7
 8022940:	bd80      	pop	{r7, pc}
 8022942:	bf00      	nop
 8022944:	e000e3f0 	.word	0xe000e3f0
 8022948:	2000d8c0 	.word	0x2000d8c0
 802294c:	0802eb2c 	.word	0x0802eb2c
 8022950:	0802ecc8 	.word	0x0802ecc8
 8022954:	e000ed0c 	.word	0xe000ed0c
 8022958:	2000d8c4 	.word	0x2000d8c4
 802295c:	0802ecf4 	.word	0x0802ecf4

08022960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8022960:	b580      	push	{r7, lr}
 8022962:	b086      	sub	sp, #24
 8022964:	af00      	add	r7, sp, #0
 8022966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8022968:	2300      	movs	r3, #0
 802296a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 802296c:	f7fe f98c 	bl	8020c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8022970:	4b52      	ldr	r3, [pc, #328]	; (8022abc <pvPortMalloc+0x15c>)
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	2b00      	cmp	r3, #0
 8022976:	d101      	bne.n	802297c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8022978:	f000 f912 	bl	8022ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802297c:	4b50      	ldr	r3, [pc, #320]	; (8022ac0 <pvPortMalloc+0x160>)
 802297e:	681a      	ldr	r2, [r3, #0]
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	4013      	ands	r3, r2
 8022984:	2b00      	cmp	r3, #0
 8022986:	f040 8087 	bne.w	8022a98 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d017      	beq.n	80229c0 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 8022990:	2208      	movs	r2, #8
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	4413      	add	r3, r2
 8022996:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	f003 0307 	and.w	r3, r3, #7
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d00e      	beq.n	80229c0 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	f023 0307 	bic.w	r3, r3, #7
 80229a8:	3308      	adds	r3, #8
 80229aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	f003 0307 	and.w	r3, r3, #7
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d004      	beq.n	80229c0 <pvPortMalloc+0x60>
 80229b6:	2297      	movs	r2, #151	; 0x97
 80229b8:	4942      	ldr	r1, [pc, #264]	; (8022ac4 <pvPortMalloc+0x164>)
 80229ba:	4843      	ldr	r0, [pc, #268]	; (8022ac8 <pvPortMalloc+0x168>)
 80229bc:	f7ef fb36 	bl	801202c <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d068      	beq.n	8022a98 <pvPortMalloc+0x138>
 80229c6:	4b41      	ldr	r3, [pc, #260]	; (8022acc <pvPortMalloc+0x16c>)
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	687a      	ldr	r2, [r7, #4]
 80229cc:	429a      	cmp	r2, r3
 80229ce:	d863      	bhi.n	8022a98 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80229d0:	4b3f      	ldr	r3, [pc, #252]	; (8022ad0 <pvPortMalloc+0x170>)
 80229d2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80229d4:	4b3e      	ldr	r3, [pc, #248]	; (8022ad0 <pvPortMalloc+0x170>)
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80229da:	e004      	b.n	80229e6 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 80229dc:	697b      	ldr	r3, [r7, #20]
 80229de:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80229e0:	697b      	ldr	r3, [r7, #20]
 80229e2:	681b      	ldr	r3, [r3, #0]
 80229e4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80229e6:	697b      	ldr	r3, [r7, #20]
 80229e8:	685b      	ldr	r3, [r3, #4]
 80229ea:	687a      	ldr	r2, [r7, #4]
 80229ec:	429a      	cmp	r2, r3
 80229ee:	d903      	bls.n	80229f8 <pvPortMalloc+0x98>
 80229f0:	697b      	ldr	r3, [r7, #20]
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d1f1      	bne.n	80229dc <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80229f8:	4b30      	ldr	r3, [pc, #192]	; (8022abc <pvPortMalloc+0x15c>)
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	697a      	ldr	r2, [r7, #20]
 80229fe:	429a      	cmp	r2, r3
 8022a00:	d04a      	beq.n	8022a98 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8022a02:	693b      	ldr	r3, [r7, #16]
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	2208      	movs	r2, #8
 8022a08:	4413      	add	r3, r2
 8022a0a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8022a0c:	697b      	ldr	r3, [r7, #20]
 8022a0e:	681a      	ldr	r2, [r3, #0]
 8022a10:	693b      	ldr	r3, [r7, #16]
 8022a12:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8022a14:	697b      	ldr	r3, [r7, #20]
 8022a16:	685a      	ldr	r2, [r3, #4]
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	1ad2      	subs	r2, r2, r3
 8022a1c:	2308      	movs	r3, #8
 8022a1e:	005b      	lsls	r3, r3, #1
 8022a20:	429a      	cmp	r2, r3
 8022a22:	d919      	bls.n	8022a58 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8022a24:	697a      	ldr	r2, [r7, #20]
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	4413      	add	r3, r2
 8022a2a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8022a2c:	68bb      	ldr	r3, [r7, #8]
 8022a2e:	f003 0307 	and.w	r3, r3, #7
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d004      	beq.n	8022a40 <pvPortMalloc+0xe0>
 8022a36:	22c4      	movs	r2, #196	; 0xc4
 8022a38:	4922      	ldr	r1, [pc, #136]	; (8022ac4 <pvPortMalloc+0x164>)
 8022a3a:	4826      	ldr	r0, [pc, #152]	; (8022ad4 <pvPortMalloc+0x174>)
 8022a3c:	f7ef faf6 	bl	801202c <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8022a40:	697b      	ldr	r3, [r7, #20]
 8022a42:	685a      	ldr	r2, [r3, #4]
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	1ad2      	subs	r2, r2, r3
 8022a48:	68bb      	ldr	r3, [r7, #8]
 8022a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8022a4c:	697b      	ldr	r3, [r7, #20]
 8022a4e:	687a      	ldr	r2, [r7, #4]
 8022a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8022a52:	68b8      	ldr	r0, [r7, #8]
 8022a54:	f000 f906 	bl	8022c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8022a58:	4b1c      	ldr	r3, [pc, #112]	; (8022acc <pvPortMalloc+0x16c>)
 8022a5a:	681a      	ldr	r2, [r3, #0]
 8022a5c:	697b      	ldr	r3, [r7, #20]
 8022a5e:	685b      	ldr	r3, [r3, #4]
 8022a60:	1ad3      	subs	r3, r2, r3
 8022a62:	4a1a      	ldr	r2, [pc, #104]	; (8022acc <pvPortMalloc+0x16c>)
 8022a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8022a66:	4b19      	ldr	r3, [pc, #100]	; (8022acc <pvPortMalloc+0x16c>)
 8022a68:	681a      	ldr	r2, [r3, #0]
 8022a6a:	4b1b      	ldr	r3, [pc, #108]	; (8022ad8 <pvPortMalloc+0x178>)
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	429a      	cmp	r2, r3
 8022a70:	d203      	bcs.n	8022a7a <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8022a72:	4b16      	ldr	r3, [pc, #88]	; (8022acc <pvPortMalloc+0x16c>)
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	4a18      	ldr	r2, [pc, #96]	; (8022ad8 <pvPortMalloc+0x178>)
 8022a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8022a7a:	697b      	ldr	r3, [r7, #20]
 8022a7c:	685a      	ldr	r2, [r3, #4]
 8022a7e:	4b10      	ldr	r3, [pc, #64]	; (8022ac0 <pvPortMalloc+0x160>)
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	431a      	orrs	r2, r3
 8022a84:	697b      	ldr	r3, [r7, #20]
 8022a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8022a88:	697b      	ldr	r3, [r7, #20]
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8022a8e:	4b13      	ldr	r3, [pc, #76]	; (8022adc <pvPortMalloc+0x17c>)
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	3301      	adds	r3, #1
 8022a94:	4a11      	ldr	r2, [pc, #68]	; (8022adc <pvPortMalloc+0x17c>)
 8022a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8022a98:	f7fe f904 	bl	8020ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8022a9c:	68fb      	ldr	r3, [r7, #12]
 8022a9e:	f003 0307 	and.w	r3, r3, #7
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d005      	beq.n	8022ab2 <pvPortMalloc+0x152>
 8022aa6:	f240 1205 	movw	r2, #261	; 0x105
 8022aaa:	4906      	ldr	r1, [pc, #24]	; (8022ac4 <pvPortMalloc+0x164>)
 8022aac:	480c      	ldr	r0, [pc, #48]	; (8022ae0 <pvPortMalloc+0x180>)
 8022aae:	f7ef fabd 	bl	801202c <assertFail>
	return pvReturn;
 8022ab2:	68fb      	ldr	r3, [r7, #12]
}
 8022ab4:	4618      	mov	r0, r3
 8022ab6:	3718      	adds	r7, #24
 8022ab8:	46bd      	mov	sp, r7
 8022aba:	bd80      	pop	{r7, pc}
 8022abc:	200114d0 	.word	0x200114d0
 8022ac0:	200114e4 	.word	0x200114e4
 8022ac4:	0802ed38 	.word	0x0802ed38
 8022ac8:	0802ed80 	.word	0x0802ed80
 8022acc:	200114d4 	.word	0x200114d4
 8022ad0:	200114c8 	.word	0x200114c8
 8022ad4:	0802edb0 	.word	0x0802edb0
 8022ad8:	200114d8 	.word	0x200114d8
 8022adc:	200114dc 	.word	0x200114dc
 8022ae0:	0802edf4 	.word	0x0802edf4

08022ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8022ae4:	b580      	push	{r7, lr}
 8022ae6:	b084      	sub	sp, #16
 8022ae8:	af00      	add	r7, sp, #0
 8022aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d043      	beq.n	8022b7e <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8022af6:	2308      	movs	r3, #8
 8022af8:	425b      	negs	r3, r3
 8022afa:	68fa      	ldr	r2, [r7, #12]
 8022afc:	4413      	add	r3, r2
 8022afe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8022b00:	68fb      	ldr	r3, [r7, #12]
 8022b02:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8022b04:	68bb      	ldr	r3, [r7, #8]
 8022b06:	685a      	ldr	r2, [r3, #4]
 8022b08:	4b1f      	ldr	r3, [pc, #124]	; (8022b88 <vPortFree+0xa4>)
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	4013      	ands	r3, r2
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d105      	bne.n	8022b1e <vPortFree+0x3a>
 8022b12:	f240 1219 	movw	r2, #281	; 0x119
 8022b16:	491d      	ldr	r1, [pc, #116]	; (8022b8c <vPortFree+0xa8>)
 8022b18:	481d      	ldr	r0, [pc, #116]	; (8022b90 <vPortFree+0xac>)
 8022b1a:	f7ef fa87 	bl	801202c <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8022b1e:	68bb      	ldr	r3, [r7, #8]
 8022b20:	681b      	ldr	r3, [r3, #0]
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d005      	beq.n	8022b32 <vPortFree+0x4e>
 8022b26:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8022b2a:	4918      	ldr	r1, [pc, #96]	; (8022b8c <vPortFree+0xa8>)
 8022b2c:	4819      	ldr	r0, [pc, #100]	; (8022b94 <vPortFree+0xb0>)
 8022b2e:	f7ef fa7d 	bl	801202c <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8022b32:	68bb      	ldr	r3, [r7, #8]
 8022b34:	685a      	ldr	r2, [r3, #4]
 8022b36:	4b14      	ldr	r3, [pc, #80]	; (8022b88 <vPortFree+0xa4>)
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	4013      	ands	r3, r2
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d01e      	beq.n	8022b7e <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8022b40:	68bb      	ldr	r3, [r7, #8]
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	d11a      	bne.n	8022b7e <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8022b48:	68bb      	ldr	r3, [r7, #8]
 8022b4a:	685a      	ldr	r2, [r3, #4]
 8022b4c:	4b0e      	ldr	r3, [pc, #56]	; (8022b88 <vPortFree+0xa4>)
 8022b4e:	681b      	ldr	r3, [r3, #0]
 8022b50:	43db      	mvns	r3, r3
 8022b52:	401a      	ands	r2, r3
 8022b54:	68bb      	ldr	r3, [r7, #8]
 8022b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8022b58:	f7fe f896 	bl	8020c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8022b5c:	68bb      	ldr	r3, [r7, #8]
 8022b5e:	685a      	ldr	r2, [r3, #4]
 8022b60:	4b0d      	ldr	r3, [pc, #52]	; (8022b98 <vPortFree+0xb4>)
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	4413      	add	r3, r2
 8022b66:	4a0c      	ldr	r2, [pc, #48]	; (8022b98 <vPortFree+0xb4>)
 8022b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8022b6a:	68b8      	ldr	r0, [r7, #8]
 8022b6c:	f000 f87a 	bl	8022c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8022b70:	4b0a      	ldr	r3, [pc, #40]	; (8022b9c <vPortFree+0xb8>)
 8022b72:	681b      	ldr	r3, [r3, #0]
 8022b74:	3301      	adds	r3, #1
 8022b76:	4a09      	ldr	r2, [pc, #36]	; (8022b9c <vPortFree+0xb8>)
 8022b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8022b7a:	f7fe f893 	bl	8020ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8022b7e:	bf00      	nop
 8022b80:	3710      	adds	r7, #16
 8022b82:	46bd      	mov	sp, r7
 8022b84:	bd80      	pop	{r7, pc}
 8022b86:	bf00      	nop
 8022b88:	200114e4 	.word	0x200114e4
 8022b8c:	0802ed38 	.word	0x0802ed38
 8022b90:	0802ee3c 	.word	0x0802ee3c
 8022b94:	0802ee70 	.word	0x0802ee70
 8022b98:	200114d4 	.word	0x200114d4
 8022b9c:	200114e0 	.word	0x200114e0

08022ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8022ba0:	b480      	push	{r7}
 8022ba2:	b085      	sub	sp, #20
 8022ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8022ba6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8022baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8022bac:	4b27      	ldr	r3, [pc, #156]	; (8022c4c <prvHeapInit+0xac>)
 8022bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8022bb0:	68fb      	ldr	r3, [r7, #12]
 8022bb2:	f003 0307 	and.w	r3, r3, #7
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d00c      	beq.n	8022bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8022bba:	68fb      	ldr	r3, [r7, #12]
 8022bbc:	3307      	adds	r3, #7
 8022bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8022bc0:	68fb      	ldr	r3, [r7, #12]
 8022bc2:	f023 0307 	bic.w	r3, r3, #7
 8022bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8022bc8:	68ba      	ldr	r2, [r7, #8]
 8022bca:	68fb      	ldr	r3, [r7, #12]
 8022bcc:	1ad3      	subs	r3, r2, r3
 8022bce:	4a1f      	ldr	r2, [pc, #124]	; (8022c4c <prvHeapInit+0xac>)
 8022bd0:	4413      	add	r3, r2
 8022bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8022bd4:	68fb      	ldr	r3, [r7, #12]
 8022bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8022bd8:	4a1d      	ldr	r2, [pc, #116]	; (8022c50 <prvHeapInit+0xb0>)
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8022bde:	4b1c      	ldr	r3, [pc, #112]	; (8022c50 <prvHeapInit+0xb0>)
 8022be0:	2200      	movs	r2, #0
 8022be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	68ba      	ldr	r2, [r7, #8]
 8022be8:	4413      	add	r3, r2
 8022bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8022bec:	2208      	movs	r2, #8
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	1a9b      	subs	r3, r3, r2
 8022bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8022bf4:	68fb      	ldr	r3, [r7, #12]
 8022bf6:	f023 0307 	bic.w	r3, r3, #7
 8022bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8022bfc:	68fb      	ldr	r3, [r7, #12]
 8022bfe:	4a15      	ldr	r2, [pc, #84]	; (8022c54 <prvHeapInit+0xb4>)
 8022c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8022c02:	4b14      	ldr	r3, [pc, #80]	; (8022c54 <prvHeapInit+0xb4>)
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	2200      	movs	r2, #0
 8022c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8022c0a:	4b12      	ldr	r3, [pc, #72]	; (8022c54 <prvHeapInit+0xb4>)
 8022c0c:	681b      	ldr	r3, [r3, #0]
 8022c0e:	2200      	movs	r2, #0
 8022c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8022c12:	687b      	ldr	r3, [r7, #4]
 8022c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8022c16:	683b      	ldr	r3, [r7, #0]
 8022c18:	68fa      	ldr	r2, [r7, #12]
 8022c1a:	1ad2      	subs	r2, r2, r3
 8022c1c:	683b      	ldr	r3, [r7, #0]
 8022c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8022c20:	4b0c      	ldr	r3, [pc, #48]	; (8022c54 <prvHeapInit+0xb4>)
 8022c22:	681a      	ldr	r2, [r3, #0]
 8022c24:	683b      	ldr	r3, [r7, #0]
 8022c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8022c28:	683b      	ldr	r3, [r7, #0]
 8022c2a:	685b      	ldr	r3, [r3, #4]
 8022c2c:	4a0a      	ldr	r2, [pc, #40]	; (8022c58 <prvHeapInit+0xb8>)
 8022c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8022c30:	683b      	ldr	r3, [r7, #0]
 8022c32:	685b      	ldr	r3, [r3, #4]
 8022c34:	4a09      	ldr	r2, [pc, #36]	; (8022c5c <prvHeapInit+0xbc>)
 8022c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8022c38:	4b09      	ldr	r3, [pc, #36]	; (8022c60 <prvHeapInit+0xc0>)
 8022c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8022c3e:	601a      	str	r2, [r3, #0]
}
 8022c40:	bf00      	nop
 8022c42:	3714      	adds	r7, #20
 8022c44:	46bd      	mov	sp, r7
 8022c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c4a:	4770      	bx	lr
 8022c4c:	2000d8c8 	.word	0x2000d8c8
 8022c50:	200114c8 	.word	0x200114c8
 8022c54:	200114d0 	.word	0x200114d0
 8022c58:	200114d8 	.word	0x200114d8
 8022c5c:	200114d4 	.word	0x200114d4
 8022c60:	200114e4 	.word	0x200114e4

08022c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8022c64:	b480      	push	{r7}
 8022c66:	b085      	sub	sp, #20
 8022c68:	af00      	add	r7, sp, #0
 8022c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8022c6c:	4b28      	ldr	r3, [pc, #160]	; (8022d10 <prvInsertBlockIntoFreeList+0xac>)
 8022c6e:	60fb      	str	r3, [r7, #12]
 8022c70:	e002      	b.n	8022c78 <prvInsertBlockIntoFreeList+0x14>
 8022c72:	68fb      	ldr	r3, [r7, #12]
 8022c74:	681b      	ldr	r3, [r3, #0]
 8022c76:	60fb      	str	r3, [r7, #12]
 8022c78:	68fb      	ldr	r3, [r7, #12]
 8022c7a:	681b      	ldr	r3, [r3, #0]
 8022c7c:	687a      	ldr	r2, [r7, #4]
 8022c7e:	429a      	cmp	r2, r3
 8022c80:	d8f7      	bhi.n	8022c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8022c82:	68fb      	ldr	r3, [r7, #12]
 8022c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8022c86:	68fb      	ldr	r3, [r7, #12]
 8022c88:	685b      	ldr	r3, [r3, #4]
 8022c8a:	68ba      	ldr	r2, [r7, #8]
 8022c8c:	4413      	add	r3, r2
 8022c8e:	687a      	ldr	r2, [r7, #4]
 8022c90:	429a      	cmp	r2, r3
 8022c92:	d108      	bne.n	8022ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	685a      	ldr	r2, [r3, #4]
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	685b      	ldr	r3, [r3, #4]
 8022c9c:	441a      	add	r2, r3
 8022c9e:	68fb      	ldr	r3, [r7, #12]
 8022ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8022ca2:	68fb      	ldr	r3, [r7, #12]
 8022ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	685b      	ldr	r3, [r3, #4]
 8022cae:	68ba      	ldr	r2, [r7, #8]
 8022cb0:	441a      	add	r2, r3
 8022cb2:	68fb      	ldr	r3, [r7, #12]
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	429a      	cmp	r2, r3
 8022cb8:	d118      	bne.n	8022cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	681a      	ldr	r2, [r3, #0]
 8022cbe:	4b15      	ldr	r3, [pc, #84]	; (8022d14 <prvInsertBlockIntoFreeList+0xb0>)
 8022cc0:	681b      	ldr	r3, [r3, #0]
 8022cc2:	429a      	cmp	r2, r3
 8022cc4:	d00d      	beq.n	8022ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	685a      	ldr	r2, [r3, #4]
 8022cca:	68fb      	ldr	r3, [r7, #12]
 8022ccc:	681b      	ldr	r3, [r3, #0]
 8022cce:	685b      	ldr	r3, [r3, #4]
 8022cd0:	441a      	add	r2, r3
 8022cd2:	687b      	ldr	r3, [r7, #4]
 8022cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8022cd6:	68fb      	ldr	r3, [r7, #12]
 8022cd8:	681b      	ldr	r3, [r3, #0]
 8022cda:	681a      	ldr	r2, [r3, #0]
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	601a      	str	r2, [r3, #0]
 8022ce0:	e008      	b.n	8022cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8022ce2:	4b0c      	ldr	r3, [pc, #48]	; (8022d14 <prvInsertBlockIntoFreeList+0xb0>)
 8022ce4:	681a      	ldr	r2, [r3, #0]
 8022ce6:	687b      	ldr	r3, [r7, #4]
 8022ce8:	601a      	str	r2, [r3, #0]
 8022cea:	e003      	b.n	8022cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8022cec:	68fb      	ldr	r3, [r7, #12]
 8022cee:	681a      	ldr	r2, [r3, #0]
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8022cf4:	68fa      	ldr	r2, [r7, #12]
 8022cf6:	687b      	ldr	r3, [r7, #4]
 8022cf8:	429a      	cmp	r2, r3
 8022cfa:	d002      	beq.n	8022d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8022cfc:	68fb      	ldr	r3, [r7, #12]
 8022cfe:	687a      	ldr	r2, [r7, #4]
 8022d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8022d02:	bf00      	nop
 8022d04:	3714      	adds	r7, #20
 8022d06:	46bd      	mov	sp, r7
 8022d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d0c:	4770      	bx	lr
 8022d0e:	bf00      	nop
 8022d10:	200114c8 	.word	0x200114c8
 8022d14:	200114d0 	.word	0x200114d0

08022d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022d18:	b580      	push	{r7, lr}
 8022d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022d1c:	2200      	movs	r2, #0
 8022d1e:	4912      	ldr	r1, [pc, #72]	; (8022d68 <MX_USB_DEVICE_Init+0x50>)
 8022d20:	4812      	ldr	r0, [pc, #72]	; (8022d6c <MX_USB_DEVICE_Init+0x54>)
 8022d22:	f7fb f93b 	bl	801df9c <USBD_Init>
 8022d26:	4603      	mov	r3, r0
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d001      	beq.n	8022d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022d2c:	f7f3 f86a 	bl	8015e04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022d30:	490f      	ldr	r1, [pc, #60]	; (8022d70 <MX_USB_DEVICE_Init+0x58>)
 8022d32:	480e      	ldr	r0, [pc, #56]	; (8022d6c <MX_USB_DEVICE_Init+0x54>)
 8022d34:	f7fb f962 	bl	801dffc <USBD_RegisterClass>
 8022d38:	4603      	mov	r3, r0
 8022d3a:	2b00      	cmp	r3, #0
 8022d3c:	d001      	beq.n	8022d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8022d3e:	f7f3 f861 	bl	8015e04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022d42:	490c      	ldr	r1, [pc, #48]	; (8022d74 <MX_USB_DEVICE_Init+0x5c>)
 8022d44:	4809      	ldr	r0, [pc, #36]	; (8022d6c <MX_USB_DEVICE_Init+0x54>)
 8022d46:	f7fb f899 	bl	801de7c <USBD_CDC_RegisterInterface>
 8022d4a:	4603      	mov	r3, r0
 8022d4c:	2b00      	cmp	r3, #0
 8022d4e:	d001      	beq.n	8022d54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022d50:	f7f3 f858 	bl	8015e04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022d54:	4805      	ldr	r0, [pc, #20]	; (8022d6c <MX_USB_DEVICE_Init+0x54>)
 8022d56:	f7fb f987 	bl	801e068 <USBD_Start>
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d001      	beq.n	8022d64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022d60:	f7f3 f850 	bl	8015e04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022d64:	bf00      	nop
 8022d66:	bd80      	pop	{r7, pc}
 8022d68:	20000fa8 	.word	0x20000fa8
 8022d6c:	200114e8 	.word	0x200114e8
 8022d70:	20000f10 	.word	0x20000f10
 8022d74:	20000f94 	.word	0x20000f94

08022d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022d78:	b580      	push	{r7, lr}
 8022d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022d7c:	2200      	movs	r2, #0
 8022d7e:	4905      	ldr	r1, [pc, #20]	; (8022d94 <CDC_Init_FS+0x1c>)
 8022d80:	4805      	ldr	r0, [pc, #20]	; (8022d98 <CDC_Init_FS+0x20>)
 8022d82:	f7fb f895 	bl	801deb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022d86:	4905      	ldr	r1, [pc, #20]	; (8022d9c <CDC_Init_FS+0x24>)
 8022d88:	4803      	ldr	r0, [pc, #12]	; (8022d98 <CDC_Init_FS+0x20>)
 8022d8a:	f7fb f8b3 	bl	801def4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022d8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022d90:	4618      	mov	r0, r3
 8022d92:	bd80      	pop	{r7, pc}
 8022d94:	20011fc4 	.word	0x20011fc4
 8022d98:	200114e8 	.word	0x200114e8
 8022d9c:	200117c4 	.word	0x200117c4

08022da0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022da0:	b480      	push	{r7}
 8022da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022da4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022da6:	4618      	mov	r0, r3
 8022da8:	46bd      	mov	sp, r7
 8022daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dae:	4770      	bx	lr

08022db0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022db0:	b480      	push	{r7}
 8022db2:	b083      	sub	sp, #12
 8022db4:	af00      	add	r7, sp, #0
 8022db6:	4603      	mov	r3, r0
 8022db8:	6039      	str	r1, [r7, #0]
 8022dba:	71fb      	strb	r3, [r7, #7]
 8022dbc:	4613      	mov	r3, r2
 8022dbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022dc0:	79fb      	ldrb	r3, [r7, #7]
 8022dc2:	2b23      	cmp	r3, #35	; 0x23
 8022dc4:	d84a      	bhi.n	8022e5c <CDC_Control_FS+0xac>
 8022dc6:	a201      	add	r2, pc, #4	; (adr r2, 8022dcc <CDC_Control_FS+0x1c>)
 8022dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022dcc:	08022e5d 	.word	0x08022e5d
 8022dd0:	08022e5d 	.word	0x08022e5d
 8022dd4:	08022e5d 	.word	0x08022e5d
 8022dd8:	08022e5d 	.word	0x08022e5d
 8022ddc:	08022e5d 	.word	0x08022e5d
 8022de0:	08022e5d 	.word	0x08022e5d
 8022de4:	08022e5d 	.word	0x08022e5d
 8022de8:	08022e5d 	.word	0x08022e5d
 8022dec:	08022e5d 	.word	0x08022e5d
 8022df0:	08022e5d 	.word	0x08022e5d
 8022df4:	08022e5d 	.word	0x08022e5d
 8022df8:	08022e5d 	.word	0x08022e5d
 8022dfc:	08022e5d 	.word	0x08022e5d
 8022e00:	08022e5d 	.word	0x08022e5d
 8022e04:	08022e5d 	.word	0x08022e5d
 8022e08:	08022e5d 	.word	0x08022e5d
 8022e0c:	08022e5d 	.word	0x08022e5d
 8022e10:	08022e5d 	.word	0x08022e5d
 8022e14:	08022e5d 	.word	0x08022e5d
 8022e18:	08022e5d 	.word	0x08022e5d
 8022e1c:	08022e5d 	.word	0x08022e5d
 8022e20:	08022e5d 	.word	0x08022e5d
 8022e24:	08022e5d 	.word	0x08022e5d
 8022e28:	08022e5d 	.word	0x08022e5d
 8022e2c:	08022e5d 	.word	0x08022e5d
 8022e30:	08022e5d 	.word	0x08022e5d
 8022e34:	08022e5d 	.word	0x08022e5d
 8022e38:	08022e5d 	.word	0x08022e5d
 8022e3c:	08022e5d 	.word	0x08022e5d
 8022e40:	08022e5d 	.word	0x08022e5d
 8022e44:	08022e5d 	.word	0x08022e5d
 8022e48:	08022e5d 	.word	0x08022e5d
 8022e4c:	08022e5d 	.word	0x08022e5d
 8022e50:	08022e5d 	.word	0x08022e5d
 8022e54:	08022e5d 	.word	0x08022e5d
 8022e58:	08022e5d 	.word	0x08022e5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022e5c:	bf00      	nop
  }

  return (USBD_OK);
 8022e5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022e60:	4618      	mov	r0, r3
 8022e62:	370c      	adds	r7, #12
 8022e64:	46bd      	mov	sp, r7
 8022e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e6a:	4770      	bx	lr

08022e6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b082      	sub	sp, #8
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	6078      	str	r0, [r7, #4]
 8022e74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022e76:	6879      	ldr	r1, [r7, #4]
 8022e78:	4805      	ldr	r0, [pc, #20]	; (8022e90 <CDC_Receive_FS+0x24>)
 8022e7a:	f7fb f83b 	bl	801def4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022e7e:	4804      	ldr	r0, [pc, #16]	; (8022e90 <CDC_Receive_FS+0x24>)
 8022e80:	f7fb f856 	bl	801df30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8022e84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022e86:	4618      	mov	r0, r3
 8022e88:	3708      	adds	r7, #8
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	bd80      	pop	{r7, pc}
 8022e8e:	bf00      	nop
 8022e90:	200114e8 	.word	0x200114e8

08022e94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8022e94:	b480      	push	{r7}
 8022e96:	b087      	sub	sp, #28
 8022e98:	af00      	add	r7, sp, #0
 8022e9a:	60f8      	str	r0, [r7, #12]
 8022e9c:	60b9      	str	r1, [r7, #8]
 8022e9e:	4613      	mov	r3, r2
 8022ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8022ea2:	2300      	movs	r3, #0
 8022ea4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8022ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022eaa:	4618      	mov	r0, r3
 8022eac:	371c      	adds	r7, #28
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb4:	4770      	bx	lr
	...

08022eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022eb8:	b480      	push	{r7}
 8022eba:	b083      	sub	sp, #12
 8022ebc:	af00      	add	r7, sp, #0
 8022ebe:	4603      	mov	r3, r0
 8022ec0:	6039      	str	r1, [r7, #0]
 8022ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022ec4:	683b      	ldr	r3, [r7, #0]
 8022ec6:	2212      	movs	r2, #18
 8022ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8022eca:	4b03      	ldr	r3, [pc, #12]	; (8022ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8022ecc:	4618      	mov	r0, r3
 8022ece:	370c      	adds	r7, #12
 8022ed0:	46bd      	mov	sp, r7
 8022ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ed6:	4770      	bx	lr
 8022ed8:	20000fc4 	.word	0x20000fc4

08022edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022edc:	b480      	push	{r7}
 8022ede:	b083      	sub	sp, #12
 8022ee0:	af00      	add	r7, sp, #0
 8022ee2:	4603      	mov	r3, r0
 8022ee4:	6039      	str	r1, [r7, #0]
 8022ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022ee8:	683b      	ldr	r3, [r7, #0]
 8022eea:	2204      	movs	r2, #4
 8022eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022eee:	4b03      	ldr	r3, [pc, #12]	; (8022efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022ef0:	4618      	mov	r0, r3
 8022ef2:	370c      	adds	r7, #12
 8022ef4:	46bd      	mov	sp, r7
 8022ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022efa:	4770      	bx	lr
 8022efc:	20000fd8 	.word	0x20000fd8

08022f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022f00:	b580      	push	{r7, lr}
 8022f02:	b082      	sub	sp, #8
 8022f04:	af00      	add	r7, sp, #0
 8022f06:	4603      	mov	r3, r0
 8022f08:	6039      	str	r1, [r7, #0]
 8022f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022f0c:	79fb      	ldrb	r3, [r7, #7]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d105      	bne.n	8022f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022f12:	683a      	ldr	r2, [r7, #0]
 8022f14:	4907      	ldr	r1, [pc, #28]	; (8022f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8022f16:	4808      	ldr	r0, [pc, #32]	; (8022f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8022f18:	f7fc fa58 	bl	801f3cc <USBD_GetString>
 8022f1c:	e004      	b.n	8022f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022f1e:	683a      	ldr	r2, [r7, #0]
 8022f20:	4904      	ldr	r1, [pc, #16]	; (8022f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8022f22:	4805      	ldr	r0, [pc, #20]	; (8022f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8022f24:	f7fc fa52 	bl	801f3cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8022f28:	4b02      	ldr	r3, [pc, #8]	; (8022f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8022f2a:	4618      	mov	r0, r3
 8022f2c:	3708      	adds	r7, #8
 8022f2e:	46bd      	mov	sp, r7
 8022f30:	bd80      	pop	{r7, pc}
 8022f32:	bf00      	nop
 8022f34:	200127c4 	.word	0x200127c4
 8022f38:	0802ee90 	.word	0x0802ee90

08022f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022f3c:	b580      	push	{r7, lr}
 8022f3e:	b082      	sub	sp, #8
 8022f40:	af00      	add	r7, sp, #0
 8022f42:	4603      	mov	r3, r0
 8022f44:	6039      	str	r1, [r7, #0]
 8022f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022f48:	683a      	ldr	r2, [r7, #0]
 8022f4a:	4904      	ldr	r1, [pc, #16]	; (8022f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022f4c:	4804      	ldr	r0, [pc, #16]	; (8022f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022f4e:	f7fc fa3d 	bl	801f3cc <USBD_GetString>
  return USBD_StrDesc;
 8022f52:	4b02      	ldr	r3, [pc, #8]	; (8022f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022f54:	4618      	mov	r0, r3
 8022f56:	3708      	adds	r7, #8
 8022f58:	46bd      	mov	sp, r7
 8022f5a:	bd80      	pop	{r7, pc}
 8022f5c:	200127c4 	.word	0x200127c4
 8022f60:	0802eea8 	.word	0x0802eea8

08022f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022f64:	b580      	push	{r7, lr}
 8022f66:	b082      	sub	sp, #8
 8022f68:	af00      	add	r7, sp, #0
 8022f6a:	4603      	mov	r3, r0
 8022f6c:	6039      	str	r1, [r7, #0]
 8022f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022f70:	683b      	ldr	r3, [r7, #0]
 8022f72:	221a      	movs	r2, #26
 8022f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022f76:	f000 f843 	bl	8023000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022f7a:	4b02      	ldr	r3, [pc, #8]	; (8022f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	3708      	adds	r7, #8
 8022f80:	46bd      	mov	sp, r7
 8022f82:	bd80      	pop	{r7, pc}
 8022f84:	20000fdc 	.word	0x20000fdc

08022f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022f88:	b580      	push	{r7, lr}
 8022f8a:	b082      	sub	sp, #8
 8022f8c:	af00      	add	r7, sp, #0
 8022f8e:	4603      	mov	r3, r0
 8022f90:	6039      	str	r1, [r7, #0]
 8022f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022f94:	79fb      	ldrb	r3, [r7, #7]
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	d105      	bne.n	8022fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022f9a:	683a      	ldr	r2, [r7, #0]
 8022f9c:	4907      	ldr	r1, [pc, #28]	; (8022fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8022f9e:	4808      	ldr	r0, [pc, #32]	; (8022fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022fa0:	f7fc fa14 	bl	801f3cc <USBD_GetString>
 8022fa4:	e004      	b.n	8022fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022fa6:	683a      	ldr	r2, [r7, #0]
 8022fa8:	4904      	ldr	r1, [pc, #16]	; (8022fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8022faa:	4805      	ldr	r0, [pc, #20]	; (8022fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022fac:	f7fc fa0e 	bl	801f3cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8022fb0:	4b02      	ldr	r3, [pc, #8]	; (8022fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8022fb2:	4618      	mov	r0, r3
 8022fb4:	3708      	adds	r7, #8
 8022fb6:	46bd      	mov	sp, r7
 8022fb8:	bd80      	pop	{r7, pc}
 8022fba:	bf00      	nop
 8022fbc:	200127c4 	.word	0x200127c4
 8022fc0:	0802eebc 	.word	0x0802eebc

08022fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022fc4:	b580      	push	{r7, lr}
 8022fc6:	b082      	sub	sp, #8
 8022fc8:	af00      	add	r7, sp, #0
 8022fca:	4603      	mov	r3, r0
 8022fcc:	6039      	str	r1, [r7, #0]
 8022fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022fd0:	79fb      	ldrb	r3, [r7, #7]
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d105      	bne.n	8022fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022fd6:	683a      	ldr	r2, [r7, #0]
 8022fd8:	4907      	ldr	r1, [pc, #28]	; (8022ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8022fda:	4808      	ldr	r0, [pc, #32]	; (8022ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022fdc:	f7fc f9f6 	bl	801f3cc <USBD_GetString>
 8022fe0:	e004      	b.n	8022fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022fe2:	683a      	ldr	r2, [r7, #0]
 8022fe4:	4904      	ldr	r1, [pc, #16]	; (8022ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8022fe6:	4805      	ldr	r0, [pc, #20]	; (8022ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8022fe8:	f7fc f9f0 	bl	801f3cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8022fec:	4b02      	ldr	r3, [pc, #8]	; (8022ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8022fee:	4618      	mov	r0, r3
 8022ff0:	3708      	adds	r7, #8
 8022ff2:	46bd      	mov	sp, r7
 8022ff4:	bd80      	pop	{r7, pc}
 8022ff6:	bf00      	nop
 8022ff8:	200127c4 	.word	0x200127c4
 8022ffc:	0802eec8 	.word	0x0802eec8

08023000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023000:	b580      	push	{r7, lr}
 8023002:	b084      	sub	sp, #16
 8023004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8023006:	4b0f      	ldr	r3, [pc, #60]	; (8023044 <Get_SerialNum+0x44>)
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802300c:	4b0e      	ldr	r3, [pc, #56]	; (8023048 <Get_SerialNum+0x48>)
 802300e:	681b      	ldr	r3, [r3, #0]
 8023010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8023012:	4b0e      	ldr	r3, [pc, #56]	; (802304c <Get_SerialNum+0x4c>)
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8023018:	68fa      	ldr	r2, [r7, #12]
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	4413      	add	r3, r2
 802301e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8023020:	68fb      	ldr	r3, [r7, #12]
 8023022:	2b00      	cmp	r3, #0
 8023024:	d009      	beq.n	802303a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8023026:	2208      	movs	r2, #8
 8023028:	4909      	ldr	r1, [pc, #36]	; (8023050 <Get_SerialNum+0x50>)
 802302a:	68f8      	ldr	r0, [r7, #12]
 802302c:	f000 f814 	bl	8023058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8023030:	2204      	movs	r2, #4
 8023032:	4908      	ldr	r1, [pc, #32]	; (8023054 <Get_SerialNum+0x54>)
 8023034:	68b8      	ldr	r0, [r7, #8]
 8023036:	f000 f80f 	bl	8023058 <IntToUnicode>
  }
}
 802303a:	bf00      	nop
 802303c:	3710      	adds	r7, #16
 802303e:	46bd      	mov	sp, r7
 8023040:	bd80      	pop	{r7, pc}
 8023042:	bf00      	nop
 8023044:	1fff7a10 	.word	0x1fff7a10
 8023048:	1fff7a14 	.word	0x1fff7a14
 802304c:	1fff7a18 	.word	0x1fff7a18
 8023050:	20000fde 	.word	0x20000fde
 8023054:	20000fee 	.word	0x20000fee

08023058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8023058:	b480      	push	{r7}
 802305a:	b087      	sub	sp, #28
 802305c:	af00      	add	r7, sp, #0
 802305e:	60f8      	str	r0, [r7, #12]
 8023060:	60b9      	str	r1, [r7, #8]
 8023062:	4613      	mov	r3, r2
 8023064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8023066:	2300      	movs	r3, #0
 8023068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802306a:	2300      	movs	r3, #0
 802306c:	75fb      	strb	r3, [r7, #23]
 802306e:	e027      	b.n	80230c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8023070:	68fb      	ldr	r3, [r7, #12]
 8023072:	0f1b      	lsrs	r3, r3, #28
 8023074:	2b09      	cmp	r3, #9
 8023076:	d80b      	bhi.n	8023090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8023078:	68fb      	ldr	r3, [r7, #12]
 802307a:	0f1b      	lsrs	r3, r3, #28
 802307c:	b2da      	uxtb	r2, r3
 802307e:	7dfb      	ldrb	r3, [r7, #23]
 8023080:	005b      	lsls	r3, r3, #1
 8023082:	4619      	mov	r1, r3
 8023084:	68bb      	ldr	r3, [r7, #8]
 8023086:	440b      	add	r3, r1
 8023088:	3230      	adds	r2, #48	; 0x30
 802308a:	b2d2      	uxtb	r2, r2
 802308c:	701a      	strb	r2, [r3, #0]
 802308e:	e00a      	b.n	80230a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023090:	68fb      	ldr	r3, [r7, #12]
 8023092:	0f1b      	lsrs	r3, r3, #28
 8023094:	b2da      	uxtb	r2, r3
 8023096:	7dfb      	ldrb	r3, [r7, #23]
 8023098:	005b      	lsls	r3, r3, #1
 802309a:	4619      	mov	r1, r3
 802309c:	68bb      	ldr	r3, [r7, #8]
 802309e:	440b      	add	r3, r1
 80230a0:	3237      	adds	r2, #55	; 0x37
 80230a2:	b2d2      	uxtb	r2, r2
 80230a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80230a6:	68fb      	ldr	r3, [r7, #12]
 80230a8:	011b      	lsls	r3, r3, #4
 80230aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80230ac:	7dfb      	ldrb	r3, [r7, #23]
 80230ae:	005b      	lsls	r3, r3, #1
 80230b0:	3301      	adds	r3, #1
 80230b2:	68ba      	ldr	r2, [r7, #8]
 80230b4:	4413      	add	r3, r2
 80230b6:	2200      	movs	r2, #0
 80230b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80230ba:	7dfb      	ldrb	r3, [r7, #23]
 80230bc:	3301      	adds	r3, #1
 80230be:	75fb      	strb	r3, [r7, #23]
 80230c0:	7dfa      	ldrb	r2, [r7, #23]
 80230c2:	79fb      	ldrb	r3, [r7, #7]
 80230c4:	429a      	cmp	r2, r3
 80230c6:	d3d3      	bcc.n	8023070 <IntToUnicode+0x18>
  }
}
 80230c8:	bf00      	nop
 80230ca:	bf00      	nop
 80230cc:	371c      	adds	r7, #28
 80230ce:	46bd      	mov	sp, r7
 80230d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230d4:	4770      	bx	lr
	...

080230d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80230d8:	b580      	push	{r7, lr}
 80230da:	b08a      	sub	sp, #40	; 0x28
 80230dc:	af00      	add	r7, sp, #0
 80230de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80230e0:	f107 0314 	add.w	r3, r7, #20
 80230e4:	2200      	movs	r2, #0
 80230e6:	601a      	str	r2, [r3, #0]
 80230e8:	605a      	str	r2, [r3, #4]
 80230ea:	609a      	str	r2, [r3, #8]
 80230ec:	60da      	str	r2, [r3, #12]
 80230ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80230f8:	d13a      	bne.n	8023170 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80230fa:	2300      	movs	r3, #0
 80230fc:	613b      	str	r3, [r7, #16]
 80230fe:	4b1e      	ldr	r3, [pc, #120]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 8023100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023102:	4a1d      	ldr	r2, [pc, #116]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 8023104:	f043 0301 	orr.w	r3, r3, #1
 8023108:	6313      	str	r3, [r2, #48]	; 0x30
 802310a:	4b1b      	ldr	r3, [pc, #108]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 802310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802310e:	f003 0301 	and.w	r3, r3, #1
 8023112:	613b      	str	r3, [r7, #16]
 8023114:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8023116:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802311c:	2302      	movs	r3, #2
 802311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023120:	2300      	movs	r3, #0
 8023122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023124:	2303      	movs	r3, #3
 8023126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023128:	230a      	movs	r3, #10
 802312a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802312c:	f107 0314 	add.w	r3, r7, #20
 8023130:	4619      	mov	r1, r3
 8023132:	4812      	ldr	r0, [pc, #72]	; (802317c <HAL_PCD_MspInit+0xa4>)
 8023134:	f7f4 fcfe 	bl	8017b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023138:	4b0f      	ldr	r3, [pc, #60]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 802313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802313c:	4a0e      	ldr	r2, [pc, #56]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 802313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023142:	6353      	str	r3, [r2, #52]	; 0x34
 8023144:	2300      	movs	r3, #0
 8023146:	60fb      	str	r3, [r7, #12]
 8023148:	4b0b      	ldr	r3, [pc, #44]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 802314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802314c:	4a0a      	ldr	r2, [pc, #40]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 802314e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023152:	6453      	str	r3, [r2, #68]	; 0x44
 8023154:	4b08      	ldr	r3, [pc, #32]	; (8023178 <HAL_PCD_MspInit+0xa0>)
 8023156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802315c:	60fb      	str	r3, [r7, #12]
 802315e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8023160:	2200      	movs	r2, #0
 8023162:	2105      	movs	r1, #5
 8023164:	2043      	movs	r0, #67	; 0x43
 8023166:	f7f4 f89e 	bl	80172a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802316a:	2043      	movs	r0, #67	; 0x43
 802316c:	f7f4 f8b7 	bl	80172de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8023170:	bf00      	nop
 8023172:	3728      	adds	r7, #40	; 0x28
 8023174:	46bd      	mov	sp, r7
 8023176:	bd80      	pop	{r7, pc}
 8023178:	40023800 	.word	0x40023800
 802317c:	40020000 	.word	0x40020000

08023180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023180:	b580      	push	{r7, lr}
 8023182:	b082      	sub	sp, #8
 8023184:	af00      	add	r7, sp, #0
 8023186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8023194:	4619      	mov	r1, r3
 8023196:	4610      	mov	r0, r2
 8023198:	f7fa ffb3 	bl	801e102 <USBD_LL_SetupStage>
}
 802319c:	bf00      	nop
 802319e:	3708      	adds	r7, #8
 80231a0:	46bd      	mov	sp, r7
 80231a2:	bd80      	pop	{r7, pc}

080231a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80231a4:	b580      	push	{r7, lr}
 80231a6:	b082      	sub	sp, #8
 80231a8:	af00      	add	r7, sp, #0
 80231aa:	6078      	str	r0, [r7, #4]
 80231ac:	460b      	mov	r3, r1
 80231ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80231b0:	687b      	ldr	r3, [r7, #4]
 80231b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80231b6:	78fa      	ldrb	r2, [r7, #3]
 80231b8:	6879      	ldr	r1, [r7, #4]
 80231ba:	4613      	mov	r3, r2
 80231bc:	00db      	lsls	r3, r3, #3
 80231be:	4413      	add	r3, r2
 80231c0:	009b      	lsls	r3, r3, #2
 80231c2:	440b      	add	r3, r1
 80231c4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80231c8:	681a      	ldr	r2, [r3, #0]
 80231ca:	78fb      	ldrb	r3, [r7, #3]
 80231cc:	4619      	mov	r1, r3
 80231ce:	f7fa ffed 	bl	801e1ac <USBD_LL_DataOutStage>
}
 80231d2:	bf00      	nop
 80231d4:	3708      	adds	r7, #8
 80231d6:	46bd      	mov	sp, r7
 80231d8:	bd80      	pop	{r7, pc}

080231da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80231da:	b580      	push	{r7, lr}
 80231dc:	b082      	sub	sp, #8
 80231de:	af00      	add	r7, sp, #0
 80231e0:	6078      	str	r0, [r7, #4]
 80231e2:	460b      	mov	r3, r1
 80231e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80231ec:	78fa      	ldrb	r2, [r7, #3]
 80231ee:	6879      	ldr	r1, [r7, #4]
 80231f0:	4613      	mov	r3, r2
 80231f2:	00db      	lsls	r3, r3, #3
 80231f4:	4413      	add	r3, r2
 80231f6:	009b      	lsls	r3, r3, #2
 80231f8:	440b      	add	r3, r1
 80231fa:	3320      	adds	r3, #32
 80231fc:	681a      	ldr	r2, [r3, #0]
 80231fe:	78fb      	ldrb	r3, [r7, #3]
 8023200:	4619      	mov	r1, r3
 8023202:	f7fb f886 	bl	801e312 <USBD_LL_DataInStage>
}
 8023206:	bf00      	nop
 8023208:	3708      	adds	r7, #8
 802320a:	46bd      	mov	sp, r7
 802320c:	bd80      	pop	{r7, pc}

0802320e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802320e:	b580      	push	{r7, lr}
 8023210:	b082      	sub	sp, #8
 8023212:	af00      	add	r7, sp, #0
 8023214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023216:	687b      	ldr	r3, [r7, #4]
 8023218:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802321c:	4618      	mov	r0, r3
 802321e:	f7fb f9c0 	bl	801e5a2 <USBD_LL_SOF>
}
 8023222:	bf00      	nop
 8023224:	3708      	adds	r7, #8
 8023226:	46bd      	mov	sp, r7
 8023228:	bd80      	pop	{r7, pc}

0802322a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802322a:	b580      	push	{r7, lr}
 802322c:	b084      	sub	sp, #16
 802322e:	af00      	add	r7, sp, #0
 8023230:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023232:	2301      	movs	r3, #1
 8023234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	79db      	ldrb	r3, [r3, #7]
 802323a:	2b00      	cmp	r3, #0
 802323c:	d102      	bne.n	8023244 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802323e:	2300      	movs	r3, #0
 8023240:	73fb      	strb	r3, [r7, #15]
 8023242:	e008      	b.n	8023256 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	79db      	ldrb	r3, [r3, #7]
 8023248:	2b02      	cmp	r3, #2
 802324a:	d102      	bne.n	8023252 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 802324c:	2301      	movs	r3, #1
 802324e:	73fb      	strb	r3, [r7, #15]
 8023250:	e001      	b.n	8023256 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8023252:	f7f2 fdd7 	bl	8015e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023256:	687b      	ldr	r3, [r7, #4]
 8023258:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802325c:	7bfa      	ldrb	r2, [r7, #15]
 802325e:	4611      	mov	r1, r2
 8023260:	4618      	mov	r0, r3
 8023262:	f7fb f95a 	bl	801e51a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802326c:	4618      	mov	r0, r3
 802326e:	f7fb f902 	bl	801e476 <USBD_LL_Reset>
}
 8023272:	bf00      	nop
 8023274:	3710      	adds	r7, #16
 8023276:	46bd      	mov	sp, r7
 8023278:	bd80      	pop	{r7, pc}
	...

0802327c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802327c:	b580      	push	{r7, lr}
 802327e:	b082      	sub	sp, #8
 8023280:	af00      	add	r7, sp, #0
 8023282:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023284:	687b      	ldr	r3, [r7, #4]
 8023286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802328a:	4618      	mov	r0, r3
 802328c:	f7fb f955 	bl	801e53a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023290:	687b      	ldr	r3, [r7, #4]
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023298:	681b      	ldr	r3, [r3, #0]
 802329a:	687a      	ldr	r2, [r7, #4]
 802329c:	6812      	ldr	r2, [r2, #0]
 802329e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80232a2:	f043 0301 	orr.w	r3, r3, #1
 80232a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	7adb      	ldrb	r3, [r3, #11]
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d005      	beq.n	80232bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80232b0:	4b04      	ldr	r3, [pc, #16]	; (80232c4 <HAL_PCD_SuspendCallback+0x48>)
 80232b2:	691b      	ldr	r3, [r3, #16]
 80232b4:	4a03      	ldr	r2, [pc, #12]	; (80232c4 <HAL_PCD_SuspendCallback+0x48>)
 80232b6:	f043 0306 	orr.w	r3, r3, #6
 80232ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80232bc:	bf00      	nop
 80232be:	3708      	adds	r7, #8
 80232c0:	46bd      	mov	sp, r7
 80232c2:	bd80      	pop	{r7, pc}
 80232c4:	e000ed00 	.word	0xe000ed00

080232c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80232c8:	b580      	push	{r7, lr}
 80232ca:	b082      	sub	sp, #8
 80232cc:	af00      	add	r7, sp, #0
 80232ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80232d6:	4618      	mov	r0, r3
 80232d8:	f7fb f94b 	bl	801e572 <USBD_LL_Resume>
}
 80232dc:	bf00      	nop
 80232de:	3708      	adds	r7, #8
 80232e0:	46bd      	mov	sp, r7
 80232e2:	bd80      	pop	{r7, pc}

080232e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80232e4:	b580      	push	{r7, lr}
 80232e6:	b082      	sub	sp, #8
 80232e8:	af00      	add	r7, sp, #0
 80232ea:	6078      	str	r0, [r7, #4]
 80232ec:	460b      	mov	r3, r1
 80232ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80232f0:	687b      	ldr	r3, [r7, #4]
 80232f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80232f6:	78fa      	ldrb	r2, [r7, #3]
 80232f8:	4611      	mov	r1, r2
 80232fa:	4618      	mov	r0, r3
 80232fc:	f7fb f9a3 	bl	801e646 <USBD_LL_IsoOUTIncomplete>
}
 8023300:	bf00      	nop
 8023302:	3708      	adds	r7, #8
 8023304:	46bd      	mov	sp, r7
 8023306:	bd80      	pop	{r7, pc}

08023308 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023308:	b580      	push	{r7, lr}
 802330a:	b082      	sub	sp, #8
 802330c:	af00      	add	r7, sp, #0
 802330e:	6078      	str	r0, [r7, #4]
 8023310:	460b      	mov	r3, r1
 8023312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802331a:	78fa      	ldrb	r2, [r7, #3]
 802331c:	4611      	mov	r1, r2
 802331e:	4618      	mov	r0, r3
 8023320:	f7fb f95f 	bl	801e5e2 <USBD_LL_IsoINIncomplete>
}
 8023324:	bf00      	nop
 8023326:	3708      	adds	r7, #8
 8023328:	46bd      	mov	sp, r7
 802332a:	bd80      	pop	{r7, pc}

0802332c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802332c:	b580      	push	{r7, lr}
 802332e:	b082      	sub	sp, #8
 8023330:	af00      	add	r7, sp, #0
 8023332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 802333a:	4618      	mov	r0, r3
 802333c:	f7fb f9b5 	bl	801e6aa <USBD_LL_DevConnected>
}
 8023340:	bf00      	nop
 8023342:	3708      	adds	r7, #8
 8023344:	46bd      	mov	sp, r7
 8023346:	bd80      	pop	{r7, pc}

08023348 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023348:	b580      	push	{r7, lr}
 802334a:	b082      	sub	sp, #8
 802334c:	af00      	add	r7, sp, #0
 802334e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8023356:	4618      	mov	r0, r3
 8023358:	f7fb f9b2 	bl	801e6c0 <USBD_LL_DevDisconnected>
}
 802335c:	bf00      	nop
 802335e:	3708      	adds	r7, #8
 8023360:	46bd      	mov	sp, r7
 8023362:	bd80      	pop	{r7, pc}

08023364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8023364:	b580      	push	{r7, lr}
 8023366:	b082      	sub	sp, #8
 8023368:	af00      	add	r7, sp, #0
 802336a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	2b00      	cmp	r3, #0
 8023372:	d13c      	bne.n	80233ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8023374:	4a20      	ldr	r2, [pc, #128]	; (80233f8 <USBD_LL_Init+0x94>)
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	4a1e      	ldr	r2, [pc, #120]	; (80233f8 <USBD_LL_Init+0x94>)
 8023380:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8023384:	4b1c      	ldr	r3, [pc, #112]	; (80233f8 <USBD_LL_Init+0x94>)
 8023386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802338a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 802338c:	4b1a      	ldr	r3, [pc, #104]	; (80233f8 <USBD_LL_Init+0x94>)
 802338e:	2204      	movs	r2, #4
 8023390:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8023392:	4b19      	ldr	r3, [pc, #100]	; (80233f8 <USBD_LL_Init+0x94>)
 8023394:	2202      	movs	r2, #2
 8023396:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8023398:	4b17      	ldr	r3, [pc, #92]	; (80233f8 <USBD_LL_Init+0x94>)
 802339a:	2200      	movs	r2, #0
 802339c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802339e:	4b16      	ldr	r3, [pc, #88]	; (80233f8 <USBD_LL_Init+0x94>)
 80233a0:	2202      	movs	r2, #2
 80233a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80233a4:	4b14      	ldr	r3, [pc, #80]	; (80233f8 <USBD_LL_Init+0x94>)
 80233a6:	2200      	movs	r2, #0
 80233a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80233aa:	4b13      	ldr	r3, [pc, #76]	; (80233f8 <USBD_LL_Init+0x94>)
 80233ac:	2200      	movs	r2, #0
 80233ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80233b0:	4b11      	ldr	r3, [pc, #68]	; (80233f8 <USBD_LL_Init+0x94>)
 80233b2:	2200      	movs	r2, #0
 80233b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80233b6:	4b10      	ldr	r3, [pc, #64]	; (80233f8 <USBD_LL_Init+0x94>)
 80233b8:	2200      	movs	r2, #0
 80233ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80233bc:	4b0e      	ldr	r3, [pc, #56]	; (80233f8 <USBD_LL_Init+0x94>)
 80233be:	2200      	movs	r2, #0
 80233c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80233c2:	480d      	ldr	r0, [pc, #52]	; (80233f8 <USBD_LL_Init+0x94>)
 80233c4:	f7f4 fd6b 	bl	8017e9e <HAL_PCD_Init>
 80233c8:	4603      	mov	r3, r0
 80233ca:	2b00      	cmp	r3, #0
 80233cc:	d001      	beq.n	80233d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80233ce:	f7f2 fd19 	bl	8015e04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80233d2:	2180      	movs	r1, #128	; 0x80
 80233d4:	4808      	ldr	r0, [pc, #32]	; (80233f8 <USBD_LL_Init+0x94>)
 80233d6:	f7f5 ff96 	bl	8019306 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80233da:	2240      	movs	r2, #64	; 0x40
 80233dc:	2100      	movs	r1, #0
 80233de:	4806      	ldr	r0, [pc, #24]	; (80233f8 <USBD_LL_Init+0x94>)
 80233e0:	f7f5 ff4a 	bl	8019278 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80233e4:	2280      	movs	r2, #128	; 0x80
 80233e6:	2101      	movs	r1, #1
 80233e8:	4803      	ldr	r0, [pc, #12]	; (80233f8 <USBD_LL_Init+0x94>)
 80233ea:	f7f5 ff45 	bl	8019278 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80233ee:	2300      	movs	r3, #0
}
 80233f0:	4618      	mov	r0, r3
 80233f2:	3708      	adds	r7, #8
 80233f4:	46bd      	mov	sp, r7
 80233f6:	bd80      	pop	{r7, pc}
 80233f8:	200129c4 	.word	0x200129c4

080233fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80233fc:	b580      	push	{r7, lr}
 80233fe:	b084      	sub	sp, #16
 8023400:	af00      	add	r7, sp, #0
 8023402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023404:	2300      	movs	r3, #0
 8023406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023408:	2300      	movs	r3, #0
 802340a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8023412:	4618      	mov	r0, r3
 8023414:	f7f4 fe52 	bl	80180bc <HAL_PCD_Start>
 8023418:	4603      	mov	r3, r0
 802341a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802341c:	7bfb      	ldrb	r3, [r7, #15]
 802341e:	4618      	mov	r0, r3
 8023420:	f000 f942 	bl	80236a8 <USBD_Get_USB_Status>
 8023424:	4603      	mov	r3, r0
 8023426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023428:	7bbb      	ldrb	r3, [r7, #14]
}
 802342a:	4618      	mov	r0, r3
 802342c:	3710      	adds	r7, #16
 802342e:	46bd      	mov	sp, r7
 8023430:	bd80      	pop	{r7, pc}

08023432 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8023432:	b580      	push	{r7, lr}
 8023434:	b084      	sub	sp, #16
 8023436:	af00      	add	r7, sp, #0
 8023438:	6078      	str	r0, [r7, #4]
 802343a:	4608      	mov	r0, r1
 802343c:	4611      	mov	r1, r2
 802343e:	461a      	mov	r2, r3
 8023440:	4603      	mov	r3, r0
 8023442:	70fb      	strb	r3, [r7, #3]
 8023444:	460b      	mov	r3, r1
 8023446:	70bb      	strb	r3, [r7, #2]
 8023448:	4613      	mov	r3, r2
 802344a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802344c:	2300      	movs	r3, #0
 802344e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023450:	2300      	movs	r3, #0
 8023452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802345a:	78bb      	ldrb	r3, [r7, #2]
 802345c:	883a      	ldrh	r2, [r7, #0]
 802345e:	78f9      	ldrb	r1, [r7, #3]
 8023460:	f7f5 fb26 	bl	8018ab0 <HAL_PCD_EP_Open>
 8023464:	4603      	mov	r3, r0
 8023466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023468:	7bfb      	ldrb	r3, [r7, #15]
 802346a:	4618      	mov	r0, r3
 802346c:	f000 f91c 	bl	80236a8 <USBD_Get_USB_Status>
 8023470:	4603      	mov	r3, r0
 8023472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023474:	7bbb      	ldrb	r3, [r7, #14]
}
 8023476:	4618      	mov	r0, r3
 8023478:	3710      	adds	r7, #16
 802347a:	46bd      	mov	sp, r7
 802347c:	bd80      	pop	{r7, pc}

0802347e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802347e:	b580      	push	{r7, lr}
 8023480:	b084      	sub	sp, #16
 8023482:	af00      	add	r7, sp, #0
 8023484:	6078      	str	r0, [r7, #4]
 8023486:	460b      	mov	r3, r1
 8023488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802348a:	2300      	movs	r3, #0
 802348c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802348e:	2300      	movs	r3, #0
 8023490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023492:	687b      	ldr	r3, [r7, #4]
 8023494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8023498:	78fa      	ldrb	r2, [r7, #3]
 802349a:	4611      	mov	r1, r2
 802349c:	4618      	mov	r0, r3
 802349e:	f7f5 fb6f 	bl	8018b80 <HAL_PCD_EP_Close>
 80234a2:	4603      	mov	r3, r0
 80234a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80234a6:	7bfb      	ldrb	r3, [r7, #15]
 80234a8:	4618      	mov	r0, r3
 80234aa:	f000 f8fd 	bl	80236a8 <USBD_Get_USB_Status>
 80234ae:	4603      	mov	r3, r0
 80234b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80234b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80234b4:	4618      	mov	r0, r3
 80234b6:	3710      	adds	r7, #16
 80234b8:	46bd      	mov	sp, r7
 80234ba:	bd80      	pop	{r7, pc}

080234bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80234bc:	b580      	push	{r7, lr}
 80234be:	b084      	sub	sp, #16
 80234c0:	af00      	add	r7, sp, #0
 80234c2:	6078      	str	r0, [r7, #4]
 80234c4:	460b      	mov	r3, r1
 80234c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80234c8:	2300      	movs	r3, #0
 80234ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80234cc:	2300      	movs	r3, #0
 80234ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80234d0:	687b      	ldr	r3, [r7, #4]
 80234d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80234d6:	78fa      	ldrb	r2, [r7, #3]
 80234d8:	4611      	mov	r1, r2
 80234da:	4618      	mov	r0, r3
 80234dc:	f7f5 fc27 	bl	8018d2e <HAL_PCD_EP_SetStall>
 80234e0:	4603      	mov	r3, r0
 80234e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80234e4:	7bfb      	ldrb	r3, [r7, #15]
 80234e6:	4618      	mov	r0, r3
 80234e8:	f000 f8de 	bl	80236a8 <USBD_Get_USB_Status>
 80234ec:	4603      	mov	r3, r0
 80234ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80234f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80234f2:	4618      	mov	r0, r3
 80234f4:	3710      	adds	r7, #16
 80234f6:	46bd      	mov	sp, r7
 80234f8:	bd80      	pop	{r7, pc}

080234fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80234fa:	b580      	push	{r7, lr}
 80234fc:	b084      	sub	sp, #16
 80234fe:	af00      	add	r7, sp, #0
 8023500:	6078      	str	r0, [r7, #4]
 8023502:	460b      	mov	r3, r1
 8023504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023506:	2300      	movs	r3, #0
 8023508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802350a:	2300      	movs	r3, #0
 802350c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8023514:	78fa      	ldrb	r2, [r7, #3]
 8023516:	4611      	mov	r1, r2
 8023518:	4618      	mov	r0, r3
 802351a:	f7f5 fc6b 	bl	8018df4 <HAL_PCD_EP_ClrStall>
 802351e:	4603      	mov	r3, r0
 8023520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023522:	7bfb      	ldrb	r3, [r7, #15]
 8023524:	4618      	mov	r0, r3
 8023526:	f000 f8bf 	bl	80236a8 <USBD_Get_USB_Status>
 802352a:	4603      	mov	r3, r0
 802352c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802352e:	7bbb      	ldrb	r3, [r7, #14]
}
 8023530:	4618      	mov	r0, r3
 8023532:	3710      	adds	r7, #16
 8023534:	46bd      	mov	sp, r7
 8023536:	bd80      	pop	{r7, pc}

08023538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023538:	b480      	push	{r7}
 802353a:	b085      	sub	sp, #20
 802353c:	af00      	add	r7, sp, #0
 802353e:	6078      	str	r0, [r7, #4]
 8023540:	460b      	mov	r3, r1
 8023542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023544:	687b      	ldr	r3, [r7, #4]
 8023546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802354a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802354c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8023550:	2b00      	cmp	r3, #0
 8023552:	da0b      	bge.n	802356c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023554:	78fb      	ldrb	r3, [r7, #3]
 8023556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802355a:	68f9      	ldr	r1, [r7, #12]
 802355c:	4613      	mov	r3, r2
 802355e:	00db      	lsls	r3, r3, #3
 8023560:	4413      	add	r3, r2
 8023562:	009b      	lsls	r3, r3, #2
 8023564:	440b      	add	r3, r1
 8023566:	3316      	adds	r3, #22
 8023568:	781b      	ldrb	r3, [r3, #0]
 802356a:	e00b      	b.n	8023584 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802356c:	78fb      	ldrb	r3, [r7, #3]
 802356e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8023572:	68f9      	ldr	r1, [r7, #12]
 8023574:	4613      	mov	r3, r2
 8023576:	00db      	lsls	r3, r3, #3
 8023578:	4413      	add	r3, r2
 802357a:	009b      	lsls	r3, r3, #2
 802357c:	440b      	add	r3, r1
 802357e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8023582:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023584:	4618      	mov	r0, r3
 8023586:	3714      	adds	r7, #20
 8023588:	46bd      	mov	sp, r7
 802358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802358e:	4770      	bx	lr

08023590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8023590:	b580      	push	{r7, lr}
 8023592:	b084      	sub	sp, #16
 8023594:	af00      	add	r7, sp, #0
 8023596:	6078      	str	r0, [r7, #4]
 8023598:	460b      	mov	r3, r1
 802359a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802359c:	2300      	movs	r3, #0
 802359e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80235a0:	2300      	movs	r3, #0
 80235a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80235aa:	78fa      	ldrb	r2, [r7, #3]
 80235ac:	4611      	mov	r1, r2
 80235ae:	4618      	mov	r0, r3
 80235b0:	f7f5 fa5a 	bl	8018a68 <HAL_PCD_SetAddress>
 80235b4:	4603      	mov	r3, r0
 80235b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80235b8:	7bfb      	ldrb	r3, [r7, #15]
 80235ba:	4618      	mov	r0, r3
 80235bc:	f000 f874 	bl	80236a8 <USBD_Get_USB_Status>
 80235c0:	4603      	mov	r3, r0
 80235c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80235c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80235c6:	4618      	mov	r0, r3
 80235c8:	3710      	adds	r7, #16
 80235ca:	46bd      	mov	sp, r7
 80235cc:	bd80      	pop	{r7, pc}

080235ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80235ce:	b580      	push	{r7, lr}
 80235d0:	b086      	sub	sp, #24
 80235d2:	af00      	add	r7, sp, #0
 80235d4:	60f8      	str	r0, [r7, #12]
 80235d6:	607a      	str	r2, [r7, #4]
 80235d8:	603b      	str	r3, [r7, #0]
 80235da:	460b      	mov	r3, r1
 80235dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80235de:	2300      	movs	r3, #0
 80235e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80235e2:	2300      	movs	r3, #0
 80235e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80235e6:	68fb      	ldr	r3, [r7, #12]
 80235e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80235ec:	7af9      	ldrb	r1, [r7, #11]
 80235ee:	683b      	ldr	r3, [r7, #0]
 80235f0:	687a      	ldr	r2, [r7, #4]
 80235f2:	f7f5 fb62 	bl	8018cba <HAL_PCD_EP_Transmit>
 80235f6:	4603      	mov	r3, r0
 80235f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80235fa:	7dfb      	ldrb	r3, [r7, #23]
 80235fc:	4618      	mov	r0, r3
 80235fe:	f000 f853 	bl	80236a8 <USBD_Get_USB_Status>
 8023602:	4603      	mov	r3, r0
 8023604:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8023606:	7dbb      	ldrb	r3, [r7, #22]
}
 8023608:	4618      	mov	r0, r3
 802360a:	3718      	adds	r7, #24
 802360c:	46bd      	mov	sp, r7
 802360e:	bd80      	pop	{r7, pc}

08023610 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8023610:	b580      	push	{r7, lr}
 8023612:	b086      	sub	sp, #24
 8023614:	af00      	add	r7, sp, #0
 8023616:	60f8      	str	r0, [r7, #12]
 8023618:	607a      	str	r2, [r7, #4]
 802361a:	603b      	str	r3, [r7, #0]
 802361c:	460b      	mov	r3, r1
 802361e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023620:	2300      	movs	r3, #0
 8023622:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023624:	2300      	movs	r3, #0
 8023626:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023628:	68fb      	ldr	r3, [r7, #12]
 802362a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802362e:	7af9      	ldrb	r1, [r7, #11]
 8023630:	683b      	ldr	r3, [r7, #0]
 8023632:	687a      	ldr	r2, [r7, #4]
 8023634:	f7f5 faee 	bl	8018c14 <HAL_PCD_EP_Receive>
 8023638:	4603      	mov	r3, r0
 802363a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802363c:	7dfb      	ldrb	r3, [r7, #23]
 802363e:	4618      	mov	r0, r3
 8023640:	f000 f832 	bl	80236a8 <USBD_Get_USB_Status>
 8023644:	4603      	mov	r3, r0
 8023646:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8023648:	7dbb      	ldrb	r3, [r7, #22]
}
 802364a:	4618      	mov	r0, r3
 802364c:	3718      	adds	r7, #24
 802364e:	46bd      	mov	sp, r7
 8023650:	bd80      	pop	{r7, pc}

08023652 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023652:	b580      	push	{r7, lr}
 8023654:	b082      	sub	sp, #8
 8023656:	af00      	add	r7, sp, #0
 8023658:	6078      	str	r0, [r7, #4]
 802365a:	460b      	mov	r3, r1
 802365c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8023664:	78fa      	ldrb	r2, [r7, #3]
 8023666:	4611      	mov	r1, r2
 8023668:	4618      	mov	r0, r3
 802366a:	f7f5 fb0e 	bl	8018c8a <HAL_PCD_EP_GetRxCount>
 802366e:	4603      	mov	r3, r0
}
 8023670:	4618      	mov	r0, r3
 8023672:	3708      	adds	r7, #8
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}

08023678 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023678:	b480      	push	{r7}
 802367a:	b083      	sub	sp, #12
 802367c:	af00      	add	r7, sp, #0
 802367e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023680:	4b03      	ldr	r3, [pc, #12]	; (8023690 <USBD_static_malloc+0x18>)
}
 8023682:	4618      	mov	r0, r3
 8023684:	370c      	adds	r7, #12
 8023686:	46bd      	mov	sp, r7
 8023688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802368c:	4770      	bx	lr
 802368e:	bf00      	nop
 8023690:	20012ea8 	.word	0x20012ea8

08023694 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023694:	b480      	push	{r7}
 8023696:	b083      	sub	sp, #12
 8023698:	af00      	add	r7, sp, #0
 802369a:	6078      	str	r0, [r7, #4]

}
 802369c:	bf00      	nop
 802369e:	370c      	adds	r7, #12
 80236a0:	46bd      	mov	sp, r7
 80236a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236a6:	4770      	bx	lr

080236a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80236a8:	b480      	push	{r7}
 80236aa:	b085      	sub	sp, #20
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	4603      	mov	r3, r0
 80236b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80236b2:	2300      	movs	r3, #0
 80236b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80236b6:	79fb      	ldrb	r3, [r7, #7]
 80236b8:	2b03      	cmp	r3, #3
 80236ba:	d817      	bhi.n	80236ec <USBD_Get_USB_Status+0x44>
 80236bc:	a201      	add	r2, pc, #4	; (adr r2, 80236c4 <USBD_Get_USB_Status+0x1c>)
 80236be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80236c2:	bf00      	nop
 80236c4:	080236d5 	.word	0x080236d5
 80236c8:	080236db 	.word	0x080236db
 80236cc:	080236e1 	.word	0x080236e1
 80236d0:	080236e7 	.word	0x080236e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80236d4:	2300      	movs	r3, #0
 80236d6:	73fb      	strb	r3, [r7, #15]
    break;
 80236d8:	e00b      	b.n	80236f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80236da:	2303      	movs	r3, #3
 80236dc:	73fb      	strb	r3, [r7, #15]
    break;
 80236de:	e008      	b.n	80236f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80236e0:	2301      	movs	r3, #1
 80236e2:	73fb      	strb	r3, [r7, #15]
    break;
 80236e4:	e005      	b.n	80236f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80236e6:	2303      	movs	r3, #3
 80236e8:	73fb      	strb	r3, [r7, #15]
    break;
 80236ea:	e002      	b.n	80236f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80236ec:	2303      	movs	r3, #3
 80236ee:	73fb      	strb	r3, [r7, #15]
    break;
 80236f0:	bf00      	nop
  }
  return usb_status;
 80236f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80236f4:	4618      	mov	r0, r3
 80236f6:	3714      	adds	r7, #20
 80236f8:	46bd      	mov	sp, r7
 80236fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236fe:	4770      	bx	lr

08023700 <arm_mat_trans_f32>:
 8023700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023704:	8802      	ldrh	r2, [r0, #0]
 8023706:	884b      	ldrh	r3, [r1, #2]
 8023708:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802370c:	684f      	ldr	r7, [r1, #4]
 802370e:	8840      	ldrh	r0, [r0, #2]
 8023710:	4293      	cmp	r3, r2
 8023712:	b083      	sub	sp, #12
 8023714:	d14c      	bne.n	80237b0 <arm_mat_trans_f32+0xb0>
 8023716:	f8b1 e000 	ldrh.w	lr, [r1]
 802371a:	4586      	cmp	lr, r0
 802371c:	d148      	bne.n	80237b0 <arm_mat_trans_f32+0xb0>
 802371e:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8023722:	009c      	lsls	r4, r3, #2
 8023724:	f00e 0e03 	and.w	lr, lr, #3
 8023728:	fb08 f904 	mul.w	r9, r8, r4
 802372c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8023730:	011d      	lsls	r5, r3, #4
 8023732:	00db      	lsls	r3, r3, #3
 8023734:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8023738:	eb07 0a04 	add.w	sl, r7, r4
 802373c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8023740:	9201      	str	r2, [sp, #4]
 8023742:	9300      	str	r3, [sp, #0]
 8023744:	463b      	mov	r3, r7
 8023746:	f1b8 0f00 	cmp.w	r8, #0
 802374a:	d01d      	beq.n	8023788 <arm_mat_trans_f32+0x88>
 802374c:	9900      	ldr	r1, [sp, #0]
 802374e:	f10c 0210 	add.w	r2, ip, #16
 8023752:	4439      	add	r1, r7
 8023754:	4640      	mov	r0, r8
 8023756:	f852 6c10 	ldr.w	r6, [r2, #-16]
 802375a:	601e      	str	r6, [r3, #0]
 802375c:	ed52 7a03 	vldr	s15, [r2, #-12]
 8023760:	191e      	adds	r6, r3, r4
 8023762:	edc6 7a00 	vstr	s15, [r6]
 8023766:	f852 6c08 	ldr.w	r6, [r2, #-8]
 802376a:	600e      	str	r6, [r1, #0]
 802376c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8023770:	190e      	adds	r6, r1, r4
 8023772:	3801      	subs	r0, #1
 8023774:	442b      	add	r3, r5
 8023776:	f102 0210 	add.w	r2, r2, #16
 802377a:	edc6 7a00 	vstr	s15, [r6]
 802377e:	4429      	add	r1, r5
 8023780:	d1e9      	bne.n	8023756 <arm_mat_trans_f32+0x56>
 8023782:	44dc      	add	ip, fp
 8023784:	eb09 0307 	add.w	r3, r9, r7
 8023788:	f1be 0f00 	cmp.w	lr, #0
 802378c:	d009      	beq.n	80237a2 <arm_mat_trans_f32+0xa2>
 802378e:	4672      	mov	r2, lr
 8023790:	4661      	mov	r1, ip
 8023792:	f851 0b04 	ldr.w	r0, [r1], #4
 8023796:	6018      	str	r0, [r3, #0]
 8023798:	3a01      	subs	r2, #1
 802379a:	4423      	add	r3, r4
 802379c:	d1f9      	bne.n	8023792 <arm_mat_trans_f32+0x92>
 802379e:	9b01      	ldr	r3, [sp, #4]
 80237a0:	449c      	add	ip, r3
 80237a2:	3704      	adds	r7, #4
 80237a4:	4557      	cmp	r7, sl
 80237a6:	d1cd      	bne.n	8023744 <arm_mat_trans_f32+0x44>
 80237a8:	2000      	movs	r0, #0
 80237aa:	b003      	add	sp, #12
 80237ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237b0:	f06f 0002 	mvn.w	r0, #2
 80237b4:	e7f9      	b.n	80237aa <arm_mat_trans_f32+0xaa>
 80237b6:	bf00      	nop

080237b8 <arm_mat_scale_f32>:
 80237b8:	b470      	push	{r4, r5, r6}
 80237ba:	e9d1 3500 	ldrd	r3, r5, [r1]
 80237be:	6802      	ldr	r2, [r0, #0]
 80237c0:	6846      	ldr	r6, [r0, #4]
 80237c2:	429a      	cmp	r2, r3
 80237c4:	d147      	bne.n	8023856 <arm_mat_scale_f32+0x9e>
 80237c6:	8803      	ldrh	r3, [r0, #0]
 80237c8:	8840      	ldrh	r0, [r0, #2]
 80237ca:	fb00 f003 	mul.w	r0, r0, r3
 80237ce:	0884      	lsrs	r4, r0, #2
 80237d0:	d025      	beq.n	802381e <arm_mat_scale_f32+0x66>
 80237d2:	f106 0210 	add.w	r2, r6, #16
 80237d6:	f105 0310 	add.w	r3, r5, #16
 80237da:	4621      	mov	r1, r4
 80237dc:	ed52 7a04 	vldr	s15, [r2, #-16]
 80237e0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80237e4:	3901      	subs	r1, #1
 80237e6:	ed43 7a04 	vstr	s15, [r3, #-16]
 80237ea:	ed52 7a03 	vldr	s15, [r2, #-12]
 80237ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80237f2:	f102 0210 	add.w	r2, r2, #16
 80237f6:	ed43 7a03 	vstr	s15, [r3, #-12]
 80237fa:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
 80237fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023802:	f103 0310 	add.w	r3, r3, #16
 8023806:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 802380a:	ed52 7a05 	vldr	s15, [r2, #-20]	; 0xffffffec
 802380e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023812:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8023816:	d1e1      	bne.n	80237dc <arm_mat_scale_f32+0x24>
 8023818:	0124      	lsls	r4, r4, #4
 802381a:	4426      	add	r6, r4
 802381c:	4425      	add	r5, r4
 802381e:	f010 0003 	ands.w	r0, r0, #3
 8023822:	d015      	beq.n	8023850 <arm_mat_scale_f32+0x98>
 8023824:	edd6 7a00 	vldr	s15, [r6]
 8023828:	ee67 7a80 	vmul.f32	s15, s15, s0
 802382c:	3801      	subs	r0, #1
 802382e:	edc5 7a00 	vstr	s15, [r5]
 8023832:	d00d      	beq.n	8023850 <arm_mat_scale_f32+0x98>
 8023834:	edd6 7a01 	vldr	s15, [r6, #4]
 8023838:	ee67 7a80 	vmul.f32	s15, s15, s0
 802383c:	2801      	cmp	r0, #1
 802383e:	edc5 7a01 	vstr	s15, [r5, #4]
 8023842:	d005      	beq.n	8023850 <arm_mat_scale_f32+0x98>
 8023844:	edd6 7a02 	vldr	s15, [r6, #8]
 8023848:	ee27 0a80 	vmul.f32	s0, s15, s0
 802384c:	ed85 0a02 	vstr	s0, [r5, #8]
 8023850:	2000      	movs	r0, #0
 8023852:	bc70      	pop	{r4, r5, r6}
 8023854:	4770      	bx	lr
 8023856:	f06f 0002 	mvn.w	r0, #2
 802385a:	e7fa      	b.n	8023852 <arm_mat_scale_f32+0x9a>

0802385c <arm_mat_mult_f32>:
 802385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023860:	8845      	ldrh	r5, [r0, #2]
 8023862:	880b      	ldrh	r3, [r1, #0]
 8023864:	8806      	ldrh	r6, [r0, #0]
 8023866:	6847      	ldr	r7, [r0, #4]
 8023868:	6854      	ldr	r4, [r2, #4]
 802386a:	6848      	ldr	r0, [r1, #4]
 802386c:	b08b      	sub	sp, #44	; 0x2c
 802386e:	42ab      	cmp	r3, r5
 8023870:	9109      	str	r1, [sp, #36]	; 0x24
 8023872:	9604      	str	r6, [sp, #16]
 8023874:	8849      	ldrh	r1, [r1, #2]
 8023876:	f040 808a 	bne.w	802398e <arm_mat_mult_f32+0x132>
 802387a:	8815      	ldrh	r5, [r2, #0]
 802387c:	42b5      	cmp	r5, r6
 802387e:	f040 8086 	bne.w	802398e <arm_mat_mult_f32+0x132>
 8023882:	8852      	ldrh	r2, [r2, #2]
 8023884:	428a      	cmp	r2, r1
 8023886:	f040 8082 	bne.w	802398e <arm_mat_mult_f32+0x132>
 802388a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 802388e:	1d01      	adds	r1, r0, #4
 8023890:	0116      	lsls	r6, r2, #4
 8023892:	9108      	str	r1, [sp, #32]
 8023894:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8023898:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 802389c:	9101      	str	r1, [sp, #4]
 802389e:	fb06 f108 	mul.w	r1, r6, r8
 80238a2:	0095      	lsls	r5, r2, #2
 80238a4:	9103      	str	r1, [sp, #12]
 80238a6:	00d2      	lsls	r2, r2, #3
 80238a8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80238ac:	f003 0903 	and.w	r9, r3, #3
 80238b0:	009b      	lsls	r3, r3, #2
 80238b2:	f107 0b10 	add.w	fp, r7, #16
 80238b6:	eb04 0a05 	add.w	sl, r4, r5
 80238ba:	9107      	str	r1, [sp, #28]
 80238bc:	9202      	str	r2, [sp, #8]
 80238be:	9306      	str	r3, [sp, #24]
 80238c0:	f1ab 0310 	sub.w	r3, fp, #16
 80238c4:	9305      	str	r3, [sp, #20]
 80238c6:	9b07      	ldr	r3, [sp, #28]
 80238c8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80238cc:	eb03 0c0a 	add.w	ip, r3, sl
 80238d0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8023998 <arm_mat_mult_f32+0x13c>
 80238d4:	f1b8 0f00 	cmp.w	r8, #0
 80238d8:	d053      	beq.n	8023982 <arm_mat_mult_f32+0x126>
 80238da:	9b02      	ldr	r3, [sp, #8]
 80238dc:	4644      	mov	r4, r8
 80238de:	18c1      	adds	r1, r0, r3
 80238e0:	4602      	mov	r2, r0
 80238e2:	465b      	mov	r3, fp
 80238e4:	ed92 6a00 	vldr	s12, [r2]
 80238e8:	ed13 7a04 	vldr	s14, [r3, #-16]
 80238ec:	ed53 4a03 	vldr	s9, [r3, #-12]
 80238f0:	ed53 6a02 	vldr	s13, [r3, #-8]
 80238f4:	ed91 5a00 	vldr	s10, [r1]
 80238f8:	ed53 5a01 	vldr	s11, [r3, #-4]
 80238fc:	1957      	adds	r7, r2, r5
 80238fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8023902:	ed97 6a00 	vldr	s12, [r7]
 8023906:	ee77 7a27 	vadd.f32	s15, s14, s15
 802390a:	ee26 6a24 	vmul.f32	s12, s12, s9
 802390e:	194f      	adds	r7, r1, r5
 8023910:	ee36 6a27 	vadd.f32	s12, s12, s15
 8023914:	ee26 7a85 	vmul.f32	s14, s13, s10
 8023918:	edd7 7a00 	vldr	s15, [r7]
 802391c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8023920:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8023924:	3c01      	subs	r4, #1
 8023926:	4432      	add	r2, r6
 8023928:	4431      	add	r1, r6
 802392a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802392e:	f103 0310 	add.w	r3, r3, #16
 8023932:	d1d7      	bne.n	80238e4 <arm_mat_mult_f32+0x88>
 8023934:	9b03      	ldr	r3, [sp, #12]
 8023936:	9a01      	ldr	r2, [sp, #4]
 8023938:	4418      	add	r0, r3
 802393a:	f1b9 0f00 	cmp.w	r9, #0
 802393e:	d00b      	beq.n	8023958 <arm_mat_mult_f32+0xfc>
 8023940:	464b      	mov	r3, r9
 8023942:	edd0 6a00 	vldr	s13, [r0]
 8023946:	ecb2 7a01 	vldmia	r2!, {s14}
 802394a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802394e:	3b01      	subs	r3, #1
 8023950:	4428      	add	r0, r5
 8023952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023956:	d1f4      	bne.n	8023942 <arm_mat_mult_f32+0xe6>
 8023958:	ecec 7a01 	vstmia	ip!, {s15}
 802395c:	45d4      	cmp	ip, sl
 802395e:	4670      	mov	r0, lr
 8023960:	f10e 0e04 	add.w	lr, lr, #4
 8023964:	d1b4      	bne.n	80238d0 <arm_mat_mult_f32+0x74>
 8023966:	9a01      	ldr	r2, [sp, #4]
 8023968:	9b06      	ldr	r3, [sp, #24]
 802396a:	4611      	mov	r1, r2
 802396c:	4419      	add	r1, r3
 802396e:	449b      	add	fp, r3
 8023970:	9b04      	ldr	r3, [sp, #16]
 8023972:	9101      	str	r1, [sp, #4]
 8023974:	3b01      	subs	r3, #1
 8023976:	44aa      	add	sl, r5
 8023978:	9304      	str	r3, [sp, #16]
 802397a:	d004      	beq.n	8023986 <arm_mat_mult_f32+0x12a>
 802397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802397e:	6858      	ldr	r0, [r3, #4]
 8023980:	e79e      	b.n	80238c0 <arm_mat_mult_f32+0x64>
 8023982:	9a05      	ldr	r2, [sp, #20]
 8023984:	e7d9      	b.n	802393a <arm_mat_mult_f32+0xde>
 8023986:	4618      	mov	r0, r3
 8023988:	b00b      	add	sp, #44	; 0x2c
 802398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802398e:	f06f 0002 	mvn.w	r0, #2
 8023992:	b00b      	add	sp, #44	; 0x2c
 8023994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023998:	00000000 	.word	0x00000000

0802399c <arm_mat_inverse_f32>:
 802399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239a0:	8843      	ldrh	r3, [r0, #2]
 80239a2:	8804      	ldrh	r4, [r0, #0]
 80239a4:	684e      	ldr	r6, [r1, #4]
 80239a6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80239aa:	b087      	sub	sp, #28
 80239ac:	429c      	cmp	r4, r3
 80239ae:	9301      	str	r3, [sp, #4]
 80239b0:	9603      	str	r6, [sp, #12]
 80239b2:	f040 80ea 	bne.w	8023b8a <arm_mat_inverse_f32+0x1ee>
 80239b6:	880a      	ldrh	r2, [r1, #0]
 80239b8:	884b      	ldrh	r3, [r1, #2]
 80239ba:	4293      	cmp	r3, r2
 80239bc:	f040 80e5 	bne.w	8023b8a <arm_mat_inverse_f32+0x1ee>
 80239c0:	429c      	cmp	r4, r3
 80239c2:	f040 80e2 	bne.w	8023b8a <arm_mat_inverse_f32+0x1ee>
 80239c6:	9005      	str	r0, [sp, #20]
 80239c8:	b30c      	cbz	r4, 8023a0e <arm_mat_inverse_f32+0x72>
 80239ca:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80239ce:	1e67      	subs	r7, r4, #1
 80239d0:	f846 bb04 	str.w	fp, [r6], #4
 80239d4:	d01b      	beq.n	8023a0e <arm_mat_inverse_f32+0x72>
 80239d6:	f04f 0801 	mov.w	r8, #1
 80239da:	00ba      	lsls	r2, r7, #2
 80239dc:	eb06 0a02 	add.w	sl, r6, r2
 80239e0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80239e4:	4630      	mov	r0, r6
 80239e6:	2100      	movs	r1, #0
 80239e8:	f001 f84a 	bl	8024a80 <memset>
 80239ec:	eb0a 0605 	add.w	r6, sl, r5
 80239f0:	462a      	mov	r2, r5
 80239f2:	2100      	movs	r1, #0
 80239f4:	4650      	mov	r0, sl
 80239f6:	f1b8 0f00 	cmp.w	r8, #0
 80239fa:	f000 80cb 	beq.w	8023b94 <arm_mat_inverse_f32+0x1f8>
 80239fe:	f001 f83f 	bl	8024a80 <memset>
 8023a02:	3f01      	subs	r7, #1
 8023a04:	f108 0801 	add.w	r8, r8, #1
 8023a08:	f846 bb04 	str.w	fp, [r6], #4
 8023a0c:	d1e5      	bne.n	80239da <arm_mat_inverse_f32+0x3e>
 8023a0e:	9b01      	ldr	r3, [sp, #4]
 8023a10:	2b00      	cmp	r3, #0
 8023a12:	f000 80b5 	beq.w	8023b80 <arm_mat_inverse_f32+0x1e4>
 8023a16:	009d      	lsls	r5, r3, #2
 8023a18:	eb09 0205 	add.w	r2, r9, r5
 8023a1c:	46cc      	mov	ip, r9
 8023a1e:	9202      	str	r2, [sp, #8]
 8023a20:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8023a24:	1d2a      	adds	r2, r5, #4
 8023a26:	9204      	str	r2, [sp, #16]
 8023a28:	462f      	mov	r7, r5
 8023a2a:	469e      	mov	lr, r3
 8023a2c:	2600      	movs	r6, #0
 8023a2e:	9b02      	ldr	r3, [sp, #8]
 8023a30:	eddc 6a00 	vldr	s13, [ip]
 8023a34:	42b4      	cmp	r4, r6
 8023a36:	eba3 0b07 	sub.w	fp, r3, r7
 8023a3a:	f000 80a1 	beq.w	8023b80 <arm_mat_inverse_f32+0x1e4>
 8023a3e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8023ba4 <arm_mat_inverse_f32+0x208>
 8023a42:	4632      	mov	r2, r6
 8023a44:	4663      	mov	r3, ip
 8023a46:	e00b      	b.n	8023a60 <arm_mat_inverse_f32+0xc4>
 8023a48:	eef4 7a47 	vcmp.f32	s15, s14
 8023a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a50:	f102 0201 	add.w	r2, r2, #1
 8023a54:	bfc8      	it	gt
 8023a56:	eeb0 7a67 	vmovgt.f32	s14, s15
 8023a5a:	42a2      	cmp	r2, r4
 8023a5c:	442b      	add	r3, r5
 8023a5e:	d014      	beq.n	8023a8a <arm_mat_inverse_f32+0xee>
 8023a60:	edd3 7a00 	vldr	s15, [r3]
 8023a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8023a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a6c:	eeb1 6a67 	vneg.f32	s12, s15
 8023a70:	dcea      	bgt.n	8023a48 <arm_mat_inverse_f32+0xac>
 8023a72:	eeb4 6a47 	vcmp.f32	s12, s14
 8023a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a7a:	f102 0201 	add.w	r2, r2, #1
 8023a7e:	bfc8      	it	gt
 8023a80:	eeb0 7a46 	vmovgt.f32	s14, s12
 8023a84:	42a2      	cmp	r2, r4
 8023a86:	442b      	add	r3, r5
 8023a88:	d1ea      	bne.n	8023a60 <arm_mat_inverse_f32+0xc4>
 8023a8a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8023a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a92:	d075      	beq.n	8023b80 <arm_mat_inverse_f32+0x1e4>
 8023a94:	eef5 6a40 	vcmp.f32	s13, #0.0
 8023a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a9c:	d070      	beq.n	8023b80 <arm_mat_inverse_f32+0x1e4>
 8023a9e:	4672      	mov	r2, lr
 8023aa0:	4663      	mov	r3, ip
 8023aa2:	ed93 7a00 	vldr	s14, [r3]
 8023aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023aaa:	3a01      	subs	r2, #1
 8023aac:	ece3 7a01 	vstmia	r3!, {s15}
 8023ab0:	d1f7      	bne.n	8023aa2 <arm_mat_inverse_f32+0x106>
 8023ab2:	9901      	ldr	r1, [sp, #4]
 8023ab4:	464b      	mov	r3, r9
 8023ab6:	ed93 7a00 	vldr	s14, [r3]
 8023aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023abe:	3901      	subs	r1, #1
 8023ac0:	ece3 7a01 	vstmia	r3!, {s15}
 8023ac4:	d1f7      	bne.n	8023ab6 <arm_mat_inverse_f32+0x11a>
 8023ac6:	9803      	ldr	r0, [sp, #12]
 8023ac8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8023acc:	42b1      	cmp	r1, r6
 8023ace:	d039      	beq.n	8023b44 <arm_mat_inverse_f32+0x1a8>
 8023ad0:	eddb 6a00 	vldr	s13, [fp]
 8023ad4:	465a      	mov	r2, fp
 8023ad6:	4673      	mov	r3, lr
 8023ad8:	46e2      	mov	sl, ip
 8023ada:	ecba 7a01 	vldmia	sl!, {s14}
 8023ade:	edd2 7a00 	vldr	s15, [r2]
 8023ae2:	ee26 7a87 	vmul.f32	s14, s13, s14
 8023ae6:	3b01      	subs	r3, #1
 8023ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023aec:	ece2 7a01 	vstmia	r2!, {s15}
 8023af0:	d1f3      	bne.n	8023ada <arm_mat_inverse_f32+0x13e>
 8023af2:	9b01      	ldr	r3, [sp, #4]
 8023af4:	44bb      	add	fp, r7
 8023af6:	4602      	mov	r2, r0
 8023af8:	46ca      	mov	sl, r9
 8023afa:	ecba 7a01 	vldmia	sl!, {s14}
 8023afe:	edd2 7a00 	vldr	s15, [r2]
 8023b02:	ee26 7a87 	vmul.f32	s14, s13, s14
 8023b06:	3b01      	subs	r3, #1
 8023b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023b0c:	ece2 7a01 	vstmia	r2!, {s15}
 8023b10:	d1f3      	bne.n	8023afa <arm_mat_inverse_f32+0x15e>
 8023b12:	4428      	add	r0, r5
 8023b14:	3101      	adds	r1, #1
 8023b16:	428c      	cmp	r4, r1
 8023b18:	44c3      	add	fp, r8
 8023b1a:	d1d7      	bne.n	8023acc <arm_mat_inverse_f32+0x130>
 8023b1c:	9b04      	ldr	r3, [sp, #16]
 8023b1e:	f1be 0e01 	subs.w	lr, lr, #1
 8023b22:	f106 0601 	add.w	r6, r6, #1
 8023b26:	449c      	add	ip, r3
 8023b28:	f1a7 0704 	sub.w	r7, r7, #4
 8023b2c:	44a9      	add	r9, r5
 8023b2e:	f47f af7e 	bne.w	8023a2e <arm_mat_inverse_f32+0x92>
 8023b32:	eef5 6a40 	vcmp.f32	s13, #0.0
 8023b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b3a:	d006      	beq.n	8023b4a <arm_mat_inverse_f32+0x1ae>
 8023b3c:	2000      	movs	r0, #0
 8023b3e:	b007      	add	sp, #28
 8023b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b44:	44bb      	add	fp, r7
 8023b46:	4428      	add	r0, r5
 8023b48:	e7e4      	b.n	8023b14 <arm_mat_inverse_f32+0x178>
 8023b4a:	9b05      	ldr	r3, [sp, #20]
 8023b4c:	9a01      	ldr	r2, [sp, #4]
 8023b4e:	685b      	ldr	r3, [r3, #4]
 8023b50:	edd3 7a00 	vldr	s15, [r3]
 8023b54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8023b58:	fb02 f204 	mul.w	r2, r2, r4
 8023b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b60:	4614      	mov	r4, r2
 8023b62:	bf08      	it	eq
 8023b64:	3304      	addeq	r3, #4
 8023b66:	d007      	beq.n	8023b78 <arm_mat_inverse_f32+0x1dc>
 8023b68:	e7e8      	b.n	8023b3c <arm_mat_inverse_f32+0x1a0>
 8023b6a:	ecf3 7a01 	vldmia	r3!, {s15}
 8023b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8023b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b76:	d1e1      	bne.n	8023b3c <arm_mat_inverse_f32+0x1a0>
 8023b78:	f10e 0e01 	add.w	lr, lr, #1
 8023b7c:	4574      	cmp	r4, lr
 8023b7e:	d1f4      	bne.n	8023b6a <arm_mat_inverse_f32+0x1ce>
 8023b80:	f06f 0004 	mvn.w	r0, #4
 8023b84:	b007      	add	sp, #28
 8023b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b8a:	f06f 0002 	mvn.w	r0, #2
 8023b8e:	b007      	add	sp, #28
 8023b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b94:	4656      	mov	r6, sl
 8023b96:	3f01      	subs	r7, #1
 8023b98:	f846 bb04 	str.w	fp, [r6], #4
 8023b9c:	f47f af1b 	bne.w	80239d6 <arm_mat_inverse_f32+0x3a>
 8023ba0:	e735      	b.n	8023a0e <arm_mat_inverse_f32+0x72>
 8023ba2:	bf00      	nop
 8023ba4:	00000000 	.word	0x00000000

08023ba8 <arm_sin_f32>:
 8023ba8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8023c28 <arm_sin_f32+0x80>
 8023bac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023bb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8023bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023bbc:	d504      	bpl.n	8023bc8 <arm_sin_f32+0x20>
 8023bbe:	ee17 3a90 	vmov	r3, s15
 8023bc2:	3b01      	subs	r3, #1
 8023bc4:	ee07 3a90 	vmov	s15, r3
 8023bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023bcc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8023c2c <arm_sin_f32+0x84>
 8023bd0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023bd4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023bd8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8023bdc:	ee17 3a90 	vmov	r3, s15
 8023be0:	b29b      	uxth	r3, r3
 8023be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023be6:	d21a      	bcs.n	8023c1e <arm_sin_f32+0x76>
 8023be8:	ee07 3a90 	vmov	s15, r3
 8023bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023bf0:	1c59      	adds	r1, r3, #1
 8023bf2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023bf6:	4a0e      	ldr	r2, [pc, #56]	; (8023c30 <arm_sin_f32+0x88>)
 8023bf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023bfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023c00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8023c04:	ed93 7a00 	vldr	s14, [r3]
 8023c08:	edd2 6a00 	vldr	s13, [r2]
 8023c0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023c10:	ee20 0a26 	vmul.f32	s0, s0, s13
 8023c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c18:	ee37 0a80 	vadd.f32	s0, s15, s0
 8023c1c:	4770      	bx	lr
 8023c1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023c22:	2101      	movs	r1, #1
 8023c24:	2300      	movs	r3, #0
 8023c26:	e7e6      	b.n	8023bf6 <arm_sin_f32+0x4e>
 8023c28:	3e22f983 	.word	0x3e22f983
 8023c2c:	44000000 	.word	0x44000000
 8023c30:	0802f0bc 	.word	0x0802f0bc

08023c34 <arm_cos_f32>:
 8023c34:	eddf 7a21 	vldr	s15, [pc, #132]	; 8023cbc <arm_cos_f32+0x88>
 8023c38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023c3c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8023c40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023c44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8023c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c4c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023c50:	d504      	bpl.n	8023c5c <arm_cos_f32+0x28>
 8023c52:	ee17 3a90 	vmov	r3, s15
 8023c56:	3b01      	subs	r3, #1
 8023c58:	ee07 3a90 	vmov	s15, r3
 8023c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023c60:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8023cc0 <arm_cos_f32+0x8c>
 8023c64:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023c68:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023c6c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8023c70:	ee17 3a90 	vmov	r3, s15
 8023c74:	b29b      	uxth	r3, r3
 8023c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023c7a:	d21a      	bcs.n	8023cb2 <arm_cos_f32+0x7e>
 8023c7c:	ee07 3a90 	vmov	s15, r3
 8023c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023c84:	1c59      	adds	r1, r3, #1
 8023c86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023c8a:	4a0e      	ldr	r2, [pc, #56]	; (8023cc4 <arm_cos_f32+0x90>)
 8023c8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023c90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023c94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8023c98:	ed93 7a00 	vldr	s14, [r3]
 8023c9c:	edd2 6a00 	vldr	s13, [r2]
 8023ca0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023ca4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8023ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023cac:	ee37 0a80 	vadd.f32	s0, s15, s0
 8023cb0:	4770      	bx	lr
 8023cb2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023cb6:	2101      	movs	r1, #1
 8023cb8:	2300      	movs	r3, #0
 8023cba:	e7e6      	b.n	8023c8a <arm_cos_f32+0x56>
 8023cbc:	3e22f983 	.word	0x3e22f983
 8023cc0:	44000000 	.word	0x44000000
 8023cc4:	0802f0bc 	.word	0x0802f0bc

08023cc8 <__cvt>:
 8023cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023ccc:	ec55 4b10 	vmov	r4, r5, d0
 8023cd0:	2d00      	cmp	r5, #0
 8023cd2:	460e      	mov	r6, r1
 8023cd4:	4619      	mov	r1, r3
 8023cd6:	462b      	mov	r3, r5
 8023cd8:	bfbb      	ittet	lt
 8023cda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8023cde:	461d      	movlt	r5, r3
 8023ce0:	2300      	movge	r3, #0
 8023ce2:	232d      	movlt	r3, #45	; 0x2d
 8023ce4:	700b      	strb	r3, [r1, #0]
 8023ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023ce8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023cec:	4691      	mov	r9, r2
 8023cee:	f023 0820 	bic.w	r8, r3, #32
 8023cf2:	bfbc      	itt	lt
 8023cf4:	4622      	movlt	r2, r4
 8023cf6:	4614      	movlt	r4, r2
 8023cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023cfc:	d005      	beq.n	8023d0a <__cvt+0x42>
 8023cfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8023d02:	d100      	bne.n	8023d06 <__cvt+0x3e>
 8023d04:	3601      	adds	r6, #1
 8023d06:	2102      	movs	r1, #2
 8023d08:	e000      	b.n	8023d0c <__cvt+0x44>
 8023d0a:	2103      	movs	r1, #3
 8023d0c:	ab03      	add	r3, sp, #12
 8023d0e:	9301      	str	r3, [sp, #4]
 8023d10:	ab02      	add	r3, sp, #8
 8023d12:	9300      	str	r3, [sp, #0]
 8023d14:	ec45 4b10 	vmov	d0, r4, r5
 8023d18:	4653      	mov	r3, sl
 8023d1a:	4632      	mov	r2, r6
 8023d1c:	f001 f8ec 	bl	8024ef8 <_dtoa_r>
 8023d20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8023d24:	4607      	mov	r7, r0
 8023d26:	d102      	bne.n	8023d2e <__cvt+0x66>
 8023d28:	f019 0f01 	tst.w	r9, #1
 8023d2c:	d022      	beq.n	8023d74 <__cvt+0xac>
 8023d2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023d32:	eb07 0906 	add.w	r9, r7, r6
 8023d36:	d110      	bne.n	8023d5a <__cvt+0x92>
 8023d38:	783b      	ldrb	r3, [r7, #0]
 8023d3a:	2b30      	cmp	r3, #48	; 0x30
 8023d3c:	d10a      	bne.n	8023d54 <__cvt+0x8c>
 8023d3e:	2200      	movs	r2, #0
 8023d40:	2300      	movs	r3, #0
 8023d42:	4620      	mov	r0, r4
 8023d44:	4629      	mov	r1, r5
 8023d46:	f7dc fecf 	bl	8000ae8 <__aeabi_dcmpeq>
 8023d4a:	b918      	cbnz	r0, 8023d54 <__cvt+0x8c>
 8023d4c:	f1c6 0601 	rsb	r6, r6, #1
 8023d50:	f8ca 6000 	str.w	r6, [sl]
 8023d54:	f8da 3000 	ldr.w	r3, [sl]
 8023d58:	4499      	add	r9, r3
 8023d5a:	2200      	movs	r2, #0
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	4620      	mov	r0, r4
 8023d60:	4629      	mov	r1, r5
 8023d62:	f7dc fec1 	bl	8000ae8 <__aeabi_dcmpeq>
 8023d66:	b108      	cbz	r0, 8023d6c <__cvt+0xa4>
 8023d68:	f8cd 900c 	str.w	r9, [sp, #12]
 8023d6c:	2230      	movs	r2, #48	; 0x30
 8023d6e:	9b03      	ldr	r3, [sp, #12]
 8023d70:	454b      	cmp	r3, r9
 8023d72:	d307      	bcc.n	8023d84 <__cvt+0xbc>
 8023d74:	9b03      	ldr	r3, [sp, #12]
 8023d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d78:	1bdb      	subs	r3, r3, r7
 8023d7a:	4638      	mov	r0, r7
 8023d7c:	6013      	str	r3, [r2, #0]
 8023d7e:	b004      	add	sp, #16
 8023d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d84:	1c59      	adds	r1, r3, #1
 8023d86:	9103      	str	r1, [sp, #12]
 8023d88:	701a      	strb	r2, [r3, #0]
 8023d8a:	e7f0      	b.n	8023d6e <__cvt+0xa6>

08023d8c <__exponent>:
 8023d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023d8e:	4603      	mov	r3, r0
 8023d90:	2900      	cmp	r1, #0
 8023d92:	bfb8      	it	lt
 8023d94:	4249      	neglt	r1, r1
 8023d96:	f803 2b02 	strb.w	r2, [r3], #2
 8023d9a:	bfb4      	ite	lt
 8023d9c:	222d      	movlt	r2, #45	; 0x2d
 8023d9e:	222b      	movge	r2, #43	; 0x2b
 8023da0:	2909      	cmp	r1, #9
 8023da2:	7042      	strb	r2, [r0, #1]
 8023da4:	dd2a      	ble.n	8023dfc <__exponent+0x70>
 8023da6:	f10d 0207 	add.w	r2, sp, #7
 8023daa:	4617      	mov	r7, r2
 8023dac:	260a      	movs	r6, #10
 8023dae:	4694      	mov	ip, r2
 8023db0:	fb91 f5f6 	sdiv	r5, r1, r6
 8023db4:	fb06 1415 	mls	r4, r6, r5, r1
 8023db8:	3430      	adds	r4, #48	; 0x30
 8023dba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8023dbe:	460c      	mov	r4, r1
 8023dc0:	2c63      	cmp	r4, #99	; 0x63
 8023dc2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8023dc6:	4629      	mov	r1, r5
 8023dc8:	dcf1      	bgt.n	8023dae <__exponent+0x22>
 8023dca:	3130      	adds	r1, #48	; 0x30
 8023dcc:	f1ac 0402 	sub.w	r4, ip, #2
 8023dd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023dd4:	1c41      	adds	r1, r0, #1
 8023dd6:	4622      	mov	r2, r4
 8023dd8:	42ba      	cmp	r2, r7
 8023dda:	d30a      	bcc.n	8023df2 <__exponent+0x66>
 8023ddc:	f10d 0209 	add.w	r2, sp, #9
 8023de0:	eba2 020c 	sub.w	r2, r2, ip
 8023de4:	42bc      	cmp	r4, r7
 8023de6:	bf88      	it	hi
 8023de8:	2200      	movhi	r2, #0
 8023dea:	4413      	add	r3, r2
 8023dec:	1a18      	subs	r0, r3, r0
 8023dee:	b003      	add	sp, #12
 8023df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023df2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8023df6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8023dfa:	e7ed      	b.n	8023dd8 <__exponent+0x4c>
 8023dfc:	2330      	movs	r3, #48	; 0x30
 8023dfe:	3130      	adds	r1, #48	; 0x30
 8023e00:	7083      	strb	r3, [r0, #2]
 8023e02:	70c1      	strb	r1, [r0, #3]
 8023e04:	1d03      	adds	r3, r0, #4
 8023e06:	e7f1      	b.n	8023dec <__exponent+0x60>

08023e08 <_printf_float>:
 8023e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e0c:	ed2d 8b02 	vpush	{d8}
 8023e10:	b08d      	sub	sp, #52	; 0x34
 8023e12:	460c      	mov	r4, r1
 8023e14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8023e18:	4616      	mov	r6, r2
 8023e1a:	461f      	mov	r7, r3
 8023e1c:	4605      	mov	r5, r0
 8023e1e:	f000 fed5 	bl	8024bcc <_localeconv_r>
 8023e22:	f8d0 a000 	ldr.w	sl, [r0]
 8023e26:	4650      	mov	r0, sl
 8023e28:	f7dc fa32 	bl	8000290 <strlen>
 8023e2c:	2300      	movs	r3, #0
 8023e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8023e30:	6823      	ldr	r3, [r4, #0]
 8023e32:	9305      	str	r3, [sp, #20]
 8023e34:	f8d8 3000 	ldr.w	r3, [r8]
 8023e38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023e3c:	3307      	adds	r3, #7
 8023e3e:	f023 0307 	bic.w	r3, r3, #7
 8023e42:	f103 0208 	add.w	r2, r3, #8
 8023e46:	f8c8 2000 	str.w	r2, [r8]
 8023e4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023e4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023e52:	9307      	str	r3, [sp, #28]
 8023e54:	f8cd 8018 	str.w	r8, [sp, #24]
 8023e58:	ee08 0a10 	vmov	s16, r0
 8023e5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8023e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023e64:	4b9e      	ldr	r3, [pc, #632]	; (80240e0 <_printf_float+0x2d8>)
 8023e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023e6a:	f7dc fe6f 	bl	8000b4c <__aeabi_dcmpun>
 8023e6e:	bb88      	cbnz	r0, 8023ed4 <_printf_float+0xcc>
 8023e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023e74:	4b9a      	ldr	r3, [pc, #616]	; (80240e0 <_printf_float+0x2d8>)
 8023e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023e7a:	f7dc fe49 	bl	8000b10 <__aeabi_dcmple>
 8023e7e:	bb48      	cbnz	r0, 8023ed4 <_printf_float+0xcc>
 8023e80:	2200      	movs	r2, #0
 8023e82:	2300      	movs	r3, #0
 8023e84:	4640      	mov	r0, r8
 8023e86:	4649      	mov	r1, r9
 8023e88:	f7dc fe38 	bl	8000afc <__aeabi_dcmplt>
 8023e8c:	b110      	cbz	r0, 8023e94 <_printf_float+0x8c>
 8023e8e:	232d      	movs	r3, #45	; 0x2d
 8023e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023e94:	4a93      	ldr	r2, [pc, #588]	; (80240e4 <_printf_float+0x2dc>)
 8023e96:	4b94      	ldr	r3, [pc, #592]	; (80240e8 <_printf_float+0x2e0>)
 8023e98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8023e9c:	bf94      	ite	ls
 8023e9e:	4690      	movls	r8, r2
 8023ea0:	4698      	movhi	r8, r3
 8023ea2:	2303      	movs	r3, #3
 8023ea4:	6123      	str	r3, [r4, #16]
 8023ea6:	9b05      	ldr	r3, [sp, #20]
 8023ea8:	f023 0304 	bic.w	r3, r3, #4
 8023eac:	6023      	str	r3, [r4, #0]
 8023eae:	f04f 0900 	mov.w	r9, #0
 8023eb2:	9700      	str	r7, [sp, #0]
 8023eb4:	4633      	mov	r3, r6
 8023eb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8023eb8:	4621      	mov	r1, r4
 8023eba:	4628      	mov	r0, r5
 8023ebc:	f000 f9da 	bl	8024274 <_printf_common>
 8023ec0:	3001      	adds	r0, #1
 8023ec2:	f040 8090 	bne.w	8023fe6 <_printf_float+0x1de>
 8023ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023eca:	b00d      	add	sp, #52	; 0x34
 8023ecc:	ecbd 8b02 	vpop	{d8}
 8023ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ed4:	4642      	mov	r2, r8
 8023ed6:	464b      	mov	r3, r9
 8023ed8:	4640      	mov	r0, r8
 8023eda:	4649      	mov	r1, r9
 8023edc:	f7dc fe36 	bl	8000b4c <__aeabi_dcmpun>
 8023ee0:	b140      	cbz	r0, 8023ef4 <_printf_float+0xec>
 8023ee2:	464b      	mov	r3, r9
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	bfbc      	itt	lt
 8023ee8:	232d      	movlt	r3, #45	; 0x2d
 8023eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023eee:	4a7f      	ldr	r2, [pc, #508]	; (80240ec <_printf_float+0x2e4>)
 8023ef0:	4b7f      	ldr	r3, [pc, #508]	; (80240f0 <_printf_float+0x2e8>)
 8023ef2:	e7d1      	b.n	8023e98 <_printf_float+0x90>
 8023ef4:	6863      	ldr	r3, [r4, #4]
 8023ef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023efa:	9206      	str	r2, [sp, #24]
 8023efc:	1c5a      	adds	r2, r3, #1
 8023efe:	d13f      	bne.n	8023f80 <_printf_float+0x178>
 8023f00:	2306      	movs	r3, #6
 8023f02:	6063      	str	r3, [r4, #4]
 8023f04:	9b05      	ldr	r3, [sp, #20]
 8023f06:	6861      	ldr	r1, [r4, #4]
 8023f08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023f0c:	2300      	movs	r3, #0
 8023f0e:	9303      	str	r3, [sp, #12]
 8023f10:	ab0a      	add	r3, sp, #40	; 0x28
 8023f12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023f16:	ab09      	add	r3, sp, #36	; 0x24
 8023f18:	ec49 8b10 	vmov	d0, r8, r9
 8023f1c:	9300      	str	r3, [sp, #0]
 8023f1e:	6022      	str	r2, [r4, #0]
 8023f20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023f24:	4628      	mov	r0, r5
 8023f26:	f7ff fecf 	bl	8023cc8 <__cvt>
 8023f2a:	9b06      	ldr	r3, [sp, #24]
 8023f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023f2e:	2b47      	cmp	r3, #71	; 0x47
 8023f30:	4680      	mov	r8, r0
 8023f32:	d108      	bne.n	8023f46 <_printf_float+0x13e>
 8023f34:	1cc8      	adds	r0, r1, #3
 8023f36:	db02      	blt.n	8023f3e <_printf_float+0x136>
 8023f38:	6863      	ldr	r3, [r4, #4]
 8023f3a:	4299      	cmp	r1, r3
 8023f3c:	dd41      	ble.n	8023fc2 <_printf_float+0x1ba>
 8023f3e:	f1ab 0302 	sub.w	r3, fp, #2
 8023f42:	fa5f fb83 	uxtb.w	fp, r3
 8023f46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023f4a:	d820      	bhi.n	8023f8e <_printf_float+0x186>
 8023f4c:	3901      	subs	r1, #1
 8023f4e:	465a      	mov	r2, fp
 8023f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023f54:	9109      	str	r1, [sp, #36]	; 0x24
 8023f56:	f7ff ff19 	bl	8023d8c <__exponent>
 8023f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f5c:	1813      	adds	r3, r2, r0
 8023f5e:	2a01      	cmp	r2, #1
 8023f60:	4681      	mov	r9, r0
 8023f62:	6123      	str	r3, [r4, #16]
 8023f64:	dc02      	bgt.n	8023f6c <_printf_float+0x164>
 8023f66:	6822      	ldr	r2, [r4, #0]
 8023f68:	07d2      	lsls	r2, r2, #31
 8023f6a:	d501      	bpl.n	8023f70 <_printf_float+0x168>
 8023f6c:	3301      	adds	r3, #1
 8023f6e:	6123      	str	r3, [r4, #16]
 8023f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d09c      	beq.n	8023eb2 <_printf_float+0xaa>
 8023f78:	232d      	movs	r3, #45	; 0x2d
 8023f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023f7e:	e798      	b.n	8023eb2 <_printf_float+0xaa>
 8023f80:	9a06      	ldr	r2, [sp, #24]
 8023f82:	2a47      	cmp	r2, #71	; 0x47
 8023f84:	d1be      	bne.n	8023f04 <_printf_float+0xfc>
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d1bc      	bne.n	8023f04 <_printf_float+0xfc>
 8023f8a:	2301      	movs	r3, #1
 8023f8c:	e7b9      	b.n	8023f02 <_printf_float+0xfa>
 8023f8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8023f92:	d118      	bne.n	8023fc6 <_printf_float+0x1be>
 8023f94:	2900      	cmp	r1, #0
 8023f96:	6863      	ldr	r3, [r4, #4]
 8023f98:	dd0b      	ble.n	8023fb2 <_printf_float+0x1aa>
 8023f9a:	6121      	str	r1, [r4, #16]
 8023f9c:	b913      	cbnz	r3, 8023fa4 <_printf_float+0x19c>
 8023f9e:	6822      	ldr	r2, [r4, #0]
 8023fa0:	07d0      	lsls	r0, r2, #31
 8023fa2:	d502      	bpl.n	8023faa <_printf_float+0x1a2>
 8023fa4:	3301      	adds	r3, #1
 8023fa6:	440b      	add	r3, r1
 8023fa8:	6123      	str	r3, [r4, #16]
 8023faa:	65a1      	str	r1, [r4, #88]	; 0x58
 8023fac:	f04f 0900 	mov.w	r9, #0
 8023fb0:	e7de      	b.n	8023f70 <_printf_float+0x168>
 8023fb2:	b913      	cbnz	r3, 8023fba <_printf_float+0x1b2>
 8023fb4:	6822      	ldr	r2, [r4, #0]
 8023fb6:	07d2      	lsls	r2, r2, #31
 8023fb8:	d501      	bpl.n	8023fbe <_printf_float+0x1b6>
 8023fba:	3302      	adds	r3, #2
 8023fbc:	e7f4      	b.n	8023fa8 <_printf_float+0x1a0>
 8023fbe:	2301      	movs	r3, #1
 8023fc0:	e7f2      	b.n	8023fa8 <_printf_float+0x1a0>
 8023fc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fc8:	4299      	cmp	r1, r3
 8023fca:	db05      	blt.n	8023fd8 <_printf_float+0x1d0>
 8023fcc:	6823      	ldr	r3, [r4, #0]
 8023fce:	6121      	str	r1, [r4, #16]
 8023fd0:	07d8      	lsls	r0, r3, #31
 8023fd2:	d5ea      	bpl.n	8023faa <_printf_float+0x1a2>
 8023fd4:	1c4b      	adds	r3, r1, #1
 8023fd6:	e7e7      	b.n	8023fa8 <_printf_float+0x1a0>
 8023fd8:	2900      	cmp	r1, #0
 8023fda:	bfd4      	ite	le
 8023fdc:	f1c1 0202 	rsble	r2, r1, #2
 8023fe0:	2201      	movgt	r2, #1
 8023fe2:	4413      	add	r3, r2
 8023fe4:	e7e0      	b.n	8023fa8 <_printf_float+0x1a0>
 8023fe6:	6823      	ldr	r3, [r4, #0]
 8023fe8:	055a      	lsls	r2, r3, #21
 8023fea:	d407      	bmi.n	8023ffc <_printf_float+0x1f4>
 8023fec:	6923      	ldr	r3, [r4, #16]
 8023fee:	4642      	mov	r2, r8
 8023ff0:	4631      	mov	r1, r6
 8023ff2:	4628      	mov	r0, r5
 8023ff4:	47b8      	blx	r7
 8023ff6:	3001      	adds	r0, #1
 8023ff8:	d12c      	bne.n	8024054 <_printf_float+0x24c>
 8023ffa:	e764      	b.n	8023ec6 <_printf_float+0xbe>
 8023ffc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024000:	f240 80e0 	bls.w	80241c4 <_printf_float+0x3bc>
 8024004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024008:	2200      	movs	r2, #0
 802400a:	2300      	movs	r3, #0
 802400c:	f7dc fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8024010:	2800      	cmp	r0, #0
 8024012:	d034      	beq.n	802407e <_printf_float+0x276>
 8024014:	4a37      	ldr	r2, [pc, #220]	; (80240f4 <_printf_float+0x2ec>)
 8024016:	2301      	movs	r3, #1
 8024018:	4631      	mov	r1, r6
 802401a:	4628      	mov	r0, r5
 802401c:	47b8      	blx	r7
 802401e:	3001      	adds	r0, #1
 8024020:	f43f af51 	beq.w	8023ec6 <_printf_float+0xbe>
 8024024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024028:	429a      	cmp	r2, r3
 802402a:	db02      	blt.n	8024032 <_printf_float+0x22a>
 802402c:	6823      	ldr	r3, [r4, #0]
 802402e:	07d8      	lsls	r0, r3, #31
 8024030:	d510      	bpl.n	8024054 <_printf_float+0x24c>
 8024032:	ee18 3a10 	vmov	r3, s16
 8024036:	4652      	mov	r2, sl
 8024038:	4631      	mov	r1, r6
 802403a:	4628      	mov	r0, r5
 802403c:	47b8      	blx	r7
 802403e:	3001      	adds	r0, #1
 8024040:	f43f af41 	beq.w	8023ec6 <_printf_float+0xbe>
 8024044:	f04f 0800 	mov.w	r8, #0
 8024048:	f104 091a 	add.w	r9, r4, #26
 802404c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802404e:	3b01      	subs	r3, #1
 8024050:	4543      	cmp	r3, r8
 8024052:	dc09      	bgt.n	8024068 <_printf_float+0x260>
 8024054:	6823      	ldr	r3, [r4, #0]
 8024056:	079b      	lsls	r3, r3, #30
 8024058:	f100 8107 	bmi.w	802426a <_printf_float+0x462>
 802405c:	68e0      	ldr	r0, [r4, #12]
 802405e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024060:	4298      	cmp	r0, r3
 8024062:	bfb8      	it	lt
 8024064:	4618      	movlt	r0, r3
 8024066:	e730      	b.n	8023eca <_printf_float+0xc2>
 8024068:	2301      	movs	r3, #1
 802406a:	464a      	mov	r2, r9
 802406c:	4631      	mov	r1, r6
 802406e:	4628      	mov	r0, r5
 8024070:	47b8      	blx	r7
 8024072:	3001      	adds	r0, #1
 8024074:	f43f af27 	beq.w	8023ec6 <_printf_float+0xbe>
 8024078:	f108 0801 	add.w	r8, r8, #1
 802407c:	e7e6      	b.n	802404c <_printf_float+0x244>
 802407e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024080:	2b00      	cmp	r3, #0
 8024082:	dc39      	bgt.n	80240f8 <_printf_float+0x2f0>
 8024084:	4a1b      	ldr	r2, [pc, #108]	; (80240f4 <_printf_float+0x2ec>)
 8024086:	2301      	movs	r3, #1
 8024088:	4631      	mov	r1, r6
 802408a:	4628      	mov	r0, r5
 802408c:	47b8      	blx	r7
 802408e:	3001      	adds	r0, #1
 8024090:	f43f af19 	beq.w	8023ec6 <_printf_float+0xbe>
 8024094:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8024098:	4313      	orrs	r3, r2
 802409a:	d102      	bne.n	80240a2 <_printf_float+0x29a>
 802409c:	6823      	ldr	r3, [r4, #0]
 802409e:	07d9      	lsls	r1, r3, #31
 80240a0:	d5d8      	bpl.n	8024054 <_printf_float+0x24c>
 80240a2:	ee18 3a10 	vmov	r3, s16
 80240a6:	4652      	mov	r2, sl
 80240a8:	4631      	mov	r1, r6
 80240aa:	4628      	mov	r0, r5
 80240ac:	47b8      	blx	r7
 80240ae:	3001      	adds	r0, #1
 80240b0:	f43f af09 	beq.w	8023ec6 <_printf_float+0xbe>
 80240b4:	f04f 0900 	mov.w	r9, #0
 80240b8:	f104 0a1a 	add.w	sl, r4, #26
 80240bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240be:	425b      	negs	r3, r3
 80240c0:	454b      	cmp	r3, r9
 80240c2:	dc01      	bgt.n	80240c8 <_printf_float+0x2c0>
 80240c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240c6:	e792      	b.n	8023fee <_printf_float+0x1e6>
 80240c8:	2301      	movs	r3, #1
 80240ca:	4652      	mov	r2, sl
 80240cc:	4631      	mov	r1, r6
 80240ce:	4628      	mov	r0, r5
 80240d0:	47b8      	blx	r7
 80240d2:	3001      	adds	r0, #1
 80240d4:	f43f aef7 	beq.w	8023ec6 <_printf_float+0xbe>
 80240d8:	f109 0901 	add.w	r9, r9, #1
 80240dc:	e7ee      	b.n	80240bc <_printf_float+0x2b4>
 80240de:	bf00      	nop
 80240e0:	7fefffff 	.word	0x7fefffff
 80240e4:	0802f9c1 	.word	0x0802f9c1
 80240e8:	0802f9c5 	.word	0x0802f9c5
 80240ec:	0802f9c9 	.word	0x0802f9c9
 80240f0:	0802f9cd 	.word	0x0802f9cd
 80240f4:	0802f9d1 	.word	0x0802f9d1
 80240f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80240fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80240fc:	429a      	cmp	r2, r3
 80240fe:	bfa8      	it	ge
 8024100:	461a      	movge	r2, r3
 8024102:	2a00      	cmp	r2, #0
 8024104:	4691      	mov	r9, r2
 8024106:	dc37      	bgt.n	8024178 <_printf_float+0x370>
 8024108:	f04f 0b00 	mov.w	fp, #0
 802410c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024110:	f104 021a 	add.w	r2, r4, #26
 8024114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024116:	9305      	str	r3, [sp, #20]
 8024118:	eba3 0309 	sub.w	r3, r3, r9
 802411c:	455b      	cmp	r3, fp
 802411e:	dc33      	bgt.n	8024188 <_printf_float+0x380>
 8024120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024124:	429a      	cmp	r2, r3
 8024126:	db3b      	blt.n	80241a0 <_printf_float+0x398>
 8024128:	6823      	ldr	r3, [r4, #0]
 802412a:	07da      	lsls	r2, r3, #31
 802412c:	d438      	bmi.n	80241a0 <_printf_float+0x398>
 802412e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8024132:	eba2 0903 	sub.w	r9, r2, r3
 8024136:	9b05      	ldr	r3, [sp, #20]
 8024138:	1ad2      	subs	r2, r2, r3
 802413a:	4591      	cmp	r9, r2
 802413c:	bfa8      	it	ge
 802413e:	4691      	movge	r9, r2
 8024140:	f1b9 0f00 	cmp.w	r9, #0
 8024144:	dc35      	bgt.n	80241b2 <_printf_float+0x3aa>
 8024146:	f04f 0800 	mov.w	r8, #0
 802414a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802414e:	f104 0a1a 	add.w	sl, r4, #26
 8024152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024156:	1a9b      	subs	r3, r3, r2
 8024158:	eba3 0309 	sub.w	r3, r3, r9
 802415c:	4543      	cmp	r3, r8
 802415e:	f77f af79 	ble.w	8024054 <_printf_float+0x24c>
 8024162:	2301      	movs	r3, #1
 8024164:	4652      	mov	r2, sl
 8024166:	4631      	mov	r1, r6
 8024168:	4628      	mov	r0, r5
 802416a:	47b8      	blx	r7
 802416c:	3001      	adds	r0, #1
 802416e:	f43f aeaa 	beq.w	8023ec6 <_printf_float+0xbe>
 8024172:	f108 0801 	add.w	r8, r8, #1
 8024176:	e7ec      	b.n	8024152 <_printf_float+0x34a>
 8024178:	4613      	mov	r3, r2
 802417a:	4631      	mov	r1, r6
 802417c:	4642      	mov	r2, r8
 802417e:	4628      	mov	r0, r5
 8024180:	47b8      	blx	r7
 8024182:	3001      	adds	r0, #1
 8024184:	d1c0      	bne.n	8024108 <_printf_float+0x300>
 8024186:	e69e      	b.n	8023ec6 <_printf_float+0xbe>
 8024188:	2301      	movs	r3, #1
 802418a:	4631      	mov	r1, r6
 802418c:	4628      	mov	r0, r5
 802418e:	9205      	str	r2, [sp, #20]
 8024190:	47b8      	blx	r7
 8024192:	3001      	adds	r0, #1
 8024194:	f43f ae97 	beq.w	8023ec6 <_printf_float+0xbe>
 8024198:	9a05      	ldr	r2, [sp, #20]
 802419a:	f10b 0b01 	add.w	fp, fp, #1
 802419e:	e7b9      	b.n	8024114 <_printf_float+0x30c>
 80241a0:	ee18 3a10 	vmov	r3, s16
 80241a4:	4652      	mov	r2, sl
 80241a6:	4631      	mov	r1, r6
 80241a8:	4628      	mov	r0, r5
 80241aa:	47b8      	blx	r7
 80241ac:	3001      	adds	r0, #1
 80241ae:	d1be      	bne.n	802412e <_printf_float+0x326>
 80241b0:	e689      	b.n	8023ec6 <_printf_float+0xbe>
 80241b2:	9a05      	ldr	r2, [sp, #20]
 80241b4:	464b      	mov	r3, r9
 80241b6:	4442      	add	r2, r8
 80241b8:	4631      	mov	r1, r6
 80241ba:	4628      	mov	r0, r5
 80241bc:	47b8      	blx	r7
 80241be:	3001      	adds	r0, #1
 80241c0:	d1c1      	bne.n	8024146 <_printf_float+0x33e>
 80241c2:	e680      	b.n	8023ec6 <_printf_float+0xbe>
 80241c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80241c6:	2a01      	cmp	r2, #1
 80241c8:	dc01      	bgt.n	80241ce <_printf_float+0x3c6>
 80241ca:	07db      	lsls	r3, r3, #31
 80241cc:	d53a      	bpl.n	8024244 <_printf_float+0x43c>
 80241ce:	2301      	movs	r3, #1
 80241d0:	4642      	mov	r2, r8
 80241d2:	4631      	mov	r1, r6
 80241d4:	4628      	mov	r0, r5
 80241d6:	47b8      	blx	r7
 80241d8:	3001      	adds	r0, #1
 80241da:	f43f ae74 	beq.w	8023ec6 <_printf_float+0xbe>
 80241de:	ee18 3a10 	vmov	r3, s16
 80241e2:	4652      	mov	r2, sl
 80241e4:	4631      	mov	r1, r6
 80241e6:	4628      	mov	r0, r5
 80241e8:	47b8      	blx	r7
 80241ea:	3001      	adds	r0, #1
 80241ec:	f43f ae6b 	beq.w	8023ec6 <_printf_float+0xbe>
 80241f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80241f4:	2200      	movs	r2, #0
 80241f6:	2300      	movs	r3, #0
 80241f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80241fc:	f7dc fc74 	bl	8000ae8 <__aeabi_dcmpeq>
 8024200:	b9d8      	cbnz	r0, 802423a <_printf_float+0x432>
 8024202:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8024206:	f108 0201 	add.w	r2, r8, #1
 802420a:	4631      	mov	r1, r6
 802420c:	4628      	mov	r0, r5
 802420e:	47b8      	blx	r7
 8024210:	3001      	adds	r0, #1
 8024212:	d10e      	bne.n	8024232 <_printf_float+0x42a>
 8024214:	e657      	b.n	8023ec6 <_printf_float+0xbe>
 8024216:	2301      	movs	r3, #1
 8024218:	4652      	mov	r2, sl
 802421a:	4631      	mov	r1, r6
 802421c:	4628      	mov	r0, r5
 802421e:	47b8      	blx	r7
 8024220:	3001      	adds	r0, #1
 8024222:	f43f ae50 	beq.w	8023ec6 <_printf_float+0xbe>
 8024226:	f108 0801 	add.w	r8, r8, #1
 802422a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802422c:	3b01      	subs	r3, #1
 802422e:	4543      	cmp	r3, r8
 8024230:	dcf1      	bgt.n	8024216 <_printf_float+0x40e>
 8024232:	464b      	mov	r3, r9
 8024234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8024238:	e6da      	b.n	8023ff0 <_printf_float+0x1e8>
 802423a:	f04f 0800 	mov.w	r8, #0
 802423e:	f104 0a1a 	add.w	sl, r4, #26
 8024242:	e7f2      	b.n	802422a <_printf_float+0x422>
 8024244:	2301      	movs	r3, #1
 8024246:	4642      	mov	r2, r8
 8024248:	e7df      	b.n	802420a <_printf_float+0x402>
 802424a:	2301      	movs	r3, #1
 802424c:	464a      	mov	r2, r9
 802424e:	4631      	mov	r1, r6
 8024250:	4628      	mov	r0, r5
 8024252:	47b8      	blx	r7
 8024254:	3001      	adds	r0, #1
 8024256:	f43f ae36 	beq.w	8023ec6 <_printf_float+0xbe>
 802425a:	f108 0801 	add.w	r8, r8, #1
 802425e:	68e3      	ldr	r3, [r4, #12]
 8024260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024262:	1a5b      	subs	r3, r3, r1
 8024264:	4543      	cmp	r3, r8
 8024266:	dcf0      	bgt.n	802424a <_printf_float+0x442>
 8024268:	e6f8      	b.n	802405c <_printf_float+0x254>
 802426a:	f04f 0800 	mov.w	r8, #0
 802426e:	f104 0919 	add.w	r9, r4, #25
 8024272:	e7f4      	b.n	802425e <_printf_float+0x456>

08024274 <_printf_common>:
 8024274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024278:	4616      	mov	r6, r2
 802427a:	4699      	mov	r9, r3
 802427c:	688a      	ldr	r2, [r1, #8]
 802427e:	690b      	ldr	r3, [r1, #16]
 8024280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024284:	4293      	cmp	r3, r2
 8024286:	bfb8      	it	lt
 8024288:	4613      	movlt	r3, r2
 802428a:	6033      	str	r3, [r6, #0]
 802428c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024290:	4607      	mov	r7, r0
 8024292:	460c      	mov	r4, r1
 8024294:	b10a      	cbz	r2, 802429a <_printf_common+0x26>
 8024296:	3301      	adds	r3, #1
 8024298:	6033      	str	r3, [r6, #0]
 802429a:	6823      	ldr	r3, [r4, #0]
 802429c:	0699      	lsls	r1, r3, #26
 802429e:	bf42      	ittt	mi
 80242a0:	6833      	ldrmi	r3, [r6, #0]
 80242a2:	3302      	addmi	r3, #2
 80242a4:	6033      	strmi	r3, [r6, #0]
 80242a6:	6825      	ldr	r5, [r4, #0]
 80242a8:	f015 0506 	ands.w	r5, r5, #6
 80242ac:	d106      	bne.n	80242bc <_printf_common+0x48>
 80242ae:	f104 0a19 	add.w	sl, r4, #25
 80242b2:	68e3      	ldr	r3, [r4, #12]
 80242b4:	6832      	ldr	r2, [r6, #0]
 80242b6:	1a9b      	subs	r3, r3, r2
 80242b8:	42ab      	cmp	r3, r5
 80242ba:	dc26      	bgt.n	802430a <_printf_common+0x96>
 80242bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80242c0:	1e13      	subs	r3, r2, #0
 80242c2:	6822      	ldr	r2, [r4, #0]
 80242c4:	bf18      	it	ne
 80242c6:	2301      	movne	r3, #1
 80242c8:	0692      	lsls	r2, r2, #26
 80242ca:	d42b      	bmi.n	8024324 <_printf_common+0xb0>
 80242cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80242d0:	4649      	mov	r1, r9
 80242d2:	4638      	mov	r0, r7
 80242d4:	47c0      	blx	r8
 80242d6:	3001      	adds	r0, #1
 80242d8:	d01e      	beq.n	8024318 <_printf_common+0xa4>
 80242da:	6823      	ldr	r3, [r4, #0]
 80242dc:	6922      	ldr	r2, [r4, #16]
 80242de:	f003 0306 	and.w	r3, r3, #6
 80242e2:	2b04      	cmp	r3, #4
 80242e4:	bf02      	ittt	eq
 80242e6:	68e5      	ldreq	r5, [r4, #12]
 80242e8:	6833      	ldreq	r3, [r6, #0]
 80242ea:	1aed      	subeq	r5, r5, r3
 80242ec:	68a3      	ldr	r3, [r4, #8]
 80242ee:	bf0c      	ite	eq
 80242f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80242f4:	2500      	movne	r5, #0
 80242f6:	4293      	cmp	r3, r2
 80242f8:	bfc4      	itt	gt
 80242fa:	1a9b      	subgt	r3, r3, r2
 80242fc:	18ed      	addgt	r5, r5, r3
 80242fe:	2600      	movs	r6, #0
 8024300:	341a      	adds	r4, #26
 8024302:	42b5      	cmp	r5, r6
 8024304:	d11a      	bne.n	802433c <_printf_common+0xc8>
 8024306:	2000      	movs	r0, #0
 8024308:	e008      	b.n	802431c <_printf_common+0xa8>
 802430a:	2301      	movs	r3, #1
 802430c:	4652      	mov	r2, sl
 802430e:	4649      	mov	r1, r9
 8024310:	4638      	mov	r0, r7
 8024312:	47c0      	blx	r8
 8024314:	3001      	adds	r0, #1
 8024316:	d103      	bne.n	8024320 <_printf_common+0xac>
 8024318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024320:	3501      	adds	r5, #1
 8024322:	e7c6      	b.n	80242b2 <_printf_common+0x3e>
 8024324:	18e1      	adds	r1, r4, r3
 8024326:	1c5a      	adds	r2, r3, #1
 8024328:	2030      	movs	r0, #48	; 0x30
 802432a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802432e:	4422      	add	r2, r4
 8024330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024338:	3302      	adds	r3, #2
 802433a:	e7c7      	b.n	80242cc <_printf_common+0x58>
 802433c:	2301      	movs	r3, #1
 802433e:	4622      	mov	r2, r4
 8024340:	4649      	mov	r1, r9
 8024342:	4638      	mov	r0, r7
 8024344:	47c0      	blx	r8
 8024346:	3001      	adds	r0, #1
 8024348:	d0e6      	beq.n	8024318 <_printf_common+0xa4>
 802434a:	3601      	adds	r6, #1
 802434c:	e7d9      	b.n	8024302 <_printf_common+0x8e>
	...

08024350 <_printf_i>:
 8024350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024354:	7e0f      	ldrb	r7, [r1, #24]
 8024356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024358:	2f78      	cmp	r7, #120	; 0x78
 802435a:	4691      	mov	r9, r2
 802435c:	4680      	mov	r8, r0
 802435e:	460c      	mov	r4, r1
 8024360:	469a      	mov	sl, r3
 8024362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024366:	d807      	bhi.n	8024378 <_printf_i+0x28>
 8024368:	2f62      	cmp	r7, #98	; 0x62
 802436a:	d80a      	bhi.n	8024382 <_printf_i+0x32>
 802436c:	2f00      	cmp	r7, #0
 802436e:	f000 80d4 	beq.w	802451a <_printf_i+0x1ca>
 8024372:	2f58      	cmp	r7, #88	; 0x58
 8024374:	f000 80c0 	beq.w	80244f8 <_printf_i+0x1a8>
 8024378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802437c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024380:	e03a      	b.n	80243f8 <_printf_i+0xa8>
 8024382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024386:	2b15      	cmp	r3, #21
 8024388:	d8f6      	bhi.n	8024378 <_printf_i+0x28>
 802438a:	a101      	add	r1, pc, #4	; (adr r1, 8024390 <_printf_i+0x40>)
 802438c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024390:	080243e9 	.word	0x080243e9
 8024394:	080243fd 	.word	0x080243fd
 8024398:	08024379 	.word	0x08024379
 802439c:	08024379 	.word	0x08024379
 80243a0:	08024379 	.word	0x08024379
 80243a4:	08024379 	.word	0x08024379
 80243a8:	080243fd 	.word	0x080243fd
 80243ac:	08024379 	.word	0x08024379
 80243b0:	08024379 	.word	0x08024379
 80243b4:	08024379 	.word	0x08024379
 80243b8:	08024379 	.word	0x08024379
 80243bc:	08024501 	.word	0x08024501
 80243c0:	08024429 	.word	0x08024429
 80243c4:	080244bb 	.word	0x080244bb
 80243c8:	08024379 	.word	0x08024379
 80243cc:	08024379 	.word	0x08024379
 80243d0:	08024523 	.word	0x08024523
 80243d4:	08024379 	.word	0x08024379
 80243d8:	08024429 	.word	0x08024429
 80243dc:	08024379 	.word	0x08024379
 80243e0:	08024379 	.word	0x08024379
 80243e4:	080244c3 	.word	0x080244c3
 80243e8:	682b      	ldr	r3, [r5, #0]
 80243ea:	1d1a      	adds	r2, r3, #4
 80243ec:	681b      	ldr	r3, [r3, #0]
 80243ee:	602a      	str	r2, [r5, #0]
 80243f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80243f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80243f8:	2301      	movs	r3, #1
 80243fa:	e09f      	b.n	802453c <_printf_i+0x1ec>
 80243fc:	6820      	ldr	r0, [r4, #0]
 80243fe:	682b      	ldr	r3, [r5, #0]
 8024400:	0607      	lsls	r7, r0, #24
 8024402:	f103 0104 	add.w	r1, r3, #4
 8024406:	6029      	str	r1, [r5, #0]
 8024408:	d501      	bpl.n	802440e <_printf_i+0xbe>
 802440a:	681e      	ldr	r6, [r3, #0]
 802440c:	e003      	b.n	8024416 <_printf_i+0xc6>
 802440e:	0646      	lsls	r6, r0, #25
 8024410:	d5fb      	bpl.n	802440a <_printf_i+0xba>
 8024412:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024416:	2e00      	cmp	r6, #0
 8024418:	da03      	bge.n	8024422 <_printf_i+0xd2>
 802441a:	232d      	movs	r3, #45	; 0x2d
 802441c:	4276      	negs	r6, r6
 802441e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024422:	485a      	ldr	r0, [pc, #360]	; (802458c <_printf_i+0x23c>)
 8024424:	230a      	movs	r3, #10
 8024426:	e012      	b.n	802444e <_printf_i+0xfe>
 8024428:	682b      	ldr	r3, [r5, #0]
 802442a:	6820      	ldr	r0, [r4, #0]
 802442c:	1d19      	adds	r1, r3, #4
 802442e:	6029      	str	r1, [r5, #0]
 8024430:	0605      	lsls	r5, r0, #24
 8024432:	d501      	bpl.n	8024438 <_printf_i+0xe8>
 8024434:	681e      	ldr	r6, [r3, #0]
 8024436:	e002      	b.n	802443e <_printf_i+0xee>
 8024438:	0641      	lsls	r1, r0, #25
 802443a:	d5fb      	bpl.n	8024434 <_printf_i+0xe4>
 802443c:	881e      	ldrh	r6, [r3, #0]
 802443e:	4853      	ldr	r0, [pc, #332]	; (802458c <_printf_i+0x23c>)
 8024440:	2f6f      	cmp	r7, #111	; 0x6f
 8024442:	bf0c      	ite	eq
 8024444:	2308      	moveq	r3, #8
 8024446:	230a      	movne	r3, #10
 8024448:	2100      	movs	r1, #0
 802444a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802444e:	6865      	ldr	r5, [r4, #4]
 8024450:	60a5      	str	r5, [r4, #8]
 8024452:	2d00      	cmp	r5, #0
 8024454:	bfa2      	ittt	ge
 8024456:	6821      	ldrge	r1, [r4, #0]
 8024458:	f021 0104 	bicge.w	r1, r1, #4
 802445c:	6021      	strge	r1, [r4, #0]
 802445e:	b90e      	cbnz	r6, 8024464 <_printf_i+0x114>
 8024460:	2d00      	cmp	r5, #0
 8024462:	d04b      	beq.n	80244fc <_printf_i+0x1ac>
 8024464:	4615      	mov	r5, r2
 8024466:	fbb6 f1f3 	udiv	r1, r6, r3
 802446a:	fb03 6711 	mls	r7, r3, r1, r6
 802446e:	5dc7      	ldrb	r7, [r0, r7]
 8024470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024474:	4637      	mov	r7, r6
 8024476:	42bb      	cmp	r3, r7
 8024478:	460e      	mov	r6, r1
 802447a:	d9f4      	bls.n	8024466 <_printf_i+0x116>
 802447c:	2b08      	cmp	r3, #8
 802447e:	d10b      	bne.n	8024498 <_printf_i+0x148>
 8024480:	6823      	ldr	r3, [r4, #0]
 8024482:	07de      	lsls	r6, r3, #31
 8024484:	d508      	bpl.n	8024498 <_printf_i+0x148>
 8024486:	6923      	ldr	r3, [r4, #16]
 8024488:	6861      	ldr	r1, [r4, #4]
 802448a:	4299      	cmp	r1, r3
 802448c:	bfde      	ittt	le
 802448e:	2330      	movle	r3, #48	; 0x30
 8024490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024494:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8024498:	1b52      	subs	r2, r2, r5
 802449a:	6122      	str	r2, [r4, #16]
 802449c:	f8cd a000 	str.w	sl, [sp]
 80244a0:	464b      	mov	r3, r9
 80244a2:	aa03      	add	r2, sp, #12
 80244a4:	4621      	mov	r1, r4
 80244a6:	4640      	mov	r0, r8
 80244a8:	f7ff fee4 	bl	8024274 <_printf_common>
 80244ac:	3001      	adds	r0, #1
 80244ae:	d14a      	bne.n	8024546 <_printf_i+0x1f6>
 80244b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80244b4:	b004      	add	sp, #16
 80244b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80244ba:	6823      	ldr	r3, [r4, #0]
 80244bc:	f043 0320 	orr.w	r3, r3, #32
 80244c0:	6023      	str	r3, [r4, #0]
 80244c2:	4833      	ldr	r0, [pc, #204]	; (8024590 <_printf_i+0x240>)
 80244c4:	2778      	movs	r7, #120	; 0x78
 80244c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80244ca:	6823      	ldr	r3, [r4, #0]
 80244cc:	6829      	ldr	r1, [r5, #0]
 80244ce:	061f      	lsls	r7, r3, #24
 80244d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80244d4:	d402      	bmi.n	80244dc <_printf_i+0x18c>
 80244d6:	065f      	lsls	r7, r3, #25
 80244d8:	bf48      	it	mi
 80244da:	b2b6      	uxthmi	r6, r6
 80244dc:	07df      	lsls	r7, r3, #31
 80244de:	bf48      	it	mi
 80244e0:	f043 0320 	orrmi.w	r3, r3, #32
 80244e4:	6029      	str	r1, [r5, #0]
 80244e6:	bf48      	it	mi
 80244e8:	6023      	strmi	r3, [r4, #0]
 80244ea:	b91e      	cbnz	r6, 80244f4 <_printf_i+0x1a4>
 80244ec:	6823      	ldr	r3, [r4, #0]
 80244ee:	f023 0320 	bic.w	r3, r3, #32
 80244f2:	6023      	str	r3, [r4, #0]
 80244f4:	2310      	movs	r3, #16
 80244f6:	e7a7      	b.n	8024448 <_printf_i+0xf8>
 80244f8:	4824      	ldr	r0, [pc, #144]	; (802458c <_printf_i+0x23c>)
 80244fa:	e7e4      	b.n	80244c6 <_printf_i+0x176>
 80244fc:	4615      	mov	r5, r2
 80244fe:	e7bd      	b.n	802447c <_printf_i+0x12c>
 8024500:	682b      	ldr	r3, [r5, #0]
 8024502:	6826      	ldr	r6, [r4, #0]
 8024504:	6961      	ldr	r1, [r4, #20]
 8024506:	1d18      	adds	r0, r3, #4
 8024508:	6028      	str	r0, [r5, #0]
 802450a:	0635      	lsls	r5, r6, #24
 802450c:	681b      	ldr	r3, [r3, #0]
 802450e:	d501      	bpl.n	8024514 <_printf_i+0x1c4>
 8024510:	6019      	str	r1, [r3, #0]
 8024512:	e002      	b.n	802451a <_printf_i+0x1ca>
 8024514:	0670      	lsls	r0, r6, #25
 8024516:	d5fb      	bpl.n	8024510 <_printf_i+0x1c0>
 8024518:	8019      	strh	r1, [r3, #0]
 802451a:	2300      	movs	r3, #0
 802451c:	6123      	str	r3, [r4, #16]
 802451e:	4615      	mov	r5, r2
 8024520:	e7bc      	b.n	802449c <_printf_i+0x14c>
 8024522:	682b      	ldr	r3, [r5, #0]
 8024524:	1d1a      	adds	r2, r3, #4
 8024526:	602a      	str	r2, [r5, #0]
 8024528:	681d      	ldr	r5, [r3, #0]
 802452a:	6862      	ldr	r2, [r4, #4]
 802452c:	2100      	movs	r1, #0
 802452e:	4628      	mov	r0, r5
 8024530:	f7db fe5e 	bl	80001f0 <memchr>
 8024534:	b108      	cbz	r0, 802453a <_printf_i+0x1ea>
 8024536:	1b40      	subs	r0, r0, r5
 8024538:	6060      	str	r0, [r4, #4]
 802453a:	6863      	ldr	r3, [r4, #4]
 802453c:	6123      	str	r3, [r4, #16]
 802453e:	2300      	movs	r3, #0
 8024540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024544:	e7aa      	b.n	802449c <_printf_i+0x14c>
 8024546:	6923      	ldr	r3, [r4, #16]
 8024548:	462a      	mov	r2, r5
 802454a:	4649      	mov	r1, r9
 802454c:	4640      	mov	r0, r8
 802454e:	47d0      	blx	sl
 8024550:	3001      	adds	r0, #1
 8024552:	d0ad      	beq.n	80244b0 <_printf_i+0x160>
 8024554:	6823      	ldr	r3, [r4, #0]
 8024556:	079b      	lsls	r3, r3, #30
 8024558:	d413      	bmi.n	8024582 <_printf_i+0x232>
 802455a:	68e0      	ldr	r0, [r4, #12]
 802455c:	9b03      	ldr	r3, [sp, #12]
 802455e:	4298      	cmp	r0, r3
 8024560:	bfb8      	it	lt
 8024562:	4618      	movlt	r0, r3
 8024564:	e7a6      	b.n	80244b4 <_printf_i+0x164>
 8024566:	2301      	movs	r3, #1
 8024568:	4632      	mov	r2, r6
 802456a:	4649      	mov	r1, r9
 802456c:	4640      	mov	r0, r8
 802456e:	47d0      	blx	sl
 8024570:	3001      	adds	r0, #1
 8024572:	d09d      	beq.n	80244b0 <_printf_i+0x160>
 8024574:	3501      	adds	r5, #1
 8024576:	68e3      	ldr	r3, [r4, #12]
 8024578:	9903      	ldr	r1, [sp, #12]
 802457a:	1a5b      	subs	r3, r3, r1
 802457c:	42ab      	cmp	r3, r5
 802457e:	dcf2      	bgt.n	8024566 <_printf_i+0x216>
 8024580:	e7eb      	b.n	802455a <_printf_i+0x20a>
 8024582:	2500      	movs	r5, #0
 8024584:	f104 0619 	add.w	r6, r4, #25
 8024588:	e7f5      	b.n	8024576 <_printf_i+0x226>
 802458a:	bf00      	nop
 802458c:	0802f9d3 	.word	0x0802f9d3
 8024590:	0802f9e4 	.word	0x0802f9e4

08024594 <__sflush_r>:
 8024594:	898a      	ldrh	r2, [r1, #12]
 8024596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802459a:	4605      	mov	r5, r0
 802459c:	0710      	lsls	r0, r2, #28
 802459e:	460c      	mov	r4, r1
 80245a0:	d458      	bmi.n	8024654 <__sflush_r+0xc0>
 80245a2:	684b      	ldr	r3, [r1, #4]
 80245a4:	2b00      	cmp	r3, #0
 80245a6:	dc05      	bgt.n	80245b4 <__sflush_r+0x20>
 80245a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	dc02      	bgt.n	80245b4 <__sflush_r+0x20>
 80245ae:	2000      	movs	r0, #0
 80245b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80245b6:	2e00      	cmp	r6, #0
 80245b8:	d0f9      	beq.n	80245ae <__sflush_r+0x1a>
 80245ba:	2300      	movs	r3, #0
 80245bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80245c0:	682f      	ldr	r7, [r5, #0]
 80245c2:	6a21      	ldr	r1, [r4, #32]
 80245c4:	602b      	str	r3, [r5, #0]
 80245c6:	d032      	beq.n	802462e <__sflush_r+0x9a>
 80245c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80245ca:	89a3      	ldrh	r3, [r4, #12]
 80245cc:	075a      	lsls	r2, r3, #29
 80245ce:	d505      	bpl.n	80245dc <__sflush_r+0x48>
 80245d0:	6863      	ldr	r3, [r4, #4]
 80245d2:	1ac0      	subs	r0, r0, r3
 80245d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80245d6:	b10b      	cbz	r3, 80245dc <__sflush_r+0x48>
 80245d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80245da:	1ac0      	subs	r0, r0, r3
 80245dc:	2300      	movs	r3, #0
 80245de:	4602      	mov	r2, r0
 80245e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80245e2:	6a21      	ldr	r1, [r4, #32]
 80245e4:	4628      	mov	r0, r5
 80245e6:	47b0      	blx	r6
 80245e8:	1c43      	adds	r3, r0, #1
 80245ea:	89a3      	ldrh	r3, [r4, #12]
 80245ec:	d106      	bne.n	80245fc <__sflush_r+0x68>
 80245ee:	6829      	ldr	r1, [r5, #0]
 80245f0:	291d      	cmp	r1, #29
 80245f2:	d82b      	bhi.n	802464c <__sflush_r+0xb8>
 80245f4:	4a29      	ldr	r2, [pc, #164]	; (802469c <__sflush_r+0x108>)
 80245f6:	410a      	asrs	r2, r1
 80245f8:	07d6      	lsls	r6, r2, #31
 80245fa:	d427      	bmi.n	802464c <__sflush_r+0xb8>
 80245fc:	2200      	movs	r2, #0
 80245fe:	6062      	str	r2, [r4, #4]
 8024600:	04d9      	lsls	r1, r3, #19
 8024602:	6922      	ldr	r2, [r4, #16]
 8024604:	6022      	str	r2, [r4, #0]
 8024606:	d504      	bpl.n	8024612 <__sflush_r+0x7e>
 8024608:	1c42      	adds	r2, r0, #1
 802460a:	d101      	bne.n	8024610 <__sflush_r+0x7c>
 802460c:	682b      	ldr	r3, [r5, #0]
 802460e:	b903      	cbnz	r3, 8024612 <__sflush_r+0x7e>
 8024610:	6560      	str	r0, [r4, #84]	; 0x54
 8024612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024614:	602f      	str	r7, [r5, #0]
 8024616:	2900      	cmp	r1, #0
 8024618:	d0c9      	beq.n	80245ae <__sflush_r+0x1a>
 802461a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802461e:	4299      	cmp	r1, r3
 8024620:	d002      	beq.n	8024628 <__sflush_r+0x94>
 8024622:	4628      	mov	r0, r5
 8024624:	f001 fa5a 	bl	8025adc <_free_r>
 8024628:	2000      	movs	r0, #0
 802462a:	6360      	str	r0, [r4, #52]	; 0x34
 802462c:	e7c0      	b.n	80245b0 <__sflush_r+0x1c>
 802462e:	2301      	movs	r3, #1
 8024630:	4628      	mov	r0, r5
 8024632:	47b0      	blx	r6
 8024634:	1c41      	adds	r1, r0, #1
 8024636:	d1c8      	bne.n	80245ca <__sflush_r+0x36>
 8024638:	682b      	ldr	r3, [r5, #0]
 802463a:	2b00      	cmp	r3, #0
 802463c:	d0c5      	beq.n	80245ca <__sflush_r+0x36>
 802463e:	2b1d      	cmp	r3, #29
 8024640:	d001      	beq.n	8024646 <__sflush_r+0xb2>
 8024642:	2b16      	cmp	r3, #22
 8024644:	d101      	bne.n	802464a <__sflush_r+0xb6>
 8024646:	602f      	str	r7, [r5, #0]
 8024648:	e7b1      	b.n	80245ae <__sflush_r+0x1a>
 802464a:	89a3      	ldrh	r3, [r4, #12]
 802464c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024650:	81a3      	strh	r3, [r4, #12]
 8024652:	e7ad      	b.n	80245b0 <__sflush_r+0x1c>
 8024654:	690f      	ldr	r7, [r1, #16]
 8024656:	2f00      	cmp	r7, #0
 8024658:	d0a9      	beq.n	80245ae <__sflush_r+0x1a>
 802465a:	0793      	lsls	r3, r2, #30
 802465c:	680e      	ldr	r6, [r1, #0]
 802465e:	bf08      	it	eq
 8024660:	694b      	ldreq	r3, [r1, #20]
 8024662:	600f      	str	r7, [r1, #0]
 8024664:	bf18      	it	ne
 8024666:	2300      	movne	r3, #0
 8024668:	eba6 0807 	sub.w	r8, r6, r7
 802466c:	608b      	str	r3, [r1, #8]
 802466e:	f1b8 0f00 	cmp.w	r8, #0
 8024672:	dd9c      	ble.n	80245ae <__sflush_r+0x1a>
 8024674:	6a21      	ldr	r1, [r4, #32]
 8024676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024678:	4643      	mov	r3, r8
 802467a:	463a      	mov	r2, r7
 802467c:	4628      	mov	r0, r5
 802467e:	47b0      	blx	r6
 8024680:	2800      	cmp	r0, #0
 8024682:	dc06      	bgt.n	8024692 <__sflush_r+0xfe>
 8024684:	89a3      	ldrh	r3, [r4, #12]
 8024686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802468a:	81a3      	strh	r3, [r4, #12]
 802468c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024690:	e78e      	b.n	80245b0 <__sflush_r+0x1c>
 8024692:	4407      	add	r7, r0
 8024694:	eba8 0800 	sub.w	r8, r8, r0
 8024698:	e7e9      	b.n	802466e <__sflush_r+0xda>
 802469a:	bf00      	nop
 802469c:	dfbffffe 	.word	0xdfbffffe

080246a0 <_fflush_r>:
 80246a0:	b538      	push	{r3, r4, r5, lr}
 80246a2:	690b      	ldr	r3, [r1, #16]
 80246a4:	4605      	mov	r5, r0
 80246a6:	460c      	mov	r4, r1
 80246a8:	b913      	cbnz	r3, 80246b0 <_fflush_r+0x10>
 80246aa:	2500      	movs	r5, #0
 80246ac:	4628      	mov	r0, r5
 80246ae:	bd38      	pop	{r3, r4, r5, pc}
 80246b0:	b118      	cbz	r0, 80246ba <_fflush_r+0x1a>
 80246b2:	6a03      	ldr	r3, [r0, #32]
 80246b4:	b90b      	cbnz	r3, 80246ba <_fflush_r+0x1a>
 80246b6:	f000 f8bb 	bl	8024830 <__sinit>
 80246ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246be:	2b00      	cmp	r3, #0
 80246c0:	d0f3      	beq.n	80246aa <_fflush_r+0xa>
 80246c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80246c4:	07d0      	lsls	r0, r2, #31
 80246c6:	d404      	bmi.n	80246d2 <_fflush_r+0x32>
 80246c8:	0599      	lsls	r1, r3, #22
 80246ca:	d402      	bmi.n	80246d2 <_fflush_r+0x32>
 80246cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80246ce:	f000 fb48 	bl	8024d62 <__retarget_lock_acquire_recursive>
 80246d2:	4628      	mov	r0, r5
 80246d4:	4621      	mov	r1, r4
 80246d6:	f7ff ff5d 	bl	8024594 <__sflush_r>
 80246da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80246dc:	07da      	lsls	r2, r3, #31
 80246de:	4605      	mov	r5, r0
 80246e0:	d4e4      	bmi.n	80246ac <_fflush_r+0xc>
 80246e2:	89a3      	ldrh	r3, [r4, #12]
 80246e4:	059b      	lsls	r3, r3, #22
 80246e6:	d4e1      	bmi.n	80246ac <_fflush_r+0xc>
 80246e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80246ea:	f000 fb3b 	bl	8024d64 <__retarget_lock_release_recursive>
 80246ee:	e7dd      	b.n	80246ac <_fflush_r+0xc>

080246f0 <fflush>:
 80246f0:	4601      	mov	r1, r0
 80246f2:	b920      	cbnz	r0, 80246fe <fflush+0xe>
 80246f4:	4a04      	ldr	r2, [pc, #16]	; (8024708 <fflush+0x18>)
 80246f6:	4905      	ldr	r1, [pc, #20]	; (802470c <fflush+0x1c>)
 80246f8:	4805      	ldr	r0, [pc, #20]	; (8024710 <fflush+0x20>)
 80246fa:	f000 b8b1 	b.w	8024860 <_fwalk_sglue>
 80246fe:	4b05      	ldr	r3, [pc, #20]	; (8024714 <fflush+0x24>)
 8024700:	6818      	ldr	r0, [r3, #0]
 8024702:	f7ff bfcd 	b.w	80246a0 <_fflush_r>
 8024706:	bf00      	nop
 8024708:	20000ff8 	.word	0x20000ff8
 802470c:	080246a1 	.word	0x080246a1
 8024710:	20001004 	.word	0x20001004
 8024714:	20001050 	.word	0x20001050

08024718 <std>:
 8024718:	2300      	movs	r3, #0
 802471a:	b510      	push	{r4, lr}
 802471c:	4604      	mov	r4, r0
 802471e:	e9c0 3300 	strd	r3, r3, [r0]
 8024722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024726:	6083      	str	r3, [r0, #8]
 8024728:	8181      	strh	r1, [r0, #12]
 802472a:	6643      	str	r3, [r0, #100]	; 0x64
 802472c:	81c2      	strh	r2, [r0, #14]
 802472e:	6183      	str	r3, [r0, #24]
 8024730:	4619      	mov	r1, r3
 8024732:	2208      	movs	r2, #8
 8024734:	305c      	adds	r0, #92	; 0x5c
 8024736:	f000 f9a3 	bl	8024a80 <memset>
 802473a:	4b0d      	ldr	r3, [pc, #52]	; (8024770 <std+0x58>)
 802473c:	6263      	str	r3, [r4, #36]	; 0x24
 802473e:	4b0d      	ldr	r3, [pc, #52]	; (8024774 <std+0x5c>)
 8024740:	62a3      	str	r3, [r4, #40]	; 0x28
 8024742:	4b0d      	ldr	r3, [pc, #52]	; (8024778 <std+0x60>)
 8024744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024746:	4b0d      	ldr	r3, [pc, #52]	; (802477c <std+0x64>)
 8024748:	6323      	str	r3, [r4, #48]	; 0x30
 802474a:	4b0d      	ldr	r3, [pc, #52]	; (8024780 <std+0x68>)
 802474c:	6224      	str	r4, [r4, #32]
 802474e:	429c      	cmp	r4, r3
 8024750:	d006      	beq.n	8024760 <std+0x48>
 8024752:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8024756:	4294      	cmp	r4, r2
 8024758:	d002      	beq.n	8024760 <std+0x48>
 802475a:	33d0      	adds	r3, #208	; 0xd0
 802475c:	429c      	cmp	r4, r3
 802475e:	d105      	bne.n	802476c <std+0x54>
 8024760:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024768:	f000 bafa 	b.w	8024d60 <__retarget_lock_init_recursive>
 802476c:	bd10      	pop	{r4, pc}
 802476e:	bf00      	nop
 8024770:	080248d1 	.word	0x080248d1
 8024774:	080248f3 	.word	0x080248f3
 8024778:	0802492b 	.word	0x0802492b
 802477c:	0802494f 	.word	0x0802494f
 8024780:	200130c8 	.word	0x200130c8

08024784 <stdio_exit_handler>:
 8024784:	4a02      	ldr	r2, [pc, #8]	; (8024790 <stdio_exit_handler+0xc>)
 8024786:	4903      	ldr	r1, [pc, #12]	; (8024794 <stdio_exit_handler+0x10>)
 8024788:	4803      	ldr	r0, [pc, #12]	; (8024798 <stdio_exit_handler+0x14>)
 802478a:	f000 b869 	b.w	8024860 <_fwalk_sglue>
 802478e:	bf00      	nop
 8024790:	20000ff8 	.word	0x20000ff8
 8024794:	080246a1 	.word	0x080246a1
 8024798:	20001004 	.word	0x20001004

0802479c <cleanup_stdio>:
 802479c:	6841      	ldr	r1, [r0, #4]
 802479e:	4b0c      	ldr	r3, [pc, #48]	; (80247d0 <cleanup_stdio+0x34>)
 80247a0:	4299      	cmp	r1, r3
 80247a2:	b510      	push	{r4, lr}
 80247a4:	4604      	mov	r4, r0
 80247a6:	d001      	beq.n	80247ac <cleanup_stdio+0x10>
 80247a8:	f7ff ff7a 	bl	80246a0 <_fflush_r>
 80247ac:	68a1      	ldr	r1, [r4, #8]
 80247ae:	4b09      	ldr	r3, [pc, #36]	; (80247d4 <cleanup_stdio+0x38>)
 80247b0:	4299      	cmp	r1, r3
 80247b2:	d002      	beq.n	80247ba <cleanup_stdio+0x1e>
 80247b4:	4620      	mov	r0, r4
 80247b6:	f7ff ff73 	bl	80246a0 <_fflush_r>
 80247ba:	68e1      	ldr	r1, [r4, #12]
 80247bc:	4b06      	ldr	r3, [pc, #24]	; (80247d8 <cleanup_stdio+0x3c>)
 80247be:	4299      	cmp	r1, r3
 80247c0:	d004      	beq.n	80247cc <cleanup_stdio+0x30>
 80247c2:	4620      	mov	r0, r4
 80247c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247c8:	f7ff bf6a 	b.w	80246a0 <_fflush_r>
 80247cc:	bd10      	pop	{r4, pc}
 80247ce:	bf00      	nop
 80247d0:	200130c8 	.word	0x200130c8
 80247d4:	20013130 	.word	0x20013130
 80247d8:	20013198 	.word	0x20013198

080247dc <global_stdio_init.part.0>:
 80247dc:	b510      	push	{r4, lr}
 80247de:	4b0b      	ldr	r3, [pc, #44]	; (802480c <global_stdio_init.part.0+0x30>)
 80247e0:	4c0b      	ldr	r4, [pc, #44]	; (8024810 <global_stdio_init.part.0+0x34>)
 80247e2:	4a0c      	ldr	r2, [pc, #48]	; (8024814 <global_stdio_init.part.0+0x38>)
 80247e4:	601a      	str	r2, [r3, #0]
 80247e6:	4620      	mov	r0, r4
 80247e8:	2200      	movs	r2, #0
 80247ea:	2104      	movs	r1, #4
 80247ec:	f7ff ff94 	bl	8024718 <std>
 80247f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80247f4:	2201      	movs	r2, #1
 80247f6:	2109      	movs	r1, #9
 80247f8:	f7ff ff8e 	bl	8024718 <std>
 80247fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8024800:	2202      	movs	r2, #2
 8024802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024806:	2112      	movs	r1, #18
 8024808:	f7ff bf86 	b.w	8024718 <std>
 802480c:	20013200 	.word	0x20013200
 8024810:	200130c8 	.word	0x200130c8
 8024814:	08024785 	.word	0x08024785

08024818 <__sfp_lock_acquire>:
 8024818:	4801      	ldr	r0, [pc, #4]	; (8024820 <__sfp_lock_acquire+0x8>)
 802481a:	f000 baa2 	b.w	8024d62 <__retarget_lock_acquire_recursive>
 802481e:	bf00      	nop
 8024820:	20013209 	.word	0x20013209

08024824 <__sfp_lock_release>:
 8024824:	4801      	ldr	r0, [pc, #4]	; (802482c <__sfp_lock_release+0x8>)
 8024826:	f000 ba9d 	b.w	8024d64 <__retarget_lock_release_recursive>
 802482a:	bf00      	nop
 802482c:	20013209 	.word	0x20013209

08024830 <__sinit>:
 8024830:	b510      	push	{r4, lr}
 8024832:	4604      	mov	r4, r0
 8024834:	f7ff fff0 	bl	8024818 <__sfp_lock_acquire>
 8024838:	6a23      	ldr	r3, [r4, #32]
 802483a:	b11b      	cbz	r3, 8024844 <__sinit+0x14>
 802483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024840:	f7ff bff0 	b.w	8024824 <__sfp_lock_release>
 8024844:	4b04      	ldr	r3, [pc, #16]	; (8024858 <__sinit+0x28>)
 8024846:	6223      	str	r3, [r4, #32]
 8024848:	4b04      	ldr	r3, [pc, #16]	; (802485c <__sinit+0x2c>)
 802484a:	681b      	ldr	r3, [r3, #0]
 802484c:	2b00      	cmp	r3, #0
 802484e:	d1f5      	bne.n	802483c <__sinit+0xc>
 8024850:	f7ff ffc4 	bl	80247dc <global_stdio_init.part.0>
 8024854:	e7f2      	b.n	802483c <__sinit+0xc>
 8024856:	bf00      	nop
 8024858:	0802479d 	.word	0x0802479d
 802485c:	20013200 	.word	0x20013200

08024860 <_fwalk_sglue>:
 8024860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024864:	4607      	mov	r7, r0
 8024866:	4688      	mov	r8, r1
 8024868:	4614      	mov	r4, r2
 802486a:	2600      	movs	r6, #0
 802486c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024870:	f1b9 0901 	subs.w	r9, r9, #1
 8024874:	d505      	bpl.n	8024882 <_fwalk_sglue+0x22>
 8024876:	6824      	ldr	r4, [r4, #0]
 8024878:	2c00      	cmp	r4, #0
 802487a:	d1f7      	bne.n	802486c <_fwalk_sglue+0xc>
 802487c:	4630      	mov	r0, r6
 802487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024882:	89ab      	ldrh	r3, [r5, #12]
 8024884:	2b01      	cmp	r3, #1
 8024886:	d907      	bls.n	8024898 <_fwalk_sglue+0x38>
 8024888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802488c:	3301      	adds	r3, #1
 802488e:	d003      	beq.n	8024898 <_fwalk_sglue+0x38>
 8024890:	4629      	mov	r1, r5
 8024892:	4638      	mov	r0, r7
 8024894:	47c0      	blx	r8
 8024896:	4306      	orrs	r6, r0
 8024898:	3568      	adds	r5, #104	; 0x68
 802489a:	e7e9      	b.n	8024870 <_fwalk_sglue+0x10>

0802489c <iprintf>:
 802489c:	b40f      	push	{r0, r1, r2, r3}
 802489e:	b507      	push	{r0, r1, r2, lr}
 80248a0:	4906      	ldr	r1, [pc, #24]	; (80248bc <iprintf+0x20>)
 80248a2:	ab04      	add	r3, sp, #16
 80248a4:	6808      	ldr	r0, [r1, #0]
 80248a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80248aa:	6881      	ldr	r1, [r0, #8]
 80248ac:	9301      	str	r3, [sp, #4]
 80248ae:	f001 fdbb 	bl	8026428 <_vfiprintf_r>
 80248b2:	b003      	add	sp, #12
 80248b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80248b8:	b004      	add	sp, #16
 80248ba:	4770      	bx	lr
 80248bc:	20001050 	.word	0x20001050

080248c0 <putchar>:
 80248c0:	4b02      	ldr	r3, [pc, #8]	; (80248cc <putchar+0xc>)
 80248c2:	4601      	mov	r1, r0
 80248c4:	6818      	ldr	r0, [r3, #0]
 80248c6:	6882      	ldr	r2, [r0, #8]
 80248c8:	f001 bf3c 	b.w	8026744 <_putc_r>
 80248cc:	20001050 	.word	0x20001050

080248d0 <__sread>:
 80248d0:	b510      	push	{r4, lr}
 80248d2:	460c      	mov	r4, r1
 80248d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80248d8:	f000 f9f4 	bl	8024cc4 <_read_r>
 80248dc:	2800      	cmp	r0, #0
 80248de:	bfab      	itete	ge
 80248e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80248e2:	89a3      	ldrhlt	r3, [r4, #12]
 80248e4:	181b      	addge	r3, r3, r0
 80248e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80248ea:	bfac      	ite	ge
 80248ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80248ee:	81a3      	strhlt	r3, [r4, #12]
 80248f0:	bd10      	pop	{r4, pc}

080248f2 <__swrite>:
 80248f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80248f6:	461f      	mov	r7, r3
 80248f8:	898b      	ldrh	r3, [r1, #12]
 80248fa:	05db      	lsls	r3, r3, #23
 80248fc:	4605      	mov	r5, r0
 80248fe:	460c      	mov	r4, r1
 8024900:	4616      	mov	r6, r2
 8024902:	d505      	bpl.n	8024910 <__swrite+0x1e>
 8024904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024908:	2302      	movs	r3, #2
 802490a:	2200      	movs	r2, #0
 802490c:	f000 f9c8 	bl	8024ca0 <_lseek_r>
 8024910:	89a3      	ldrh	r3, [r4, #12]
 8024912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802491a:	81a3      	strh	r3, [r4, #12]
 802491c:	4632      	mov	r2, r6
 802491e:	463b      	mov	r3, r7
 8024920:	4628      	mov	r0, r5
 8024922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024926:	f000 b9df 	b.w	8024ce8 <_write_r>

0802492a <__sseek>:
 802492a:	b510      	push	{r4, lr}
 802492c:	460c      	mov	r4, r1
 802492e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024932:	f000 f9b5 	bl	8024ca0 <_lseek_r>
 8024936:	1c43      	adds	r3, r0, #1
 8024938:	89a3      	ldrh	r3, [r4, #12]
 802493a:	bf15      	itete	ne
 802493c:	6560      	strne	r0, [r4, #84]	; 0x54
 802493e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024946:	81a3      	strheq	r3, [r4, #12]
 8024948:	bf18      	it	ne
 802494a:	81a3      	strhne	r3, [r4, #12]
 802494c:	bd10      	pop	{r4, pc}

0802494e <__sclose>:
 802494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024952:	f000 b93f 	b.w	8024bd4 <_close_r>

08024956 <__swbuf_r>:
 8024956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024958:	460e      	mov	r6, r1
 802495a:	4614      	mov	r4, r2
 802495c:	4605      	mov	r5, r0
 802495e:	b118      	cbz	r0, 8024968 <__swbuf_r+0x12>
 8024960:	6a03      	ldr	r3, [r0, #32]
 8024962:	b90b      	cbnz	r3, 8024968 <__swbuf_r+0x12>
 8024964:	f7ff ff64 	bl	8024830 <__sinit>
 8024968:	69a3      	ldr	r3, [r4, #24]
 802496a:	60a3      	str	r3, [r4, #8]
 802496c:	89a3      	ldrh	r3, [r4, #12]
 802496e:	071a      	lsls	r2, r3, #28
 8024970:	d525      	bpl.n	80249be <__swbuf_r+0x68>
 8024972:	6923      	ldr	r3, [r4, #16]
 8024974:	b31b      	cbz	r3, 80249be <__swbuf_r+0x68>
 8024976:	6823      	ldr	r3, [r4, #0]
 8024978:	6922      	ldr	r2, [r4, #16]
 802497a:	1a98      	subs	r0, r3, r2
 802497c:	6963      	ldr	r3, [r4, #20]
 802497e:	b2f6      	uxtb	r6, r6
 8024980:	4283      	cmp	r3, r0
 8024982:	4637      	mov	r7, r6
 8024984:	dc04      	bgt.n	8024990 <__swbuf_r+0x3a>
 8024986:	4621      	mov	r1, r4
 8024988:	4628      	mov	r0, r5
 802498a:	f7ff fe89 	bl	80246a0 <_fflush_r>
 802498e:	b9e0      	cbnz	r0, 80249ca <__swbuf_r+0x74>
 8024990:	68a3      	ldr	r3, [r4, #8]
 8024992:	3b01      	subs	r3, #1
 8024994:	60a3      	str	r3, [r4, #8]
 8024996:	6823      	ldr	r3, [r4, #0]
 8024998:	1c5a      	adds	r2, r3, #1
 802499a:	6022      	str	r2, [r4, #0]
 802499c:	701e      	strb	r6, [r3, #0]
 802499e:	6962      	ldr	r2, [r4, #20]
 80249a0:	1c43      	adds	r3, r0, #1
 80249a2:	429a      	cmp	r2, r3
 80249a4:	d004      	beq.n	80249b0 <__swbuf_r+0x5a>
 80249a6:	89a3      	ldrh	r3, [r4, #12]
 80249a8:	07db      	lsls	r3, r3, #31
 80249aa:	d506      	bpl.n	80249ba <__swbuf_r+0x64>
 80249ac:	2e0a      	cmp	r6, #10
 80249ae:	d104      	bne.n	80249ba <__swbuf_r+0x64>
 80249b0:	4621      	mov	r1, r4
 80249b2:	4628      	mov	r0, r5
 80249b4:	f7ff fe74 	bl	80246a0 <_fflush_r>
 80249b8:	b938      	cbnz	r0, 80249ca <__swbuf_r+0x74>
 80249ba:	4638      	mov	r0, r7
 80249bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80249be:	4621      	mov	r1, r4
 80249c0:	4628      	mov	r0, r5
 80249c2:	f000 f805 	bl	80249d0 <__swsetup_r>
 80249c6:	2800      	cmp	r0, #0
 80249c8:	d0d5      	beq.n	8024976 <__swbuf_r+0x20>
 80249ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80249ce:	e7f4      	b.n	80249ba <__swbuf_r+0x64>

080249d0 <__swsetup_r>:
 80249d0:	b538      	push	{r3, r4, r5, lr}
 80249d2:	4b2a      	ldr	r3, [pc, #168]	; (8024a7c <__swsetup_r+0xac>)
 80249d4:	4605      	mov	r5, r0
 80249d6:	6818      	ldr	r0, [r3, #0]
 80249d8:	460c      	mov	r4, r1
 80249da:	b118      	cbz	r0, 80249e4 <__swsetup_r+0x14>
 80249dc:	6a03      	ldr	r3, [r0, #32]
 80249de:	b90b      	cbnz	r3, 80249e4 <__swsetup_r+0x14>
 80249e0:	f7ff ff26 	bl	8024830 <__sinit>
 80249e4:	89a3      	ldrh	r3, [r4, #12]
 80249e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80249ea:	0718      	lsls	r0, r3, #28
 80249ec:	d422      	bmi.n	8024a34 <__swsetup_r+0x64>
 80249ee:	06d9      	lsls	r1, r3, #27
 80249f0:	d407      	bmi.n	8024a02 <__swsetup_r+0x32>
 80249f2:	2309      	movs	r3, #9
 80249f4:	602b      	str	r3, [r5, #0]
 80249f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80249fa:	81a3      	strh	r3, [r4, #12]
 80249fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024a00:	e034      	b.n	8024a6c <__swsetup_r+0x9c>
 8024a02:	0758      	lsls	r0, r3, #29
 8024a04:	d512      	bpl.n	8024a2c <__swsetup_r+0x5c>
 8024a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024a08:	b141      	cbz	r1, 8024a1c <__swsetup_r+0x4c>
 8024a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024a0e:	4299      	cmp	r1, r3
 8024a10:	d002      	beq.n	8024a18 <__swsetup_r+0x48>
 8024a12:	4628      	mov	r0, r5
 8024a14:	f001 f862 	bl	8025adc <_free_r>
 8024a18:	2300      	movs	r3, #0
 8024a1a:	6363      	str	r3, [r4, #52]	; 0x34
 8024a1c:	89a3      	ldrh	r3, [r4, #12]
 8024a1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024a22:	81a3      	strh	r3, [r4, #12]
 8024a24:	2300      	movs	r3, #0
 8024a26:	6063      	str	r3, [r4, #4]
 8024a28:	6923      	ldr	r3, [r4, #16]
 8024a2a:	6023      	str	r3, [r4, #0]
 8024a2c:	89a3      	ldrh	r3, [r4, #12]
 8024a2e:	f043 0308 	orr.w	r3, r3, #8
 8024a32:	81a3      	strh	r3, [r4, #12]
 8024a34:	6923      	ldr	r3, [r4, #16]
 8024a36:	b94b      	cbnz	r3, 8024a4c <__swsetup_r+0x7c>
 8024a38:	89a3      	ldrh	r3, [r4, #12]
 8024a3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024a42:	d003      	beq.n	8024a4c <__swsetup_r+0x7c>
 8024a44:	4621      	mov	r1, r4
 8024a46:	4628      	mov	r0, r5
 8024a48:	f001 fe40 	bl	80266cc <__smakebuf_r>
 8024a4c:	89a0      	ldrh	r0, [r4, #12]
 8024a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024a52:	f010 0301 	ands.w	r3, r0, #1
 8024a56:	d00a      	beq.n	8024a6e <__swsetup_r+0x9e>
 8024a58:	2300      	movs	r3, #0
 8024a5a:	60a3      	str	r3, [r4, #8]
 8024a5c:	6963      	ldr	r3, [r4, #20]
 8024a5e:	425b      	negs	r3, r3
 8024a60:	61a3      	str	r3, [r4, #24]
 8024a62:	6923      	ldr	r3, [r4, #16]
 8024a64:	b943      	cbnz	r3, 8024a78 <__swsetup_r+0xa8>
 8024a66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024a6a:	d1c4      	bne.n	80249f6 <__swsetup_r+0x26>
 8024a6c:	bd38      	pop	{r3, r4, r5, pc}
 8024a6e:	0781      	lsls	r1, r0, #30
 8024a70:	bf58      	it	pl
 8024a72:	6963      	ldrpl	r3, [r4, #20]
 8024a74:	60a3      	str	r3, [r4, #8]
 8024a76:	e7f4      	b.n	8024a62 <__swsetup_r+0x92>
 8024a78:	2000      	movs	r0, #0
 8024a7a:	e7f7      	b.n	8024a6c <__swsetup_r+0x9c>
 8024a7c:	20001050 	.word	0x20001050

08024a80 <memset>:
 8024a80:	4402      	add	r2, r0
 8024a82:	4603      	mov	r3, r0
 8024a84:	4293      	cmp	r3, r2
 8024a86:	d100      	bne.n	8024a8a <memset+0xa>
 8024a88:	4770      	bx	lr
 8024a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8024a8e:	e7f9      	b.n	8024a84 <memset+0x4>

08024a90 <strcat>:
 8024a90:	b510      	push	{r4, lr}
 8024a92:	4602      	mov	r2, r0
 8024a94:	7814      	ldrb	r4, [r2, #0]
 8024a96:	4613      	mov	r3, r2
 8024a98:	3201      	adds	r2, #1
 8024a9a:	2c00      	cmp	r4, #0
 8024a9c:	d1fa      	bne.n	8024a94 <strcat+0x4>
 8024a9e:	3b01      	subs	r3, #1
 8024aa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024aa4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024aa8:	2a00      	cmp	r2, #0
 8024aaa:	d1f9      	bne.n	8024aa0 <strcat+0x10>
 8024aac:	bd10      	pop	{r4, pc}

08024aae <strchr>:
 8024aae:	b2c9      	uxtb	r1, r1
 8024ab0:	4603      	mov	r3, r0
 8024ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ab6:	b11a      	cbz	r2, 8024ac0 <strchr+0x12>
 8024ab8:	428a      	cmp	r2, r1
 8024aba:	d1f9      	bne.n	8024ab0 <strchr+0x2>
 8024abc:	4618      	mov	r0, r3
 8024abe:	4770      	bx	lr
 8024ac0:	2900      	cmp	r1, #0
 8024ac2:	bf18      	it	ne
 8024ac4:	2300      	movne	r3, #0
 8024ac6:	e7f9      	b.n	8024abc <strchr+0xe>

08024ac8 <strncmp>:
 8024ac8:	b510      	push	{r4, lr}
 8024aca:	b16a      	cbz	r2, 8024ae8 <strncmp+0x20>
 8024acc:	3901      	subs	r1, #1
 8024ace:	1884      	adds	r4, r0, r2
 8024ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ad4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024ad8:	429a      	cmp	r2, r3
 8024ada:	d103      	bne.n	8024ae4 <strncmp+0x1c>
 8024adc:	42a0      	cmp	r0, r4
 8024ade:	d001      	beq.n	8024ae4 <strncmp+0x1c>
 8024ae0:	2a00      	cmp	r2, #0
 8024ae2:	d1f5      	bne.n	8024ad0 <strncmp+0x8>
 8024ae4:	1ad0      	subs	r0, r2, r3
 8024ae6:	bd10      	pop	{r4, pc}
 8024ae8:	4610      	mov	r0, r2
 8024aea:	e7fc      	b.n	8024ae6 <strncmp+0x1e>

08024aec <strncpy>:
 8024aec:	b510      	push	{r4, lr}
 8024aee:	3901      	subs	r1, #1
 8024af0:	4603      	mov	r3, r0
 8024af2:	b132      	cbz	r2, 8024b02 <strncpy+0x16>
 8024af4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024af8:	f803 4b01 	strb.w	r4, [r3], #1
 8024afc:	3a01      	subs	r2, #1
 8024afe:	2c00      	cmp	r4, #0
 8024b00:	d1f7      	bne.n	8024af2 <strncpy+0x6>
 8024b02:	441a      	add	r2, r3
 8024b04:	2100      	movs	r1, #0
 8024b06:	4293      	cmp	r3, r2
 8024b08:	d100      	bne.n	8024b0c <strncpy+0x20>
 8024b0a:	bd10      	pop	{r4, pc}
 8024b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8024b10:	e7f9      	b.n	8024b06 <strncpy+0x1a>
	...

08024b14 <strtok>:
 8024b14:	4b16      	ldr	r3, [pc, #88]	; (8024b70 <strtok+0x5c>)
 8024b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024b18:	681e      	ldr	r6, [r3, #0]
 8024b1a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8024b1c:	4605      	mov	r5, r0
 8024b1e:	b9fc      	cbnz	r4, 8024b60 <strtok+0x4c>
 8024b20:	2050      	movs	r0, #80	; 0x50
 8024b22:	9101      	str	r1, [sp, #4]
 8024b24:	f001 f826 	bl	8025b74 <malloc>
 8024b28:	9901      	ldr	r1, [sp, #4]
 8024b2a:	6470      	str	r0, [r6, #68]	; 0x44
 8024b2c:	4602      	mov	r2, r0
 8024b2e:	b920      	cbnz	r0, 8024b3a <strtok+0x26>
 8024b30:	4b10      	ldr	r3, [pc, #64]	; (8024b74 <strtok+0x60>)
 8024b32:	4811      	ldr	r0, [pc, #68]	; (8024b78 <strtok+0x64>)
 8024b34:	215b      	movs	r1, #91	; 0x5b
 8024b36:	f000 f939 	bl	8024dac <__assert_func>
 8024b3a:	e9c0 4400 	strd	r4, r4, [r0]
 8024b3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8024b42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8024b46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8024b4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8024b4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8024b52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8024b56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8024b5a:	6184      	str	r4, [r0, #24]
 8024b5c:	7704      	strb	r4, [r0, #28]
 8024b5e:	6244      	str	r4, [r0, #36]	; 0x24
 8024b60:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8024b62:	2301      	movs	r3, #1
 8024b64:	4628      	mov	r0, r5
 8024b66:	b002      	add	sp, #8
 8024b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024b6c:	f000 b806 	b.w	8024b7c <__strtok_r>
 8024b70:	20001050 	.word	0x20001050
 8024b74:	0802f9f5 	.word	0x0802f9f5
 8024b78:	0802fa0c 	.word	0x0802fa0c

08024b7c <__strtok_r>:
 8024b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b7e:	b908      	cbnz	r0, 8024b84 <__strtok_r+0x8>
 8024b80:	6810      	ldr	r0, [r2, #0]
 8024b82:	b188      	cbz	r0, 8024ba8 <__strtok_r+0x2c>
 8024b84:	4604      	mov	r4, r0
 8024b86:	4620      	mov	r0, r4
 8024b88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8024b8c:	460f      	mov	r7, r1
 8024b8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8024b92:	b91e      	cbnz	r6, 8024b9c <__strtok_r+0x20>
 8024b94:	b965      	cbnz	r5, 8024bb0 <__strtok_r+0x34>
 8024b96:	6015      	str	r5, [r2, #0]
 8024b98:	4628      	mov	r0, r5
 8024b9a:	e005      	b.n	8024ba8 <__strtok_r+0x2c>
 8024b9c:	42b5      	cmp	r5, r6
 8024b9e:	d1f6      	bne.n	8024b8e <__strtok_r+0x12>
 8024ba0:	2b00      	cmp	r3, #0
 8024ba2:	d1f0      	bne.n	8024b86 <__strtok_r+0xa>
 8024ba4:	6014      	str	r4, [r2, #0]
 8024ba6:	7003      	strb	r3, [r0, #0]
 8024ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024baa:	461c      	mov	r4, r3
 8024bac:	e00c      	b.n	8024bc8 <__strtok_r+0x4c>
 8024bae:	b915      	cbnz	r5, 8024bb6 <__strtok_r+0x3a>
 8024bb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024bb4:	460e      	mov	r6, r1
 8024bb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8024bba:	42ab      	cmp	r3, r5
 8024bbc:	d1f7      	bne.n	8024bae <__strtok_r+0x32>
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	d0f3      	beq.n	8024baa <__strtok_r+0x2e>
 8024bc2:	2300      	movs	r3, #0
 8024bc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024bc8:	6014      	str	r4, [r2, #0]
 8024bca:	e7ed      	b.n	8024ba8 <__strtok_r+0x2c>

08024bcc <_localeconv_r>:
 8024bcc:	4800      	ldr	r0, [pc, #0]	; (8024bd0 <_localeconv_r+0x4>)
 8024bce:	4770      	bx	lr
 8024bd0:	20001144 	.word	0x20001144

08024bd4 <_close_r>:
 8024bd4:	b538      	push	{r3, r4, r5, lr}
 8024bd6:	4d06      	ldr	r5, [pc, #24]	; (8024bf0 <_close_r+0x1c>)
 8024bd8:	2300      	movs	r3, #0
 8024bda:	4604      	mov	r4, r0
 8024bdc:	4608      	mov	r0, r1
 8024bde:	602b      	str	r3, [r5, #0]
 8024be0:	f7f1 fd27 	bl	8016632 <_close>
 8024be4:	1c43      	adds	r3, r0, #1
 8024be6:	d102      	bne.n	8024bee <_close_r+0x1a>
 8024be8:	682b      	ldr	r3, [r5, #0]
 8024bea:	b103      	cbz	r3, 8024bee <_close_r+0x1a>
 8024bec:	6023      	str	r3, [r4, #0]
 8024bee:	bd38      	pop	{r3, r4, r5, pc}
 8024bf0:	20013204 	.word	0x20013204

08024bf4 <_reclaim_reent>:
 8024bf4:	4b29      	ldr	r3, [pc, #164]	; (8024c9c <_reclaim_reent+0xa8>)
 8024bf6:	681b      	ldr	r3, [r3, #0]
 8024bf8:	4283      	cmp	r3, r0
 8024bfa:	b570      	push	{r4, r5, r6, lr}
 8024bfc:	4604      	mov	r4, r0
 8024bfe:	d04b      	beq.n	8024c98 <_reclaim_reent+0xa4>
 8024c00:	69c3      	ldr	r3, [r0, #28]
 8024c02:	b143      	cbz	r3, 8024c16 <_reclaim_reent+0x22>
 8024c04:	68db      	ldr	r3, [r3, #12]
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	d144      	bne.n	8024c94 <_reclaim_reent+0xa0>
 8024c0a:	69e3      	ldr	r3, [r4, #28]
 8024c0c:	6819      	ldr	r1, [r3, #0]
 8024c0e:	b111      	cbz	r1, 8024c16 <_reclaim_reent+0x22>
 8024c10:	4620      	mov	r0, r4
 8024c12:	f000 ff63 	bl	8025adc <_free_r>
 8024c16:	6961      	ldr	r1, [r4, #20]
 8024c18:	b111      	cbz	r1, 8024c20 <_reclaim_reent+0x2c>
 8024c1a:	4620      	mov	r0, r4
 8024c1c:	f000 ff5e 	bl	8025adc <_free_r>
 8024c20:	69e1      	ldr	r1, [r4, #28]
 8024c22:	b111      	cbz	r1, 8024c2a <_reclaim_reent+0x36>
 8024c24:	4620      	mov	r0, r4
 8024c26:	f000 ff59 	bl	8025adc <_free_r>
 8024c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8024c2c:	b111      	cbz	r1, 8024c34 <_reclaim_reent+0x40>
 8024c2e:	4620      	mov	r0, r4
 8024c30:	f000 ff54 	bl	8025adc <_free_r>
 8024c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024c36:	b111      	cbz	r1, 8024c3e <_reclaim_reent+0x4a>
 8024c38:	4620      	mov	r0, r4
 8024c3a:	f000 ff4f 	bl	8025adc <_free_r>
 8024c3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024c40:	b111      	cbz	r1, 8024c48 <_reclaim_reent+0x54>
 8024c42:	4620      	mov	r0, r4
 8024c44:	f000 ff4a 	bl	8025adc <_free_r>
 8024c48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024c4a:	b111      	cbz	r1, 8024c52 <_reclaim_reent+0x5e>
 8024c4c:	4620      	mov	r0, r4
 8024c4e:	f000 ff45 	bl	8025adc <_free_r>
 8024c52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8024c54:	b111      	cbz	r1, 8024c5c <_reclaim_reent+0x68>
 8024c56:	4620      	mov	r0, r4
 8024c58:	f000 ff40 	bl	8025adc <_free_r>
 8024c5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8024c5e:	b111      	cbz	r1, 8024c66 <_reclaim_reent+0x72>
 8024c60:	4620      	mov	r0, r4
 8024c62:	f000 ff3b 	bl	8025adc <_free_r>
 8024c66:	6a23      	ldr	r3, [r4, #32]
 8024c68:	b1b3      	cbz	r3, 8024c98 <_reclaim_reent+0xa4>
 8024c6a:	4620      	mov	r0, r4
 8024c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024c70:	4718      	bx	r3
 8024c72:	5949      	ldr	r1, [r1, r5]
 8024c74:	b941      	cbnz	r1, 8024c88 <_reclaim_reent+0x94>
 8024c76:	3504      	adds	r5, #4
 8024c78:	69e3      	ldr	r3, [r4, #28]
 8024c7a:	2d80      	cmp	r5, #128	; 0x80
 8024c7c:	68d9      	ldr	r1, [r3, #12]
 8024c7e:	d1f8      	bne.n	8024c72 <_reclaim_reent+0x7e>
 8024c80:	4620      	mov	r0, r4
 8024c82:	f000 ff2b 	bl	8025adc <_free_r>
 8024c86:	e7c0      	b.n	8024c0a <_reclaim_reent+0x16>
 8024c88:	680e      	ldr	r6, [r1, #0]
 8024c8a:	4620      	mov	r0, r4
 8024c8c:	f000 ff26 	bl	8025adc <_free_r>
 8024c90:	4631      	mov	r1, r6
 8024c92:	e7ef      	b.n	8024c74 <_reclaim_reent+0x80>
 8024c94:	2500      	movs	r5, #0
 8024c96:	e7ef      	b.n	8024c78 <_reclaim_reent+0x84>
 8024c98:	bd70      	pop	{r4, r5, r6, pc}
 8024c9a:	bf00      	nop
 8024c9c:	20001050 	.word	0x20001050

08024ca0 <_lseek_r>:
 8024ca0:	b538      	push	{r3, r4, r5, lr}
 8024ca2:	4d07      	ldr	r5, [pc, #28]	; (8024cc0 <_lseek_r+0x20>)
 8024ca4:	4604      	mov	r4, r0
 8024ca6:	4608      	mov	r0, r1
 8024ca8:	4611      	mov	r1, r2
 8024caa:	2200      	movs	r2, #0
 8024cac:	602a      	str	r2, [r5, #0]
 8024cae:	461a      	mov	r2, r3
 8024cb0:	f7f1 fce6 	bl	8016680 <_lseek>
 8024cb4:	1c43      	adds	r3, r0, #1
 8024cb6:	d102      	bne.n	8024cbe <_lseek_r+0x1e>
 8024cb8:	682b      	ldr	r3, [r5, #0]
 8024cba:	b103      	cbz	r3, 8024cbe <_lseek_r+0x1e>
 8024cbc:	6023      	str	r3, [r4, #0]
 8024cbe:	bd38      	pop	{r3, r4, r5, pc}
 8024cc0:	20013204 	.word	0x20013204

08024cc4 <_read_r>:
 8024cc4:	b538      	push	{r3, r4, r5, lr}
 8024cc6:	4d07      	ldr	r5, [pc, #28]	; (8024ce4 <_read_r+0x20>)
 8024cc8:	4604      	mov	r4, r0
 8024cca:	4608      	mov	r0, r1
 8024ccc:	4611      	mov	r1, r2
 8024cce:	2200      	movs	r2, #0
 8024cd0:	602a      	str	r2, [r5, #0]
 8024cd2:	461a      	mov	r2, r3
 8024cd4:	f7f1 fc74 	bl	80165c0 <_read>
 8024cd8:	1c43      	adds	r3, r0, #1
 8024cda:	d102      	bne.n	8024ce2 <_read_r+0x1e>
 8024cdc:	682b      	ldr	r3, [r5, #0]
 8024cde:	b103      	cbz	r3, 8024ce2 <_read_r+0x1e>
 8024ce0:	6023      	str	r3, [r4, #0]
 8024ce2:	bd38      	pop	{r3, r4, r5, pc}
 8024ce4:	20013204 	.word	0x20013204

08024ce8 <_write_r>:
 8024ce8:	b538      	push	{r3, r4, r5, lr}
 8024cea:	4d07      	ldr	r5, [pc, #28]	; (8024d08 <_write_r+0x20>)
 8024cec:	4604      	mov	r4, r0
 8024cee:	4608      	mov	r0, r1
 8024cf0:	4611      	mov	r1, r2
 8024cf2:	2200      	movs	r2, #0
 8024cf4:	602a      	str	r2, [r5, #0]
 8024cf6:	461a      	mov	r2, r3
 8024cf8:	f7f1 fc7f 	bl	80165fa <_write>
 8024cfc:	1c43      	adds	r3, r0, #1
 8024cfe:	d102      	bne.n	8024d06 <_write_r+0x1e>
 8024d00:	682b      	ldr	r3, [r5, #0]
 8024d02:	b103      	cbz	r3, 8024d06 <_write_r+0x1e>
 8024d04:	6023      	str	r3, [r4, #0]
 8024d06:	bd38      	pop	{r3, r4, r5, pc}
 8024d08:	20013204 	.word	0x20013204

08024d0c <__errno>:
 8024d0c:	4b01      	ldr	r3, [pc, #4]	; (8024d14 <__errno+0x8>)
 8024d0e:	6818      	ldr	r0, [r3, #0]
 8024d10:	4770      	bx	lr
 8024d12:	bf00      	nop
 8024d14:	20001050 	.word	0x20001050

08024d18 <__libc_init_array>:
 8024d18:	b570      	push	{r4, r5, r6, lr}
 8024d1a:	4d0d      	ldr	r5, [pc, #52]	; (8024d50 <__libc_init_array+0x38>)
 8024d1c:	4c0d      	ldr	r4, [pc, #52]	; (8024d54 <__libc_init_array+0x3c>)
 8024d1e:	1b64      	subs	r4, r4, r5
 8024d20:	10a4      	asrs	r4, r4, #2
 8024d22:	2600      	movs	r6, #0
 8024d24:	42a6      	cmp	r6, r4
 8024d26:	d109      	bne.n	8024d3c <__libc_init_array+0x24>
 8024d28:	4d0b      	ldr	r5, [pc, #44]	; (8024d58 <__libc_init_array+0x40>)
 8024d2a:	4c0c      	ldr	r4, [pc, #48]	; (8024d5c <__libc_init_array+0x44>)
 8024d2c:	f003 fc94 	bl	8028658 <_init>
 8024d30:	1b64      	subs	r4, r4, r5
 8024d32:	10a4      	asrs	r4, r4, #2
 8024d34:	2600      	movs	r6, #0
 8024d36:	42a6      	cmp	r6, r4
 8024d38:	d105      	bne.n	8024d46 <__libc_init_array+0x2e>
 8024d3a:	bd70      	pop	{r4, r5, r6, pc}
 8024d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8024d40:	4798      	blx	r3
 8024d42:	3601      	adds	r6, #1
 8024d44:	e7ee      	b.n	8024d24 <__libc_init_array+0xc>
 8024d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8024d4a:	4798      	blx	r3
 8024d4c:	3601      	adds	r6, #1
 8024d4e:	e7f2      	b.n	8024d36 <__libc_init_array+0x1e>
 8024d50:	080300c0 	.word	0x080300c0
 8024d54:	080300c0 	.word	0x080300c0
 8024d58:	080300c0 	.word	0x080300c0
 8024d5c:	080300c4 	.word	0x080300c4

08024d60 <__retarget_lock_init_recursive>:
 8024d60:	4770      	bx	lr

08024d62 <__retarget_lock_acquire_recursive>:
 8024d62:	4770      	bx	lr

08024d64 <__retarget_lock_release_recursive>:
 8024d64:	4770      	bx	lr

08024d66 <strcpy>:
 8024d66:	4603      	mov	r3, r0
 8024d68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024d6c:	f803 2b01 	strb.w	r2, [r3], #1
 8024d70:	2a00      	cmp	r2, #0
 8024d72:	d1f9      	bne.n	8024d68 <strcpy+0x2>
 8024d74:	4770      	bx	lr

08024d76 <memcpy>:
 8024d76:	440a      	add	r2, r1
 8024d78:	4291      	cmp	r1, r2
 8024d7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8024d7e:	d100      	bne.n	8024d82 <memcpy+0xc>
 8024d80:	4770      	bx	lr
 8024d82:	b510      	push	{r4, lr}
 8024d84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024d8c:	4291      	cmp	r1, r2
 8024d8e:	d1f9      	bne.n	8024d84 <memcpy+0xe>
 8024d90:	bd10      	pop	{r4, pc}

08024d92 <copysignf>:
 8024d92:	ee10 3a10 	vmov	r3, s0
 8024d96:	ee10 2a90 	vmov	r2, s1
 8024d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024d9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8024da2:	4313      	orrs	r3, r2
 8024da4:	ee00 3a10 	vmov	s0, r3
 8024da8:	4770      	bx	lr
	...

08024dac <__assert_func>:
 8024dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024dae:	4614      	mov	r4, r2
 8024db0:	461a      	mov	r2, r3
 8024db2:	4b09      	ldr	r3, [pc, #36]	; (8024dd8 <__assert_func+0x2c>)
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	4605      	mov	r5, r0
 8024db8:	68d8      	ldr	r0, [r3, #12]
 8024dba:	b14c      	cbz	r4, 8024dd0 <__assert_func+0x24>
 8024dbc:	4b07      	ldr	r3, [pc, #28]	; (8024ddc <__assert_func+0x30>)
 8024dbe:	9100      	str	r1, [sp, #0]
 8024dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024dc4:	4906      	ldr	r1, [pc, #24]	; (8024de0 <__assert_func+0x34>)
 8024dc6:	462b      	mov	r3, r5
 8024dc8:	f001 fc48 	bl	802665c <fiprintf>
 8024dcc:	f001 fd20 	bl	8026810 <abort>
 8024dd0:	4b04      	ldr	r3, [pc, #16]	; (8024de4 <__assert_func+0x38>)
 8024dd2:	461c      	mov	r4, r3
 8024dd4:	e7f3      	b.n	8024dbe <__assert_func+0x12>
 8024dd6:	bf00      	nop
 8024dd8:	20001050 	.word	0x20001050
 8024ddc:	0802fa66 	.word	0x0802fa66
 8024de0:	0802fa73 	.word	0x0802fa73
 8024de4:	0802faa1 	.word	0x0802faa1

08024de8 <quorem>:
 8024de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dec:	6903      	ldr	r3, [r0, #16]
 8024dee:	690c      	ldr	r4, [r1, #16]
 8024df0:	42a3      	cmp	r3, r4
 8024df2:	4607      	mov	r7, r0
 8024df4:	db7e      	blt.n	8024ef4 <quorem+0x10c>
 8024df6:	3c01      	subs	r4, #1
 8024df8:	f101 0814 	add.w	r8, r1, #20
 8024dfc:	f100 0514 	add.w	r5, r0, #20
 8024e00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024e04:	9301      	str	r3, [sp, #4]
 8024e06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024e0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024e0e:	3301      	adds	r3, #1
 8024e10:	429a      	cmp	r2, r3
 8024e12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024e16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024e1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8024e1e:	d331      	bcc.n	8024e84 <quorem+0x9c>
 8024e20:	f04f 0e00 	mov.w	lr, #0
 8024e24:	4640      	mov	r0, r8
 8024e26:	46ac      	mov	ip, r5
 8024e28:	46f2      	mov	sl, lr
 8024e2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8024e2e:	b293      	uxth	r3, r2
 8024e30:	fb06 e303 	mla	r3, r6, r3, lr
 8024e34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024e38:	0c1a      	lsrs	r2, r3, #16
 8024e3a:	b29b      	uxth	r3, r3
 8024e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8024e40:	f8dc a000 	ldr.w	sl, [ip]
 8024e44:	fa13 f38a 	uxtah	r3, r3, sl
 8024e48:	fb06 220e 	mla	r2, r6, lr, r2
 8024e4c:	9300      	str	r3, [sp, #0]
 8024e4e:	9b00      	ldr	r3, [sp, #0]
 8024e50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024e54:	b292      	uxth	r2, r2
 8024e56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8024e5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024e5e:	f8bd 3000 	ldrh.w	r3, [sp]
 8024e62:	4581      	cmp	r9, r0
 8024e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024e68:	f84c 3b04 	str.w	r3, [ip], #4
 8024e6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8024e70:	d2db      	bcs.n	8024e2a <quorem+0x42>
 8024e72:	f855 300b 	ldr.w	r3, [r5, fp]
 8024e76:	b92b      	cbnz	r3, 8024e84 <quorem+0x9c>
 8024e78:	9b01      	ldr	r3, [sp, #4]
 8024e7a:	3b04      	subs	r3, #4
 8024e7c:	429d      	cmp	r5, r3
 8024e7e:	461a      	mov	r2, r3
 8024e80:	d32c      	bcc.n	8024edc <quorem+0xf4>
 8024e82:	613c      	str	r4, [r7, #16]
 8024e84:	4638      	mov	r0, r7
 8024e86:	f001 f9a5 	bl	80261d4 <__mcmp>
 8024e8a:	2800      	cmp	r0, #0
 8024e8c:	db22      	blt.n	8024ed4 <quorem+0xec>
 8024e8e:	3601      	adds	r6, #1
 8024e90:	4629      	mov	r1, r5
 8024e92:	2000      	movs	r0, #0
 8024e94:	f858 2b04 	ldr.w	r2, [r8], #4
 8024e98:	f8d1 c000 	ldr.w	ip, [r1]
 8024e9c:	b293      	uxth	r3, r2
 8024e9e:	1ac3      	subs	r3, r0, r3
 8024ea0:	0c12      	lsrs	r2, r2, #16
 8024ea2:	fa13 f38c 	uxtah	r3, r3, ip
 8024ea6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8024eaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024eae:	b29b      	uxth	r3, r3
 8024eb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024eb4:	45c1      	cmp	r9, r8
 8024eb6:	f841 3b04 	str.w	r3, [r1], #4
 8024eba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8024ebe:	d2e9      	bcs.n	8024e94 <quorem+0xac>
 8024ec0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024ec4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024ec8:	b922      	cbnz	r2, 8024ed4 <quorem+0xec>
 8024eca:	3b04      	subs	r3, #4
 8024ecc:	429d      	cmp	r5, r3
 8024ece:	461a      	mov	r2, r3
 8024ed0:	d30a      	bcc.n	8024ee8 <quorem+0x100>
 8024ed2:	613c      	str	r4, [r7, #16]
 8024ed4:	4630      	mov	r0, r6
 8024ed6:	b003      	add	sp, #12
 8024ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024edc:	6812      	ldr	r2, [r2, #0]
 8024ede:	3b04      	subs	r3, #4
 8024ee0:	2a00      	cmp	r2, #0
 8024ee2:	d1ce      	bne.n	8024e82 <quorem+0x9a>
 8024ee4:	3c01      	subs	r4, #1
 8024ee6:	e7c9      	b.n	8024e7c <quorem+0x94>
 8024ee8:	6812      	ldr	r2, [r2, #0]
 8024eea:	3b04      	subs	r3, #4
 8024eec:	2a00      	cmp	r2, #0
 8024eee:	d1f0      	bne.n	8024ed2 <quorem+0xea>
 8024ef0:	3c01      	subs	r4, #1
 8024ef2:	e7eb      	b.n	8024ecc <quorem+0xe4>
 8024ef4:	2000      	movs	r0, #0
 8024ef6:	e7ee      	b.n	8024ed6 <quorem+0xee>

08024ef8 <_dtoa_r>:
 8024ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024efc:	ed2d 8b04 	vpush	{d8-d9}
 8024f00:	69c5      	ldr	r5, [r0, #28]
 8024f02:	b093      	sub	sp, #76	; 0x4c
 8024f04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8024f08:	ec57 6b10 	vmov	r6, r7, d0
 8024f0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8024f10:	9107      	str	r1, [sp, #28]
 8024f12:	4604      	mov	r4, r0
 8024f14:	920a      	str	r2, [sp, #40]	; 0x28
 8024f16:	930d      	str	r3, [sp, #52]	; 0x34
 8024f18:	b975      	cbnz	r5, 8024f38 <_dtoa_r+0x40>
 8024f1a:	2010      	movs	r0, #16
 8024f1c:	f000 fe2a 	bl	8025b74 <malloc>
 8024f20:	4602      	mov	r2, r0
 8024f22:	61e0      	str	r0, [r4, #28]
 8024f24:	b920      	cbnz	r0, 8024f30 <_dtoa_r+0x38>
 8024f26:	4bae      	ldr	r3, [pc, #696]	; (80251e0 <_dtoa_r+0x2e8>)
 8024f28:	21ef      	movs	r1, #239	; 0xef
 8024f2a:	48ae      	ldr	r0, [pc, #696]	; (80251e4 <_dtoa_r+0x2ec>)
 8024f2c:	f7ff ff3e 	bl	8024dac <__assert_func>
 8024f30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024f34:	6005      	str	r5, [r0, #0]
 8024f36:	60c5      	str	r5, [r0, #12]
 8024f38:	69e3      	ldr	r3, [r4, #28]
 8024f3a:	6819      	ldr	r1, [r3, #0]
 8024f3c:	b151      	cbz	r1, 8024f54 <_dtoa_r+0x5c>
 8024f3e:	685a      	ldr	r2, [r3, #4]
 8024f40:	604a      	str	r2, [r1, #4]
 8024f42:	2301      	movs	r3, #1
 8024f44:	4093      	lsls	r3, r2
 8024f46:	608b      	str	r3, [r1, #8]
 8024f48:	4620      	mov	r0, r4
 8024f4a:	f000 ff07 	bl	8025d5c <_Bfree>
 8024f4e:	69e3      	ldr	r3, [r4, #28]
 8024f50:	2200      	movs	r2, #0
 8024f52:	601a      	str	r2, [r3, #0]
 8024f54:	1e3b      	subs	r3, r7, #0
 8024f56:	bfbb      	ittet	lt
 8024f58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8024f5c:	9303      	strlt	r3, [sp, #12]
 8024f5e:	2300      	movge	r3, #0
 8024f60:	2201      	movlt	r2, #1
 8024f62:	bfac      	ite	ge
 8024f64:	f8c8 3000 	strge.w	r3, [r8]
 8024f68:	f8c8 2000 	strlt.w	r2, [r8]
 8024f6c:	4b9e      	ldr	r3, [pc, #632]	; (80251e8 <_dtoa_r+0x2f0>)
 8024f6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8024f72:	ea33 0308 	bics.w	r3, r3, r8
 8024f76:	d11b      	bne.n	8024fb0 <_dtoa_r+0xb8>
 8024f78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024f7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8024f7e:	6013      	str	r3, [r2, #0]
 8024f80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8024f84:	4333      	orrs	r3, r6
 8024f86:	f000 8593 	beq.w	8025ab0 <_dtoa_r+0xbb8>
 8024f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024f8c:	b963      	cbnz	r3, 8024fa8 <_dtoa_r+0xb0>
 8024f8e:	4b97      	ldr	r3, [pc, #604]	; (80251ec <_dtoa_r+0x2f4>)
 8024f90:	e027      	b.n	8024fe2 <_dtoa_r+0xea>
 8024f92:	4b97      	ldr	r3, [pc, #604]	; (80251f0 <_dtoa_r+0x2f8>)
 8024f94:	9300      	str	r3, [sp, #0]
 8024f96:	3308      	adds	r3, #8
 8024f98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024f9a:	6013      	str	r3, [r2, #0]
 8024f9c:	9800      	ldr	r0, [sp, #0]
 8024f9e:	b013      	add	sp, #76	; 0x4c
 8024fa0:	ecbd 8b04 	vpop	{d8-d9}
 8024fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fa8:	4b90      	ldr	r3, [pc, #576]	; (80251ec <_dtoa_r+0x2f4>)
 8024faa:	9300      	str	r3, [sp, #0]
 8024fac:	3303      	adds	r3, #3
 8024fae:	e7f3      	b.n	8024f98 <_dtoa_r+0xa0>
 8024fb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024fb4:	2200      	movs	r2, #0
 8024fb6:	ec51 0b17 	vmov	r0, r1, d7
 8024fba:	eeb0 8a47 	vmov.f32	s16, s14
 8024fbe:	eef0 8a67 	vmov.f32	s17, s15
 8024fc2:	2300      	movs	r3, #0
 8024fc4:	f7db fd90 	bl	8000ae8 <__aeabi_dcmpeq>
 8024fc8:	4681      	mov	r9, r0
 8024fca:	b160      	cbz	r0, 8024fe6 <_dtoa_r+0xee>
 8024fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024fce:	2301      	movs	r3, #1
 8024fd0:	6013      	str	r3, [r2, #0]
 8024fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024fd4:	2b00      	cmp	r3, #0
 8024fd6:	f000 8568 	beq.w	8025aaa <_dtoa_r+0xbb2>
 8024fda:	4b86      	ldr	r3, [pc, #536]	; (80251f4 <_dtoa_r+0x2fc>)
 8024fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024fde:	6013      	str	r3, [r2, #0]
 8024fe0:	3b01      	subs	r3, #1
 8024fe2:	9300      	str	r3, [sp, #0]
 8024fe4:	e7da      	b.n	8024f9c <_dtoa_r+0xa4>
 8024fe6:	aa10      	add	r2, sp, #64	; 0x40
 8024fe8:	a911      	add	r1, sp, #68	; 0x44
 8024fea:	4620      	mov	r0, r4
 8024fec:	eeb0 0a48 	vmov.f32	s0, s16
 8024ff0:	eef0 0a68 	vmov.f32	s1, s17
 8024ff4:	f001 f994 	bl	8026320 <__d2b>
 8024ff8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8024ffc:	4682      	mov	sl, r0
 8024ffe:	2d00      	cmp	r5, #0
 8025000:	d07f      	beq.n	8025102 <_dtoa_r+0x20a>
 8025002:	ee18 3a90 	vmov	r3, s17
 8025006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802500a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802500e:	ec51 0b18 	vmov	r0, r1, d8
 8025012:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802501a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802501e:	4619      	mov	r1, r3
 8025020:	2200      	movs	r2, #0
 8025022:	4b75      	ldr	r3, [pc, #468]	; (80251f8 <_dtoa_r+0x300>)
 8025024:	f7db f940 	bl	80002a8 <__aeabi_dsub>
 8025028:	a367      	add	r3, pc, #412	; (adr r3, 80251c8 <_dtoa_r+0x2d0>)
 802502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802502e:	f7db faf3 	bl	8000618 <__aeabi_dmul>
 8025032:	a367      	add	r3, pc, #412	; (adr r3, 80251d0 <_dtoa_r+0x2d8>)
 8025034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025038:	f7db f938 	bl	80002ac <__adddf3>
 802503c:	4606      	mov	r6, r0
 802503e:	4628      	mov	r0, r5
 8025040:	460f      	mov	r7, r1
 8025042:	f7db fa7f 	bl	8000544 <__aeabi_i2d>
 8025046:	a364      	add	r3, pc, #400	; (adr r3, 80251d8 <_dtoa_r+0x2e0>)
 8025048:	e9d3 2300 	ldrd	r2, r3, [r3]
 802504c:	f7db fae4 	bl	8000618 <__aeabi_dmul>
 8025050:	4602      	mov	r2, r0
 8025052:	460b      	mov	r3, r1
 8025054:	4630      	mov	r0, r6
 8025056:	4639      	mov	r1, r7
 8025058:	f7db f928 	bl	80002ac <__adddf3>
 802505c:	4606      	mov	r6, r0
 802505e:	460f      	mov	r7, r1
 8025060:	f7db fd8a 	bl	8000b78 <__aeabi_d2iz>
 8025064:	2200      	movs	r2, #0
 8025066:	4683      	mov	fp, r0
 8025068:	2300      	movs	r3, #0
 802506a:	4630      	mov	r0, r6
 802506c:	4639      	mov	r1, r7
 802506e:	f7db fd45 	bl	8000afc <__aeabi_dcmplt>
 8025072:	b148      	cbz	r0, 8025088 <_dtoa_r+0x190>
 8025074:	4658      	mov	r0, fp
 8025076:	f7db fa65 	bl	8000544 <__aeabi_i2d>
 802507a:	4632      	mov	r2, r6
 802507c:	463b      	mov	r3, r7
 802507e:	f7db fd33 	bl	8000ae8 <__aeabi_dcmpeq>
 8025082:	b908      	cbnz	r0, 8025088 <_dtoa_r+0x190>
 8025084:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8025088:	f1bb 0f16 	cmp.w	fp, #22
 802508c:	d857      	bhi.n	802513e <_dtoa_r+0x246>
 802508e:	4b5b      	ldr	r3, [pc, #364]	; (80251fc <_dtoa_r+0x304>)
 8025090:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025098:	ec51 0b18 	vmov	r0, r1, d8
 802509c:	f7db fd2e 	bl	8000afc <__aeabi_dcmplt>
 80250a0:	2800      	cmp	r0, #0
 80250a2:	d04e      	beq.n	8025142 <_dtoa_r+0x24a>
 80250a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80250a8:	2300      	movs	r3, #0
 80250aa:	930c      	str	r3, [sp, #48]	; 0x30
 80250ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80250ae:	1b5b      	subs	r3, r3, r5
 80250b0:	1e5a      	subs	r2, r3, #1
 80250b2:	bf45      	ittet	mi
 80250b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80250b8:	9305      	strmi	r3, [sp, #20]
 80250ba:	2300      	movpl	r3, #0
 80250bc:	2300      	movmi	r3, #0
 80250be:	9206      	str	r2, [sp, #24]
 80250c0:	bf54      	ite	pl
 80250c2:	9305      	strpl	r3, [sp, #20]
 80250c4:	9306      	strmi	r3, [sp, #24]
 80250c6:	f1bb 0f00 	cmp.w	fp, #0
 80250ca:	db3c      	blt.n	8025146 <_dtoa_r+0x24e>
 80250cc:	9b06      	ldr	r3, [sp, #24]
 80250ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80250d2:	445b      	add	r3, fp
 80250d4:	9306      	str	r3, [sp, #24]
 80250d6:	2300      	movs	r3, #0
 80250d8:	9308      	str	r3, [sp, #32]
 80250da:	9b07      	ldr	r3, [sp, #28]
 80250dc:	2b09      	cmp	r3, #9
 80250de:	d868      	bhi.n	80251b2 <_dtoa_r+0x2ba>
 80250e0:	2b05      	cmp	r3, #5
 80250e2:	bfc4      	itt	gt
 80250e4:	3b04      	subgt	r3, #4
 80250e6:	9307      	strgt	r3, [sp, #28]
 80250e8:	9b07      	ldr	r3, [sp, #28]
 80250ea:	f1a3 0302 	sub.w	r3, r3, #2
 80250ee:	bfcc      	ite	gt
 80250f0:	2500      	movgt	r5, #0
 80250f2:	2501      	movle	r5, #1
 80250f4:	2b03      	cmp	r3, #3
 80250f6:	f200 8085 	bhi.w	8025204 <_dtoa_r+0x30c>
 80250fa:	e8df f003 	tbb	[pc, r3]
 80250fe:	3b2e      	.short	0x3b2e
 8025100:	5839      	.short	0x5839
 8025102:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8025106:	441d      	add	r5, r3
 8025108:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802510c:	2b20      	cmp	r3, #32
 802510e:	bfc1      	itttt	gt
 8025110:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025114:	fa08 f803 	lslgt.w	r8, r8, r3
 8025118:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802511c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8025120:	bfd6      	itet	le
 8025122:	f1c3 0320 	rsble	r3, r3, #32
 8025126:	ea48 0003 	orrgt.w	r0, r8, r3
 802512a:	fa06 f003 	lslle.w	r0, r6, r3
 802512e:	f7db f9f9 	bl	8000524 <__aeabi_ui2d>
 8025132:	2201      	movs	r2, #1
 8025134:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8025138:	3d01      	subs	r5, #1
 802513a:	920e      	str	r2, [sp, #56]	; 0x38
 802513c:	e76f      	b.n	802501e <_dtoa_r+0x126>
 802513e:	2301      	movs	r3, #1
 8025140:	e7b3      	b.n	80250aa <_dtoa_r+0x1b2>
 8025142:	900c      	str	r0, [sp, #48]	; 0x30
 8025144:	e7b2      	b.n	80250ac <_dtoa_r+0x1b4>
 8025146:	9b05      	ldr	r3, [sp, #20]
 8025148:	eba3 030b 	sub.w	r3, r3, fp
 802514c:	9305      	str	r3, [sp, #20]
 802514e:	f1cb 0300 	rsb	r3, fp, #0
 8025152:	9308      	str	r3, [sp, #32]
 8025154:	2300      	movs	r3, #0
 8025156:	930b      	str	r3, [sp, #44]	; 0x2c
 8025158:	e7bf      	b.n	80250da <_dtoa_r+0x1e2>
 802515a:	2300      	movs	r3, #0
 802515c:	9309      	str	r3, [sp, #36]	; 0x24
 802515e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025160:	2b00      	cmp	r3, #0
 8025162:	dc52      	bgt.n	802520a <_dtoa_r+0x312>
 8025164:	2301      	movs	r3, #1
 8025166:	9301      	str	r3, [sp, #4]
 8025168:	9304      	str	r3, [sp, #16]
 802516a:	461a      	mov	r2, r3
 802516c:	920a      	str	r2, [sp, #40]	; 0x28
 802516e:	e00b      	b.n	8025188 <_dtoa_r+0x290>
 8025170:	2301      	movs	r3, #1
 8025172:	e7f3      	b.n	802515c <_dtoa_r+0x264>
 8025174:	2300      	movs	r3, #0
 8025176:	9309      	str	r3, [sp, #36]	; 0x24
 8025178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802517a:	445b      	add	r3, fp
 802517c:	9301      	str	r3, [sp, #4]
 802517e:	3301      	adds	r3, #1
 8025180:	2b01      	cmp	r3, #1
 8025182:	9304      	str	r3, [sp, #16]
 8025184:	bfb8      	it	lt
 8025186:	2301      	movlt	r3, #1
 8025188:	69e0      	ldr	r0, [r4, #28]
 802518a:	2100      	movs	r1, #0
 802518c:	2204      	movs	r2, #4
 802518e:	f102 0614 	add.w	r6, r2, #20
 8025192:	429e      	cmp	r6, r3
 8025194:	d93d      	bls.n	8025212 <_dtoa_r+0x31a>
 8025196:	6041      	str	r1, [r0, #4]
 8025198:	4620      	mov	r0, r4
 802519a:	f000 fd9f 	bl	8025cdc <_Balloc>
 802519e:	9000      	str	r0, [sp, #0]
 80251a0:	2800      	cmp	r0, #0
 80251a2:	d139      	bne.n	8025218 <_dtoa_r+0x320>
 80251a4:	4b16      	ldr	r3, [pc, #88]	; (8025200 <_dtoa_r+0x308>)
 80251a6:	4602      	mov	r2, r0
 80251a8:	f240 11af 	movw	r1, #431	; 0x1af
 80251ac:	e6bd      	b.n	8024f2a <_dtoa_r+0x32>
 80251ae:	2301      	movs	r3, #1
 80251b0:	e7e1      	b.n	8025176 <_dtoa_r+0x27e>
 80251b2:	2501      	movs	r5, #1
 80251b4:	2300      	movs	r3, #0
 80251b6:	9307      	str	r3, [sp, #28]
 80251b8:	9509      	str	r5, [sp, #36]	; 0x24
 80251ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80251be:	9301      	str	r3, [sp, #4]
 80251c0:	9304      	str	r3, [sp, #16]
 80251c2:	2200      	movs	r2, #0
 80251c4:	2312      	movs	r3, #18
 80251c6:	e7d1      	b.n	802516c <_dtoa_r+0x274>
 80251c8:	636f4361 	.word	0x636f4361
 80251cc:	3fd287a7 	.word	0x3fd287a7
 80251d0:	8b60c8b3 	.word	0x8b60c8b3
 80251d4:	3fc68a28 	.word	0x3fc68a28
 80251d8:	509f79fb 	.word	0x509f79fb
 80251dc:	3fd34413 	.word	0x3fd34413
 80251e0:	0802f9f5 	.word	0x0802f9f5
 80251e4:	0802faaf 	.word	0x0802faaf
 80251e8:	7ff00000 	.word	0x7ff00000
 80251ec:	0802faab 	.word	0x0802faab
 80251f0:	0802faa2 	.word	0x0802faa2
 80251f4:	0802f9d2 	.word	0x0802f9d2
 80251f8:	3ff80000 	.word	0x3ff80000
 80251fc:	0802fba0 	.word	0x0802fba0
 8025200:	0802fb07 	.word	0x0802fb07
 8025204:	2301      	movs	r3, #1
 8025206:	9309      	str	r3, [sp, #36]	; 0x24
 8025208:	e7d7      	b.n	80251ba <_dtoa_r+0x2c2>
 802520a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802520c:	9301      	str	r3, [sp, #4]
 802520e:	9304      	str	r3, [sp, #16]
 8025210:	e7ba      	b.n	8025188 <_dtoa_r+0x290>
 8025212:	3101      	adds	r1, #1
 8025214:	0052      	lsls	r2, r2, #1
 8025216:	e7ba      	b.n	802518e <_dtoa_r+0x296>
 8025218:	69e3      	ldr	r3, [r4, #28]
 802521a:	9a00      	ldr	r2, [sp, #0]
 802521c:	601a      	str	r2, [r3, #0]
 802521e:	9b04      	ldr	r3, [sp, #16]
 8025220:	2b0e      	cmp	r3, #14
 8025222:	f200 80a8 	bhi.w	8025376 <_dtoa_r+0x47e>
 8025226:	2d00      	cmp	r5, #0
 8025228:	f000 80a5 	beq.w	8025376 <_dtoa_r+0x47e>
 802522c:	f1bb 0f00 	cmp.w	fp, #0
 8025230:	dd38      	ble.n	80252a4 <_dtoa_r+0x3ac>
 8025232:	4bc0      	ldr	r3, [pc, #768]	; (8025534 <_dtoa_r+0x63c>)
 8025234:	f00b 020f 	and.w	r2, fp, #15
 8025238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802523c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8025240:	e9d3 6700 	ldrd	r6, r7, [r3]
 8025244:	ea4f 182b 	mov.w	r8, fp, asr #4
 8025248:	d019      	beq.n	802527e <_dtoa_r+0x386>
 802524a:	4bbb      	ldr	r3, [pc, #748]	; (8025538 <_dtoa_r+0x640>)
 802524c:	ec51 0b18 	vmov	r0, r1, d8
 8025250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025254:	f7db fb0a 	bl	800086c <__aeabi_ddiv>
 8025258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802525c:	f008 080f 	and.w	r8, r8, #15
 8025260:	2503      	movs	r5, #3
 8025262:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8025538 <_dtoa_r+0x640>
 8025266:	f1b8 0f00 	cmp.w	r8, #0
 802526a:	d10a      	bne.n	8025282 <_dtoa_r+0x38a>
 802526c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025270:	4632      	mov	r2, r6
 8025272:	463b      	mov	r3, r7
 8025274:	f7db fafa 	bl	800086c <__aeabi_ddiv>
 8025278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802527c:	e02b      	b.n	80252d6 <_dtoa_r+0x3de>
 802527e:	2502      	movs	r5, #2
 8025280:	e7ef      	b.n	8025262 <_dtoa_r+0x36a>
 8025282:	f018 0f01 	tst.w	r8, #1
 8025286:	d008      	beq.n	802529a <_dtoa_r+0x3a2>
 8025288:	4630      	mov	r0, r6
 802528a:	4639      	mov	r1, r7
 802528c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8025290:	f7db f9c2 	bl	8000618 <__aeabi_dmul>
 8025294:	3501      	adds	r5, #1
 8025296:	4606      	mov	r6, r0
 8025298:	460f      	mov	r7, r1
 802529a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802529e:	f109 0908 	add.w	r9, r9, #8
 80252a2:	e7e0      	b.n	8025266 <_dtoa_r+0x36e>
 80252a4:	f000 809f 	beq.w	80253e6 <_dtoa_r+0x4ee>
 80252a8:	f1cb 0600 	rsb	r6, fp, #0
 80252ac:	4ba1      	ldr	r3, [pc, #644]	; (8025534 <_dtoa_r+0x63c>)
 80252ae:	4fa2      	ldr	r7, [pc, #648]	; (8025538 <_dtoa_r+0x640>)
 80252b0:	f006 020f 	and.w	r2, r6, #15
 80252b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80252b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252bc:	ec51 0b18 	vmov	r0, r1, d8
 80252c0:	f7db f9aa 	bl	8000618 <__aeabi_dmul>
 80252c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80252c8:	1136      	asrs	r6, r6, #4
 80252ca:	2300      	movs	r3, #0
 80252cc:	2502      	movs	r5, #2
 80252ce:	2e00      	cmp	r6, #0
 80252d0:	d17e      	bne.n	80253d0 <_dtoa_r+0x4d8>
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	d1d0      	bne.n	8025278 <_dtoa_r+0x380>
 80252d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80252dc:	2b00      	cmp	r3, #0
 80252de:	f000 8084 	beq.w	80253ea <_dtoa_r+0x4f2>
 80252e2:	4b96      	ldr	r3, [pc, #600]	; (802553c <_dtoa_r+0x644>)
 80252e4:	2200      	movs	r2, #0
 80252e6:	4640      	mov	r0, r8
 80252e8:	4649      	mov	r1, r9
 80252ea:	f7db fc07 	bl	8000afc <__aeabi_dcmplt>
 80252ee:	2800      	cmp	r0, #0
 80252f0:	d07b      	beq.n	80253ea <_dtoa_r+0x4f2>
 80252f2:	9b04      	ldr	r3, [sp, #16]
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	d078      	beq.n	80253ea <_dtoa_r+0x4f2>
 80252f8:	9b01      	ldr	r3, [sp, #4]
 80252fa:	2b00      	cmp	r3, #0
 80252fc:	dd39      	ble.n	8025372 <_dtoa_r+0x47a>
 80252fe:	4b90      	ldr	r3, [pc, #576]	; (8025540 <_dtoa_r+0x648>)
 8025300:	2200      	movs	r2, #0
 8025302:	4640      	mov	r0, r8
 8025304:	4649      	mov	r1, r9
 8025306:	f7db f987 	bl	8000618 <__aeabi_dmul>
 802530a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802530e:	9e01      	ldr	r6, [sp, #4]
 8025310:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8025314:	3501      	adds	r5, #1
 8025316:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802531a:	4628      	mov	r0, r5
 802531c:	f7db f912 	bl	8000544 <__aeabi_i2d>
 8025320:	4642      	mov	r2, r8
 8025322:	464b      	mov	r3, r9
 8025324:	f7db f978 	bl	8000618 <__aeabi_dmul>
 8025328:	4b86      	ldr	r3, [pc, #536]	; (8025544 <_dtoa_r+0x64c>)
 802532a:	2200      	movs	r2, #0
 802532c:	f7da ffbe 	bl	80002ac <__adddf3>
 8025330:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8025334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025338:	9303      	str	r3, [sp, #12]
 802533a:	2e00      	cmp	r6, #0
 802533c:	d158      	bne.n	80253f0 <_dtoa_r+0x4f8>
 802533e:	4b82      	ldr	r3, [pc, #520]	; (8025548 <_dtoa_r+0x650>)
 8025340:	2200      	movs	r2, #0
 8025342:	4640      	mov	r0, r8
 8025344:	4649      	mov	r1, r9
 8025346:	f7da ffaf 	bl	80002a8 <__aeabi_dsub>
 802534a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802534e:	4680      	mov	r8, r0
 8025350:	4689      	mov	r9, r1
 8025352:	f7db fbf1 	bl	8000b38 <__aeabi_dcmpgt>
 8025356:	2800      	cmp	r0, #0
 8025358:	f040 8296 	bne.w	8025888 <_dtoa_r+0x990>
 802535c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8025360:	4640      	mov	r0, r8
 8025362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025366:	4649      	mov	r1, r9
 8025368:	f7db fbc8 	bl	8000afc <__aeabi_dcmplt>
 802536c:	2800      	cmp	r0, #0
 802536e:	f040 8289 	bne.w	8025884 <_dtoa_r+0x98c>
 8025372:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025378:	2b00      	cmp	r3, #0
 802537a:	f2c0 814e 	blt.w	802561a <_dtoa_r+0x722>
 802537e:	f1bb 0f0e 	cmp.w	fp, #14
 8025382:	f300 814a 	bgt.w	802561a <_dtoa_r+0x722>
 8025386:	4b6b      	ldr	r3, [pc, #428]	; (8025534 <_dtoa_r+0x63c>)
 8025388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802538c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025392:	2b00      	cmp	r3, #0
 8025394:	f280 80dc 	bge.w	8025550 <_dtoa_r+0x658>
 8025398:	9b04      	ldr	r3, [sp, #16]
 802539a:	2b00      	cmp	r3, #0
 802539c:	f300 80d8 	bgt.w	8025550 <_dtoa_r+0x658>
 80253a0:	f040 826f 	bne.w	8025882 <_dtoa_r+0x98a>
 80253a4:	4b68      	ldr	r3, [pc, #416]	; (8025548 <_dtoa_r+0x650>)
 80253a6:	2200      	movs	r2, #0
 80253a8:	4640      	mov	r0, r8
 80253aa:	4649      	mov	r1, r9
 80253ac:	f7db f934 	bl	8000618 <__aeabi_dmul>
 80253b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80253b4:	f7db fbb6 	bl	8000b24 <__aeabi_dcmpge>
 80253b8:	9e04      	ldr	r6, [sp, #16]
 80253ba:	4637      	mov	r7, r6
 80253bc:	2800      	cmp	r0, #0
 80253be:	f040 8245 	bne.w	802584c <_dtoa_r+0x954>
 80253c2:	9d00      	ldr	r5, [sp, #0]
 80253c4:	2331      	movs	r3, #49	; 0x31
 80253c6:	f805 3b01 	strb.w	r3, [r5], #1
 80253ca:	f10b 0b01 	add.w	fp, fp, #1
 80253ce:	e241      	b.n	8025854 <_dtoa_r+0x95c>
 80253d0:	07f2      	lsls	r2, r6, #31
 80253d2:	d505      	bpl.n	80253e0 <_dtoa_r+0x4e8>
 80253d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80253d8:	f7db f91e 	bl	8000618 <__aeabi_dmul>
 80253dc:	3501      	adds	r5, #1
 80253de:	2301      	movs	r3, #1
 80253e0:	1076      	asrs	r6, r6, #1
 80253e2:	3708      	adds	r7, #8
 80253e4:	e773      	b.n	80252ce <_dtoa_r+0x3d6>
 80253e6:	2502      	movs	r5, #2
 80253e8:	e775      	b.n	80252d6 <_dtoa_r+0x3de>
 80253ea:	9e04      	ldr	r6, [sp, #16]
 80253ec:	465f      	mov	r7, fp
 80253ee:	e792      	b.n	8025316 <_dtoa_r+0x41e>
 80253f0:	9900      	ldr	r1, [sp, #0]
 80253f2:	4b50      	ldr	r3, [pc, #320]	; (8025534 <_dtoa_r+0x63c>)
 80253f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80253f8:	4431      	add	r1, r6
 80253fa:	9102      	str	r1, [sp, #8]
 80253fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80253fe:	eeb0 9a47 	vmov.f32	s18, s14
 8025402:	eef0 9a67 	vmov.f32	s19, s15
 8025406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802540a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802540e:	2900      	cmp	r1, #0
 8025410:	d044      	beq.n	802549c <_dtoa_r+0x5a4>
 8025412:	494e      	ldr	r1, [pc, #312]	; (802554c <_dtoa_r+0x654>)
 8025414:	2000      	movs	r0, #0
 8025416:	f7db fa29 	bl	800086c <__aeabi_ddiv>
 802541a:	ec53 2b19 	vmov	r2, r3, d9
 802541e:	f7da ff43 	bl	80002a8 <__aeabi_dsub>
 8025422:	9d00      	ldr	r5, [sp, #0]
 8025424:	ec41 0b19 	vmov	d9, r0, r1
 8025428:	4649      	mov	r1, r9
 802542a:	4640      	mov	r0, r8
 802542c:	f7db fba4 	bl	8000b78 <__aeabi_d2iz>
 8025430:	4606      	mov	r6, r0
 8025432:	f7db f887 	bl	8000544 <__aeabi_i2d>
 8025436:	4602      	mov	r2, r0
 8025438:	460b      	mov	r3, r1
 802543a:	4640      	mov	r0, r8
 802543c:	4649      	mov	r1, r9
 802543e:	f7da ff33 	bl	80002a8 <__aeabi_dsub>
 8025442:	3630      	adds	r6, #48	; 0x30
 8025444:	f805 6b01 	strb.w	r6, [r5], #1
 8025448:	ec53 2b19 	vmov	r2, r3, d9
 802544c:	4680      	mov	r8, r0
 802544e:	4689      	mov	r9, r1
 8025450:	f7db fb54 	bl	8000afc <__aeabi_dcmplt>
 8025454:	2800      	cmp	r0, #0
 8025456:	d164      	bne.n	8025522 <_dtoa_r+0x62a>
 8025458:	4642      	mov	r2, r8
 802545a:	464b      	mov	r3, r9
 802545c:	4937      	ldr	r1, [pc, #220]	; (802553c <_dtoa_r+0x644>)
 802545e:	2000      	movs	r0, #0
 8025460:	f7da ff22 	bl	80002a8 <__aeabi_dsub>
 8025464:	ec53 2b19 	vmov	r2, r3, d9
 8025468:	f7db fb48 	bl	8000afc <__aeabi_dcmplt>
 802546c:	2800      	cmp	r0, #0
 802546e:	f040 80b6 	bne.w	80255de <_dtoa_r+0x6e6>
 8025472:	9b02      	ldr	r3, [sp, #8]
 8025474:	429d      	cmp	r5, r3
 8025476:	f43f af7c 	beq.w	8025372 <_dtoa_r+0x47a>
 802547a:	4b31      	ldr	r3, [pc, #196]	; (8025540 <_dtoa_r+0x648>)
 802547c:	ec51 0b19 	vmov	r0, r1, d9
 8025480:	2200      	movs	r2, #0
 8025482:	f7db f8c9 	bl	8000618 <__aeabi_dmul>
 8025486:	4b2e      	ldr	r3, [pc, #184]	; (8025540 <_dtoa_r+0x648>)
 8025488:	ec41 0b19 	vmov	d9, r0, r1
 802548c:	2200      	movs	r2, #0
 802548e:	4640      	mov	r0, r8
 8025490:	4649      	mov	r1, r9
 8025492:	f7db f8c1 	bl	8000618 <__aeabi_dmul>
 8025496:	4680      	mov	r8, r0
 8025498:	4689      	mov	r9, r1
 802549a:	e7c5      	b.n	8025428 <_dtoa_r+0x530>
 802549c:	ec51 0b17 	vmov	r0, r1, d7
 80254a0:	f7db f8ba 	bl	8000618 <__aeabi_dmul>
 80254a4:	9b02      	ldr	r3, [sp, #8]
 80254a6:	9d00      	ldr	r5, [sp, #0]
 80254a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80254aa:	ec41 0b19 	vmov	d9, r0, r1
 80254ae:	4649      	mov	r1, r9
 80254b0:	4640      	mov	r0, r8
 80254b2:	f7db fb61 	bl	8000b78 <__aeabi_d2iz>
 80254b6:	4606      	mov	r6, r0
 80254b8:	f7db f844 	bl	8000544 <__aeabi_i2d>
 80254bc:	3630      	adds	r6, #48	; 0x30
 80254be:	4602      	mov	r2, r0
 80254c0:	460b      	mov	r3, r1
 80254c2:	4640      	mov	r0, r8
 80254c4:	4649      	mov	r1, r9
 80254c6:	f7da feef 	bl	80002a8 <__aeabi_dsub>
 80254ca:	f805 6b01 	strb.w	r6, [r5], #1
 80254ce:	9b02      	ldr	r3, [sp, #8]
 80254d0:	429d      	cmp	r5, r3
 80254d2:	4680      	mov	r8, r0
 80254d4:	4689      	mov	r9, r1
 80254d6:	f04f 0200 	mov.w	r2, #0
 80254da:	d124      	bne.n	8025526 <_dtoa_r+0x62e>
 80254dc:	4b1b      	ldr	r3, [pc, #108]	; (802554c <_dtoa_r+0x654>)
 80254de:	ec51 0b19 	vmov	r0, r1, d9
 80254e2:	f7da fee3 	bl	80002ac <__adddf3>
 80254e6:	4602      	mov	r2, r0
 80254e8:	460b      	mov	r3, r1
 80254ea:	4640      	mov	r0, r8
 80254ec:	4649      	mov	r1, r9
 80254ee:	f7db fb23 	bl	8000b38 <__aeabi_dcmpgt>
 80254f2:	2800      	cmp	r0, #0
 80254f4:	d173      	bne.n	80255de <_dtoa_r+0x6e6>
 80254f6:	ec53 2b19 	vmov	r2, r3, d9
 80254fa:	4914      	ldr	r1, [pc, #80]	; (802554c <_dtoa_r+0x654>)
 80254fc:	2000      	movs	r0, #0
 80254fe:	f7da fed3 	bl	80002a8 <__aeabi_dsub>
 8025502:	4602      	mov	r2, r0
 8025504:	460b      	mov	r3, r1
 8025506:	4640      	mov	r0, r8
 8025508:	4649      	mov	r1, r9
 802550a:	f7db faf7 	bl	8000afc <__aeabi_dcmplt>
 802550e:	2800      	cmp	r0, #0
 8025510:	f43f af2f 	beq.w	8025372 <_dtoa_r+0x47a>
 8025514:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025516:	1e6b      	subs	r3, r5, #1
 8025518:	930f      	str	r3, [sp, #60]	; 0x3c
 802551a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802551e:	2b30      	cmp	r3, #48	; 0x30
 8025520:	d0f8      	beq.n	8025514 <_dtoa_r+0x61c>
 8025522:	46bb      	mov	fp, r7
 8025524:	e04a      	b.n	80255bc <_dtoa_r+0x6c4>
 8025526:	4b06      	ldr	r3, [pc, #24]	; (8025540 <_dtoa_r+0x648>)
 8025528:	f7db f876 	bl	8000618 <__aeabi_dmul>
 802552c:	4680      	mov	r8, r0
 802552e:	4689      	mov	r9, r1
 8025530:	e7bd      	b.n	80254ae <_dtoa_r+0x5b6>
 8025532:	bf00      	nop
 8025534:	0802fba0 	.word	0x0802fba0
 8025538:	0802fb78 	.word	0x0802fb78
 802553c:	3ff00000 	.word	0x3ff00000
 8025540:	40240000 	.word	0x40240000
 8025544:	401c0000 	.word	0x401c0000
 8025548:	40140000 	.word	0x40140000
 802554c:	3fe00000 	.word	0x3fe00000
 8025550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025554:	9d00      	ldr	r5, [sp, #0]
 8025556:	4642      	mov	r2, r8
 8025558:	464b      	mov	r3, r9
 802555a:	4630      	mov	r0, r6
 802555c:	4639      	mov	r1, r7
 802555e:	f7db f985 	bl	800086c <__aeabi_ddiv>
 8025562:	f7db fb09 	bl	8000b78 <__aeabi_d2iz>
 8025566:	9001      	str	r0, [sp, #4]
 8025568:	f7da ffec 	bl	8000544 <__aeabi_i2d>
 802556c:	4642      	mov	r2, r8
 802556e:	464b      	mov	r3, r9
 8025570:	f7db f852 	bl	8000618 <__aeabi_dmul>
 8025574:	4602      	mov	r2, r0
 8025576:	460b      	mov	r3, r1
 8025578:	4630      	mov	r0, r6
 802557a:	4639      	mov	r1, r7
 802557c:	f7da fe94 	bl	80002a8 <__aeabi_dsub>
 8025580:	9e01      	ldr	r6, [sp, #4]
 8025582:	9f04      	ldr	r7, [sp, #16]
 8025584:	3630      	adds	r6, #48	; 0x30
 8025586:	f805 6b01 	strb.w	r6, [r5], #1
 802558a:	9e00      	ldr	r6, [sp, #0]
 802558c:	1bae      	subs	r6, r5, r6
 802558e:	42b7      	cmp	r7, r6
 8025590:	4602      	mov	r2, r0
 8025592:	460b      	mov	r3, r1
 8025594:	d134      	bne.n	8025600 <_dtoa_r+0x708>
 8025596:	f7da fe89 	bl	80002ac <__adddf3>
 802559a:	4642      	mov	r2, r8
 802559c:	464b      	mov	r3, r9
 802559e:	4606      	mov	r6, r0
 80255a0:	460f      	mov	r7, r1
 80255a2:	f7db fac9 	bl	8000b38 <__aeabi_dcmpgt>
 80255a6:	b9c8      	cbnz	r0, 80255dc <_dtoa_r+0x6e4>
 80255a8:	4642      	mov	r2, r8
 80255aa:	464b      	mov	r3, r9
 80255ac:	4630      	mov	r0, r6
 80255ae:	4639      	mov	r1, r7
 80255b0:	f7db fa9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80255b4:	b110      	cbz	r0, 80255bc <_dtoa_r+0x6c4>
 80255b6:	9b01      	ldr	r3, [sp, #4]
 80255b8:	07db      	lsls	r3, r3, #31
 80255ba:	d40f      	bmi.n	80255dc <_dtoa_r+0x6e4>
 80255bc:	4651      	mov	r1, sl
 80255be:	4620      	mov	r0, r4
 80255c0:	f000 fbcc 	bl	8025d5c <_Bfree>
 80255c4:	2300      	movs	r3, #0
 80255c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80255c8:	702b      	strb	r3, [r5, #0]
 80255ca:	f10b 0301 	add.w	r3, fp, #1
 80255ce:	6013      	str	r3, [r2, #0]
 80255d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80255d2:	2b00      	cmp	r3, #0
 80255d4:	f43f ace2 	beq.w	8024f9c <_dtoa_r+0xa4>
 80255d8:	601d      	str	r5, [r3, #0]
 80255da:	e4df      	b.n	8024f9c <_dtoa_r+0xa4>
 80255dc:	465f      	mov	r7, fp
 80255de:	462b      	mov	r3, r5
 80255e0:	461d      	mov	r5, r3
 80255e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80255e6:	2a39      	cmp	r2, #57	; 0x39
 80255e8:	d106      	bne.n	80255f8 <_dtoa_r+0x700>
 80255ea:	9a00      	ldr	r2, [sp, #0]
 80255ec:	429a      	cmp	r2, r3
 80255ee:	d1f7      	bne.n	80255e0 <_dtoa_r+0x6e8>
 80255f0:	9900      	ldr	r1, [sp, #0]
 80255f2:	2230      	movs	r2, #48	; 0x30
 80255f4:	3701      	adds	r7, #1
 80255f6:	700a      	strb	r2, [r1, #0]
 80255f8:	781a      	ldrb	r2, [r3, #0]
 80255fa:	3201      	adds	r2, #1
 80255fc:	701a      	strb	r2, [r3, #0]
 80255fe:	e790      	b.n	8025522 <_dtoa_r+0x62a>
 8025600:	4ba3      	ldr	r3, [pc, #652]	; (8025890 <_dtoa_r+0x998>)
 8025602:	2200      	movs	r2, #0
 8025604:	f7db f808 	bl	8000618 <__aeabi_dmul>
 8025608:	2200      	movs	r2, #0
 802560a:	2300      	movs	r3, #0
 802560c:	4606      	mov	r6, r0
 802560e:	460f      	mov	r7, r1
 8025610:	f7db fa6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8025614:	2800      	cmp	r0, #0
 8025616:	d09e      	beq.n	8025556 <_dtoa_r+0x65e>
 8025618:	e7d0      	b.n	80255bc <_dtoa_r+0x6c4>
 802561a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802561c:	2a00      	cmp	r2, #0
 802561e:	f000 80ca 	beq.w	80257b6 <_dtoa_r+0x8be>
 8025622:	9a07      	ldr	r2, [sp, #28]
 8025624:	2a01      	cmp	r2, #1
 8025626:	f300 80ad 	bgt.w	8025784 <_dtoa_r+0x88c>
 802562a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802562c:	2a00      	cmp	r2, #0
 802562e:	f000 80a5 	beq.w	802577c <_dtoa_r+0x884>
 8025632:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025636:	9e08      	ldr	r6, [sp, #32]
 8025638:	9d05      	ldr	r5, [sp, #20]
 802563a:	9a05      	ldr	r2, [sp, #20]
 802563c:	441a      	add	r2, r3
 802563e:	9205      	str	r2, [sp, #20]
 8025640:	9a06      	ldr	r2, [sp, #24]
 8025642:	2101      	movs	r1, #1
 8025644:	441a      	add	r2, r3
 8025646:	4620      	mov	r0, r4
 8025648:	9206      	str	r2, [sp, #24]
 802564a:	f000 fc3d 	bl	8025ec8 <__i2b>
 802564e:	4607      	mov	r7, r0
 8025650:	b165      	cbz	r5, 802566c <_dtoa_r+0x774>
 8025652:	9b06      	ldr	r3, [sp, #24]
 8025654:	2b00      	cmp	r3, #0
 8025656:	dd09      	ble.n	802566c <_dtoa_r+0x774>
 8025658:	42ab      	cmp	r3, r5
 802565a:	9a05      	ldr	r2, [sp, #20]
 802565c:	bfa8      	it	ge
 802565e:	462b      	movge	r3, r5
 8025660:	1ad2      	subs	r2, r2, r3
 8025662:	9205      	str	r2, [sp, #20]
 8025664:	9a06      	ldr	r2, [sp, #24]
 8025666:	1aed      	subs	r5, r5, r3
 8025668:	1ad3      	subs	r3, r2, r3
 802566a:	9306      	str	r3, [sp, #24]
 802566c:	9b08      	ldr	r3, [sp, #32]
 802566e:	b1f3      	cbz	r3, 80256ae <_dtoa_r+0x7b6>
 8025670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025672:	2b00      	cmp	r3, #0
 8025674:	f000 80a3 	beq.w	80257be <_dtoa_r+0x8c6>
 8025678:	2e00      	cmp	r6, #0
 802567a:	dd10      	ble.n	802569e <_dtoa_r+0x7a6>
 802567c:	4639      	mov	r1, r7
 802567e:	4632      	mov	r2, r6
 8025680:	4620      	mov	r0, r4
 8025682:	f000 fce1 	bl	8026048 <__pow5mult>
 8025686:	4652      	mov	r2, sl
 8025688:	4601      	mov	r1, r0
 802568a:	4607      	mov	r7, r0
 802568c:	4620      	mov	r0, r4
 802568e:	f000 fc31 	bl	8025ef4 <__multiply>
 8025692:	4651      	mov	r1, sl
 8025694:	4680      	mov	r8, r0
 8025696:	4620      	mov	r0, r4
 8025698:	f000 fb60 	bl	8025d5c <_Bfree>
 802569c:	46c2      	mov	sl, r8
 802569e:	9b08      	ldr	r3, [sp, #32]
 80256a0:	1b9a      	subs	r2, r3, r6
 80256a2:	d004      	beq.n	80256ae <_dtoa_r+0x7b6>
 80256a4:	4651      	mov	r1, sl
 80256a6:	4620      	mov	r0, r4
 80256a8:	f000 fcce 	bl	8026048 <__pow5mult>
 80256ac:	4682      	mov	sl, r0
 80256ae:	2101      	movs	r1, #1
 80256b0:	4620      	mov	r0, r4
 80256b2:	f000 fc09 	bl	8025ec8 <__i2b>
 80256b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	4606      	mov	r6, r0
 80256bc:	f340 8081 	ble.w	80257c2 <_dtoa_r+0x8ca>
 80256c0:	461a      	mov	r2, r3
 80256c2:	4601      	mov	r1, r0
 80256c4:	4620      	mov	r0, r4
 80256c6:	f000 fcbf 	bl	8026048 <__pow5mult>
 80256ca:	9b07      	ldr	r3, [sp, #28]
 80256cc:	2b01      	cmp	r3, #1
 80256ce:	4606      	mov	r6, r0
 80256d0:	dd7a      	ble.n	80257c8 <_dtoa_r+0x8d0>
 80256d2:	f04f 0800 	mov.w	r8, #0
 80256d6:	6933      	ldr	r3, [r6, #16]
 80256d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80256dc:	6918      	ldr	r0, [r3, #16]
 80256de:	f000 fba5 	bl	8025e2c <__hi0bits>
 80256e2:	f1c0 0020 	rsb	r0, r0, #32
 80256e6:	9b06      	ldr	r3, [sp, #24]
 80256e8:	4418      	add	r0, r3
 80256ea:	f010 001f 	ands.w	r0, r0, #31
 80256ee:	f000 8094 	beq.w	802581a <_dtoa_r+0x922>
 80256f2:	f1c0 0320 	rsb	r3, r0, #32
 80256f6:	2b04      	cmp	r3, #4
 80256f8:	f340 8085 	ble.w	8025806 <_dtoa_r+0x90e>
 80256fc:	9b05      	ldr	r3, [sp, #20]
 80256fe:	f1c0 001c 	rsb	r0, r0, #28
 8025702:	4403      	add	r3, r0
 8025704:	9305      	str	r3, [sp, #20]
 8025706:	9b06      	ldr	r3, [sp, #24]
 8025708:	4403      	add	r3, r0
 802570a:	4405      	add	r5, r0
 802570c:	9306      	str	r3, [sp, #24]
 802570e:	9b05      	ldr	r3, [sp, #20]
 8025710:	2b00      	cmp	r3, #0
 8025712:	dd05      	ble.n	8025720 <_dtoa_r+0x828>
 8025714:	4651      	mov	r1, sl
 8025716:	461a      	mov	r2, r3
 8025718:	4620      	mov	r0, r4
 802571a:	f000 fcef 	bl	80260fc <__lshift>
 802571e:	4682      	mov	sl, r0
 8025720:	9b06      	ldr	r3, [sp, #24]
 8025722:	2b00      	cmp	r3, #0
 8025724:	dd05      	ble.n	8025732 <_dtoa_r+0x83a>
 8025726:	4631      	mov	r1, r6
 8025728:	461a      	mov	r2, r3
 802572a:	4620      	mov	r0, r4
 802572c:	f000 fce6 	bl	80260fc <__lshift>
 8025730:	4606      	mov	r6, r0
 8025732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025734:	2b00      	cmp	r3, #0
 8025736:	d072      	beq.n	802581e <_dtoa_r+0x926>
 8025738:	4631      	mov	r1, r6
 802573a:	4650      	mov	r0, sl
 802573c:	f000 fd4a 	bl	80261d4 <__mcmp>
 8025740:	2800      	cmp	r0, #0
 8025742:	da6c      	bge.n	802581e <_dtoa_r+0x926>
 8025744:	2300      	movs	r3, #0
 8025746:	4651      	mov	r1, sl
 8025748:	220a      	movs	r2, #10
 802574a:	4620      	mov	r0, r4
 802574c:	f000 fb28 	bl	8025da0 <__multadd>
 8025750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025752:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8025756:	4682      	mov	sl, r0
 8025758:	2b00      	cmp	r3, #0
 802575a:	f000 81b0 	beq.w	8025abe <_dtoa_r+0xbc6>
 802575e:	2300      	movs	r3, #0
 8025760:	4639      	mov	r1, r7
 8025762:	220a      	movs	r2, #10
 8025764:	4620      	mov	r0, r4
 8025766:	f000 fb1b 	bl	8025da0 <__multadd>
 802576a:	9b01      	ldr	r3, [sp, #4]
 802576c:	2b00      	cmp	r3, #0
 802576e:	4607      	mov	r7, r0
 8025770:	f300 8096 	bgt.w	80258a0 <_dtoa_r+0x9a8>
 8025774:	9b07      	ldr	r3, [sp, #28]
 8025776:	2b02      	cmp	r3, #2
 8025778:	dc59      	bgt.n	802582e <_dtoa_r+0x936>
 802577a:	e091      	b.n	80258a0 <_dtoa_r+0x9a8>
 802577c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802577e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8025782:	e758      	b.n	8025636 <_dtoa_r+0x73e>
 8025784:	9b04      	ldr	r3, [sp, #16]
 8025786:	1e5e      	subs	r6, r3, #1
 8025788:	9b08      	ldr	r3, [sp, #32]
 802578a:	42b3      	cmp	r3, r6
 802578c:	bfbf      	itttt	lt
 802578e:	9b08      	ldrlt	r3, [sp, #32]
 8025790:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8025792:	9608      	strlt	r6, [sp, #32]
 8025794:	1af3      	sublt	r3, r6, r3
 8025796:	bfb4      	ite	lt
 8025798:	18d2      	addlt	r2, r2, r3
 802579a:	1b9e      	subge	r6, r3, r6
 802579c:	9b04      	ldr	r3, [sp, #16]
 802579e:	bfbc      	itt	lt
 80257a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80257a2:	2600      	movlt	r6, #0
 80257a4:	2b00      	cmp	r3, #0
 80257a6:	bfb7      	itett	lt
 80257a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80257ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80257b0:	1a9d      	sublt	r5, r3, r2
 80257b2:	2300      	movlt	r3, #0
 80257b4:	e741      	b.n	802563a <_dtoa_r+0x742>
 80257b6:	9e08      	ldr	r6, [sp, #32]
 80257b8:	9d05      	ldr	r5, [sp, #20]
 80257ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80257bc:	e748      	b.n	8025650 <_dtoa_r+0x758>
 80257be:	9a08      	ldr	r2, [sp, #32]
 80257c0:	e770      	b.n	80256a4 <_dtoa_r+0x7ac>
 80257c2:	9b07      	ldr	r3, [sp, #28]
 80257c4:	2b01      	cmp	r3, #1
 80257c6:	dc19      	bgt.n	80257fc <_dtoa_r+0x904>
 80257c8:	9b02      	ldr	r3, [sp, #8]
 80257ca:	b9bb      	cbnz	r3, 80257fc <_dtoa_r+0x904>
 80257cc:	9b03      	ldr	r3, [sp, #12]
 80257ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80257d2:	b99b      	cbnz	r3, 80257fc <_dtoa_r+0x904>
 80257d4:	9b03      	ldr	r3, [sp, #12]
 80257d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80257da:	0d1b      	lsrs	r3, r3, #20
 80257dc:	051b      	lsls	r3, r3, #20
 80257de:	b183      	cbz	r3, 8025802 <_dtoa_r+0x90a>
 80257e0:	9b05      	ldr	r3, [sp, #20]
 80257e2:	3301      	adds	r3, #1
 80257e4:	9305      	str	r3, [sp, #20]
 80257e6:	9b06      	ldr	r3, [sp, #24]
 80257e8:	3301      	adds	r3, #1
 80257ea:	9306      	str	r3, [sp, #24]
 80257ec:	f04f 0801 	mov.w	r8, #1
 80257f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	f47f af6f 	bne.w	80256d6 <_dtoa_r+0x7de>
 80257f8:	2001      	movs	r0, #1
 80257fa:	e774      	b.n	80256e6 <_dtoa_r+0x7ee>
 80257fc:	f04f 0800 	mov.w	r8, #0
 8025800:	e7f6      	b.n	80257f0 <_dtoa_r+0x8f8>
 8025802:	4698      	mov	r8, r3
 8025804:	e7f4      	b.n	80257f0 <_dtoa_r+0x8f8>
 8025806:	d082      	beq.n	802570e <_dtoa_r+0x816>
 8025808:	9a05      	ldr	r2, [sp, #20]
 802580a:	331c      	adds	r3, #28
 802580c:	441a      	add	r2, r3
 802580e:	9205      	str	r2, [sp, #20]
 8025810:	9a06      	ldr	r2, [sp, #24]
 8025812:	441a      	add	r2, r3
 8025814:	441d      	add	r5, r3
 8025816:	9206      	str	r2, [sp, #24]
 8025818:	e779      	b.n	802570e <_dtoa_r+0x816>
 802581a:	4603      	mov	r3, r0
 802581c:	e7f4      	b.n	8025808 <_dtoa_r+0x910>
 802581e:	9b04      	ldr	r3, [sp, #16]
 8025820:	2b00      	cmp	r3, #0
 8025822:	dc37      	bgt.n	8025894 <_dtoa_r+0x99c>
 8025824:	9b07      	ldr	r3, [sp, #28]
 8025826:	2b02      	cmp	r3, #2
 8025828:	dd34      	ble.n	8025894 <_dtoa_r+0x99c>
 802582a:	9b04      	ldr	r3, [sp, #16]
 802582c:	9301      	str	r3, [sp, #4]
 802582e:	9b01      	ldr	r3, [sp, #4]
 8025830:	b963      	cbnz	r3, 802584c <_dtoa_r+0x954>
 8025832:	4631      	mov	r1, r6
 8025834:	2205      	movs	r2, #5
 8025836:	4620      	mov	r0, r4
 8025838:	f000 fab2 	bl	8025da0 <__multadd>
 802583c:	4601      	mov	r1, r0
 802583e:	4606      	mov	r6, r0
 8025840:	4650      	mov	r0, sl
 8025842:	f000 fcc7 	bl	80261d4 <__mcmp>
 8025846:	2800      	cmp	r0, #0
 8025848:	f73f adbb 	bgt.w	80253c2 <_dtoa_r+0x4ca>
 802584c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802584e:	9d00      	ldr	r5, [sp, #0]
 8025850:	ea6f 0b03 	mvn.w	fp, r3
 8025854:	f04f 0800 	mov.w	r8, #0
 8025858:	4631      	mov	r1, r6
 802585a:	4620      	mov	r0, r4
 802585c:	f000 fa7e 	bl	8025d5c <_Bfree>
 8025860:	2f00      	cmp	r7, #0
 8025862:	f43f aeab 	beq.w	80255bc <_dtoa_r+0x6c4>
 8025866:	f1b8 0f00 	cmp.w	r8, #0
 802586a:	d005      	beq.n	8025878 <_dtoa_r+0x980>
 802586c:	45b8      	cmp	r8, r7
 802586e:	d003      	beq.n	8025878 <_dtoa_r+0x980>
 8025870:	4641      	mov	r1, r8
 8025872:	4620      	mov	r0, r4
 8025874:	f000 fa72 	bl	8025d5c <_Bfree>
 8025878:	4639      	mov	r1, r7
 802587a:	4620      	mov	r0, r4
 802587c:	f000 fa6e 	bl	8025d5c <_Bfree>
 8025880:	e69c      	b.n	80255bc <_dtoa_r+0x6c4>
 8025882:	2600      	movs	r6, #0
 8025884:	4637      	mov	r7, r6
 8025886:	e7e1      	b.n	802584c <_dtoa_r+0x954>
 8025888:	46bb      	mov	fp, r7
 802588a:	4637      	mov	r7, r6
 802588c:	e599      	b.n	80253c2 <_dtoa_r+0x4ca>
 802588e:	bf00      	nop
 8025890:	40240000 	.word	0x40240000
 8025894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025896:	2b00      	cmp	r3, #0
 8025898:	f000 80c8 	beq.w	8025a2c <_dtoa_r+0xb34>
 802589c:	9b04      	ldr	r3, [sp, #16]
 802589e:	9301      	str	r3, [sp, #4]
 80258a0:	2d00      	cmp	r5, #0
 80258a2:	dd05      	ble.n	80258b0 <_dtoa_r+0x9b8>
 80258a4:	4639      	mov	r1, r7
 80258a6:	462a      	mov	r2, r5
 80258a8:	4620      	mov	r0, r4
 80258aa:	f000 fc27 	bl	80260fc <__lshift>
 80258ae:	4607      	mov	r7, r0
 80258b0:	f1b8 0f00 	cmp.w	r8, #0
 80258b4:	d05b      	beq.n	802596e <_dtoa_r+0xa76>
 80258b6:	6879      	ldr	r1, [r7, #4]
 80258b8:	4620      	mov	r0, r4
 80258ba:	f000 fa0f 	bl	8025cdc <_Balloc>
 80258be:	4605      	mov	r5, r0
 80258c0:	b928      	cbnz	r0, 80258ce <_dtoa_r+0x9d6>
 80258c2:	4b83      	ldr	r3, [pc, #524]	; (8025ad0 <_dtoa_r+0xbd8>)
 80258c4:	4602      	mov	r2, r0
 80258c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80258ca:	f7ff bb2e 	b.w	8024f2a <_dtoa_r+0x32>
 80258ce:	693a      	ldr	r2, [r7, #16]
 80258d0:	3202      	adds	r2, #2
 80258d2:	0092      	lsls	r2, r2, #2
 80258d4:	f107 010c 	add.w	r1, r7, #12
 80258d8:	300c      	adds	r0, #12
 80258da:	f7ff fa4c 	bl	8024d76 <memcpy>
 80258de:	2201      	movs	r2, #1
 80258e0:	4629      	mov	r1, r5
 80258e2:	4620      	mov	r0, r4
 80258e4:	f000 fc0a 	bl	80260fc <__lshift>
 80258e8:	9b00      	ldr	r3, [sp, #0]
 80258ea:	3301      	adds	r3, #1
 80258ec:	9304      	str	r3, [sp, #16]
 80258ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80258f2:	4413      	add	r3, r2
 80258f4:	9308      	str	r3, [sp, #32]
 80258f6:	9b02      	ldr	r3, [sp, #8]
 80258f8:	f003 0301 	and.w	r3, r3, #1
 80258fc:	46b8      	mov	r8, r7
 80258fe:	9306      	str	r3, [sp, #24]
 8025900:	4607      	mov	r7, r0
 8025902:	9b04      	ldr	r3, [sp, #16]
 8025904:	4631      	mov	r1, r6
 8025906:	3b01      	subs	r3, #1
 8025908:	4650      	mov	r0, sl
 802590a:	9301      	str	r3, [sp, #4]
 802590c:	f7ff fa6c 	bl	8024de8 <quorem>
 8025910:	4641      	mov	r1, r8
 8025912:	9002      	str	r0, [sp, #8]
 8025914:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8025918:	4650      	mov	r0, sl
 802591a:	f000 fc5b 	bl	80261d4 <__mcmp>
 802591e:	463a      	mov	r2, r7
 8025920:	9005      	str	r0, [sp, #20]
 8025922:	4631      	mov	r1, r6
 8025924:	4620      	mov	r0, r4
 8025926:	f000 fc71 	bl	802620c <__mdiff>
 802592a:	68c2      	ldr	r2, [r0, #12]
 802592c:	4605      	mov	r5, r0
 802592e:	bb02      	cbnz	r2, 8025972 <_dtoa_r+0xa7a>
 8025930:	4601      	mov	r1, r0
 8025932:	4650      	mov	r0, sl
 8025934:	f000 fc4e 	bl	80261d4 <__mcmp>
 8025938:	4602      	mov	r2, r0
 802593a:	4629      	mov	r1, r5
 802593c:	4620      	mov	r0, r4
 802593e:	9209      	str	r2, [sp, #36]	; 0x24
 8025940:	f000 fa0c 	bl	8025d5c <_Bfree>
 8025944:	9b07      	ldr	r3, [sp, #28]
 8025946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025948:	9d04      	ldr	r5, [sp, #16]
 802594a:	ea43 0102 	orr.w	r1, r3, r2
 802594e:	9b06      	ldr	r3, [sp, #24]
 8025950:	4319      	orrs	r1, r3
 8025952:	d110      	bne.n	8025976 <_dtoa_r+0xa7e>
 8025954:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8025958:	d029      	beq.n	80259ae <_dtoa_r+0xab6>
 802595a:	9b05      	ldr	r3, [sp, #20]
 802595c:	2b00      	cmp	r3, #0
 802595e:	dd02      	ble.n	8025966 <_dtoa_r+0xa6e>
 8025960:	9b02      	ldr	r3, [sp, #8]
 8025962:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8025966:	9b01      	ldr	r3, [sp, #4]
 8025968:	f883 9000 	strb.w	r9, [r3]
 802596c:	e774      	b.n	8025858 <_dtoa_r+0x960>
 802596e:	4638      	mov	r0, r7
 8025970:	e7ba      	b.n	80258e8 <_dtoa_r+0x9f0>
 8025972:	2201      	movs	r2, #1
 8025974:	e7e1      	b.n	802593a <_dtoa_r+0xa42>
 8025976:	9b05      	ldr	r3, [sp, #20]
 8025978:	2b00      	cmp	r3, #0
 802597a:	db04      	blt.n	8025986 <_dtoa_r+0xa8e>
 802597c:	9907      	ldr	r1, [sp, #28]
 802597e:	430b      	orrs	r3, r1
 8025980:	9906      	ldr	r1, [sp, #24]
 8025982:	430b      	orrs	r3, r1
 8025984:	d120      	bne.n	80259c8 <_dtoa_r+0xad0>
 8025986:	2a00      	cmp	r2, #0
 8025988:	dded      	ble.n	8025966 <_dtoa_r+0xa6e>
 802598a:	4651      	mov	r1, sl
 802598c:	2201      	movs	r2, #1
 802598e:	4620      	mov	r0, r4
 8025990:	f000 fbb4 	bl	80260fc <__lshift>
 8025994:	4631      	mov	r1, r6
 8025996:	4682      	mov	sl, r0
 8025998:	f000 fc1c 	bl	80261d4 <__mcmp>
 802599c:	2800      	cmp	r0, #0
 802599e:	dc03      	bgt.n	80259a8 <_dtoa_r+0xab0>
 80259a0:	d1e1      	bne.n	8025966 <_dtoa_r+0xa6e>
 80259a2:	f019 0f01 	tst.w	r9, #1
 80259a6:	d0de      	beq.n	8025966 <_dtoa_r+0xa6e>
 80259a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80259ac:	d1d8      	bne.n	8025960 <_dtoa_r+0xa68>
 80259ae:	9a01      	ldr	r2, [sp, #4]
 80259b0:	2339      	movs	r3, #57	; 0x39
 80259b2:	7013      	strb	r3, [r2, #0]
 80259b4:	462b      	mov	r3, r5
 80259b6:	461d      	mov	r5, r3
 80259b8:	3b01      	subs	r3, #1
 80259ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80259be:	2a39      	cmp	r2, #57	; 0x39
 80259c0:	d06c      	beq.n	8025a9c <_dtoa_r+0xba4>
 80259c2:	3201      	adds	r2, #1
 80259c4:	701a      	strb	r2, [r3, #0]
 80259c6:	e747      	b.n	8025858 <_dtoa_r+0x960>
 80259c8:	2a00      	cmp	r2, #0
 80259ca:	dd07      	ble.n	80259dc <_dtoa_r+0xae4>
 80259cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80259d0:	d0ed      	beq.n	80259ae <_dtoa_r+0xab6>
 80259d2:	9a01      	ldr	r2, [sp, #4]
 80259d4:	f109 0301 	add.w	r3, r9, #1
 80259d8:	7013      	strb	r3, [r2, #0]
 80259da:	e73d      	b.n	8025858 <_dtoa_r+0x960>
 80259dc:	9b04      	ldr	r3, [sp, #16]
 80259de:	9a08      	ldr	r2, [sp, #32]
 80259e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80259e4:	4293      	cmp	r3, r2
 80259e6:	d043      	beq.n	8025a70 <_dtoa_r+0xb78>
 80259e8:	4651      	mov	r1, sl
 80259ea:	2300      	movs	r3, #0
 80259ec:	220a      	movs	r2, #10
 80259ee:	4620      	mov	r0, r4
 80259f0:	f000 f9d6 	bl	8025da0 <__multadd>
 80259f4:	45b8      	cmp	r8, r7
 80259f6:	4682      	mov	sl, r0
 80259f8:	f04f 0300 	mov.w	r3, #0
 80259fc:	f04f 020a 	mov.w	r2, #10
 8025a00:	4641      	mov	r1, r8
 8025a02:	4620      	mov	r0, r4
 8025a04:	d107      	bne.n	8025a16 <_dtoa_r+0xb1e>
 8025a06:	f000 f9cb 	bl	8025da0 <__multadd>
 8025a0a:	4680      	mov	r8, r0
 8025a0c:	4607      	mov	r7, r0
 8025a0e:	9b04      	ldr	r3, [sp, #16]
 8025a10:	3301      	adds	r3, #1
 8025a12:	9304      	str	r3, [sp, #16]
 8025a14:	e775      	b.n	8025902 <_dtoa_r+0xa0a>
 8025a16:	f000 f9c3 	bl	8025da0 <__multadd>
 8025a1a:	4639      	mov	r1, r7
 8025a1c:	4680      	mov	r8, r0
 8025a1e:	2300      	movs	r3, #0
 8025a20:	220a      	movs	r2, #10
 8025a22:	4620      	mov	r0, r4
 8025a24:	f000 f9bc 	bl	8025da0 <__multadd>
 8025a28:	4607      	mov	r7, r0
 8025a2a:	e7f0      	b.n	8025a0e <_dtoa_r+0xb16>
 8025a2c:	9b04      	ldr	r3, [sp, #16]
 8025a2e:	9301      	str	r3, [sp, #4]
 8025a30:	9d00      	ldr	r5, [sp, #0]
 8025a32:	4631      	mov	r1, r6
 8025a34:	4650      	mov	r0, sl
 8025a36:	f7ff f9d7 	bl	8024de8 <quorem>
 8025a3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8025a3e:	9b00      	ldr	r3, [sp, #0]
 8025a40:	f805 9b01 	strb.w	r9, [r5], #1
 8025a44:	1aea      	subs	r2, r5, r3
 8025a46:	9b01      	ldr	r3, [sp, #4]
 8025a48:	4293      	cmp	r3, r2
 8025a4a:	dd07      	ble.n	8025a5c <_dtoa_r+0xb64>
 8025a4c:	4651      	mov	r1, sl
 8025a4e:	2300      	movs	r3, #0
 8025a50:	220a      	movs	r2, #10
 8025a52:	4620      	mov	r0, r4
 8025a54:	f000 f9a4 	bl	8025da0 <__multadd>
 8025a58:	4682      	mov	sl, r0
 8025a5a:	e7ea      	b.n	8025a32 <_dtoa_r+0xb3a>
 8025a5c:	9b01      	ldr	r3, [sp, #4]
 8025a5e:	2b00      	cmp	r3, #0
 8025a60:	bfc8      	it	gt
 8025a62:	461d      	movgt	r5, r3
 8025a64:	9b00      	ldr	r3, [sp, #0]
 8025a66:	bfd8      	it	le
 8025a68:	2501      	movle	r5, #1
 8025a6a:	441d      	add	r5, r3
 8025a6c:	f04f 0800 	mov.w	r8, #0
 8025a70:	4651      	mov	r1, sl
 8025a72:	2201      	movs	r2, #1
 8025a74:	4620      	mov	r0, r4
 8025a76:	f000 fb41 	bl	80260fc <__lshift>
 8025a7a:	4631      	mov	r1, r6
 8025a7c:	4682      	mov	sl, r0
 8025a7e:	f000 fba9 	bl	80261d4 <__mcmp>
 8025a82:	2800      	cmp	r0, #0
 8025a84:	dc96      	bgt.n	80259b4 <_dtoa_r+0xabc>
 8025a86:	d102      	bne.n	8025a8e <_dtoa_r+0xb96>
 8025a88:	f019 0f01 	tst.w	r9, #1
 8025a8c:	d192      	bne.n	80259b4 <_dtoa_r+0xabc>
 8025a8e:	462b      	mov	r3, r5
 8025a90:	461d      	mov	r5, r3
 8025a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025a96:	2a30      	cmp	r2, #48	; 0x30
 8025a98:	d0fa      	beq.n	8025a90 <_dtoa_r+0xb98>
 8025a9a:	e6dd      	b.n	8025858 <_dtoa_r+0x960>
 8025a9c:	9a00      	ldr	r2, [sp, #0]
 8025a9e:	429a      	cmp	r2, r3
 8025aa0:	d189      	bne.n	80259b6 <_dtoa_r+0xabe>
 8025aa2:	f10b 0b01 	add.w	fp, fp, #1
 8025aa6:	2331      	movs	r3, #49	; 0x31
 8025aa8:	e796      	b.n	80259d8 <_dtoa_r+0xae0>
 8025aaa:	4b0a      	ldr	r3, [pc, #40]	; (8025ad4 <_dtoa_r+0xbdc>)
 8025aac:	f7ff ba99 	b.w	8024fe2 <_dtoa_r+0xea>
 8025ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	f47f aa6d 	bne.w	8024f92 <_dtoa_r+0x9a>
 8025ab8:	4b07      	ldr	r3, [pc, #28]	; (8025ad8 <_dtoa_r+0xbe0>)
 8025aba:	f7ff ba92 	b.w	8024fe2 <_dtoa_r+0xea>
 8025abe:	9b01      	ldr	r3, [sp, #4]
 8025ac0:	2b00      	cmp	r3, #0
 8025ac2:	dcb5      	bgt.n	8025a30 <_dtoa_r+0xb38>
 8025ac4:	9b07      	ldr	r3, [sp, #28]
 8025ac6:	2b02      	cmp	r3, #2
 8025ac8:	f73f aeb1 	bgt.w	802582e <_dtoa_r+0x936>
 8025acc:	e7b0      	b.n	8025a30 <_dtoa_r+0xb38>
 8025ace:	bf00      	nop
 8025ad0:	0802fb07 	.word	0x0802fb07
 8025ad4:	0802f9d1 	.word	0x0802f9d1
 8025ad8:	0802faa2 	.word	0x0802faa2

08025adc <_free_r>:
 8025adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025ade:	2900      	cmp	r1, #0
 8025ae0:	d044      	beq.n	8025b6c <_free_r+0x90>
 8025ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025ae6:	9001      	str	r0, [sp, #4]
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	f1a1 0404 	sub.w	r4, r1, #4
 8025aee:	bfb8      	it	lt
 8025af0:	18e4      	addlt	r4, r4, r3
 8025af2:	f000 f8e7 	bl	8025cc4 <__malloc_lock>
 8025af6:	4a1e      	ldr	r2, [pc, #120]	; (8025b70 <_free_r+0x94>)
 8025af8:	9801      	ldr	r0, [sp, #4]
 8025afa:	6813      	ldr	r3, [r2, #0]
 8025afc:	b933      	cbnz	r3, 8025b0c <_free_r+0x30>
 8025afe:	6063      	str	r3, [r4, #4]
 8025b00:	6014      	str	r4, [r2, #0]
 8025b02:	b003      	add	sp, #12
 8025b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025b08:	f000 b8e2 	b.w	8025cd0 <__malloc_unlock>
 8025b0c:	42a3      	cmp	r3, r4
 8025b0e:	d908      	bls.n	8025b22 <_free_r+0x46>
 8025b10:	6825      	ldr	r5, [r4, #0]
 8025b12:	1961      	adds	r1, r4, r5
 8025b14:	428b      	cmp	r3, r1
 8025b16:	bf01      	itttt	eq
 8025b18:	6819      	ldreq	r1, [r3, #0]
 8025b1a:	685b      	ldreq	r3, [r3, #4]
 8025b1c:	1949      	addeq	r1, r1, r5
 8025b1e:	6021      	streq	r1, [r4, #0]
 8025b20:	e7ed      	b.n	8025afe <_free_r+0x22>
 8025b22:	461a      	mov	r2, r3
 8025b24:	685b      	ldr	r3, [r3, #4]
 8025b26:	b10b      	cbz	r3, 8025b2c <_free_r+0x50>
 8025b28:	42a3      	cmp	r3, r4
 8025b2a:	d9fa      	bls.n	8025b22 <_free_r+0x46>
 8025b2c:	6811      	ldr	r1, [r2, #0]
 8025b2e:	1855      	adds	r5, r2, r1
 8025b30:	42a5      	cmp	r5, r4
 8025b32:	d10b      	bne.n	8025b4c <_free_r+0x70>
 8025b34:	6824      	ldr	r4, [r4, #0]
 8025b36:	4421      	add	r1, r4
 8025b38:	1854      	adds	r4, r2, r1
 8025b3a:	42a3      	cmp	r3, r4
 8025b3c:	6011      	str	r1, [r2, #0]
 8025b3e:	d1e0      	bne.n	8025b02 <_free_r+0x26>
 8025b40:	681c      	ldr	r4, [r3, #0]
 8025b42:	685b      	ldr	r3, [r3, #4]
 8025b44:	6053      	str	r3, [r2, #4]
 8025b46:	440c      	add	r4, r1
 8025b48:	6014      	str	r4, [r2, #0]
 8025b4a:	e7da      	b.n	8025b02 <_free_r+0x26>
 8025b4c:	d902      	bls.n	8025b54 <_free_r+0x78>
 8025b4e:	230c      	movs	r3, #12
 8025b50:	6003      	str	r3, [r0, #0]
 8025b52:	e7d6      	b.n	8025b02 <_free_r+0x26>
 8025b54:	6825      	ldr	r5, [r4, #0]
 8025b56:	1961      	adds	r1, r4, r5
 8025b58:	428b      	cmp	r3, r1
 8025b5a:	bf04      	itt	eq
 8025b5c:	6819      	ldreq	r1, [r3, #0]
 8025b5e:	685b      	ldreq	r3, [r3, #4]
 8025b60:	6063      	str	r3, [r4, #4]
 8025b62:	bf04      	itt	eq
 8025b64:	1949      	addeq	r1, r1, r5
 8025b66:	6021      	streq	r1, [r4, #0]
 8025b68:	6054      	str	r4, [r2, #4]
 8025b6a:	e7ca      	b.n	8025b02 <_free_r+0x26>
 8025b6c:	b003      	add	sp, #12
 8025b6e:	bd30      	pop	{r4, r5, pc}
 8025b70:	2001320c 	.word	0x2001320c

08025b74 <malloc>:
 8025b74:	4b02      	ldr	r3, [pc, #8]	; (8025b80 <malloc+0xc>)
 8025b76:	4601      	mov	r1, r0
 8025b78:	6818      	ldr	r0, [r3, #0]
 8025b7a:	f000 b823 	b.w	8025bc4 <_malloc_r>
 8025b7e:	bf00      	nop
 8025b80:	20001050 	.word	0x20001050

08025b84 <sbrk_aligned>:
 8025b84:	b570      	push	{r4, r5, r6, lr}
 8025b86:	4e0e      	ldr	r6, [pc, #56]	; (8025bc0 <sbrk_aligned+0x3c>)
 8025b88:	460c      	mov	r4, r1
 8025b8a:	6831      	ldr	r1, [r6, #0]
 8025b8c:	4605      	mov	r5, r0
 8025b8e:	b911      	cbnz	r1, 8025b96 <sbrk_aligned+0x12>
 8025b90:	f000 fe2e 	bl	80267f0 <_sbrk_r>
 8025b94:	6030      	str	r0, [r6, #0]
 8025b96:	4621      	mov	r1, r4
 8025b98:	4628      	mov	r0, r5
 8025b9a:	f000 fe29 	bl	80267f0 <_sbrk_r>
 8025b9e:	1c43      	adds	r3, r0, #1
 8025ba0:	d00a      	beq.n	8025bb8 <sbrk_aligned+0x34>
 8025ba2:	1cc4      	adds	r4, r0, #3
 8025ba4:	f024 0403 	bic.w	r4, r4, #3
 8025ba8:	42a0      	cmp	r0, r4
 8025baa:	d007      	beq.n	8025bbc <sbrk_aligned+0x38>
 8025bac:	1a21      	subs	r1, r4, r0
 8025bae:	4628      	mov	r0, r5
 8025bb0:	f000 fe1e 	bl	80267f0 <_sbrk_r>
 8025bb4:	3001      	adds	r0, #1
 8025bb6:	d101      	bne.n	8025bbc <sbrk_aligned+0x38>
 8025bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8025bbc:	4620      	mov	r0, r4
 8025bbe:	bd70      	pop	{r4, r5, r6, pc}
 8025bc0:	20013210 	.word	0x20013210

08025bc4 <_malloc_r>:
 8025bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025bc8:	1ccd      	adds	r5, r1, #3
 8025bca:	f025 0503 	bic.w	r5, r5, #3
 8025bce:	3508      	adds	r5, #8
 8025bd0:	2d0c      	cmp	r5, #12
 8025bd2:	bf38      	it	cc
 8025bd4:	250c      	movcc	r5, #12
 8025bd6:	2d00      	cmp	r5, #0
 8025bd8:	4607      	mov	r7, r0
 8025bda:	db01      	blt.n	8025be0 <_malloc_r+0x1c>
 8025bdc:	42a9      	cmp	r1, r5
 8025bde:	d905      	bls.n	8025bec <_malloc_r+0x28>
 8025be0:	230c      	movs	r3, #12
 8025be2:	603b      	str	r3, [r7, #0]
 8025be4:	2600      	movs	r6, #0
 8025be6:	4630      	mov	r0, r6
 8025be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025bec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8025cc0 <_malloc_r+0xfc>
 8025bf0:	f000 f868 	bl	8025cc4 <__malloc_lock>
 8025bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8025bf8:	461c      	mov	r4, r3
 8025bfa:	bb5c      	cbnz	r4, 8025c54 <_malloc_r+0x90>
 8025bfc:	4629      	mov	r1, r5
 8025bfe:	4638      	mov	r0, r7
 8025c00:	f7ff ffc0 	bl	8025b84 <sbrk_aligned>
 8025c04:	1c43      	adds	r3, r0, #1
 8025c06:	4604      	mov	r4, r0
 8025c08:	d155      	bne.n	8025cb6 <_malloc_r+0xf2>
 8025c0a:	f8d8 4000 	ldr.w	r4, [r8]
 8025c0e:	4626      	mov	r6, r4
 8025c10:	2e00      	cmp	r6, #0
 8025c12:	d145      	bne.n	8025ca0 <_malloc_r+0xdc>
 8025c14:	2c00      	cmp	r4, #0
 8025c16:	d048      	beq.n	8025caa <_malloc_r+0xe6>
 8025c18:	6823      	ldr	r3, [r4, #0]
 8025c1a:	4631      	mov	r1, r6
 8025c1c:	4638      	mov	r0, r7
 8025c1e:	eb04 0903 	add.w	r9, r4, r3
 8025c22:	f000 fde5 	bl	80267f0 <_sbrk_r>
 8025c26:	4581      	cmp	r9, r0
 8025c28:	d13f      	bne.n	8025caa <_malloc_r+0xe6>
 8025c2a:	6821      	ldr	r1, [r4, #0]
 8025c2c:	1a6d      	subs	r5, r5, r1
 8025c2e:	4629      	mov	r1, r5
 8025c30:	4638      	mov	r0, r7
 8025c32:	f7ff ffa7 	bl	8025b84 <sbrk_aligned>
 8025c36:	3001      	adds	r0, #1
 8025c38:	d037      	beq.n	8025caa <_malloc_r+0xe6>
 8025c3a:	6823      	ldr	r3, [r4, #0]
 8025c3c:	442b      	add	r3, r5
 8025c3e:	6023      	str	r3, [r4, #0]
 8025c40:	f8d8 3000 	ldr.w	r3, [r8]
 8025c44:	2b00      	cmp	r3, #0
 8025c46:	d038      	beq.n	8025cba <_malloc_r+0xf6>
 8025c48:	685a      	ldr	r2, [r3, #4]
 8025c4a:	42a2      	cmp	r2, r4
 8025c4c:	d12b      	bne.n	8025ca6 <_malloc_r+0xe2>
 8025c4e:	2200      	movs	r2, #0
 8025c50:	605a      	str	r2, [r3, #4]
 8025c52:	e00f      	b.n	8025c74 <_malloc_r+0xb0>
 8025c54:	6822      	ldr	r2, [r4, #0]
 8025c56:	1b52      	subs	r2, r2, r5
 8025c58:	d41f      	bmi.n	8025c9a <_malloc_r+0xd6>
 8025c5a:	2a0b      	cmp	r2, #11
 8025c5c:	d917      	bls.n	8025c8e <_malloc_r+0xca>
 8025c5e:	1961      	adds	r1, r4, r5
 8025c60:	42a3      	cmp	r3, r4
 8025c62:	6025      	str	r5, [r4, #0]
 8025c64:	bf18      	it	ne
 8025c66:	6059      	strne	r1, [r3, #4]
 8025c68:	6863      	ldr	r3, [r4, #4]
 8025c6a:	bf08      	it	eq
 8025c6c:	f8c8 1000 	streq.w	r1, [r8]
 8025c70:	5162      	str	r2, [r4, r5]
 8025c72:	604b      	str	r3, [r1, #4]
 8025c74:	4638      	mov	r0, r7
 8025c76:	f104 060b 	add.w	r6, r4, #11
 8025c7a:	f000 f829 	bl	8025cd0 <__malloc_unlock>
 8025c7e:	f026 0607 	bic.w	r6, r6, #7
 8025c82:	1d23      	adds	r3, r4, #4
 8025c84:	1af2      	subs	r2, r6, r3
 8025c86:	d0ae      	beq.n	8025be6 <_malloc_r+0x22>
 8025c88:	1b9b      	subs	r3, r3, r6
 8025c8a:	50a3      	str	r3, [r4, r2]
 8025c8c:	e7ab      	b.n	8025be6 <_malloc_r+0x22>
 8025c8e:	42a3      	cmp	r3, r4
 8025c90:	6862      	ldr	r2, [r4, #4]
 8025c92:	d1dd      	bne.n	8025c50 <_malloc_r+0x8c>
 8025c94:	f8c8 2000 	str.w	r2, [r8]
 8025c98:	e7ec      	b.n	8025c74 <_malloc_r+0xb0>
 8025c9a:	4623      	mov	r3, r4
 8025c9c:	6864      	ldr	r4, [r4, #4]
 8025c9e:	e7ac      	b.n	8025bfa <_malloc_r+0x36>
 8025ca0:	4634      	mov	r4, r6
 8025ca2:	6876      	ldr	r6, [r6, #4]
 8025ca4:	e7b4      	b.n	8025c10 <_malloc_r+0x4c>
 8025ca6:	4613      	mov	r3, r2
 8025ca8:	e7cc      	b.n	8025c44 <_malloc_r+0x80>
 8025caa:	230c      	movs	r3, #12
 8025cac:	603b      	str	r3, [r7, #0]
 8025cae:	4638      	mov	r0, r7
 8025cb0:	f000 f80e 	bl	8025cd0 <__malloc_unlock>
 8025cb4:	e797      	b.n	8025be6 <_malloc_r+0x22>
 8025cb6:	6025      	str	r5, [r4, #0]
 8025cb8:	e7dc      	b.n	8025c74 <_malloc_r+0xb0>
 8025cba:	605b      	str	r3, [r3, #4]
 8025cbc:	deff      	udf	#255	; 0xff
 8025cbe:	bf00      	nop
 8025cc0:	2001320c 	.word	0x2001320c

08025cc4 <__malloc_lock>:
 8025cc4:	4801      	ldr	r0, [pc, #4]	; (8025ccc <__malloc_lock+0x8>)
 8025cc6:	f7ff b84c 	b.w	8024d62 <__retarget_lock_acquire_recursive>
 8025cca:	bf00      	nop
 8025ccc:	20013208 	.word	0x20013208

08025cd0 <__malloc_unlock>:
 8025cd0:	4801      	ldr	r0, [pc, #4]	; (8025cd8 <__malloc_unlock+0x8>)
 8025cd2:	f7ff b847 	b.w	8024d64 <__retarget_lock_release_recursive>
 8025cd6:	bf00      	nop
 8025cd8:	20013208 	.word	0x20013208

08025cdc <_Balloc>:
 8025cdc:	b570      	push	{r4, r5, r6, lr}
 8025cde:	69c6      	ldr	r6, [r0, #28]
 8025ce0:	4604      	mov	r4, r0
 8025ce2:	460d      	mov	r5, r1
 8025ce4:	b976      	cbnz	r6, 8025d04 <_Balloc+0x28>
 8025ce6:	2010      	movs	r0, #16
 8025ce8:	f7ff ff44 	bl	8025b74 <malloc>
 8025cec:	4602      	mov	r2, r0
 8025cee:	61e0      	str	r0, [r4, #28]
 8025cf0:	b920      	cbnz	r0, 8025cfc <_Balloc+0x20>
 8025cf2:	4b18      	ldr	r3, [pc, #96]	; (8025d54 <_Balloc+0x78>)
 8025cf4:	4818      	ldr	r0, [pc, #96]	; (8025d58 <_Balloc+0x7c>)
 8025cf6:	216b      	movs	r1, #107	; 0x6b
 8025cf8:	f7ff f858 	bl	8024dac <__assert_func>
 8025cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025d00:	6006      	str	r6, [r0, #0]
 8025d02:	60c6      	str	r6, [r0, #12]
 8025d04:	69e6      	ldr	r6, [r4, #28]
 8025d06:	68f3      	ldr	r3, [r6, #12]
 8025d08:	b183      	cbz	r3, 8025d2c <_Balloc+0x50>
 8025d0a:	69e3      	ldr	r3, [r4, #28]
 8025d0c:	68db      	ldr	r3, [r3, #12]
 8025d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025d12:	b9b8      	cbnz	r0, 8025d44 <_Balloc+0x68>
 8025d14:	2101      	movs	r1, #1
 8025d16:	fa01 f605 	lsl.w	r6, r1, r5
 8025d1a:	1d72      	adds	r2, r6, #5
 8025d1c:	0092      	lsls	r2, r2, #2
 8025d1e:	4620      	mov	r0, r4
 8025d20:	f000 fd7d 	bl	802681e <_calloc_r>
 8025d24:	b160      	cbz	r0, 8025d40 <_Balloc+0x64>
 8025d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025d2a:	e00e      	b.n	8025d4a <_Balloc+0x6e>
 8025d2c:	2221      	movs	r2, #33	; 0x21
 8025d2e:	2104      	movs	r1, #4
 8025d30:	4620      	mov	r0, r4
 8025d32:	f000 fd74 	bl	802681e <_calloc_r>
 8025d36:	69e3      	ldr	r3, [r4, #28]
 8025d38:	60f0      	str	r0, [r6, #12]
 8025d3a:	68db      	ldr	r3, [r3, #12]
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d1e4      	bne.n	8025d0a <_Balloc+0x2e>
 8025d40:	2000      	movs	r0, #0
 8025d42:	bd70      	pop	{r4, r5, r6, pc}
 8025d44:	6802      	ldr	r2, [r0, #0]
 8025d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025d4a:	2300      	movs	r3, #0
 8025d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025d50:	e7f7      	b.n	8025d42 <_Balloc+0x66>
 8025d52:	bf00      	nop
 8025d54:	0802f9f5 	.word	0x0802f9f5
 8025d58:	0802fb18 	.word	0x0802fb18

08025d5c <_Bfree>:
 8025d5c:	b570      	push	{r4, r5, r6, lr}
 8025d5e:	69c6      	ldr	r6, [r0, #28]
 8025d60:	4605      	mov	r5, r0
 8025d62:	460c      	mov	r4, r1
 8025d64:	b976      	cbnz	r6, 8025d84 <_Bfree+0x28>
 8025d66:	2010      	movs	r0, #16
 8025d68:	f7ff ff04 	bl	8025b74 <malloc>
 8025d6c:	4602      	mov	r2, r0
 8025d6e:	61e8      	str	r0, [r5, #28]
 8025d70:	b920      	cbnz	r0, 8025d7c <_Bfree+0x20>
 8025d72:	4b09      	ldr	r3, [pc, #36]	; (8025d98 <_Bfree+0x3c>)
 8025d74:	4809      	ldr	r0, [pc, #36]	; (8025d9c <_Bfree+0x40>)
 8025d76:	218f      	movs	r1, #143	; 0x8f
 8025d78:	f7ff f818 	bl	8024dac <__assert_func>
 8025d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025d80:	6006      	str	r6, [r0, #0]
 8025d82:	60c6      	str	r6, [r0, #12]
 8025d84:	b13c      	cbz	r4, 8025d96 <_Bfree+0x3a>
 8025d86:	69eb      	ldr	r3, [r5, #28]
 8025d88:	6862      	ldr	r2, [r4, #4]
 8025d8a:	68db      	ldr	r3, [r3, #12]
 8025d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025d90:	6021      	str	r1, [r4, #0]
 8025d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025d96:	bd70      	pop	{r4, r5, r6, pc}
 8025d98:	0802f9f5 	.word	0x0802f9f5
 8025d9c:	0802fb18 	.word	0x0802fb18

08025da0 <__multadd>:
 8025da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025da4:	690d      	ldr	r5, [r1, #16]
 8025da6:	4607      	mov	r7, r0
 8025da8:	460c      	mov	r4, r1
 8025daa:	461e      	mov	r6, r3
 8025dac:	f101 0c14 	add.w	ip, r1, #20
 8025db0:	2000      	movs	r0, #0
 8025db2:	f8dc 3000 	ldr.w	r3, [ip]
 8025db6:	b299      	uxth	r1, r3
 8025db8:	fb02 6101 	mla	r1, r2, r1, r6
 8025dbc:	0c1e      	lsrs	r6, r3, #16
 8025dbe:	0c0b      	lsrs	r3, r1, #16
 8025dc0:	fb02 3306 	mla	r3, r2, r6, r3
 8025dc4:	b289      	uxth	r1, r1
 8025dc6:	3001      	adds	r0, #1
 8025dc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025dcc:	4285      	cmp	r5, r0
 8025dce:	f84c 1b04 	str.w	r1, [ip], #4
 8025dd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025dd6:	dcec      	bgt.n	8025db2 <__multadd+0x12>
 8025dd8:	b30e      	cbz	r6, 8025e1e <__multadd+0x7e>
 8025dda:	68a3      	ldr	r3, [r4, #8]
 8025ddc:	42ab      	cmp	r3, r5
 8025dde:	dc19      	bgt.n	8025e14 <__multadd+0x74>
 8025de0:	6861      	ldr	r1, [r4, #4]
 8025de2:	4638      	mov	r0, r7
 8025de4:	3101      	adds	r1, #1
 8025de6:	f7ff ff79 	bl	8025cdc <_Balloc>
 8025dea:	4680      	mov	r8, r0
 8025dec:	b928      	cbnz	r0, 8025dfa <__multadd+0x5a>
 8025dee:	4602      	mov	r2, r0
 8025df0:	4b0c      	ldr	r3, [pc, #48]	; (8025e24 <__multadd+0x84>)
 8025df2:	480d      	ldr	r0, [pc, #52]	; (8025e28 <__multadd+0x88>)
 8025df4:	21ba      	movs	r1, #186	; 0xba
 8025df6:	f7fe ffd9 	bl	8024dac <__assert_func>
 8025dfa:	6922      	ldr	r2, [r4, #16]
 8025dfc:	3202      	adds	r2, #2
 8025dfe:	f104 010c 	add.w	r1, r4, #12
 8025e02:	0092      	lsls	r2, r2, #2
 8025e04:	300c      	adds	r0, #12
 8025e06:	f7fe ffb6 	bl	8024d76 <memcpy>
 8025e0a:	4621      	mov	r1, r4
 8025e0c:	4638      	mov	r0, r7
 8025e0e:	f7ff ffa5 	bl	8025d5c <_Bfree>
 8025e12:	4644      	mov	r4, r8
 8025e14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025e18:	3501      	adds	r5, #1
 8025e1a:	615e      	str	r6, [r3, #20]
 8025e1c:	6125      	str	r5, [r4, #16]
 8025e1e:	4620      	mov	r0, r4
 8025e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e24:	0802fb07 	.word	0x0802fb07
 8025e28:	0802fb18 	.word	0x0802fb18

08025e2c <__hi0bits>:
 8025e2c:	0c03      	lsrs	r3, r0, #16
 8025e2e:	041b      	lsls	r3, r3, #16
 8025e30:	b9d3      	cbnz	r3, 8025e68 <__hi0bits+0x3c>
 8025e32:	0400      	lsls	r0, r0, #16
 8025e34:	2310      	movs	r3, #16
 8025e36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8025e3a:	bf04      	itt	eq
 8025e3c:	0200      	lsleq	r0, r0, #8
 8025e3e:	3308      	addeq	r3, #8
 8025e40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8025e44:	bf04      	itt	eq
 8025e46:	0100      	lsleq	r0, r0, #4
 8025e48:	3304      	addeq	r3, #4
 8025e4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8025e4e:	bf04      	itt	eq
 8025e50:	0080      	lsleq	r0, r0, #2
 8025e52:	3302      	addeq	r3, #2
 8025e54:	2800      	cmp	r0, #0
 8025e56:	db05      	blt.n	8025e64 <__hi0bits+0x38>
 8025e58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8025e5c:	f103 0301 	add.w	r3, r3, #1
 8025e60:	bf08      	it	eq
 8025e62:	2320      	moveq	r3, #32
 8025e64:	4618      	mov	r0, r3
 8025e66:	4770      	bx	lr
 8025e68:	2300      	movs	r3, #0
 8025e6a:	e7e4      	b.n	8025e36 <__hi0bits+0xa>

08025e6c <__lo0bits>:
 8025e6c:	6803      	ldr	r3, [r0, #0]
 8025e6e:	f013 0207 	ands.w	r2, r3, #7
 8025e72:	d00c      	beq.n	8025e8e <__lo0bits+0x22>
 8025e74:	07d9      	lsls	r1, r3, #31
 8025e76:	d422      	bmi.n	8025ebe <__lo0bits+0x52>
 8025e78:	079a      	lsls	r2, r3, #30
 8025e7a:	bf49      	itett	mi
 8025e7c:	085b      	lsrmi	r3, r3, #1
 8025e7e:	089b      	lsrpl	r3, r3, #2
 8025e80:	6003      	strmi	r3, [r0, #0]
 8025e82:	2201      	movmi	r2, #1
 8025e84:	bf5c      	itt	pl
 8025e86:	6003      	strpl	r3, [r0, #0]
 8025e88:	2202      	movpl	r2, #2
 8025e8a:	4610      	mov	r0, r2
 8025e8c:	4770      	bx	lr
 8025e8e:	b299      	uxth	r1, r3
 8025e90:	b909      	cbnz	r1, 8025e96 <__lo0bits+0x2a>
 8025e92:	0c1b      	lsrs	r3, r3, #16
 8025e94:	2210      	movs	r2, #16
 8025e96:	b2d9      	uxtb	r1, r3
 8025e98:	b909      	cbnz	r1, 8025e9e <__lo0bits+0x32>
 8025e9a:	3208      	adds	r2, #8
 8025e9c:	0a1b      	lsrs	r3, r3, #8
 8025e9e:	0719      	lsls	r1, r3, #28
 8025ea0:	bf04      	itt	eq
 8025ea2:	091b      	lsreq	r3, r3, #4
 8025ea4:	3204      	addeq	r2, #4
 8025ea6:	0799      	lsls	r1, r3, #30
 8025ea8:	bf04      	itt	eq
 8025eaa:	089b      	lsreq	r3, r3, #2
 8025eac:	3202      	addeq	r2, #2
 8025eae:	07d9      	lsls	r1, r3, #31
 8025eb0:	d403      	bmi.n	8025eba <__lo0bits+0x4e>
 8025eb2:	085b      	lsrs	r3, r3, #1
 8025eb4:	f102 0201 	add.w	r2, r2, #1
 8025eb8:	d003      	beq.n	8025ec2 <__lo0bits+0x56>
 8025eba:	6003      	str	r3, [r0, #0]
 8025ebc:	e7e5      	b.n	8025e8a <__lo0bits+0x1e>
 8025ebe:	2200      	movs	r2, #0
 8025ec0:	e7e3      	b.n	8025e8a <__lo0bits+0x1e>
 8025ec2:	2220      	movs	r2, #32
 8025ec4:	e7e1      	b.n	8025e8a <__lo0bits+0x1e>
	...

08025ec8 <__i2b>:
 8025ec8:	b510      	push	{r4, lr}
 8025eca:	460c      	mov	r4, r1
 8025ecc:	2101      	movs	r1, #1
 8025ece:	f7ff ff05 	bl	8025cdc <_Balloc>
 8025ed2:	4602      	mov	r2, r0
 8025ed4:	b928      	cbnz	r0, 8025ee2 <__i2b+0x1a>
 8025ed6:	4b05      	ldr	r3, [pc, #20]	; (8025eec <__i2b+0x24>)
 8025ed8:	4805      	ldr	r0, [pc, #20]	; (8025ef0 <__i2b+0x28>)
 8025eda:	f240 1145 	movw	r1, #325	; 0x145
 8025ede:	f7fe ff65 	bl	8024dac <__assert_func>
 8025ee2:	2301      	movs	r3, #1
 8025ee4:	6144      	str	r4, [r0, #20]
 8025ee6:	6103      	str	r3, [r0, #16]
 8025ee8:	bd10      	pop	{r4, pc}
 8025eea:	bf00      	nop
 8025eec:	0802fb07 	.word	0x0802fb07
 8025ef0:	0802fb18 	.word	0x0802fb18

08025ef4 <__multiply>:
 8025ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ef8:	4691      	mov	r9, r2
 8025efa:	690a      	ldr	r2, [r1, #16]
 8025efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8025f00:	429a      	cmp	r2, r3
 8025f02:	bfb8      	it	lt
 8025f04:	460b      	movlt	r3, r1
 8025f06:	460c      	mov	r4, r1
 8025f08:	bfbc      	itt	lt
 8025f0a:	464c      	movlt	r4, r9
 8025f0c:	4699      	movlt	r9, r3
 8025f0e:	6927      	ldr	r7, [r4, #16]
 8025f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8025f14:	68a3      	ldr	r3, [r4, #8]
 8025f16:	6861      	ldr	r1, [r4, #4]
 8025f18:	eb07 060a 	add.w	r6, r7, sl
 8025f1c:	42b3      	cmp	r3, r6
 8025f1e:	b085      	sub	sp, #20
 8025f20:	bfb8      	it	lt
 8025f22:	3101      	addlt	r1, #1
 8025f24:	f7ff feda 	bl	8025cdc <_Balloc>
 8025f28:	b930      	cbnz	r0, 8025f38 <__multiply+0x44>
 8025f2a:	4602      	mov	r2, r0
 8025f2c:	4b44      	ldr	r3, [pc, #272]	; (8026040 <__multiply+0x14c>)
 8025f2e:	4845      	ldr	r0, [pc, #276]	; (8026044 <__multiply+0x150>)
 8025f30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8025f34:	f7fe ff3a 	bl	8024dac <__assert_func>
 8025f38:	f100 0514 	add.w	r5, r0, #20
 8025f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8025f40:	462b      	mov	r3, r5
 8025f42:	2200      	movs	r2, #0
 8025f44:	4543      	cmp	r3, r8
 8025f46:	d321      	bcc.n	8025f8c <__multiply+0x98>
 8025f48:	f104 0314 	add.w	r3, r4, #20
 8025f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8025f50:	f109 0314 	add.w	r3, r9, #20
 8025f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8025f58:	9202      	str	r2, [sp, #8]
 8025f5a:	1b3a      	subs	r2, r7, r4
 8025f5c:	3a15      	subs	r2, #21
 8025f5e:	f022 0203 	bic.w	r2, r2, #3
 8025f62:	3204      	adds	r2, #4
 8025f64:	f104 0115 	add.w	r1, r4, #21
 8025f68:	428f      	cmp	r7, r1
 8025f6a:	bf38      	it	cc
 8025f6c:	2204      	movcc	r2, #4
 8025f6e:	9201      	str	r2, [sp, #4]
 8025f70:	9a02      	ldr	r2, [sp, #8]
 8025f72:	9303      	str	r3, [sp, #12]
 8025f74:	429a      	cmp	r2, r3
 8025f76:	d80c      	bhi.n	8025f92 <__multiply+0x9e>
 8025f78:	2e00      	cmp	r6, #0
 8025f7a:	dd03      	ble.n	8025f84 <__multiply+0x90>
 8025f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025f80:	2b00      	cmp	r3, #0
 8025f82:	d05b      	beq.n	802603c <__multiply+0x148>
 8025f84:	6106      	str	r6, [r0, #16]
 8025f86:	b005      	add	sp, #20
 8025f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f8c:	f843 2b04 	str.w	r2, [r3], #4
 8025f90:	e7d8      	b.n	8025f44 <__multiply+0x50>
 8025f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8025f96:	f1ba 0f00 	cmp.w	sl, #0
 8025f9a:	d024      	beq.n	8025fe6 <__multiply+0xf2>
 8025f9c:	f104 0e14 	add.w	lr, r4, #20
 8025fa0:	46a9      	mov	r9, r5
 8025fa2:	f04f 0c00 	mov.w	ip, #0
 8025fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8025faa:	f8d9 1000 	ldr.w	r1, [r9]
 8025fae:	fa1f fb82 	uxth.w	fp, r2
 8025fb2:	b289      	uxth	r1, r1
 8025fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8025fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8025fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8025fc0:	4461      	add	r1, ip
 8025fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8025fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8025fce:	b289      	uxth	r1, r1
 8025fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8025fd4:	4577      	cmp	r7, lr
 8025fd6:	f849 1b04 	str.w	r1, [r9], #4
 8025fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025fde:	d8e2      	bhi.n	8025fa6 <__multiply+0xb2>
 8025fe0:	9a01      	ldr	r2, [sp, #4]
 8025fe2:	f845 c002 	str.w	ip, [r5, r2]
 8025fe6:	9a03      	ldr	r2, [sp, #12]
 8025fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025fec:	3304      	adds	r3, #4
 8025fee:	f1b9 0f00 	cmp.w	r9, #0
 8025ff2:	d021      	beq.n	8026038 <__multiply+0x144>
 8025ff4:	6829      	ldr	r1, [r5, #0]
 8025ff6:	f104 0c14 	add.w	ip, r4, #20
 8025ffa:	46ae      	mov	lr, r5
 8025ffc:	f04f 0a00 	mov.w	sl, #0
 8026000:	f8bc b000 	ldrh.w	fp, [ip]
 8026004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026008:	fb09 220b 	mla	r2, r9, fp, r2
 802600c:	4452      	add	r2, sl
 802600e:	b289      	uxth	r1, r1
 8026010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026014:	f84e 1b04 	str.w	r1, [lr], #4
 8026018:	f85c 1b04 	ldr.w	r1, [ip], #4
 802601c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026020:	f8be 1000 	ldrh.w	r1, [lr]
 8026024:	fb09 110a 	mla	r1, r9, sl, r1
 8026028:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802602c:	4567      	cmp	r7, ip
 802602e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026032:	d8e5      	bhi.n	8026000 <__multiply+0x10c>
 8026034:	9a01      	ldr	r2, [sp, #4]
 8026036:	50a9      	str	r1, [r5, r2]
 8026038:	3504      	adds	r5, #4
 802603a:	e799      	b.n	8025f70 <__multiply+0x7c>
 802603c:	3e01      	subs	r6, #1
 802603e:	e79b      	b.n	8025f78 <__multiply+0x84>
 8026040:	0802fb07 	.word	0x0802fb07
 8026044:	0802fb18 	.word	0x0802fb18

08026048 <__pow5mult>:
 8026048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802604c:	4615      	mov	r5, r2
 802604e:	f012 0203 	ands.w	r2, r2, #3
 8026052:	4606      	mov	r6, r0
 8026054:	460f      	mov	r7, r1
 8026056:	d007      	beq.n	8026068 <__pow5mult+0x20>
 8026058:	4c25      	ldr	r4, [pc, #148]	; (80260f0 <__pow5mult+0xa8>)
 802605a:	3a01      	subs	r2, #1
 802605c:	2300      	movs	r3, #0
 802605e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026062:	f7ff fe9d 	bl	8025da0 <__multadd>
 8026066:	4607      	mov	r7, r0
 8026068:	10ad      	asrs	r5, r5, #2
 802606a:	d03d      	beq.n	80260e8 <__pow5mult+0xa0>
 802606c:	69f4      	ldr	r4, [r6, #28]
 802606e:	b97c      	cbnz	r4, 8026090 <__pow5mult+0x48>
 8026070:	2010      	movs	r0, #16
 8026072:	f7ff fd7f 	bl	8025b74 <malloc>
 8026076:	4602      	mov	r2, r0
 8026078:	61f0      	str	r0, [r6, #28]
 802607a:	b928      	cbnz	r0, 8026088 <__pow5mult+0x40>
 802607c:	4b1d      	ldr	r3, [pc, #116]	; (80260f4 <__pow5mult+0xac>)
 802607e:	481e      	ldr	r0, [pc, #120]	; (80260f8 <__pow5mult+0xb0>)
 8026080:	f240 11b3 	movw	r1, #435	; 0x1b3
 8026084:	f7fe fe92 	bl	8024dac <__assert_func>
 8026088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802608c:	6004      	str	r4, [r0, #0]
 802608e:	60c4      	str	r4, [r0, #12]
 8026090:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8026094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026098:	b94c      	cbnz	r4, 80260ae <__pow5mult+0x66>
 802609a:	f240 2171 	movw	r1, #625	; 0x271
 802609e:	4630      	mov	r0, r6
 80260a0:	f7ff ff12 	bl	8025ec8 <__i2b>
 80260a4:	2300      	movs	r3, #0
 80260a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80260aa:	4604      	mov	r4, r0
 80260ac:	6003      	str	r3, [r0, #0]
 80260ae:	f04f 0900 	mov.w	r9, #0
 80260b2:	07eb      	lsls	r3, r5, #31
 80260b4:	d50a      	bpl.n	80260cc <__pow5mult+0x84>
 80260b6:	4639      	mov	r1, r7
 80260b8:	4622      	mov	r2, r4
 80260ba:	4630      	mov	r0, r6
 80260bc:	f7ff ff1a 	bl	8025ef4 <__multiply>
 80260c0:	4639      	mov	r1, r7
 80260c2:	4680      	mov	r8, r0
 80260c4:	4630      	mov	r0, r6
 80260c6:	f7ff fe49 	bl	8025d5c <_Bfree>
 80260ca:	4647      	mov	r7, r8
 80260cc:	106d      	asrs	r5, r5, #1
 80260ce:	d00b      	beq.n	80260e8 <__pow5mult+0xa0>
 80260d0:	6820      	ldr	r0, [r4, #0]
 80260d2:	b938      	cbnz	r0, 80260e4 <__pow5mult+0x9c>
 80260d4:	4622      	mov	r2, r4
 80260d6:	4621      	mov	r1, r4
 80260d8:	4630      	mov	r0, r6
 80260da:	f7ff ff0b 	bl	8025ef4 <__multiply>
 80260de:	6020      	str	r0, [r4, #0]
 80260e0:	f8c0 9000 	str.w	r9, [r0]
 80260e4:	4604      	mov	r4, r0
 80260e6:	e7e4      	b.n	80260b2 <__pow5mult+0x6a>
 80260e8:	4638      	mov	r0, r7
 80260ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80260ee:	bf00      	nop
 80260f0:	0802fc68 	.word	0x0802fc68
 80260f4:	0802f9f5 	.word	0x0802f9f5
 80260f8:	0802fb18 	.word	0x0802fb18

080260fc <__lshift>:
 80260fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026100:	460c      	mov	r4, r1
 8026102:	6849      	ldr	r1, [r1, #4]
 8026104:	6923      	ldr	r3, [r4, #16]
 8026106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802610a:	68a3      	ldr	r3, [r4, #8]
 802610c:	4607      	mov	r7, r0
 802610e:	4691      	mov	r9, r2
 8026110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026114:	f108 0601 	add.w	r6, r8, #1
 8026118:	42b3      	cmp	r3, r6
 802611a:	db0b      	blt.n	8026134 <__lshift+0x38>
 802611c:	4638      	mov	r0, r7
 802611e:	f7ff fddd 	bl	8025cdc <_Balloc>
 8026122:	4605      	mov	r5, r0
 8026124:	b948      	cbnz	r0, 802613a <__lshift+0x3e>
 8026126:	4602      	mov	r2, r0
 8026128:	4b28      	ldr	r3, [pc, #160]	; (80261cc <__lshift+0xd0>)
 802612a:	4829      	ldr	r0, [pc, #164]	; (80261d0 <__lshift+0xd4>)
 802612c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8026130:	f7fe fe3c 	bl	8024dac <__assert_func>
 8026134:	3101      	adds	r1, #1
 8026136:	005b      	lsls	r3, r3, #1
 8026138:	e7ee      	b.n	8026118 <__lshift+0x1c>
 802613a:	2300      	movs	r3, #0
 802613c:	f100 0114 	add.w	r1, r0, #20
 8026140:	f100 0210 	add.w	r2, r0, #16
 8026144:	4618      	mov	r0, r3
 8026146:	4553      	cmp	r3, sl
 8026148:	db33      	blt.n	80261b2 <__lshift+0xb6>
 802614a:	6920      	ldr	r0, [r4, #16]
 802614c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026150:	f104 0314 	add.w	r3, r4, #20
 8026154:	f019 091f 	ands.w	r9, r9, #31
 8026158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802615c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026160:	d02b      	beq.n	80261ba <__lshift+0xbe>
 8026162:	f1c9 0e20 	rsb	lr, r9, #32
 8026166:	468a      	mov	sl, r1
 8026168:	2200      	movs	r2, #0
 802616a:	6818      	ldr	r0, [r3, #0]
 802616c:	fa00 f009 	lsl.w	r0, r0, r9
 8026170:	4310      	orrs	r0, r2
 8026172:	f84a 0b04 	str.w	r0, [sl], #4
 8026176:	f853 2b04 	ldr.w	r2, [r3], #4
 802617a:	459c      	cmp	ip, r3
 802617c:	fa22 f20e 	lsr.w	r2, r2, lr
 8026180:	d8f3      	bhi.n	802616a <__lshift+0x6e>
 8026182:	ebac 0304 	sub.w	r3, ip, r4
 8026186:	3b15      	subs	r3, #21
 8026188:	f023 0303 	bic.w	r3, r3, #3
 802618c:	3304      	adds	r3, #4
 802618e:	f104 0015 	add.w	r0, r4, #21
 8026192:	4584      	cmp	ip, r0
 8026194:	bf38      	it	cc
 8026196:	2304      	movcc	r3, #4
 8026198:	50ca      	str	r2, [r1, r3]
 802619a:	b10a      	cbz	r2, 80261a0 <__lshift+0xa4>
 802619c:	f108 0602 	add.w	r6, r8, #2
 80261a0:	3e01      	subs	r6, #1
 80261a2:	4638      	mov	r0, r7
 80261a4:	612e      	str	r6, [r5, #16]
 80261a6:	4621      	mov	r1, r4
 80261a8:	f7ff fdd8 	bl	8025d5c <_Bfree>
 80261ac:	4628      	mov	r0, r5
 80261ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80261b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80261b6:	3301      	adds	r3, #1
 80261b8:	e7c5      	b.n	8026146 <__lshift+0x4a>
 80261ba:	3904      	subs	r1, #4
 80261bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80261c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80261c4:	459c      	cmp	ip, r3
 80261c6:	d8f9      	bhi.n	80261bc <__lshift+0xc0>
 80261c8:	e7ea      	b.n	80261a0 <__lshift+0xa4>
 80261ca:	bf00      	nop
 80261cc:	0802fb07 	.word	0x0802fb07
 80261d0:	0802fb18 	.word	0x0802fb18

080261d4 <__mcmp>:
 80261d4:	b530      	push	{r4, r5, lr}
 80261d6:	6902      	ldr	r2, [r0, #16]
 80261d8:	690c      	ldr	r4, [r1, #16]
 80261da:	1b12      	subs	r2, r2, r4
 80261dc:	d10e      	bne.n	80261fc <__mcmp+0x28>
 80261de:	f100 0314 	add.w	r3, r0, #20
 80261e2:	3114      	adds	r1, #20
 80261e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80261e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80261ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80261f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80261f4:	42a5      	cmp	r5, r4
 80261f6:	d003      	beq.n	8026200 <__mcmp+0x2c>
 80261f8:	d305      	bcc.n	8026206 <__mcmp+0x32>
 80261fa:	2201      	movs	r2, #1
 80261fc:	4610      	mov	r0, r2
 80261fe:	bd30      	pop	{r4, r5, pc}
 8026200:	4283      	cmp	r3, r0
 8026202:	d3f3      	bcc.n	80261ec <__mcmp+0x18>
 8026204:	e7fa      	b.n	80261fc <__mcmp+0x28>
 8026206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802620a:	e7f7      	b.n	80261fc <__mcmp+0x28>

0802620c <__mdiff>:
 802620c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026210:	460c      	mov	r4, r1
 8026212:	4606      	mov	r6, r0
 8026214:	4611      	mov	r1, r2
 8026216:	4620      	mov	r0, r4
 8026218:	4690      	mov	r8, r2
 802621a:	f7ff ffdb 	bl	80261d4 <__mcmp>
 802621e:	1e05      	subs	r5, r0, #0
 8026220:	d110      	bne.n	8026244 <__mdiff+0x38>
 8026222:	4629      	mov	r1, r5
 8026224:	4630      	mov	r0, r6
 8026226:	f7ff fd59 	bl	8025cdc <_Balloc>
 802622a:	b930      	cbnz	r0, 802623a <__mdiff+0x2e>
 802622c:	4b3a      	ldr	r3, [pc, #232]	; (8026318 <__mdiff+0x10c>)
 802622e:	4602      	mov	r2, r0
 8026230:	f240 2137 	movw	r1, #567	; 0x237
 8026234:	4839      	ldr	r0, [pc, #228]	; (802631c <__mdiff+0x110>)
 8026236:	f7fe fdb9 	bl	8024dac <__assert_func>
 802623a:	2301      	movs	r3, #1
 802623c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026244:	bfa4      	itt	ge
 8026246:	4643      	movge	r3, r8
 8026248:	46a0      	movge	r8, r4
 802624a:	4630      	mov	r0, r6
 802624c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026250:	bfa6      	itte	ge
 8026252:	461c      	movge	r4, r3
 8026254:	2500      	movge	r5, #0
 8026256:	2501      	movlt	r5, #1
 8026258:	f7ff fd40 	bl	8025cdc <_Balloc>
 802625c:	b920      	cbnz	r0, 8026268 <__mdiff+0x5c>
 802625e:	4b2e      	ldr	r3, [pc, #184]	; (8026318 <__mdiff+0x10c>)
 8026260:	4602      	mov	r2, r0
 8026262:	f240 2145 	movw	r1, #581	; 0x245
 8026266:	e7e5      	b.n	8026234 <__mdiff+0x28>
 8026268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802626c:	6926      	ldr	r6, [r4, #16]
 802626e:	60c5      	str	r5, [r0, #12]
 8026270:	f104 0914 	add.w	r9, r4, #20
 8026274:	f108 0514 	add.w	r5, r8, #20
 8026278:	f100 0e14 	add.w	lr, r0, #20
 802627c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8026280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8026284:	f108 0210 	add.w	r2, r8, #16
 8026288:	46f2      	mov	sl, lr
 802628a:	2100      	movs	r1, #0
 802628c:	f859 3b04 	ldr.w	r3, [r9], #4
 8026290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026294:	fa11 f88b 	uxtah	r8, r1, fp
 8026298:	b299      	uxth	r1, r3
 802629a:	0c1b      	lsrs	r3, r3, #16
 802629c:	eba8 0801 	sub.w	r8, r8, r1
 80262a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80262a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80262a8:	fa1f f888 	uxth.w	r8, r8
 80262ac:	1419      	asrs	r1, r3, #16
 80262ae:	454e      	cmp	r6, r9
 80262b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80262b4:	f84a 3b04 	str.w	r3, [sl], #4
 80262b8:	d8e8      	bhi.n	802628c <__mdiff+0x80>
 80262ba:	1b33      	subs	r3, r6, r4
 80262bc:	3b15      	subs	r3, #21
 80262be:	f023 0303 	bic.w	r3, r3, #3
 80262c2:	3304      	adds	r3, #4
 80262c4:	3415      	adds	r4, #21
 80262c6:	42a6      	cmp	r6, r4
 80262c8:	bf38      	it	cc
 80262ca:	2304      	movcc	r3, #4
 80262cc:	441d      	add	r5, r3
 80262ce:	4473      	add	r3, lr
 80262d0:	469e      	mov	lr, r3
 80262d2:	462e      	mov	r6, r5
 80262d4:	4566      	cmp	r6, ip
 80262d6:	d30e      	bcc.n	80262f6 <__mdiff+0xea>
 80262d8:	f10c 0203 	add.w	r2, ip, #3
 80262dc:	1b52      	subs	r2, r2, r5
 80262de:	f022 0203 	bic.w	r2, r2, #3
 80262e2:	3d03      	subs	r5, #3
 80262e4:	45ac      	cmp	ip, r5
 80262e6:	bf38      	it	cc
 80262e8:	2200      	movcc	r2, #0
 80262ea:	4413      	add	r3, r2
 80262ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80262f0:	b17a      	cbz	r2, 8026312 <__mdiff+0x106>
 80262f2:	6107      	str	r7, [r0, #16]
 80262f4:	e7a4      	b.n	8026240 <__mdiff+0x34>
 80262f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80262fa:	fa11 f288 	uxtah	r2, r1, r8
 80262fe:	1414      	asrs	r4, r2, #16
 8026300:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8026304:	b292      	uxth	r2, r2
 8026306:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802630a:	f84e 2b04 	str.w	r2, [lr], #4
 802630e:	1421      	asrs	r1, r4, #16
 8026310:	e7e0      	b.n	80262d4 <__mdiff+0xc8>
 8026312:	3f01      	subs	r7, #1
 8026314:	e7ea      	b.n	80262ec <__mdiff+0xe0>
 8026316:	bf00      	nop
 8026318:	0802fb07 	.word	0x0802fb07
 802631c:	0802fb18 	.word	0x0802fb18

08026320 <__d2b>:
 8026320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026324:	460f      	mov	r7, r1
 8026326:	2101      	movs	r1, #1
 8026328:	ec59 8b10 	vmov	r8, r9, d0
 802632c:	4616      	mov	r6, r2
 802632e:	f7ff fcd5 	bl	8025cdc <_Balloc>
 8026332:	4604      	mov	r4, r0
 8026334:	b930      	cbnz	r0, 8026344 <__d2b+0x24>
 8026336:	4602      	mov	r2, r0
 8026338:	4b24      	ldr	r3, [pc, #144]	; (80263cc <__d2b+0xac>)
 802633a:	4825      	ldr	r0, [pc, #148]	; (80263d0 <__d2b+0xb0>)
 802633c:	f240 310f 	movw	r1, #783	; 0x30f
 8026340:	f7fe fd34 	bl	8024dac <__assert_func>
 8026344:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802634c:	bb2d      	cbnz	r5, 802639a <__d2b+0x7a>
 802634e:	9301      	str	r3, [sp, #4]
 8026350:	f1b8 0300 	subs.w	r3, r8, #0
 8026354:	d026      	beq.n	80263a4 <__d2b+0x84>
 8026356:	4668      	mov	r0, sp
 8026358:	9300      	str	r3, [sp, #0]
 802635a:	f7ff fd87 	bl	8025e6c <__lo0bits>
 802635e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026362:	b1e8      	cbz	r0, 80263a0 <__d2b+0x80>
 8026364:	f1c0 0320 	rsb	r3, r0, #32
 8026368:	fa02 f303 	lsl.w	r3, r2, r3
 802636c:	430b      	orrs	r3, r1
 802636e:	40c2      	lsrs	r2, r0
 8026370:	6163      	str	r3, [r4, #20]
 8026372:	9201      	str	r2, [sp, #4]
 8026374:	9b01      	ldr	r3, [sp, #4]
 8026376:	61a3      	str	r3, [r4, #24]
 8026378:	2b00      	cmp	r3, #0
 802637a:	bf14      	ite	ne
 802637c:	2202      	movne	r2, #2
 802637e:	2201      	moveq	r2, #1
 8026380:	6122      	str	r2, [r4, #16]
 8026382:	b1bd      	cbz	r5, 80263b4 <__d2b+0x94>
 8026384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8026388:	4405      	add	r5, r0
 802638a:	603d      	str	r5, [r7, #0]
 802638c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026390:	6030      	str	r0, [r6, #0]
 8026392:	4620      	mov	r0, r4
 8026394:	b003      	add	sp, #12
 8026396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802639a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802639e:	e7d6      	b.n	802634e <__d2b+0x2e>
 80263a0:	6161      	str	r1, [r4, #20]
 80263a2:	e7e7      	b.n	8026374 <__d2b+0x54>
 80263a4:	a801      	add	r0, sp, #4
 80263a6:	f7ff fd61 	bl	8025e6c <__lo0bits>
 80263aa:	9b01      	ldr	r3, [sp, #4]
 80263ac:	6163      	str	r3, [r4, #20]
 80263ae:	3020      	adds	r0, #32
 80263b0:	2201      	movs	r2, #1
 80263b2:	e7e5      	b.n	8026380 <__d2b+0x60>
 80263b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80263b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80263bc:	6038      	str	r0, [r7, #0]
 80263be:	6918      	ldr	r0, [r3, #16]
 80263c0:	f7ff fd34 	bl	8025e2c <__hi0bits>
 80263c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80263c8:	e7e2      	b.n	8026390 <__d2b+0x70>
 80263ca:	bf00      	nop
 80263cc:	0802fb07 	.word	0x0802fb07
 80263d0:	0802fb18 	.word	0x0802fb18

080263d4 <__sfputc_r>:
 80263d4:	6893      	ldr	r3, [r2, #8]
 80263d6:	3b01      	subs	r3, #1
 80263d8:	2b00      	cmp	r3, #0
 80263da:	b410      	push	{r4}
 80263dc:	6093      	str	r3, [r2, #8]
 80263de:	da08      	bge.n	80263f2 <__sfputc_r+0x1e>
 80263e0:	6994      	ldr	r4, [r2, #24]
 80263e2:	42a3      	cmp	r3, r4
 80263e4:	db01      	blt.n	80263ea <__sfputc_r+0x16>
 80263e6:	290a      	cmp	r1, #10
 80263e8:	d103      	bne.n	80263f2 <__sfputc_r+0x1e>
 80263ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263ee:	f7fe bab2 	b.w	8024956 <__swbuf_r>
 80263f2:	6813      	ldr	r3, [r2, #0]
 80263f4:	1c58      	adds	r0, r3, #1
 80263f6:	6010      	str	r0, [r2, #0]
 80263f8:	7019      	strb	r1, [r3, #0]
 80263fa:	4608      	mov	r0, r1
 80263fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026400:	4770      	bx	lr

08026402 <__sfputs_r>:
 8026402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026404:	4606      	mov	r6, r0
 8026406:	460f      	mov	r7, r1
 8026408:	4614      	mov	r4, r2
 802640a:	18d5      	adds	r5, r2, r3
 802640c:	42ac      	cmp	r4, r5
 802640e:	d101      	bne.n	8026414 <__sfputs_r+0x12>
 8026410:	2000      	movs	r0, #0
 8026412:	e007      	b.n	8026424 <__sfputs_r+0x22>
 8026414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026418:	463a      	mov	r2, r7
 802641a:	4630      	mov	r0, r6
 802641c:	f7ff ffda 	bl	80263d4 <__sfputc_r>
 8026420:	1c43      	adds	r3, r0, #1
 8026422:	d1f3      	bne.n	802640c <__sfputs_r+0xa>
 8026424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026428 <_vfiprintf_r>:
 8026428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802642c:	460d      	mov	r5, r1
 802642e:	b09d      	sub	sp, #116	; 0x74
 8026430:	4614      	mov	r4, r2
 8026432:	4698      	mov	r8, r3
 8026434:	4606      	mov	r6, r0
 8026436:	b118      	cbz	r0, 8026440 <_vfiprintf_r+0x18>
 8026438:	6a03      	ldr	r3, [r0, #32]
 802643a:	b90b      	cbnz	r3, 8026440 <_vfiprintf_r+0x18>
 802643c:	f7fe f9f8 	bl	8024830 <__sinit>
 8026440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026442:	07d9      	lsls	r1, r3, #31
 8026444:	d405      	bmi.n	8026452 <_vfiprintf_r+0x2a>
 8026446:	89ab      	ldrh	r3, [r5, #12]
 8026448:	059a      	lsls	r2, r3, #22
 802644a:	d402      	bmi.n	8026452 <_vfiprintf_r+0x2a>
 802644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802644e:	f7fe fc88 	bl	8024d62 <__retarget_lock_acquire_recursive>
 8026452:	89ab      	ldrh	r3, [r5, #12]
 8026454:	071b      	lsls	r3, r3, #28
 8026456:	d501      	bpl.n	802645c <_vfiprintf_r+0x34>
 8026458:	692b      	ldr	r3, [r5, #16]
 802645a:	b99b      	cbnz	r3, 8026484 <_vfiprintf_r+0x5c>
 802645c:	4629      	mov	r1, r5
 802645e:	4630      	mov	r0, r6
 8026460:	f7fe fab6 	bl	80249d0 <__swsetup_r>
 8026464:	b170      	cbz	r0, 8026484 <_vfiprintf_r+0x5c>
 8026466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026468:	07dc      	lsls	r4, r3, #31
 802646a:	d504      	bpl.n	8026476 <_vfiprintf_r+0x4e>
 802646c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026470:	b01d      	add	sp, #116	; 0x74
 8026472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026476:	89ab      	ldrh	r3, [r5, #12]
 8026478:	0598      	lsls	r0, r3, #22
 802647a:	d4f7      	bmi.n	802646c <_vfiprintf_r+0x44>
 802647c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802647e:	f7fe fc71 	bl	8024d64 <__retarget_lock_release_recursive>
 8026482:	e7f3      	b.n	802646c <_vfiprintf_r+0x44>
 8026484:	2300      	movs	r3, #0
 8026486:	9309      	str	r3, [sp, #36]	; 0x24
 8026488:	2320      	movs	r3, #32
 802648a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802648e:	f8cd 800c 	str.w	r8, [sp, #12]
 8026492:	2330      	movs	r3, #48	; 0x30
 8026494:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8026648 <_vfiprintf_r+0x220>
 8026498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802649c:	f04f 0901 	mov.w	r9, #1
 80264a0:	4623      	mov	r3, r4
 80264a2:	469a      	mov	sl, r3
 80264a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80264a8:	b10a      	cbz	r2, 80264ae <_vfiprintf_r+0x86>
 80264aa:	2a25      	cmp	r2, #37	; 0x25
 80264ac:	d1f9      	bne.n	80264a2 <_vfiprintf_r+0x7a>
 80264ae:	ebba 0b04 	subs.w	fp, sl, r4
 80264b2:	d00b      	beq.n	80264cc <_vfiprintf_r+0xa4>
 80264b4:	465b      	mov	r3, fp
 80264b6:	4622      	mov	r2, r4
 80264b8:	4629      	mov	r1, r5
 80264ba:	4630      	mov	r0, r6
 80264bc:	f7ff ffa1 	bl	8026402 <__sfputs_r>
 80264c0:	3001      	adds	r0, #1
 80264c2:	f000 80a9 	beq.w	8026618 <_vfiprintf_r+0x1f0>
 80264c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80264c8:	445a      	add	r2, fp
 80264ca:	9209      	str	r2, [sp, #36]	; 0x24
 80264cc:	f89a 3000 	ldrb.w	r3, [sl]
 80264d0:	2b00      	cmp	r3, #0
 80264d2:	f000 80a1 	beq.w	8026618 <_vfiprintf_r+0x1f0>
 80264d6:	2300      	movs	r3, #0
 80264d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80264dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80264e0:	f10a 0a01 	add.w	sl, sl, #1
 80264e4:	9304      	str	r3, [sp, #16]
 80264e6:	9307      	str	r3, [sp, #28]
 80264e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80264ec:	931a      	str	r3, [sp, #104]	; 0x68
 80264ee:	4654      	mov	r4, sl
 80264f0:	2205      	movs	r2, #5
 80264f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264f6:	4854      	ldr	r0, [pc, #336]	; (8026648 <_vfiprintf_r+0x220>)
 80264f8:	f7d9 fe7a 	bl	80001f0 <memchr>
 80264fc:	9a04      	ldr	r2, [sp, #16]
 80264fe:	b9d8      	cbnz	r0, 8026538 <_vfiprintf_r+0x110>
 8026500:	06d1      	lsls	r1, r2, #27
 8026502:	bf44      	itt	mi
 8026504:	2320      	movmi	r3, #32
 8026506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802650a:	0713      	lsls	r3, r2, #28
 802650c:	bf44      	itt	mi
 802650e:	232b      	movmi	r3, #43	; 0x2b
 8026510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026514:	f89a 3000 	ldrb.w	r3, [sl]
 8026518:	2b2a      	cmp	r3, #42	; 0x2a
 802651a:	d015      	beq.n	8026548 <_vfiprintf_r+0x120>
 802651c:	9a07      	ldr	r2, [sp, #28]
 802651e:	4654      	mov	r4, sl
 8026520:	2000      	movs	r0, #0
 8026522:	f04f 0c0a 	mov.w	ip, #10
 8026526:	4621      	mov	r1, r4
 8026528:	f811 3b01 	ldrb.w	r3, [r1], #1
 802652c:	3b30      	subs	r3, #48	; 0x30
 802652e:	2b09      	cmp	r3, #9
 8026530:	d94d      	bls.n	80265ce <_vfiprintf_r+0x1a6>
 8026532:	b1b0      	cbz	r0, 8026562 <_vfiprintf_r+0x13a>
 8026534:	9207      	str	r2, [sp, #28]
 8026536:	e014      	b.n	8026562 <_vfiprintf_r+0x13a>
 8026538:	eba0 0308 	sub.w	r3, r0, r8
 802653c:	fa09 f303 	lsl.w	r3, r9, r3
 8026540:	4313      	orrs	r3, r2
 8026542:	9304      	str	r3, [sp, #16]
 8026544:	46a2      	mov	sl, r4
 8026546:	e7d2      	b.n	80264ee <_vfiprintf_r+0xc6>
 8026548:	9b03      	ldr	r3, [sp, #12]
 802654a:	1d19      	adds	r1, r3, #4
 802654c:	681b      	ldr	r3, [r3, #0]
 802654e:	9103      	str	r1, [sp, #12]
 8026550:	2b00      	cmp	r3, #0
 8026552:	bfbb      	ittet	lt
 8026554:	425b      	neglt	r3, r3
 8026556:	f042 0202 	orrlt.w	r2, r2, #2
 802655a:	9307      	strge	r3, [sp, #28]
 802655c:	9307      	strlt	r3, [sp, #28]
 802655e:	bfb8      	it	lt
 8026560:	9204      	strlt	r2, [sp, #16]
 8026562:	7823      	ldrb	r3, [r4, #0]
 8026564:	2b2e      	cmp	r3, #46	; 0x2e
 8026566:	d10c      	bne.n	8026582 <_vfiprintf_r+0x15a>
 8026568:	7863      	ldrb	r3, [r4, #1]
 802656a:	2b2a      	cmp	r3, #42	; 0x2a
 802656c:	d134      	bne.n	80265d8 <_vfiprintf_r+0x1b0>
 802656e:	9b03      	ldr	r3, [sp, #12]
 8026570:	1d1a      	adds	r2, r3, #4
 8026572:	681b      	ldr	r3, [r3, #0]
 8026574:	9203      	str	r2, [sp, #12]
 8026576:	2b00      	cmp	r3, #0
 8026578:	bfb8      	it	lt
 802657a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802657e:	3402      	adds	r4, #2
 8026580:	9305      	str	r3, [sp, #20]
 8026582:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8026658 <_vfiprintf_r+0x230>
 8026586:	7821      	ldrb	r1, [r4, #0]
 8026588:	2203      	movs	r2, #3
 802658a:	4650      	mov	r0, sl
 802658c:	f7d9 fe30 	bl	80001f0 <memchr>
 8026590:	b138      	cbz	r0, 80265a2 <_vfiprintf_r+0x17a>
 8026592:	9b04      	ldr	r3, [sp, #16]
 8026594:	eba0 000a 	sub.w	r0, r0, sl
 8026598:	2240      	movs	r2, #64	; 0x40
 802659a:	4082      	lsls	r2, r0
 802659c:	4313      	orrs	r3, r2
 802659e:	3401      	adds	r4, #1
 80265a0:	9304      	str	r3, [sp, #16]
 80265a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265a6:	4829      	ldr	r0, [pc, #164]	; (802664c <_vfiprintf_r+0x224>)
 80265a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80265ac:	2206      	movs	r2, #6
 80265ae:	f7d9 fe1f 	bl	80001f0 <memchr>
 80265b2:	2800      	cmp	r0, #0
 80265b4:	d03f      	beq.n	8026636 <_vfiprintf_r+0x20e>
 80265b6:	4b26      	ldr	r3, [pc, #152]	; (8026650 <_vfiprintf_r+0x228>)
 80265b8:	bb1b      	cbnz	r3, 8026602 <_vfiprintf_r+0x1da>
 80265ba:	9b03      	ldr	r3, [sp, #12]
 80265bc:	3307      	adds	r3, #7
 80265be:	f023 0307 	bic.w	r3, r3, #7
 80265c2:	3308      	adds	r3, #8
 80265c4:	9303      	str	r3, [sp, #12]
 80265c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265c8:	443b      	add	r3, r7
 80265ca:	9309      	str	r3, [sp, #36]	; 0x24
 80265cc:	e768      	b.n	80264a0 <_vfiprintf_r+0x78>
 80265ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80265d2:	460c      	mov	r4, r1
 80265d4:	2001      	movs	r0, #1
 80265d6:	e7a6      	b.n	8026526 <_vfiprintf_r+0xfe>
 80265d8:	2300      	movs	r3, #0
 80265da:	3401      	adds	r4, #1
 80265dc:	9305      	str	r3, [sp, #20]
 80265de:	4619      	mov	r1, r3
 80265e0:	f04f 0c0a 	mov.w	ip, #10
 80265e4:	4620      	mov	r0, r4
 80265e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80265ea:	3a30      	subs	r2, #48	; 0x30
 80265ec:	2a09      	cmp	r2, #9
 80265ee:	d903      	bls.n	80265f8 <_vfiprintf_r+0x1d0>
 80265f0:	2b00      	cmp	r3, #0
 80265f2:	d0c6      	beq.n	8026582 <_vfiprintf_r+0x15a>
 80265f4:	9105      	str	r1, [sp, #20]
 80265f6:	e7c4      	b.n	8026582 <_vfiprintf_r+0x15a>
 80265f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80265fc:	4604      	mov	r4, r0
 80265fe:	2301      	movs	r3, #1
 8026600:	e7f0      	b.n	80265e4 <_vfiprintf_r+0x1bc>
 8026602:	ab03      	add	r3, sp, #12
 8026604:	9300      	str	r3, [sp, #0]
 8026606:	462a      	mov	r2, r5
 8026608:	4b12      	ldr	r3, [pc, #72]	; (8026654 <_vfiprintf_r+0x22c>)
 802660a:	a904      	add	r1, sp, #16
 802660c:	4630      	mov	r0, r6
 802660e:	f7fd fbfb 	bl	8023e08 <_printf_float>
 8026612:	4607      	mov	r7, r0
 8026614:	1c78      	adds	r0, r7, #1
 8026616:	d1d6      	bne.n	80265c6 <_vfiprintf_r+0x19e>
 8026618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802661a:	07d9      	lsls	r1, r3, #31
 802661c:	d405      	bmi.n	802662a <_vfiprintf_r+0x202>
 802661e:	89ab      	ldrh	r3, [r5, #12]
 8026620:	059a      	lsls	r2, r3, #22
 8026622:	d402      	bmi.n	802662a <_vfiprintf_r+0x202>
 8026624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026626:	f7fe fb9d 	bl	8024d64 <__retarget_lock_release_recursive>
 802662a:	89ab      	ldrh	r3, [r5, #12]
 802662c:	065b      	lsls	r3, r3, #25
 802662e:	f53f af1d 	bmi.w	802646c <_vfiprintf_r+0x44>
 8026632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026634:	e71c      	b.n	8026470 <_vfiprintf_r+0x48>
 8026636:	ab03      	add	r3, sp, #12
 8026638:	9300      	str	r3, [sp, #0]
 802663a:	462a      	mov	r2, r5
 802663c:	4b05      	ldr	r3, [pc, #20]	; (8026654 <_vfiprintf_r+0x22c>)
 802663e:	a904      	add	r1, sp, #16
 8026640:	4630      	mov	r0, r6
 8026642:	f7fd fe85 	bl	8024350 <_printf_i>
 8026646:	e7e4      	b.n	8026612 <_vfiprintf_r+0x1ea>
 8026648:	0802fc74 	.word	0x0802fc74
 802664c:	0802fc7e 	.word	0x0802fc7e
 8026650:	08023e09 	.word	0x08023e09
 8026654:	08026403 	.word	0x08026403
 8026658:	0802fc7a 	.word	0x0802fc7a

0802665c <fiprintf>:
 802665c:	b40e      	push	{r1, r2, r3}
 802665e:	b503      	push	{r0, r1, lr}
 8026660:	4601      	mov	r1, r0
 8026662:	ab03      	add	r3, sp, #12
 8026664:	4805      	ldr	r0, [pc, #20]	; (802667c <fiprintf+0x20>)
 8026666:	f853 2b04 	ldr.w	r2, [r3], #4
 802666a:	6800      	ldr	r0, [r0, #0]
 802666c:	9301      	str	r3, [sp, #4]
 802666e:	f7ff fedb 	bl	8026428 <_vfiprintf_r>
 8026672:	b002      	add	sp, #8
 8026674:	f85d eb04 	ldr.w	lr, [sp], #4
 8026678:	b003      	add	sp, #12
 802667a:	4770      	bx	lr
 802667c:	20001050 	.word	0x20001050

08026680 <__swhatbuf_r>:
 8026680:	b570      	push	{r4, r5, r6, lr}
 8026682:	460c      	mov	r4, r1
 8026684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026688:	2900      	cmp	r1, #0
 802668a:	b096      	sub	sp, #88	; 0x58
 802668c:	4615      	mov	r5, r2
 802668e:	461e      	mov	r6, r3
 8026690:	da0d      	bge.n	80266ae <__swhatbuf_r+0x2e>
 8026692:	89a3      	ldrh	r3, [r4, #12]
 8026694:	f013 0f80 	tst.w	r3, #128	; 0x80
 8026698:	f04f 0100 	mov.w	r1, #0
 802669c:	bf0c      	ite	eq
 802669e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80266a2:	2340      	movne	r3, #64	; 0x40
 80266a4:	2000      	movs	r0, #0
 80266a6:	6031      	str	r1, [r6, #0]
 80266a8:	602b      	str	r3, [r5, #0]
 80266aa:	b016      	add	sp, #88	; 0x58
 80266ac:	bd70      	pop	{r4, r5, r6, pc}
 80266ae:	466a      	mov	r2, sp
 80266b0:	f000 f87c 	bl	80267ac <_fstat_r>
 80266b4:	2800      	cmp	r0, #0
 80266b6:	dbec      	blt.n	8026692 <__swhatbuf_r+0x12>
 80266b8:	9901      	ldr	r1, [sp, #4]
 80266ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80266be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80266c2:	4259      	negs	r1, r3
 80266c4:	4159      	adcs	r1, r3
 80266c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80266ca:	e7eb      	b.n	80266a4 <__swhatbuf_r+0x24>

080266cc <__smakebuf_r>:
 80266cc:	898b      	ldrh	r3, [r1, #12]
 80266ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80266d0:	079d      	lsls	r5, r3, #30
 80266d2:	4606      	mov	r6, r0
 80266d4:	460c      	mov	r4, r1
 80266d6:	d507      	bpl.n	80266e8 <__smakebuf_r+0x1c>
 80266d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80266dc:	6023      	str	r3, [r4, #0]
 80266de:	6123      	str	r3, [r4, #16]
 80266e0:	2301      	movs	r3, #1
 80266e2:	6163      	str	r3, [r4, #20]
 80266e4:	b002      	add	sp, #8
 80266e6:	bd70      	pop	{r4, r5, r6, pc}
 80266e8:	ab01      	add	r3, sp, #4
 80266ea:	466a      	mov	r2, sp
 80266ec:	f7ff ffc8 	bl	8026680 <__swhatbuf_r>
 80266f0:	9900      	ldr	r1, [sp, #0]
 80266f2:	4605      	mov	r5, r0
 80266f4:	4630      	mov	r0, r6
 80266f6:	f7ff fa65 	bl	8025bc4 <_malloc_r>
 80266fa:	b948      	cbnz	r0, 8026710 <__smakebuf_r+0x44>
 80266fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026700:	059a      	lsls	r2, r3, #22
 8026702:	d4ef      	bmi.n	80266e4 <__smakebuf_r+0x18>
 8026704:	f023 0303 	bic.w	r3, r3, #3
 8026708:	f043 0302 	orr.w	r3, r3, #2
 802670c:	81a3      	strh	r3, [r4, #12]
 802670e:	e7e3      	b.n	80266d8 <__smakebuf_r+0xc>
 8026710:	89a3      	ldrh	r3, [r4, #12]
 8026712:	6020      	str	r0, [r4, #0]
 8026714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026718:	81a3      	strh	r3, [r4, #12]
 802671a:	9b00      	ldr	r3, [sp, #0]
 802671c:	6163      	str	r3, [r4, #20]
 802671e:	9b01      	ldr	r3, [sp, #4]
 8026720:	6120      	str	r0, [r4, #16]
 8026722:	b15b      	cbz	r3, 802673c <__smakebuf_r+0x70>
 8026724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026728:	4630      	mov	r0, r6
 802672a:	f000 f851 	bl	80267d0 <_isatty_r>
 802672e:	b128      	cbz	r0, 802673c <__smakebuf_r+0x70>
 8026730:	89a3      	ldrh	r3, [r4, #12]
 8026732:	f023 0303 	bic.w	r3, r3, #3
 8026736:	f043 0301 	orr.w	r3, r3, #1
 802673a:	81a3      	strh	r3, [r4, #12]
 802673c:	89a3      	ldrh	r3, [r4, #12]
 802673e:	431d      	orrs	r5, r3
 8026740:	81a5      	strh	r5, [r4, #12]
 8026742:	e7cf      	b.n	80266e4 <__smakebuf_r+0x18>

08026744 <_putc_r>:
 8026744:	b570      	push	{r4, r5, r6, lr}
 8026746:	460d      	mov	r5, r1
 8026748:	4614      	mov	r4, r2
 802674a:	4606      	mov	r6, r0
 802674c:	b118      	cbz	r0, 8026756 <_putc_r+0x12>
 802674e:	6a03      	ldr	r3, [r0, #32]
 8026750:	b90b      	cbnz	r3, 8026756 <_putc_r+0x12>
 8026752:	f7fe f86d 	bl	8024830 <__sinit>
 8026756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026758:	07d8      	lsls	r0, r3, #31
 802675a:	d405      	bmi.n	8026768 <_putc_r+0x24>
 802675c:	89a3      	ldrh	r3, [r4, #12]
 802675e:	0599      	lsls	r1, r3, #22
 8026760:	d402      	bmi.n	8026768 <_putc_r+0x24>
 8026762:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026764:	f7fe fafd 	bl	8024d62 <__retarget_lock_acquire_recursive>
 8026768:	68a3      	ldr	r3, [r4, #8]
 802676a:	3b01      	subs	r3, #1
 802676c:	2b00      	cmp	r3, #0
 802676e:	60a3      	str	r3, [r4, #8]
 8026770:	da05      	bge.n	802677e <_putc_r+0x3a>
 8026772:	69a2      	ldr	r2, [r4, #24]
 8026774:	4293      	cmp	r3, r2
 8026776:	db12      	blt.n	802679e <_putc_r+0x5a>
 8026778:	b2eb      	uxtb	r3, r5
 802677a:	2b0a      	cmp	r3, #10
 802677c:	d00f      	beq.n	802679e <_putc_r+0x5a>
 802677e:	6823      	ldr	r3, [r4, #0]
 8026780:	1c5a      	adds	r2, r3, #1
 8026782:	6022      	str	r2, [r4, #0]
 8026784:	701d      	strb	r5, [r3, #0]
 8026786:	b2ed      	uxtb	r5, r5
 8026788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802678a:	07da      	lsls	r2, r3, #31
 802678c:	d405      	bmi.n	802679a <_putc_r+0x56>
 802678e:	89a3      	ldrh	r3, [r4, #12]
 8026790:	059b      	lsls	r3, r3, #22
 8026792:	d402      	bmi.n	802679a <_putc_r+0x56>
 8026794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026796:	f7fe fae5 	bl	8024d64 <__retarget_lock_release_recursive>
 802679a:	4628      	mov	r0, r5
 802679c:	bd70      	pop	{r4, r5, r6, pc}
 802679e:	4629      	mov	r1, r5
 80267a0:	4622      	mov	r2, r4
 80267a2:	4630      	mov	r0, r6
 80267a4:	f7fe f8d7 	bl	8024956 <__swbuf_r>
 80267a8:	4605      	mov	r5, r0
 80267aa:	e7ed      	b.n	8026788 <_putc_r+0x44>

080267ac <_fstat_r>:
 80267ac:	b538      	push	{r3, r4, r5, lr}
 80267ae:	4d07      	ldr	r5, [pc, #28]	; (80267cc <_fstat_r+0x20>)
 80267b0:	2300      	movs	r3, #0
 80267b2:	4604      	mov	r4, r0
 80267b4:	4608      	mov	r0, r1
 80267b6:	4611      	mov	r1, r2
 80267b8:	602b      	str	r3, [r5, #0]
 80267ba:	f7ef ff46 	bl	801664a <_fstat>
 80267be:	1c43      	adds	r3, r0, #1
 80267c0:	d102      	bne.n	80267c8 <_fstat_r+0x1c>
 80267c2:	682b      	ldr	r3, [r5, #0]
 80267c4:	b103      	cbz	r3, 80267c8 <_fstat_r+0x1c>
 80267c6:	6023      	str	r3, [r4, #0]
 80267c8:	bd38      	pop	{r3, r4, r5, pc}
 80267ca:	bf00      	nop
 80267cc:	20013204 	.word	0x20013204

080267d0 <_isatty_r>:
 80267d0:	b538      	push	{r3, r4, r5, lr}
 80267d2:	4d06      	ldr	r5, [pc, #24]	; (80267ec <_isatty_r+0x1c>)
 80267d4:	2300      	movs	r3, #0
 80267d6:	4604      	mov	r4, r0
 80267d8:	4608      	mov	r0, r1
 80267da:	602b      	str	r3, [r5, #0]
 80267dc:	f7ef ff45 	bl	801666a <_isatty>
 80267e0:	1c43      	adds	r3, r0, #1
 80267e2:	d102      	bne.n	80267ea <_isatty_r+0x1a>
 80267e4:	682b      	ldr	r3, [r5, #0]
 80267e6:	b103      	cbz	r3, 80267ea <_isatty_r+0x1a>
 80267e8:	6023      	str	r3, [r4, #0]
 80267ea:	bd38      	pop	{r3, r4, r5, pc}
 80267ec:	20013204 	.word	0x20013204

080267f0 <_sbrk_r>:
 80267f0:	b538      	push	{r3, r4, r5, lr}
 80267f2:	4d06      	ldr	r5, [pc, #24]	; (802680c <_sbrk_r+0x1c>)
 80267f4:	2300      	movs	r3, #0
 80267f6:	4604      	mov	r4, r0
 80267f8:	4608      	mov	r0, r1
 80267fa:	602b      	str	r3, [r5, #0]
 80267fc:	f7ef ff4e 	bl	801669c <_sbrk>
 8026800:	1c43      	adds	r3, r0, #1
 8026802:	d102      	bne.n	802680a <_sbrk_r+0x1a>
 8026804:	682b      	ldr	r3, [r5, #0]
 8026806:	b103      	cbz	r3, 802680a <_sbrk_r+0x1a>
 8026808:	6023      	str	r3, [r4, #0]
 802680a:	bd38      	pop	{r3, r4, r5, pc}
 802680c:	20013204 	.word	0x20013204

08026810 <abort>:
 8026810:	b508      	push	{r3, lr}
 8026812:	2006      	movs	r0, #6
 8026814:	f000 f860 	bl	80268d8 <raise>
 8026818:	2001      	movs	r0, #1
 802681a:	f7ef fec7 	bl	80165ac <_exit>

0802681e <_calloc_r>:
 802681e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026820:	fba1 2402 	umull	r2, r4, r1, r2
 8026824:	b94c      	cbnz	r4, 802683a <_calloc_r+0x1c>
 8026826:	4611      	mov	r1, r2
 8026828:	9201      	str	r2, [sp, #4]
 802682a:	f7ff f9cb 	bl	8025bc4 <_malloc_r>
 802682e:	9a01      	ldr	r2, [sp, #4]
 8026830:	4605      	mov	r5, r0
 8026832:	b930      	cbnz	r0, 8026842 <_calloc_r+0x24>
 8026834:	4628      	mov	r0, r5
 8026836:	b003      	add	sp, #12
 8026838:	bd30      	pop	{r4, r5, pc}
 802683a:	220c      	movs	r2, #12
 802683c:	6002      	str	r2, [r0, #0]
 802683e:	2500      	movs	r5, #0
 8026840:	e7f8      	b.n	8026834 <_calloc_r+0x16>
 8026842:	4621      	mov	r1, r4
 8026844:	f7fe f91c 	bl	8024a80 <memset>
 8026848:	e7f4      	b.n	8026834 <_calloc_r+0x16>

0802684a <__ascii_mbtowc>:
 802684a:	b082      	sub	sp, #8
 802684c:	b901      	cbnz	r1, 8026850 <__ascii_mbtowc+0x6>
 802684e:	a901      	add	r1, sp, #4
 8026850:	b142      	cbz	r2, 8026864 <__ascii_mbtowc+0x1a>
 8026852:	b14b      	cbz	r3, 8026868 <__ascii_mbtowc+0x1e>
 8026854:	7813      	ldrb	r3, [r2, #0]
 8026856:	600b      	str	r3, [r1, #0]
 8026858:	7812      	ldrb	r2, [r2, #0]
 802685a:	1e10      	subs	r0, r2, #0
 802685c:	bf18      	it	ne
 802685e:	2001      	movne	r0, #1
 8026860:	b002      	add	sp, #8
 8026862:	4770      	bx	lr
 8026864:	4610      	mov	r0, r2
 8026866:	e7fb      	b.n	8026860 <__ascii_mbtowc+0x16>
 8026868:	f06f 0001 	mvn.w	r0, #1
 802686c:	e7f8      	b.n	8026860 <__ascii_mbtowc+0x16>

0802686e <__ascii_wctomb>:
 802686e:	b149      	cbz	r1, 8026884 <__ascii_wctomb+0x16>
 8026870:	2aff      	cmp	r2, #255	; 0xff
 8026872:	bf85      	ittet	hi
 8026874:	238a      	movhi	r3, #138	; 0x8a
 8026876:	6003      	strhi	r3, [r0, #0]
 8026878:	700a      	strbls	r2, [r1, #0]
 802687a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802687e:	bf98      	it	ls
 8026880:	2001      	movls	r0, #1
 8026882:	4770      	bx	lr
 8026884:	4608      	mov	r0, r1
 8026886:	4770      	bx	lr

08026888 <_raise_r>:
 8026888:	291f      	cmp	r1, #31
 802688a:	b538      	push	{r3, r4, r5, lr}
 802688c:	4604      	mov	r4, r0
 802688e:	460d      	mov	r5, r1
 8026890:	d904      	bls.n	802689c <_raise_r+0x14>
 8026892:	2316      	movs	r3, #22
 8026894:	6003      	str	r3, [r0, #0]
 8026896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802689a:	bd38      	pop	{r3, r4, r5, pc}
 802689c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802689e:	b112      	cbz	r2, 80268a6 <_raise_r+0x1e>
 80268a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80268a4:	b94b      	cbnz	r3, 80268ba <_raise_r+0x32>
 80268a6:	4620      	mov	r0, r4
 80268a8:	f000 f830 	bl	802690c <_getpid_r>
 80268ac:	462a      	mov	r2, r5
 80268ae:	4601      	mov	r1, r0
 80268b0:	4620      	mov	r0, r4
 80268b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80268b6:	f000 b817 	b.w	80268e8 <_kill_r>
 80268ba:	2b01      	cmp	r3, #1
 80268bc:	d00a      	beq.n	80268d4 <_raise_r+0x4c>
 80268be:	1c59      	adds	r1, r3, #1
 80268c0:	d103      	bne.n	80268ca <_raise_r+0x42>
 80268c2:	2316      	movs	r3, #22
 80268c4:	6003      	str	r3, [r0, #0]
 80268c6:	2001      	movs	r0, #1
 80268c8:	e7e7      	b.n	802689a <_raise_r+0x12>
 80268ca:	2400      	movs	r4, #0
 80268cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80268d0:	4628      	mov	r0, r5
 80268d2:	4798      	blx	r3
 80268d4:	2000      	movs	r0, #0
 80268d6:	e7e0      	b.n	802689a <_raise_r+0x12>

080268d8 <raise>:
 80268d8:	4b02      	ldr	r3, [pc, #8]	; (80268e4 <raise+0xc>)
 80268da:	4601      	mov	r1, r0
 80268dc:	6818      	ldr	r0, [r3, #0]
 80268de:	f7ff bfd3 	b.w	8026888 <_raise_r>
 80268e2:	bf00      	nop
 80268e4:	20001050 	.word	0x20001050

080268e8 <_kill_r>:
 80268e8:	b538      	push	{r3, r4, r5, lr}
 80268ea:	4d07      	ldr	r5, [pc, #28]	; (8026908 <_kill_r+0x20>)
 80268ec:	2300      	movs	r3, #0
 80268ee:	4604      	mov	r4, r0
 80268f0:	4608      	mov	r0, r1
 80268f2:	4611      	mov	r1, r2
 80268f4:	602b      	str	r3, [r5, #0]
 80268f6:	f7ef fe49 	bl	801658c <_kill>
 80268fa:	1c43      	adds	r3, r0, #1
 80268fc:	d102      	bne.n	8026904 <_kill_r+0x1c>
 80268fe:	682b      	ldr	r3, [r5, #0]
 8026900:	b103      	cbz	r3, 8026904 <_kill_r+0x1c>
 8026902:	6023      	str	r3, [r4, #0]
 8026904:	bd38      	pop	{r3, r4, r5, pc}
 8026906:	bf00      	nop
 8026908:	20013204 	.word	0x20013204

0802690c <_getpid_r>:
 802690c:	f7ef be36 	b.w	801657c <_getpid>

08026910 <acosf>:
 8026910:	b508      	push	{r3, lr}
 8026912:	ed2d 8b02 	vpush	{d8}
 8026916:	eeb0 8a40 	vmov.f32	s16, s0
 802691a:	f000 fbd9 	bl	80270d0 <__ieee754_acosf>
 802691e:	eeb4 8a48 	vcmp.f32	s16, s16
 8026922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026926:	eef0 8a40 	vmov.f32	s17, s0
 802692a:	d615      	bvs.n	8026958 <acosf+0x48>
 802692c:	eeb0 0a48 	vmov.f32	s0, s16
 8026930:	f000 f922 	bl	8026b78 <fabsf>
 8026934:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026938:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802693c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026940:	dd0a      	ble.n	8026958 <acosf+0x48>
 8026942:	f7fe f9e3 	bl	8024d0c <__errno>
 8026946:	ecbd 8b02 	vpop	{d8}
 802694a:	2321      	movs	r3, #33	; 0x21
 802694c:	6003      	str	r3, [r0, #0]
 802694e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8026952:	4804      	ldr	r0, [pc, #16]	; (8026964 <acosf+0x54>)
 8026954:	f000 b998 	b.w	8026c88 <nanf>
 8026958:	eeb0 0a68 	vmov.f32	s0, s17
 802695c:	ecbd 8b02 	vpop	{d8}
 8026960:	bd08      	pop	{r3, pc}
 8026962:	bf00      	nop
 8026964:	0802faa1 	.word	0x0802faa1

08026968 <asinf>:
 8026968:	b508      	push	{r3, lr}
 802696a:	ed2d 8b02 	vpush	{d8}
 802696e:	eeb0 8a40 	vmov.f32	s16, s0
 8026972:	f000 fca5 	bl	80272c0 <__ieee754_asinf>
 8026976:	eeb4 8a48 	vcmp.f32	s16, s16
 802697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802697e:	eef0 8a40 	vmov.f32	s17, s0
 8026982:	d615      	bvs.n	80269b0 <asinf+0x48>
 8026984:	eeb0 0a48 	vmov.f32	s0, s16
 8026988:	f000 f8f6 	bl	8026b78 <fabsf>
 802698c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026990:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026998:	dd0a      	ble.n	80269b0 <asinf+0x48>
 802699a:	f7fe f9b7 	bl	8024d0c <__errno>
 802699e:	ecbd 8b02 	vpop	{d8}
 80269a2:	2321      	movs	r3, #33	; 0x21
 80269a4:	6003      	str	r3, [r0, #0]
 80269a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80269aa:	4804      	ldr	r0, [pc, #16]	; (80269bc <asinf+0x54>)
 80269ac:	f000 b96c 	b.w	8026c88 <nanf>
 80269b0:	eeb0 0a68 	vmov.f32	s0, s17
 80269b4:	ecbd 8b02 	vpop	{d8}
 80269b8:	bd08      	pop	{r3, pc}
 80269ba:	bf00      	nop
 80269bc:	0802faa1 	.word	0x0802faa1

080269c0 <atan2f>:
 80269c0:	f000 bd64 	b.w	802748c <__ieee754_atan2f>

080269c4 <fmodf>:
 80269c4:	b508      	push	{r3, lr}
 80269c6:	ed2d 8b02 	vpush	{d8}
 80269ca:	eef0 8a40 	vmov.f32	s17, s0
 80269ce:	eeb0 8a60 	vmov.f32	s16, s1
 80269d2:	f000 fdfb 	bl	80275cc <__ieee754_fmodf>
 80269d6:	eef4 8a48 	vcmp.f32	s17, s16
 80269da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269de:	d60c      	bvs.n	80269fa <fmodf+0x36>
 80269e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8026a00 <fmodf+0x3c>
 80269e4:	eeb4 8a68 	vcmp.f32	s16, s17
 80269e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269ec:	d105      	bne.n	80269fa <fmodf+0x36>
 80269ee:	f7fe f98d 	bl	8024d0c <__errno>
 80269f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80269f6:	2321      	movs	r3, #33	; 0x21
 80269f8:	6003      	str	r3, [r0, #0]
 80269fa:	ecbd 8b02 	vpop	{d8}
 80269fe:	bd08      	pop	{r3, pc}
 8026a00:	00000000 	.word	0x00000000

08026a04 <powf>:
 8026a04:	b508      	push	{r3, lr}
 8026a06:	ed2d 8b04 	vpush	{d8-d9}
 8026a0a:	eeb0 8a60 	vmov.f32	s16, s1
 8026a0e:	eeb0 9a40 	vmov.f32	s18, s0
 8026a12:	f000 fe5d 	bl	80276d0 <__ieee754_powf>
 8026a16:	eeb4 8a48 	vcmp.f32	s16, s16
 8026a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a1e:	eef0 8a40 	vmov.f32	s17, s0
 8026a22:	d63e      	bvs.n	8026aa2 <powf+0x9e>
 8026a24:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8026a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a2c:	d112      	bne.n	8026a54 <powf+0x50>
 8026a2e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8026a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a36:	d039      	beq.n	8026aac <powf+0xa8>
 8026a38:	eeb0 0a48 	vmov.f32	s0, s16
 8026a3c:	f000 f916 	bl	8026c6c <finitef>
 8026a40:	b378      	cbz	r0, 8026aa2 <powf+0x9e>
 8026a42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a4a:	d52a      	bpl.n	8026aa2 <powf+0x9e>
 8026a4c:	f7fe f95e 	bl	8024d0c <__errno>
 8026a50:	2322      	movs	r3, #34	; 0x22
 8026a52:	e014      	b.n	8026a7e <powf+0x7a>
 8026a54:	f000 f90a 	bl	8026c6c <finitef>
 8026a58:	b998      	cbnz	r0, 8026a82 <powf+0x7e>
 8026a5a:	eeb0 0a49 	vmov.f32	s0, s18
 8026a5e:	f000 f905 	bl	8026c6c <finitef>
 8026a62:	b170      	cbz	r0, 8026a82 <powf+0x7e>
 8026a64:	eeb0 0a48 	vmov.f32	s0, s16
 8026a68:	f000 f900 	bl	8026c6c <finitef>
 8026a6c:	b148      	cbz	r0, 8026a82 <powf+0x7e>
 8026a6e:	eef4 8a68 	vcmp.f32	s17, s17
 8026a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a76:	d7e9      	bvc.n	8026a4c <powf+0x48>
 8026a78:	f7fe f948 	bl	8024d0c <__errno>
 8026a7c:	2321      	movs	r3, #33	; 0x21
 8026a7e:	6003      	str	r3, [r0, #0]
 8026a80:	e00f      	b.n	8026aa2 <powf+0x9e>
 8026a82:	eef5 8a40 	vcmp.f32	s17, #0.0
 8026a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a8a:	d10a      	bne.n	8026aa2 <powf+0x9e>
 8026a8c:	eeb0 0a49 	vmov.f32	s0, s18
 8026a90:	f000 f8ec 	bl	8026c6c <finitef>
 8026a94:	b128      	cbz	r0, 8026aa2 <powf+0x9e>
 8026a96:	eeb0 0a48 	vmov.f32	s0, s16
 8026a9a:	f000 f8e7 	bl	8026c6c <finitef>
 8026a9e:	2800      	cmp	r0, #0
 8026aa0:	d1d4      	bne.n	8026a4c <powf+0x48>
 8026aa2:	eeb0 0a68 	vmov.f32	s0, s17
 8026aa6:	ecbd 8b04 	vpop	{d8-d9}
 8026aaa:	bd08      	pop	{r3, pc}
 8026aac:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8026ab0:	e7f7      	b.n	8026aa2 <powf+0x9e>
	...

08026ab4 <sqrtf>:
 8026ab4:	b508      	push	{r3, lr}
 8026ab6:	ed2d 8b02 	vpush	{d8}
 8026aba:	eeb0 8a40 	vmov.f32	s16, s0
 8026abe:	f000 f93b 	bl	8026d38 <__ieee754_sqrtf>
 8026ac2:	eeb4 8a48 	vcmp.f32	s16, s16
 8026ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026aca:	d60c      	bvs.n	8026ae6 <sqrtf+0x32>
 8026acc:	eddf 8a07 	vldr	s17, [pc, #28]	; 8026aec <sqrtf+0x38>
 8026ad0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ad8:	d505      	bpl.n	8026ae6 <sqrtf+0x32>
 8026ada:	f7fe f917 	bl	8024d0c <__errno>
 8026ade:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8026ae2:	2321      	movs	r3, #33	; 0x21
 8026ae4:	6003      	str	r3, [r0, #0]
 8026ae6:	ecbd 8b02 	vpop	{d8}
 8026aea:	bd08      	pop	{r3, pc}
 8026aec:	00000000 	.word	0x00000000

08026af0 <cosf>:
 8026af0:	ee10 3a10 	vmov	r3, s0
 8026af4:	b507      	push	{r0, r1, r2, lr}
 8026af6:	4a1e      	ldr	r2, [pc, #120]	; (8026b70 <cosf+0x80>)
 8026af8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026afc:	4293      	cmp	r3, r2
 8026afe:	dc06      	bgt.n	8026b0e <cosf+0x1e>
 8026b00:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8026b74 <cosf+0x84>
 8026b04:	b003      	add	sp, #12
 8026b06:	f85d eb04 	ldr.w	lr, [sp], #4
 8026b0a:	f000 b95b 	b.w	8026dc4 <__kernel_cosf>
 8026b0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026b12:	db04      	blt.n	8026b1e <cosf+0x2e>
 8026b14:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026b18:	b003      	add	sp, #12
 8026b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8026b1e:	4668      	mov	r0, sp
 8026b20:	f001 f8a0 	bl	8027c64 <__ieee754_rem_pio2f>
 8026b24:	f000 0003 	and.w	r0, r0, #3
 8026b28:	2801      	cmp	r0, #1
 8026b2a:	d009      	beq.n	8026b40 <cosf+0x50>
 8026b2c:	2802      	cmp	r0, #2
 8026b2e:	d010      	beq.n	8026b52 <cosf+0x62>
 8026b30:	b9b0      	cbnz	r0, 8026b60 <cosf+0x70>
 8026b32:	eddd 0a01 	vldr	s1, [sp, #4]
 8026b36:	ed9d 0a00 	vldr	s0, [sp]
 8026b3a:	f000 f943 	bl	8026dc4 <__kernel_cosf>
 8026b3e:	e7eb      	b.n	8026b18 <cosf+0x28>
 8026b40:	eddd 0a01 	vldr	s1, [sp, #4]
 8026b44:	ed9d 0a00 	vldr	s0, [sp]
 8026b48:	f000 f99a 	bl	8026e80 <__kernel_sinf>
 8026b4c:	eeb1 0a40 	vneg.f32	s0, s0
 8026b50:	e7e2      	b.n	8026b18 <cosf+0x28>
 8026b52:	eddd 0a01 	vldr	s1, [sp, #4]
 8026b56:	ed9d 0a00 	vldr	s0, [sp]
 8026b5a:	f000 f933 	bl	8026dc4 <__kernel_cosf>
 8026b5e:	e7f5      	b.n	8026b4c <cosf+0x5c>
 8026b60:	eddd 0a01 	vldr	s1, [sp, #4]
 8026b64:	ed9d 0a00 	vldr	s0, [sp]
 8026b68:	2001      	movs	r0, #1
 8026b6a:	f000 f989 	bl	8026e80 <__kernel_sinf>
 8026b6e:	e7d3      	b.n	8026b18 <cosf+0x28>
 8026b70:	3f490fd8 	.word	0x3f490fd8
 8026b74:	00000000 	.word	0x00000000

08026b78 <fabsf>:
 8026b78:	ee10 3a10 	vmov	r3, s0
 8026b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026b80:	ee00 3a10 	vmov	s0, r3
 8026b84:	4770      	bx	lr
	...

08026b88 <sinf>:
 8026b88:	ee10 3a10 	vmov	r3, s0
 8026b8c:	b507      	push	{r0, r1, r2, lr}
 8026b8e:	4a1f      	ldr	r2, [pc, #124]	; (8026c0c <sinf+0x84>)
 8026b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026b94:	4293      	cmp	r3, r2
 8026b96:	dc07      	bgt.n	8026ba8 <sinf+0x20>
 8026b98:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8026c10 <sinf+0x88>
 8026b9c:	2000      	movs	r0, #0
 8026b9e:	b003      	add	sp, #12
 8026ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8026ba4:	f000 b96c 	b.w	8026e80 <__kernel_sinf>
 8026ba8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026bac:	db04      	blt.n	8026bb8 <sinf+0x30>
 8026bae:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026bb2:	b003      	add	sp, #12
 8026bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8026bb8:	4668      	mov	r0, sp
 8026bba:	f001 f853 	bl	8027c64 <__ieee754_rem_pio2f>
 8026bbe:	f000 0003 	and.w	r0, r0, #3
 8026bc2:	2801      	cmp	r0, #1
 8026bc4:	d00a      	beq.n	8026bdc <sinf+0x54>
 8026bc6:	2802      	cmp	r0, #2
 8026bc8:	d00f      	beq.n	8026bea <sinf+0x62>
 8026bca:	b9c0      	cbnz	r0, 8026bfe <sinf+0x76>
 8026bcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8026bd0:	ed9d 0a00 	vldr	s0, [sp]
 8026bd4:	2001      	movs	r0, #1
 8026bd6:	f000 f953 	bl	8026e80 <__kernel_sinf>
 8026bda:	e7ea      	b.n	8026bb2 <sinf+0x2a>
 8026bdc:	eddd 0a01 	vldr	s1, [sp, #4]
 8026be0:	ed9d 0a00 	vldr	s0, [sp]
 8026be4:	f000 f8ee 	bl	8026dc4 <__kernel_cosf>
 8026be8:	e7e3      	b.n	8026bb2 <sinf+0x2a>
 8026bea:	eddd 0a01 	vldr	s1, [sp, #4]
 8026bee:	ed9d 0a00 	vldr	s0, [sp]
 8026bf2:	2001      	movs	r0, #1
 8026bf4:	f000 f944 	bl	8026e80 <__kernel_sinf>
 8026bf8:	eeb1 0a40 	vneg.f32	s0, s0
 8026bfc:	e7d9      	b.n	8026bb2 <sinf+0x2a>
 8026bfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8026c02:	ed9d 0a00 	vldr	s0, [sp]
 8026c06:	f000 f8dd 	bl	8026dc4 <__kernel_cosf>
 8026c0a:	e7f5      	b.n	8026bf8 <sinf+0x70>
 8026c0c:	3f490fd8 	.word	0x3f490fd8
 8026c10:	00000000 	.word	0x00000000

08026c14 <tanf>:
 8026c14:	ee10 3a10 	vmov	r3, s0
 8026c18:	b507      	push	{r0, r1, r2, lr}
 8026c1a:	4a12      	ldr	r2, [pc, #72]	; (8026c64 <tanf+0x50>)
 8026c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026c20:	4293      	cmp	r3, r2
 8026c22:	dc07      	bgt.n	8026c34 <tanf+0x20>
 8026c24:	eddf 0a10 	vldr	s1, [pc, #64]	; 8026c68 <tanf+0x54>
 8026c28:	2001      	movs	r0, #1
 8026c2a:	b003      	add	sp, #12
 8026c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026c30:	f000 b96e 	b.w	8026f10 <__kernel_tanf>
 8026c34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026c38:	db04      	blt.n	8026c44 <tanf+0x30>
 8026c3a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026c3e:	b003      	add	sp, #12
 8026c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8026c44:	4668      	mov	r0, sp
 8026c46:	f001 f80d 	bl	8027c64 <__ieee754_rem_pio2f>
 8026c4a:	0040      	lsls	r0, r0, #1
 8026c4c:	f000 0002 	and.w	r0, r0, #2
 8026c50:	eddd 0a01 	vldr	s1, [sp, #4]
 8026c54:	ed9d 0a00 	vldr	s0, [sp]
 8026c58:	f1c0 0001 	rsb	r0, r0, #1
 8026c5c:	f000 f958 	bl	8026f10 <__kernel_tanf>
 8026c60:	e7ed      	b.n	8026c3e <tanf+0x2a>
 8026c62:	bf00      	nop
 8026c64:	3f490fda 	.word	0x3f490fda
 8026c68:	00000000 	.word	0x00000000

08026c6c <finitef>:
 8026c6c:	b082      	sub	sp, #8
 8026c6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026c72:	9801      	ldr	r0, [sp, #4]
 8026c74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026c78:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026c7c:	bfac      	ite	ge
 8026c7e:	2000      	movge	r0, #0
 8026c80:	2001      	movlt	r0, #1
 8026c82:	b002      	add	sp, #8
 8026c84:	4770      	bx	lr
	...

08026c88 <nanf>:
 8026c88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026c90 <nanf+0x8>
 8026c8c:	4770      	bx	lr
 8026c8e:	bf00      	nop
 8026c90:	7fc00000 	.word	0x7fc00000

08026c94 <fmaxf>:
 8026c94:	b508      	push	{r3, lr}
 8026c96:	ed2d 8b02 	vpush	{d8}
 8026c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8026c9e:	eef0 8a60 	vmov.f32	s17, s1
 8026ca2:	f000 f82d 	bl	8026d00 <__fpclassifyf>
 8026ca6:	b148      	cbz	r0, 8026cbc <fmaxf+0x28>
 8026ca8:	eeb0 0a68 	vmov.f32	s0, s17
 8026cac:	f000 f828 	bl	8026d00 <__fpclassifyf>
 8026cb0:	b130      	cbz	r0, 8026cc0 <fmaxf+0x2c>
 8026cb2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cba:	dc01      	bgt.n	8026cc0 <fmaxf+0x2c>
 8026cbc:	eeb0 8a68 	vmov.f32	s16, s17
 8026cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8026cc4:	ecbd 8b02 	vpop	{d8}
 8026cc8:	bd08      	pop	{r3, pc}

08026cca <fminf>:
 8026cca:	b508      	push	{r3, lr}
 8026ccc:	ed2d 8b02 	vpush	{d8}
 8026cd0:	eeb0 8a40 	vmov.f32	s16, s0
 8026cd4:	eef0 8a60 	vmov.f32	s17, s1
 8026cd8:	f000 f812 	bl	8026d00 <__fpclassifyf>
 8026cdc:	b148      	cbz	r0, 8026cf2 <fminf+0x28>
 8026cde:	eeb0 0a68 	vmov.f32	s0, s17
 8026ce2:	f000 f80d 	bl	8026d00 <__fpclassifyf>
 8026ce6:	b130      	cbz	r0, 8026cf6 <fminf+0x2c>
 8026ce8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cf0:	d401      	bmi.n	8026cf6 <fminf+0x2c>
 8026cf2:	eeb0 8a68 	vmov.f32	s16, s17
 8026cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8026cfa:	ecbd 8b02 	vpop	{d8}
 8026cfe:	bd08      	pop	{r3, pc}

08026d00 <__fpclassifyf>:
 8026d00:	ee10 3a10 	vmov	r3, s0
 8026d04:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8026d08:	d00d      	beq.n	8026d26 <__fpclassifyf+0x26>
 8026d0a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8026d0e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8026d12:	d30a      	bcc.n	8026d2a <__fpclassifyf+0x2a>
 8026d14:	4b07      	ldr	r3, [pc, #28]	; (8026d34 <__fpclassifyf+0x34>)
 8026d16:	1e42      	subs	r2, r0, #1
 8026d18:	429a      	cmp	r2, r3
 8026d1a:	d908      	bls.n	8026d2e <__fpclassifyf+0x2e>
 8026d1c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8026d20:	4258      	negs	r0, r3
 8026d22:	4158      	adcs	r0, r3
 8026d24:	4770      	bx	lr
 8026d26:	2002      	movs	r0, #2
 8026d28:	4770      	bx	lr
 8026d2a:	2004      	movs	r0, #4
 8026d2c:	4770      	bx	lr
 8026d2e:	2003      	movs	r0, #3
 8026d30:	4770      	bx	lr
 8026d32:	bf00      	nop
 8026d34:	007ffffe 	.word	0x007ffffe

08026d38 <__ieee754_sqrtf>:
 8026d38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8026d3c:	4770      	bx	lr
	...

08026d40 <floorf>:
 8026d40:	ee10 3a10 	vmov	r3, s0
 8026d44:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026d48:	3a7f      	subs	r2, #127	; 0x7f
 8026d4a:	2a16      	cmp	r2, #22
 8026d4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8026d50:	dc2a      	bgt.n	8026da8 <floorf+0x68>
 8026d52:	2a00      	cmp	r2, #0
 8026d54:	da11      	bge.n	8026d7a <floorf+0x3a>
 8026d56:	eddf 7a18 	vldr	s15, [pc, #96]	; 8026db8 <floorf+0x78>
 8026d5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026d5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d66:	dd05      	ble.n	8026d74 <floorf+0x34>
 8026d68:	2b00      	cmp	r3, #0
 8026d6a:	da23      	bge.n	8026db4 <floorf+0x74>
 8026d6c:	4a13      	ldr	r2, [pc, #76]	; (8026dbc <floorf+0x7c>)
 8026d6e:	2900      	cmp	r1, #0
 8026d70:	bf18      	it	ne
 8026d72:	4613      	movne	r3, r2
 8026d74:	ee00 3a10 	vmov	s0, r3
 8026d78:	4770      	bx	lr
 8026d7a:	4911      	ldr	r1, [pc, #68]	; (8026dc0 <floorf+0x80>)
 8026d7c:	4111      	asrs	r1, r2
 8026d7e:	420b      	tst	r3, r1
 8026d80:	d0fa      	beq.n	8026d78 <floorf+0x38>
 8026d82:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8026db8 <floorf+0x78>
 8026d86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026d8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d92:	ddef      	ble.n	8026d74 <floorf+0x34>
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	bfbe      	ittt	lt
 8026d98:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8026d9c:	fa40 f202 	asrlt.w	r2, r0, r2
 8026da0:	189b      	addlt	r3, r3, r2
 8026da2:	ea23 0301 	bic.w	r3, r3, r1
 8026da6:	e7e5      	b.n	8026d74 <floorf+0x34>
 8026da8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026dac:	d3e4      	bcc.n	8026d78 <floorf+0x38>
 8026dae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026db2:	4770      	bx	lr
 8026db4:	2300      	movs	r3, #0
 8026db6:	e7dd      	b.n	8026d74 <floorf+0x34>
 8026db8:	7149f2ca 	.word	0x7149f2ca
 8026dbc:	bf800000 	.word	0xbf800000
 8026dc0:	007fffff 	.word	0x007fffff

08026dc4 <__kernel_cosf>:
 8026dc4:	ee10 3a10 	vmov	r3, s0
 8026dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026dcc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8026dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026dd4:	da05      	bge.n	8026de2 <__kernel_cosf+0x1e>
 8026dd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026dda:	ee17 2a90 	vmov	r2, s15
 8026dde:	2a00      	cmp	r2, #0
 8026de0:	d03b      	beq.n	8026e5a <__kernel_cosf+0x96>
 8026de2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8026de6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8026e60 <__kernel_cosf+0x9c>
 8026dea:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8026e64 <__kernel_cosf+0xa0>
 8026dee:	4a1e      	ldr	r2, [pc, #120]	; (8026e68 <__kernel_cosf+0xa4>)
 8026df0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8026df4:	4293      	cmp	r3, r2
 8026df6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8026e6c <__kernel_cosf+0xa8>
 8026dfa:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026dfe:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8026e70 <__kernel_cosf+0xac>
 8026e02:	eea7 6a87 	vfma.f32	s12, s15, s14
 8026e06:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8026e74 <__kernel_cosf+0xb0>
 8026e0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026e0e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8026e78 <__kernel_cosf+0xb4>
 8026e12:	eea7 6a87 	vfma.f32	s12, s15, s14
 8026e16:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8026e1a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8026e1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8026e22:	eee7 0a06 	vfma.f32	s1, s14, s12
 8026e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026e2a:	dc04      	bgt.n	8026e36 <__kernel_cosf+0x72>
 8026e2c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8026e30:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8026e34:	4770      	bx	lr
 8026e36:	4a11      	ldr	r2, [pc, #68]	; (8026e7c <__kernel_cosf+0xb8>)
 8026e38:	4293      	cmp	r3, r2
 8026e3a:	bfda      	itte	le
 8026e3c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8026e40:	ee07 3a10 	vmovle	s14, r3
 8026e44:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8026e48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026e4c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8026e50:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8026e54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026e58:	4770      	bx	lr
 8026e5a:	eeb0 0a66 	vmov.f32	s0, s13
 8026e5e:	4770      	bx	lr
 8026e60:	ad47d74e 	.word	0xad47d74e
 8026e64:	310f74f6 	.word	0x310f74f6
 8026e68:	3e999999 	.word	0x3e999999
 8026e6c:	b493f27c 	.word	0xb493f27c
 8026e70:	37d00d01 	.word	0x37d00d01
 8026e74:	bab60b61 	.word	0xbab60b61
 8026e78:	3d2aaaab 	.word	0x3d2aaaab
 8026e7c:	3f480000 	.word	0x3f480000

08026e80 <__kernel_sinf>:
 8026e80:	ee10 3a10 	vmov	r3, s0
 8026e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026e88:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8026e8c:	da04      	bge.n	8026e98 <__kernel_sinf+0x18>
 8026e8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026e92:	ee17 3a90 	vmov	r3, s15
 8026e96:	b35b      	cbz	r3, 8026ef0 <__kernel_sinf+0x70>
 8026e98:	ee20 7a00 	vmul.f32	s14, s0, s0
 8026e9c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8026ef4 <__kernel_sinf+0x74>
 8026ea0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8026ef8 <__kernel_sinf+0x78>
 8026ea4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8026ea8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8026efc <__kernel_sinf+0x7c>
 8026eac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026eb0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8026f00 <__kernel_sinf+0x80>
 8026eb4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8026eb8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8026f04 <__kernel_sinf+0x84>
 8026ebc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8026ec0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026ec4:	b930      	cbnz	r0, 8026ed4 <__kernel_sinf+0x54>
 8026ec6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8026f08 <__kernel_sinf+0x88>
 8026eca:	eea7 6a27 	vfma.f32	s12, s14, s15
 8026ece:	eea6 0a26 	vfma.f32	s0, s12, s13
 8026ed2:	4770      	bx	lr
 8026ed4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8026ed8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8026edc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8026ee0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8026ee4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8026f0c <__kernel_sinf+0x8c>
 8026ee8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8026eec:	ee30 0a60 	vsub.f32	s0, s0, s1
 8026ef0:	4770      	bx	lr
 8026ef2:	bf00      	nop
 8026ef4:	2f2ec9d3 	.word	0x2f2ec9d3
 8026ef8:	b2d72f34 	.word	0xb2d72f34
 8026efc:	3638ef1b 	.word	0x3638ef1b
 8026f00:	b9500d01 	.word	0xb9500d01
 8026f04:	3c088889 	.word	0x3c088889
 8026f08:	be2aaaab 	.word	0xbe2aaaab
 8026f0c:	3e2aaaab 	.word	0x3e2aaaab

08026f10 <__kernel_tanf>:
 8026f10:	b508      	push	{r3, lr}
 8026f12:	ee10 3a10 	vmov	r3, s0
 8026f16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026f1a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8026f1e:	eef0 7a40 	vmov.f32	s15, s0
 8026f22:	da17      	bge.n	8026f54 <__kernel_tanf+0x44>
 8026f24:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8026f28:	ee17 1a10 	vmov	r1, s14
 8026f2c:	bb41      	cbnz	r1, 8026f80 <__kernel_tanf+0x70>
 8026f2e:	1c43      	adds	r3, r0, #1
 8026f30:	4313      	orrs	r3, r2
 8026f32:	d108      	bne.n	8026f46 <__kernel_tanf+0x36>
 8026f34:	f7ff fe20 	bl	8026b78 <fabsf>
 8026f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026f3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026f40:	eeb0 0a67 	vmov.f32	s0, s15
 8026f44:	bd08      	pop	{r3, pc}
 8026f46:	2801      	cmp	r0, #1
 8026f48:	d0fa      	beq.n	8026f40 <__kernel_tanf+0x30>
 8026f4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026f4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026f52:	e7f5      	b.n	8026f40 <__kernel_tanf+0x30>
 8026f54:	494c      	ldr	r1, [pc, #304]	; (8027088 <__kernel_tanf+0x178>)
 8026f56:	428a      	cmp	r2, r1
 8026f58:	db12      	blt.n	8026f80 <__kernel_tanf+0x70>
 8026f5a:	2b00      	cmp	r3, #0
 8026f5c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 802708c <__kernel_tanf+0x17c>
 8026f60:	bfb8      	it	lt
 8026f62:	eef1 7a40 	vneglt.f32	s15, s0
 8026f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026f6a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8027090 <__kernel_tanf+0x180>
 8026f6e:	bfb8      	it	lt
 8026f70:	eef1 0a60 	vneglt.f32	s1, s1
 8026f74:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8026f78:	eddf 0a46 	vldr	s1, [pc, #280]	; 8027094 <__kernel_tanf+0x184>
 8026f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026f80:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8026f84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8027098 <__kernel_tanf+0x188>
 8026f88:	ed9f 6a44 	vldr	s12, [pc, #272]	; 802709c <__kernel_tanf+0x18c>
 8026f8c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80270a0 <__kernel_tanf+0x190>
 8026f90:	493d      	ldr	r1, [pc, #244]	; (8027088 <__kernel_tanf+0x178>)
 8026f92:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8026f96:	428a      	cmp	r2, r1
 8026f98:	eea7 6a25 	vfma.f32	s12, s14, s11
 8026f9c:	eddf 5a41 	vldr	s11, [pc, #260]	; 80270a4 <__kernel_tanf+0x194>
 8026fa0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8026fa4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80270a8 <__kernel_tanf+0x198>
 8026fa8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8026fac:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80270ac <__kernel_tanf+0x19c>
 8026fb0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8026fb4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80270b0 <__kernel_tanf+0x1a0>
 8026fb8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8026fbc:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80270b4 <__kernel_tanf+0x1a4>
 8026fc0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8026fc4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80270b8 <__kernel_tanf+0x1a8>
 8026fc8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8026fcc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80270bc <__kernel_tanf+0x1ac>
 8026fd0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8026fd4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80270c0 <__kernel_tanf+0x1b0>
 8026fd8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8026fdc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80270c4 <__kernel_tanf+0x1b4>
 8026fe0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8026fe4:	eeb0 7a46 	vmov.f32	s14, s12
 8026fe8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8026fec:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8026ff0:	eeb0 6a60 	vmov.f32	s12, s1
 8026ff4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8026ff8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80270c8 <__kernel_tanf+0x1b8>
 8026ffc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8027000:	eee5 0a07 	vfma.f32	s1, s10, s14
 8027004:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8027008:	db1d      	blt.n	8027046 <__kernel_tanf+0x136>
 802700a:	ee07 0a10 	vmov	s14, r0
 802700e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027012:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8027016:	ee76 6a87 	vadd.f32	s13, s13, s14
 802701a:	179b      	asrs	r3, r3, #30
 802701c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8027020:	f003 0302 	and.w	r3, r3, #2
 8027024:	f1c3 0301 	rsb	r3, r3, #1
 8027028:	ee76 6a60 	vsub.f32	s13, s12, s1
 802702c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027030:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8027034:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8027038:	ee07 3a90 	vmov	s15, r3
 802703c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027044:	e77c      	b.n	8026f40 <__kernel_tanf+0x30>
 8027046:	2801      	cmp	r0, #1
 8027048:	d01b      	beq.n	8027082 <__kernel_tanf+0x172>
 802704a:	4b20      	ldr	r3, [pc, #128]	; (80270cc <__kernel_tanf+0x1bc>)
 802704c:	ee16 2a90 	vmov	r2, s13
 8027050:	401a      	ands	r2, r3
 8027052:	ee05 2a90 	vmov	s11, r2
 8027056:	ee75 7ae7 	vsub.f32	s15, s11, s15
 802705a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802705e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027062:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8027066:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 802706a:	ee16 2a10 	vmov	r2, s12
 802706e:	4013      	ands	r3, r2
 8027070:	ee07 3a90 	vmov	s15, r3
 8027074:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027078:	eea0 7aa7 	vfma.f32	s14, s1, s15
 802707c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8027080:	e75e      	b.n	8026f40 <__kernel_tanf+0x30>
 8027082:	eef0 7a66 	vmov.f32	s15, s13
 8027086:	e75b      	b.n	8026f40 <__kernel_tanf+0x30>
 8027088:	3f2ca140 	.word	0x3f2ca140
 802708c:	3f490fda 	.word	0x3f490fda
 8027090:	33222168 	.word	0x33222168
 8027094:	00000000 	.word	0x00000000
 8027098:	b79bae5f 	.word	0xb79bae5f
 802709c:	38a3f445 	.word	0x38a3f445
 80270a0:	37d95384 	.word	0x37d95384
 80270a4:	3a1a26c8 	.word	0x3a1a26c8
 80270a8:	3b6b6916 	.word	0x3b6b6916
 80270ac:	3cb327a4 	.word	0x3cb327a4
 80270b0:	3e088889 	.word	0x3e088889
 80270b4:	3895c07a 	.word	0x3895c07a
 80270b8:	398137b9 	.word	0x398137b9
 80270bc:	3abede48 	.word	0x3abede48
 80270c0:	3c11371f 	.word	0x3c11371f
 80270c4:	3d5d0dd1 	.word	0x3d5d0dd1
 80270c8:	3eaaaaab 	.word	0x3eaaaaab
 80270cc:	fffff000 	.word	0xfffff000

080270d0 <__ieee754_acosf>:
 80270d0:	b508      	push	{r3, lr}
 80270d2:	ee10 3a10 	vmov	r3, s0
 80270d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80270da:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80270de:	ed2d 8b0c 	vpush	{d8-d13}
 80270e2:	d10a      	bne.n	80270fa <__ieee754_acosf+0x2a>
 80270e4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 802727c <__ieee754_acosf+0x1ac>
 80270e8:	eddf 7a65 	vldr	s15, [pc, #404]	; 8027280 <__ieee754_acosf+0x1b0>
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	bfd8      	it	le
 80270f0:	eeb0 0a67 	vmovle.f32	s0, s15
 80270f4:	ecbd 8b0c 	vpop	{d8-d13}
 80270f8:	bd08      	pop	{r3, pc}
 80270fa:	dd04      	ble.n	8027106 <__ieee754_acosf+0x36>
 80270fc:	ee30 8a40 	vsub.f32	s16, s0, s0
 8027100:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8027104:	e7f6      	b.n	80270f4 <__ieee754_acosf+0x24>
 8027106:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 802710a:	da3c      	bge.n	8027186 <__ieee754_acosf+0xb6>
 802710c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8027110:	f340 80b1 	ble.w	8027276 <__ieee754_acosf+0x1a6>
 8027114:	ee60 7a00 	vmul.f32	s15, s0, s0
 8027118:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8027284 <__ieee754_acosf+0x1b4>
 802711c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8027288 <__ieee754_acosf+0x1b8>
 8027120:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 802728c <__ieee754_acosf+0x1bc>
 8027124:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8027128:	eddf 6a59 	vldr	s13, [pc, #356]	; 8027290 <__ieee754_acosf+0x1c0>
 802712c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8027130:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8027294 <__ieee754_acosf+0x1c4>
 8027134:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8027138:	eddf 6a57 	vldr	s13, [pc, #348]	; 8027298 <__ieee754_acosf+0x1c8>
 802713c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8027140:	ed9f 7a56 	vldr	s14, [pc, #344]	; 802729c <__ieee754_acosf+0x1cc>
 8027144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8027148:	eddf 6a55 	vldr	s13, [pc, #340]	; 80272a0 <__ieee754_acosf+0x1d0>
 802714c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8027150:	eddf 6a54 	vldr	s13, [pc, #336]	; 80272a4 <__ieee754_acosf+0x1d4>
 8027154:	eee6 6a27 	vfma.f32	s13, s12, s15
 8027158:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80272a8 <__ieee754_acosf+0x1d8>
 802715c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8027160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027164:	eee6 6a27 	vfma.f32	s13, s12, s15
 8027168:	ee27 7a27 	vmul.f32	s14, s14, s15
 802716c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8027170:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80272ac <__ieee754_acosf+0x1dc>
 8027174:	eea0 7a67 	vfms.f32	s14, s0, s15
 8027178:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80272b0 <__ieee754_acosf+0x1e0>
 802717c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8027180:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8027184:	e7b6      	b.n	80270f4 <__ieee754_acosf+0x24>
 8027186:	2b00      	cmp	r3, #0
 8027188:	eddf da3e 	vldr	s27, [pc, #248]	; 8027284 <__ieee754_acosf+0x1b4>
 802718c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8027288 <__ieee754_acosf+0x1b8>
 8027190:	ed9f ca3f 	vldr	s24, [pc, #252]	; 8027290 <__ieee754_acosf+0x1c0>
 8027194:	eddf ba3f 	vldr	s23, [pc, #252]	; 8027294 <__ieee754_acosf+0x1c4>
 8027198:	ed9f ba3f 	vldr	s22, [pc, #252]	; 8027298 <__ieee754_acosf+0x1c8>
 802719c:	eddf 8a3f 	vldr	s17, [pc, #252]	; 802729c <__ieee754_acosf+0x1cc>
 80271a0:	ed9f da3f 	vldr	s26, [pc, #252]	; 80272a0 <__ieee754_acosf+0x1d0>
 80271a4:	eddf aa39 	vldr	s21, [pc, #228]	; 802728c <__ieee754_acosf+0x1bc>
 80271a8:	ed9f aa3e 	vldr	s20, [pc, #248]	; 80272a4 <__ieee754_acosf+0x1d4>
 80271ac:	eddf 9a3e 	vldr	s19, [pc, #248]	; 80272a8 <__ieee754_acosf+0x1d8>
 80271b0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80271b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80271b8:	da28      	bge.n	802720c <__ieee754_acosf+0x13c>
 80271ba:	ee30 0a09 	vadd.f32	s0, s0, s18
 80271be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80271c2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80271c6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80271ca:	eeac ca80 	vfma.f32	s24, s25, s0
 80271ce:	eeaa aa80 	vfma.f32	s20, s21, s0
 80271d2:	eeec ba00 	vfma.f32	s23, s24, s0
 80271d6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80271da:	eeab ba80 	vfma.f32	s22, s23, s0
 80271de:	eea9 9a80 	vfma.f32	s18, s19, s0
 80271e2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80271e6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80271ea:	f7ff fda5 	bl	8026d38 <__ieee754_sqrtf>
 80271ee:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80271f2:	eddf 7a30 	vldr	s15, [pc, #192]	; 80272b4 <__ieee754_acosf+0x1e4>
 80271f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80271fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80271fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8027202:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80272b8 <__ieee754_acosf+0x1e8>
 8027206:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802720a:	e773      	b.n	80270f4 <__ieee754_acosf+0x24>
 802720c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8027210:	ee28 8a27 	vmul.f32	s16, s16, s15
 8027214:	eeb0 0a48 	vmov.f32	s0, s16
 8027218:	f7ff fd8e 	bl	8026d38 <__ieee754_sqrtf>
 802721c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8027220:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8027224:	eeac ca88 	vfma.f32	s24, s25, s16
 8027228:	eeaa aa88 	vfma.f32	s20, s21, s16
 802722c:	eeec ba08 	vfma.f32	s23, s24, s16
 8027230:	ee10 3a10 	vmov	r3, s0
 8027234:	eeab ba88 	vfma.f32	s22, s23, s16
 8027238:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802723c:	f023 030f 	bic.w	r3, r3, #15
 8027240:	eeea 9a08 	vfma.f32	s19, s20, s16
 8027244:	ee07 3a90 	vmov	s15, r3
 8027248:	eeeb 8a08 	vfma.f32	s17, s22, s16
 802724c:	eeb0 6a48 	vmov.f32	s12, s16
 8027250:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8027254:	eea9 9a88 	vfma.f32	s18, s19, s16
 8027258:	ee70 6a27 	vadd.f32	s13, s0, s15
 802725c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8027260:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8027264:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8027268:	eea0 7a26 	vfma.f32	s14, s0, s13
 802726c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8027270:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027274:	e73e      	b.n	80270f4 <__ieee754_acosf+0x24>
 8027276:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80272bc <__ieee754_acosf+0x1ec>
 802727a:	e73b      	b.n	80270f4 <__ieee754_acosf+0x24>
 802727c:	00000000 	.word	0x00000000
 8027280:	40490fdb 	.word	0x40490fdb
 8027284:	3811ef08 	.word	0x3811ef08
 8027288:	3a4f7f04 	.word	0x3a4f7f04
 802728c:	bf303361 	.word	0xbf303361
 8027290:	bd241146 	.word	0xbd241146
 8027294:	3e4e0aa8 	.word	0x3e4e0aa8
 8027298:	bea6b090 	.word	0xbea6b090
 802729c:	3e2aaaab 	.word	0x3e2aaaab
 80272a0:	3d9dc62e 	.word	0x3d9dc62e
 80272a4:	4001572d 	.word	0x4001572d
 80272a8:	c019d139 	.word	0xc019d139
 80272ac:	33a22168 	.word	0x33a22168
 80272b0:	3fc90fda 	.word	0x3fc90fda
 80272b4:	b3a22168 	.word	0xb3a22168
 80272b8:	40490fda 	.word	0x40490fda
 80272bc:	3fc90fdb 	.word	0x3fc90fdb

080272c0 <__ieee754_asinf>:
 80272c0:	b538      	push	{r3, r4, r5, lr}
 80272c2:	ee10 5a10 	vmov	r5, s0
 80272c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80272ca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80272ce:	ed2d 8b04 	vpush	{d8-d9}
 80272d2:	d10c      	bne.n	80272ee <__ieee754_asinf+0x2e>
 80272d4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 802744c <__ieee754_asinf+0x18c>
 80272d8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8027450 <__ieee754_asinf+0x190>
 80272dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80272e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80272e4:	eeb0 0a67 	vmov.f32	s0, s15
 80272e8:	ecbd 8b04 	vpop	{d8-d9}
 80272ec:	bd38      	pop	{r3, r4, r5, pc}
 80272ee:	dd04      	ble.n	80272fa <__ieee754_asinf+0x3a>
 80272f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80272f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80272f8:	e7f6      	b.n	80272e8 <__ieee754_asinf+0x28>
 80272fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80272fe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8027302:	da0b      	bge.n	802731c <__ieee754_asinf+0x5c>
 8027304:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8027308:	da52      	bge.n	80273b0 <__ieee754_asinf+0xf0>
 802730a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8027454 <__ieee754_asinf+0x194>
 802730e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8027312:	eef4 7ae8 	vcmpe.f32	s15, s17
 8027316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802731a:	dce5      	bgt.n	80272e8 <__ieee754_asinf+0x28>
 802731c:	f7ff fc2c 	bl	8026b78 <fabsf>
 8027320:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8027324:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027328:	ee20 8a27 	vmul.f32	s16, s0, s15
 802732c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8027458 <__ieee754_asinf+0x198>
 8027330:	eddf 7a4a 	vldr	s15, [pc, #296]	; 802745c <__ieee754_asinf+0x19c>
 8027334:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8027460 <__ieee754_asinf+0x1a0>
 8027338:	eea8 7a27 	vfma.f32	s14, s16, s15
 802733c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8027464 <__ieee754_asinf+0x1a4>
 8027340:	eee7 7a08 	vfma.f32	s15, s14, s16
 8027344:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8027468 <__ieee754_asinf+0x1a8>
 8027348:	eea7 7a88 	vfma.f32	s14, s15, s16
 802734c:	eddf 7a47 	vldr	s15, [pc, #284]	; 802746c <__ieee754_asinf+0x1ac>
 8027350:	eee7 7a08 	vfma.f32	s15, s14, s16
 8027354:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8027470 <__ieee754_asinf+0x1b0>
 8027358:	eea7 9a88 	vfma.f32	s18, s15, s16
 802735c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8027474 <__ieee754_asinf+0x1b4>
 8027360:	eee8 7a07 	vfma.f32	s15, s16, s14
 8027364:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8027478 <__ieee754_asinf+0x1b8>
 8027368:	eea7 7a88 	vfma.f32	s14, s15, s16
 802736c:	eddf 7a43 	vldr	s15, [pc, #268]	; 802747c <__ieee754_asinf+0x1bc>
 8027370:	eee7 7a08 	vfma.f32	s15, s14, s16
 8027374:	eeb0 0a48 	vmov.f32	s0, s16
 8027378:	eee7 8a88 	vfma.f32	s17, s15, s16
 802737c:	f7ff fcdc 	bl	8026d38 <__ieee754_sqrtf>
 8027380:	4b3f      	ldr	r3, [pc, #252]	; (8027480 <__ieee754_asinf+0x1c0>)
 8027382:	ee29 9a08 	vmul.f32	s18, s18, s16
 8027386:	429c      	cmp	r4, r3
 8027388:	ee89 6a28 	vdiv.f32	s12, s18, s17
 802738c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8027390:	dd3d      	ble.n	802740e <__ieee754_asinf+0x14e>
 8027392:	eea0 0a06 	vfma.f32	s0, s0, s12
 8027396:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8027484 <__ieee754_asinf+0x1c4>
 802739a:	eee0 7a26 	vfma.f32	s15, s0, s13
 802739e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8027450 <__ieee754_asinf+0x190>
 80273a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80273a6:	2d00      	cmp	r5, #0
 80273a8:	bfd8      	it	le
 80273aa:	eeb1 0a40 	vnegle.f32	s0, s0
 80273ae:	e79b      	b.n	80272e8 <__ieee754_asinf+0x28>
 80273b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80273b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 802745c <__ieee754_asinf+0x19c>
 80273b8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8027458 <__ieee754_asinf+0x198>
 80273bc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8027470 <__ieee754_asinf+0x1b0>
 80273c0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80273c4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8027464 <__ieee754_asinf+0x1a4>
 80273c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80273cc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8027468 <__ieee754_asinf+0x1a8>
 80273d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80273d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 802746c <__ieee754_asinf+0x1ac>
 80273d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80273dc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8027460 <__ieee754_asinf+0x1a0>
 80273e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80273e4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8027474 <__ieee754_asinf+0x1b4>
 80273e8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80273ec:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8027478 <__ieee754_asinf+0x1b8>
 80273f0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80273f4:	eddf 6a21 	vldr	s13, [pc, #132]	; 802747c <__ieee754_asinf+0x1bc>
 80273f8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80273fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027400:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8027404:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8027408:	eea0 0a27 	vfma.f32	s0, s0, s15
 802740c:	e76c      	b.n	80272e8 <__ieee754_asinf+0x28>
 802740e:	ee10 3a10 	vmov	r3, s0
 8027412:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8027416:	f023 030f 	bic.w	r3, r3, #15
 802741a:	ee07 3a10 	vmov	s14, r3
 802741e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8027422:	ee70 7a07 	vadd.f32	s15, s0, s14
 8027426:	ee30 0a00 	vadd.f32	s0, s0, s0
 802742a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 802742e:	eddf 7a07 	vldr	s15, [pc, #28]	; 802744c <__ieee754_asinf+0x18c>
 8027432:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8027436:	eed0 7a06 	vfnms.f32	s15, s0, s12
 802743a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8027488 <__ieee754_asinf+0x1c8>
 802743e:	eeb0 6a40 	vmov.f32	s12, s0
 8027442:	eea7 6a66 	vfms.f32	s12, s14, s13
 8027446:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802744a:	e7aa      	b.n	80273a2 <__ieee754_asinf+0xe2>
 802744c:	b33bbd2e 	.word	0xb33bbd2e
 8027450:	3fc90fdb 	.word	0x3fc90fdb
 8027454:	7149f2ca 	.word	0x7149f2ca
 8027458:	3a4f7f04 	.word	0x3a4f7f04
 802745c:	3811ef08 	.word	0x3811ef08
 8027460:	3e2aaaab 	.word	0x3e2aaaab
 8027464:	bd241146 	.word	0xbd241146
 8027468:	3e4e0aa8 	.word	0x3e4e0aa8
 802746c:	bea6b090 	.word	0xbea6b090
 8027470:	3d9dc62e 	.word	0x3d9dc62e
 8027474:	bf303361 	.word	0xbf303361
 8027478:	4001572d 	.word	0x4001572d
 802747c:	c019d139 	.word	0xc019d139
 8027480:	3f799999 	.word	0x3f799999
 8027484:	333bbd2e 	.word	0x333bbd2e
 8027488:	3f490fdb 	.word	0x3f490fdb

0802748c <__ieee754_atan2f>:
 802748c:	ee10 2a90 	vmov	r2, s1
 8027490:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8027494:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8027498:	b510      	push	{r4, lr}
 802749a:	eef0 7a40 	vmov.f32	s15, s0
 802749e:	dc06      	bgt.n	80274ae <__ieee754_atan2f+0x22>
 80274a0:	ee10 0a10 	vmov	r0, s0
 80274a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80274a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80274ac:	dd04      	ble.n	80274b8 <__ieee754_atan2f+0x2c>
 80274ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80274b2:	eeb0 0a67 	vmov.f32	s0, s15
 80274b6:	bd10      	pop	{r4, pc}
 80274b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80274bc:	d103      	bne.n	80274c6 <__ieee754_atan2f+0x3a>
 80274be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80274c2:	f000 bcfb 	b.w	8027ebc <atanf>
 80274c6:	1794      	asrs	r4, r2, #30
 80274c8:	f004 0402 	and.w	r4, r4, #2
 80274cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80274d0:	b943      	cbnz	r3, 80274e4 <__ieee754_atan2f+0x58>
 80274d2:	2c02      	cmp	r4, #2
 80274d4:	d05e      	beq.n	8027594 <__ieee754_atan2f+0x108>
 80274d6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80275a8 <__ieee754_atan2f+0x11c>
 80274da:	2c03      	cmp	r4, #3
 80274dc:	bf08      	it	eq
 80274de:	eef0 7a47 	vmoveq.f32	s15, s14
 80274e2:	e7e6      	b.n	80274b2 <__ieee754_atan2f+0x26>
 80274e4:	b941      	cbnz	r1, 80274f8 <__ieee754_atan2f+0x6c>
 80274e6:	eddf 7a31 	vldr	s15, [pc, #196]	; 80275ac <__ieee754_atan2f+0x120>
 80274ea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80275b0 <__ieee754_atan2f+0x124>
 80274ee:	2800      	cmp	r0, #0
 80274f0:	bfb8      	it	lt
 80274f2:	eef0 7a47 	vmovlt.f32	s15, s14
 80274f6:	e7dc      	b.n	80274b2 <__ieee754_atan2f+0x26>
 80274f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80274fc:	d110      	bne.n	8027520 <__ieee754_atan2f+0x94>
 80274fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8027502:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8027506:	d107      	bne.n	8027518 <__ieee754_atan2f+0x8c>
 8027508:	2c02      	cmp	r4, #2
 802750a:	d846      	bhi.n	802759a <__ieee754_atan2f+0x10e>
 802750c:	4b29      	ldr	r3, [pc, #164]	; (80275b4 <__ieee754_atan2f+0x128>)
 802750e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027512:	edd3 7a00 	vldr	s15, [r3]
 8027516:	e7cc      	b.n	80274b2 <__ieee754_atan2f+0x26>
 8027518:	2c02      	cmp	r4, #2
 802751a:	d841      	bhi.n	80275a0 <__ieee754_atan2f+0x114>
 802751c:	4b26      	ldr	r3, [pc, #152]	; (80275b8 <__ieee754_atan2f+0x12c>)
 802751e:	e7f6      	b.n	802750e <__ieee754_atan2f+0x82>
 8027520:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8027524:	d0df      	beq.n	80274e6 <__ieee754_atan2f+0x5a>
 8027526:	1a5b      	subs	r3, r3, r1
 8027528:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 802752c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8027530:	da1a      	bge.n	8027568 <__ieee754_atan2f+0xdc>
 8027532:	2a00      	cmp	r2, #0
 8027534:	da01      	bge.n	802753a <__ieee754_atan2f+0xae>
 8027536:	313c      	adds	r1, #60	; 0x3c
 8027538:	db19      	blt.n	802756e <__ieee754_atan2f+0xe2>
 802753a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802753e:	f7ff fb1b 	bl	8026b78 <fabsf>
 8027542:	f000 fcbb 	bl	8027ebc <atanf>
 8027546:	eef0 7a40 	vmov.f32	s15, s0
 802754a:	2c01      	cmp	r4, #1
 802754c:	d012      	beq.n	8027574 <__ieee754_atan2f+0xe8>
 802754e:	2c02      	cmp	r4, #2
 8027550:	d017      	beq.n	8027582 <__ieee754_atan2f+0xf6>
 8027552:	2c00      	cmp	r4, #0
 8027554:	d0ad      	beq.n	80274b2 <__ieee754_atan2f+0x26>
 8027556:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80275bc <__ieee754_atan2f+0x130>
 802755a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802755e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80275c0 <__ieee754_atan2f+0x134>
 8027562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027566:	e7a4      	b.n	80274b2 <__ieee754_atan2f+0x26>
 8027568:	eddf 7a10 	vldr	s15, [pc, #64]	; 80275ac <__ieee754_atan2f+0x120>
 802756c:	e7ed      	b.n	802754a <__ieee754_atan2f+0xbe>
 802756e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80275c4 <__ieee754_atan2f+0x138>
 8027572:	e7ea      	b.n	802754a <__ieee754_atan2f+0xbe>
 8027574:	ee17 3a90 	vmov	r3, s15
 8027578:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802757c:	ee07 3a90 	vmov	s15, r3
 8027580:	e797      	b.n	80274b2 <__ieee754_atan2f+0x26>
 8027582:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80275bc <__ieee754_atan2f+0x130>
 8027586:	ee77 7a87 	vadd.f32	s15, s15, s14
 802758a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80275c0 <__ieee754_atan2f+0x134>
 802758e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027592:	e78e      	b.n	80274b2 <__ieee754_atan2f+0x26>
 8027594:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80275c0 <__ieee754_atan2f+0x134>
 8027598:	e78b      	b.n	80274b2 <__ieee754_atan2f+0x26>
 802759a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80275c8 <__ieee754_atan2f+0x13c>
 802759e:	e788      	b.n	80274b2 <__ieee754_atan2f+0x26>
 80275a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80275c4 <__ieee754_atan2f+0x138>
 80275a4:	e785      	b.n	80274b2 <__ieee754_atan2f+0x26>
 80275a6:	bf00      	nop
 80275a8:	c0490fdb 	.word	0xc0490fdb
 80275ac:	3fc90fdb 	.word	0x3fc90fdb
 80275b0:	bfc90fdb 	.word	0xbfc90fdb
 80275b4:	0802fc90 	.word	0x0802fc90
 80275b8:	0802fc9c 	.word	0x0802fc9c
 80275bc:	33bbbd2e 	.word	0x33bbbd2e
 80275c0:	40490fdb 	.word	0x40490fdb
 80275c4:	00000000 	.word	0x00000000
 80275c8:	3f490fdb 	.word	0x3f490fdb

080275cc <__ieee754_fmodf>:
 80275cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80275ce:	ee10 4a90 	vmov	r4, s1
 80275d2:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 80275d6:	d009      	beq.n	80275ec <__ieee754_fmodf+0x20>
 80275d8:	ee10 3a10 	vmov	r3, s0
 80275dc:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80275e0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80275e4:	da02      	bge.n	80275ec <__ieee754_fmodf+0x20>
 80275e6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80275ea:	dd04      	ble.n	80275f6 <__ieee754_fmodf+0x2a>
 80275ec:	ee60 0a20 	vmul.f32	s1, s0, s1
 80275f0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80275f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80275f6:	4286      	cmp	r6, r0
 80275f8:	dbfc      	blt.n	80275f4 <__ieee754_fmodf+0x28>
 80275fa:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 80275fe:	d105      	bne.n	802760c <__ieee754_fmodf+0x40>
 8027600:	4b32      	ldr	r3, [pc, #200]	; (80276cc <__ieee754_fmodf+0x100>)
 8027602:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8027606:	ed93 0a00 	vldr	s0, [r3]
 802760a:	e7f3      	b.n	80275f4 <__ieee754_fmodf+0x28>
 802760c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8027610:	d140      	bne.n	8027694 <__ieee754_fmodf+0xc8>
 8027612:	0232      	lsls	r2, r6, #8
 8027614:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8027618:	2a00      	cmp	r2, #0
 802761a:	dc38      	bgt.n	802768e <__ieee754_fmodf+0xc2>
 802761c:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8027620:	d13e      	bne.n	80276a0 <__ieee754_fmodf+0xd4>
 8027622:	0207      	lsls	r7, r0, #8
 8027624:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8027628:	2f00      	cmp	r7, #0
 802762a:	da36      	bge.n	802769a <__ieee754_fmodf+0xce>
 802762c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8027630:	bfb9      	ittee	lt
 8027632:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8027636:	1a5b      	sublt	r3, r3, r1
 8027638:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 802763c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8027640:	bfb8      	it	lt
 8027642:	fa06 f303 	lsllt.w	r3, r6, r3
 8027646:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 802764a:	bfb5      	itete	lt
 802764c:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 8027650:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8027654:	1aa4      	sublt	r4, r4, r2
 8027656:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 802765a:	bfb8      	it	lt
 802765c:	40a0      	lsllt	r0, r4
 802765e:	1a89      	subs	r1, r1, r2
 8027660:	1a1c      	subs	r4, r3, r0
 8027662:	bb01      	cbnz	r1, 80276a6 <__ieee754_fmodf+0xda>
 8027664:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 8027668:	bf38      	it	cc
 802766a:	4623      	movcc	r3, r4
 802766c:	2b00      	cmp	r3, #0
 802766e:	d0c7      	beq.n	8027600 <__ieee754_fmodf+0x34>
 8027670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027674:	db1f      	blt.n	80276b6 <__ieee754_fmodf+0xea>
 8027676:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 802767a:	db1f      	blt.n	80276bc <__ieee754_fmodf+0xf0>
 802767c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8027680:	327f      	adds	r2, #127	; 0x7f
 8027682:	432b      	orrs	r3, r5
 8027684:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8027688:	ee00 3a10 	vmov	s0, r3
 802768c:	e7b2      	b.n	80275f4 <__ieee754_fmodf+0x28>
 802768e:	3901      	subs	r1, #1
 8027690:	0052      	lsls	r2, r2, #1
 8027692:	e7c1      	b.n	8027618 <__ieee754_fmodf+0x4c>
 8027694:	15f1      	asrs	r1, r6, #23
 8027696:	397f      	subs	r1, #127	; 0x7f
 8027698:	e7c0      	b.n	802761c <__ieee754_fmodf+0x50>
 802769a:	3a01      	subs	r2, #1
 802769c:	007f      	lsls	r7, r7, #1
 802769e:	e7c3      	b.n	8027628 <__ieee754_fmodf+0x5c>
 80276a0:	15c2      	asrs	r2, r0, #23
 80276a2:	3a7f      	subs	r2, #127	; 0x7f
 80276a4:	e7c2      	b.n	802762c <__ieee754_fmodf+0x60>
 80276a6:	2c00      	cmp	r4, #0
 80276a8:	da02      	bge.n	80276b0 <__ieee754_fmodf+0xe4>
 80276aa:	005b      	lsls	r3, r3, #1
 80276ac:	3901      	subs	r1, #1
 80276ae:	e7d7      	b.n	8027660 <__ieee754_fmodf+0x94>
 80276b0:	d0a6      	beq.n	8027600 <__ieee754_fmodf+0x34>
 80276b2:	0063      	lsls	r3, r4, #1
 80276b4:	e7fa      	b.n	80276ac <__ieee754_fmodf+0xe0>
 80276b6:	005b      	lsls	r3, r3, #1
 80276b8:	3a01      	subs	r2, #1
 80276ba:	e7d9      	b.n	8027670 <__ieee754_fmodf+0xa4>
 80276bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80276c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80276c4:	3282      	adds	r2, #130	; 0x82
 80276c6:	4113      	asrs	r3, r2
 80276c8:	432b      	orrs	r3, r5
 80276ca:	e7dd      	b.n	8027688 <__ieee754_fmodf+0xbc>
 80276cc:	0802fca8 	.word	0x0802fca8

080276d0 <__ieee754_powf>:
 80276d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80276d4:	ee10 4a90 	vmov	r4, s1
 80276d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80276dc:	ed2d 8b02 	vpush	{d8}
 80276e0:	ee10 7a10 	vmov	r7, s0
 80276e4:	eeb0 8a40 	vmov.f32	s16, s0
 80276e8:	eef0 8a60 	vmov.f32	s17, s1
 80276ec:	d10c      	bne.n	8027708 <__ieee754_powf+0x38>
 80276ee:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80276f2:	007f      	lsls	r7, r7, #1
 80276f4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80276f8:	f240 8292 	bls.w	8027c20 <__ieee754_powf+0x550>
 80276fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8027700:	ecbd 8b02 	vpop	{d8}
 8027704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027708:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 802770c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8027710:	dcf4      	bgt.n	80276fc <__ieee754_powf+0x2c>
 8027712:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8027716:	dd08      	ble.n	802772a <__ieee754_powf+0x5a>
 8027718:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 802771c:	d1ee      	bne.n	80276fc <__ieee754_powf+0x2c>
 802771e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8027722:	0064      	lsls	r4, r4, #1
 8027724:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8027728:	e7e6      	b.n	80276f8 <__ieee754_powf+0x28>
 802772a:	2f00      	cmp	r7, #0
 802772c:	da20      	bge.n	8027770 <__ieee754_powf+0xa0>
 802772e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8027732:	da2d      	bge.n	8027790 <__ieee754_powf+0xc0>
 8027734:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8027738:	f2c0 827b 	blt.w	8027c32 <__ieee754_powf+0x562>
 802773c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8027740:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8027744:	fa48 f603 	asr.w	r6, r8, r3
 8027748:	fa06 f303 	lsl.w	r3, r6, r3
 802774c:	4543      	cmp	r3, r8
 802774e:	f040 8270 	bne.w	8027c32 <__ieee754_powf+0x562>
 8027752:	f006 0601 	and.w	r6, r6, #1
 8027756:	f1c6 0602 	rsb	r6, r6, #2
 802775a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802775e:	d11f      	bne.n	80277a0 <__ieee754_powf+0xd0>
 8027760:	2c00      	cmp	r4, #0
 8027762:	f280 8263 	bge.w	8027c2c <__ieee754_powf+0x55c>
 8027766:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802776a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802776e:	e7c7      	b.n	8027700 <__ieee754_powf+0x30>
 8027770:	2600      	movs	r6, #0
 8027772:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8027776:	d1f0      	bne.n	802775a <__ieee754_powf+0x8a>
 8027778:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 802777c:	f000 8250 	beq.w	8027c20 <__ieee754_powf+0x550>
 8027780:	dd08      	ble.n	8027794 <__ieee754_powf+0xc4>
 8027782:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8027a88 <__ieee754_powf+0x3b8>
 8027786:	2c00      	cmp	r4, #0
 8027788:	bfa8      	it	ge
 802778a:	eeb0 0a68 	vmovge.f32	s0, s17
 802778e:	e7b7      	b.n	8027700 <__ieee754_powf+0x30>
 8027790:	2602      	movs	r6, #2
 8027792:	e7ee      	b.n	8027772 <__ieee754_powf+0xa2>
 8027794:	2c00      	cmp	r4, #0
 8027796:	f280 8246 	bge.w	8027c26 <__ieee754_powf+0x556>
 802779a:	eeb1 0a68 	vneg.f32	s0, s17
 802779e:	e7af      	b.n	8027700 <__ieee754_powf+0x30>
 80277a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80277a4:	d102      	bne.n	80277ac <__ieee754_powf+0xdc>
 80277a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80277aa:	e7a9      	b.n	8027700 <__ieee754_powf+0x30>
 80277ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80277b0:	eeb0 0a48 	vmov.f32	s0, s16
 80277b4:	d107      	bne.n	80277c6 <__ieee754_powf+0xf6>
 80277b6:	2f00      	cmp	r7, #0
 80277b8:	db05      	blt.n	80277c6 <__ieee754_powf+0xf6>
 80277ba:	ecbd 8b02 	vpop	{d8}
 80277be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80277c2:	f7ff bab9 	b.w	8026d38 <__ieee754_sqrtf>
 80277c6:	f7ff f9d7 	bl	8026b78 <fabsf>
 80277ca:	b125      	cbz	r5, 80277d6 <__ieee754_powf+0x106>
 80277cc:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 80277d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80277d4:	d115      	bne.n	8027802 <__ieee754_powf+0x132>
 80277d6:	2c00      	cmp	r4, #0
 80277d8:	bfbc      	itt	lt
 80277da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80277de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80277e2:	2f00      	cmp	r7, #0
 80277e4:	da8c      	bge.n	8027700 <__ieee754_powf+0x30>
 80277e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80277ea:	4335      	orrs	r5, r6
 80277ec:	d104      	bne.n	80277f8 <__ieee754_powf+0x128>
 80277ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80277f2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80277f6:	e783      	b.n	8027700 <__ieee754_powf+0x30>
 80277f8:	2e01      	cmp	r6, #1
 80277fa:	d181      	bne.n	8027700 <__ieee754_powf+0x30>
 80277fc:	eeb1 0a40 	vneg.f32	s0, s0
 8027800:	e77e      	b.n	8027700 <__ieee754_powf+0x30>
 8027802:	0ff8      	lsrs	r0, r7, #31
 8027804:	3801      	subs	r0, #1
 8027806:	ea56 0300 	orrs.w	r3, r6, r0
 802780a:	d104      	bne.n	8027816 <__ieee754_powf+0x146>
 802780c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8027810:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8027814:	e774      	b.n	8027700 <__ieee754_powf+0x30>
 8027816:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802781a:	dd73      	ble.n	8027904 <__ieee754_powf+0x234>
 802781c:	4b9b      	ldr	r3, [pc, #620]	; (8027a8c <__ieee754_powf+0x3bc>)
 802781e:	429d      	cmp	r5, r3
 8027820:	dc08      	bgt.n	8027834 <__ieee754_powf+0x164>
 8027822:	2c00      	cmp	r4, #0
 8027824:	da0b      	bge.n	802783e <__ieee754_powf+0x16e>
 8027826:	2000      	movs	r0, #0
 8027828:	ecbd 8b02 	vpop	{d8}
 802782c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027830:	f000 bc9a 	b.w	8028168 <__math_oflowf>
 8027834:	4b96      	ldr	r3, [pc, #600]	; (8027a90 <__ieee754_powf+0x3c0>)
 8027836:	429d      	cmp	r5, r3
 8027838:	dd08      	ble.n	802784c <__ieee754_powf+0x17c>
 802783a:	2c00      	cmp	r4, #0
 802783c:	dcf3      	bgt.n	8027826 <__ieee754_powf+0x156>
 802783e:	2000      	movs	r0, #0
 8027840:	ecbd 8b02 	vpop	{d8}
 8027844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027848:	f000 bc88 	b.w	802815c <__math_uflowf>
 802784c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027850:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027854:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8027a94 <__ieee754_powf+0x3c4>
 8027858:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802785c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8027860:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027864:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8027868:	ee20 7a00 	vmul.f32	s14, s0, s0
 802786c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027870:	eddf 7a89 	vldr	s15, [pc, #548]	; 8027a98 <__ieee754_powf+0x3c8>
 8027874:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8027878:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8027a9c <__ieee754_powf+0x3cc>
 802787c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027880:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8027aa0 <__ieee754_powf+0x3d0>
 8027884:	eef0 6a67 	vmov.f32	s13, s15
 8027888:	eee0 6a07 	vfma.f32	s13, s0, s14
 802788c:	ee16 3a90 	vmov	r3, s13
 8027890:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8027894:	f023 030f 	bic.w	r3, r3, #15
 8027898:	ee06 3a90 	vmov	s13, r3
 802789c:	eee0 6a47 	vfms.f32	s13, s0, s14
 80278a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80278a4:	3e01      	subs	r6, #1
 80278a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80278aa:	4306      	orrs	r6, r0
 80278ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80278b0:	f024 040f 	bic.w	r4, r4, #15
 80278b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80278b8:	bf08      	it	eq
 80278ba:	eeb0 8a47 	vmoveq.f32	s16, s14
 80278be:	ee07 4a10 	vmov	s14, r4
 80278c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80278c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80278ca:	ee07 3a90 	vmov	s15, r3
 80278ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 80278d2:	ee07 4a10 	vmov	s14, r4
 80278d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80278da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80278de:	ee17 1a10 	vmov	r1, s14
 80278e2:	2900      	cmp	r1, #0
 80278e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80278e8:	f340 817c 	ble.w	8027be4 <__ieee754_powf+0x514>
 80278ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80278f0:	f340 80f8 	ble.w	8027ae4 <__ieee754_powf+0x414>
 80278f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80278f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278fc:	bf4c      	ite	mi
 80278fe:	2001      	movmi	r0, #1
 8027900:	2000      	movpl	r0, #0
 8027902:	e791      	b.n	8027828 <__ieee754_powf+0x158>
 8027904:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8027908:	bf01      	itttt	eq
 802790a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8027aa4 <__ieee754_powf+0x3d4>
 802790e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8027912:	f06f 0317 	mvneq.w	r3, #23
 8027916:	ee17 5a90 	vmoveq	r5, s15
 802791a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 802791e:	bf18      	it	ne
 8027920:	2300      	movne	r3, #0
 8027922:	3a7f      	subs	r2, #127	; 0x7f
 8027924:	441a      	add	r2, r3
 8027926:	4b60      	ldr	r3, [pc, #384]	; (8027aa8 <__ieee754_powf+0x3d8>)
 8027928:	f3c5 0516 	ubfx	r5, r5, #0, #23
 802792c:	429d      	cmp	r5, r3
 802792e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8027932:	dd06      	ble.n	8027942 <__ieee754_powf+0x272>
 8027934:	4b5d      	ldr	r3, [pc, #372]	; (8027aac <__ieee754_powf+0x3dc>)
 8027936:	429d      	cmp	r5, r3
 8027938:	f340 80a4 	ble.w	8027a84 <__ieee754_powf+0x3b4>
 802793c:	3201      	adds	r2, #1
 802793e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8027942:	2500      	movs	r5, #0
 8027944:	4b5a      	ldr	r3, [pc, #360]	; (8027ab0 <__ieee754_powf+0x3e0>)
 8027946:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802794a:	ee07 1a10 	vmov	s14, r1
 802794e:	edd3 5a00 	vldr	s11, [r3]
 8027952:	4b58      	ldr	r3, [pc, #352]	; (8027ab4 <__ieee754_powf+0x3e4>)
 8027954:	ee75 7a87 	vadd.f32	s15, s11, s14
 8027958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802795c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8027960:	1049      	asrs	r1, r1, #1
 8027962:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8027966:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802796a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 802796e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8027972:	ee07 1a90 	vmov	s15, r1
 8027976:	ee26 5a24 	vmul.f32	s10, s12, s9
 802797a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 802797e:	ee15 7a10 	vmov	r7, s10
 8027982:	401f      	ands	r7, r3
 8027984:	ee06 7a90 	vmov	s13, r7
 8027988:	eea6 6ae7 	vfms.f32	s12, s13, s15
 802798c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8027990:	ee65 7a05 	vmul.f32	s15, s10, s10
 8027994:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8027998:	eddf 5a47 	vldr	s11, [pc, #284]	; 8027ab8 <__ieee754_powf+0x3e8>
 802799c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8027abc <__ieee754_powf+0x3ec>
 80279a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80279a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8027ac0 <__ieee754_powf+0x3f0>
 80279a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80279ac:	eddf 5a39 	vldr	s11, [pc, #228]	; 8027a94 <__ieee754_powf+0x3c4>
 80279b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80279b4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8027ac4 <__ieee754_powf+0x3f4>
 80279b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80279bc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8027ac8 <__ieee754_powf+0x3f8>
 80279c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80279c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80279c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80279cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80279d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80279d4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80279d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80279dc:	eef0 5a67 	vmov.f32	s11, s15
 80279e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80279e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80279e8:	ee15 1a90 	vmov	r1, s11
 80279ec:	4019      	ands	r1, r3
 80279ee:	ee05 1a90 	vmov	s11, r1
 80279f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80279f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80279fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80279fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027a02:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027a06:	eeb0 6a67 	vmov.f32	s12, s15
 8027a0a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8027a0e:	ee16 1a10 	vmov	r1, s12
 8027a12:	4019      	ands	r1, r3
 8027a14:	ee07 1a10 	vmov	s14, r1
 8027a18:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8027a1c:	ee06 1a10 	vmov	s12, r1
 8027a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027a24:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8027acc <__ieee754_powf+0x3fc>
 8027a28:	4929      	ldr	r1, [pc, #164]	; (8027ad0 <__ieee754_powf+0x400>)
 8027a2a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8027ad4 <__ieee754_powf+0x404>
 8027a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027a32:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8027ad8 <__ieee754_powf+0x408>
 8027a36:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027a3a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8027a3e:	ed91 7a00 	vldr	s14, [r1]
 8027a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027a46:	ee07 2a10 	vmov	s14, r2
 8027a4a:	eef0 6a67 	vmov.f32	s13, s15
 8027a4e:	4a23      	ldr	r2, [pc, #140]	; (8027adc <__ieee754_powf+0x40c>)
 8027a50:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027a54:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8027a58:	ed92 5a00 	vldr	s10, [r2]
 8027a5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027a60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8027a64:	ee76 6a87 	vadd.f32	s13, s13, s14
 8027a68:	ee16 2a90 	vmov	r2, s13
 8027a6c:	4013      	ands	r3, r2
 8027a6e:	ee06 3a90 	vmov	s13, r3
 8027a72:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8027a76:	ee37 7a45 	vsub.f32	s14, s14, s10
 8027a7a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8027a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027a82:	e70f      	b.n	80278a4 <__ieee754_powf+0x1d4>
 8027a84:	2501      	movs	r5, #1
 8027a86:	e75d      	b.n	8027944 <__ieee754_powf+0x274>
 8027a88:	00000000 	.word	0x00000000
 8027a8c:	3f7ffff3 	.word	0x3f7ffff3
 8027a90:	3f800007 	.word	0x3f800007
 8027a94:	3eaaaaab 	.word	0x3eaaaaab
 8027a98:	3fb8aa3b 	.word	0x3fb8aa3b
 8027a9c:	36eca570 	.word	0x36eca570
 8027aa0:	3fb8aa00 	.word	0x3fb8aa00
 8027aa4:	4b800000 	.word	0x4b800000
 8027aa8:	001cc471 	.word	0x001cc471
 8027aac:	005db3d6 	.word	0x005db3d6
 8027ab0:	0802fcb0 	.word	0x0802fcb0
 8027ab4:	fffff000 	.word	0xfffff000
 8027ab8:	3e6c3255 	.word	0x3e6c3255
 8027abc:	3e53f142 	.word	0x3e53f142
 8027ac0:	3e8ba305 	.word	0x3e8ba305
 8027ac4:	3edb6db7 	.word	0x3edb6db7
 8027ac8:	3f19999a 	.word	0x3f19999a
 8027acc:	3f76384f 	.word	0x3f76384f
 8027ad0:	0802fcc0 	.word	0x0802fcc0
 8027ad4:	3f763800 	.word	0x3f763800
 8027ad8:	369dc3a0 	.word	0x369dc3a0
 8027adc:	0802fcb8 	.word	0x0802fcb8
 8027ae0:	3338aa3c 	.word	0x3338aa3c
 8027ae4:	f040 8093 	bne.w	8027c0e <__ieee754_powf+0x53e>
 8027ae8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8027ae0 <__ieee754_powf+0x410>
 8027aec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027af0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8027af4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8027af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027afc:	f73f aefa 	bgt.w	80278f4 <__ieee754_powf+0x224>
 8027b00:	15db      	asrs	r3, r3, #23
 8027b02:	3b7e      	subs	r3, #126	; 0x7e
 8027b04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8027b08:	4118      	asrs	r0, r3
 8027b0a:	4408      	add	r0, r1
 8027b0c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8027b10:	4a49      	ldr	r2, [pc, #292]	; (8027c38 <__ieee754_powf+0x568>)
 8027b12:	3b7f      	subs	r3, #127	; 0x7f
 8027b14:	411a      	asrs	r2, r3
 8027b16:	4002      	ands	r2, r0
 8027b18:	ee07 2a10 	vmov	s14, r2
 8027b1c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8027b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8027b24:	f1c3 0317 	rsb	r3, r3, #23
 8027b28:	4118      	asrs	r0, r3
 8027b2a:	2900      	cmp	r1, #0
 8027b2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b30:	bfb8      	it	lt
 8027b32:	4240      	neglt	r0, r0
 8027b34:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8027b38:	eddf 6a40 	vldr	s13, [pc, #256]	; 8027c3c <__ieee754_powf+0x56c>
 8027b3c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8027c40 <__ieee754_powf+0x570>
 8027b40:	ee17 3a10 	vmov	r3, s14
 8027b44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8027b48:	f023 030f 	bic.w	r3, r3, #15
 8027b4c:	ee07 3a10 	vmov	s14, r3
 8027b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027b54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027b58:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027b5c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8027c44 <__ieee754_powf+0x574>
 8027b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027b64:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8027b68:	eef0 6a67 	vmov.f32	s13, s15
 8027b6c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8027b70:	eef0 5a66 	vmov.f32	s11, s13
 8027b74:	eee7 5a46 	vfms.f32	s11, s14, s12
 8027b78:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8027b7c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8027b80:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8027c48 <__ieee754_powf+0x578>
 8027b84:	eddf 5a31 	vldr	s11, [pc, #196]	; 8027c4c <__ieee754_powf+0x57c>
 8027b88:	eea7 6a25 	vfma.f32	s12, s14, s11
 8027b8c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8027c50 <__ieee754_powf+0x580>
 8027b90:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027b94:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8027c54 <__ieee754_powf+0x584>
 8027b98:	eea5 6a87 	vfma.f32	s12, s11, s14
 8027b9c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8027c58 <__ieee754_powf+0x588>
 8027ba0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027ba4:	eeb0 6a66 	vmov.f32	s12, s13
 8027ba8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8027bac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8027bb0:	ee66 5a86 	vmul.f32	s11, s13, s12
 8027bb4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8027bb8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8027bbc:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8027bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027bc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027bc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027bcc:	ee10 3a10 	vmov	r3, s0
 8027bd0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8027bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027bd8:	da1f      	bge.n	8027c1a <__ieee754_powf+0x54a>
 8027bda:	f000 fa43 	bl	8028064 <scalbnf>
 8027bde:	ee20 0a08 	vmul.f32	s0, s0, s16
 8027be2:	e58d      	b.n	8027700 <__ieee754_powf+0x30>
 8027be4:	4a1d      	ldr	r2, [pc, #116]	; (8027c5c <__ieee754_powf+0x58c>)
 8027be6:	4293      	cmp	r3, r2
 8027be8:	dd07      	ble.n	8027bfa <__ieee754_powf+0x52a>
 8027bea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027bf2:	bf4c      	ite	mi
 8027bf4:	2001      	movmi	r0, #1
 8027bf6:	2000      	movpl	r0, #0
 8027bf8:	e622      	b.n	8027840 <__ieee754_powf+0x170>
 8027bfa:	d108      	bne.n	8027c0e <__ieee754_powf+0x53e>
 8027bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027c00:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8027c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c08:	f6ff af7a 	blt.w	8027b00 <__ieee754_powf+0x430>
 8027c0c:	e7ed      	b.n	8027bea <__ieee754_powf+0x51a>
 8027c0e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8027c12:	f73f af75 	bgt.w	8027b00 <__ieee754_powf+0x430>
 8027c16:	2000      	movs	r0, #0
 8027c18:	e78c      	b.n	8027b34 <__ieee754_powf+0x464>
 8027c1a:	ee00 3a10 	vmov	s0, r3
 8027c1e:	e7de      	b.n	8027bde <__ieee754_powf+0x50e>
 8027c20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027c24:	e56c      	b.n	8027700 <__ieee754_powf+0x30>
 8027c26:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8027c60 <__ieee754_powf+0x590>
 8027c2a:	e569      	b.n	8027700 <__ieee754_powf+0x30>
 8027c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8027c30:	e566      	b.n	8027700 <__ieee754_powf+0x30>
 8027c32:	2600      	movs	r6, #0
 8027c34:	e591      	b.n	802775a <__ieee754_powf+0x8a>
 8027c36:	bf00      	nop
 8027c38:	ff800000 	.word	0xff800000
 8027c3c:	3f317218 	.word	0x3f317218
 8027c40:	3f317200 	.word	0x3f317200
 8027c44:	35bfbe8c 	.word	0x35bfbe8c
 8027c48:	b5ddea0e 	.word	0xb5ddea0e
 8027c4c:	3331bb4c 	.word	0x3331bb4c
 8027c50:	388ab355 	.word	0x388ab355
 8027c54:	bb360b61 	.word	0xbb360b61
 8027c58:	3e2aaaab 	.word	0x3e2aaaab
 8027c5c:	43160000 	.word	0x43160000
 8027c60:	00000000 	.word	0x00000000

08027c64 <__ieee754_rem_pio2f>:
 8027c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c66:	ee10 6a10 	vmov	r6, s0
 8027c6a:	4b86      	ldr	r3, [pc, #536]	; (8027e84 <__ieee754_rem_pio2f+0x220>)
 8027c6c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8027c70:	429d      	cmp	r5, r3
 8027c72:	b087      	sub	sp, #28
 8027c74:	4604      	mov	r4, r0
 8027c76:	dc05      	bgt.n	8027c84 <__ieee754_rem_pio2f+0x20>
 8027c78:	2300      	movs	r3, #0
 8027c7a:	ed80 0a00 	vstr	s0, [r0]
 8027c7e:	6043      	str	r3, [r0, #4]
 8027c80:	2000      	movs	r0, #0
 8027c82:	e020      	b.n	8027cc6 <__ieee754_rem_pio2f+0x62>
 8027c84:	4b80      	ldr	r3, [pc, #512]	; (8027e88 <__ieee754_rem_pio2f+0x224>)
 8027c86:	429d      	cmp	r5, r3
 8027c88:	dc38      	bgt.n	8027cfc <__ieee754_rem_pio2f+0x98>
 8027c8a:	2e00      	cmp	r6, #0
 8027c8c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8027e8c <__ieee754_rem_pio2f+0x228>
 8027c90:	4b7f      	ldr	r3, [pc, #508]	; (8027e90 <__ieee754_rem_pio2f+0x22c>)
 8027c92:	f025 050f 	bic.w	r5, r5, #15
 8027c96:	dd18      	ble.n	8027cca <__ieee754_rem_pio2f+0x66>
 8027c98:	429d      	cmp	r5, r3
 8027c9a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8027c9e:	bf09      	itett	eq
 8027ca0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8027e94 <__ieee754_rem_pio2f+0x230>
 8027ca4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8027e98 <__ieee754_rem_pio2f+0x234>
 8027ca8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8027cac:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8027e9c <__ieee754_rem_pio2f+0x238>
 8027cb0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8027cb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027cb8:	edc0 6a00 	vstr	s13, [r0]
 8027cbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027cc0:	edc0 7a01 	vstr	s15, [r0, #4]
 8027cc4:	2001      	movs	r0, #1
 8027cc6:	b007      	add	sp, #28
 8027cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027cca:	429d      	cmp	r5, r3
 8027ccc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8027cd0:	bf09      	itett	eq
 8027cd2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8027e94 <__ieee754_rem_pio2f+0x230>
 8027cd6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8027e98 <__ieee754_rem_pio2f+0x234>
 8027cda:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8027cde:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8027e9c <__ieee754_rem_pio2f+0x238>
 8027ce2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8027ce6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027cea:	edc0 6a00 	vstr	s13, [r0]
 8027cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027cf2:	edc0 7a01 	vstr	s15, [r0, #4]
 8027cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027cfa:	e7e4      	b.n	8027cc6 <__ieee754_rem_pio2f+0x62>
 8027cfc:	4b68      	ldr	r3, [pc, #416]	; (8027ea0 <__ieee754_rem_pio2f+0x23c>)
 8027cfe:	429d      	cmp	r5, r3
 8027d00:	dc71      	bgt.n	8027de6 <__ieee754_rem_pio2f+0x182>
 8027d02:	f7fe ff39 	bl	8026b78 <fabsf>
 8027d06:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8027ea4 <__ieee754_rem_pio2f+0x240>
 8027d0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027d0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027d1a:	ee17 0a90 	vmov	r0, s15
 8027d1e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027e8c <__ieee754_rem_pio2f+0x228>
 8027d22:	eea7 0a67 	vfms.f32	s0, s14, s15
 8027d26:	281f      	cmp	r0, #31
 8027d28:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027e98 <__ieee754_rem_pio2f+0x234>
 8027d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027d30:	eeb1 6a47 	vneg.f32	s12, s14
 8027d34:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027d38:	ee16 2a90 	vmov	r2, s13
 8027d3c:	dc1c      	bgt.n	8027d78 <__ieee754_rem_pio2f+0x114>
 8027d3e:	495a      	ldr	r1, [pc, #360]	; (8027ea8 <__ieee754_rem_pio2f+0x244>)
 8027d40:	1e47      	subs	r7, r0, #1
 8027d42:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8027d46:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027d4a:	428b      	cmp	r3, r1
 8027d4c:	d014      	beq.n	8027d78 <__ieee754_rem_pio2f+0x114>
 8027d4e:	6022      	str	r2, [r4, #0]
 8027d50:	ed94 7a00 	vldr	s14, [r4]
 8027d54:	ee30 0a47 	vsub.f32	s0, s0, s14
 8027d58:	2e00      	cmp	r6, #0
 8027d5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027d5e:	ed84 0a01 	vstr	s0, [r4, #4]
 8027d62:	dab0      	bge.n	8027cc6 <__ieee754_rem_pio2f+0x62>
 8027d64:	eeb1 7a47 	vneg.f32	s14, s14
 8027d68:	eeb1 0a40 	vneg.f32	s0, s0
 8027d6c:	ed84 7a00 	vstr	s14, [r4]
 8027d70:	ed84 0a01 	vstr	s0, [r4, #4]
 8027d74:	4240      	negs	r0, r0
 8027d76:	e7a6      	b.n	8027cc6 <__ieee754_rem_pio2f+0x62>
 8027d78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027d7c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8027d80:	2908      	cmp	r1, #8
 8027d82:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8027d86:	dde2      	ble.n	8027d4e <__ieee754_rem_pio2f+0xea>
 8027d88:	eddf 5a42 	vldr	s11, [pc, #264]	; 8027e94 <__ieee754_rem_pio2f+0x230>
 8027d8c:	eef0 6a40 	vmov.f32	s13, s0
 8027d90:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027d94:	ee70 7a66 	vsub.f32	s15, s0, s13
 8027d98:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027d9c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8027e9c <__ieee754_rem_pio2f+0x238>
 8027da0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8027da4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8027da8:	ee15 2a90 	vmov	r2, s11
 8027dac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027db0:	1a5b      	subs	r3, r3, r1
 8027db2:	2b19      	cmp	r3, #25
 8027db4:	dc04      	bgt.n	8027dc0 <__ieee754_rem_pio2f+0x15c>
 8027db6:	edc4 5a00 	vstr	s11, [r4]
 8027dba:	eeb0 0a66 	vmov.f32	s0, s13
 8027dbe:	e7c7      	b.n	8027d50 <__ieee754_rem_pio2f+0xec>
 8027dc0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8027eac <__ieee754_rem_pio2f+0x248>
 8027dc4:	eeb0 0a66 	vmov.f32	s0, s13
 8027dc8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8027dcc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8027dd0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8027eb0 <__ieee754_rem_pio2f+0x24c>
 8027dd4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027dd8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8027ddc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027de0:	ed84 7a00 	vstr	s14, [r4]
 8027de4:	e7b4      	b.n	8027d50 <__ieee754_rem_pio2f+0xec>
 8027de6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8027dea:	db06      	blt.n	8027dfa <__ieee754_rem_pio2f+0x196>
 8027dec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027df0:	edc0 7a01 	vstr	s15, [r0, #4]
 8027df4:	edc0 7a00 	vstr	s15, [r0]
 8027df8:	e742      	b.n	8027c80 <__ieee754_rem_pio2f+0x1c>
 8027dfa:	15ea      	asrs	r2, r5, #23
 8027dfc:	3a86      	subs	r2, #134	; 0x86
 8027dfe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8027e02:	ee07 3a90 	vmov	s15, r3
 8027e06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027e0a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8027eb4 <__ieee754_rem_pio2f+0x250>
 8027e0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027e16:	ed8d 7a03 	vstr	s14, [sp, #12]
 8027e1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027e1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027e22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027e2a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8027e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027e32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8027e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e3a:	edcd 7a05 	vstr	s15, [sp, #20]
 8027e3e:	d11e      	bne.n	8027e7e <__ieee754_rem_pio2f+0x21a>
 8027e40:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8027e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e48:	bf14      	ite	ne
 8027e4a:	2302      	movne	r3, #2
 8027e4c:	2301      	moveq	r3, #1
 8027e4e:	491a      	ldr	r1, [pc, #104]	; (8027eb8 <__ieee754_rem_pio2f+0x254>)
 8027e50:	9101      	str	r1, [sp, #4]
 8027e52:	2102      	movs	r1, #2
 8027e54:	9100      	str	r1, [sp, #0]
 8027e56:	a803      	add	r0, sp, #12
 8027e58:	4621      	mov	r1, r4
 8027e5a:	f000 f98b 	bl	8028174 <__kernel_rem_pio2f>
 8027e5e:	2e00      	cmp	r6, #0
 8027e60:	f6bf af31 	bge.w	8027cc6 <__ieee754_rem_pio2f+0x62>
 8027e64:	edd4 7a00 	vldr	s15, [r4]
 8027e68:	eef1 7a67 	vneg.f32	s15, s15
 8027e6c:	edc4 7a00 	vstr	s15, [r4]
 8027e70:	edd4 7a01 	vldr	s15, [r4, #4]
 8027e74:	eef1 7a67 	vneg.f32	s15, s15
 8027e78:	edc4 7a01 	vstr	s15, [r4, #4]
 8027e7c:	e77a      	b.n	8027d74 <__ieee754_rem_pio2f+0x110>
 8027e7e:	2303      	movs	r3, #3
 8027e80:	e7e5      	b.n	8027e4e <__ieee754_rem_pio2f+0x1ea>
 8027e82:	bf00      	nop
 8027e84:	3f490fd8 	.word	0x3f490fd8
 8027e88:	4016cbe3 	.word	0x4016cbe3
 8027e8c:	3fc90f80 	.word	0x3fc90f80
 8027e90:	3fc90fd0 	.word	0x3fc90fd0
 8027e94:	37354400 	.word	0x37354400
 8027e98:	37354443 	.word	0x37354443
 8027e9c:	2e85a308 	.word	0x2e85a308
 8027ea0:	43490f80 	.word	0x43490f80
 8027ea4:	3f22f984 	.word	0x3f22f984
 8027ea8:	0802fcc8 	.word	0x0802fcc8
 8027eac:	2e85a300 	.word	0x2e85a300
 8027eb0:	248d3132 	.word	0x248d3132
 8027eb4:	43800000 	.word	0x43800000
 8027eb8:	0802fd48 	.word	0x0802fd48

08027ebc <atanf>:
 8027ebc:	b538      	push	{r3, r4, r5, lr}
 8027ebe:	ee10 5a10 	vmov	r5, s0
 8027ec2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8027ec6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8027eca:	eef0 7a40 	vmov.f32	s15, s0
 8027ece:	db10      	blt.n	8027ef2 <atanf+0x36>
 8027ed0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8027ed4:	dd04      	ble.n	8027ee0 <atanf+0x24>
 8027ed6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8027eda:	eeb0 0a67 	vmov.f32	s0, s15
 8027ede:	bd38      	pop	{r3, r4, r5, pc}
 8027ee0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8028018 <atanf+0x15c>
 8027ee4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 802801c <atanf+0x160>
 8027ee8:	2d00      	cmp	r5, #0
 8027eea:	bfd8      	it	le
 8027eec:	eef0 7a47 	vmovle.f32	s15, s14
 8027ef0:	e7f3      	b.n	8027eda <atanf+0x1e>
 8027ef2:	4b4b      	ldr	r3, [pc, #300]	; (8028020 <atanf+0x164>)
 8027ef4:	429c      	cmp	r4, r3
 8027ef6:	dc10      	bgt.n	8027f1a <atanf+0x5e>
 8027ef8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8027efc:	da0a      	bge.n	8027f14 <atanf+0x58>
 8027efe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8028024 <atanf+0x168>
 8027f02:	ee30 7a07 	vadd.f32	s14, s0, s14
 8027f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027f0a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8027f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f12:	dce2      	bgt.n	8027eda <atanf+0x1e>
 8027f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8027f18:	e013      	b.n	8027f42 <atanf+0x86>
 8027f1a:	f7fe fe2d 	bl	8026b78 <fabsf>
 8027f1e:	4b42      	ldr	r3, [pc, #264]	; (8028028 <atanf+0x16c>)
 8027f20:	429c      	cmp	r4, r3
 8027f22:	dc4f      	bgt.n	8027fc4 <atanf+0x108>
 8027f24:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8027f28:	429c      	cmp	r4, r3
 8027f2a:	dc41      	bgt.n	8027fb0 <atanf+0xf4>
 8027f2c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8027f30:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027f34:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027f38:	2300      	movs	r3, #0
 8027f3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027f3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f42:	1c5a      	adds	r2, r3, #1
 8027f44:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8027f48:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802802c <atanf+0x170>
 8027f4c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8028030 <atanf+0x174>
 8027f50:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8028034 <atanf+0x178>
 8027f54:	ee66 6a06 	vmul.f32	s13, s12, s12
 8027f58:	eee6 5a87 	vfma.f32	s11, s13, s14
 8027f5c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8028038 <atanf+0x17c>
 8027f60:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027f64:	eddf 5a35 	vldr	s11, [pc, #212]	; 802803c <atanf+0x180>
 8027f68:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027f6c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8028040 <atanf+0x184>
 8027f70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027f74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8028044 <atanf+0x188>
 8027f78:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027f7c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8028048 <atanf+0x18c>
 8027f80:	eea6 5a87 	vfma.f32	s10, s13, s14
 8027f84:	ed9f 7a31 	vldr	s14, [pc, #196]	; 802804c <atanf+0x190>
 8027f88:	eea5 7a26 	vfma.f32	s14, s10, s13
 8027f8c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8028050 <atanf+0x194>
 8027f90:	eea7 5a26 	vfma.f32	s10, s14, s13
 8027f94:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8028054 <atanf+0x198>
 8027f98:	eea5 7a26 	vfma.f32	s14, s10, s13
 8027f9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8027fa0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8027fa4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8027fa8:	d121      	bne.n	8027fee <atanf+0x132>
 8027faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027fae:	e794      	b.n	8027eda <atanf+0x1e>
 8027fb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027fb4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027fb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027fbc:	2301      	movs	r3, #1
 8027fbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027fc2:	e7be      	b.n	8027f42 <atanf+0x86>
 8027fc4:	4b24      	ldr	r3, [pc, #144]	; (8028058 <atanf+0x19c>)
 8027fc6:	429c      	cmp	r4, r3
 8027fc8:	dc0b      	bgt.n	8027fe2 <atanf+0x126>
 8027fca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8027fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027fd2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027fd6:	2302      	movs	r3, #2
 8027fd8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8027fe0:	e7af      	b.n	8027f42 <atanf+0x86>
 8027fe2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027fe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027fea:	2303      	movs	r3, #3
 8027fec:	e7a9      	b.n	8027f42 <atanf+0x86>
 8027fee:	4a1b      	ldr	r2, [pc, #108]	; (802805c <atanf+0x1a0>)
 8027ff0:	491b      	ldr	r1, [pc, #108]	; (8028060 <atanf+0x1a4>)
 8027ff2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8027ff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8027ffa:	edd3 6a00 	vldr	s13, [r3]
 8027ffe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8028002:	2d00      	cmp	r5, #0
 8028004:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028008:	edd2 7a00 	vldr	s15, [r2]
 802800c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028010:	bfb8      	it	lt
 8028012:	eef1 7a67 	vneglt.f32	s15, s15
 8028016:	e760      	b.n	8027eda <atanf+0x1e>
 8028018:	3fc90fdb 	.word	0x3fc90fdb
 802801c:	bfc90fdb 	.word	0xbfc90fdb
 8028020:	3edfffff 	.word	0x3edfffff
 8028024:	7149f2ca 	.word	0x7149f2ca
 8028028:	3f97ffff 	.word	0x3f97ffff
 802802c:	3c8569d7 	.word	0x3c8569d7
 8028030:	3d4bda59 	.word	0x3d4bda59
 8028034:	bd6ef16b 	.word	0xbd6ef16b
 8028038:	3d886b35 	.word	0x3d886b35
 802803c:	3dba2e6e 	.word	0x3dba2e6e
 8028040:	3e124925 	.word	0x3e124925
 8028044:	3eaaaaab 	.word	0x3eaaaaab
 8028048:	bd15a221 	.word	0xbd15a221
 802804c:	bd9d8795 	.word	0xbd9d8795
 8028050:	bde38e38 	.word	0xbde38e38
 8028054:	be4ccccd 	.word	0xbe4ccccd
 8028058:	401bffff 	.word	0x401bffff
 802805c:	08030060 	.word	0x08030060
 8028060:	08030070 	.word	0x08030070

08028064 <scalbnf>:
 8028064:	ee10 3a10 	vmov	r3, s0
 8028068:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802806c:	d02b      	beq.n	80280c6 <scalbnf+0x62>
 802806e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8028072:	d302      	bcc.n	802807a <scalbnf+0x16>
 8028074:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028078:	4770      	bx	lr
 802807a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802807e:	d123      	bne.n	80280c8 <scalbnf+0x64>
 8028080:	4b24      	ldr	r3, [pc, #144]	; (8028114 <scalbnf+0xb0>)
 8028082:	eddf 7a25 	vldr	s15, [pc, #148]	; 8028118 <scalbnf+0xb4>
 8028086:	4298      	cmp	r0, r3
 8028088:	ee20 0a27 	vmul.f32	s0, s0, s15
 802808c:	db17      	blt.n	80280be <scalbnf+0x5a>
 802808e:	ee10 3a10 	vmov	r3, s0
 8028092:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028096:	3a19      	subs	r2, #25
 8028098:	f24c 3150 	movw	r1, #50000	; 0xc350
 802809c:	4288      	cmp	r0, r1
 802809e:	dd15      	ble.n	80280cc <scalbnf+0x68>
 80280a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802811c <scalbnf+0xb8>
 80280a4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8028120 <scalbnf+0xbc>
 80280a8:	ee10 3a10 	vmov	r3, s0
 80280ac:	eeb0 7a67 	vmov.f32	s14, s15
 80280b0:	2b00      	cmp	r3, #0
 80280b2:	bfb8      	it	lt
 80280b4:	eef0 7a66 	vmovlt.f32	s15, s13
 80280b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80280bc:	4770      	bx	lr
 80280be:	eddf 7a19 	vldr	s15, [pc, #100]	; 8028124 <scalbnf+0xc0>
 80280c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80280c6:	4770      	bx	lr
 80280c8:	0dd2      	lsrs	r2, r2, #23
 80280ca:	e7e5      	b.n	8028098 <scalbnf+0x34>
 80280cc:	4410      	add	r0, r2
 80280ce:	28fe      	cmp	r0, #254	; 0xfe
 80280d0:	dce6      	bgt.n	80280a0 <scalbnf+0x3c>
 80280d2:	2800      	cmp	r0, #0
 80280d4:	dd06      	ble.n	80280e4 <scalbnf+0x80>
 80280d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80280da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80280de:	ee00 3a10 	vmov	s0, r3
 80280e2:	4770      	bx	lr
 80280e4:	f110 0f16 	cmn.w	r0, #22
 80280e8:	da09      	bge.n	80280fe <scalbnf+0x9a>
 80280ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8028124 <scalbnf+0xc0>
 80280ee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8028128 <scalbnf+0xc4>
 80280f2:	ee10 3a10 	vmov	r3, s0
 80280f6:	eeb0 7a67 	vmov.f32	s14, s15
 80280fa:	2b00      	cmp	r3, #0
 80280fc:	e7d9      	b.n	80280b2 <scalbnf+0x4e>
 80280fe:	3019      	adds	r0, #25
 8028100:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028104:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028108:	ed9f 0a08 	vldr	s0, [pc, #32]	; 802812c <scalbnf+0xc8>
 802810c:	ee07 3a90 	vmov	s15, r3
 8028110:	e7d7      	b.n	80280c2 <scalbnf+0x5e>
 8028112:	bf00      	nop
 8028114:	ffff3cb0 	.word	0xffff3cb0
 8028118:	4c000000 	.word	0x4c000000
 802811c:	7149f2ca 	.word	0x7149f2ca
 8028120:	f149f2ca 	.word	0xf149f2ca
 8028124:	0da24260 	.word	0x0da24260
 8028128:	8da24260 	.word	0x8da24260
 802812c:	33000000 	.word	0x33000000

08028130 <with_errnof>:
 8028130:	b513      	push	{r0, r1, r4, lr}
 8028132:	4604      	mov	r4, r0
 8028134:	ed8d 0a01 	vstr	s0, [sp, #4]
 8028138:	f7fc fde8 	bl	8024d0c <__errno>
 802813c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8028140:	6004      	str	r4, [r0, #0]
 8028142:	b002      	add	sp, #8
 8028144:	bd10      	pop	{r4, pc}

08028146 <xflowf>:
 8028146:	b130      	cbz	r0, 8028156 <xflowf+0x10>
 8028148:	eef1 7a40 	vneg.f32	s15, s0
 802814c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028150:	2022      	movs	r0, #34	; 0x22
 8028152:	f7ff bfed 	b.w	8028130 <with_errnof>
 8028156:	eef0 7a40 	vmov.f32	s15, s0
 802815a:	e7f7      	b.n	802814c <xflowf+0x6>

0802815c <__math_uflowf>:
 802815c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028164 <__math_uflowf+0x8>
 8028160:	f7ff bff1 	b.w	8028146 <xflowf>
 8028164:	10000000 	.word	0x10000000

08028168 <__math_oflowf>:
 8028168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028170 <__math_oflowf+0x8>
 802816c:	f7ff bfeb 	b.w	8028146 <xflowf>
 8028170:	70000000 	.word	0x70000000

08028174 <__kernel_rem_pio2f>:
 8028174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028178:	ed2d 8b04 	vpush	{d8-d9}
 802817c:	b0d9      	sub	sp, #356	; 0x164
 802817e:	4688      	mov	r8, r1
 8028180:	9002      	str	r0, [sp, #8]
 8028182:	49b8      	ldr	r1, [pc, #736]	; (8028464 <__kernel_rem_pio2f+0x2f0>)
 8028184:	9866      	ldr	r0, [sp, #408]	; 0x198
 8028186:	9301      	str	r3, [sp, #4]
 8028188:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 802818c:	9901      	ldr	r1, [sp, #4]
 802818e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8028190:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8028194:	1d11      	adds	r1, r2, #4
 8028196:	db25      	blt.n	80281e4 <__kernel_rem_pio2f+0x70>
 8028198:	1ed0      	subs	r0, r2, #3
 802819a:	bf48      	it	mi
 802819c:	1d10      	addmi	r0, r2, #4
 802819e:	10c0      	asrs	r0, r0, #3
 80281a0:	1c45      	adds	r5, r0, #1
 80281a2:	00e9      	lsls	r1, r5, #3
 80281a4:	eba0 070b 	sub.w	r7, r0, fp
 80281a8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8028474 <__kernel_rem_pio2f+0x300>
 80281ac:	9103      	str	r1, [sp, #12]
 80281ae:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80281b2:	eb0a 0c0b 	add.w	ip, sl, fp
 80281b6:	ae1c      	add	r6, sp, #112	; 0x70
 80281b8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80281bc:	2400      	movs	r4, #0
 80281be:	4564      	cmp	r4, ip
 80281c0:	dd12      	ble.n	80281e8 <__kernel_rem_pio2f+0x74>
 80281c2:	9901      	ldr	r1, [sp, #4]
 80281c4:	ac1c      	add	r4, sp, #112	; 0x70
 80281c6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80281ca:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80281ce:	f04f 0c00 	mov.w	ip, #0
 80281d2:	45d4      	cmp	ip, sl
 80281d4:	dc27      	bgt.n	8028226 <__kernel_rem_pio2f+0xb2>
 80281d6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80281da:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8028474 <__kernel_rem_pio2f+0x300>
 80281de:	4627      	mov	r7, r4
 80281e0:	2600      	movs	r6, #0
 80281e2:	e016      	b.n	8028212 <__kernel_rem_pio2f+0x9e>
 80281e4:	2000      	movs	r0, #0
 80281e6:	e7db      	b.n	80281a0 <__kernel_rem_pio2f+0x2c>
 80281e8:	42e7      	cmn	r7, r4
 80281ea:	bf5d      	ittte	pl
 80281ec:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80281f0:	ee07 1a90 	vmovpl	s15, r1
 80281f4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80281f8:	eef0 7a47 	vmovmi.f32	s15, s14
 80281fc:	ece6 7a01 	vstmia	r6!, {s15}
 8028200:	3401      	adds	r4, #1
 8028202:	e7dc      	b.n	80281be <__kernel_rem_pio2f+0x4a>
 8028204:	ecfe 6a01 	vldmia	lr!, {s13}
 8028208:	ed97 7a00 	vldr	s14, [r7]
 802820c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028210:	3601      	adds	r6, #1
 8028212:	455e      	cmp	r6, fp
 8028214:	f1a7 0704 	sub.w	r7, r7, #4
 8028218:	ddf4      	ble.n	8028204 <__kernel_rem_pio2f+0x90>
 802821a:	ece9 7a01 	vstmia	r9!, {s15}
 802821e:	f10c 0c01 	add.w	ip, ip, #1
 8028222:	3404      	adds	r4, #4
 8028224:	e7d5      	b.n	80281d2 <__kernel_rem_pio2f+0x5e>
 8028226:	a908      	add	r1, sp, #32
 8028228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802822c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8028230:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8028470 <__kernel_rem_pio2f+0x2fc>
 8028234:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 802846c <__kernel_rem_pio2f+0x2f8>
 8028238:	9105      	str	r1, [sp, #20]
 802823a:	9304      	str	r3, [sp, #16]
 802823c:	4656      	mov	r6, sl
 802823e:	00b3      	lsls	r3, r6, #2
 8028240:	9306      	str	r3, [sp, #24]
 8028242:	ab58      	add	r3, sp, #352	; 0x160
 8028244:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8028248:	ac08      	add	r4, sp, #32
 802824a:	ab44      	add	r3, sp, #272	; 0x110
 802824c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8028250:	46a4      	mov	ip, r4
 8028252:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8028256:	4637      	mov	r7, r6
 8028258:	2f00      	cmp	r7, #0
 802825a:	f1a0 0004 	sub.w	r0, r0, #4
 802825e:	dc4a      	bgt.n	80282f6 <__kernel_rem_pio2f+0x182>
 8028260:	4628      	mov	r0, r5
 8028262:	9207      	str	r2, [sp, #28]
 8028264:	f7ff fefe 	bl	8028064 <scalbnf>
 8028268:	eeb0 8a40 	vmov.f32	s16, s0
 802826c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8028270:	ee28 0a00 	vmul.f32	s0, s16, s0
 8028274:	f7fe fd64 	bl	8026d40 <floorf>
 8028278:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802827c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8028280:	2d00      	cmp	r5, #0
 8028282:	9a07      	ldr	r2, [sp, #28]
 8028284:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028288:	ee17 9a90 	vmov	r9, s15
 802828c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028290:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028294:	dd41      	ble.n	802831a <__kernel_rem_pio2f+0x1a6>
 8028296:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 802829a:	ab08      	add	r3, sp, #32
 802829c:	f1c5 0e08 	rsb	lr, r5, #8
 80282a0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80282a4:	fa47 f00e 	asr.w	r0, r7, lr
 80282a8:	4481      	add	r9, r0
 80282aa:	fa00 f00e 	lsl.w	r0, r0, lr
 80282ae:	1a3f      	subs	r7, r7, r0
 80282b0:	f1c5 0007 	rsb	r0, r5, #7
 80282b4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80282b8:	4107      	asrs	r7, r0
 80282ba:	2f00      	cmp	r7, #0
 80282bc:	dd3c      	ble.n	8028338 <__kernel_rem_pio2f+0x1c4>
 80282be:	f04f 0e00 	mov.w	lr, #0
 80282c2:	f109 0901 	add.w	r9, r9, #1
 80282c6:	4671      	mov	r1, lr
 80282c8:	4576      	cmp	r6, lr
 80282ca:	dc67      	bgt.n	802839c <__kernel_rem_pio2f+0x228>
 80282cc:	2d00      	cmp	r5, #0
 80282ce:	dd03      	ble.n	80282d8 <__kernel_rem_pio2f+0x164>
 80282d0:	2d01      	cmp	r5, #1
 80282d2:	d074      	beq.n	80283be <__kernel_rem_pio2f+0x24a>
 80282d4:	2d02      	cmp	r5, #2
 80282d6:	d07b      	beq.n	80283d0 <__kernel_rem_pio2f+0x25c>
 80282d8:	2f02      	cmp	r7, #2
 80282da:	d12d      	bne.n	8028338 <__kernel_rem_pio2f+0x1c4>
 80282dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80282e0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80282e4:	b341      	cbz	r1, 8028338 <__kernel_rem_pio2f+0x1c4>
 80282e6:	4628      	mov	r0, r5
 80282e8:	9207      	str	r2, [sp, #28]
 80282ea:	f7ff febb 	bl	8028064 <scalbnf>
 80282ee:	9a07      	ldr	r2, [sp, #28]
 80282f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80282f4:	e020      	b.n	8028338 <__kernel_rem_pio2f+0x1c4>
 80282f6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80282fa:	3f01      	subs	r7, #1
 80282fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028304:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8028308:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802830c:	ecac 0a01 	vstmia	ip!, {s0}
 8028310:	ed90 0a00 	vldr	s0, [r0]
 8028314:	ee37 0a80 	vadd.f32	s0, s15, s0
 8028318:	e79e      	b.n	8028258 <__kernel_rem_pio2f+0xe4>
 802831a:	d105      	bne.n	8028328 <__kernel_rem_pio2f+0x1b4>
 802831c:	1e70      	subs	r0, r6, #1
 802831e:	ab08      	add	r3, sp, #32
 8028320:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8028324:	11ff      	asrs	r7, r7, #7
 8028326:	e7c8      	b.n	80282ba <__kernel_rem_pio2f+0x146>
 8028328:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802832c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8028330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028334:	da30      	bge.n	8028398 <__kernel_rem_pio2f+0x224>
 8028336:	2700      	movs	r7, #0
 8028338:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802833c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028340:	f040 809a 	bne.w	8028478 <__kernel_rem_pio2f+0x304>
 8028344:	1e74      	subs	r4, r6, #1
 8028346:	46a4      	mov	ip, r4
 8028348:	2100      	movs	r1, #0
 802834a:	45d4      	cmp	ip, sl
 802834c:	da47      	bge.n	80283de <__kernel_rem_pio2f+0x26a>
 802834e:	2900      	cmp	r1, #0
 8028350:	d063      	beq.n	802841a <__kernel_rem_pio2f+0x2a6>
 8028352:	ab08      	add	r3, sp, #32
 8028354:	3d08      	subs	r5, #8
 8028356:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802835a:	2b00      	cmp	r3, #0
 802835c:	d07f      	beq.n	802845e <__kernel_rem_pio2f+0x2ea>
 802835e:	4628      	mov	r0, r5
 8028360:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028364:	f7ff fe7e 	bl	8028064 <scalbnf>
 8028368:	1c63      	adds	r3, r4, #1
 802836a:	aa44      	add	r2, sp, #272	; 0x110
 802836c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8028470 <__kernel_rem_pio2f+0x2fc>
 8028370:	0099      	lsls	r1, r3, #2
 8028372:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8028376:	4623      	mov	r3, r4
 8028378:	2b00      	cmp	r3, #0
 802837a:	f280 80ad 	bge.w	80284d8 <__kernel_rem_pio2f+0x364>
 802837e:	4623      	mov	r3, r4
 8028380:	2b00      	cmp	r3, #0
 8028382:	f2c0 80cb 	blt.w	802851c <__kernel_rem_pio2f+0x3a8>
 8028386:	aa44      	add	r2, sp, #272	; 0x110
 8028388:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802838c:	4e36      	ldr	r6, [pc, #216]	; (8028468 <__kernel_rem_pio2f+0x2f4>)
 802838e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8028474 <__kernel_rem_pio2f+0x300>
 8028392:	2000      	movs	r0, #0
 8028394:	1ae2      	subs	r2, r4, r3
 8028396:	e0b6      	b.n	8028506 <__kernel_rem_pio2f+0x392>
 8028398:	2702      	movs	r7, #2
 802839a:	e790      	b.n	80282be <__kernel_rem_pio2f+0x14a>
 802839c:	6820      	ldr	r0, [r4, #0]
 802839e:	b949      	cbnz	r1, 80283b4 <__kernel_rem_pio2f+0x240>
 80283a0:	b118      	cbz	r0, 80283aa <__kernel_rem_pio2f+0x236>
 80283a2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80283a6:	6020      	str	r0, [r4, #0]
 80283a8:	2001      	movs	r0, #1
 80283aa:	f10e 0e01 	add.w	lr, lr, #1
 80283ae:	3404      	adds	r4, #4
 80283b0:	4601      	mov	r1, r0
 80283b2:	e789      	b.n	80282c8 <__kernel_rem_pio2f+0x154>
 80283b4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80283b8:	6020      	str	r0, [r4, #0]
 80283ba:	4608      	mov	r0, r1
 80283bc:	e7f5      	b.n	80283aa <__kernel_rem_pio2f+0x236>
 80283be:	1e74      	subs	r4, r6, #1
 80283c0:	ab08      	add	r3, sp, #32
 80283c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80283c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80283ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80283ce:	e783      	b.n	80282d8 <__kernel_rem_pio2f+0x164>
 80283d0:	1e74      	subs	r4, r6, #1
 80283d2:	ab08      	add	r3, sp, #32
 80283d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80283d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80283dc:	e7f5      	b.n	80283ca <__kernel_rem_pio2f+0x256>
 80283de:	ab08      	add	r3, sp, #32
 80283e0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80283e4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80283e8:	4301      	orrs	r1, r0
 80283ea:	e7ae      	b.n	802834a <__kernel_rem_pio2f+0x1d6>
 80283ec:	3001      	adds	r0, #1
 80283ee:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80283f2:	2f00      	cmp	r7, #0
 80283f4:	d0fa      	beq.n	80283ec <__kernel_rem_pio2f+0x278>
 80283f6:	9b06      	ldr	r3, [sp, #24]
 80283f8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80283fc:	eb0d 0403 	add.w	r4, sp, r3
 8028400:	9b01      	ldr	r3, [sp, #4]
 8028402:	18f7      	adds	r7, r6, r3
 8028404:	ab1c      	add	r3, sp, #112	; 0x70
 8028406:	f106 0c01 	add.w	ip, r6, #1
 802840a:	3c4c      	subs	r4, #76	; 0x4c
 802840c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8028410:	4430      	add	r0, r6
 8028412:	4560      	cmp	r0, ip
 8028414:	da04      	bge.n	8028420 <__kernel_rem_pio2f+0x2ac>
 8028416:	4606      	mov	r6, r0
 8028418:	e711      	b.n	802823e <__kernel_rem_pio2f+0xca>
 802841a:	9c05      	ldr	r4, [sp, #20]
 802841c:	2001      	movs	r0, #1
 802841e:	e7e6      	b.n	80283ee <__kernel_rem_pio2f+0x27a>
 8028420:	9b04      	ldr	r3, [sp, #16]
 8028422:	f8dd e008 	ldr.w	lr, [sp, #8]
 8028426:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802842a:	9306      	str	r3, [sp, #24]
 802842c:	ee07 3a90 	vmov	s15, r3
 8028430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028434:	2600      	movs	r6, #0
 8028436:	ece7 7a01 	vstmia	r7!, {s15}
 802843a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8028474 <__kernel_rem_pio2f+0x300>
 802843e:	46b9      	mov	r9, r7
 8028440:	455e      	cmp	r6, fp
 8028442:	dd04      	ble.n	802844e <__kernel_rem_pio2f+0x2da>
 8028444:	ece4 7a01 	vstmia	r4!, {s15}
 8028448:	f10c 0c01 	add.w	ip, ip, #1
 802844c:	e7e1      	b.n	8028412 <__kernel_rem_pio2f+0x29e>
 802844e:	ecfe 6a01 	vldmia	lr!, {s13}
 8028452:	ed39 7a01 	vldmdb	r9!, {s14}
 8028456:	3601      	adds	r6, #1
 8028458:	eee6 7a87 	vfma.f32	s15, s13, s14
 802845c:	e7f0      	b.n	8028440 <__kernel_rem_pio2f+0x2cc>
 802845e:	3c01      	subs	r4, #1
 8028460:	e777      	b.n	8028352 <__kernel_rem_pio2f+0x1de>
 8028462:	bf00      	nop
 8028464:	080300ac 	.word	0x080300ac
 8028468:	08030080 	.word	0x08030080
 802846c:	43800000 	.word	0x43800000
 8028470:	3b800000 	.word	0x3b800000
 8028474:	00000000 	.word	0x00000000
 8028478:	9b03      	ldr	r3, [sp, #12]
 802847a:	eeb0 0a48 	vmov.f32	s0, s16
 802847e:	1a98      	subs	r0, r3, r2
 8028480:	f7ff fdf0 	bl	8028064 <scalbnf>
 8028484:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802846c <__kernel_rem_pio2f+0x2f8>
 8028488:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802848c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028490:	db19      	blt.n	80284c6 <__kernel_rem_pio2f+0x352>
 8028492:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8028470 <__kernel_rem_pio2f+0x2fc>
 8028496:	ee60 7a27 	vmul.f32	s15, s0, s15
 802849a:	aa08      	add	r2, sp, #32
 802849c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80284a0:	1c74      	adds	r4, r6, #1
 80284a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80284a6:	3508      	adds	r5, #8
 80284a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80284ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80284b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80284b4:	ee10 3a10 	vmov	r3, s0
 80284b8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80284bc:	ee17 3a90 	vmov	r3, s15
 80284c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80284c4:	e74b      	b.n	802835e <__kernel_rem_pio2f+0x1ea>
 80284c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80284ca:	aa08      	add	r2, sp, #32
 80284cc:	ee10 3a10 	vmov	r3, s0
 80284d0:	4634      	mov	r4, r6
 80284d2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80284d6:	e742      	b.n	802835e <__kernel_rem_pio2f+0x1ea>
 80284d8:	a808      	add	r0, sp, #32
 80284da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80284de:	9001      	str	r0, [sp, #4]
 80284e0:	ee07 0a90 	vmov	s15, r0
 80284e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80284e8:	3b01      	subs	r3, #1
 80284ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 80284ee:	ee20 0a07 	vmul.f32	s0, s0, s14
 80284f2:	ed62 7a01 	vstmdb	r2!, {s15}
 80284f6:	e73f      	b.n	8028378 <__kernel_rem_pio2f+0x204>
 80284f8:	ecf6 6a01 	vldmia	r6!, {s13}
 80284fc:	ecb5 7a01 	vldmia	r5!, {s14}
 8028500:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028504:	3001      	adds	r0, #1
 8028506:	4550      	cmp	r0, sl
 8028508:	dc01      	bgt.n	802850e <__kernel_rem_pio2f+0x39a>
 802850a:	4290      	cmp	r0, r2
 802850c:	ddf4      	ble.n	80284f8 <__kernel_rem_pio2f+0x384>
 802850e:	a858      	add	r0, sp, #352	; 0x160
 8028510:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8028514:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8028518:	3b01      	subs	r3, #1
 802851a:	e731      	b.n	8028380 <__kernel_rem_pio2f+0x20c>
 802851c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802851e:	2b02      	cmp	r3, #2
 8028520:	dc09      	bgt.n	8028536 <__kernel_rem_pio2f+0x3c2>
 8028522:	2b00      	cmp	r3, #0
 8028524:	dc2b      	bgt.n	802857e <__kernel_rem_pio2f+0x40a>
 8028526:	d044      	beq.n	80285b2 <__kernel_rem_pio2f+0x43e>
 8028528:	f009 0007 	and.w	r0, r9, #7
 802852c:	b059      	add	sp, #356	; 0x164
 802852e:	ecbd 8b04 	vpop	{d8-d9}
 8028532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028536:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8028538:	2b03      	cmp	r3, #3
 802853a:	d1f5      	bne.n	8028528 <__kernel_rem_pio2f+0x3b4>
 802853c:	aa30      	add	r2, sp, #192	; 0xc0
 802853e:	1f0b      	subs	r3, r1, #4
 8028540:	4413      	add	r3, r2
 8028542:	461a      	mov	r2, r3
 8028544:	4620      	mov	r0, r4
 8028546:	2800      	cmp	r0, #0
 8028548:	f1a2 0204 	sub.w	r2, r2, #4
 802854c:	dc52      	bgt.n	80285f4 <__kernel_rem_pio2f+0x480>
 802854e:	4622      	mov	r2, r4
 8028550:	2a01      	cmp	r2, #1
 8028552:	f1a3 0304 	sub.w	r3, r3, #4
 8028556:	dc5d      	bgt.n	8028614 <__kernel_rem_pio2f+0x4a0>
 8028558:	ab30      	add	r3, sp, #192	; 0xc0
 802855a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8028474 <__kernel_rem_pio2f+0x300>
 802855e:	440b      	add	r3, r1
 8028560:	2c01      	cmp	r4, #1
 8028562:	dc67      	bgt.n	8028634 <__kernel_rem_pio2f+0x4c0>
 8028564:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8028568:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802856c:	2f00      	cmp	r7, #0
 802856e:	d167      	bne.n	8028640 <__kernel_rem_pio2f+0x4cc>
 8028570:	edc8 6a00 	vstr	s13, [r8]
 8028574:	ed88 7a01 	vstr	s14, [r8, #4]
 8028578:	edc8 7a02 	vstr	s15, [r8, #8]
 802857c:	e7d4      	b.n	8028528 <__kernel_rem_pio2f+0x3b4>
 802857e:	ab30      	add	r3, sp, #192	; 0xc0
 8028580:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8028474 <__kernel_rem_pio2f+0x300>
 8028584:	440b      	add	r3, r1
 8028586:	4622      	mov	r2, r4
 8028588:	2a00      	cmp	r2, #0
 802858a:	da24      	bge.n	80285d6 <__kernel_rem_pio2f+0x462>
 802858c:	b34f      	cbz	r7, 80285e2 <__kernel_rem_pio2f+0x46e>
 802858e:	eef1 7a47 	vneg.f32	s15, s14
 8028592:	edc8 7a00 	vstr	s15, [r8]
 8028596:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802859a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802859e:	aa31      	add	r2, sp, #196	; 0xc4
 80285a0:	2301      	movs	r3, #1
 80285a2:	429c      	cmp	r4, r3
 80285a4:	da20      	bge.n	80285e8 <__kernel_rem_pio2f+0x474>
 80285a6:	b10f      	cbz	r7, 80285ac <__kernel_rem_pio2f+0x438>
 80285a8:	eef1 7a67 	vneg.f32	s15, s15
 80285ac:	edc8 7a01 	vstr	s15, [r8, #4]
 80285b0:	e7ba      	b.n	8028528 <__kernel_rem_pio2f+0x3b4>
 80285b2:	ab30      	add	r3, sp, #192	; 0xc0
 80285b4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8028474 <__kernel_rem_pio2f+0x300>
 80285b8:	440b      	add	r3, r1
 80285ba:	2c00      	cmp	r4, #0
 80285bc:	da05      	bge.n	80285ca <__kernel_rem_pio2f+0x456>
 80285be:	b10f      	cbz	r7, 80285c4 <__kernel_rem_pio2f+0x450>
 80285c0:	eef1 7a67 	vneg.f32	s15, s15
 80285c4:	edc8 7a00 	vstr	s15, [r8]
 80285c8:	e7ae      	b.n	8028528 <__kernel_rem_pio2f+0x3b4>
 80285ca:	ed33 7a01 	vldmdb	r3!, {s14}
 80285ce:	3c01      	subs	r4, #1
 80285d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80285d4:	e7f1      	b.n	80285ba <__kernel_rem_pio2f+0x446>
 80285d6:	ed73 7a01 	vldmdb	r3!, {s15}
 80285da:	3a01      	subs	r2, #1
 80285dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80285e0:	e7d2      	b.n	8028588 <__kernel_rem_pio2f+0x414>
 80285e2:	eef0 7a47 	vmov.f32	s15, s14
 80285e6:	e7d4      	b.n	8028592 <__kernel_rem_pio2f+0x41e>
 80285e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80285ec:	3301      	adds	r3, #1
 80285ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80285f2:	e7d6      	b.n	80285a2 <__kernel_rem_pio2f+0x42e>
 80285f4:	edd2 7a00 	vldr	s15, [r2]
 80285f8:	edd2 6a01 	vldr	s13, [r2, #4]
 80285fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028600:	3801      	subs	r0, #1
 8028602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028606:	ed82 7a00 	vstr	s14, [r2]
 802860a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802860e:	edc2 7a01 	vstr	s15, [r2, #4]
 8028612:	e798      	b.n	8028546 <__kernel_rem_pio2f+0x3d2>
 8028614:	edd3 7a00 	vldr	s15, [r3]
 8028618:	edd3 6a01 	vldr	s13, [r3, #4]
 802861c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028620:	3a01      	subs	r2, #1
 8028622:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028626:	ed83 7a00 	vstr	s14, [r3]
 802862a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802862e:	edc3 7a01 	vstr	s15, [r3, #4]
 8028632:	e78d      	b.n	8028550 <__kernel_rem_pio2f+0x3dc>
 8028634:	ed33 7a01 	vldmdb	r3!, {s14}
 8028638:	3c01      	subs	r4, #1
 802863a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802863e:	e78f      	b.n	8028560 <__kernel_rem_pio2f+0x3ec>
 8028640:	eef1 6a66 	vneg.f32	s13, s13
 8028644:	eeb1 7a47 	vneg.f32	s14, s14
 8028648:	edc8 6a00 	vstr	s13, [r8]
 802864c:	ed88 7a01 	vstr	s14, [r8, #4]
 8028650:	eef1 7a67 	vneg.f32	s15, s15
 8028654:	e790      	b.n	8028578 <__kernel_rem_pio2f+0x404>
 8028656:	bf00      	nop

08028658 <_init>:
 8028658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802865a:	bf00      	nop
 802865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802865e:	bc08      	pop	{r3}
 8028660:	469e      	mov	lr, r3
 8028662:	4770      	bx	lr

08028664 <_fini>:
 8028664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028666:	bf00      	nop
 8028668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802866a:	bc08      	pop	{r3}
 802866c:	469e      	mov	lr, r3
 802866e:	4770      	bx	lr

08028670 <__params_cppm>:
 8028670:	0081 0000 ac2c 0802 0000 0000 0000 0000     ....,...........
 8028680:	0000 0000 0116 0000 ac34 0802 0018 2000     ........4...... 
	...
 8028698:	0116 0000 ac40 0802 001c 2000 0000 0000     ....@...... ....
 80286a8:	0000 0000 0116 0000 ac4c 0802 0024 2000     ........L...$.. 
	...
 80286c0:	0116 0000 ac58 0802 0020 2000 0000 0000     ....X... .. ....
 80286d0:	0000 0000 0116 0000 ac60 0802 0028 2000     ........`...(.. 
	...
 80286e8:	0080 0000 ac68 0802 0000 0000 0000 0000     ....h...........
 80286f8:	0000 0000                                   ....

080286fc <__params_hlCommander>:
 80286fc:	0081 0000 ac7c 0802 0000 0000 0000 0000     ....|...........
 802870c:	0000 0000 0026 0000 ac88 0802 0030 2000     ....&.......0.. 
	...
 8028724:	0026 0000 ac90 0802 0034 2000 0000 0000     &.......4.. ....
 8028734:	0000 0000 0028 0000 ac98 0802 7c30 2000     ....(.......0|. 
	...
 802874c:	0080 0000 aca4 0802 0000 0000 0000 0000     ................
 802875c:	0000 0000                                   ....

08028760 <__params_flightmode>:
 8028760:	0081 0000 ace8 0802 0000 0000 0000 0000     ................
 8028770:	0000 0000 0028 0000 acf4 0802 819d 2000     ....(.......... 
	...
 8028788:	0028 0000 acfc 0802 819e 2000 0000 0000     (.......... ....
 8028798:	0000 0000 0028 0000 ad04 0802 819f 2000     ....(.......... 
	...
 80287b0:	0008 0000 ad0c 0802 003a 2000 0000 0000     ........:.. ....
 80287c0:	0000 0000 0028 0000 ad14 0802 0038 2000     ....(.......8.. 
	...
 80287d8:	0028 0000 ad24 0802 0039 2000 0000 0000     (...$...9.. ....
 80287e8:	0000 0000 0028 0000 ad34 0802 819c 2000     ....(...4...... 
	...
 8028800:	0080 0000 ad40 0802 0000 0000 0000 0000     ....@...........
 8028810:	0000 0000                                   ....

08028814 <__params_locSrv>:
 8028814:	0081 0000 adcc 0802 0000 0000 0000 0000     ................
 8028824:	0000 0000 0028 0000 ae1c 0802 81dc 2000     ....(.......... 
	...
 802883c:	0028 0000 ae30 0802 81dd 2000 0000 0000     (...0...... ....
 802884c:	0000 0000 0026 0000 ae40 0802 003c 2000     ....&...@...<.. 
	...
 8028864:	0026 0000 ae50 0802 0040 2000 0000 0000     &...P...@.. ....
 8028874:	0000 0000 0080 0000 adf0 0802 0000 0000     ................
	...

0802888c <__params_crtpsrv>:
 802888c:	0081 0000 ae80 0802 0000 0000 0000 0000     ................
 802889c:	0000 0000 0009 0000 ae88 0802 81ea 2000     ............... 
	...
 80288b4:	0080 0000 ae94 0802 0000 0000 0000 0000     ................
 80288c4:	0000 0000                                   ....

080288c8 <__params_syslink>:
 80288c8:	0081 0000 b100 0802 0000 0000 0000 0000     ................
 80288d8:	0000 0000 0008 0000 b108 0802 835c 2000     ............\.. 
	...
 80288f0:	0080 0000 b110 0802 0000 0000 0000 0000     ................
 8028900:	0000 0000                                   ....

08028904 <__params_led>:
 8028904:	0081 0000 b1c8 0802 0000 0000 0000 0000     ................
 8028914:	0000 0000 0008 0000 b1cc 0802 83a7 2000     ............... 
 8028924:	49cd 0800 0000 0000 0080 0000 b1d4 0802     .I..............
	...

08028940 <__params_memTst>:
 8028940:	0081 0000 b2e8 0802 0000 0000 0000 0000     ................
 8028950:	0000 0000 0008 0000 b2f0 0802 83c4 2000     ............... 
	...
 8028968:	0080 0000 b2f8 0802 0000 0000 0000 0000     ................
 8028978:	0000 0000                                   ....

0802897c <__params_pm>:
 802897c:	0081 0000 b314 0802 0000 0000 0000 0000     ................
 802898c:	0000 0000 0136 0000 b374 0802 02b8 2000     ....6...t...... 
	...
 80289a4:	0136 0000 b380 0802 02b4 2000 0000 0000     6.......... ....
 80289b4:	0000 0000 0080 0000 b36c 0802 0000 0000     ........l.......
	...

080289cc <__params_powerDist>:
 80289cc:	0081 0000 b394 0802 0000 0000 0000 0000     ................
 80289dc:	0000 0000 013a 0000 b3a0 0802 867c 2000     ....:.......|.. 
	...
 80289f4:	0080 0000 b3ac 0802 0000 0000 0000 0000     ................
 8028a04:	0000 0000                                   ....

08028a08 <__params_quadSysId>:
 8028a08:	0081 0000 b3bc 0802 0000 0000 0000 0000     ................
 8028a18:	0000 0000 0006 0000 b3c8 0802 02c0 2000     ............... 
	...
 8028a30:	0006 0000 b3d8 0802 02c4 2000 0000 0000     ........... ....
 8028a40:	0000 0000 0006 0000 b3e8 0802 02c8 2000     ............... 
	...
 8028a58:	0006 0000 b3f8 0802 02bc 2000 0000 0000     ........... ....
 8028a68:	0000 0000 0080 0000 b404 0802 0000 0000     ................
	...

08028a80 <__params_sound>:
 8028a80:	0081 0000 b460 0802 0000 0000 0000 0000     ....`...........
 8028a90:	0000 0000 0138 0000 b468 0802 8688 2000     ....8...h...... 
	...
 8028aa8:	006a 0000 b470 0802 8680 2000 0000 0000     j...p...... ....
 8028ab8:	0000 0000 0029 0000 b478 0802 02cc 2000     ....)...x...... 
	...
 8028ad0:	0080 0000 b480 0802 0000 0000 0000 0000     ................
 8028ae0:	0000 0000                                   ....

08028ae4 <__params_system>:
 8028ae4:	0081 0000 b4ec 0802 0000 0000 0000 0000     ................
 8028af4:	0000 0000 0008 0000 b4f4 0802 8691 2000     ............... 
 8028b04:	5ba1 0800 0000 0000 0008 0000 b504 0802     .[..............
 8028b14:	8692 2000 5bc1 0800 0000 0000 0080 0000     ... .[..........
 8028b24:	b514 0802 0000 0000 0000 0000 0000 0000     ................

08028b34 <__params_pid_attitude>:
 8028b34:	0081 0000 ba54 0802 0000 0000 0000 0000     ....T...........
 8028b44:	0000 0000 0116 0000 bb24 0802 0428 2000     ........$...(.. 
	...
 8028b5c:	0116 0000 bb2c 0802 042c 2000 0000 0000     ....,...,.. ....
 8028b6c:	0000 0000 0116 0000 bb34 0802 0430 2000     ........4...0.. 
	...
 8028b84:	0116 0000 bb3c 0802 0434 2000 0000 0000     ....<...4.. ....
 8028b94:	0000 0000 0116 0000 bb48 0802 0488 2000     ........H...... 
	...
 8028bac:	0116 0000 bb54 0802 048c 2000 0000 0000     ....T...... ....
 8028bbc:	0000 0000 0116 0000 bb60 0802 0490 2000     ........`...... 
	...
 8028bd4:	0116 0000 bb6c 0802 0494 2000 0000 0000     ....l...... ....
 8028be4:	0000 0000 0116 0000 bb78 0802 04e8 2000     ........x...... 
	...
 8028bfc:	0116 0000 bb80 0802 04ec 2000 0000 0000     ........... ....
 8028c0c:	0000 0000 0116 0000 bb88 0802 04f0 2000     ............... 
	...
 8028c24:	0116 0000 bb90 0802 04f4 2000 0000 0000     ........... ....
 8028c34:	0000 0000 0116 0000 bb98 0802 9360 2000     ............`.. 
	...
 8028c4c:	0110 0000 bba4 0802 935c 2000 0000 0000     ........\.. ....
 8028c5c:	0000 0000 0116 0000 bbb0 0802 02e4 2000     ............... 
	...
 8028c74:	0080 0000 baf4 0802 0000 0000 0000 0000     ................
 8028c84:	0000 0000                                   ....

08028c88 <__params_pid_rate>:
 8028c88:	0081 0000 bb08 0802 0000 0000 0000 0000     ................
 8028c98:	0000 0000 0116 0000 bb24 0802 0308 2000     ........$...... 
	...
 8028cb0:	0116 0000 bb2c 0802 030c 2000 0000 0000     ....,...... ....
 8028cc0:	0000 0000 0116 0000 bb34 0802 0310 2000     ........4...... 
	...
 8028cd8:	0116 0000 bb3c 0802 0314 2000 0000 0000     ....<...... ....
 8028ce8:	0000 0000 0116 0000 bb48 0802 0368 2000     ........H...h.. 
	...
 8028d00:	0116 0000 bb54 0802 036c 2000 0000 0000     ....T...l.. ....
 8028d10:	0000 0000 0116 0000 bb60 0802 0370 2000     ........`...p.. 
	...
 8028d28:	0116 0000 bb6c 0802 0374 2000 0000 0000     ....l...t.. ....
 8028d38:	0000 0000 0116 0000 bb78 0802 03c8 2000     ........x...... 
	...
 8028d50:	0116 0000 bb80 0802 03cc 2000 0000 0000     ........... ....
 8028d60:	0000 0000 0116 0000 bb88 0802 03d0 2000     ............... 
	...
 8028d78:	0116 0000 bb90 0802 03d4 2000 0000 0000     ........... ....
 8028d88:	0000 0000 0110 0000 bbbc 0802 935d 2000     ............].. 
	...
 8028da0:	0116 0000 bbc8 0802 02e8 2000 0000 0000     ........... ....
 8028db0:	0000 0000 0116 0000 bbd4 0802 02ec 2000     ............... 
	...
 8028dc8:	0116 0000 bbe0 0802 02f0 2000 0000 0000     ........... ....
 8028dd8:	0000 0000 0080 0000 bb14 0802 0000 0000     ................
	...

08028df0 <__params_commander>:
 8028df0:	0081 0000 bc48 0802 0000 0000 0000 0000     ....H...........
 8028e00:	0000 0000 0028 0000 bc54 0802 93bc 2000     ....(...T...... 
	...
 8028e18:	0080 0000 bc60 0802 0000 0000 0000 0000     ....`...........
 8028e28:	0000 0000                                   ....

08028e2c <__params_ctrlAtt>:
 8028e2c:	0081 0000 bc70 0802 0000 0000 0000 0000     ....p...........
 8028e3c:	0000 0000 0006 0000 bc78 0802 0534 2000     ........x...4.. 
	...
 8028e54:	0006 0000 bc80 0802 0538 2000 0000 0000     ........8.. ....
 8028e64:	0000 0000 0006 0000 bc88 0802 053c 2000     ............<.. 
	...
 8028e7c:	0006 0000 bc90 0802 0540 2000 0000 0000     ........@.. ....
 8028e8c:	0000 0000 0006 0000 bc98 0802 0544 2000     ............D.. 
	...
 8028ea4:	0006 0000 bca0 0802 0548 2000 0000 0000     ........H.. ....
 8028eb4:	0000 0000 0006 0000 bcb0 0802 054c 2000     ............L.. 
	...
 8028ecc:	0080 0000 bcc0 0802 0000 0000 0000 0000     ................
 8028edc:	0000 0000                                   ....

08028ee0 <__params_ctrlINDI>:
 8028ee0:	0081 0000 bcd0 0802 0000 0000 0000 0000     ................
 8028ef0:	0000 0000 0006 0000 bcdc 0802 0550 2000     ............P.. 
	...
 8028f08:	0006 0000 bcf0 0802 0554 2000 0000 0000     ........T.. ....
 8028f18:	0000 0000 0006 0000 bd04 0802 065c 2000     ............\.. 
	...
 8028f30:	0006 0000 bd0c 0802 0660 2000 0000 0000     ........`.. ....
 8028f40:	0000 0000 0006 0000 bd14 0802 0664 2000     ............d.. 
	...
 8028f58:	0006 0000 bd1c 0802 0668 2000 0000 0000     ........h.. ....
 8028f68:	0000 0000 0006 0000 bd20 0802 066c 2000     ........ ...l.. 
	...
 8028f80:	0006 0000 bd2c 0802 0670 2000 0000 0000     ....,...p.. ....
 8028f90:	0000 0000 0006 0000 bd38 0802 0674 2000     ........8...t.. 
	...
 8028fa8:	0006 0000 bd44 0802 0678 2000 0000 0000     ....D...x.. ....
 8028fb8:	0000 0000 0006 0000 bd50 0802 067c 2000     ........P...|.. 
	...
 8028fd0:	0006 0000 bd5c 0802 0680 2000 0000 0000     ....\...... ....
 8028fe0:	0000 0000 0006 0000 bd68 0802 0684 2000     ........h...... 
	...
 8028ff8:	0006 0000 bd74 0802 0688 2000 0000 0000     ....t...... ....
 8029008:	0000 0000 0006 0000 bd80 0802 068c 2000     ............... 
	...
 8029020:	0006 0000 bd8c 0802 0690 2000 0000 0000     ........... ....
 8029030:	0000 0000 0006 0000 bd98 0802 0694 2000     ............... 
	...
 8029048:	0008 0000 bda8 0802 0558 2000 0000 0000     ........X.. ....
 8029058:	0000 0000 0080 0000 bdb8 0802 0000 0000     ................
	...

08029070 <__params_ctrlMel>:
 8029070:	0081 0000 bee4 0802 0000 0000 0000 0000     ................
 8029080:	0000 0000 0136 0000 beec 0802 06a0 2000     ....6.......... 
	...
 8029098:	0136 0000 bef4 0802 06a4 2000 0000 0000     6.......... ....
 80290a8:	0000 0000 0136 0000 befc 0802 06a8 2000     ....6.......... 
	...
 80290c0:	0116 0000 bf04 0802 06ac 2000 0000 0000     ........... ....
 80290d0:	0000 0000 0136 0000 bf10 0802 06b0 2000     ....6.......... 
	...
 80290e8:	0136 0000 bf18 0802 06b4 2000 0000 0000     6.......... ....
 80290f8:	0000 0000 0136 0000 bf20 0802 06b8 2000     ....6... ...... 
	...
 8029110:	0116 0000 bf28 0802 06bc 2000 0000 0000     ....(...... ....
 8029120:	0000 0000 0136 0000 bf34 0802 0698 2000     ....6...4...... 
	...
 8029138:	0136 0000 bf3c 0802 069c 2000 0000 0000     6...<...... ....
 8029148:	0000 0000 0136 0000 bf48 0802 06c0 2000     ....6...H...... 
	...
 8029160:	0136 0000 bf50 0802 06d0 2000 0000 0000     6...P...... ....
 8029170:	0000 0000 0136 0000 bf58 0802 06c4 2000     ....6...X...... 
	...
 8029188:	0136 0000 bf60 0802 06d4 2000 0000 0000     6...`...... ....
 8029198:	0000 0000 0136 0000 bf68 0802 06c8 2000     ....6...h...... 
	...
 80291b0:	0136 0000 bf70 0802 06d8 2000 0000 0000     6...p...... ....
 80291c0:	0000 0000 0136 0000 bf78 0802 06e0 2000     ....6...x...... 
	...
 80291d8:	0116 0000 bf84 0802 06cc 2000 0000 0000     ........... ....
 80291e8:	0000 0000 0116 0000 bf94 0802 06dc 2000     ............... 
	...
 8029200:	0080 0000 bfa0 0802 0000 0000 0000 0000     ................
 8029210:	0000 0000                                   ....

08029214 <__params_kalman>:
 8029214:	0081 0000 c7b8 0802 0000 0000 0000 0000     ................
 8029224:	0000 0000 0028 0000 c8ac 0802 952c 2000     ....(.......,.. 
	...
 802923c:	0028 0000 c8bc 0802 94bd 2000 0000 0000     (.......... ....
 802924c:	0000 0000 0028 0000 c8c8 0802 94bc 2000     ....(.......... 
	...
 8029264:	0136 0000 c8d4 0802 9544 2000 0000 0000     6.......D.. ....
 8029274:	0000 0000 0136 0000 c8e0 0802 9548 2000     ....6.......H.. 
	...
 802928c:	0136 0000 c8e8 0802 954c 2000 0000 0000     6.......L.. ....
 802929c:	0000 0000 0136 0000 c8f0 0802 9550 2000     ....6.......P.. 
	...
 80292b4:	0136 0000 c8f8 0802 9554 2000 0000 0000     6.......T.. ....
 80292c4:	0000 0000 0136 0000 c900 0802 9558 2000     ....6.......X.. 
	...
 80292dc:	0136 0000 c908 0802 955c 2000 0000 0000     6.......\.. ....
 80292ec:	0000 0000 0136 0000 c91c 0802 9560 2000     ....6.......`.. 
	...
 8029304:	0026 0000 c928 0802 9564 2000 0000 0000     &...(...d.. ....
 8029314:	0000 0000 0026 0000 c934 0802 9568 2000     ....&...4...h.. 
	...
 802932c:	0026 0000 c940 0802 956c 2000 0000 0000     &...@...l.. ....
 802933c:	0000 0000 0026 0000 c94c 0802 9570 2000     ....&...L...p.. 
	...
 8029354:	0080 0000 c87c 0802 0000 0000 0000 0000     ....|...........
 8029364:	0000 0000                                   ....

08029368 <__params_ukf>:
 8029368:	0081 0000 ca30 0802 0000 0000 0000 0000     ....0...........
 8029378:	0000 0000 0008 0000 ca20 0802 08ad 2000     ........ ...... 
	...
 8029390:	0008 0000 cc14 0802 08ac 2000 0000 0000     ........... ....
 80293a0:	0000 0000 0006 0000 cc24 0802 0874 2000     ........$...t.. 
	...
 80293b8:	0006 0000 cc34 0802 0878 2000 0000 0000     ....4...x.. ....
 80293c8:	0000 0000 0006 0000 cc44 0802 087c 2000     ........D...|.. 
	...
 80293e0:	0006 0000 cc54 0802 0880 2000 0000 0000     ....T...... ....
 80293f0:	0000 0000 0006 0000 cc64 0802 0884 2000     ........d...... 
	...
 8029408:	0006 0000 cc74 0802 0888 2000 0000 0000     ....t...... ....
 8029418:	0000 0000 0006 0000 cc84 0802 9654 2000     ............T.. 
	...
 8029430:	0006 0000 cc94 0802 9658 2000 0000 0000     ........X.. ....
 8029440:	0000 0000 0006 0000 cca4 0802 088c 2000     ............... 
	...
 8029458:	0006 0000 ccb4 0802 0890 2000 0000 0000     ........... ....
 8029468:	0000 0000 0006 0000 ccc4 0802 0894 2000     ............... 
	...
 8029480:	0006 0000 ccd0 0802 0898 2000 0000 0000     ........... ....
 8029490:	0000 0000 0006 0000 cce0 0802 089c 2000     ............... 
	...
 80294a8:	0006 0000 ccf0 0802 08a0 2000 0000 0000     ........... ....
 80294b8:	0000 0000 0006 0000 cd00 0802 08a4 2000     ............... 
	...
 80294d0:	0006 0000 cd10 0802 08a8 2000 0000 0000     ........... ....
 80294e0:	0000 0000 0006 0000 cd24 0802 0870 2000     ........$...p.. 
	...
 80294f8:	0080 0000 cc08 0802 0000 0000 0000 0000     ................
 8029508:	0000 0000                                   ....

0802950c <__params_kalman>:
 802950c:	0081 0000 ce10 0802 0000 0000 0000 0000     ................
 802951c:	0000 0000 0026 0000 ce18 0802 0918 2000     ....&.......... 
	...
 8029534:	0026 0000 ce20 0802 091c 2000 0000 0000     &... ...... ....
 8029544:	0000 0000 0080 0000 ce28 0802 0000 0000     ........(.......
	...

0802955c <__params_posCtrlIndi>:
 802955c:	0081 0000 d05c 0802 0000 0000 0000 0000     ....\...........
 802956c:	0000 0000 0006 0000 d068 0802 09e0 2000     ........h...... 
	...
 8029584:	0006 0000 d070 0802 09e4 2000 0000 0000     ....p...... ....
 8029594:	0000 0000 0006 0000 d078 0802 09e8 2000     ........x...... 
	...
 80295ac:	0006 0000 d080 0802 09ec 2000 0000 0000     ........... ....
 80295bc:	0000 0000 0006 0000 d088 0802 09f0 2000     ............... 
	...
 80295d4:	0006 0000 d090 0802 09f4 2000 0000 0000     ........... ....
 80295e4:	0000 0000 0006 0000 d098 0802 09f8 2000     ............... 
	...
 80295fc:	0080 0000 d0a4 0802 0000 0000 0000 0000     ................
 802960c:	0000 0000                                   ....

08029610 <__params_velCtlPid>:
 8029610:	0081 0000 d324 0802 0000 0000 0000 0000     ....$...........
 8029620:	0000 0000 0116 0000 d330 0802 0bdc 2000     ........0...... 
	...
 8029638:	0116 0000 d338 0802 0be0 2000 0000 0000     ....8...... ....
 8029648:	0000 0000 0116 0000 d340 0802 0be4 2000     ........@...... 
	...
 8029660:	0116 0000 d348 0802 0be8 2000 0000 0000     ....H...... ....
 8029670:	0000 0000 0116 0000 d350 0802 0c48 2000     ........P...H.. 
	...
 8029688:	0116 0000 d358 0802 0c4c 2000 0000 0000     ....X...L.. ....
 8029698:	0000 0000 0116 0000 d360 0802 0c50 2000     ........`...P.. 
	...
 80296b0:	0116 0000 d368 0802 0c54 2000 0000 0000     ....h...T.. ....
 80296c0:	0000 0000 0116 0000 d370 0802 0cb4 2000     ........p...... 
	...
 80296d8:	0116 0000 d378 0802 0cb8 2000 0000 0000     ....x...... ....
 80296e8:	0000 0000 0116 0000 d380 0802 0cbc 2000     ............... 
	...
 8029700:	0116 0000 d388 0802 0cc0 2000 0000 0000     ........... ....
 8029710:	0000 0000 0080 0000 d390 0802 0000 0000     ................
	...

08029728 <__params_posCtlPid>:
 8029728:	0081 0000 d3a0 0802 0000 0000 0000 0000     ................
 8029738:	0000 0000 0116 0000 d3ac 0802 0d20 2000     ............ .. 
	...
 8029750:	0116 0000 d3b0 0802 0d24 2000 0000 0000     ........$.. ....
 8029760:	0000 0000 0116 0000 d3b4 0802 0d28 2000     ............(.. 
	...
 8029778:	0116 0000 d3b8 0802 0d2c 2000 0000 0000     ........,.. ....
 8029788:	0000 0000 0116 0000 d3c0 0802 0d8c 2000     ............... 
	...
 80297a0:	0116 0000 d3c4 0802 0d90 2000 0000 0000     ........... ....
 80297b0:	0000 0000 0116 0000 d3c8 0802 0d94 2000     ............... 
	...
 80297c8:	0116 0000 d3cc 0802 0d98 2000 0000 0000     ........... ....
 80297d8:	0000 0000 0116 0000 d3d4 0802 0df8 2000     ............... 
	...
 80297f0:	0116 0000 d3d8 0802 0dfc 2000 0000 0000     ........... ....
 8029800:	0000 0000 0116 0000 d3dc 0802 0e00 2000     ............... 
	...
 8029818:	0116 0000 d3e0 0802 0e04 2000 0000 0000     ........... ....
 8029828:	0000 0000 0119 0000 d3e8 0802 0e50 2000     ............P.. 
	...
 8029840:	0119 0000 d3f4 0802 0e52 2000 0000 0000     ........R.. ....
 8029850:	0000 0000 0116 0000 d400 0802 0b9c 2000     ............... 
	...
 8029868:	0116 0000 d408 0802 0ba0 2000 0000 0000     ........... ....
 8029878:	0000 0000 0116 0000 d410 0802 0ba4 2000     ............... 
	...
 8029890:	0116 0000 d418 0802 0ba8 2000 0000 0000     ........... ....
 80298a0:	0000 0000 0116 0000 d420 0802 0bac 2000     ........ ...... 
	...
 80298b8:	0080 0000 d428 0802 0000 0000 0000 0000     ....(...........
 80298c8:	0000 0000                                   ....

080298cc <__params_posEstAlt>:
 80298cc:	0081 0000 d438 0802 0000 0000 0000 0000     ....8...........
 80298dc:	0000 0000 0136 0000 d474 0802 0e60 2000     ....6...t...`.. 
	...
 80298f4:	0136 0000 d480 0802 0e5c 2000 0000 0000     6.......\.. ....
 8029904:	0000 0000 0116 0000 d48c 0802 0e64 2000     ............d.. 
	...
 802991c:	0116 0000 d498 0802 0e6c 2000 0000 0000     ........l.. ....
 802992c:	0000 0000 0136 0000 d4a4 0802 0e68 2000     ....6.......h.. 
	...
 8029944:	0080 0000 d464 0802 0000 0000 0000 0000     ....d...........
 8029954:	0000 0000                                   ....

08029958 <__params_stabilizer>:
 8029958:	0081 0000 d570 0802 0000 0000 0000 0000     ....p...........
 8029968:	0000 0000 0028 0000 d57c 0802 ac36 2000     ....(...|...6.. 
	...
 8029980:	0080 0000 d584 0802 0000 0000 0000 0000     ................
 8029990:	0000 0000                                   ....

08029994 <__params_system>:
 8029994:	0081 0000 d594 0802 0000 0000 0000 0000     ................
 80299a4:	0000 0000 0020 0000 d59c 0802 ac37 2000     .... .......7.. 
	...
 80299bc:	0080 0000 d5a0 0802 0000 0000 0000 0000     ................
 80299cc:	0000 0000                                   ....

080299d0 <__params_supervisor>:
 80299d0:	0081 0000 d5ac 0802 0000 0000 0000 0000     ................
 80299e0:	0000 0000 0008 0000 d5d0 0802 ac48 2000     ............H.. 
	...
 80299f8:	0080 0000 d5c0 0802 0000 0000 0000 0000     ................
 8029a08:	0000 0000                                   ....

08029a0c <__params_system>:
 8029a0c:	0081 0000 da98 0802 0000 0000 0000 0000     ................
 8029a1c:	0000 0000 0028 0000 daa0 0802 c496 2000     ....(.......... 
	...
 8029a34:	0080 0000 daac 0802 0000 0000 0000 0000     ................
 8029a44:	0000 0000                                   ....

08029a48 <__params_usec>:
 8029a48:	0081 0000 dae0 0802 0000 0000 0000 0000     ................
 8029a58:	0000 0000 0008 0000 dae8 0802 c4cd 2000     ............... 
 8029a68:	5479 0801 0000 0000 0080 0000 daf0 0802     yT..............
	...

08029a84 <__params_firmware>:
 8029a84:	0081 0000 db24 0802 0000 0000 0000 0000     ....$...........
 8029a94:	0000 0000 006a 0000 db30 0802 f094 0802     ....j...0.......
	...
 8029aac:	0069 0000 db3c 0802 f098 0802 0000 0000     i...<...........
 8029abc:	0000 0000 0068 0000 db48 0802 f090 0802     ....h...H.......
	...
 8029ad4:	0080 0000 db54 0802 0000 0000 0000 0000     ....T...........
 8029ae4:	0000 0000                                   ....

08029ae8 <__logs_ext_pos>:
 8029ae8:	0081 0000 ada8 0802 0000 0000 0007 0000     ................
 8029af8:	adb0 0802 81a4 2000 0007 0000 adb4 0802     ....... ........
 8029b08:	81a8 2000 0007 0000 adb8 0802 81ac 2000     ... ........... 
 8029b18:	0080 0000 adbc 0802 0000 0000               ............

08029b24 <__logs_locSrv>:
 8029b24:	0081 0000 adcc 0802 0000 0000 0027 0000     ............'...
 8029b34:	add4 0802 81b8 2000 0027 0000 add8 0802     ....... '.......
 8029b44:	81bc 2000 0027 0000 addc 0802 81c0 2000     ... '.......... 
 8029b54:	0027 0000 ade0 0802 81c4 2000 0027 0000     '.......... '...
 8029b64:	ade4 0802 81c8 2000 0027 0000 ade8 0802     ....... '.......
 8029b74:	81cc 2000 0027 0000 adec 0802 81d0 2000     ... '.......... 
 8029b84:	0080 0000 adf0 0802 0000 0000               ............

08029b90 <__logs_locSrvZ>:
 8029b90:	0081 0000 adfc 0802 0000 0000 0022 0000     ............"...
 8029ba0:	ae04 0802 81e0 2000 0080 0000 ae0c 0802     ....... ........
 8029bb0:	0000 0000                                   ....

08029bb4 <__logs_radio>:
 8029bb4:	0081 0000 af6c 0802 0000 0000 0021 0000     ....l.......!...
 8029bc4:	af74 0802 827d 2000 0021 0000 af7c 0802     t...}.. !...|...
 8029bd4:	827e 2000 0080 0000 af88 0802 0000 0000     ~.. ............

08029be4 <__logs_memTst>:
 8029be4:	0081 0000 b2e8 0802 0000 0000 0003 0000     ................
 8029bf4:	b304 0802 83c0 2000 0080 0000 b2f8 0802     ....... ........
 8029c04:	0000 0000                                   ....

08029c08 <__logs_pm>:
 8029c08:	0081 0000 b314 0802 0000 0000 0027 0000     ............'...
 8029c18:	b318 0802 8424 2000 0002 0000 b320 0802     ....$.. .... ...
 8029c28:	8428 2000 0007 0000 b328 0802 8430 2000     (.. ....(...0.. 
 8029c38:	0002 0000 b330 0802 8434 2000 0007 0000     ....0...4.. ....
 8029c48:	b33c 0802 843c 2000 0007 0000 b344 0802     <...<.. ....D...
 8029c58:	8459 2000 0024 0000 b354 0802 8451 2000     Y.. $...T...Q.. 
 8029c68:	0021 0000 b35c 0802 845d 2000 0080 0000     !...\...].. ....
 8029c78:	b36c 0802 0000 0000                         l.......

08029c80 <__logs_pid_attitude>:
 8029c80:	0081 0000 ba54 0802 0000 0000 0007 0000     ....T...........
 8029c90:	ba64 0802 0438 2000 0007 0000 ba70 0802     d...8.. ....p...
 8029ca0:	043c 2000 0007 0000 ba7c 0802 0440 2000     <.. ....|...@.. 
 8029cb0:	0007 0000 ba88 0802 0444 2000 0007 0000     ........D.. ....
 8029cc0:	ba94 0802 0498 2000 0007 0000 baa0 0802     ....... ........
 8029cd0:	049c 2000 0007 0000 baac 0802 04a0 2000     ... ........... 
 8029ce0:	0007 0000 bab8 0802 04a4 2000 0007 0000     ........... ....
 8029cf0:	bac4 0802 04f8 2000 0007 0000 bad0 0802     ....... ........
 8029d00:	04fc 2000 0007 0000 badc 0802 0500 2000     ... ........... 
 8029d10:	0007 0000 bae8 0802 0504 2000 0080 0000     ........... ....
 8029d20:	baf4 0802 0000 0000                         ........

08029d28 <__logs_pid_rate>:
 8029d28:	0081 0000 bb08 0802 0000 0000 0007 0000     ................
 8029d38:	ba64 0802 0318 2000 0007 0000 ba70 0802     d...... ....p...
 8029d48:	031c 2000 0007 0000 ba7c 0802 0320 2000     ... ....|... .. 
 8029d58:	0007 0000 ba88 0802 0324 2000 0007 0000     ........$.. ....
 8029d68:	ba94 0802 0378 2000 0007 0000 baa0 0802     ....x.. ........
 8029d78:	037c 2000 0007 0000 baac 0802 0380 2000     |.. ........... 
 8029d88:	0007 0000 bab8 0802 0384 2000 0007 0000     ........... ....
 8029d98:	bac4 0802 03d8 2000 0007 0000 bad0 0802     ....... ........
 8029da8:	03dc 2000 0007 0000 badc 0802 03e0 2000     ... ........... 
 8029db8:	0007 0000 bae8 0802 03e4 2000 0080 0000     ........... ....
 8029dc8:	bb14 0802 0000 0000                         ........

08029dd0 <__logs_ctrlINDI>:
 8029dd0:	0081 0000 bcd0 0802 0000 0000 0007 0000     ................
 8029de0:	bdc8 0802 055c 2000 0007 0000 bdd4 0802     ....\.. ........
 8029df0:	0578 2000 0007 0000 bde0 0802 057c 2000     x.. ........|.. 
 8029e00:	0007 0000 bdec 0802 0580 2000 0007 0000     ........... ....
 8029e10:	bdf4 0802 93d8 2000 0007 0000 bdfc 0802     ....... ........
 8029e20:	93d8 2000 0007 0000 be04 0802 93d8 2000     ... ........... 
 8029e30:	0007 0000 be0c 0802 0584 2000 0007 0000     ........... ....
 8029e40:	be18 0802 0588 2000 0007 0000 be24 0802     ....... ....$...
 8029e50:	058c 2000 0007 0000 be30 0802 056c 2000     ... ....0...l.. 
 8029e60:	0007 0000 be38 0802 0570 2000 0007 0000     ....8...p.. ....
 8029e70:	be40 0802 0574 2000 0007 0000 be48 0802     @...t.. ....H...
 8029e80:	0560 2000 0007 0000 be58 0802 0564 2000     `.. ....X...d.. 
 8029e90:	0007 0000 be68 0802 0568 2000 0007 0000     ....h...h.. ....
 8029ea0:	be78 0802 0590 2000 0007 0000 be84 0802     x...... ........
 8029eb0:	0594 2000 0007 0000 be90 0802 0598 2000     ... ........... 
 8029ec0:	0007 0000 be9c 0802 05b4 2000 0007 0000     ........... ....
 8029ed0:	bea4 0802 05d4 2000 0007 0000 beac 0802     ....... ........
 8029ee0:	05f4 2000 0007 0000 beb4 0802 0614 2000     ... ........... 
 8029ef0:	0007 0000 bec0 0802 0634 2000 0007 0000     ........4.. ....
 8029f00:	becc 0802 0654 2000 0007 0000 bed8 0802     ....T.. ........
 8029f10:	93cc 2000 0007 0000 bedc 0802 93d0 2000     ... ........... 
 8029f20:	0007 0000 bee0 0802 93d4 2000 0080 0000     ........... ....
 8029f30:	bdb8 0802 0000 0000                         ........

08029f38 <__logs_ctrlMel>:
 8029f38:	0081 0000 bee4 0802 0000 0000 0007 0000     ................
 8029f48:	bfb0 0802 0718 2000 0007 0000 bfbc 0802     ....... ........
 8029f58:	071c 2000 0007 0000 bfc8 0802 0720 2000     ... ........ .. 
 8029f68:	0007 0000 bfd4 0802 0724 2000 0007 0000     ........$.. ....
 8029f78:	bfdc 0802 0728 2000 0007 0000 bfe4 0802     ....(.. ........
 8029f88:	072c 2000 0007 0000 bfec 0802 0730 2000     ,.. ........0.. 
 8029f98:	0007 0000 bff4 0802 0734 2000 0007 0000     ........4.. ....
 8029fa8:	bffc 0802 070c 2000 0007 0000 c000 0802     ....... ........
 8029fb8:	0710 2000 0007 0000 c004 0802 0714 2000     ... ........... 
 8029fc8:	0007 0000 c008 0802 06e4 2000 0007 0000     ........... ....
 8029fd8:	c010 0802 06e8 2000 0007 0000 c018 0802     ....... ........
 8029fe8:	06ec 2000 0080 0000 bfa0 0802 0000 0000     ... ............

08029ff8 <__logs_controller>:
 8029ff8:	0081 0000 c020 0802 0000 0000 0007 0000     .... ...........
 802a008:	c02c 0802 9408 2000 0007 0000 c038 0802     ,...... ....8...
 802a018:	940c 2000 0007 0000 c044 0802 9410 2000     ... ....D...... 
 802a028:	0007 0000 c050 0802 9414 2000 0007 0000     ....P...... ....
 802a038:	c058 0802 9418 2000 0007 0000 c060 0802     X...... ....`...
 802a048:	941c 2000 0007 0000 c068 0802 9420 2000     ... ....h... .. 
 802a058:	0007 0000 c070 0802 9424 2000 0007 0000     ....p...$.. ....
 802a068:	c078 0802 9404 2000 0007 0000 c088 0802     x...... ........
 802a078:	93e8 2000 0007 0000 c090 0802 93ec 2000     ... ........... 
 802a088:	0007 0000 c098 0802 93f0 2000 0007 0000     ........... ....
 802a098:	c09c 0802 93f8 2000 0007 0000 c0a8 0802     ....... ........
 802a0a8:	93fc 2000 0007 0000 c0b4 0802 9400 2000     ... ........... 
 802a0b8:	0080 0000 c0bc 0802 0000 0000               ............

0802a0c4 <__logs_estimator>:
 802a0c4:	0081 0000 c6f8 0802 0000 0000 0047 0000     ............G...
 802a0d4:	c704 0802 073c 2000 0047 0000 c70c 0802     ....<.. G.......
 802a0e4:	0758 2000 0080 0000 c714 0802 0000 0000     X.. ............

0802a0f4 <__logs_kalman>:
 802a0f4:	0081 0000 c7b8 0802 0000 0000 0007 0000     ................
 802a104:	c7c0 0802 38e4 2000 0007 0000 c7c8 0802     .....8. ........
 802a114:	38e8 2000 0007 0000 c7d0 0802 38ec 2000     .8. .........8. 
 802a124:	0007 0000 c7d8 0802 38f0 2000 0007 0000     .........8. ....
 802a134:	c7e0 0802 38f4 2000 0007 0000 c7e8 0802     .....8. ........
 802a144:	38f8 2000 0007 0000 c7f0 0802 38fc 2000     .8. .........8. 
 802a154:	0007 0000 c7f8 0802 3900 2000 0007 0000     .........9. ....
 802a164:	c800 0802 3904 2000 0007 0000 c808 0802     .....9. ........
 802a174:	393c 2000 0007 0000 c810 0802 3964 2000     <9. ........d9. 
 802a184:	0007 0000 c818 0802 398c 2000 0007 0000     .........9. ....
 802a194:	c820 0802 39b4 2000 0007 0000 c828 0802      ....9. ....(...
 802a1a4:	39dc 2000 0007 0000 c830 0802 3a04 2000     .9. ....0....:. 
 802a1b4:	0007 0000 c838 0802 3a2c 2000 0007 0000     ....8...,:. ....
 802a1c4:	c840 0802 3a54 2000 0007 0000 c848 0802     @...T:. ....H...
 802a1d4:	3a7c 2000 0007 0000 c850 0802 3908 2000     |:. ....P....9. 
 802a1e4:	0007 0000 c854 0802 390c 2000 0007 0000     ....T....9. ....
 802a1f4:	c858 0802 3910 2000 0007 0000 c85c 0802     X....9. ....\...
 802a204:	3914 2000 0047 0000 c860 0802 0774 2000     .9. G...`...t.. 
 802a214:	0047 0000 c86c 0802 0790 2000 0047 0000     G...l...... G...
 802a224:	c874 0802 07ac 2000 0080 0000 c87c 0802     t...... ....|...
 802a234:	0000 0000                                   ....

0802a238 <__logs_outlierf>:
 802a238:	0081 0000 c888 0802 0000 0000 0006 0000     ................
 802a248:	c894 0802 9528 2000 0080 0000 c89c 0802     ....(.. ........
 802a258:	0000 0000                                   ....

0802a25c <__logs_nav_ukf_states>:
 802a25c:	0081 0000 ca58 0802 0000 0000 0080 0000     ....X...........
 802a26c:	ca68 0802 0000 0000                         h.......

0802a274 <__logs_navFilter>:
 802a274:	0081 0000 ca7c 0802 0000 0000 0007 0000     ....|...........
 802a284:	ca88 0802 95e4 2000 0007 0000 ca90 0802     ....... ........
 802a294:	95e8 2000 0007 0000 ca98 0802 95ec 2000     ... ........... 
 802a2a4:	0007 0000 caa0 0802 9670 2000 0007 0000     ........p.. ....
 802a2b4:	caa8 0802 9674 2000 0007 0000 cab0 0802     ....t.. ........
 802a2c4:	9678 2000 0007 0000 cab8 0802 967c 2000     x.. ........|.. 
 802a2d4:	0007 0000 cac0 0802 9680 2000 0007 0000     ........... ....
 802a2e4:	cac8 0802 9684 2000 0007 0000 cad0 0802     ....... ........
 802a2f4:	9688 2000 0007 0000 cad4 0802 968c 2000     ... ........... 
 802a304:	0007 0000 cadc 0802 9690 2000 0007 0000     ........... ....
 802a314:	cae0 0802 96b0 2000 0007 0000 cae4 0802     ....... ........
 802a324:	96b4 2000 0007 0000 cae8 0802 96b8 2000     ... ........... 
 802a334:	0003 0000 caf0 0802 966c 2000 0007 0000     ........l.. ....
 802a344:	cafc 0802 960c 2000 0007 0000 cb04 0802     ....... ........
 802a354:	964c 2000 0001 0000 cb14 0802 9650 2000     L.. ........P.. 
 802a364:	0080 0000 cb20 0802 0000 0000               .... .......

0802a370 <__logs_sensorFilter>:
 802a370:	0081 0000 cb30 0802 0000 0000 0007 0000     ....0...........
 802a380:	cb40 0802 969c 2000 0007 0000 cb48 0802     @...... ....H...
 802a390:	96a0 2000 0007 0000 cb50 0802 9694 2000     ... ....P...... 
 802a3a0:	0007 0000 cb5c 0802 9698 2000 0007 0000     ....\...... ....
 802a3b0:	cb68 0802 96a4 2000 0007 0000 cb74 0802     h...... ....t...
 802a3c0:	96a8 2000 0007 0000 cb80 0802 96ac 2000     ... ........... 
 802a3d0:	0007 0000 cb8c 0802 9660 2000 0007 0000     ........`.. ....
 802a3e0:	cb9c 0802 9664 2000 0007 0000 cbac 0802     ....d.. ........
 802a3f0:	965c 2000 0007 0000 cbb8 0802 9668 2000     \.. ........h.. 
 802a400:	0080 0000 cbc0 0802 0000 0000               ............

0802a40c <__logs_ukf>:
 802a40c:	0081 0000 ca30 0802 0000 0000 0047 0000     ....0.......G...
 802a41c:	cbd4 0802 07c8 2000 0047 0000 cbe0 0802     ....... G.......
 802a42c:	07e4 2000 0047 0000 cbe8 0802 0800 2000     ... G.......... 
 802a43c:	0047 0000 cbf0 0802 081c 2000 0047 0000     G.......... G...
 802a44c:	cbf8 0802 0838 2000 0047 0000 cc00 0802     ....8.. G.......
 802a45c:	0854 2000 0080 0000 cc08 0802 0000 0000     T.. ............

0802a46c <__logs_kalman_pred>:
 802a46c:	0081 0000 cf1c 0802 0000 0000 0007 0000     ................
 802a47c:	cf28 0802 a1b4 2000 0007 0000 cf30 0802     (...... ....0...
 802a48c:	a1b8 2000 0007 0000 cf38 0802 a1bc 2000     ... ....8...... 
 802a49c:	0007 0000 cf40 0802 a1c0 2000 0080 0000     ....@...... ....
 802a4ac:	cf48 0802 0000 0000                         H.......

0802a4b4 <__logs_posCtrlIndi>:
 802a4b4:	0081 0000 d05c 0802 0000 0000 0007 0000     ....\...........
 802a4c4:	d0b8 0802 ab84 2000 0007 0000 d0c4 0802     ....... ........
 802a4d4:	ab88 2000 0007 0000 d0d0 0802 ab8c 2000     ... ........... 
 802a4e4:	0007 0000 d0dc 0802 ab78 2000 0007 0000     ........x.. ....
 802a4f4:	d0e4 0802 ab7c 2000 0007 0000 d0ec 0802     ....|.. ........
 802a504:	ab80 2000 0007 0000 d0f4 0802 ab90 2000     ... ........... 
 802a514:	0007 0000 d100 0802 ab94 2000 0007 0000     ........... ....
 802a524:	d10c 0802 ab98 2000 0007 0000 d118 0802     ....... ........
 802a534:	0b60 2000 0007 0000 d124 0802 0b64 2000     `.. ....$...d.. 
 802a544:	0007 0000 d130 0802 0b68 2000 0007 0000     ....0...h.. ....
 802a554:	d13c 0802 0b6c 2000 0007 0000 d148 0802     <...l.. ....H...
 802a564:	0b70 2000 0007 0000 d154 0802 0b74 2000     p.. ....T...t.. 
 802a574:	0007 0000 d160 0802 0b24 2000 0007 0000     ....`...$.. ....
 802a584:	d16c 0802 0b28 2000 0007 0000 d178 0802     l...(.. ....x...
 802a594:	0b2c 2000 0007 0000 d184 0802 0b3c 2000     ,.. ........<.. 
 802a5a4:	0007 0000 d18c 0802 0b40 2000 0007 0000     ........@.. ....
 802a5b4:	d194 0802 0b44 2000 0007 0000 d19c 0802     ....D.. ........
 802a5c4:	0b48 2000 0007 0000 d1a4 0802 0b4c 2000     H.. ........L.. 
 802a5d4:	0007 0000 d1ac 0802 0b50 2000 0007 0000     ........P.. ....
 802a5e4:	d1b4 0802 0b54 2000 0007 0000 d1bc 0802     ....T.. ........
 802a5f4:	0b58 2000 0007 0000 d1c4 0802 0b5c 2000     X.. ........\.. 
 802a604:	0007 0000 d1cc 0802 0b30 2000 0007 0000     ........0.. ....
 802a614:	d1d8 0802 0b34 2000 0007 0000 d1e4 0802     ....4.. ........
 802a624:	0b38 2000 0007 0000 d1f0 0802 0b84 2000     8.. ........... 
 802a634:	0007 0000 d1fc 0802 0b88 2000 0007 0000     ........... ....
 802a644:	d208 0802 0b8c 2000 0007 0000 d210 0802     ....... ........
 802a654:	0b90 2000 0007 0000 d218 0802 0b94 2000     ... ........... 
 802a664:	0007 0000 d224 0802 0b98 2000 0007 0000     ....$...... ....
 802a674:	d234 0802 0b78 2000 0007 0000 d23c 0802     4...x.. ....<...
 802a684:	0b7c 2000 0080 0000 d0a4 0802 0000 0000     |.. ............

0802a694 <__logs_posCtl>:
 802a694:	0081 0000 d248 0802 0000 0000 0007 0000     ....H...........
 802a6a4:	d250 0802 0bc8 2000 0007 0000 d25c 0802     P...... ....\...
 802a6b4:	0c34 2000 0007 0000 d268 0802 0ca0 2000     4.. ....h...... 
 802a6c4:	0007 0000 d274 0802 0d0c 2000 0007 0000     ....t...... ....
 802a6d4:	d27c 0802 0d78 2000 0007 0000 d284 0802     |...x.. ........
 802a6e4:	0de4 2000 0007 0000 d28c 0802 aba4 2000     ... ........... 
 802a6f4:	0007 0000 d294 0802 aba8 2000 0007 0000     ........... ....
 802a704:	d29c 0802 ab9c 2000 0007 0000 d2a4 0802     ....... ........
 802a714:	aba0 2000 0007 0000 d2ac 0802 0d30 2000     ... ........0.. 
 802a724:	0007 0000 d2b0 0802 0d34 2000 0007 0000     ........4.. ....
 802a734:	d2b4 0802 0d38 2000 0007 0000 d2b8 0802     ....8.. ........
 802a744:	0d3c 2000 0007 0000 d2bc 0802 0d9c 2000     <.. ........... 
 802a754:	0007 0000 d2c0 0802 0da0 2000 0007 0000     ........... ....
 802a764:	d2c4 0802 0da4 2000 0007 0000 d2c8 0802     ....... ........
 802a774:	0da8 2000 0007 0000 d2cc 0802 0e08 2000     ... ........... 
 802a784:	0007 0000 d2d0 0802 0e0c 2000 0007 0000     ........... ....
 802a794:	d2d4 0802 0e10 2000 0007 0000 d2d8 0802     ....... ........
 802a7a4:	0e14 2000 0007 0000 d2dc 0802 0bec 2000     ... ........... 
 802a7b4:	0007 0000 d2e0 0802 0bf0 2000 0007 0000     ........... ....
 802a7c4:	d2e4 0802 0bf4 2000 0007 0000 d2e8 0802     ....... ........
 802a7d4:	0bf8 2000 0007 0000 d2f0 0802 0c58 2000     ... ........X.. 
 802a7e4:	0007 0000 d2f4 0802 0c5c 2000 0007 0000     ........\.. ....
 802a7f4:	d2f8 0802 0c60 2000 0007 0000 d2fc 0802     ....`.. ........
 802a804:	0c64 2000 0007 0000 d304 0802 0cc4 2000     d.. ........... 
 802a814:	0007 0000 d308 0802 0cc8 2000 0007 0000     ........... ....
 802a824:	d30c 0802 0ccc 2000 0007 0000 d310 0802     ....... ........
 802a834:	0cd0 2000 0080 0000 d318 0802 0000 0000     ... ............

0802a844 <__logs_posEstAlt>:
 802a844:	0081 0000 d438 0802 0000 0000 0007 0000     ....8...........
 802a854:	d444 0802 0e54 2000 0007 0000 d450 0802     D...T.. ....P...
 802a864:	0e70 2000 0007 0000 d458 0802 0e58 2000     p.. ....X...X.. 
 802a874:	0080 0000 d464 0802 0000 0000               ....d.......

0802a880 <__logs_sys>:
 802a880:	0081 0000 d540 0802 0000 0000 0021 0000     ....@.......!...
 802a890:	d544 0802 ac30 2000 0021 0000 d54c 0802     D...0.. !...L...
 802a8a0:	ac31 2000 0021 0000 d558 0802 ac32 2000     1.. !...X...2.. 
 802a8b0:	0080 0000 d564 0802 0000 0000               ....d.......

0802a8bc <__logs_supervisor>:
 802a8bc:	0081 0000 d5ac 0802 0000 0000 0002 0000     ................
 802a8cc:	d5b8 0802 ac34 2000 0080 0000 d5c0 0802     ....4.. ........
 802a8dc:	0000 0000                                   ....

0802a8e0 <eventTrigger_estTDOA>:
 802a8e0:	c5b4 0802 efe8 0802 0003 0000 9440 2000     ............@.. 
 802a8f0:	0006 0000                                   ....

0802a8f4 <eventTrigger_estPosition>:
 802a8f4:	c5c4 0802 f000 0802 0001 0000 9448 2000     ............H.. 
 802a904:	0001 0000                                   ....

0802a908 <eventTrigger_estPose>:
 802a908:	c5d0 0802 0000 0000 0000 0000 0000 0000     ................
 802a918:	0000 0000                                   ....

0802a91c <eventTrigger_estDistance>:
 802a91c:	c5e8 0802 f008 0802 0002 0000 944c 2000     ............L.. 
 802a92c:	0005 0000                                   ....

0802a930 <eventTrigger_estTOF>:
 802a930:	c5f4 0802 0000 0000 0000 0000 0000 0000     ................
 802a940:	0000 0000                                   ....

0802a944 <eventTrigger_estAbsoluteHeight>:
 802a944:	c5fc 0802 0000 0000 0000 0000 0000 0000     ................
 802a954:	0000 0000                                   ....

0802a958 <eventTrigger_estFlow>:
 802a958:	c610 0802 0000 0000 0000 0000 0000 0000     ................
 802a968:	0000 0000                                   ....

0802a96c <eventTrigger_estYawError>:
 802a96c:	c624 0802 f018 0802 0001 0000 9454 2000     $...........T.. 
 802a97c:	0004 0000                                   ....

0802a980 <eventTrigger_estSweepAngle>:
 802a980:	c664 0802 f020 0802 0005 0000 9458 2000     d... .......X.. 
 802a990:	000b 0000                                   ....

0802a994 <eventTrigger_estGyroscope>:
 802a994:	c674 0802 0000 0000 0000 0000 0000 0000     t...............
 802a9a4:	0000 0000                                   ....

0802a9a8 <eventTrigger_estAcceleration>:
 802a9a8:	c684 0802 0000 0000 0000 0000 0000 0000     ................
 802a9b8:	0000 0000                                   ....

0802a9bc <eventTrigger_estBarometer>:
 802a9bc:	c694 0802 0000 0000 0000 0000 0000 0000     ................
 802a9cc:	0000 0000                                   ....
