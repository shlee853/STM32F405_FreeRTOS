
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  0800b918  0800b918  0001b918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c70c  0800c70c  000208c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c70c  0800c70c  0001c70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c714  0800c714  000208c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c718  0800c718  0001c718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800c71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00000608  20000290  0800c9ac  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20000898  0800cfb4  00020898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  000208c0  2**0
                  CONTENTS
 12 .bss          00005830  200008c0  200008c0  000208c0  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200060f0  200060f0  000208c0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000208c0  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  000208f0  2**0
                  CONTENTS, READONLY
 16 .debug_info   0001f7c8  00000000  00000000  00020933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005554  00000000  00000000  000400fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001a48  00000000  00000000  00045650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000140e  00000000  00000000  00047098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000b76b  00000000  00000000  000484a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00020080  00000000  00000000  00053c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e19d5  00000000  00000000  00073c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00007cec  00000000  00000000  00155668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  0015d354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200008c0 	.word	0x200008c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b900 	.word	0x0800b900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200008c4 	.word	0x200008c4
 80001cc:	0800b900 	.word	0x0800b900

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f023 0210 	bic.w	r2, r3, #16
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b02      	cmp	r3, #2
 800108a:	d101      	bne.n	8001090 <LL_SPI_IsActiveFlag_TXE+0x18>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	330c      	adds	r3, #12
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	330c      	adds	r3, #12
 80010ca:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800

08001110 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 800111a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800

08001140 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	619a      	str	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f008 fd0c 	bl	8009ba8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80011a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011a4:	f7ff ffb4 	bl	8001110 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ff99 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011ae:	2004      	movs	r0, #4
 80011b0:	f7ff ff96 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011b4:	23e0      	movs	r3, #224	; 0xe0
 80011b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011b8:	2302      	movs	r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011c8:	2305      	movs	r3, #5
 80011ca:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80011d2:	f004 fc7a 	bl	8005aca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011de:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80011f2:	2310      	movs	r3, #16
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80011fe:	230a      	movs	r3, #10
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4619      	mov	r1, r3
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800120a:	f004 fd02 	bl	8005c12 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800120e:	2100      	movs	r1, #0
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001212:	f7ff ff0b 	bl	800102c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001216:	2110      	movs	r1, #16
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800121a:	f7ff ff9f 	bl	800115c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800121e:	2310      	movs	r3, #16
 8001220:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001238:	f004 fc47 	bl	8005aca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800123c:	2310      	movs	r3, #16
 800123e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800124e:	f004 fc3c 	bl	8005aca <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001254:	f7ff feda 	bl	800100c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001258:	2110      	movs	r1, #16
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800125c:	f7ff ff70 	bl	8001140 <LL_GPIO_SetOutputPin>
}
 8001260:	bf00      	nop
 8001262:	3740      	adds	r7, #64	; 0x40
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000
 800126c:	40013000 	.word	0x40013000
 8001270:	40020800 	.word	0x40020800

08001274 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800127e:	bf00      	nop
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <SPI1_SendByte+0x40>)
 8001282:	f7ff fef9 	bl	8001078 <LL_SPI_IsActiveFlag_TXE>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f9      	beq.n	8001280 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4619      	mov	r1, r3
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <SPI1_SendByte+0x40>)
 8001292:	f7ff ff12 	bl	80010ba <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <SPI1_SendByte+0x40>)
 800129a:	f7ff feda 	bl	8001052 <LL_SPI_IsActiveFlag_RXNE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <SPI1_SendByte+0x40>)
 80012a6:	f7ff fefa 	bl	800109e <LL_SPI_ReceiveData8>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40013000 	.word	0x40013000

080012b8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80012c2:	2110      	movs	r1, #16
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <ICM20602_Readbyte+0x3c>)
 80012c6:	f7ff ff49 	bl	800115c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffce 	bl	8001274 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffcb 	bl	8001274 <SPI1_SendByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80012e2:	2110      	movs	r1, #16
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <ICM20602_Readbyte+0x3c>)
 80012e6:	f7ff ff2b 	bl	8001140 <LL_GPIO_SetOutputPin>
	
	return val;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020000 	.word	0x40020000

080012f8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001308:	2110      	movs	r1, #16
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <ICM20602_Writebyte+0x40>)
 800130c:	f7ff ff26 	bl	800115c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffab 	bl	8001274 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffa7 	bl	8001274 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001326:	2110      	movs	r1, #16
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <ICM20602_Writebyte+0x40>)
 800132a:	f7ff ff09 	bl	8001140 <LL_GPIO_SetOutputPin>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020000 	.word	0x40020000

0800133c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001358:	f7ff ff10 	bl	800117c <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 800135c:	4934      	ldr	r1, [pc, #208]	; (8001430 <ICM20602_Initialization+0xf4>)
 800135e:	4835      	ldr	r0, [pc, #212]	; (8001434 <ICM20602_Initialization+0xf8>)
 8001360:	f001 f862 	bl	8002428 <eprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001364:	2075      	movs	r0, #117	; 0x75
 8001366:	f7ff ffa7 	bl	80012b8 <ICM20602_Readbyte>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d106      	bne.n	8001382 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	461a      	mov	r2, r3
 8001378:	492f      	ldr	r1, [pc, #188]	; (8001438 <ICM20602_Initialization+0xfc>)
 800137a:	482e      	ldr	r0, [pc, #184]	; (8001434 <ICM20602_Initialization+0xf8>)
 800137c:	f001 f854 	bl	8002428 <eprintf>
 8001380:	e012      	b.n	80013a8 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d00f      	beq.n	80013a8 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001388:	2075      	movs	r0, #117	; 0x75
 800138a:	f7ff ff95 	bl	80012b8 <ICM20602_Readbyte>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b12      	cmp	r3, #18
 8001396:	d007      	beq.n	80013a8 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	2312      	movs	r3, #18
 800139c:	4927      	ldr	r1, [pc, #156]	; (800143c <ICM20602_Initialization+0x100>)
 800139e:	4825      	ldr	r0, [pc, #148]	; (8001434 <ICM20602_Initialization+0xf8>)
 80013a0:	f001 f842 	bl	8002428 <eprintf>
			return 1; //ERROR
 80013a4:	2301      	movs	r3, #1
 80013a6:	e03f      	b.n	8001428 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	206b      	movs	r0, #107	; 0x6b
 80013ac:	f7ff ffa4 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f001 ffbd 	bl	8003330 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80013b6:	2101      	movs	r1, #1
 80013b8:	206b      	movs	r0, #107	; 0x6b
 80013ba:	f7ff ff9d 	bl	80012f8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);;
 80013be:	2032      	movs	r0, #50	; 0x32
 80013c0:	f001 ffb6 	bl	8003330 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80013c4:	2100      	movs	r1, #0
 80013c6:	206c      	movs	r0, #108	; 0x6c
 80013c8:	f7ff ff96 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80013cc:	2032      	movs	r0, #50	; 0x32
 80013ce:	f001 ffaf 	bl	8003330 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2019      	movs	r0, #25
 80013d6:	f7ff ff8f 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80013da:	2032      	movs	r0, #50	; 0x32
 80013dc:	f001 ffa8 	bl	8003330 <HAL_Delay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80013e0:	2105      	movs	r1, #5
 80013e2:	201a      	movs	r0, #26
 80013e4:	f7ff ff88 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f001 ffa1 	bl	8003330 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80013ee:	2118      	movs	r1, #24
 80013f0:	201b      	movs	r0, #27
 80013f2:	f7ff ff81 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 80013f6:	2032      	movs	r0, #50	; 0x32
 80013f8:	f001 ff9a 	bl	8003330 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80013fc:	2118      	movs	r1, #24
 80013fe:	201c      	movs	r0, #28
 8001400:	f7ff ff7a 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 8001404:	2032      	movs	r0, #50	; 0x32
 8001406:	f001 ff93 	bl	8003330 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800140a:	2103      	movs	r1, #3
 800140c:	201d      	movs	r0, #29
 800140e:	f7ff ff73 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 8001412:	2032      	movs	r0, #50	; 0x32
 8001414:	f001 ff8c 	bl	8003330 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001418:	2101      	movs	r1, #1
 800141a:	2038      	movs	r0, #56	; 0x38
 800141c:	f7ff ff6c 	bl	80012f8 <ICM20602_Writebyte>
	HAL_Delay(50);;
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f001 ff85 	bl	8003330 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	0800b918 	.word	0x0800b918
 8001434:	080026e1 	.word	0x080026e1
 8001438:	0800b930 	.word	0x0800b930
 800143c:	0800b954 	.word	0x0800b954

08001440 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    __asm volatile (
 800144a:	680a      	ldr	r2, [r1, #0]
 800144c:	f382 8808 	msr	MSP, r2
 8001450:	684a      	ldr	r2, [r1, #4]
 8001452:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001454:	e7fe      	b.n	8001454 <branch_to_bootloader+0x14>
	...

08001458 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800145e:	491d      	ldr	r1, [pc, #116]	; (80014d4 <check_enter_bootloader+0x7c>)
 8001460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001464:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001468:	4c1a      	ldr	r4, [pc, #104]	; (80014d4 <check_enter_bootloader+0x7c>)
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8001476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800147a:	f04f 0000 	mov.w	r0, #0
 800147e:	f04f 0100 	mov.w	r1, #0
 8001482:	0028      	movs	r0, r5
 8001484:	2100      	movs	r1, #0
 8001486:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800148a:	2300      	movs	r3, #0
 800148c:	4912      	ldr	r1, [pc, #72]	; (80014d8 <check_enter_bootloader+0x80>)
 800148e:	4411      	add	r1, r2
 8001490:	430b      	orrs	r3, r1
 8001492:	d11a      	bne.n	80014ca <check_enter_bootloader+0x72>
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <check_enter_bootloader+0x84>)
 8001496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d014      	beq.n	80014ca <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <check_enter_bootloader+0x88>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 80014a6:	683c      	ldr	r4, [r7, #0]
 80014a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	000a      	movs	r2, r1
 80014b6:	2300      	movs	r3, #0
 80014b8:	4613      	mov	r3, r2
 80014ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80014be:	f023 030f 	bic.w	r3, r3, #15
 80014c2:	4619      	mov	r1, r3
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff ffbb 	bl	8001440 <branch_to_bootloader>
    }
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2001c000 	.word	0x2001c000
 80014d8:	fffffa5b 	.word	0xfffffa5b
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800

080014e4 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d832      	bhi.n	8001560 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <ledSetForce+0x84>)
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10d      	bne.n	8001522 <ledSetForce+0x3e>
  {
    value = !value;
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	71bb      	strb	r3, [r7, #6]
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00d      	beq.n	8001544 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <ledSetForce+0x88>)
 800152c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <ledSetForce+0x8c>)
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001538:	b29b      	uxth	r3, r3
 800153a:	2201      	movs	r2, #1
 800153c:	4619      	mov	r1, r3
 800153e:	f002 fa5b 	bl	80039f8 <HAL_GPIO_WritePin>
 8001542:	e00e      	b.n	8001562 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <ledSetForce+0x88>)
 8001548:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <ledSetForce+0x8c>)
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	b29b      	uxth	r3, r3
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	f002 fa4d 	bl	80039f8 <HAL_GPIO_WritePin>
 800155e:	e000      	b.n	8001562 <ledSetForce+0x7e>
    return;
 8001560:	bf00      	nop
    }

//  }

}
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000030 	.word	0x20000030
 800156c:	20000000 	.word	0x20000000
 8001570:	20000018 	.word	0x20000018

08001574 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <ledInit+0xd0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d15b      	bne.n	800163a <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <ledInit+0xd4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <ledInit+0xd4>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <ledInit+0xd4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <ledInit+0xd4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <ledInit+0xd4>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <ledInit+0xd4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e02a      	b.n	8001626 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <ledInit+0xd8>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <ledInit+0xdc>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	f002 fa07 	bl	80039f8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <ledInit+0xdc>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015f8:	2301      	movs	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <ledInit+0xd8>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f856 	bl	80036c0 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f81c 	bl	8001658 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b05      	cmp	r3, #5
 800162a:	ddd1      	ble.n	80015d0 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <ledInit+0xe0>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <ledInit+0xd0>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	e000      	b.n	800163c <ledInit+0xc8>
    return;
 800163a:	bf00      	nop
}
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200008dc 	.word	0x200008dc
 8001648:	40023800 	.word	0x40023800
 800164c:	20000000 	.word	0x20000000
 8001650:	20000018 	.word	0x20000018
 8001654:	200008e6 	.word	0x200008e6

08001658 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d904      	bls.n	8001678 <ledSet+0x20>
 800166e:	22e4      	movs	r2, #228	; 0xe4
 8001670:	490a      	ldr	r1, [pc, #40]	; (800169c <ledSet+0x44>)
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <ledSet+0x48>)
 8001674:	f000 fa5a 	bl	8001b2c <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <ledSet+0x4c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001680:	79ba      	ldrb	r2, [r7, #6]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff2c 	bl	80014e4 <ledSetForce>
  }

  ledLastState[led] = value;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	79b9      	ldrb	r1, [r7, #6]
 8001690:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <ledSet+0x50>)
 8001692:	54d1      	strb	r1, [r2, r3]
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800b980 	.word	0x0800b980
 80016a0:	0800b99c 	.word	0x0800b99c
 80016a4:	200008e6 	.word	0x200008e6
 80016a8:	200008e0 	.word	0x200008e0

080016ac <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff ffd0 	bl	8001658 <ledSet>
  ledSet(LED_GREEN_R, 0);
 80016b8:	2100      	movs	r1, #0
 80016ba:	2003      	movs	r0, #3
 80016bc:	f7ff ffcc 	bl	8001658 <ledSet>
  ledSet(LED_RED_L, 1);
 80016c0:	2101      	movs	r1, #1
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7ff ffc8 	bl	8001658 <ledSet>
  ledSet(LED_RED_R, 1);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2004      	movs	r0, #4
 80016cc:	f7ff ffc4 	bl	8001658 <ledSet>
  ledSet(LED_BLUE_L, 0);
 80016d0:	2100      	movs	r1, #0
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff ffc0 	bl	8001658 <ledSet>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <systemLaunch+0x28>)
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <systemLaunch+0x2c>)
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2302      	movs	r3, #2
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	4905      	ldr	r1, [pc, #20]	; (800170c <systemLaunch+0x30>)
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <systemLaunch+0x34>)
 80016fa:	f005 fa67 	bl	8006bcc <xTaskCreateStatic>
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000290 	.word	0x20000290
 8001708:	200008f0 	.word	0x200008f0
 800170c:	0800b9c4 	.word	0x0800b9c4
 8001710:	08001715 	.word	0x08001715

08001714 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  bool pass = true;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]

  uint32_t ld = SysTick->LOAD;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <systemTask+0x78>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <systemTask+0x7c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <systemTask+0x80>)
 800172c:	6013      	str	r3, [r2, #0]
  delay_us(10);	// 1ms
 800172e:	200a      	movs	r0, #10
 8001730:	f001 fb2e 	bl	8002d90 <delay_us>
  time2 = DWT->CYCCNT;
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <systemTask+0x7c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <systemTask+0x84>)
 800173a:	6013      	str	r3, [r2, #0]
  printf("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <systemTask+0x84>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <systemTask+0x80>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800179c <systemTask+0x88>
 8001752:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001756:	ee16 0a90 	vmov	r0, s13
 800175a:	f7fe ff05 	bl	8000568 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	480f      	ldr	r0, [pc, #60]	; (80017a0 <systemTask+0x8c>)
 8001764:	f008 f92e 	bl	80099c4 <iprintf>


  ledInit();
 8001768:	f7ff ff04 	bl	8001574 <ledInit>
  ledSet(CHG_LED, SET);
 800176c:	2101      	movs	r1, #1
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff ff72 	bl	8001658 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8001774:	f000 fe6e 	bl	8002454 <queueMonitorInit>
#endif

  ICM20602_Initialization();
 8001778:	f7ff fde0 	bl	800133c <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 800177c:	f000 f85c 	bl	8001838 <passthroughInit>

  systemInit();
 8001780:	f000 f832 	bl	80017e8 <systemInit>
//  commInit();
//  commanderInit();

}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	e000e010 	.word	0xe000e010
 8001790:	e0001000 	.word	0xe0001000
 8001794:	200008e8 	.word	0x200008e8
 8001798:	200008ec 	.word	0x200008ec
 800179c:	43280000 	.word	0x43280000
 80017a0:	0800b9cc 	.word	0x0800b9cc

080017a4 <systemWaitStart>:



void systemWaitStart(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 80017a8:	e002      	b.n	80017b0 <systemWaitStart+0xc>
    vTaskDelay(2);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f005 fbca 	bl	8006f44 <vTaskDelay>
  while(!isInit)
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <systemWaitStart+0x3c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f5      	bne.n	80017aa <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <systemWaitStart+0x40>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 ff60 	bl	800668c <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <systemWaitStart+0x40>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	2300      	movs	r3, #0
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	f004 fcdf 	bl	8006198 <xQueueGenericSend>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200008e7 	.word	0x200008e7
 80017e4:	20000cf0 	.word	0x20000cf0

080017e8 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  if(isInit)
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <systemInit+0x3c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d115      	bne.n	8001820 <systemInit+0x38>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <systemInit+0x40>)
 80017f6:	2001      	movs	r0, #1
 80017f8:	f004 fcb3 	bl	8006162 <xQueueCreateMutexStatic>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <systemInit+0x44>)
 8001800:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <systemInit+0x44>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800180a:	4618      	mov	r0, r3
 800180c:	f004 ff3e 	bl	800668c <xQueueSemaphoreTake>
  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
//  crtpInit();
//  consoleInit();

  DEBUG_PRINT("----------------------------\n");
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <systemInit+0x48>)
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <systemInit+0x4c>)
 8001814:	f000 fe08 	bl	8002428 <eprintf>

#ifdef CONFIG_APP_ENABLE
  appInit();
#endif
*/
  isInit = true;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <systemInit+0x3c>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	e000      	b.n	8001822 <systemInit+0x3a>
    return;
 8001820:	bf00      	nop
}
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200008e7 	.word	0x200008e7
 8001828:	20000cf4 	.word	0x20000cf4
 800182c:	20000cf0 	.word	0x20000cf0
 8001830:	0800b9e0 	.word	0x0800b9e0
 8001834:	080026e1 	.word	0x080026e1

08001838 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af04      	add	r7, sp, #16
  if(isInit)
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <passthroughInit+0x8c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d13b      	bne.n	80018be <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 8001846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184a:	4618      	mov	r0, r3
 800184c:	2301      	movs	r3, #1
 800184e:	4619      	mov	r1, r3
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <passthroughInit+0x90>)
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <passthroughInit+0x94>)
 8001858:	f004 fbce 	bl	8005ff8 <xQueueGenericCreateStatic>
 800185c:	4603      	mov	r3, r0
 800185e:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <passthroughInit+0x98>)
 8001860:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <passthroughInit+0x98>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <passthroughInit+0x9c>)
 8001868:	491b      	ldr	r1, [pc, #108]	; (80018d8 <passthroughInit+0xa0>)
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fe3a 	bl	80024e4 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8001870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001874:	4618      	mov	r0, r3
 8001876:	2301      	movs	r3, #1
 8001878:	4619      	mov	r1, r3
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <passthroughInit+0xa4>)
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <passthroughInit+0xa8>)
 8001882:	f004 fbb9 	bl	8005ff8 <xQueueGenericCreateStatic>
 8001886:	4603      	mov	r3, r0
 8001888:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <passthroughInit+0xac>)
 800188a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <passthroughInit+0x98>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <passthroughInit+0x9c>)
 8001892:	4911      	ldr	r1, [pc, #68]	; (80018d8 <passthroughInit+0xa0>)
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fe25 	bl	80024e4 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 800189a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189e:	461a      	mov	r2, r3
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <passthroughInit+0xb0>)
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <passthroughInit+0xb4>)
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2305      	movs	r3, #5
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	4910      	ldr	r1, [pc, #64]	; (80018f0 <passthroughInit+0xb8>)
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <passthroughInit+0xbc>)
 80018b2:	f005 f98b 	bl	8006bcc <xTaskCreateStatic>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <passthroughInit+0xc0>)
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e000      	b.n	80018c0 <passthroughInit+0x88>
    return;
 80018be:	bf00      	nop
}
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20001148 	.word	0x20001148
 80018c8:	200005f8 	.word	0x200005f8
 80018cc:	200003f8 	.word	0x200003f8
 80018d0:	2000114c 	.word	0x2000114c
 80018d4:	0800ba04 	.word	0x0800ba04
 80018d8:	0800ba10 	.word	0x0800ba10
 80018dc:	20000848 	.word	0x20000848
 80018e0:	20000648 	.word	0x20000648
 80018e4:	20001150 	.word	0x20001150
 80018e8:	20000344 	.word	0x20000344
 80018ec:	20000d48 	.word	0x20000d48
 80018f0:	0800ba3c 	.word	0x0800ba3c
 80018f4:	080018fd 	.word	0x080018fd
 80018f8:	20000d44 	.word	0x20000d44

080018fc <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001904:	f7ff ff4e 	bl	80017a4 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800190c:	2001      	movs	r0, #1
 800190e:	f006 f99b 	bl	8007c48 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 8001912:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001916:	2000      	movs	r0, #0
 8001918:	f006 f9e2 	bl	8007ce0 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800191c:	e7f4      	b.n	8001908 <passthroughTask+0xc>

0800191e <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f896 	bl	8001a5c <platformGetListOfConfigurations>
 8001930:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4619      	mov	r1, r3
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f854 	bl	80019e4 <platformInitConfiguration>
 800193c:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b30      	cmp	r3, #48	; 0x30
 8001962:	d104      	bne.n	800196e <platformParseDeviceTypeString+0x1c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b3b      	cmp	r3, #59	; 0x3b
 800196c:	d001      	beq.n	8001972 <platformParseDeviceTypeString+0x20>
    return 1;
 800196e:	2301      	movs	r3, #1
 8001970:	e034      	b.n	80019dc <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8001972:	2302      	movs	r3, #2
 8001974:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3304      	adds	r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
  int end = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e00e      	b.n	80019a4 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <platformParseDeviceTypeString+0x5a>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b3b      	cmp	r3, #59	; 0x3b
 800199c:	d006      	beq.n	80019ac <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	ddec      	ble.n	8001986 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dd01      	ble.n	80019b8 <platformParseDeviceTypeString+0x66>
    return 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e011      	b.n	80019dc <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	4619      	mov	r1, r3
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f008 f9d5 	bl	8009d7a <memcpy>
  deviceType[length] = '\0';
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
  return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	; 0x40
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f852 	bl	8001a9c <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 80019f8:	f107 020c 	add.w	r2, r7, #12
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffa5 	bl	8001952 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a0c:	e01a      	b.n	8001a44 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8001a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8001a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a22:	f107 020c 	add.w	r2, r7, #12
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fbd1 	bl	80001d0 <strcmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d104      	bne.n	8001a3e <platformInitConfiguration+0x5a>
      active_config = config;
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <platformInitConfiguration+0x74>)
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	6013      	str	r3, [r2, #0]
      return 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e007      	b.n	8001a4e <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8001a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a40:	3301      	adds	r3, #1
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbe0      	blt.n	8001a0e <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3740      	adds	r7, #64	; 0x40
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20001154 	.word	0x20001154

08001a5c <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2203      	movs	r2, #3
 8001a68:	601a      	str	r2, [r3, #0]
  return configs;
 8001a6a:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <platformGetListOfConfigurations+0x1c>)
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	20000048 	.word	0x20000048

08001a7c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a8e:	015b      	lsls	r3, r3, #5
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	e00d      	b.n	8001aca <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8001aae:	6938      	ldr	r0, [r7, #16]
 8001ab0:	f7ff ffe4 	bl	8001a7c <getAddressOfOtpMemoryBlock>
 8001ab4:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	617b      	str	r3, [r7, #20]
      break;
 8001ac2:	e005      	b.n	8001ad0 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	ddee      	ble.n	8001aae <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <platformGetDeviceTypeString+0x42>
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2bff      	cmp	r3, #255	; 0xff
 8001adc:	d101      	bne.n	8001ae2 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <platformGetDeviceTypeString+0x60>)
 8001ae0:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	6979      	ldr	r1, [r7, #20]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f008 f866 	bl	8009bb8 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3320      	adds	r3, #32
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	0800bb30 	.word	0x0800bb30

08001b00 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b04:	f3bf 8f4f 	dsb	sy
}
 8001b08:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <__NVIC_SystemReset+0x24>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b12:	4904      	ldr	r1, [pc, #16]	; (8001b24 <__NVIC_SystemReset+0x24>)
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_SystemReset+0x28>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1a:	f3bf 8f4f 	dsb	sy
}
 8001b1e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <__NVIC_SystemReset+0x20>
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	05fa0004 	.word	0x05fa0004

08001b2c <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b4a:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	68b8      	ldr	r0, [r7, #8]
 8001b50:	f000 f810 	bl	8001b74 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8001b54:	f7ff fdaa 	bl	80016ac <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <assertFail+0x44>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8001b64:	f7ff ffcc 	bl	8001b00 <__NVIC_SystemReset>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	e000edf0 	.word	0xe000edf0

08001b74 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <storeAssertFileData+0x38>)
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <storeAssertFileData+0x3c>)
 8001b82:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <storeAssertFileData+0x38>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <storeAssertFileData+0x38>)
 8001b8c:	791a      	ldrb	r2, [r3, #4]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <storeAssertFileData+0x40>)
 8001b90:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <storeAssertFileData+0x38>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <storeAssertFileData+0x38>)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	60d3      	str	r3, [r2, #12]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000898 	.word	0x20000898
 8001bb0:	2f8a001f 	.word	0x2f8a001f
 8001bb4:	20001158 	.word	0x20001158

08001bb8 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  int l = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8001bc4:	e00a      	b.n	8001bdc <getIntLen+0x24>
  {
    l++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <getIntLen+0x38>)
 8001bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd4:	1092      	asrs	r2, r2, #2
 8001bd6:	17db      	asrs	r3, r3, #31
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	dcf1      	bgt.n	8001bc6 <getIntLen+0xe>
  }
  return l;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	66666667 	.word	0x66666667

08001bf4 <power>:

int power(int a, int b)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 8001c02:	2301      	movs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	e007      	b.n	8001c18 <power+0x24>
  {
    x *= a;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbf3      	blt.n	8001c08 <power+0x14>
  }

  return x;
 8001c20:	68bb      	ldr	r3, [r7, #8]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8001c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c34:	b088      	sub	sp, #32
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 8001c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	d104      	bne.n	8001c54 <itoa10Unsigned+0x24>
  {
    putcf('0');
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2030      	movs	r0, #48	; 0x30
 8001c4e:	4798      	blx	r3
    return 1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e057      	b.n	8001d04 <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8001c54:	f04f 0201 	mov.w	r2, #1
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 8001c60:	e019      	b.n	8001c96 <itoa10Unsigned+0x66>
  {
    i *= 10L;
 8001c62:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c66:	4642      	mov	r2, r8
 8001c68:	464b      	mov	r3, r9
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	0099      	lsls	r1, r3, #2
 8001c74:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c78:	0090      	lsls	r0, r2, #2
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	eb12 0408 	adds.w	r4, r2, r8
 8001c82:	eb43 0509 	adc.w	r5, r3, r9
 8001c86:	eb14 0a04 	adds.w	sl, r4, r4
 8001c8a:	eb45 0b05 	adc.w	fp, r5, r5
 8001c8e:	4654      	mov	r4, sl
 8001c90:	465d      	mov	r5, fp
 8001c92:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8001c96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c9e:	f7fe ffe3 	bl	8000c68 <__aeabi_uldivmod>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	2a0a      	cmp	r2, #10
 8001ca8:	f173 0300 	sbcs.w	r3, r3, #0
 8001cac:	d2d9      	bcs.n	8001c62 <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 8001cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb6:	f7fe ffd7 	bl	8000c68 <__aeabi_uldivmod>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 020a 	mov.w	r2, #10
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	f7fe ffcd 	bl	8000c68 <__aeabi_uldivmod>
 8001cce:	4910      	ldr	r1, [pc, #64]	; (8001d10 <itoa10Unsigned+0xe0>)
 8001cd0:	188b      	adds	r3, r1, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4798      	blx	r3
    len++;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 8001ce2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ce6:	f04f 020a 	mov.w	r2, #10
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f7fe ffbb 	bl	8000c68 <__aeabi_uldivmod>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001cfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	d1d5      	bne.n	8001cae <itoa10Unsigned+0x7e>

  return len;
 8001d02:	69fb      	ldr	r3, [r7, #28]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800c370 	.word	0x0800c370

08001d14 <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 8001d14:	b5b0      	push	{r4, r5, r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 8001d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	d104      	bne.n	8001d36 <itoa10+0x22>
  {
    putcf('0');
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2030      	movs	r0, #48	; 0x30
 8001d30:	4798      	blx	r3
    return 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e037      	b.n	8001da6 <itoa10+0x92>
  }

  long long unsigned int n = num;
 8001d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 8001d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da0d      	bge.n	8001d62 <itoa10+0x4e>
  {
    n = -num;
 8001d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4254      	negs	r4, r2
 8001d4e:	eb61 0503 	sbc.w	r5, r1, r3
 8001d52:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	202d      	movs	r0, #45	; 0x2d
 8001d5a:	4798      	blx	r3
    len++;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff27 	bl	8001bb8 <getIntLen>
 8001d6a:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	429a      	cmp	r2, r3
 8001d72:	da10      	bge.n	8001d96 <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 8001d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8001d7c:	e008      	b.n	8001d90 <itoa10+0x7c>
    {
      putcf('0');
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2030      	movs	r0, #48	; 0x30
 8001d82:	4798      	blx	r3
      len++;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	3301      	adds	r3, #1
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dcf3      	bgt.n	8001d7e <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8001d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7ff ff48 	bl	8001c30 <itoa10Unsigned>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	4413      	add	r3, r2
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001db0 <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 8001db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db4:	b08d      	sub	sp, #52	; 0x34
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8001dc8:	230f      	movs	r3, #15
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	e059      	b.n	8001e82 <itoa16+0xd2>
  {
    int shift = i * 4;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 8001dd4:	f04f 020f 	mov.w	r2, #15
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	6a39      	ldr	r1, [r7, #32]
 8001dde:	f1a1 0620 	sub.w	r6, r1, #32
 8001de2:	f1c1 0020 	rsb	r0, r1, #32
 8001de6:	fa03 f501 	lsl.w	r5, r3, r1
 8001dea:	fa02 f606 	lsl.w	r6, r2, r6
 8001dee:	4335      	orrs	r5, r6
 8001df0:	fa22 f000 	lsr.w	r0, r2, r0
 8001df4:	4305      	orrs	r5, r0
 8001df6:	fa02 f401 	lsl.w	r4, r2, r1
 8001dfa:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 8001dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e06:	ea00 0a02 	and.w	sl, r0, r2
 8001e0a:	ea01 0b03 	and.w	fp, r1, r3
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f1c3 0120 	rsb	r1, r3, #32
 8001e14:	f1a3 0220 	sub.w	r2, r3, #32
 8001e18:	fa2a f803 	lsr.w	r8, sl, r3
 8001e1c:	fa0b f101 	lsl.w	r1, fp, r1
 8001e20:	ea48 0801 	orr.w	r8, r8, r1
 8001e24:	fa2b f202 	lsr.w	r2, fp, r2
 8001e28:	ea48 0802 	orr.w	r8, r8, r2
 8001e2c:	fa2b f903 	lsr.w	r9, fp, r3
 8001e30:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 8001e34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	d002      	beq.n	8001e42 <itoa16+0x92>
    {
      foundFirst = true;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 8001e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <itoa16+0xa2>
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	da14      	bge.n	8001e7c <itoa16+0xcc>
    {
      if (foundFirst)
 8001e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <itoa16+0xbc>
      {
        putcf(digit[val]);
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <itoa16+0xe4>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4610      	mov	r0, r2
 8001e68:	4798      	blx	r3
 8001e6a:	e004      	b.n	8001e76 <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 8001e6c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4610      	mov	r0, r2
 8001e74:	4798      	blx	r3
      }

      len++;
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	3301      	adds	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	daa2      	bge.n	8001dce <itoa16+0x1e>
    }
  }

  return len;
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3734      	adds	r7, #52	; 0x34
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e94:	0800c370 	.word	0x0800c370

08001e98 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	6011      	str	r1, [r2, #0]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3b58      	subs	r3, #88	; 0x58
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d861      	bhi.n	8001f80 <handleLongLong+0xe8>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <handleLongLong+0x2c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001f69 	.word	0x08001f69
 8001ec8:	08001f81 	.word	0x08001f81
 8001ecc:	08001f81 	.word	0x08001f81
 8001ed0:	08001f81 	.word	0x08001f81
 8001ed4:	08001f81 	.word	0x08001f81
 8001ed8:	08001f81 	.word	0x08001f81
 8001edc:	08001f81 	.word	0x08001f81
 8001ee0:	08001f81 	.word	0x08001f81
 8001ee4:	08001f81 	.word	0x08001f81
 8001ee8:	08001f81 	.word	0x08001f81
 8001eec:	08001f81 	.word	0x08001f81
 8001ef0:	08001f81 	.word	0x08001f81
 8001ef4:	08001f49 	.word	0x08001f49
 8001ef8:	08001f81 	.word	0x08001f81
 8001efc:	08001f81 	.word	0x08001f81
 8001f00:	08001f81 	.word	0x08001f81
 8001f04:	08001f81 	.word	0x08001f81
 8001f08:	08001f49 	.word	0x08001f49
 8001f0c:	08001f81 	.word	0x08001f81
 8001f10:	08001f81 	.word	0x08001f81
 8001f14:	08001f81 	.word	0x08001f81
 8001f18:	08001f81 	.word	0x08001f81
 8001f1c:	08001f81 	.word	0x08001f81
 8001f20:	08001f81 	.word	0x08001f81
 8001f24:	08001f81 	.word	0x08001f81
 8001f28:	08001f81 	.word	0x08001f81
 8001f2c:	08001f81 	.word	0x08001f81
 8001f30:	08001f81 	.word	0x08001f81
 8001f34:	08001f81 	.word	0x08001f81
 8001f38:	08001f5b 	.word	0x08001f5b
 8001f3c:	08001f81 	.word	0x08001f81
 8001f40:	08001f81 	.word	0x08001f81
 8001f44:	08001f69 	.word	0x08001f69
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 8001f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	9100      	str	r1, [sp, #0]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff fedf 	bl	8001d14 <itoa10>
 8001f56:	6178      	str	r0, [r7, #20]
      break;
 8001f58:	e013      	b.n	8001f82 <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 8001f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7ff fe66 	bl	8001c30 <itoa10Unsigned>
 8001f64:	6178      	str	r0, [r7, #20]
      break;
 8001f66:	e00c      	b.n	8001f82 <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 8001f68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff ff1a 	bl	8001db0 <itoa16>
 8001f7c:	6178      	str	r0, [r7, #20]
      break;
 8001f7e:	e000      	b.n	8001f82 <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 8001f80:	bf00      	nop
  }

  return len;
 8001f82:	697b      	ldr	r3, [r7, #20]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 8001f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
  int len = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	1c59      	adds	r1, r3, #1
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3b58      	subs	r3, #88	; 0x58
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d86c      	bhi.n	800208c <handleLong+0x100>
 8001fb2:	a201      	add	r2, pc, #4	; (adr r2, 8001fb8 <handleLong+0x2c>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	0800206d 	.word	0x0800206d
 8001fbc:	0800208d 	.word	0x0800208d
 8001fc0:	0800208d 	.word	0x0800208d
 8001fc4:	0800208d 	.word	0x0800208d
 8001fc8:	0800208d 	.word	0x0800208d
 8001fcc:	0800208d 	.word	0x0800208d
 8001fd0:	0800208d 	.word	0x0800208d
 8001fd4:	0800208d 	.word	0x0800208d
 8001fd8:	0800208d 	.word	0x0800208d
 8001fdc:	0800208d 	.word	0x0800208d
 8001fe0:	0800208d 	.word	0x0800208d
 8001fe4:	0800208d 	.word	0x0800208d
 8001fe8:	0800203d 	.word	0x0800203d
 8001fec:	0800208d 	.word	0x0800208d
 8001ff0:	0800208d 	.word	0x0800208d
 8001ff4:	0800208d 	.word	0x0800208d
 8001ff8:	0800208d 	.word	0x0800208d
 8001ffc:	0800203d 	.word	0x0800203d
 8002000:	0800208d 	.word	0x0800208d
 8002004:	0800208d 	.word	0x0800208d
 8002008:	0800208d 	.word	0x0800208d
 800200c:	0800208d 	.word	0x0800208d
 8002010:	0800208d 	.word	0x0800208d
 8002014:	0800208d 	.word	0x0800208d
 8002018:	0800208d 	.word	0x0800208d
 800201c:	0800208d 	.word	0x0800208d
 8002020:	0800208d 	.word	0x0800208d
 8002024:	0800208d 	.word	0x0800208d
 8002028:	0800208d 	.word	0x0800208d
 800202c:	08002057 	.word	0x08002057
 8002030:	0800208d 	.word	0x0800208d
 8002034:	0800208d 	.word	0x0800208d
 8002038:	0800206d 	.word	0x0800206d
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	17da      	asrs	r2, r3, #31
 8002040:	469a      	mov	sl, r3
 8002042:	4693      	mov	fp, r2
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4652      	mov	r2, sl
 800204a:	465b      	mov	r3, fp
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff fe61 	bl	8001d14 <itoa10>
 8002052:	6178      	str	r0, [r7, #20]
      break;
 8002054:	e01b      	b.n	800208e <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	4698      	mov	r8, r3
 800205c:	4691      	mov	r9, r2
 800205e:	4642      	mov	r2, r8
 8002060:	464b      	mov	r3, r9
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fde4 	bl	8001c30 <itoa10Unsigned>
 8002068:	6178      	str	r0, [r7, #20]
      break;
 800206a:	e010      	b.n	800208e <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	461c      	mov	r4, r3
 8002072:	4615      	mov	r5, r2
 8002074:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4622      	mov	r2, r4
 8002080:	462b      	mov	r3, r5
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fe94 	bl	8001db0 <itoa16>
 8002088:	6178      	str	r0, [r7, #20]
      break;
 800208a:	e000      	b.n	800208e <handleLong+0x102>
    default:
      // Nothing here
      break;
 800208c:	bf00      	nop
  }

  return len;
 800208e:	697b      	ldr	r3, [r7, #20]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209a:	bf00      	nop

0800209c <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 800209c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a0:	ed2d 8b02 	vpush	{d8}
 80020a4:	b08e      	sub	sp, #56	; 0x38
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	6178      	str	r0, [r7, #20]
 80020aa:	6139      	str	r1, [r7, #16]
 80020ac:	60fa      	str	r2, [r7, #12]
  int len=0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 80020b2:	e1ac      	b.n	800240e <evprintf+0x372>
  {
    if (*fmt == '%')
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b25      	cmp	r3, #37	; 0x25
 80020ba:	f040 819d 	bne.w	80023f8 <evprintf+0x35c>
    {
      precision = 6;
 80020be:	2306      	movs	r3, #6
 80020c0:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 80020c2:	2320      	movs	r3, #32
 80020c4:	76fb      	strb	r3, [r7, #27]
      width = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]

      fmt++;
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3301      	adds	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b25      	cmp	r3, #37	; 0x25
 80020d6:	d110      	bne.n	80020fa <evprintf+0x5e>
        putcf(*fmt++);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	613a      	str	r2, [r7, #16]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4610      	mov	r0, r2
 80020e6:	4798      	blx	r3
        len++;
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	3301      	adds	r3, #1
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 80020ee:	e18e      	b.n	800240e <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 80020f0:	2330      	movs	r3, #48	; 0x30
 80020f2:	76fb      	strb	r3, [r7, #27]
        fmt++;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	3301      	adds	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b30      	cmp	r3, #48	; 0x30
 8002100:	d0f6      	beq.n	80020f0 <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 8002102:	e00e      	b.n	8002122 <evprintf+0x86>
			{
				width *= 10;
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3b30      	subs	r3, #48	; 0x30
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	61fb      	str	r3, [r7, #28]
				fmt++;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	3301      	adds	r3, #1
 8002120:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4ab2      	ldr	r2, [pc, #712]	; (80023f4 <evprintf+0x358>)
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e6      	bne.n	8002104 <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 8002136:	e017      	b.n	8002168 <evprintf+0xcc>
      {
        if (*fmt == '.')
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b2e      	cmp	r3, #46	; 0x2e
 800213e:	d113      	bne.n	8002168 <evprintf+0xcc>
        {
          fmt++;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	3301      	adds	r3, #1
 8002144:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4aa9      	ldr	r2, [pc, #676]	; (80023f4 <evprintf+0x358>)
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3b30      	subs	r3, #48	; 0x30
 8002160:	623b      	str	r3, [r7, #32]
            fmt++;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	3301      	adds	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4aa1      	ldr	r2, [pc, #644]	; (80023f4 <evprintf+0x358>)
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0dd      	beq.n	8002138 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	613a      	str	r2, [r7, #16]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3b58      	subs	r3, #88	; 0x58
 8002186:	2b20      	cmp	r3, #32
 8002188:	f200 8132 	bhi.w	80023f0 <evprintf+0x354>
 800218c:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <evprintf+0xf8>)
 800218e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002192:	bf00      	nop
 8002194:	08002261 	.word	0x08002261
 8002198:	080023f1 	.word	0x080023f1
 800219c:	080023f1 	.word	0x080023f1
 80021a0:	080023f1 	.word	0x080023f1
 80021a4:	080023f1 	.word	0x080023f1
 80021a8:	080023f1 	.word	0x080023f1
 80021ac:	080023f1 	.word	0x080023f1
 80021b0:	080023f1 	.word	0x080023f1
 80021b4:	080023f1 	.word	0x080023f1
 80021b8:	080023f1 	.word	0x080023f1
 80021bc:	080023f1 	.word	0x080023f1
 80021c0:	080023d7 	.word	0x080023d7
 80021c4:	08002219 	.word	0x08002219
 80021c8:	080023f1 	.word	0x080023f1
 80021cc:	080022eb 	.word	0x080022eb
 80021d0:	080023f1 	.word	0x080023f1
 80021d4:	080023f1 	.word	0x080023f1
 80021d8:	08002219 	.word	0x08002219
 80021dc:	080023f1 	.word	0x080023f1
 80021e0:	080023f1 	.word	0x080023f1
 80021e4:	0800228b 	.word	0x0800228b
 80021e8:	080023f1 	.word	0x080023f1
 80021ec:	080023f1 	.word	0x080023f1
 80021f0:	080023f1 	.word	0x080023f1
 80021f4:	080023f1 	.word	0x080023f1
 80021f8:	080023f1 	.word	0x080023f1
 80021fc:	080023f1 	.word	0x080023f1
 8002200:	080023ab 	.word	0x080023ab
 8002204:	080023f1 	.word	0x080023f1
 8002208:	0800223f 	.word	0x0800223f
 800220c:	080023f1 	.word	0x080023f1
 8002210:	080023f1 	.word	0x080023f1
 8002214:	08002261 	.word	0x08002261
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1d1a      	adds	r2, r3, #4
 800221c:	60fa      	str	r2, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	17da      	asrs	r2, r3, #31
 8002222:	461c      	mov	r4, r3
 8002224:	4615      	mov	r5, r2
 8002226:	2300      	movs	r3, #0
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff fd70 	bl	8001d14 <itoa10>
 8002234:	4602      	mov	r2, r0
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	4413      	add	r3, r2
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 800223c:	e0e7      	b.n	800240e <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1d1a      	adds	r2, r3, #4
 8002242:	60fa      	str	r2, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2200      	movs	r2, #0
 8002248:	4698      	mov	r8, r3
 800224a:	4691      	mov	r9, r2
 800224c:	4642      	mov	r2, r8
 800224e:	464b      	mov	r3, r9
 8002250:	6978      	ldr	r0, [r7, #20]
 8002252:	f7ff fced 	bl	8001c30 <itoa10Unsigned>
 8002256:	4602      	mov	r2, r0
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	4413      	add	r3, r2
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 800225e:	e0d6      	b.n	800240e <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1d1a      	adds	r2, r3, #4
 8002264:	60fa      	str	r2, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	469a      	mov	sl, r3
 800226c:	4693      	mov	fp, r2
 800226e:	7efb      	ldrb	r3, [r7, #27]
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4652      	mov	r2, sl
 8002278:	465b      	mov	r3, fp
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff fd98 	bl	8001db0 <itoa16>
 8002280:	4602      	mov	r2, r0
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	4413      	add	r3, r2
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002288:	e0c1      	b.n	800240e <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b6c      	cmp	r3, #108	; 0x6c
 8002290:	d11a      	bne.n	80022c8 <evprintf+0x22c>
            fmt++;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3301      	adds	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3307      	adds	r3, #7
 800229c:	f023 0307 	bic.w	r3, r3, #7
 80022a0:	f103 0208 	add.w	r2, r3, #8
 80022a4:	60fa      	str	r2, [r7, #12]
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f107 0010 	add.w	r0, r7, #16
 80022ae:	7ef9      	ldrb	r1, [r7, #27]
 80022b0:	9101      	str	r1, [sp, #4]
 80022b2:	69f9      	ldr	r1, [r7, #28]
 80022b4:	9100      	str	r1, [sp, #0]
 80022b6:	4601      	mov	r1, r0
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f7ff fded 	bl	8001e98 <handleLongLong>
 80022be:	4602      	mov	r2, r0
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	4413      	add	r3, r2
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 80022c6:	e0a2      	b.n	800240e <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1d1a      	adds	r2, r3, #4
 80022cc:	60fa      	str	r2, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	f107 0110 	add.w	r1, r7, #16
 80022d4:	7efb      	ldrb	r3, [r7, #27]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff fe56 	bl	8001f8c <handleLong>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	4413      	add	r3, r2
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80022e8:	e091      	b.n	800240e <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3307      	adds	r3, #7
 80022ee:	f023 0307 	bic.w	r3, r3, #7
 80022f2:	f103 0208 	add.w	r2, r3, #8
 80022f6:	60fa      	str	r2, [r7, #12]
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f7fe fc62 	bl	8000bc8 <__aeabi_d2f>
 8002304:	4603      	mov	r3, r0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 8002308:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800230c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002314:	d50b      	bpl.n	800232e <evprintf+0x292>
          {
            putcf('-');
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	202d      	movs	r0, #45	; 0x2d
 800231a:	4798      	blx	r3
            num = -num;
 800231c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002320:	eef1 7a67 	vneg.f32	s15, s15
 8002324:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	3301      	adds	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 800232e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002336:	ee17 2a90 	vmov	r2, s15
 800233a:	17d3      	asrs	r3, r2, #31
 800233c:	603a      	str	r2, [r7, #0]
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f7ff fce3 	bl	8001d14 <itoa10>
 800234e:	4602      	mov	r2, r0
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	4413      	add	r3, r2
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	202e      	movs	r0, #46	; 0x2e
 800235a:	4798      	blx	r3
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	3301      	adds	r3, #1
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 8002362:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800236a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002372:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002376:	6a39      	ldr	r1, [r7, #32]
 8002378:	200a      	movs	r0, #10
 800237a:	f7ff fc3b 	bl	8001bf4 <power>
 800237e:	ee07 0a90 	vmov	s15, r0
 8002382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002386:	ee68 7a27 	vmul.f32	s15, s16, s15
 800238a:	ee17 0a90 	vmov	r0, s15
 800238e:	f7fe fc83 	bl	8000c98 <__aeabi_f2lz>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	6a39      	ldr	r1, [r7, #32]
 8002398:	9100      	str	r1, [sp, #0]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff fcba 	bl	8001d14 <itoa10>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	4413      	add	r3, r2
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80023a8:	e031      	b.n	800240e <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1d1a      	adds	r2, r3, #4
 80023ae:	60fa      	str	r2, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 80023b4:	e00a      	b.n	80023cc <evprintf+0x330>
          {
            putcf(*str++);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	627a      	str	r2, [r7, #36]	; 0x24
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4610      	mov	r0, r2
 80023c4:	4798      	blx	r3
            len++;
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	3301      	adds	r3, #1
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <evprintf+0x31a>
          }
          break;
 80023d4:	e01b      	b.n	800240e <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1d1a      	adds	r2, r3, #4
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4610      	mov	r0, r2
 80023e6:	4798      	blx	r3
          len++;
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	3301      	adds	r3, #1
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80023ee:	e00e      	b.n	800240e <evprintf+0x372>
        default:
          break;
 80023f0:	bf00      	nop
 80023f2:	e00c      	b.n	800240e <evprintf+0x372>
 80023f4:	0800c398 	.word	0x0800c398
      }
    }
    else
    {
      putcf(*fmt++);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	613a      	str	r2, [r7, #16]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4610      	mov	r0, r2
 8002406:	4798      	blx	r3
      len++;
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	3301      	adds	r3, #1
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f47f ae4e 	bne.w	80020b4 <evprintf+0x18>
    }
  }
  
  return len;
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800241a:	4618      	mov	r0, r3
 800241c:	3730      	adds	r7, #48	; 0x30
 800241e:	46bd      	mov	sp, r7
 8002420:	ecbd 8b02 	vpop	{d8}
 8002424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002428 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 8002428:	b40e      	push	{r1, r2, r3}
 800242a:	b580      	push	{r7, lr}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 8002432:	f107 0320 	add.w	r3, r7, #32
 8002436:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	69f9      	ldr	r1, [r7, #28]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fe2d 	bl	800209c <evprintf>
 8002442:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002450:	b003      	add	sp, #12
 8002452:	4770      	bx	lr

08002454 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <queueMonitorInit+0x6c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <queueMonitorInit+0x1e>
 8002468:	2248      	movs	r2, #72	; 0x48
 800246a:	4916      	ldr	r1, [pc, #88]	; (80024c4 <queueMonitorInit+0x70>)
 800246c:	4816      	ldr	r0, [pc, #88]	; (80024c8 <queueMonitorInit+0x74>)
 800246e:	f7ff fb5d 	bl	8001b2c <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <queueMonitorInit+0x78>)
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <queueMonitorInit+0x7c>)
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	2201      	movs	r2, #1
 800247e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002482:	4814      	ldr	r0, [pc, #80]	; (80024d4 <queueMonitorInit+0x80>)
 8002484:	f005 fd00 	bl	8007e88 <xTimerCreateStatic>
 8002488:	4603      	mov	r3, r0
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <queueMonitorInit+0x84>)
 800248c:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <queueMonitorInit+0x84>)
 8002490:	681c      	ldr	r4, [r3, #0]
 8002492:	f004 fea7 	bl	80071e4 <xTaskGetTickCount>
 8002496:	4602      	mov	r2, r0
 8002498:	2364      	movs	r3, #100	; 0x64
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	2101      	movs	r1, #1
 80024a0:	4620      	mov	r0, r4
 80024a2:	f005 fd6b 	bl	8007f7c <xTimerGenericCommand>

  data[0].fileName = "Na";
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <queueMonitorInit+0x88>)
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <queueMonitorInit+0x8c>)
 80024aa:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <queueMonitorInit+0x88>)
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <queueMonitorInit+0x8c>)
 80024b0:	605a      	str	r2, [r3, #4]

  initialized = true;
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <queueMonitorInit+0x6c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
}
 80024b8:	bf00      	nop
 80024ba:	3704      	adds	r7, #4
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	2000131c 	.word	0x2000131c
 80024c4:	0800bb38 	.word	0x0800bb38
 80024c8:	0800bb5c 	.word	0x0800bb5c
 80024cc:	200012f0 	.word	0x200012f0
 80024d0:	08002681 	.word	0x08002681
 80024d4:	0800bb6c 	.word	0x0800bb6c
 80024d8:	200012ec 	.word	0x200012ec
 80024dc:	2000115c 	.word	0x2000115c
 80024e0:	0800bb80 	.word	0x0800bb80

080024e4 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <qmRegisterQueue+0x70>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <qmRegisterQueue+0x1e>
 80024f8:	2265      	movs	r2, #101	; 0x65
 80024fa:	4917      	ldr	r1, [pc, #92]	; (8002558 <qmRegisterQueue+0x74>)
 80024fc:	4817      	ldr	r0, [pc, #92]	; (800255c <qmRegisterQueue+0x78>)
 80024fe:	f7ff fb15 	bl	8001b2c <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <qmRegisterQueue+0x7c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b13      	cmp	r3, #19
 8002508:	d904      	bls.n	8002514 <qmRegisterQueue+0x30>
 800250a:	2266      	movs	r2, #102	; 0x66
 800250c:	4912      	ldr	r1, [pc, #72]	; (8002558 <qmRegisterQueue+0x74>)
 800250e:	4815      	ldr	r0, [pc, #84]	; (8002564 <qmRegisterQueue+0x80>)
 8002510:	f7ff fb0c 	bl	8001b2c <assertFail>
  Data* queueData = &data[nrOfQueues];
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <qmRegisterQueue+0x7c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4a11      	ldr	r2, [pc, #68]	; (8002568 <qmRegisterQueue+0x84>)
 8002524:	4413      	add	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <qmRegisterQueue+0x7c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f004 f9b2 	bl	80068a4 <vQueueSetQueueNumber>

  nrOfQueues++;
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <qmRegisterQueue+0x7c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <qmRegisterQueue+0x7c>)
 800254a:	701a      	strb	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000131c 	.word	0x2000131c
 8002558:	0800bb38 	.word	0x0800bb38
 800255c:	0800bb84 	.word	0x0800bb84
 8002560:	200000b7 	.word	0x200000b7
 8002564:	0800bb90 	.word	0x0800bb90
 8002568:	2000115c 	.word	0x2000115c

0800256c <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  int i = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	e013      	b.n	80025a4 <debugPrint+0x38>
    Data* queueData = &data[i];
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <debugPrint+0x50>)
 8002588:	4413      	add	r3, r2
 800258a:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	f000 f819 	bl	80025c4 <filter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <debugPrint+0x32>
      debugPrintQueue(queueData);
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f000 f827 	bl	80025ec <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3301      	adds	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <debugPrint+0x54>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4293      	cmp	r3, r2
 80025ae:	dbe5      	blt.n	800257c <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 80025b0:	f000 f838 	bl	8002624 <resetCounters>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000115c 	.word	0x2000115c
 80025c0:	200000b7 	.word	0x200000b7

080025c4 <filter>:

static bool filter(Data* queueData) {
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6858      	ldr	r0, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689c      	ldr	r4, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6912      	ldr	r2, [r2, #16]
 8002608:	9201      	str	r2, [sp, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4623      	mov	r3, r4
 800260e:	4602      	mov	r2, r0
 8002610:	4803      	ldr	r0, [pc, #12]	; (8002620 <debugPrintQueue+0x34>)
 8002612:	f007 f9d7 	bl	80099c4 <iprintf>
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	0800bbcc 	.word	0x0800bbcc

08002624 <resetCounters>:

static void resetCounters() {
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
  int i = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	e013      	b.n	800265c <resetCounters+0x38>
    Data* queueData = &data[i];
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <resetCounters+0x54>)
 8002640:	4413      	add	r3, r2
 8002642:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3301      	adds	r3, #1
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <resetCounters+0x58>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4293      	cmp	r3, r2
 8002666:	dbe5      	blt.n	8002634 <resetCounters+0x10>
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000115c 	.word	0x2000115c
 800267c:	200000b7 	.word	0x200000b7

08002680 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  debugPrint();
 8002688:	f7ff ff70 	bl	800256c <debugPrint>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <uartSendData>:
	  isInit = true;
}


void uartSendData(uint32_t size, uint8_t* data)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e00f      	b.n	80026c4 <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 80026a4:	bf00      	nop
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <uartSendData+0x48>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f9      	beq.n	80026a6 <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <uartSendData+0x48>)
 80026bc:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3eb      	bcc.n	80026a4 <uartSendData+0x10>
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40011400 	.word	0x40011400

080026e0 <uartPutchar>:


int uartPutchar(int ch)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7ff ffd1 	bl	8002694 <uartSendData>
    return (unsigned char)ch;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	b2db      	uxtb	r3, r3
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
return 0;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <vApplicationGetIdleTaskMemory+0x2c>)
 8002744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <vApplicationGetIdleTaskMemory+0x30>)
 800274a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20001320 	.word	0x20001320
 8002764:	200013d4 	.word	0x200013d4

08002768 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <vApplicationGetTimerTaskMemory+0x2c>)
 8002778:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4a06      	ldr	r2, [pc, #24]	; (8002798 <vApplicationGetTimerTaskMemory+0x30>)
 800277e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	200015d4 	.word	0x200015d4
 8002798:	20001688 	.word	0x20001688

0800279c <LL_SPI_SetStandard>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 0210 	bic.w	r2, r3, #16
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <LL_AHB1_GRP1_EnableClock>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40023800 	.word	0x40023800

080027f4 <LL_APB2_GRP1_EnableClock>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <LL_APB2_GRP1_EnableClock+0x2c>)
 80027fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <LL_APB2_GRP1_EnableClock+0x2c>)
 800280a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4013      	ands	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40023800 	.word	0x40023800

08002824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800282a:	f000 fd0f 	bl	800324c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800282e:	f000 f879 	bl	8002924 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002832:	f000 f993 	bl	8002b5c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8002836:	f000 f967 	bl	8002b08 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800283a:	f000 f92f 	bl	8002a9c <MX_TIM7_Init>
  MX_SPI1_Init();
 800283e:	f000 f8db 	bl	80029f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(168000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <main+0xd0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <main+0xd0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0220 	orr.w	r2, r2, #32
 8002850:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8002852:	f000 fa0f 	bl	8002c74 <freertos_IntroTitle>
  DEBUG_PRINT("[TASK]main\n");
 8002856:	4928      	ldr	r1, [pc, #160]	; (80028f8 <main+0xd4>)
 8002858:	4828      	ldr	r0, [pc, #160]	; (80028fc <main+0xd8>)
 800285a:	f7ff fde5 	bl	8002428 <eprintf>


  check_enter_bootloader();
 800285e:	f7fe fdfb 	bl	8001458 <check_enter_bootloader>

  int err = platformInit();
 8002862:	f7ff f85c 	bl	800191e <platformInit>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24
  if (err != 0) {
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	2b00      	cmp	r3, #0
 800286c:	d000      	beq.n	8002870 <main+0x4c>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 800286e:	e7fe      	b.n	800286e <main+0x4a>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8002870:	4823      	ldr	r0, [pc, #140]	; (8002900 <main+0xdc>)
 8002872:	f001 fdc3 	bl	80043fc <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <main+0xe0>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <main+0xe4>)
 800287c:	6013      	str	r3, [r2, #0]
  //  delay_us(1);	// 1ms
  delay_us(10);	// 1ms
 800287e:	200a      	movs	r0, #10
 8002880:	f000 fa86 	bl	8002d90 <delay_us>
  t2 = DWT->CYCCNT;
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <main+0xe0>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a20      	ldr	r2, [pc, #128]	; (800290c <main+0xe8>)
 800288a:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 800288c:	481c      	ldr	r0, [pc, #112]	; (8002900 <main+0xdc>)
 800288e:	f001 fe25 	bl	80044dc <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <main+0xe8>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <main+0xe4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002910 <main+0xec>
 80028a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028ac:	ee16 0a90 	vmov	r0, s13
 80028b0:	f7fd fe5a 	bl	8000568 <__aeabi_f2d>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4916      	ldr	r1, [pc, #88]	; (8002914 <main+0xf0>)
 80028ba:	4810      	ldr	r0, [pc, #64]	; (80028fc <main+0xd8>)
 80028bc:	f7ff fdb4 	bl	8002428 <eprintf>
  uint32_t ld = SysTick->LOAD;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <main+0xf4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	623b      	str	r3, [r7, #32]


  systemLaunch();
 80028c6:	f7fe ff09 	bl	80016dc <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <main+0xf8>)
 80028cc:	1d3c      	adds	r4, r7, #4
 80028ce:	461d      	mov	r5, r3
 80028d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fa07 	bl	8005cf4 <osThreadCreate>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <main+0xfc>)
 80028ea:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80028ec:	f003 f9fb 	bl	8005ce6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <main+0xcc>
 80028f2:	bf00      	nop
 80028f4:	20001ed0 	.word	0x20001ed0
 80028f8:	0800bbf4 	.word	0x0800bbf4
 80028fc:	080026e1 	.word	0x080026e1
 8002900:	20001e88 	.word	0x20001e88
 8002904:	e0001000 	.word	0xe0001000
 8002908:	20001f1c 	.word	0x20001f1c
 800290c:	20001f20 	.word	0x20001f20
 8002910:	43280000 	.word	0x43280000
 8002914:	0800bc00 	.word	0x0800bc00
 8002918:	e000e010 	.word	0xe000e010
 800291c:	0800bc20 	.word	0x0800bc20
 8002920:	20001f18 	.word	0x20001f18

08002924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b094      	sub	sp, #80	; 0x50
 8002928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292a:	f107 0320 	add.w	r3, r7, #32
 800292e:	2230      	movs	r2, #48	; 0x30
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f007 f938 	bl	8009ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <SystemClock_Config+0xcc>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <SystemClock_Config+0xcc>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <SystemClock_Config+0xcc>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002964:	2300      	movs	r3, #0
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <SystemClock_Config+0xd0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <SystemClock_Config+0xd0>)
 800296e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <SystemClock_Config+0xd0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002980:	2301      	movs	r3, #1
 8002982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800298a:	2302      	movs	r3, #2
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800298e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002994:	2304      	movs	r3, #4
 8002996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002998:	23a8      	movs	r3, #168	; 0xa8
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800299c:	2302      	movs	r3, #2
 800299e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029a0:	2304      	movs	r3, #4
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a4:	f107 0320 	add.w	r3, r7, #32
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f83f 	bl	8003a2c <HAL_RCC_OscConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029b4:	f000 fa18 	bl	8002de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b8:	230f      	movs	r3, #15
 80029ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029bc:	2302      	movs	r3, #2
 80029be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2105      	movs	r1, #5
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 faa0 	bl	8003f1c <HAL_RCC_ClockConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029e2:	f000 fa01 	bl	8002de8 <Error_Handler>
  }
}
 80029e6:	bf00      	nop
 80029e8:	3750      	adds	r7, #80	; 0x50
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000

080029f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b090      	sub	sp, #64	; 0x40
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80029fe:	f107 0318 	add.w	r3, r7, #24
 8002a02:	2228      	movs	r2, #40	; 0x28
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f007 f8ce 	bl	8009ba8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002a1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a20:	f7ff fee8 	bl	80027f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7ff fecd 	bl	80027c4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a2a:	23e0      	movs	r3, #224	; 0xe0
 8002a2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	463b      	mov	r3, r7
 8002a44:	4619      	mov	r1, r3
 8002a46:	4813      	ldr	r0, [pc, #76]	; (8002a94 <MX_SPI1_Init+0x9c>)
 8002a48:	f003 f83f 	bl	8005aca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002a50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a54:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002a68:	2310      	movs	r3, #16
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002a74:	230a      	movs	r3, #10
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4806      	ldr	r0, [pc, #24]	; (8002a98 <MX_SPI1_Init+0xa0>)
 8002a80:	f003 f8c7 	bl	8005c12 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002a84:	2100      	movs	r1, #0
 8002a86:	4804      	ldr	r0, [pc, #16]	; (8002a98 <MX_SPI1_Init+0xa0>)
 8002a88:	f7ff fe88 	bl	800279c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a8c:	bf00      	nop
 8002a8e:	3740      	adds	r7, #64	; 0x40
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40013000 	.word	0x40013000

08002a9c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002aac:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <MX_TIM7_Init+0x68>)
 8002aae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002ab2:	2253      	movs	r2, #83	; 0x53
 8002ab4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002aca:	480d      	ldr	r0, [pc, #52]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002acc:	f001 fc46 	bl	800435c <HAL_TIM_Base_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002ad6:	f000 f987 	bl	8002de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4806      	ldr	r0, [pc, #24]	; (8002b00 <MX_TIM7_Init+0x64>)
 8002ae8:	f001 fef6 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002af2:	f000 f979 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20001e88 	.word	0x20001e88
 8002b04:	40001400 	.word	0x40001400

08002b08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <MX_USART6_UART_Init+0x50>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_USART6_UART_Init+0x4c>)
 8002b40:	f001 ff5a 	bl	80049f8 <HAL_UART_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b4a:	f000 f94d 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20001ed0 	.word	0x20001ed0
 8002b58:	40011400 	.word	0x40011400

08002b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a35      	ldr	r2, [pc, #212]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <MX_GPIO_Init+0xf4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8002be2:	2201      	movs	r2, #1
 8002be4:	2110      	movs	r1, #16
 8002be6:	481b      	ldr	r0, [pc, #108]	; (8002c54 <MX_GPIO_Init+0xf8>)
 8002be8:	f000 ff06 	bl	80039f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2120      	movs	r1, #32
 8002bf0:	4819      	ldr	r0, [pc, #100]	; (8002c58 <MX_GPIO_Init+0xfc>)
 8002bf2:	f000 ff01 	bl	80039f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4811      	ldr	r0, [pc, #68]	; (8002c54 <MX_GPIO_Init+0xf8>)
 8002c0e:	f000 fd57 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8002c12:	2310      	movs	r3, #16
 8002c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <MX_GPIO_Init+0x100>)
 8002c28:	f000 fd4a 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_GPIO_Init+0xfc>)
 8002c44:	f000 fd3c 	bl	80036c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	; 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800

08002c60 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <OSVersion+0x10>)
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	0800bc3c 	.word	0x0800bc3c

08002c74 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002c78:	492e      	ldr	r1, [pc, #184]	; (8002d34 <freertos_IntroTitle+0xc0>)
 8002c7a:	482f      	ldr	r0, [pc, #188]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002c7c:	f7ff fbd4 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8002c80:	492e      	ldr	r1, [pc, #184]	; (8002d3c <freertos_IntroTitle+0xc8>)
 8002c82:	482d      	ldr	r0, [pc, #180]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002c84:	f7ff fbd0 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8002c88:	492d      	ldr	r1, [pc, #180]	; (8002d40 <freertos_IntroTitle+0xcc>)
 8002c8a:	482b      	ldr	r0, [pc, #172]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002c8c:	f7ff fbcc 	bl	8002428 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8002c90:	492c      	ldr	r1, [pc, #176]	; (8002d44 <freertos_IntroTitle+0xd0>)
 8002c92:	4829      	ldr	r0, [pc, #164]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002c94:	f7ff fbc8 	bl	8002428 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8002c98:	492b      	ldr	r1, [pc, #172]	; (8002d48 <freertos_IntroTitle+0xd4>)
 8002c9a:	4827      	ldr	r0, [pc, #156]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002c9c:	f7ff fbc4 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8002ca0:	492a      	ldr	r1, [pc, #168]	; (8002d4c <freertos_IntroTitle+0xd8>)
 8002ca2:	4825      	ldr	r0, [pc, #148]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002ca4:	f7ff fbc0 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8002ca8:	4929      	ldr	r1, [pc, #164]	; (8002d50 <freertos_IntroTitle+0xdc>)
 8002caa:	4823      	ldr	r0, [pc, #140]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cac:	f7ff fbbc 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8002cb0:	4928      	ldr	r1, [pc, #160]	; (8002d54 <freertos_IntroTitle+0xe0>)
 8002cb2:	4821      	ldr	r0, [pc, #132]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cb4:	f7ff fbb8 	bl	8002428 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8002cb8:	4927      	ldr	r1, [pc, #156]	; (8002d58 <freertos_IntroTitle+0xe4>)
 8002cba:	481f      	ldr	r0, [pc, #124]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cbc:	f7ff fbb4 	bl	8002428 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8002cc0:	4926      	ldr	r1, [pc, #152]	; (8002d5c <freertos_IntroTitle+0xe8>)
 8002cc2:	481d      	ldr	r0, [pc, #116]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cc4:	f7ff fbb0 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8002cc8:	4925      	ldr	r1, [pc, #148]	; (8002d60 <freertos_IntroTitle+0xec>)
 8002cca:	481b      	ldr	r0, [pc, #108]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002ccc:	f7ff fbac 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8002cd0:	4924      	ldr	r1, [pc, #144]	; (8002d64 <freertos_IntroTitle+0xf0>)
 8002cd2:	4819      	ldr	r0, [pc, #100]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cd4:	f7ff fba8 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8002cd8:	4923      	ldr	r1, [pc, #140]	; (8002d68 <freertos_IntroTitle+0xf4>)
 8002cda:	4817      	ldr	r0, [pc, #92]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cdc:	f7ff fba4 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8002ce0:	4922      	ldr	r1, [pc, #136]	; (8002d6c <freertos_IntroTitle+0xf8>)
 8002ce2:	4815      	ldr	r0, [pc, #84]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002ce4:	f7ff fba0 	bl	8002428 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8002ce8:	4921      	ldr	r1, [pc, #132]	; (8002d70 <freertos_IntroTitle+0xfc>)
 8002cea:	4813      	ldr	r0, [pc, #76]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cec:	f7ff fb9c 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8002cf0:	4920      	ldr	r1, [pc, #128]	; (8002d74 <freertos_IntroTitle+0x100>)
 8002cf2:	4811      	ldr	r0, [pc, #68]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cf4:	f7ff fb98 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8002cf8:	491f      	ldr	r1, [pc, #124]	; (8002d78 <freertos_IntroTitle+0x104>)
 8002cfa:	480f      	ldr	r0, [pc, #60]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002cfc:	f7ff fb94 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8002d00:	491e      	ldr	r1, [pc, #120]	; (8002d7c <freertos_IntroTitle+0x108>)
 8002d02:	480d      	ldr	r0, [pc, #52]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002d04:	f7ff fb90 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002d08:	491d      	ldr	r1, [pc, #116]	; (8002d80 <freertos_IntroTitle+0x10c>)
 8002d0a:	480b      	ldr	r0, [pc, #44]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002d0c:	f7ff fb8c 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8002d10:	f7ff ffa6 	bl	8002c60 <OSVersion>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	491a      	ldr	r1, [pc, #104]	; (8002d84 <freertos_IntroTitle+0x110>)
 8002d1a:	4807      	ldr	r0, [pc, #28]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002d1c:	f7ff fb84 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002d20:	4919      	ldr	r1, [pc, #100]	; (8002d88 <freertos_IntroTitle+0x114>)
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002d24:	f7ff fb80 	bl	8002428 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 8002d28:	4918      	ldr	r1, [pc, #96]	; (8002d8c <freertos_IntroTitle+0x118>)
 8002d2a:	4803      	ldr	r0, [pc, #12]	; (8002d38 <freertos_IntroTitle+0xc4>)
 8002d2c:	f7ff fb7c 	bl	8002428 <eprintf>
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	0800bc44 	.word	0x0800bc44
 8002d38:	080026e1 	.word	0x080026e1
 8002d3c:	0800bc84 	.word	0x0800bc84
 8002d40:	0800bcd8 	.word	0x0800bcd8
 8002d44:	0800bd2c 	.word	0x0800bd2c
 8002d48:	0800bd80 	.word	0x0800bd80
 8002d4c:	0800bdd4 	.word	0x0800bdd4
 8002d50:	0800be28 	.word	0x0800be28
 8002d54:	0800be7c 	.word	0x0800be7c
 8002d58:	0800bed0 	.word	0x0800bed0
 8002d5c:	0800bf24 	.word	0x0800bf24
 8002d60:	0800bf78 	.word	0x0800bf78
 8002d64:	0800bfcc 	.word	0x0800bfcc
 8002d68:	0800c020 	.word	0x0800c020
 8002d6c:	0800c074 	.word	0x0800c074
 8002d70:	0800c0c8 	.word	0x0800c0c8
 8002d74:	0800c11c 	.word	0x0800c11c
 8002d78:	0800c170 	.word	0x0800c170
 8002d7c:	0800c1c4 	.word	0x0800c1c4
 8002d80:	0800c20c 	.word	0x0800c20c
 8002d84:	0800c23c 	.word	0x0800c23c
 8002d88:	0800c280 	.word	0x0800c280
 8002d8c:	0800c2ac 	.word	0x0800c2ac

08002d90 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8002d9a:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <delay_us+0x34>)
 8002d9c:	f001 fb2e 	bl	80043fc <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <delay_us+0x34>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002da8:	bf00      	nop
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <delay_us+0x34>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d3f9      	bcc.n	8002daa <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8002db6:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <delay_us+0x34>)
 8002db8:	f001 fb90 	bl	80044dc <HAL_TIM_Base_Stop_IT>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20001e88 	.word	0x20001e88

08002dc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask!\n");
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <StartDefaultTask+0x18>)
 8002dd2:	4804      	ldr	r0, [pc, #16]	; (8002de4 <StartDefaultTask+0x1c>)
 8002dd4:	f7ff fb28 	bl	8002428 <eprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f002 ffd7 	bl	8005d8c <osDelay>
 8002dde:	e7fb      	b.n	8002dd8 <StartDefaultTask+0x10>
 8002de0:	0800c314 	.word	0x0800c314
 8002de4:	080026e1 	.word	0x080026e1

08002de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dec:	b672      	cpsid	i
}
 8002dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <Error_Handler+0x8>
	...

08002df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <HAL_MspInit+0x64>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_MspInit+0x64>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_MspInit+0x64>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_MspInit+0x64>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <HAL_MspInit+0x64>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_MspInit+0x64>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	210f      	movs	r1, #15
 8002e36:	f06f 0001 	mvn.w	r0, #1
 8002e3a:	f000 fb78 	bl	800352e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2105      	movs	r1, #5
 8002e42:	2005      	movs	r0, #5
 8002e44:	f000 fb73 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002e48:	2005      	movs	r0, #5
 8002e4a:	f000 fb8c 	bl	8003566 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <HAL_TIM_Base_MspInit+0x48>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d115      	bne.n	8002e9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8002e78:	f043 0320 	orr.w	r3, r3, #32
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2105      	movs	r1, #5
 8002e8e:	2037      	movs	r0, #55	; 0x37
 8002e90:	f000 fb4d 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e94:	2037      	movs	r0, #55	; 0x37
 8002e96:	f000 fb66 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40001400 	.word	0x40001400
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_UART_MspInit+0x94>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d133      	bne.n	8002f36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_UART_MspInit+0x98>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_UART_MspInit+0x98>)
 8002ed8:	f043 0320 	orr.w	r3, r3, #32
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_UART_MspInit+0x98>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_UART_MspInit+0x98>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_UART_MspInit+0x98>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_UART_MspInit+0x98>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f16:	2308      	movs	r3, #8
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4809      	ldr	r0, [pc, #36]	; (8002f48 <HAL_UART_MspInit+0x9c>)
 8002f22:	f000 fbcd 	bl	80036c0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2105      	movs	r1, #5
 8002f2a:	2047      	movs	r0, #71	; 0x47
 8002f2c:	f000 faff 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f30:	2047      	movs	r0, #71	; 0x47
 8002f32:	f000 fb18 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020800 	.word	0x40020800

08002f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f50:	e7fe      	b.n	8002f50 <NMI_Handler+0x4>

08002f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <HardFault_Handler+0x4>

08002f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <MemManage_Handler+0x4>

08002f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <BusFault_Handler+0x4>

08002f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <UsageFault_Handler+0x4>

08002f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <SysTick_Handler+0x2c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <SysTick_Handler+0x16>

		TimingDelay--;
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <SysTick_Handler+0x2c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <SysTick_Handler+0x2c>)
 8002f8c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f8e:	f000 f9af 	bl	80032f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f92:	f004 fc9d 	bl	80078d0 <xTaskGetSchedulerState>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f9c:	f005 fcb4 	bl	8008908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20001f28 	.word	0x20001f28

08002fa8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM7_IRQHandler+0x10>)
 8002fbe:	f001 fabc 	bl	800453a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20001e88 	.word	0x20001e88

08002fcc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <USART6_IRQHandler+0x54>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d117      	bne.n	8003010 <USART6_IRQHandler+0x44>
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <USART6_IRQHandler+0x54>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <USART6_IRQHandler+0x54>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <USART6_IRQHandler+0x58>)
 8002ff8:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <USART6_IRQHandler+0x54>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <USART6_IRQHandler+0x54>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003010:	4803      	ldr	r0, [pc, #12]	; (8003020 <USART6_IRQHandler+0x54>)
 8003012:	f001 fd41 	bl	8004a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20001ed0 	.word	0x20001ed0
 8003024:	20001f24 	.word	0x20001f24

08003028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return 1;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_kill>:

int _kill(int pid, int sig)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003042:	f006 fe6d 	bl	8009d20 <__errno>
 8003046:	4603      	mov	r3, r0
 8003048:	2216      	movs	r2, #22
 800304a:	601a      	str	r2, [r3, #0]
  return -1;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <_exit>:

void _exit (int status)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ffe7 	bl	8003038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800306a:	e7fe      	b.n	800306a <_exit+0x12>

0800306c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e00a      	b.n	8003094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800307e:	f3af 8000 	nop.w
 8003082:	4601      	mov	r1, r0
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	b2ca      	uxtb	r2, r1
 800308c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3301      	adds	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbf0      	blt.n	800307e <_read+0x12>
  }

  return len;
 800309c:	687b      	ldr	r3, [r7, #4]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e009      	b.n	80030cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dbf1      	blt.n	80030b8 <_write+0x12>
  }
  return len;
 80030d4:	687b      	ldr	r3, [r7, #4]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_close>:

int _close(int file)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003106:	605a      	str	r2, [r3, #4]
  return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <_isatty>:

int _isatty(int file)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <_sbrk+0x5c>)
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <_sbrk+0x60>)
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <_sbrk+0x64>)
 8003166:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <_sbrk+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d207      	bcs.n	8003188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003178:	f006 fdd2 	bl	8009d20 <__errno>
 800317c:	4603      	mov	r3, r0
 800317e:	220c      	movs	r2, #12
 8003180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003186:	e009      	b.n	800319c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800318e:	4b07      	ldr	r3, [pc, #28]	; (80031ac <_sbrk+0x64>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <_sbrk+0x64>)
 8003198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20020000 	.word	0x20020000
 80031a8:	00000400 	.word	0x00000400
 80031ac:	20001f2c 	.word	0x20001f2c
 80031b0:	200060f0 	.word	0x200060f0

080031b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <SystemInit+0x20>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <SystemInit+0x20>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 80031dc:	202e      	movs	r0, #46	; 0x2e
 80031de:	f006 fc03 	bl	80099e8 <putchar>
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <vApplicationIdleHook+0x1c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f006 fb15 	bl	8009818 <fflush>
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000120 	.word	0x20000120

080031f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003230 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80031fc:	f7ff ffda 	bl	80031b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003202:	490d      	ldr	r1, [pc, #52]	; (8003238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003208:	e002      	b.n	8003210 <LoopCopyDataInit>

0800320a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800320a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800320c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320e:	3304      	adds	r3, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003214:	d3f9      	bcc.n	800320a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003218:	4c0a      	ldr	r4, [pc, #40]	; (8003244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800321c:	e001      	b.n	8003222 <LoopFillZerobss>

0800321e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003220:	3204      	adds	r2, #4

08003222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003224:	d3fb      	bcc.n	800321e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003226:	f006 fd81 	bl	8009d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800322a:	f7ff fafb 	bl	8002824 <main>
  bx  lr    
 800322e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003238:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800323c:	0800c71c 	.word	0x0800c71c
  ldr r2, =_sbss
 8003240:	200008c0 	.word	0x200008c0
  ldr r4, =_ebss
 8003244:	200060f0 	.word	0x200060f0

08003248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC_IRQHandler>
	...

0800324c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_Init+0x40>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_Init+0x40>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x40>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 f94f 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	200f      	movs	r0, #15
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fdb8 	bl	8002df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f967 	bl	8003582 <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032cc:	f000 f92f 	bl	800352e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200000b8 	.word	0x200000b8
 80032e8:	200000c0 	.word	0x200000c0
 80032ec:	200000bc 	.word	0x200000bc

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	200000c0 	.word	0x200000c0
 8003314:	20001f30 	.word	0x20001f30

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20001f30 	.word	0x20001f30

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_Delay+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200000c0 	.word	0x200000c0

08003378 <__NVIC_SetPriorityGrouping>:
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033aa:	4a04      	ldr	r2, [pc, #16]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60d3      	str	r3, [r2, #12]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_GetPriorityGrouping>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_EnableIRQ>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	; (8003414 <__NVIC_EnableIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f8:	f7ff ff8e 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff29 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff3e 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff8e 	bl	800346c <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5d 	bl	8003418 <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff31 	bl	80033dc <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa2 	bl	80034d4 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff feb6 	bl	8003318 <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d008      	beq.n	80035cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e052      	b.n	8003672 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0216 	bic.w	r2, r2, #22
 80035da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <HAL_DMA_Abort+0x62>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0208 	bic.w	r2, r2, #8
 800360a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800361c:	e013      	b.n	8003646 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800361e:	f7ff fe7b 	bl	8003318 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b05      	cmp	r3, #5
 800362a:	d90c      	bls.n	8003646 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e015      	b.n	8003672 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e4      	bne.n	800361e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	223f      	movs	r2, #63	; 0x3f
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e00c      	b.n	80036b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2205      	movs	r2, #5
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e16b      	b.n	80039b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036dc:	2201      	movs	r2, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	f040 815a 	bne.w	80039ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d005      	beq.n	8003712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	2b02      	cmp	r3, #2
 8003710:	d130      	bne.n	8003774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0201 	and.w	r2, r3, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b03      	cmp	r3, #3
 800377e:	d017      	beq.n	80037b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d123      	bne.n	8003804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	08da      	lsrs	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3208      	adds	r2, #8
 80037c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	220f      	movs	r2, #15
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0203 	and.w	r2, r3, #3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80b4 	beq.w	80039ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b60      	ldr	r3, [pc, #384]	; (80039cc <HAL_GPIO_Init+0x30c>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a5f      	ldr	r2, [pc, #380]	; (80039cc <HAL_GPIO_Init+0x30c>)
 8003850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_GPIO_Init+0x30c>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003862:	4a5b      	ldr	r2, [pc, #364]	; (80039d0 <HAL_GPIO_Init+0x310>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a52      	ldr	r2, [pc, #328]	; (80039d4 <HAL_GPIO_Init+0x314>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d02b      	beq.n	80038e6 <HAL_GPIO_Init+0x226>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a51      	ldr	r2, [pc, #324]	; (80039d8 <HAL_GPIO_Init+0x318>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d025      	beq.n	80038e2 <HAL_GPIO_Init+0x222>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a50      	ldr	r2, [pc, #320]	; (80039dc <HAL_GPIO_Init+0x31c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01f      	beq.n	80038de <HAL_GPIO_Init+0x21e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_GPIO_Init+0x320>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d019      	beq.n	80038da <HAL_GPIO_Init+0x21a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_GPIO_Init+0x324>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_GPIO_Init+0x216>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_GPIO_Init+0x328>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <HAL_GPIO_Init+0x212>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_GPIO_Init+0x32c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <HAL_GPIO_Init+0x20e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_GPIO_Init+0x330>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_GPIO_Init+0x20a>
 80038c6:	2307      	movs	r3, #7
 80038c8:	e00e      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038ca:	2308      	movs	r3, #8
 80038cc:	e00c      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038ce:	2306      	movs	r3, #6
 80038d0:	e00a      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038d2:	2305      	movs	r3, #5
 80038d4:	e008      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038d6:	2304      	movs	r3, #4
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038da:	2303      	movs	r3, #3
 80038dc:	e004      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038de:	2302      	movs	r3, #2
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_GPIO_Init+0x228>
 80038e6:	2300      	movs	r3, #0
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f002 0203 	and.w	r2, r2, #3
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4093      	lsls	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f8:	4935      	ldr	r1, [pc, #212]	; (80039d0 <HAL_GPIO_Init+0x310>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_GPIO_Init+0x334>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a32      	ldr	r2, [pc, #200]	; (80039f4 <HAL_GPIO_Init+0x334>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_GPIO_Init+0x334>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <HAL_GPIO_Init+0x334>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_GPIO_Init+0x334>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_GPIO_Init+0x334>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_GPIO_Init+0x334>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a8:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <HAL_GPIO_Init+0x334>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f ae90 	bls.w	80036dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40021400 	.word	0x40021400
 80039ec:	40021800 	.word	0x40021800
 80039f0:	40021c00 	.word	0x40021c00
 80039f4:	40013c00 	.word	0x40013c00

080039f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	807b      	strh	r3, [r7, #2]
 8003a04:	4613      	mov	r3, r2
 8003a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a08:	787b      	ldrb	r3, [r7, #1]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a14:	e003      	b.n	8003a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	041a      	lsls	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	619a      	str	r2, [r3, #24]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e267      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d075      	beq.n	8003b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d112      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4b7e      	ldr	r3, [pc, #504]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e242      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x74>
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6c      	ldr	r2, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003ac4:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7ff fc18 	bl	8003318 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7ff fc14 	bl	8003318 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e207      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7ff fc04 	bl	8003318 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b14:	f7ff fc00 	bl	8003318 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1f3      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c7      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4937      	ldr	r1, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7ff fbb9 	bl	8003318 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003baa:	f7ff fbb5 	bl	8003318 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a8      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4925      	ldr	r1, [pc, #148]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7ff fb98 	bl	8003318 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7ff fb94 	bl	8003318 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e187      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7ff fb78 	bl	8003318 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7ff fb74 	bl	8003318 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e167      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x200>
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7ff fb61 	bl	8003318 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e00e      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7ff fb5d 	bl	8003318 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d907      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e150      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ea      	bne.n	8003c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8097 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b81      	ldr	r3, [pc, #516]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b7d      	ldr	r3, [pc, #500]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b77      	ldr	r3, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b74      	ldr	r3, [pc, #464]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7ff fb1d 	bl	8003318 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7ff fb19 	bl	8003318 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e10c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2ea>
 8003d08:	4b64      	ldr	r3, [pc, #400]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a63      	ldr	r2, [pc, #396]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x30c>
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a5e      	ldr	r2, [pc, #376]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d38:	4b58      	ldr	r3, [pc, #352]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7ff fade 	bl	8003318 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7ff fada 	bl	8003318 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0cb      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ee      	beq.n	8003d60 <HAL_RCC_OscConfig+0x334>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7ff fac8 	bl	8003318 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7ff fac4 	bl	8003318 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0b5      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ee      	bne.n	8003d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a1 	beq.w	8003f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d05c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d141      	bne.n	8003e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7ff fa98 	bl	8003318 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7ff fa94 	bl	8003318 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e087      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	491b      	ldr	r1, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7ff fa6d 	bl	8003318 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7ff fa69 	bl	8003318 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e05c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x416>
 8003e60:	e054      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7ff fa56 	bl	8003318 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7ff fa52 	bl	8003318 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e045      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
 8003e8e:	e03d      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e038      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4ec>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0cc      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90c      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d044      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e067      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4934      	ldr	r1, [pc, #208]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7ff f984 	bl	8003318 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7ff f980 	bl	8003318 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20c      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490a      	ldr	r1, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff f8e4 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	0800c380 	.word	0x0800c380
 80040e0:	200000b8 	.word	0x200000b8
 80040e4:	200000bc 	.word	0x200000bc

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b094      	sub	sp, #80	; 0x50
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	647b      	str	r3, [r7, #68]	; 0x44
 80040f4:	2300      	movs	r3, #0
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	2300      	movs	r3, #0
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004100:	4b79      	ldr	r3, [pc, #484]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00d      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x40>
 800410c:	2b08      	cmp	r3, #8
 800410e:	f200 80e1 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x34>
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x3a>
 800411a:	e0db      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b73      	ldr	r3, [pc, #460]	; (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004120:	e0db      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004126:	e0d8      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004132:	4b6d      	ldr	r3, [pc, #436]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d063      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	2200      	movs	r2, #0
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
 8004148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
 8004156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6139      	str	r1, [r7, #16]
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800418c:	4659      	mov	r1, fp
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4651      	mov	r1, sl
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4651      	mov	r1, sl
 800419c:	ebb2 0801 	subs.w	r8, r2, r1
 80041a0:	4659      	mov	r1, fp
 80041a2:	eb63 0901 	sbc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	462b      	mov	r3, r5
 80041c8:	eb49 0303 	adc.w	r3, r9, r3
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041da:	4629      	mov	r1, r5
 80041dc:	024b      	lsls	r3, r1, #9
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e4:	4621      	mov	r1, r4
 80041e6:	024a      	lsls	r2, r1, #9
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ee:	2200      	movs	r2, #0
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f8:	f7fc fd36 	bl	8000c68 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	e058      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	4618      	mov	r0, r3
 8004210:	4611      	mov	r1, r2
 8004212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	0159      	lsls	r1, r3, #5
 800422e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004232:	0150      	lsls	r0, r2, #5
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4641      	mov	r1, r8
 800423a:	ebb2 0a01 	subs.w	sl, r2, r1
 800423e:	4649      	mov	r1, r9
 8004240:	eb63 0b01 	sbc.w	fp, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004258:	ebb2 040a 	subs.w	r4, r2, sl
 800425c:	eb63 050b 	sbc.w	r5, r3, fp
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	00eb      	lsls	r3, r5, #3
 800426a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426e:	00e2      	lsls	r2, r4, #3
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	4643      	mov	r3, r8
 8004276:	18e3      	adds	r3, r4, r3
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	464b      	mov	r3, r9
 800427c:	eb45 0303 	adc.w	r3, r5, r3
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428e:	4629      	mov	r1, r5
 8004290:	028b      	lsls	r3, r1, #10
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004298:	4621      	mov	r1, r4
 800429a:	028a      	lsls	r2, r1, #10
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a2:	2200      	movs	r2, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	61fa      	str	r2, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	f7fc fcdc 	bl	8000c68 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3750      	adds	r7, #80	; 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	200000b8 	.word	0x200000b8

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	0800c390 	.word	0x0800c390

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	0800c390 	.word	0x0800c390

0800435c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e041      	b.n	80043f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fe fd6a 	bl	8002e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 f9f0 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04e      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d01d      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <HAL_TIM_Base_Start_IT+0xd0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d111      	bne.n	80044a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d010      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	e007      	b.n	80044b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800

080044dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <HAL_TIM_Base_Stop_IT+0x48>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	f240 4344 	movw	r3, #1092	; 0x444
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d107      	bne.n	8004524 <HAL_TIM_Base_Stop_IT+0x48>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d020      	beq.n	800459e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01b      	beq.n	800459e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f06f 0202 	mvn.w	r2, #2
 800456e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8dc 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 800458a:	e005      	b.n	8004598 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8ce 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8df 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01b      	beq.n	80045ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0204 	mvn.w	r2, #4
 80045ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8b6 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 80045d6:	e005      	b.n	80045e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8a8 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8b9 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01b      	beq.n	8004636 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0208 	mvn.w	r2, #8
 8004606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2204      	movs	r2, #4
 800460c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f890 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004622:	e005      	b.n	8004630 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f882 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f893 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01b      	beq.n	8004682 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0210 	mvn.w	r2, #16
 8004652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2208      	movs	r2, #8
 8004658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f86a 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 800466e:	e005      	b.n	800467c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f85c 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f86d 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0201 	mvn.w	r2, #1
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f83a 	bl	800471a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f98d 	bl	80049e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f83e 	bl	800476a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 0220 	mvn.w	r2, #32
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f95f 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a46      	ldr	r2, [pc, #280]	; (80048ac <TIM_Base_SetConfig+0x12c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d00f      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a43      	ldr	r2, [pc, #268]	; (80048b0 <TIM_Base_SetConfig+0x130>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a42      	ldr	r2, [pc, #264]	; (80048b4 <TIM_Base_SetConfig+0x134>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a41      	ldr	r2, [pc, #260]	; (80048b8 <TIM_Base_SetConfig+0x138>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a40      	ldr	r2, [pc, #256]	; (80048bc <TIM_Base_SetConfig+0x13c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a35      	ldr	r2, [pc, #212]	; (80048ac <TIM_Base_SetConfig+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d02b      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e0:	d027      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a32      	ldr	r2, [pc, #200]	; (80048b0 <TIM_Base_SetConfig+0x130>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d023      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a31      	ldr	r2, [pc, #196]	; (80048b4 <TIM_Base_SetConfig+0x134>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01f      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a30      	ldr	r2, [pc, #192]	; (80048b8 <TIM_Base_SetConfig+0x138>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01b      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2f      	ldr	r2, [pc, #188]	; (80048bc <TIM_Base_SetConfig+0x13c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d017      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2e      	ldr	r2, [pc, #184]	; (80048c0 <TIM_Base_SetConfig+0x140>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <TIM_Base_SetConfig+0x144>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00f      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <TIM_Base_SetConfig+0x148>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <TIM_Base_SetConfig+0x14c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <TIM_Base_SetConfig+0x150>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <TIM_Base_SetConfig+0x154>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a10      	ldr	r2, [pc, #64]	; (80048ac <TIM_Base_SetConfig+0x12c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0xf8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <TIM_Base_SetConfig+0x13c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d105      	bne.n	800489e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
  }
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40010400 	.word	0x40010400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800
 80048cc:	40001800 	.word	0x40001800
 80048d0:	40001c00 	.word	0x40001c00
 80048d4:	40002000 	.word	0x40002000

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e05a      	b.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a18      	ldr	r2, [pc, #96]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10c      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40001800 	.word	0x40001800

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e042      	b.n	8004a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fe fa44 	bl	8002eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	; 0x24
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fc85 	bl	800534c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b0ba      	sub	sp, #232	; 0xe8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10f      	bne.n	8004afe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_UART_IRQHandler+0x66>
 8004aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb69 	bl	80051ce <UART_Receive_IT>
      return;
 8004afc:	e25b      	b.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80de 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x22c>
 8004b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80d1 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <HAL_UART_IRQHandler+0xae>
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_UART_IRQHandler+0xd2>
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_UART_IRQHandler+0xf6>
 8004b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f043 0204 	orr.w	r2, r3, #4
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d011      	beq.n	8004bbe <HAL_UART_IRQHandler+0x126>
 8004b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f043 0208 	orr.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 81f2 	beq.w	8004fac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_UART_IRQHandler+0x14e>
 8004bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 faf4 	bl	80051ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <HAL_UART_IRQHandler+0x17a>
 8004c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d04f      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f9fc 	bl	8005010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d141      	bne.n	8004caa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1d9      	bne.n	8004c26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d013      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	; (8004e78 <HAL_UART_IRQHandler+0x3e0>)
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fcf7 	bl	800367a <HAL_DMA_Abort_IT>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d016      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e00e      	b.n	8004cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f99e 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e00a      	b.n	8004cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f99a 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e006      	b.n	8004cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f996 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cbe:	e175      	b.n	8004fac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	bf00      	nop
    return;
 8004cc2:	e173      	b.n	8004fac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	f040 814f 	bne.w	8004f6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8148 	beq.w	8004f6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8141 	beq.w	8004f6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	f040 80b6 	bne.w	8004e7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8145 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f080 813e 	bcs.w	8004fb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	f000 8088 	beq.w	8004e5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1d9      	bne.n	8004d4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e1      	bne.n	8004d96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3314      	adds	r3, #20
 8004df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004df6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e3      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2a:	f023 0310 	bic.w	r3, r3, #16
 8004e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e3      	bne.n	8004e18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe fba0 	bl	800359a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8c1 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e76:	e09b      	b.n	8004fb0 <HAL_UART_IRQHandler+0x518>
 8004e78:	080050d7 	.word	0x080050d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 808e 	beq.w	8004fb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8089 	beq.w	8004fb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e3      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004efe:	633a      	str	r2, [r7, #48]	; 0x30
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e3      	bne.n	8004eda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f44:	61fa      	str	r2, [r7, #28]
 8004f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	617b      	str	r3, [r7, #20]
   return(result);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e3      	bne.n	8004f20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f847 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f6a:	e023      	b.n	8004fb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d009      	beq.n	8004f8c <HAL_UART_IRQHandler+0x4f4>
 8004f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8ba 	bl	80050fe <UART_Transmit_IT>
    return;
 8004f8a:	e014      	b.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f8fa 	bl	800519e <UART_EndTransmit_IT>
    return;
 8004faa:	e004      	b.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fac:	bf00      	nop
 8004fae:	e002      	b.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fb4:	bf00      	nop
  }
}
 8004fb6:	37e8      	adds	r7, #232	; 0xe8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b095      	sub	sp, #84	; 0x54
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005038:	643a      	str	r2, [r7, #64]	; 0x40
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800503e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	61fb      	str	r3, [r7, #28]
   return(result);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e5      	bne.n	800504c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b01      	cmp	r3, #1
 8005086:	d119      	bne.n	80050bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60bb      	str	r3, [r7, #8]
   return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	647b      	str	r3, [r7, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a8:	61ba      	str	r2, [r7, #24]
 80050aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ca:	bf00      	nop
 80050cc:	3754      	adds	r7, #84	; 0x54
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff77 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b21      	cmp	r3, #33	; 0x21
 8005110:	d13e      	bne.n	8005190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d114      	bne.n	8005146 <UART_Transmit_IT+0x48>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d110      	bne.n	8005146 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]
 8005144:	e008      	b.n	8005158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6211      	str	r1, [r2, #32]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4619      	mov	r1, r3
 8005166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10f      	bne.n	800518c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800517a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fefc 	bl	8004fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08c      	sub	sp, #48	; 0x30
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b22      	cmp	r3, #34	; 0x22
 80051e0:	f040 80ae 	bne.w	8005340 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ec:	d117      	bne.n	800521e <UART_Receive_IT+0x50>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d113      	bne.n	800521e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520c:	b29a      	uxth	r2, r3
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
 800521c:	e026      	b.n	800526c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005230:	d007      	beq.n	8005242 <UART_Receive_IT+0x74>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <UART_Receive_IT+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e008      	b.n	8005262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29b      	uxth	r3, r3
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4619      	mov	r1, r3
 800527a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800527c:	2b00      	cmp	r3, #0
 800527e:	d15d      	bne.n	800533c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0220 	bic.w	r2, r2, #32
 800528e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d135      	bne.n	8005332 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	613b      	str	r3, [r7, #16]
   return(result);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 0310 	bic.w	r3, r3, #16
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ec:	623a      	str	r2, [r7, #32]
 80052ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	69f9      	ldr	r1, [r7, #28]
 80052f2:	6a3a      	ldr	r2, [r7, #32]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b10      	cmp	r3, #16
 800530c:	d10a      	bne.n	8005324 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fe64 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
 8005330:	e002      	b.n	8005338 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fe4c 	bl	8004fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e002      	b.n	8005342 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005350:	b0c0      	sub	sp, #256	; 0x100
 8005352:	af00      	add	r7, sp, #0
 8005354:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	68d9      	ldr	r1, [r3, #12]
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	ea40 0301 	orr.w	r3, r0, r1
 8005374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	431a      	orrs	r2, r3
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	431a      	orrs	r2, r3
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053a4:	f021 010c 	bic.w	r1, r1, #12
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053b2:	430b      	orrs	r3, r1
 80053b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	6999      	ldr	r1, [r3, #24]
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	ea40 0301 	orr.w	r3, r0, r1
 80053d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b8f      	ldr	r3, [pc, #572]	; (8005618 <UART_SetConfig+0x2cc>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d005      	beq.n	80053ec <UART_SetConfig+0xa0>
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b8d      	ldr	r3, [pc, #564]	; (800561c <UART_SetConfig+0x2d0>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d104      	bne.n	80053f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053ec:	f7fe ffa2 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80053f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053f4:	e003      	b.n	80053fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053f6:	f7fe ff89 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 80053fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005408:	f040 810c 	bne.w	8005624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800540c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005410:	2200      	movs	r2, #0
 8005412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800541a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	1891      	adds	r1, r2, r2
 8005424:	65b9      	str	r1, [r7, #88]	; 0x58
 8005426:	415b      	adcs	r3, r3
 8005428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800542e:	4621      	mov	r1, r4
 8005430:	eb12 0801 	adds.w	r8, r2, r1
 8005434:	4629      	mov	r1, r5
 8005436:	eb43 0901 	adc.w	r9, r3, r1
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800544e:	4690      	mov	r8, r2
 8005450:	4699      	mov	r9, r3
 8005452:	4623      	mov	r3, r4
 8005454:	eb18 0303 	adds.w	r3, r8, r3
 8005458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800545c:	462b      	mov	r3, r5
 800545e:	eb49 0303 	adc.w	r3, r9, r3
 8005462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800547a:	460b      	mov	r3, r1
 800547c:	18db      	adds	r3, r3, r3
 800547e:	653b      	str	r3, [r7, #80]	; 0x50
 8005480:	4613      	mov	r3, r2
 8005482:	eb42 0303 	adc.w	r3, r2, r3
 8005486:	657b      	str	r3, [r7, #84]	; 0x54
 8005488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800548c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005490:	f7fb fbea 	bl	8000c68 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4b61      	ldr	r3, [pc, #388]	; (8005620 <UART_SetConfig+0x2d4>)
 800549a:	fba3 2302 	umull	r2, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	011c      	lsls	r4, r3, #4
 80054a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80054bc:	415b      	adcs	r3, r3
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054c4:	4641      	mov	r1, r8
 80054c6:	eb12 0a01 	adds.w	sl, r2, r1
 80054ca:	4649      	mov	r1, r9
 80054cc:	eb43 0b01 	adc.w	fp, r3, r1
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e4:	4692      	mov	sl, r2
 80054e6:	469b      	mov	fp, r3
 80054e8:	4643      	mov	r3, r8
 80054ea:	eb1a 0303 	adds.w	r3, sl, r3
 80054ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054f2:	464b      	mov	r3, r9
 80054f4:	eb4b 0303 	adc.w	r3, fp, r3
 80054f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800550c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005510:	460b      	mov	r3, r1
 8005512:	18db      	adds	r3, r3, r3
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
 8005516:	4613      	mov	r3, r2
 8005518:	eb42 0303 	adc.w	r3, r2, r3
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
 800551e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005526:	f7fb fb9f 	bl	8000c68 <__aeabi_uldivmod>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4611      	mov	r1, r2
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <UART_SetConfig+0x2d4>)
 8005532:	fba3 2301 	umull	r2, r3, r3, r1
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2264      	movs	r2, #100	; 0x64
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	1acb      	subs	r3, r1, r3
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005546:	4b36      	ldr	r3, [pc, #216]	; (8005620 <UART_SetConfig+0x2d4>)
 8005548:	fba3 2302 	umull	r2, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005554:	441c      	add	r4, r3
 8005556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555a:	2200      	movs	r2, #0
 800555c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	1891      	adds	r1, r2, r2
 800556e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005570:	415b      	adcs	r3, r3
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005578:	4641      	mov	r1, r8
 800557a:	1851      	adds	r1, r2, r1
 800557c:	6339      	str	r1, [r7, #48]	; 0x30
 800557e:	4649      	mov	r1, r9
 8005580:	414b      	adcs	r3, r1
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005590:	4659      	mov	r1, fp
 8005592:	00cb      	lsls	r3, r1, #3
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559a:	4651      	mov	r1, sl
 800559c:	00ca      	lsls	r2, r1, #3
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	4642      	mov	r2, r8
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ac:	464b      	mov	r3, r9
 80055ae:	460a      	mov	r2, r1
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055cc:	460b      	mov	r3, r1
 80055ce:	18db      	adds	r3, r3, r3
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d2:	4613      	mov	r3, r2
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055e2:	f7fb fb41 	bl	8000c68 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <UART_SetConfig+0x2d4>)
 80055ec:	fba3 1302 	umull	r1, r3, r3, r2
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	2164      	movs	r1, #100	; 0x64
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	3332      	adds	r3, #50	; 0x32
 80055fe:	4a08      	ldr	r2, [pc, #32]	; (8005620 <UART_SetConfig+0x2d4>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f003 0207 	and.w	r2, r3, #7
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4422      	add	r2, r4
 8005612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005614:	e106      	b.n	8005824 <UART_SetConfig+0x4d8>
 8005616:	bf00      	nop
 8005618:	40011000 	.word	0x40011000
 800561c:	40011400 	.word	0x40011400
 8005620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800562e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005636:	4642      	mov	r2, r8
 8005638:	464b      	mov	r3, r9
 800563a:	1891      	adds	r1, r2, r2
 800563c:	6239      	str	r1, [r7, #32]
 800563e:	415b      	adcs	r3, r3
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
 8005642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005646:	4641      	mov	r1, r8
 8005648:	1854      	adds	r4, r2, r1
 800564a:	4649      	mov	r1, r9
 800564c:	eb43 0501 	adc.w	r5, r3, r1
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	00eb      	lsls	r3, r5, #3
 800565a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800565e:	00e2      	lsls	r2, r4, #3
 8005660:	4614      	mov	r4, r2
 8005662:	461d      	mov	r5, r3
 8005664:	4643      	mov	r3, r8
 8005666:	18e3      	adds	r3, r4, r3
 8005668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800566c:	464b      	mov	r3, r9
 800566e:	eb45 0303 	adc.w	r3, r5, r3
 8005672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005692:	4629      	mov	r1, r5
 8005694:	008b      	lsls	r3, r1, #2
 8005696:	4621      	mov	r1, r4
 8005698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569c:	4621      	mov	r1, r4
 800569e:	008a      	lsls	r2, r1, #2
 80056a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056a4:	f7fb fae0 	bl	8000c68 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b60      	ldr	r3, [pc, #384]	; (8005830 <UART_SetConfig+0x4e4>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	011c      	lsls	r4, r3, #4
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	61b9      	str	r1, [r7, #24]
 80056d0:	415b      	adcs	r3, r3
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d8:	4641      	mov	r1, r8
 80056da:	1851      	adds	r1, r2, r1
 80056dc:	6139      	str	r1, [r7, #16]
 80056de:	4649      	mov	r1, r9
 80056e0:	414b      	adcs	r3, r1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f0:	4659      	mov	r1, fp
 80056f2:	00cb      	lsls	r3, r1, #3
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fa:	4651      	mov	r1, sl
 80056fc:	00ca      	lsls	r2, r1, #3
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	4603      	mov	r3, r0
 8005704:	4642      	mov	r2, r8
 8005706:	189b      	adds	r3, r3, r2
 8005708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800570c:	464b      	mov	r3, r9
 800570e:	460a      	mov	r2, r1
 8005710:	eb42 0303 	adc.w	r3, r2, r3
 8005714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	67bb      	str	r3, [r7, #120]	; 0x78
 8005722:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005730:	4649      	mov	r1, r9
 8005732:	008b      	lsls	r3, r1, #2
 8005734:	4641      	mov	r1, r8
 8005736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573a:	4641      	mov	r1, r8
 800573c:	008a      	lsls	r2, r1, #2
 800573e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005742:	f7fb fa91 	bl	8000c68 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4611      	mov	r1, r2
 800574c:	4b38      	ldr	r3, [pc, #224]	; (8005830 <UART_SetConfig+0x4e4>)
 800574e:	fba3 2301 	umull	r2, r3, r3, r1
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2264      	movs	r2, #100	; 0x64
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	1acb      	subs	r3, r1, r3
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	3332      	adds	r3, #50	; 0x32
 8005760:	4a33      	ldr	r2, [pc, #204]	; (8005830 <UART_SetConfig+0x4e4>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576c:	441c      	add	r4, r3
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	673b      	str	r3, [r7, #112]	; 0x70
 8005776:	677a      	str	r2, [r7, #116]	; 0x74
 8005778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	1891      	adds	r1, r2, r2
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	415b      	adcs	r3, r3
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800578c:	4641      	mov	r1, r8
 800578e:	1851      	adds	r1, r2, r1
 8005790:	6039      	str	r1, [r7, #0]
 8005792:	4649      	mov	r1, r9
 8005794:	414b      	adcs	r3, r1
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057a4:	4659      	mov	r1, fp
 80057a6:	00cb      	lsls	r3, r1, #3
 80057a8:	4651      	mov	r1, sl
 80057aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ae:	4651      	mov	r1, sl
 80057b0:	00ca      	lsls	r2, r1, #3
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	4642      	mov	r2, r8
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80057be:	464b      	mov	r3, r9
 80057c0:	460a      	mov	r2, r1
 80057c2:	eb42 0303 	adc.w	r3, r2, r3
 80057c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	663b      	str	r3, [r7, #96]	; 0x60
 80057d2:	667a      	str	r2, [r7, #100]	; 0x64
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057e0:	4649      	mov	r1, r9
 80057e2:	008b      	lsls	r3, r1, #2
 80057e4:	4641      	mov	r1, r8
 80057e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ea:	4641      	mov	r1, r8
 80057ec:	008a      	lsls	r2, r1, #2
 80057ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057f2:	f7fb fa39 	bl	8000c68 <__aeabi_uldivmod>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <UART_SetConfig+0x4e4>)
 80057fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	2164      	movs	r1, #100	; 0x64
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	3332      	adds	r3, #50	; 0x32
 800580e:	4a08      	ldr	r2, [pc, #32]	; (8005830 <UART_SetConfig+0x4e4>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	f003 020f 	and.w	r2, r3, #15
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4422      	add	r2, r4
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005830:	51eb851f 	.word	0x51eb851f

08005834 <LL_GPIO_SetPinMode>:
{
 8005834:	b480      	push	{r7}
 8005836:	b08b      	sub	sp, #44	; 0x2c
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	fa93 f3a3 	rbit	r3, r3
 800584e:	613b      	str	r3, [r7, #16]
  return result;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800585a:	2320      	movs	r3, #32
 800585c:	e003      	b.n	8005866 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	fab3 f383 	clz	r3, r3
 8005864:	b2db      	uxtb	r3, r3
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	2103      	movs	r1, #3
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	401a      	ands	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	61fb      	str	r3, [r7, #28]
  return result;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005888:	2320      	movs	r3, #32
 800588a:	e003      	b.n	8005894 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]
}
 80058a2:	bf00      	nop
 80058a4:	372c      	adds	r7, #44	; 0x2c
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_GPIO_SetPinOutputType>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	431a      	orrs	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <LL_GPIO_SetPinSpeed>:
{
 80058de:	b480      	push	{r7}
 80058e0:	b08b      	sub	sp, #44	; 0x2c
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	fa93 f3a3 	rbit	r3, r3
 80058f8:	613b      	str	r3, [r7, #16]
  return result;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005904:	2320      	movs	r3, #32
 8005906:	e003      	b.n	8005910 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	2103      	movs	r1, #3
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	401a      	ands	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	61fb      	str	r3, [r7, #28]
  return result;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005932:	2320      	movs	r3, #32
 8005934:	e003      	b.n	800593e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	431a      	orrs	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	372c      	adds	r7, #44	; 0x2c
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <LL_GPIO_SetPinPull>:
{
 8005958:	b480      	push	{r7}
 800595a:	b08b      	sub	sp, #44	; 0x2c
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	fa93 f3a3 	rbit	r3, r3
 8005972:	613b      	str	r3, [r7, #16]
  return result;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800597e:	2320      	movs	r3, #32
 8005980:	e003      	b.n	800598a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	fab3 f383 	clz	r3, r3
 8005988:	b2db      	uxtb	r3, r3
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	2103      	movs	r1, #3
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	401a      	ands	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	fa93 f3a3 	rbit	r3, r3
 80059a0:	61fb      	str	r3, [r7, #28]
  return result;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80059ac:	2320      	movs	r3, #32
 80059ae:	e003      	b.n	80059b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	fab3 f383 	clz	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	fa01 f303 	lsl.w	r3, r1, r3
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	60da      	str	r2, [r3, #12]
}
 80059c6:	bf00      	nop
 80059c8:	372c      	adds	r7, #44	; 0x2c
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_GPIO_SetAFPin_0_7>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	b08b      	sub	sp, #44	; 0x2c
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	fa93 f3a3 	rbit	r3, r3
 80059ec:	613b      	str	r3, [r7, #16]
  return result;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80059f8:	2320      	movs	r3, #32
 80059fa:	e003      	b.n	8005a04 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	fab3 f383 	clz	r3, r3
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	210f      	movs	r1, #15
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	401a      	ands	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	fa93 f3a3 	rbit	r3, r3
 8005a1a:	61fb      	str	r3, [r7, #28]
  return result;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005a26:	2320      	movs	r3, #32
 8005a28:	e003      	b.n	8005a32 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	fab3 f383 	clz	r3, r3
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]
}
 8005a40:	bf00      	nop
 8005a42:	372c      	adds	r7, #44	; 0x2c
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <LL_GPIO_SetAFPin_8_15>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b08b      	sub	sp, #44	; 0x2c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	fa93 f3a3 	rbit	r3, r3
 8005a68:	613b      	str	r3, [r7, #16]
  return result;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005a74:	2320      	movs	r3, #32
 8005a76:	e003      	b.n	8005a80 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	fab3 f383 	clz	r3, r3
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	210f      	movs	r1, #15
 8005a84:	fa01 f303 	lsl.w	r3, r1, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	fa93 f3a3 	rbit	r3, r3
 8005a98:	61fb      	str	r3, [r7, #28]
  return result;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	e003      	b.n	8005ab0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	fab3 f383 	clz	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005abe:	bf00      	nop
 8005ac0:	372c      	adds	r7, #44	; 0x2c
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b08a      	sub	sp, #40	; 0x28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	fa93 f3a3 	rbit	r3, r3
 8005ae8:	617b      	str	r3, [r7, #20]
  return result;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <LL_GPIO_Init+0x2e>
    return 32U;
 8005af4:	2320      	movs	r3, #32
 8005af6:	e003      	b.n	8005b00 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	fab3 f383 	clz	r3, r3
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005b02:	e057      	b.n	8005bb4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	4013      	ands	r3, r2
 8005b12:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d049      	beq.n	8005bae <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d003      	beq.n	8005b2a <LL_GPIO_Init+0x60>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d10d      	bne.n	8005b46 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6a39      	ldr	r1, [r7, #32]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fed3 	bl	80058de <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6a39      	ldr	r1, [r7, #32]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff feb4 	bl	80058ae <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	6a39      	ldr	r1, [r7, #32]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff ff02 	bl	8005958 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d121      	bne.n	8005ba0 <LL_GPIO_Init+0xd6>
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	fa93 f3a3 	rbit	r3, r3
 8005b66:	60bb      	str	r3, [r7, #8]
  return result;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <LL_GPIO_Init+0xac>
    return 32U;
 8005b72:	2320      	movs	r3, #32
 8005b74:	e003      	b.n	8005b7e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	fab3 f383 	clz	r3, r3
 8005b7c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005b7e:	2b07      	cmp	r3, #7
 8005b80:	d807      	bhi.n	8005b92 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6a39      	ldr	r1, [r7, #32]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff21 	bl	80059d2 <LL_GPIO_SetAFPin_0_7>
 8005b90:	e006      	b.n	8005ba0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6a39      	ldr	r1, [r7, #32]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff56 	bl	8005a4c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6a39      	ldr	r1, [r7, #32]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fe43 	bl	8005834 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1a0      	bne.n	8005b04 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <LL_SPI_IsEnabled>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d101      	bne.n	8005be4 <LL_SPI_IsEnabled+0x18>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <LL_SPI_IsEnabled+0x1a>
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <LL_SPI_SetCRCPolynomial>:
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	611a      	str	r2, [r3, #16]
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ffd3 	bl	8005bcc <LL_SPI_IsEnabled>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d139      	bne.n	8005ca0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c34:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	6811      	ldr	r1, [r2, #0]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	6852      	ldr	r2, [r2, #4]
 8005c40:	4311      	orrs	r1, r2
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	6892      	ldr	r2, [r2, #8]
 8005c46:	4311      	orrs	r1, r2
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	68d2      	ldr	r2, [r2, #12]
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	6912      	ldr	r2, [r2, #16]
 8005c52:	4311      	orrs	r1, r2
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	6952      	ldr	r2, [r2, #20]
 8005c58:	4311      	orrs	r1, r2
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	6992      	ldr	r2, [r2, #24]
 8005c5e:	4311      	orrs	r1, r2
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	69d2      	ldr	r2, [r2, #28]
 8005c64:	4311      	orrs	r1, r2
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	6a12      	ldr	r2, [r2, #32]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f023 0204 	bic.w	r2, r3, #4
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	d105      	bne.n	8005c9c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff ffab 	bl	8005bf2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	61da      	str	r2, [r3, #28]
  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc8:	2b84      	cmp	r3, #132	; 0x84
 8005cca:	d005      	beq.n	8005cd8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ccc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3303      	adds	r3, #3
 8005cd6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cea:	f001 f95f 	bl	8006fac <vTaskStartScheduler>
  
  return osOK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf6:	b089      	sub	sp, #36	; 0x24
 8005cf8:	af04      	add	r7, sp, #16
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d020      	beq.n	8005d48 <osThreadCreate+0x54>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01c      	beq.n	8005d48 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685c      	ldr	r4, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691e      	ldr	r6, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ffc8 	bl	8005cb6 <makeFreeRtosPriority>
 8005d26:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d30:	9202      	str	r2, [sp, #8]
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	9100      	str	r1, [sp, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	4632      	mov	r2, r6
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 ff45 	bl	8006bcc <xTaskCreateStatic>
 8005d42:	4603      	mov	r3, r0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e01c      	b.n	8005d82 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685c      	ldr	r4, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d54:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ffaa 	bl	8005cb6 <makeFreeRtosPriority>
 8005d62:	4602      	mov	r2, r0
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	9200      	str	r2, [sp, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4632      	mov	r2, r6
 8005d70:	4629      	mov	r1, r5
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 ff87 	bl	8006c86 <xTaskCreate>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d82:	68fb      	ldr	r3, [r7, #12]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d8c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <osDelay+0x30>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	099b      	lsrs	r3, r3, #6
 8005d9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <osDelay+0x1e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	e000      	b.n	8005dac <osDelay+0x20>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 f8c9 	bl	8006f44 <vTaskDelay>
  
  return osOK;
 8005db2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	10624dd3 	.word	0x10624dd3

08005dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f103 0208 	add.w	r2, r3, #8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f103 0208 	add.w	r2, r3, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 0208 	add.w	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e78:	d103      	bne.n	8005e82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e00c      	b.n	8005e9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3308      	adds	r3, #8
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e002      	b.n	8005e90 <vListInsert+0x2e>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d2f6      	bcs.n	8005e8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6892      	ldr	r2, [r2, #8]
 8005eea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6852      	ldr	r2, [r2, #4]
 8005ef4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d103      	bne.n	8005f08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	1e5a      	subs	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <xQueueGenericReset+0x2a>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	60bb      	str	r3, [r7, #8]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f52:	f002 fc47 	bl	80087e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	441a      	add	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	3b01      	subs	r3, #1
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	441a      	add	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	22ff      	movs	r2, #255	; 0xff
 8005f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	22ff      	movs	r2, #255	; 0xff
 8005f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d114      	bne.n	8005fd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01a      	beq.n	8005fe6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3310      	adds	r3, #16
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fac9 	bl	800754c <xTaskRemoveFromEventList>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <xQueueGenericReset+0xcc>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e009      	b.n	8005fe6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3310      	adds	r3, #16
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fef2 	bl	8005dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3324      	adds	r3, #36	; 0x24
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff feed 	bl	8005dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fe6:	f002 fc2d 	bl	8008844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fea:	2301      	movs	r3, #1
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08e      	sub	sp, #56	; 0x38
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10a      	bne.n	8006022 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <xQueueGenericCreateStatic+0x52>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <xQueueGenericCreateStatic+0x56>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <xQueueGenericCreateStatic+0x58>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	623b      	str	r3, [r7, #32]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <xQueueGenericCreateStatic+0x7e>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <xQueueGenericCreateStatic+0x82>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueGenericCreateStatic+0x84>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	61fb      	str	r3, [r7, #28]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006096:	2350      	movs	r3, #80	; 0x50
 8006098:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b50      	cmp	r3, #80	; 0x50
 800609e:	d00a      	beq.n	80060b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	61bb      	str	r3, [r7, #24]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f805 	bl	80060e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3730      	adds	r7, #48	; 0x30
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e002      	b.n	800610a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006116:	2101      	movs	r1, #1
 8006118:	69b8      	ldr	r0, [r7, #24]
 800611a:	f7ff ff05 	bl	8005f28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800614e:	2300      	movs	r3, #0
 8006150:	2200      	movs	r2, #0
 8006152:	2100      	movs	r1, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f81f 	bl	8006198 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006162:	b580      	push	{r7, lr}
 8006164:	b088      	sub	sp, #32
 8006166:	af02      	add	r7, sp, #8
 8006168:	4603      	mov	r3, r0
 800616a:	6039      	str	r1, [r7, #0]
 800616c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	6939      	ldr	r1, [r7, #16]
 8006180:	6978      	ldr	r0, [r7, #20]
 8006182:	f7ff ff39 	bl	8005ff8 <xQueueGenericCreateStatic>
 8006186:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff ffd0 	bl	800612e <prvInitialiseMutex>

		return xNewQueue;
 800618e:	68fb      	ldr	r3, [r7, #12]
	}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08e      	sub	sp, #56	; 0x38
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061a6:	2300      	movs	r3, #0
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericSend+0x32>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <xQueueGenericSend+0x40>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <xQueueGenericSend+0x44>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <xQueueGenericSend+0x46>
 80061dc:	2300      	movs	r3, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <xQueueGenericSend+0x60>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSend+0x6e>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <xQueueGenericSend+0x72>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueGenericSend+0x74>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericSend+0x8e>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	623b      	str	r3, [r7, #32]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006226:	f001 fb53 	bl	80078d0 <xTaskGetSchedulerState>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <xQueueGenericSend+0x9e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueGenericSend+0xa2>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueGenericSend+0xa4>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericSend+0xbe>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61fb      	str	r3, [r7, #28]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006256:	f002 fac5 	bl	80087e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <xQueueGenericSend+0xd4>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d129      	bne.n	80062c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006272:	f000 fb3d 	bl	80068f0 <prvCopyDataToQueue>
 8006276:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d010      	beq.n	80062a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f961 	bl	800754c <xTaskRemoveFromEventList>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006290:	4b3f      	ldr	r3, [pc, #252]	; (8006390 <xQueueGenericSend+0x1f8>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	e00a      	b.n	80062b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062a8:	4b39      	ldr	r3, [pc, #228]	; (8006390 <xQueueGenericSend+0x1f8>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062b8:	f002 fac4 	bl	8008844 <vPortExitCritical>
				return pdPASS;
 80062bc:	2301      	movs	r3, #1
 80062be:	e063      	b.n	8006388 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062c6:	f002 fabd 	bl	8008844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e05c      	b.n	8006388 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 f999 	bl	8007610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e2:	f002 faaf 	bl	8008844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e6:	f000 fed3 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ea:	f002 fa7b 	bl	80087e4 <vPortEnterCritical>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fa:	d103      	bne.n	8006304 <xQueueGenericSend+0x16c>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800630a:	b25b      	sxtb	r3, r3
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006310:	d103      	bne.n	800631a <xQueueGenericSend+0x182>
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631a:	f002 fa93 	bl	8008844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f988 	bl	800763c <xTaskCheckForTimeOut>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d124      	bne.n	800637c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006334:	f000 fbd4 	bl	8006ae0 <prvIsQueueFull>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d018      	beq.n	8006370 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	3310      	adds	r3, #16
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f001 f8b0 	bl	80074ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800634c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634e:	f000 fb5f 	bl	8006a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006352:	f000 feab 	bl	80070ac <xTaskResumeAll>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	f47f af7c 	bne.w	8006256 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <xQueueGenericSend+0x1f8>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	e772      	b.n	8006256 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006372:	f000 fb4d 	bl	8006a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006376:	f000 fe99 	bl	80070ac <xTaskResumeAll>
 800637a:	e76c      	b.n	8006256 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800637c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800637e:	f000 fb47 	bl	8006a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006382:	f000 fe93 	bl	80070ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006386:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006388:	4618      	mov	r0, r3
 800638a:	3738      	adds	r7, #56	; 0x38
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b090      	sub	sp, #64	; 0x40
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <xQueueGenericSendFromISR+0x3c>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <xQueueGenericSendFromISR+0x40>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <xQueueGenericSendFromISR+0x42>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSendFromISR+0x6a>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <xQueueGenericSendFromISR+0x6e>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericSendFromISR+0x70>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800641e:	f002 fabd 	bl	800899c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006422:	f3ef 8211 	mrs	r2, BASEPRI
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800643a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <xQueueGenericSendFromISR+0xbc>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d12f      	bne.n	80064b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006466:	f000 fa43 	bl	80068f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800646a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006472:	d112      	bne.n	800649a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d016      	beq.n	80064aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	3324      	adds	r3, #36	; 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f001 f863 	bl	800754c <xTaskRemoveFromEventList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e007      	b.n	80064aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800649a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800649e:	3301      	adds	r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	b25a      	sxtb	r2, r3
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064aa:	2301      	movs	r3, #1
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064ae:	e001      	b.n	80064b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3740      	adds	r7, #64	; 0x40
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <xQueueReceive+0x30>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	623b      	str	r3, [r7, #32]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <xQueueReceive+0x3e>
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <xQueueReceive+0x42>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <xQueueReceive+0x44>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <xQueueReceive+0x5e>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61fb      	str	r3, [r7, #28]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800652a:	f001 f9d1 	bl	80078d0 <xTaskGetSchedulerState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xQueueReceive+0x6e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueReceive+0x72>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueReceive+0x74>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <xQueueReceive+0x8e>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	61bb      	str	r3, [r7, #24]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655a:	f002 f943 	bl	80087e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01f      	beq.n	80065aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656e:	f000 fa29 	bl	80069c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00f      	beq.n	80065a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	3310      	adds	r3, #16
 8006586:	4618      	mov	r0, r3
 8006588:	f000 ffe0 	bl	800754c <xTaskRemoveFromEventList>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006592:	4b3d      	ldr	r3, [pc, #244]	; (8006688 <xQueueReceive+0x1bc>)
 8006594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065a2:	f002 f94f 	bl	8008844 <vPortExitCritical>
				return pdPASS;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e069      	b.n	800667e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b0:	f002 f948 	bl	8008844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e062      	b.n	800667e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065be:	f107 0310 	add.w	r3, r7, #16
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f824 	bl	8007610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065cc:	f002 f93a 	bl	8008844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d0:	f000 fd5e 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d4:	f002 f906 	bl	80087e4 <vPortEnterCritical>
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e4:	d103      	bne.n	80065ee <xQueueReceive+0x122>
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fa:	d103      	bne.n	8006604 <xQueueReceive+0x138>
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006604:	f002 f91e 	bl	8008844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006608:	1d3a      	adds	r2, r7, #4
 800660a:	f107 0310 	add.w	r3, r7, #16
 800660e:	4611      	mov	r1, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f001 f813 	bl	800763c <xTaskCheckForTimeOut>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d123      	bne.n	8006664 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800661c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661e:	f000 fa49 	bl	8006ab4 <prvIsQueueEmpty>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d017      	beq.n	8006658 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	3324      	adds	r3, #36	; 0x24
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f000 ff3b 	bl	80074ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006638:	f000 f9ea 	bl	8006a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800663c:	f000 fd36 	bl	80070ac <xTaskResumeAll>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d189      	bne.n	800655a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <xQueueReceive+0x1bc>)
 8006648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	e780      	b.n	800655a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665a:	f000 f9d9 	bl	8006a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800665e:	f000 fd25 	bl	80070ac <xTaskResumeAll>
 8006662:	e77a      	b.n	800655a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006666:	f000 f9d3 	bl	8006a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800666a:	f000 fd1f 	bl	80070ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006670:	f000 fa20 	bl	8006ab4 <prvIsQueueEmpty>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f43f af6f 	beq.w	800655a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800667c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800667e:	4618      	mov	r0, r3
 8006680:	3730      	adds	r7, #48	; 0x30
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800669e:	2300      	movs	r3, #0
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61fb      	str	r3, [r7, #28]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066dc:	f001 f8f8 	bl	80078d0 <xTaskGetSchedulerState>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <xQueueSemaphoreTake+0x60>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <xQueueSemaphoreTake+0x64>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <xQueueSemaphoreTake+0x66>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61bb      	str	r3, [r7, #24]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800670c:	f002 f86a 	bl	80087e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d024      	beq.n	8006766 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	1e5a      	subs	r2, r3, #1
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800672c:	f001 fa78 	bl	8007c20 <pvTaskIncrementMutexHeldCount>
 8006730:	4602      	mov	r2, r0
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00f      	beq.n	800675e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	3310      	adds	r3, #16
 8006742:	4618      	mov	r0, r3
 8006744:	f000 ff02 	bl	800754c <xTaskRemoveFromEventList>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800674e:	4b54      	ldr	r3, [pc, #336]	; (80068a0 <xQueueSemaphoreTake+0x214>)
 8006750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800675e:	f002 f871 	bl	8008844 <vPortExitCritical>
				return pdPASS;
 8006762:	2301      	movs	r3, #1
 8006764:	e097      	b.n	8006896 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d111      	bne.n	8006790 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	617b      	str	r3, [r7, #20]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006788:	f002 f85c 	bl	8008844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800678c:	2300      	movs	r3, #0
 800678e:	e082      	b.n	8006896 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006796:	f107 030c 	add.w	r3, r7, #12
 800679a:	4618      	mov	r0, r3
 800679c:	f000 ff38 	bl	8007610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a4:	f002 f84e 	bl	8008844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067a8:	f000 fc72 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ac:	f002 f81a 	bl	80087e4 <vPortEnterCritical>
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b6:	b25b      	sxtb	r3, r3
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067bc:	d103      	bne.n	80067c6 <xQueueSemaphoreTake+0x13a>
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d2:	d103      	bne.n	80067dc <xQueueSemaphoreTake+0x150>
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067dc:	f002 f832 	bl	8008844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e0:	463a      	mov	r2, r7
 80067e2:	f107 030c 	add.w	r3, r7, #12
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 ff27 	bl	800763c <xTaskCheckForTimeOut>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d132      	bne.n	800685a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067f6:	f000 f95d 	bl	8006ab4 <prvIsQueueEmpty>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d026      	beq.n	800684e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006808:	f001 ffec 	bl	80087e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f87b 	bl	800790c <xTaskPriorityInherit>
 8006816:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006818:	f002 f814 	bl	8008844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	3324      	adds	r3, #36	; 0x24
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fe41 	bl	80074ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800682a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800682c:	f000 f8f0 	bl	8006a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006830:	f000 fc3c 	bl	80070ac <xTaskResumeAll>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	f47f af68 	bne.w	800670c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800683c:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <xQueueSemaphoreTake+0x214>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	e75e      	b.n	800670c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800684e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006850:	f000 f8de 	bl	8006a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006854:	f000 fc2a 	bl	80070ac <xTaskResumeAll>
 8006858:	e758      	b.n	800670c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800685a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800685c:	f000 f8d8 	bl	8006a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006860:	f000 fc24 	bl	80070ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006866:	f000 f925 	bl	8006ab4 <prvIsQueueEmpty>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	f43f af4d 	beq.w	800670c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006878:	f001 ffb4 	bl	80087e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800687c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800687e:	f000 f81f 	bl	80068c0 <prvGetDisinheritPriorityAfterTimeout>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f93a 	bl	8007b04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006890:	f001 ffd8 	bl	8008844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006894:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006896:	4618      	mov	r0, r3
 8006898:	3738      	adds	r7, #56	; 0x38
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d006      	beq.n	80068de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1c3 0314 	rsb	r3, r3, #20
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e001      	b.n	80068e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068e2:	68fb      	ldr	r3, [r7, #12]
	}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d14d      	bne.n	80069b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f001 f86c 	bl	80079f8 <xTaskPriorityDisinherit>
 8006920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
 8006928:	e043      	b.n	80069b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d119      	bne.n	8006964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6858      	ldr	r0, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	461a      	mov	r2, r3
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	f003 fa1d 	bl	8009d7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	441a      	add	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	d32b      	bcc.n	80069b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	e026      	b.n	80069b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68d8      	ldr	r0, [r3, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	461a      	mov	r2, r3
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	f003 fa03 	bl	8009d7a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	425b      	negs	r3, r3
 800697e:	441a      	add	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d207      	bcs.n	80069a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	425b      	negs	r3, r3
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d105      	bne.n	80069b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d018      	beq.n	8006a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	441a      	add	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d303      	bcc.n	80069f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68d9      	ldr	r1, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	461a      	mov	r2, r3
 8006a02:	6838      	ldr	r0, [r7, #0]
 8006a04:	f003 f9b9 	bl	8009d7a <memcpy>
	}
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a18:	f001 fee4 	bl	80087e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a24:	e011      	b.n	8006a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d012      	beq.n	8006a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fd8a 	bl	800754c <xTaskRemoveFromEventList>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a3e:	f000 fe5f 	bl	8007700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dce9      	bgt.n	8006a26 <prvUnlockQueue+0x16>
 8006a52:	e000      	b.n	8006a56 <prvUnlockQueue+0x46>
					break;
 8006a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	22ff      	movs	r2, #255	; 0xff
 8006a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a5e:	f001 fef1 	bl	8008844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a62:	f001 febf 	bl	80087e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a6e:	e011      	b.n	8006a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3310      	adds	r3, #16
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fd65 	bl	800754c <xTaskRemoveFromEventList>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a88:	f000 fe3a 	bl	8007700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dce9      	bgt.n	8006a70 <prvUnlockQueue+0x60>
 8006a9c:	e000      	b.n	8006aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006aa8:	f001 fecc 	bl	8008844 <vPortExitCritical>
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006abc:	f001 fe92 	bl	80087e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e001      	b.n	8006ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ad2:	f001 feb7 	bl	8008844 <vPortExitCritical>

	return xReturn;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ae8:	f001 fe7c 	bl	80087e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d102      	bne.n	8006afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e001      	b.n	8006b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b02:	f001 fe9f 	bl	8008844 <vPortExitCritical>

	return xReturn;
 8006b06:	68fb      	ldr	r3, [r7, #12]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e014      	b.n	8006b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b20:	4a0f      	ldr	r2, [pc, #60]	; (8006b60 <vQueueAddToRegistry+0x50>)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b2c:	490c      	ldr	r1, [pc, #48]	; (8006b60 <vQueueAddToRegistry+0x50>)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b36:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <vQueueAddToRegistry+0x50>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b42:	e006      	b.n	8006b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b07      	cmp	r3, #7
 8006b4e:	d9e7      	bls.n	8006b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20001f34 	.word	0x20001f34

08006b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b74:	f001 fe36 	bl	80087e4 <vPortEnterCritical>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b84:	d103      	bne.n	8006b8e <vQueueWaitForMessageRestricted+0x2a>
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b9a:	d103      	bne.n	8006ba4 <vQueueWaitForMessageRestricted+0x40>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba4:	f001 fe4e 	bl	8008844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3324      	adds	r3, #36	; 0x24
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fc9b 	bl	80074f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bbe:	6978      	ldr	r0, [r7, #20]
 8006bc0:	f7ff ff26 	bl	8006a10 <prvUnlockQueue>
	}
 8006bc4:	bf00      	nop
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af04      	add	r7, sp, #16
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	623b      	str	r3, [r7, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xTaskCreateStatic+0x46>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	61fb      	str	r3, [r7, #28]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c12:	23b4      	movs	r3, #180	; 0xb4
 8006c14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2bb4      	cmp	r3, #180	; 0xb4
 8006c1a:	d00a      	beq.n	8006c32 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	61bb      	str	r3, [r7, #24]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01e      	beq.n	8006c78 <xTaskCreateStatic+0xac>
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c52:	2300      	movs	r3, #0
 8006c54:	9303      	str	r3, [sp, #12]
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	9302      	str	r3, [sp, #8]
 8006c5a:	f107 0314 	add.w	r3, r7, #20
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f850 	bl	8006d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c72:	f000 f8f9 	bl	8006e68 <prvAddNewTaskToReadyList>
 8006c76:	e001      	b.n	8006c7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08c      	sub	sp, #48	; 0x30
 8006c8a:	af04      	add	r7, sp, #16
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 febe 	bl	8008a1c <pvPortMalloc>
 8006ca0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ca8:	20b4      	movs	r0, #180	; 0xb4
 8006caa:	f001 feb7 	bl	8008a1c <pvPortMalloc>
 8006cae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
 8006cbc:	e005      	b.n	8006cca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	f001 ff78 	bl	8008bb4 <vPortFree>
 8006cc4:	e001      	b.n	8006cca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d017      	beq.n	8006d00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9303      	str	r3, [sp, #12]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	9302      	str	r3, [sp, #8]
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f80e 	bl	8006d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cf4:	69f8      	ldr	r0, [r7, #28]
 8006cf6:	f000 f8b7 	bl	8006e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e002      	b.n	8006d06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d06:	69bb      	ldr	r3, [r7, #24]
	}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	461a      	mov	r2, r3
 8006d28:	21a5      	movs	r1, #165	; 0xa5
 8006d2a:	f002 ff3d 	bl	8009ba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f023 0307 	bic.w	r3, r3, #7
 8006d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	617b      	str	r3, [r7, #20]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01f      	beq.n	8006dae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	e012      	b.n	8006d9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	7819      	ldrb	r1, [r3, #0]
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	3334      	adds	r3, #52	; 0x34
 8006d84:	460a      	mov	r2, r1
 8006d86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d006      	beq.n	8006da2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	3301      	adds	r3, #1
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2b0f      	cmp	r3, #15
 8006d9e:	d9e9      	bls.n	8006d74 <prvInitialiseNewTask+0x64>
 8006da0:	e000      	b.n	8006da4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006da2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dac:	e003      	b.n	8006db6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	2b13      	cmp	r3, #19
 8006dba:	d901      	bls.n	8006dc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dbc:	2313      	movs	r3, #19
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2200      	movs	r2, #0
 8006dd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff f812 	bl	8005e00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	3318      	adds	r3, #24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff f80d 	bl	8005e00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	f1c3 0214 	rsb	r2, r3, #20
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	2200      	movs	r2, #0
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2200      	movs	r2, #0
 8006e06:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	335c      	adds	r3, #92	; 0x5c
 8006e1c:	224c      	movs	r2, #76	; 0x4c
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f002 fec1 	bl	8009ba8 <memset>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <prvInitialiseNewTask+0x14c>)
 8006e2a:	661a      	str	r2, [r3, #96]	; 0x60
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	4a0c      	ldr	r2, [pc, #48]	; (8006e60 <prvInitialiseNewTask+0x150>)
 8006e30:	665a      	str	r2, [r3, #100]	; 0x64
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <prvInitialiseNewTask+0x154>)
 8006e36:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	69b8      	ldr	r0, [r7, #24]
 8006e3e:	f001 fba3 	bl	8008588 <pxPortInitialiseStack>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e54:	bf00      	nop
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20005fa4 	.word	0x20005fa4
 8006e60:	2000600c 	.word	0x2000600c
 8006e64:	20006074 	.word	0x20006074

08006e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e70:	f001 fcb8 	bl	80087e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e74:	4b2c      	ldr	r3, [pc, #176]	; (8006f28 <prvAddNewTaskToReadyList+0xc0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	4a2b      	ldr	r2, [pc, #172]	; (8006f28 <prvAddNewTaskToReadyList+0xc0>)
 8006e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e7e:	4b2b      	ldr	r3, [pc, #172]	; (8006f2c <prvAddNewTaskToReadyList+0xc4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e86:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <prvAddNewTaskToReadyList+0xc4>)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e8c:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <prvAddNewTaskToReadyList+0xc0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d110      	bne.n	8006eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e94:	f000 fc5a 	bl	800774c <prvInitialiseTaskLists>
 8006e98:	e00d      	b.n	8006eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e9a:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <prvAddNewTaskToReadyList+0xc8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ea2:	4b22      	ldr	r3, [pc, #136]	; (8006f2c <prvAddNewTaskToReadyList+0xc4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d802      	bhi.n	8006eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006eb0:	4a1e      	ldr	r2, [pc, #120]	; (8006f2c <prvAddNewTaskToReadyList+0xc4>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006eb6:	4b1f      	ldr	r3, [pc, #124]	; (8006f34 <prvAddNewTaskToReadyList+0xcc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <prvAddNewTaskToReadyList+0xcc>)
 8006ebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ec0:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <prvAddNewTaskToReadyList+0xcc>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	2201      	movs	r2, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <prvAddNewTaskToReadyList+0xd0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <prvAddNewTaskToReadyList+0xd0>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <prvAddNewTaskToReadyList+0xd4>)
 8006ee8:	441a      	add	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe ff92 	bl	8005e1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ef6:	f001 fca5 	bl	8008844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <prvAddNewTaskToReadyList+0xc8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <prvAddNewTaskToReadyList+0xc4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d207      	bcs.n	8006f20 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <prvAddNewTaskToReadyList+0xd8>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	2000217c 	.word	0x2000217c
 8006f2c:	20001f74 	.word	0x20001f74
 8006f30:	20002188 	.word	0x20002188
 8006f34:	20002198 	.word	0x20002198
 8006f38:	20002184 	.word	0x20002184
 8006f3c:	20001f78 	.word	0x20001f78
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d017      	beq.n	8006f86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <vTaskDelay+0x60>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <vTaskDelay+0x30>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60bb      	str	r3, [r7, #8]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f74:	f000 f88c 	bl	8007090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fed6 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f80:	f000 f894 	bl	80070ac <xTaskResumeAll>
 8006f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <vTaskDelay+0x64>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	200021a4 	.word	0x200021a4
 8006fa8:	e000ed04 	.word	0xe000ed04

08006fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fba:	463a      	mov	r2, r7
 8006fbc:	1d39      	adds	r1, r7, #4
 8006fbe:	f107 0308 	add.w	r3, r7, #8
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fb fbb6 	bl	8002734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	9202      	str	r2, [sp, #8]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	460a      	mov	r2, r1
 8006fda:	4925      	ldr	r1, [pc, #148]	; (8007070 <vTaskStartScheduler+0xc4>)
 8006fdc:	4825      	ldr	r0, [pc, #148]	; (8007074 <vTaskStartScheduler+0xc8>)
 8006fde:	f7ff fdf5 	bl	8006bcc <xTaskCreateStatic>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4a24      	ldr	r2, [pc, #144]	; (8007078 <vTaskStartScheduler+0xcc>)
 8006fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fe8:	4b23      	ldr	r3, [pc, #140]	; (8007078 <vTaskStartScheduler+0xcc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e001      	b.n	8006ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d102      	bne.n	8007006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007000:	f000 fefa 	bl	8007df8 <xTimerCreateTimerTask>
 8007004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d11d      	bne.n	8007048 <vTaskStartScheduler+0x9c>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	613b      	str	r3, [r7, #16]
}
 800701e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007020:	4b16      	ldr	r3, [pc, #88]	; (800707c <vTaskStartScheduler+0xd0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	335c      	adds	r3, #92	; 0x5c
 8007026:	4a16      	ldr	r2, [pc, #88]	; (8007080 <vTaskStartScheduler+0xd4>)
 8007028:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800702a:	4b16      	ldr	r3, [pc, #88]	; (8007084 <vTaskStartScheduler+0xd8>)
 800702c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <vTaskStartScheduler+0xdc>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007038:	4b14      	ldr	r3, [pc, #80]	; (800708c <vTaskStartScheduler+0xe0>)
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800703e:	f7fb fb5e 	bl	80026fe <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007042:	f001 fb2d 	bl	80086a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007046:	e00e      	b.n	8007066 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704e:	d10a      	bne.n	8007066 <vTaskStartScheduler+0xba>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <vTaskStartScheduler+0xb8>
}
 8007066:	bf00      	nop
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	0800c330 	.word	0x0800c330
 8007074:	08007719 	.word	0x08007719
 8007078:	200021a0 	.word	0x200021a0
 800707c:	20001f74 	.word	0x20001f74
 8007080:	20000120 	.word	0x20000120
 8007084:	2000219c 	.word	0x2000219c
 8007088:	20002188 	.word	0x20002188
 800708c:	20002180 	.word	0x20002180

08007090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <vTaskSuspendAll+0x18>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	4a03      	ldr	r2, [pc, #12]	; (80070a8 <vTaskSuspendAll+0x18>)
 800709c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	200021a4 	.word	0x200021a4

080070ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070ba:	4b41      	ldr	r3, [pc, #260]	; (80071c0 <xTaskResumeAll+0x114>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	603b      	str	r3, [r7, #0]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070d8:	f001 fb84 	bl	80087e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070dc:	4b38      	ldr	r3, [pc, #224]	; (80071c0 <xTaskResumeAll+0x114>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	4a37      	ldr	r2, [pc, #220]	; (80071c0 <xTaskResumeAll+0x114>)
 80070e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e6:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <xTaskResumeAll+0x114>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d161      	bne.n	80071b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ee:	4b35      	ldr	r3, [pc, #212]	; (80071c4 <xTaskResumeAll+0x118>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d05d      	beq.n	80071b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f6:	e02e      	b.n	8007156 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f8:	4b33      	ldr	r3, [pc, #204]	; (80071c8 <xTaskResumeAll+0x11c>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3318      	adds	r3, #24
 8007104:	4618      	mov	r0, r3
 8007106:	f7fe fee5 	bl	8005ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fee0 	bl	8005ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	2201      	movs	r2, #1
 800711a:	409a      	lsls	r2, r3
 800711c:	4b2b      	ldr	r3, [pc, #172]	; (80071cc <xTaskResumeAll+0x120>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4313      	orrs	r3, r2
 8007122:	4a2a      	ldr	r2, [pc, #168]	; (80071cc <xTaskResumeAll+0x120>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4a27      	ldr	r2, [pc, #156]	; (80071d0 <xTaskResumeAll+0x124>)
 8007134:	441a      	add	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fe fe6c 	bl	8005e1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	4b23      	ldr	r3, [pc, #140]	; (80071d4 <xTaskResumeAll+0x128>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	429a      	cmp	r2, r3
 800714e:	d302      	bcc.n	8007156 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007150:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <xTaskResumeAll+0x12c>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007156:	4b1c      	ldr	r3, [pc, #112]	; (80071c8 <xTaskResumeAll+0x11c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1cc      	bne.n	80070f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007164:	f000 fb94 	bl	8007890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007168:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <xTaskResumeAll+0x130>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d010      	beq.n	8007196 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007174:	f000 f846 	bl	8007204 <xTaskIncrementTick>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800717e:	4b16      	ldr	r3, [pc, #88]	; (80071d8 <xTaskResumeAll+0x12c>)
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3b01      	subs	r3, #1
 8007188:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f1      	bne.n	8007174 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007190:	4b12      	ldr	r3, [pc, #72]	; (80071dc <xTaskResumeAll+0x130>)
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <xTaskResumeAll+0x12c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800719e:	2301      	movs	r3, #1
 80071a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <xTaskResumeAll+0x134>)
 80071a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f001 fb47 	bl	8008844 <vPortExitCritical>

	return xAlreadyYielded;
 80071b6:	68bb      	ldr	r3, [r7, #8]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200021a4 	.word	0x200021a4
 80071c4:	2000217c 	.word	0x2000217c
 80071c8:	20002138 	.word	0x20002138
 80071cc:	20002184 	.word	0x20002184
 80071d0:	20001f78 	.word	0x20001f78
 80071d4:	20001f74 	.word	0x20001f74
 80071d8:	20002190 	.word	0x20002190
 80071dc:	2000218c 	.word	0x2000218c
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <xTaskGetTickCount+0x1c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071f0:	687b      	ldr	r3, [r7, #4]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20002180 	.word	0x20002180

08007204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720e:	4b4e      	ldr	r3, [pc, #312]	; (8007348 <xTaskIncrementTick+0x144>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 808e 	bne.w	8007334 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007218:	4b4c      	ldr	r3, [pc, #304]	; (800734c <xTaskIncrementTick+0x148>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007220:	4a4a      	ldr	r2, [pc, #296]	; (800734c <xTaskIncrementTick+0x148>)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d120      	bne.n	800726e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800722c:	4b48      	ldr	r3, [pc, #288]	; (8007350 <xTaskIncrementTick+0x14c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <xTaskIncrementTick+0x48>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	603b      	str	r3, [r7, #0]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xTaskIncrementTick+0x46>
 800724c:	4b40      	ldr	r3, [pc, #256]	; (8007350 <xTaskIncrementTick+0x14c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4b40      	ldr	r3, [pc, #256]	; (8007354 <xTaskIncrementTick+0x150>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a3e      	ldr	r2, [pc, #248]	; (8007350 <xTaskIncrementTick+0x14c>)
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4a3e      	ldr	r2, [pc, #248]	; (8007354 <xTaskIncrementTick+0x150>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	4b3d      	ldr	r3, [pc, #244]	; (8007358 <xTaskIncrementTick+0x154>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <xTaskIncrementTick+0x154>)
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	f000 fb11 	bl	8007890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800726e:	4b3b      	ldr	r3, [pc, #236]	; (800735c <xTaskIncrementTick+0x158>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d348      	bcc.n	800730a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007278:	4b35      	ldr	r3, [pc, #212]	; (8007350 <xTaskIncrementTick+0x14c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d104      	bne.n	800728c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007282:	4b36      	ldr	r3, [pc, #216]	; (800735c <xTaskIncrementTick+0x158>)
 8007284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007288:	601a      	str	r2, [r3, #0]
					break;
 800728a:	e03e      	b.n	800730a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800728c:	4b30      	ldr	r3, [pc, #192]	; (8007350 <xTaskIncrementTick+0x14c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d203      	bcs.n	80072ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072a4:	4a2d      	ldr	r2, [pc, #180]	; (800735c <xTaskIncrementTick+0x158>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072aa:	e02e      	b.n	800730a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fe0f 	bl	8005ed4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	3318      	adds	r3, #24
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fe06 	bl	8005ed4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	2201      	movs	r2, #1
 80072ce:	409a      	lsls	r2, r3
 80072d0:	4b23      	ldr	r3, [pc, #140]	; (8007360 <xTaskIncrementTick+0x15c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	4a22      	ldr	r2, [pc, #136]	; (8007360 <xTaskIncrementTick+0x15c>)
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <xTaskIncrementTick+0x160>)
 80072e8:	441a      	add	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe fd92 	bl	8005e1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <xTaskIncrementTick+0x164>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d3b9      	bcc.n	8007278 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007308:	e7b6      	b.n	8007278 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <xTaskIncrementTick+0x164>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4914      	ldr	r1, [pc, #80]	; (8007364 <xTaskIncrementTick+0x160>)
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d901      	bls.n	8007326 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <xTaskIncrementTick+0x168>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800732e:	2301      	movs	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e004      	b.n	800733e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <xTaskIncrementTick+0x16c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	4a0d      	ldr	r2, [pc, #52]	; (8007370 <xTaskIncrementTick+0x16c>)
 800733c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800733e:	697b      	ldr	r3, [r7, #20]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200021a4 	.word	0x200021a4
 800734c:	20002180 	.word	0x20002180
 8007350:	20002130 	.word	0x20002130
 8007354:	20002134 	.word	0x20002134
 8007358:	20002194 	.word	0x20002194
 800735c:	2000219c 	.word	0x2000219c
 8007360:	20002184 	.word	0x20002184
 8007364:	20001f78 	.word	0x20001f78
 8007368:	20001f74 	.word	0x20001f74
 800736c:	20002190 	.word	0x20002190
 8007370:	2000218c 	.word	0x2000218c

08007374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800737a:	4b43      	ldr	r3, [pc, #268]	; (8007488 <vTaskSwitchContext+0x114>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007382:	4b42      	ldr	r3, [pc, #264]	; (800748c <vTaskSwitchContext+0x118>)
 8007384:	2201      	movs	r2, #1
 8007386:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007388:	e07a      	b.n	8007480 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800738a:	4b40      	ldr	r3, [pc, #256]	; (800748c <vTaskSwitchContext+0x118>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007390:	f7fb f9bc 	bl	800270c <getRunTimeCounterValue>
 8007394:	4603      	mov	r3, r0
 8007396:	4a3e      	ldr	r2, [pc, #248]	; (8007490 <vTaskSwitchContext+0x11c>)
 8007398:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800739a:	4b3d      	ldr	r3, [pc, #244]	; (8007490 <vTaskSwitchContext+0x11c>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b3d      	ldr	r3, [pc, #244]	; (8007494 <vTaskSwitchContext+0x120>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d909      	bls.n	80073ba <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80073a6:	4b3c      	ldr	r3, [pc, #240]	; (8007498 <vTaskSwitchContext+0x124>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80073ac:	4a38      	ldr	r2, [pc, #224]	; (8007490 <vTaskSwitchContext+0x11c>)
 80073ae:	6810      	ldr	r0, [r2, #0]
 80073b0:	4a38      	ldr	r2, [pc, #224]	; (8007494 <vTaskSwitchContext+0x120>)
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	1a82      	subs	r2, r0, r2
 80073b6:	440a      	add	r2, r1
 80073b8:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80073ba:	4b35      	ldr	r3, [pc, #212]	; (8007490 <vTaskSwitchContext+0x11c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a35      	ldr	r2, [pc, #212]	; (8007494 <vTaskSwitchContext+0x120>)
 80073c0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80073c2:	4b35      	ldr	r3, [pc, #212]	; (8007498 <vTaskSwitchContext+0x124>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	4b33      	ldr	r3, [pc, #204]	; (8007498 <vTaskSwitchContext+0x124>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d808      	bhi.n	80073e4 <vTaskSwitchContext+0x70>
 80073d2:	4b31      	ldr	r3, [pc, #196]	; (8007498 <vTaskSwitchContext+0x124>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b30      	ldr	r3, [pc, #192]	; (8007498 <vTaskSwitchContext+0x124>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3334      	adds	r3, #52	; 0x34
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fb f99c 	bl	800271c <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 80073e4:	4b2c      	ldr	r3, [pc, #176]	; (8007498 <vTaskSwitchContext+0x124>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2c      	ldr	r2, [pc, #176]	; (800749c <vTaskSwitchContext+0x128>)
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	4b2b      	ldr	r3, [pc, #172]	; (80074a0 <vTaskSwitchContext+0x12c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	fab3 f383 	clz	r3, r3
 80073fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	f1c3 031f 	rsb	r3, r3, #31
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	4927      	ldr	r1, [pc, #156]	; (80074a4 <vTaskSwitchContext+0x130>)
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <vTaskSwitchContext+0xbc>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vTaskSwitchContext+0xba>
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <vTaskSwitchContext+0x130>)
 800743c:	4413      	add	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3308      	adds	r3, #8
 8007452:	429a      	cmp	r2, r3
 8007454:	d104      	bne.n	8007460 <vTaskSwitchContext+0xec>
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	605a      	str	r2, [r3, #4]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <vTaskSwitchContext+0x124>)
 8007468:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <vTaskSwitchContext+0x124>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007472:	4a0a      	ldr	r2, [pc, #40]	; (800749c <vTaskSwitchContext+0x128>)
 8007474:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <vTaskSwitchContext+0x124>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	335c      	adds	r3, #92	; 0x5c
 800747c:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <vTaskSwitchContext+0x134>)
 800747e:	6013      	str	r3, [r2, #0]
}
 8007480:	bf00      	nop
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	200021a4 	.word	0x200021a4
 800748c:	20002190 	.word	0x20002190
 8007490:	200021ac 	.word	0x200021ac
 8007494:	200021a8 	.word	0x200021a8
 8007498:	20001f74 	.word	0x20001f74
 800749c:	20002178 	.word	0x20002178
 80074a0:	20002184 	.word	0x20002184
 80074a4:	20001f78 	.word	0x20001f78
 80074a8:	20000120 	.word	0x20000120

080074ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	60fb      	str	r3, [r7, #12]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <vTaskPlaceOnEventList+0x44>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3318      	adds	r3, #24
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fe fcc1 	bl	8005e62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074e0:	2101      	movs	r1, #1
 80074e2:	6838      	ldr	r0, [r7, #0]
 80074e4:	f000 fc22 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20001f74 	.word	0x20001f74

080074f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	617b      	str	r3, [r7, #20]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <vTaskPlaceOnEventListRestricted+0x54>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3318      	adds	r3, #24
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7fe fc78 	bl	8005e1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	68b8      	ldr	r0, [r7, #8]
 800753a:	f000 fbf7 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
	}
 800753e:	bf00      	nop
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20001f74 	.word	0x20001f74

0800754c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	60fb      	str	r3, [r7, #12]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	3318      	adds	r3, #24
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fca9 	bl	8005ed4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007582:	4b1d      	ldr	r3, [pc, #116]	; (80075f8 <xTaskRemoveFromEventList+0xac>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11c      	bne.n	80075c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3304      	adds	r3, #4
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fca0 	bl	8005ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	4b17      	ldr	r3, [pc, #92]	; (80075fc <xTaskRemoveFromEventList+0xb0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	4a16      	ldr	r2, [pc, #88]	; (80075fc <xTaskRemoveFromEventList+0xb0>)
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a13      	ldr	r2, [pc, #76]	; (8007600 <xTaskRemoveFromEventList+0xb4>)
 80075b4:	441a      	add	r2, r3
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7fe fc2c 	bl	8005e1a <vListInsertEnd>
 80075c2:	e005      	b.n	80075d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	3318      	adds	r3, #24
 80075c8:	4619      	mov	r1, r3
 80075ca:	480e      	ldr	r0, [pc, #56]	; (8007604 <xTaskRemoveFromEventList+0xb8>)
 80075cc:	f7fe fc25 	bl	8005e1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <xTaskRemoveFromEventList+0xbc>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d905      	bls.n	80075ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <xTaskRemoveFromEventList+0xc0>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	e001      	b.n	80075ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075ee:	697b      	ldr	r3, [r7, #20]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	200021a4 	.word	0x200021a4
 80075fc:	20002184 	.word	0x20002184
 8007600:	20001f78 	.word	0x20001f78
 8007604:	20002138 	.word	0x20002138
 8007608:	20001f74 	.word	0x20001f74
 800760c:	20002190 	.word	0x20002190

08007610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <vTaskInternalSetTimeOutState+0x24>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <vTaskInternalSetTimeOutState+0x28>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	20002194 	.word	0x20002194
 8007638:	20002180 	.word	0x20002180

0800763c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	613b      	str	r3, [r7, #16]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	60fb      	str	r3, [r7, #12]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800767e:	f001 f8b1 	bl	80087e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007682:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <xTaskCheckForTimeOut+0xbc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800769a:	d102      	bne.n	80076a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	e023      	b.n	80076ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <xTaskCheckForTimeOut+0xc0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d007      	beq.n	80076be <xTaskCheckForTimeOut+0x82>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d302      	bcc.n	80076be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	e015      	b.n	80076ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d20b      	bcs.n	80076e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff ff9b 	bl	8007610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	e004      	b.n	80076ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076ea:	f001 f8ab 	bl	8008844 <vPortExitCritical>

	return xReturn;
 80076ee:	69fb      	ldr	r3, [r7, #28]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20002180 	.word	0x20002180
 80076fc:	20002194 	.word	0x20002194

08007700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007704:	4b03      	ldr	r3, [pc, #12]	; (8007714 <vTaskMissedYield+0x14>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
}
 800770a:	bf00      	nop
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20002190 	.word	0x20002190

08007718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007720:	f000 f854 	bl	80077cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <prvIdleTask+0x2c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d907      	bls.n	800773c <prvIdleTask+0x24>
			{
				taskYIELD();
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvIdleTask+0x30>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800773c:	f7fb fd4c 	bl	80031d8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007740:	e7ee      	b.n	8007720 <prvIdleTask+0x8>
 8007742:	bf00      	nop
 8007744:	20001f78 	.word	0x20001f78
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	e00c      	b.n	8007772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a12      	ldr	r2, [pc, #72]	; (80077ac <prvInitialiseTaskLists+0x60>)
 8007764:	4413      	add	r3, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fb2a 	bl	8005dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3301      	adds	r3, #1
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b13      	cmp	r3, #19
 8007776:	d9ef      	bls.n	8007758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007778:	480d      	ldr	r0, [pc, #52]	; (80077b0 <prvInitialiseTaskLists+0x64>)
 800777a:	f7fe fb21 	bl	8005dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800777e:	480d      	ldr	r0, [pc, #52]	; (80077b4 <prvInitialiseTaskLists+0x68>)
 8007780:	f7fe fb1e 	bl	8005dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007784:	480c      	ldr	r0, [pc, #48]	; (80077b8 <prvInitialiseTaskLists+0x6c>)
 8007786:	f7fe fb1b 	bl	8005dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800778a:	480c      	ldr	r0, [pc, #48]	; (80077bc <prvInitialiseTaskLists+0x70>)
 800778c:	f7fe fb18 	bl	8005dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007790:	480b      	ldr	r0, [pc, #44]	; (80077c0 <prvInitialiseTaskLists+0x74>)
 8007792:	f7fe fb15 	bl	8005dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvInitialiseTaskLists+0x78>)
 8007798:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <prvInitialiseTaskLists+0x64>)
 800779a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvInitialiseTaskLists+0x7c>)
 800779e:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <prvInitialiseTaskLists+0x68>)
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20001f78 	.word	0x20001f78
 80077b0:	20002108 	.word	0x20002108
 80077b4:	2000211c 	.word	0x2000211c
 80077b8:	20002138 	.word	0x20002138
 80077bc:	2000214c 	.word	0x2000214c
 80077c0:	20002164 	.word	0x20002164
 80077c4:	20002130 	.word	0x20002130
 80077c8:	20002134 	.word	0x20002134

080077cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d2:	e019      	b.n	8007808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d4:	f001 f806 	bl	80087e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <prvCheckTasksWaitingTermination+0x50>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe fb75 	bl	8005ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ea:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <prvCheckTasksWaitingTermination+0x54>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	4a0b      	ldr	r2, [pc, #44]	; (8007820 <prvCheckTasksWaitingTermination+0x54>)
 80077f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <prvCheckTasksWaitingTermination+0x58>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <prvCheckTasksWaitingTermination+0x58>)
 80077fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077fe:	f001 f821 	bl	8008844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f810 	bl	8007828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <prvCheckTasksWaitingTermination+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e1      	bne.n	80077d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000214c 	.word	0x2000214c
 8007820:	2000217c 	.word	0x2000217c
 8007824:	20002160 	.word	0x20002160

08007828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	335c      	adds	r3, #92	; 0x5c
 8007834:	4618      	mov	r0, r3
 8007836:	f002 f9e7 	bl	8009c08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8007840:	2b00      	cmp	r3, #0
 8007842:	d108      	bne.n	8007856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	4618      	mov	r0, r3
 800784a:	f001 f9b3 	bl	8008bb4 <vPortFree>
				vPortFree( pxTCB );
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f9b0 	bl	8008bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007854:	e018      	b.n	8007888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800785c:	2b01      	cmp	r3, #1
 800785e:	d103      	bne.n	8007868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f9a7 	bl	8008bb4 <vPortFree>
	}
 8007866:	e00f      	b.n	8007888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800786e:	2b02      	cmp	r3, #2
 8007870:	d00a      	beq.n	8007888 <prvDeleteTCB+0x60>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60fb      	str	r3, [r7, #12]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <prvDeleteTCB+0x5e>
	}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <prvResetNextTaskUnblockTime+0x38>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <prvResetNextTaskUnblockTime+0x3c>)
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078a8:	e008      	b.n	80078bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <prvResetNextTaskUnblockTime+0x38>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	4a04      	ldr	r2, [pc, #16]	; (80078cc <prvResetNextTaskUnblockTime+0x3c>)
 80078ba:	6013      	str	r3, [r2, #0]
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	20002130 	.word	0x20002130
 80078cc:	2000219c 	.word	0x2000219c

080078d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <xTaskGetSchedulerState+0x34>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078de:	2301      	movs	r3, #1
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	e008      	b.n	80078f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e4:	4b08      	ldr	r3, [pc, #32]	; (8007908 <xTaskGetSchedulerState+0x38>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078ec:	2302      	movs	r3, #2
 80078ee:	607b      	str	r3, [r7, #4]
 80078f0:	e001      	b.n	80078f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078f6:	687b      	ldr	r3, [r7, #4]
	}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	20002188 	.word	0x20002188
 8007908:	200021a4 	.word	0x200021a4

0800790c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d05e      	beq.n	80079e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	4b31      	ldr	r3, [pc, #196]	; (80079ec <xTaskPriorityInherit+0xe0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	429a      	cmp	r2, r3
 800792e:	d24e      	bcs.n	80079ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	db06      	blt.n	8007946 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007938:	4b2c      	ldr	r3, [pc, #176]	; (80079ec <xTaskPriorityInherit+0xe0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	f1c3 0214 	rsb	r2, r3, #20
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6959      	ldr	r1, [r3, #20]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <xTaskPriorityInherit+0xe4>)
 8007958:	4413      	add	r3, r2
 800795a:	4299      	cmp	r1, r3
 800795c:	d12f      	bne.n	80079be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fab6 	bl	8005ed4 <uxListRemove>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	2201      	movs	r2, #1
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	43da      	mvns	r2, r3
 800797a:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <xTaskPriorityInherit+0xe8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4013      	ands	r3, r2
 8007980:	4a1c      	ldr	r2, [pc, #112]	; (80079f4 <xTaskPriorityInherit+0xe8>)
 8007982:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007984:	4b19      	ldr	r3, [pc, #100]	; (80079ec <xTaskPriorityInherit+0xe0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	2201      	movs	r2, #1
 8007994:	409a      	lsls	r2, r3
 8007996:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <xTaskPriorityInherit+0xe8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4313      	orrs	r3, r2
 800799c:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <xTaskPriorityInherit+0xe8>)
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <xTaskPriorityInherit+0xe4>)
 80079ae:	441a      	add	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4619      	mov	r1, r3
 80079b6:	4610      	mov	r0, r2
 80079b8:	f7fe fa2f 	bl	8005e1a <vListInsertEnd>
 80079bc:	e004      	b.n	80079c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <xTaskPriorityInherit+0xe0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e008      	b.n	80079e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <xTaskPriorityInherit+0xe0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	429a      	cmp	r2, r3
 80079da:	d201      	bcs.n	80079e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e0:	68fb      	ldr	r3, [r7, #12]
	}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20001f74 	.word	0x20001f74
 80079f0:	20001f78 	.word	0x20001f78
 80079f4:	20002184 	.word	0x20002184

080079f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d06e      	beq.n	8007aec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a0e:	4b3a      	ldr	r3, [pc, #232]	; (8007af8 <xTaskPriorityDisinherit+0x100>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d00a      	beq.n	8007a2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	60bb      	str	r3, [r7, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d044      	beq.n	8007aec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d140      	bne.n	8007aec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fa30 	bl	8005ed4 <uxListRemove>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d115      	bne.n	8007aa6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7e:	491f      	ldr	r1, [pc, #124]	; (8007afc <xTaskPriorityDisinherit+0x104>)
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <xTaskPriorityDisinherit+0xae>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2201      	movs	r2, #1
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	43da      	mvns	r2, r3
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <xTaskPriorityDisinherit+0x108>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	4a17      	ldr	r2, [pc, #92]	; (8007b00 <xTaskPriorityDisinherit+0x108>)
 8007aa4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	f1c3 0214 	rsb	r2, r3, #20
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	2201      	movs	r2, #1
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <xTaskPriorityDisinherit+0x108>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	; (8007b00 <xTaskPriorityDisinherit+0x108>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4a08      	ldr	r2, [pc, #32]	; (8007afc <xTaskPriorityDisinherit+0x104>)
 8007ada:	441a      	add	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7fe f999 	bl	8005e1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007aec:	697b      	ldr	r3, [r7, #20]
	}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20001f74 	.word	0x20001f74
 8007afc:	20001f78 	.word	0x20001f78
 8007b00:	20002184 	.word	0x20002184

08007b04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d077      	beq.n	8007c0c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	60fb      	str	r3, [r7, #12]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d902      	bls.n	8007b4a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	61fb      	str	r3, [r7, #28]
 8007b48:	e002      	b.n	8007b50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d058      	beq.n	8007c0c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d153      	bne.n	8007c0c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b64:	4b2b      	ldr	r3, [pc, #172]	; (8007c14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d10a      	bne.n	8007b84 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	60bb      	str	r3, [r7, #8]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db04      	blt.n	8007ba2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f1c3 0214 	rsb	r2, r3, #20
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	6959      	ldr	r1, [r3, #20]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	d129      	bne.n	8007c0c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe f989 	bl	8005ed4 <uxListRemove>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	2201      	movs	r2, #1
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	43da      	mvns	r2, r3
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	4a10      	ldr	r2, [pc, #64]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007bdc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	2201      	movs	r2, #1
 8007be4:	409a      	lsls	r2, r3
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a06      	ldr	r2, [pc, #24]	; (8007c18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007bfe:	441a      	add	r2, r3
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7fe f907 	bl	8005e1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c0c:	bf00      	nop
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20001f74 	.word	0x20001f74
 8007c18:	20001f78 	.word	0x20001f78
 8007c1c:	20002184 	.word	0x20002184

08007c20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c24:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d004      	beq.n	8007c36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c32:	3201      	adds	r2, #1
 8007c34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c36:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c38:	681b      	ldr	r3, [r3, #0]
	}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20001f74 	.word	0x20001f74

08007c48 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007c52:	f000 fdc7 	bl	80087e4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007c56:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <ulTaskNotifyTake+0x90>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d113      	bne.n	8007c8a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007c62:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <ulTaskNotifyTake+0x90>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c72:	2101      	movs	r1, #1
 8007c74:	6838      	ldr	r0, [r7, #0]
 8007c76:	f000 f859 	bl	8007d2c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007c7a:	4b18      	ldr	r3, [pc, #96]	; (8007cdc <ulTaskNotifyTake+0x94>)
 8007c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007c8a:	f000 fddb 	bl	8008844 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007c8e:	f000 fda9 	bl	80087e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <ulTaskNotifyTake+0x90>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c9a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <ulTaskNotifyTake+0x90>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007cb2:	e005      	b.n	8007cc0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <ulTaskNotifyTake+0x90>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <ulTaskNotifyTake+0x90>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8007cca:	f000 fdbb 	bl	8008844 <vPortExitCritical>

		return ulReturn;
 8007cce:	68fb      	ldr	r3, [r7, #12]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20001f74 	.word	0x20001f74
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <ulTaskNotifyValueClear+0x16>
 8007cf0:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <ulTaskNotifyValueClear+0x48>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	e000      	b.n	8007cf8 <ulTaskNotifyValueClear+0x18>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 8007cfa:	f000 fd73 	bl	80087e4 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <ulTaskNotifyValueClear+0x48>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d06:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 8007d1a:	f000 fd93 	bl	8008844 <vPortExitCritical>

		return ulReturn;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
	}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20001f74 	.word	0x20001f74

08007d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d36:	4b29      	ldr	r3, [pc, #164]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d3c:	4b28      	ldr	r3, [pc, #160]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe f8c6 	bl	8005ed4 <uxListRemove>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d4e:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	2201      	movs	r2, #1
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43da      	mvns	r2, r3
 8007d5c:	4b21      	ldr	r3, [pc, #132]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4013      	ands	r3, r2
 8007d62:	4a20      	ldr	r2, [pc, #128]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d6c:	d10a      	bne.n	8007d84 <prvAddCurrentTaskToDelayedList+0x58>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d007      	beq.n	8007d84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d74:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	481a      	ldr	r0, [pc, #104]	; (8007de8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d7e:	f7fe f84c 	bl	8005e1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d82:	e026      	b.n	8007dd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d8c:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d209      	bcs.n	8007db0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d9c:	4b13      	ldr	r3, [pc, #76]	; (8007dec <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b0f      	ldr	r3, [pc, #60]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f7fe f85a 	bl	8005e62 <vListInsert>
}
 8007dae:	e010      	b.n	8007dd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007db0:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	f7fe f850 	bl	8005e62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d202      	bcs.n	8007dd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007dcc:	4a09      	ldr	r2, [pc, #36]	; (8007df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6013      	str	r3, [r2, #0]
}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20002180 	.word	0x20002180
 8007de0:	20001f74 	.word	0x20001f74
 8007de4:	20002184 	.word	0x20002184
 8007de8:	20002164 	.word	0x20002164
 8007dec:	20002134 	.word	0x20002134
 8007df0:	20002130 	.word	0x20002130
 8007df4:	2000219c 	.word	0x2000219c

08007df8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e02:	f000 fb81 	bl	8008508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e06:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <xTimerCreateTimerTask+0x80>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d021      	beq.n	8007e52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e16:	1d3a      	adds	r2, r7, #4
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fa fca1 	bl	8002768 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	9202      	str	r2, [sp, #8]
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	2301      	movs	r3, #1
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	460a      	mov	r2, r1
 8007e38:	4910      	ldr	r1, [pc, #64]	; (8007e7c <xTimerCreateTimerTask+0x84>)
 8007e3a:	4811      	ldr	r0, [pc, #68]	; (8007e80 <xTimerCreateTimerTask+0x88>)
 8007e3c:	f7fe fec6 	bl	8006bcc <xTaskCreateStatic>
 8007e40:	4603      	mov	r3, r0
 8007e42:	4a10      	ldr	r2, [pc, #64]	; (8007e84 <xTimerCreateTimerTask+0x8c>)
 8007e44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e46:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <xTimerCreateTimerTask+0x8c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	613b      	str	r3, [r7, #16]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e6e:	697b      	ldr	r3, [r7, #20]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200021e0 	.word	0x200021e0
 8007e7c:	0800c360 	.word	0x0800c360
 8007e80:	080080b1 	.word	0x080080b1
 8007e84:	200021e4 	.word	0x200021e4

08007e88 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007e96:	232c      	movs	r3, #44	; 0x2c
 8007e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b2c      	cmp	r3, #44	; 0x2c
 8007e9e:	d00a      	beq.n	8007eb6 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	61bb      	str	r3, [r7, #24]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <xTimerCreateStatic+0x4c>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	617b      	str	r3, [r7, #20]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00d      	beq.n	8007efa <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f805 	bl	8007f04 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007efa:	69fb      	ldr	r3, [r7, #28]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10a      	bne.n	8007f2e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	617b      	str	r3, [r7, #20]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01e      	beq.n	8007f72 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007f34:	f000 fae8 	bl	8008508 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fd ff53 	bl	8005e00 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f66:	f043 0304 	orr.w	r3, r3, #4
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007f72:	bf00      	nop
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	623b      	str	r3, [r7, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007faa:	4b1a      	ldr	r3, [pc, #104]	; (8008014 <xTimerGenericCommand+0x98>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d02a      	beq.n	8008008 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b05      	cmp	r3, #5
 8007fc2:	dc18      	bgt.n	8007ff6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fc4:	f7ff fc84 	bl	80078d0 <xTaskGetSchedulerState>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d109      	bne.n	8007fe2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <xTimerGenericCommand+0x98>)
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f107 0110 	add.w	r1, r7, #16
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fda:	f7fe f8dd 	bl	8006198 <xQueueGenericSend>
 8007fde:	6278      	str	r0, [r7, #36]	; 0x24
 8007fe0:	e012      	b.n	8008008 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <xTimerGenericCommand+0x98>)
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	f107 0110 	add.w	r1, r7, #16
 8007fea:	2300      	movs	r3, #0
 8007fec:	2200      	movs	r2, #0
 8007fee:	f7fe f8d3 	bl	8006198 <xQueueGenericSend>
 8007ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ff4:	e008      	b.n	8008008 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ff6:	4b07      	ldr	r3, [pc, #28]	; (8008014 <xTimerGenericCommand+0x98>)
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	f107 0110 	add.w	r1, r7, #16
 8007ffe:	2300      	movs	r3, #0
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	f7fe f9c7 	bl	8006394 <xQueueGenericSendFromISR>
 8008006:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800800a:	4618      	mov	r0, r3
 800800c:	3728      	adds	r7, #40	; 0x28
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200021e0 	.word	0x200021e0

08008018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af02      	add	r7, sp, #8
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008022:	4b22      	ldr	r3, [pc, #136]	; (80080ac <prvProcessExpiredTimer+0x94>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd ff4f 	bl	8005ed4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d022      	beq.n	800808a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	699a      	ldr	r2, [r3, #24]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	18d1      	adds	r1, r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	6978      	ldr	r0, [r7, #20]
 8008052:	f000 f8d1 	bl	80081f8 <prvInsertTimerInActiveList>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01f      	beq.n	800809c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800805c:	2300      	movs	r3, #0
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2300      	movs	r3, #0
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	2100      	movs	r1, #0
 8008066:	6978      	ldr	r0, [r7, #20]
 8008068:	f7ff ff88 	bl	8007f7c <xTimerGenericCommand>
 800806c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d113      	bne.n	800809c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60fb      	str	r3, [r7, #12]
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	6978      	ldr	r0, [r7, #20]
 80080a2:	4798      	blx	r3
}
 80080a4:	bf00      	nop
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200021d8 	.word	0x200021d8

080080b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080b8:	f107 0308 	add.w	r3, r7, #8
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f857 	bl	8008170 <prvGetNextExpireTime>
 80080c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4619      	mov	r1, r3
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 f803 	bl	80080d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080ce:	f000 f8d5 	bl	800827c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080d2:	e7f1      	b.n	80080b8 <prvTimerTask+0x8>

080080d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080de:	f7fe ffd7 	bl	8007090 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f866 	bl	80081b8 <prvSampleTimeNow>
 80080ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d130      	bne.n	8008156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10a      	bne.n	8008110 <prvProcessTimerOrBlockTask+0x3c>
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d806      	bhi.n	8008110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008102:	f7fe ffd3 	bl	80070ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff ff85 	bl	8008018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800810e:	e024      	b.n	800815a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008116:	4b13      	ldr	r3, [pc, #76]	; (8008164 <prvProcessTimerOrBlockTask+0x90>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <prvProcessTimerOrBlockTask+0x50>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <prvProcessTimerOrBlockTask+0x52>
 8008124:	2300      	movs	r3, #0
 8008126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008128:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <prvProcessTimerOrBlockTask+0x94>)
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	f7fe fd15 	bl	8006b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800813a:	f7fe ffb7 	bl	80070ac <xTaskResumeAll>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008144:	4b09      	ldr	r3, [pc, #36]	; (800816c <prvProcessTimerOrBlockTask+0x98>)
 8008146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
}
 8008154:	e001      	b.n	800815a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008156:	f7fe ffa9 	bl	80070ac <xTaskResumeAll>
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200021dc 	.word	0x200021dc
 8008168:	200021e0 	.word	0x200021e0
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008178:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <prvGetNextExpireTime+0x44>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <prvGetNextExpireTime+0x16>
 8008182:	2201      	movs	r2, #1
 8008184:	e000      	b.n	8008188 <prvGetNextExpireTime+0x18>
 8008186:	2200      	movs	r2, #0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008194:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <prvGetNextExpireTime+0x44>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e001      	b.n	80081a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081a4:	68fb      	ldr	r3, [r7, #12]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	200021d8 	.word	0x200021d8

080081b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081c0:	f7ff f810 	bl	80071e4 <xTaskGetTickCount>
 80081c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <prvSampleTimeNow+0x3c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d205      	bcs.n	80081dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081d0:	f000 f936 	bl	8008440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e002      	b.n	80081e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081e2:	4a04      	ldr	r2, [pc, #16]	; (80081f4 <prvSampleTimeNow+0x3c>)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081e8:	68fb      	ldr	r3, [r7, #12]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	200021e8 	.word	0x200021e8

080081f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d812      	bhi.n	8008244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	e01b      	b.n	800826a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <prvInsertTimerInActiveList+0x7c>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3304      	adds	r3, #4
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7fd fe10 	bl	8005e62 <vListInsert>
 8008242:	e012      	b.n	800826a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d206      	bcs.n	800825a <prvInsertTimerInActiveList+0x62>
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d302      	bcc.n	800825a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e007      	b.n	800826a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <prvInsertTimerInActiveList+0x80>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3304      	adds	r3, #4
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f7fd fdfc 	bl	8005e62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800826a:	697b      	ldr	r3, [r7, #20]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200021dc 	.word	0x200021dc
 8008278:	200021d8 	.word	0x200021d8

0800827c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08e      	sub	sp, #56	; 0x38
 8008280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008282:	e0ca      	b.n	800841a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	da18      	bge.n	80082bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800828a:	1d3b      	adds	r3, r7, #4
 800828c:	3304      	adds	r3, #4
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10a      	bne.n	80082ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	61fb      	str	r3, [r7, #28]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b2:	6850      	ldr	r0, [r2, #4]
 80082b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b6:	6892      	ldr	r2, [r2, #8]
 80082b8:	4611      	mov	r1, r2
 80082ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f2c0 80ab 	blt.w	800841a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d004      	beq.n	80082da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fdfd 	bl	8005ed4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082da:	463b      	mov	r3, r7
 80082dc:	4618      	mov	r0, r3
 80082de:	f7ff ff6b 	bl	80081b8 <prvSampleTimeNow>
 80082e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	f200 8096 	bhi.w	8008418 <prvProcessReceivedCommands+0x19c>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <prvProcessReceivedCommands+0x78>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	0800831d 	.word	0x0800831d
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	08008391 	.word	0x08008391
 8008304:	080083a5 	.word	0x080083a5
 8008308:	080083ef 	.word	0x080083ef
 800830c:	0800831d 	.word	0x0800831d
 8008310:	0800831d 	.word	0x0800831d
 8008314:	08008391 	.word	0x08008391
 8008318:	080083a5 	.word	0x080083a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008322:	f043 0301 	orr.w	r3, r3, #1
 8008326:	b2da      	uxtb	r2, r3
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	18d1      	adds	r1, r2, r3
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800833c:	f7ff ff5c 	bl	80081f8 <prvInsertTimerInActiveList>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d069      	beq.n	800841a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d05e      	beq.n	800841a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	441a      	add	r2, r3
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	2300      	movs	r3, #0
 800836a:	2100      	movs	r1, #0
 800836c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836e:	f7ff fe05 	bl	8007f7c <xTimerGenericCommand>
 8008372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d14f      	bne.n	800841a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61bb      	str	r3, [r7, #24]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	b2da      	uxtb	r2, r3
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80083a2:	e03a      	b.n	800841a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083aa:	f043 0301 	orr.w	r3, r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	617b      	str	r3, [r7, #20]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	18d1      	adds	r1, r2, r3
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e8:	f7ff ff06 	bl	80081f8 <prvInsertTimerInActiveList>
					break;
 80083ec:	e015      	b.n	800841a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80083fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fe:	f000 fbd9 	bl	8008bb4 <vPortFree>
 8008402:	e00a      	b.n	800841a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800840a:	f023 0301 	bic.w	r3, r3, #1
 800840e:	b2da      	uxtb	r2, r3
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008416:	e000      	b.n	800841a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008418:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800841a:	4b08      	ldr	r3, [pc, #32]	; (800843c <prvProcessReceivedCommands+0x1c0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	1d39      	adds	r1, r7, #4
 8008420:	2200      	movs	r2, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe f852 	bl	80064cc <xQueueReceive>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	f47f af2a 	bne.w	8008284 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	3730      	adds	r7, #48	; 0x30
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200021e0 	.word	0x200021e0

08008440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008446:	e048      	b.n	80084da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008448:	4b2d      	ldr	r3, [pc, #180]	; (8008500 <prvSwitchTimerLists+0xc0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008452:	4b2b      	ldr	r3, [pc, #172]	; (8008500 <prvSwitchTimerLists+0xc0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fd fd37 	bl	8005ed4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d02e      	beq.n	80084da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	429a      	cmp	r2, r3
 800848c:	d90e      	bls.n	80084ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <prvSwitchTimerLists+0xc0>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f7fd fcdc 	bl	8005e62 <vListInsert>
 80084aa:	e016      	b.n	80084da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084ac:	2300      	movs	r3, #0
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	2300      	movs	r3, #0
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	2100      	movs	r1, #0
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff fd60 	bl	8007f7c <xTimerGenericCommand>
 80084bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	603b      	str	r3, [r7, #0]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <prvSwitchTimerLists+0xc0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1b1      	bne.n	8008448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084e4:	4b06      	ldr	r3, [pc, #24]	; (8008500 <prvSwitchTimerLists+0xc0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084ea:	4b06      	ldr	r3, [pc, #24]	; (8008504 <prvSwitchTimerLists+0xc4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a04      	ldr	r2, [pc, #16]	; (8008500 <prvSwitchTimerLists+0xc0>)
 80084f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084f2:	4a04      	ldr	r2, [pc, #16]	; (8008504 <prvSwitchTimerLists+0xc4>)
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	200021d8 	.word	0x200021d8
 8008504:	200021dc 	.word	0x200021dc

08008508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800850e:	f000 f969 	bl	80087e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <prvCheckForValidListAndQueue+0x60>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d120      	bne.n	800855c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800851a:	4814      	ldr	r0, [pc, #80]	; (800856c <prvCheckForValidListAndQueue+0x64>)
 800851c:	f7fd fc50 	bl	8005dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008520:	4813      	ldr	r0, [pc, #76]	; (8008570 <prvCheckForValidListAndQueue+0x68>)
 8008522:	f7fd fc4d 	bl	8005dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008526:	4b13      	ldr	r3, [pc, #76]	; (8008574 <prvCheckForValidListAndQueue+0x6c>)
 8008528:	4a10      	ldr	r2, [pc, #64]	; (800856c <prvCheckForValidListAndQueue+0x64>)
 800852a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800852c:	4b12      	ldr	r3, [pc, #72]	; (8008578 <prvCheckForValidListAndQueue+0x70>)
 800852e:	4a10      	ldr	r2, [pc, #64]	; (8008570 <prvCheckForValidListAndQueue+0x68>)
 8008530:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008532:	2300      	movs	r3, #0
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	4b11      	ldr	r3, [pc, #68]	; (800857c <prvCheckForValidListAndQueue+0x74>)
 8008538:	4a11      	ldr	r2, [pc, #68]	; (8008580 <prvCheckForValidListAndQueue+0x78>)
 800853a:	2110      	movs	r1, #16
 800853c:	2014      	movs	r0, #20
 800853e:	f7fd fd5b 	bl	8005ff8 <xQueueGenericCreateStatic>
 8008542:	4603      	mov	r3, r0
 8008544:	4a08      	ldr	r2, [pc, #32]	; (8008568 <prvCheckForValidListAndQueue+0x60>)
 8008546:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008548:	4b07      	ldr	r3, [pc, #28]	; (8008568 <prvCheckForValidListAndQueue+0x60>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <prvCheckForValidListAndQueue+0x60>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	490b      	ldr	r1, [pc, #44]	; (8008584 <prvCheckForValidListAndQueue+0x7c>)
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fada 	bl	8006b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800855c:	f000 f972 	bl	8008844 <vPortExitCritical>
}
 8008560:	bf00      	nop
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200021e0 	.word	0x200021e0
 800856c:	200021b0 	.word	0x200021b0
 8008570:	200021c4 	.word	0x200021c4
 8008574:	200021d8 	.word	0x200021d8
 8008578:	200021dc 	.word	0x200021dc
 800857c:	2000232c 	.word	0x2000232c
 8008580:	200021ec 	.word	0x200021ec
 8008584:	0800c368 	.word	0x0800c368

08008588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3b04      	subs	r3, #4
 8008598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3b04      	subs	r3, #4
 80085a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f023 0201 	bic.w	r2, r3, #1
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3b04      	subs	r3, #4
 80085b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085b8:	4a0c      	ldr	r2, [pc, #48]	; (80085ec <pxPortInitialiseStack+0x64>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3b14      	subs	r3, #20
 80085c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f06f 0202 	mvn.w	r2, #2
 80085d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3b20      	subs	r3, #32
 80085dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	080085f1 	.word	0x080085f1

080085f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <prvTaskExitError+0x54>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008602:	d00a      	beq.n	800861a <prvTaskExitError+0x2a>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <prvTaskExitError+0x28>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	60bb      	str	r3, [r7, #8]
}
 800862c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800862e:	bf00      	nop
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0fc      	beq.n	8008630 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	200000c4 	.word	0x200000c4
	...

08008650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <pxCurrentTCBConst2>)
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	6808      	ldr	r0, [r1, #0]
 8008656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	f380 8809 	msr	PSP, r0
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8811 	msr	BASEPRI, r0
 800866a:	4770      	bx	lr
 800866c:	f3af 8000 	nop.w

08008670 <pxCurrentTCBConst2>:
 8008670:	20001f74 	.word	0x20001f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008678:	4808      	ldr	r0, [pc, #32]	; (800869c <prvPortStartFirstTask+0x24>)
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	6800      	ldr	r0, [r0, #0]
 800867e:	f380 8808 	msr	MSP, r0
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8814 	msr	CONTROL, r0
 800868a:	b662      	cpsie	i
 800868c:	b661      	cpsie	f
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	df00      	svc	0
 8008698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800869a:	bf00      	nop
 800869c:	e000ed08 	.word	0xe000ed08

080086a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086a6:	4b46      	ldr	r3, [pc, #280]	; (80087c0 <xPortStartScheduler+0x120>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a46      	ldr	r2, [pc, #280]	; (80087c4 <xPortStartScheduler+0x124>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10a      	bne.n	80086c6 <xPortStartScheduler+0x26>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	613b      	str	r3, [r7, #16]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086c6:	4b3e      	ldr	r3, [pc, #248]	; (80087c0 <xPortStartScheduler+0x120>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10a      	bne.n	80086e6 <xPortStartScheduler+0x46>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086e6:	4b39      	ldr	r3, [pc, #228]	; (80087cc <xPortStartScheduler+0x12c>)
 80086e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <xPortStartScheduler+0x130>)
 800870c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800870e:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <xPortStartScheduler+0x134>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008714:	e009      	b.n	800872a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008716:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <xPortStartScheduler+0x134>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3b01      	subs	r3, #1
 800871c:	4a2d      	ldr	r2, [pc, #180]	; (80087d4 <xPortStartScheduler+0x134>)
 800871e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	b2db      	uxtb	r3, r3
 8008728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d0ef      	beq.n	8008716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008736:	4b27      	ldr	r3, [pc, #156]	; (80087d4 <xPortStartScheduler+0x134>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1c3 0307 	rsb	r3, r3, #7
 800873e:	2b04      	cmp	r3, #4
 8008740:	d00a      	beq.n	8008758 <xPortStartScheduler+0xb8>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60bb      	str	r3, [r7, #8]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008758:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <xPortStartScheduler+0x134>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <xPortStartScheduler+0x134>)
 8008760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <xPortStartScheduler+0x134>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800876a:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <xPortStartScheduler+0x134>)
 800876c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008776:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <xPortStartScheduler+0x138>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <xPortStartScheduler+0x138>)
 800877c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <xPortStartScheduler+0x138>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <xPortStartScheduler+0x138>)
 8008788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800878c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800878e:	f000 f8dd 	bl	800894c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <xPortStartScheduler+0x13c>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008798:	f000 f8f6 	bl	8008988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <xPortStartScheduler+0x140>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0f      	ldr	r2, [pc, #60]	; (80087e0 <xPortStartScheduler+0x140>)
 80087a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087a8:	f7ff ff66 	bl	8008678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087ac:	f7fe fde2 	bl	8007374 <vTaskSwitchContext>
	prvTaskExitError();
 80087b0:	f7ff ff1e 	bl	80085f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	e000ed00 	.word	0xe000ed00
 80087c4:	410fc271 	.word	0x410fc271
 80087c8:	410fc270 	.word	0x410fc270
 80087cc:	e000e400 	.word	0xe000e400
 80087d0:	2000237c 	.word	0x2000237c
 80087d4:	20002380 	.word	0x20002380
 80087d8:	e000ed20 	.word	0xe000ed20
 80087dc:	200000c4 	.word	0x200000c4
 80087e0:	e000ef34 	.word	0xe000ef34

080087e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	607b      	str	r3, [r7, #4]
}
 80087fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <vPortEnterCritical+0x58>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	4a0d      	ldr	r2, [pc, #52]	; (800883c <vPortEnterCritical+0x58>)
 8008806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <vPortEnterCritical+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d10f      	bne.n	8008830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortEnterCritical+0x5c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <vPortEnterCritical+0x4c>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	603b      	str	r3, [r7, #0]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <vPortEnterCritical+0x4a>
	}
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	200000c4 	.word	0x200000c4
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800884a:	4b12      	ldr	r3, [pc, #72]	; (8008894 <vPortExitCritical+0x50>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <vPortExitCritical+0x24>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	607b      	str	r3, [r7, #4]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <vPortExitCritical+0x50>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <vPortExitCritical+0x50>)
 8008870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <vPortExitCritical+0x42>
 800887a:	2300      	movs	r3, #0
 800887c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f383 8811 	msr	BASEPRI, r3
}
 8008884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	200000c4 	.word	0x200000c4
	...

080088a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088a0:	f3ef 8009 	mrs	r0, PSP
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4b15      	ldr	r3, [pc, #84]	; (8008900 <pxCurrentTCBConst>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	f01e 0f10 	tst.w	lr, #16
 80088b0:	bf08      	it	eq
 80088b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088c4:	f380 8811 	msr	BASEPRI, r0
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f7fe fd50 	bl	8007374 <vTaskSwitchContext>
 80088d4:	f04f 0000 	mov.w	r0, #0
 80088d8:	f380 8811 	msr	BASEPRI, r0
 80088dc:	bc09      	pop	{r0, r3}
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	6808      	ldr	r0, [r1, #0]
 80088e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e6:	f01e 0f10 	tst.w	lr, #16
 80088ea:	bf08      	it	eq
 80088ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088f0:	f380 8809 	msr	PSP, r0
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst>:
 8008900:	20001f74 	.word	0x20001f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
}
 8008920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008922:	f7fe fc6f 	bl	8007204 <xTaskIncrementTick>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <xPortSysTickHandler+0x40>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f383 8811 	msr	BASEPRI, r3
}
 800893e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008950:	4b09      	ldr	r3, [pc, #36]	; (8008978 <vPortSetupTimerInterrupt+0x2c>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <vPortSetupTimerInterrupt+0x30>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <vPortSetupTimerInterrupt+0x34>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a08      	ldr	r2, [pc, #32]	; (8008984 <vPortSetupTimerInterrupt+0x38>)
 8008962:	3b01      	subs	r3, #1
 8008964:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008966:	4b04      	ldr	r3, [pc, #16]	; (8008978 <vPortSetupTimerInterrupt+0x2c>)
 8008968:	2207      	movs	r2, #7
 800896a:	601a      	str	r2, [r3, #0]
}
 800896c:	bf00      	nop
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	e000e010 	.word	0xe000e010
 800897c:	e000e018 	.word	0xe000e018
 8008980:	200000b8 	.word	0x200000b8
 8008984:	e000e014 	.word	0xe000e014

08008988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008988:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008998 <vPortEnableVFP+0x10>
 800898c:	6801      	ldr	r1, [r0, #0]
 800898e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008992:	6001      	str	r1, [r0, #0]
 8008994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008996:	bf00      	nop
 8008998:	e000ed88 	.word	0xe000ed88

0800899c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089a2:	f3ef 8305 	mrs	r3, IPSR
 80089a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b0f      	cmp	r3, #15
 80089ac:	d914      	bls.n	80089d8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089ae:	4a17      	ldr	r2, [pc, #92]	; (8008a0c <vPortValidateInterruptPriority+0x70>)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089b8:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <vPortValidateInterruptPriority+0x74>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	7afa      	ldrb	r2, [r7, #11]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d20a      	bcs.n	80089d8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	607b      	str	r3, [r7, #4]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <vPortValidateInterruptPriority+0x78>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089e0:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <vPortValidateInterruptPriority+0x7c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d90a      	bls.n	80089fe <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	603b      	str	r3, [r7, #0]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <vPortValidateInterruptPriority+0x60>
	}
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	e000e3f0 	.word	0xe000e3f0
 8008a10:	2000237c 	.word	0x2000237c
 8008a14:	e000ed0c 	.word	0xe000ed0c
 8008a18:	20002380 	.word	0x20002380

08008a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a28:	f7fe fb32 	bl	8007090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a2c:	4b5b      	ldr	r3, [pc, #364]	; (8008b9c <pvPortMalloc+0x180>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a34:	f000 f920 	bl	8008c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a38:	4b59      	ldr	r3, [pc, #356]	; (8008ba0 <pvPortMalloc+0x184>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f040 8093 	bne.w	8008b6c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01d      	beq.n	8008a88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a4c:	2208      	movs	r2, #8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d014      	beq.n	8008a88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f023 0307 	bic.w	r3, r3, #7
 8008a64:	3308      	adds	r3, #8
 8008a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <pvPortMalloc+0x6c>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	617b      	str	r3, [r7, #20]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d06e      	beq.n	8008b6c <pvPortMalloc+0x150>
 8008a8e:	4b45      	ldr	r3, [pc, #276]	; (8008ba4 <pvPortMalloc+0x188>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d869      	bhi.n	8008b6c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a98:	4b43      	ldr	r3, [pc, #268]	; (8008ba8 <pvPortMalloc+0x18c>)
 8008a9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a9c:	4b42      	ldr	r3, [pc, #264]	; (8008ba8 <pvPortMalloc+0x18c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aa2:	e004      	b.n	8008aae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d903      	bls.n	8008ac0 <pvPortMalloc+0xa4>
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1f1      	bne.n	8008aa4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ac0:	4b36      	ldr	r3, [pc, #216]	; (8008b9c <pvPortMalloc+0x180>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d050      	beq.n	8008b6c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2208      	movs	r2, #8
 8008ad0:	4413      	add	r3, r2
 8008ad2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d91f      	bls.n	8008b2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4413      	add	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <pvPortMalloc+0xf8>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	613b      	str	r3, [r7, #16]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f000 f908 	bl	8008d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <pvPortMalloc+0x188>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	4a1b      	ldr	r2, [pc, #108]	; (8008ba4 <pvPortMalloc+0x188>)
 8008b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ba4 <pvPortMalloc+0x188>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b1b      	ldr	r3, [pc, #108]	; (8008bac <pvPortMalloc+0x190>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d203      	bcs.n	8008b4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b46:	4b17      	ldr	r3, [pc, #92]	; (8008ba4 <pvPortMalloc+0x188>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a18      	ldr	r2, [pc, #96]	; (8008bac <pvPortMalloc+0x190>)
 8008b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	4b13      	ldr	r3, [pc, #76]	; (8008ba0 <pvPortMalloc+0x184>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <pvPortMalloc+0x194>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3301      	adds	r3, #1
 8008b68:	4a11      	ldr	r2, [pc, #68]	; (8008bb0 <pvPortMalloc+0x194>)
 8008b6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b6c:	f7fe fa9e 	bl	80070ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <pvPortMalloc+0x174>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	60fb      	str	r3, [r7, #12]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <pvPortMalloc+0x172>
	return pvReturn;
 8008b90:	69fb      	ldr	r3, [r7, #28]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3728      	adds	r7, #40	; 0x28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20005f8c 	.word	0x20005f8c
 8008ba0:	20005fa0 	.word	0x20005fa0
 8008ba4:	20005f90 	.word	0x20005f90
 8008ba8:	20005f84 	.word	0x20005f84
 8008bac:	20005f94 	.word	0x20005f94
 8008bb0:	20005f98 	.word	0x20005f98

08008bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d04d      	beq.n	8008c62 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	425b      	negs	r3, r3
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <vPortFree+0xb8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4013      	ands	r3, r2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <vPortFree+0x44>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	60fb      	str	r3, [r7, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <vPortFree+0x62>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60bb      	str	r3, [r7, #8]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <vPortFree+0xb8>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01e      	beq.n	8008c62 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11a      	bne.n	8008c62 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <vPortFree+0xb8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	43db      	mvns	r3, r3
 8008c36:	401a      	ands	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c3c:	f7fe fa28 	bl	8007090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <vPortFree+0xbc>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4413      	add	r3, r2
 8008c4a:	4a09      	ldr	r2, [pc, #36]	; (8008c70 <vPortFree+0xbc>)
 8008c4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c4e:	6938      	ldr	r0, [r7, #16]
 8008c50:	f000 f874 	bl	8008d3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c54:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <vPortFree+0xc0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	4a06      	ldr	r2, [pc, #24]	; (8008c74 <vPortFree+0xc0>)
 8008c5c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c5e:	f7fe fa25 	bl	80070ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c62:	bf00      	nop
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20005fa0 	.word	0x20005fa0
 8008c70:	20005f90 	.word	0x20005f90
 8008c74:	20005f9c 	.word	0x20005f9c

08008c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c84:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <prvHeapInit+0xac>)
 8008c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00c      	beq.n	8008cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3307      	adds	r3, #7
 8008c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	; (8008d24 <prvHeapInit+0xac>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cb0:	4a1d      	ldr	r2, [pc, #116]	; (8008d28 <prvHeapInit+0xb0>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <prvHeapInit+0xb0>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cc4:	2208      	movs	r2, #8
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0307 	bic.w	r3, r3, #7
 8008cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <prvHeapInit+0xb4>)
 8008cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cda:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <prvHeapInit+0xb4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <prvHeapInit+0xb4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <prvHeapInit+0xb4>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4a0a      	ldr	r2, [pc, #40]	; (8008d30 <prvHeapInit+0xb8>)
 8008d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	4a09      	ldr	r2, [pc, #36]	; (8008d34 <prvHeapInit+0xbc>)
 8008d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d10:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <prvHeapInit+0xc0>)
 8008d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d16:	601a      	str	r2, [r3, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20002384 	.word	0x20002384
 8008d28:	20005f84 	.word	0x20005f84
 8008d2c:	20005f8c 	.word	0x20005f8c
 8008d30:	20005f94 	.word	0x20005f94
 8008d34:	20005f90 	.word	0x20005f90
 8008d38:	20005fa0 	.word	0x20005fa0

08008d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d44:	4b28      	ldr	r3, [pc, #160]	; (8008de8 <prvInsertBlockIntoFreeList+0xac>)
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e002      	b.n	8008d50 <prvInsertBlockIntoFreeList+0x14>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d8f7      	bhi.n	8008d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d108      	bne.n	8008d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	441a      	add	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	441a      	add	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d118      	bne.n	8008dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	4b15      	ldr	r3, [pc, #84]	; (8008dec <prvInsertBlockIntoFreeList+0xb0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d00d      	beq.n	8008dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	441a      	add	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	e008      	b.n	8008dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <prvInsertBlockIntoFreeList+0xb0>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e003      	b.n	8008dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d002      	beq.n	8008dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dda:	bf00      	nop
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20005f84 	.word	0x20005f84
 8008dec:	20005f8c 	.word	0x20005f8c

08008df0 <__cvt>:
 8008df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	ec55 4b10 	vmov	r4, r5, d0
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	460e      	mov	r6, r1
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	462b      	mov	r3, r5
 8008e00:	bfbb      	ittet	lt
 8008e02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e06:	461d      	movlt	r5, r3
 8008e08:	2300      	movge	r3, #0
 8008e0a:	232d      	movlt	r3, #45	; 0x2d
 8008e0c:	700b      	strb	r3, [r1, #0]
 8008e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e14:	4691      	mov	r9, r2
 8008e16:	f023 0820 	bic.w	r8, r3, #32
 8008e1a:	bfbc      	itt	lt
 8008e1c:	4622      	movlt	r2, r4
 8008e1e:	4614      	movlt	r4, r2
 8008e20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e24:	d005      	beq.n	8008e32 <__cvt+0x42>
 8008e26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e2a:	d100      	bne.n	8008e2e <__cvt+0x3e>
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	2102      	movs	r1, #2
 8008e30:	e000      	b.n	8008e34 <__cvt+0x44>
 8008e32:	2103      	movs	r1, #3
 8008e34:	ab03      	add	r3, sp, #12
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	ab02      	add	r3, sp, #8
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	ec45 4b10 	vmov	d0, r4, r5
 8008e40:	4653      	mov	r3, sl
 8008e42:	4632      	mov	r2, r6
 8008e44:	f001 f830 	bl	8009ea8 <_dtoa_r>
 8008e48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	d102      	bne.n	8008e56 <__cvt+0x66>
 8008e50:	f019 0f01 	tst.w	r9, #1
 8008e54:	d022      	beq.n	8008e9c <__cvt+0xac>
 8008e56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e5a:	eb07 0906 	add.w	r9, r7, r6
 8008e5e:	d110      	bne.n	8008e82 <__cvt+0x92>
 8008e60:	783b      	ldrb	r3, [r7, #0]
 8008e62:	2b30      	cmp	r3, #48	; 0x30
 8008e64:	d10a      	bne.n	8008e7c <__cvt+0x8c>
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	f7f7 fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e72:	b918      	cbnz	r0, 8008e7c <__cvt+0x8c>
 8008e74:	f1c6 0601 	rsb	r6, r6, #1
 8008e78:	f8ca 6000 	str.w	r6, [sl]
 8008e7c:	f8da 3000 	ldr.w	r3, [sl]
 8008e80:	4499      	add	r9, r3
 8008e82:	2200      	movs	r2, #0
 8008e84:	2300      	movs	r3, #0
 8008e86:	4620      	mov	r0, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7f7 fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e8e:	b108      	cbz	r0, 8008e94 <__cvt+0xa4>
 8008e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e94:	2230      	movs	r2, #48	; 0x30
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	454b      	cmp	r3, r9
 8008e9a:	d307      	bcc.n	8008eac <__cvt+0xbc>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ea0:	1bdb      	subs	r3, r3, r7
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	b004      	add	sp, #16
 8008ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eac:	1c59      	adds	r1, r3, #1
 8008eae:	9103      	str	r1, [sp, #12]
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	e7f0      	b.n	8008e96 <__cvt+0xa6>

08008eb4 <__exponent>:
 8008eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	bfb8      	it	lt
 8008ebc:	4249      	neglt	r1, r1
 8008ebe:	f803 2b02 	strb.w	r2, [r3], #2
 8008ec2:	bfb4      	ite	lt
 8008ec4:	222d      	movlt	r2, #45	; 0x2d
 8008ec6:	222b      	movge	r2, #43	; 0x2b
 8008ec8:	2909      	cmp	r1, #9
 8008eca:	7042      	strb	r2, [r0, #1]
 8008ecc:	dd2a      	ble.n	8008f24 <__exponent+0x70>
 8008ece:	f10d 0207 	add.w	r2, sp, #7
 8008ed2:	4617      	mov	r7, r2
 8008ed4:	260a      	movs	r6, #10
 8008ed6:	4694      	mov	ip, r2
 8008ed8:	fb91 f5f6 	sdiv	r5, r1, r6
 8008edc:	fb06 1415 	mls	r4, r6, r5, r1
 8008ee0:	3430      	adds	r4, #48	; 0x30
 8008ee2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	2c63      	cmp	r4, #99	; 0x63
 8008eea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008eee:	4629      	mov	r1, r5
 8008ef0:	dcf1      	bgt.n	8008ed6 <__exponent+0x22>
 8008ef2:	3130      	adds	r1, #48	; 0x30
 8008ef4:	f1ac 0402 	sub.w	r4, ip, #2
 8008ef8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008efc:	1c41      	adds	r1, r0, #1
 8008efe:	4622      	mov	r2, r4
 8008f00:	42ba      	cmp	r2, r7
 8008f02:	d30a      	bcc.n	8008f1a <__exponent+0x66>
 8008f04:	f10d 0209 	add.w	r2, sp, #9
 8008f08:	eba2 020c 	sub.w	r2, r2, ip
 8008f0c:	42bc      	cmp	r4, r7
 8008f0e:	bf88      	it	hi
 8008f10:	2200      	movhi	r2, #0
 8008f12:	4413      	add	r3, r2
 8008f14:	1a18      	subs	r0, r3, r0
 8008f16:	b003      	add	sp, #12
 8008f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f22:	e7ed      	b.n	8008f00 <__exponent+0x4c>
 8008f24:	2330      	movs	r3, #48	; 0x30
 8008f26:	3130      	adds	r1, #48	; 0x30
 8008f28:	7083      	strb	r3, [r0, #2]
 8008f2a:	70c1      	strb	r1, [r0, #3]
 8008f2c:	1d03      	adds	r3, r0, #4
 8008f2e:	e7f1      	b.n	8008f14 <__exponent+0x60>

08008f30 <_printf_float>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	ed2d 8b02 	vpush	{d8}
 8008f38:	b08d      	sub	sp, #52	; 0x34
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f40:	4616      	mov	r6, r2
 8008f42:	461f      	mov	r7, r3
 8008f44:	4605      	mov	r5, r0
 8008f46:	f000 fe4b 	bl	8009be0 <_localeconv_r>
 8008f4a:	f8d0 a000 	ldr.w	sl, [r0]
 8008f4e:	4650      	mov	r0, sl
 8008f50:	f7f7 f99e 	bl	8000290 <strlen>
 8008f54:	2300      	movs	r3, #0
 8008f56:	930a      	str	r3, [sp, #40]	; 0x28
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	9305      	str	r3, [sp, #20]
 8008f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f64:	3307      	adds	r3, #7
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	f103 0208 	add.w	r2, r3, #8
 8008f6e:	f8c8 2000 	str.w	r2, [r8]
 8008f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f80:	ee08 0a10 	vmov	s16, r0
 8008f84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f8c:	4b9e      	ldr	r3, [pc, #632]	; (8009208 <_printf_float+0x2d8>)
 8008f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f92:	f7f7 fddb 	bl	8000b4c <__aeabi_dcmpun>
 8008f96:	bb88      	cbnz	r0, 8008ffc <_printf_float+0xcc>
 8008f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f9c:	4b9a      	ldr	r3, [pc, #616]	; (8009208 <_printf_float+0x2d8>)
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fa2:	f7f7 fdb5 	bl	8000b10 <__aeabi_dcmple>
 8008fa6:	bb48      	cbnz	r0, 8008ffc <_printf_float+0xcc>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2300      	movs	r3, #0
 8008fac:	4640      	mov	r0, r8
 8008fae:	4649      	mov	r1, r9
 8008fb0:	f7f7 fda4 	bl	8000afc <__aeabi_dcmplt>
 8008fb4:	b110      	cbz	r0, 8008fbc <_printf_float+0x8c>
 8008fb6:	232d      	movs	r3, #45	; 0x2d
 8008fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fbc:	4a93      	ldr	r2, [pc, #588]	; (800920c <_printf_float+0x2dc>)
 8008fbe:	4b94      	ldr	r3, [pc, #592]	; (8009210 <_printf_float+0x2e0>)
 8008fc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008fc4:	bf94      	ite	ls
 8008fc6:	4690      	movls	r8, r2
 8008fc8:	4698      	movhi	r8, r3
 8008fca:	2303      	movs	r3, #3
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	9b05      	ldr	r3, [sp, #20]
 8008fd0:	f023 0304 	bic.w	r3, r3, #4
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	f04f 0900 	mov.w	r9, #0
 8008fda:	9700      	str	r7, [sp, #0]
 8008fdc:	4633      	mov	r3, r6
 8008fde:	aa0b      	add	r2, sp, #44	; 0x2c
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 f9da 	bl	800939c <_printf_common>
 8008fe8:	3001      	adds	r0, #1
 8008fea:	f040 8090 	bne.w	800910e <_printf_float+0x1de>
 8008fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ff2:	b00d      	add	sp, #52	; 0x34
 8008ff4:	ecbd 8b02 	vpop	{d8}
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7f7 fda2 	bl	8000b4c <__aeabi_dcmpun>
 8009008:	b140      	cbz	r0, 800901c <_printf_float+0xec>
 800900a:	464b      	mov	r3, r9
 800900c:	2b00      	cmp	r3, #0
 800900e:	bfbc      	itt	lt
 8009010:	232d      	movlt	r3, #45	; 0x2d
 8009012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009016:	4a7f      	ldr	r2, [pc, #508]	; (8009214 <_printf_float+0x2e4>)
 8009018:	4b7f      	ldr	r3, [pc, #508]	; (8009218 <_printf_float+0x2e8>)
 800901a:	e7d1      	b.n	8008fc0 <_printf_float+0x90>
 800901c:	6863      	ldr	r3, [r4, #4]
 800901e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009022:	9206      	str	r2, [sp, #24]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	d13f      	bne.n	80090a8 <_printf_float+0x178>
 8009028:	2306      	movs	r3, #6
 800902a:	6063      	str	r3, [r4, #4]
 800902c:	9b05      	ldr	r3, [sp, #20]
 800902e:	6861      	ldr	r1, [r4, #4]
 8009030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009034:	2300      	movs	r3, #0
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	ab0a      	add	r3, sp, #40	; 0x28
 800903a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800903e:	ab09      	add	r3, sp, #36	; 0x24
 8009040:	ec49 8b10 	vmov	d0, r8, r9
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	6022      	str	r2, [r4, #0]
 8009048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800904c:	4628      	mov	r0, r5
 800904e:	f7ff fecf 	bl	8008df0 <__cvt>
 8009052:	9b06      	ldr	r3, [sp, #24]
 8009054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009056:	2b47      	cmp	r3, #71	; 0x47
 8009058:	4680      	mov	r8, r0
 800905a:	d108      	bne.n	800906e <_printf_float+0x13e>
 800905c:	1cc8      	adds	r0, r1, #3
 800905e:	db02      	blt.n	8009066 <_printf_float+0x136>
 8009060:	6863      	ldr	r3, [r4, #4]
 8009062:	4299      	cmp	r1, r3
 8009064:	dd41      	ble.n	80090ea <_printf_float+0x1ba>
 8009066:	f1ab 0302 	sub.w	r3, fp, #2
 800906a:	fa5f fb83 	uxtb.w	fp, r3
 800906e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009072:	d820      	bhi.n	80090b6 <_printf_float+0x186>
 8009074:	3901      	subs	r1, #1
 8009076:	465a      	mov	r2, fp
 8009078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800907c:	9109      	str	r1, [sp, #36]	; 0x24
 800907e:	f7ff ff19 	bl	8008eb4 <__exponent>
 8009082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009084:	1813      	adds	r3, r2, r0
 8009086:	2a01      	cmp	r2, #1
 8009088:	4681      	mov	r9, r0
 800908a:	6123      	str	r3, [r4, #16]
 800908c:	dc02      	bgt.n	8009094 <_printf_float+0x164>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	07d2      	lsls	r2, r2, #31
 8009092:	d501      	bpl.n	8009098 <_printf_float+0x168>
 8009094:	3301      	adds	r3, #1
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800909c:	2b00      	cmp	r3, #0
 800909e:	d09c      	beq.n	8008fda <_printf_float+0xaa>
 80090a0:	232d      	movs	r3, #45	; 0x2d
 80090a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a6:	e798      	b.n	8008fda <_printf_float+0xaa>
 80090a8:	9a06      	ldr	r2, [sp, #24]
 80090aa:	2a47      	cmp	r2, #71	; 0x47
 80090ac:	d1be      	bne.n	800902c <_printf_float+0xfc>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1bc      	bne.n	800902c <_printf_float+0xfc>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e7b9      	b.n	800902a <_printf_float+0xfa>
 80090b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80090ba:	d118      	bne.n	80090ee <_printf_float+0x1be>
 80090bc:	2900      	cmp	r1, #0
 80090be:	6863      	ldr	r3, [r4, #4]
 80090c0:	dd0b      	ble.n	80090da <_printf_float+0x1aa>
 80090c2:	6121      	str	r1, [r4, #16]
 80090c4:	b913      	cbnz	r3, 80090cc <_printf_float+0x19c>
 80090c6:	6822      	ldr	r2, [r4, #0]
 80090c8:	07d0      	lsls	r0, r2, #31
 80090ca:	d502      	bpl.n	80090d2 <_printf_float+0x1a2>
 80090cc:	3301      	adds	r3, #1
 80090ce:	440b      	add	r3, r1
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80090d4:	f04f 0900 	mov.w	r9, #0
 80090d8:	e7de      	b.n	8009098 <_printf_float+0x168>
 80090da:	b913      	cbnz	r3, 80090e2 <_printf_float+0x1b2>
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	07d2      	lsls	r2, r2, #31
 80090e0:	d501      	bpl.n	80090e6 <_printf_float+0x1b6>
 80090e2:	3302      	adds	r3, #2
 80090e4:	e7f4      	b.n	80090d0 <_printf_float+0x1a0>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e7f2      	b.n	80090d0 <_printf_float+0x1a0>
 80090ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80090ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f0:	4299      	cmp	r1, r3
 80090f2:	db05      	blt.n	8009100 <_printf_float+0x1d0>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	6121      	str	r1, [r4, #16]
 80090f8:	07d8      	lsls	r0, r3, #31
 80090fa:	d5ea      	bpl.n	80090d2 <_printf_float+0x1a2>
 80090fc:	1c4b      	adds	r3, r1, #1
 80090fe:	e7e7      	b.n	80090d0 <_printf_float+0x1a0>
 8009100:	2900      	cmp	r1, #0
 8009102:	bfd4      	ite	le
 8009104:	f1c1 0202 	rsble	r2, r1, #2
 8009108:	2201      	movgt	r2, #1
 800910a:	4413      	add	r3, r2
 800910c:	e7e0      	b.n	80090d0 <_printf_float+0x1a0>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	055a      	lsls	r2, r3, #21
 8009112:	d407      	bmi.n	8009124 <_printf_float+0x1f4>
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	4642      	mov	r2, r8
 8009118:	4631      	mov	r1, r6
 800911a:	4628      	mov	r0, r5
 800911c:	47b8      	blx	r7
 800911e:	3001      	adds	r0, #1
 8009120:	d12c      	bne.n	800917c <_printf_float+0x24c>
 8009122:	e764      	b.n	8008fee <_printf_float+0xbe>
 8009124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009128:	f240 80e0 	bls.w	80092ec <_printf_float+0x3bc>
 800912c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009130:	2200      	movs	r2, #0
 8009132:	2300      	movs	r3, #0
 8009134:	f7f7 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009138:	2800      	cmp	r0, #0
 800913a:	d034      	beq.n	80091a6 <_printf_float+0x276>
 800913c:	4a37      	ldr	r2, [pc, #220]	; (800921c <_printf_float+0x2ec>)
 800913e:	2301      	movs	r3, #1
 8009140:	4631      	mov	r1, r6
 8009142:	4628      	mov	r0, r5
 8009144:	47b8      	blx	r7
 8009146:	3001      	adds	r0, #1
 8009148:	f43f af51 	beq.w	8008fee <_printf_float+0xbe>
 800914c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009150:	429a      	cmp	r2, r3
 8009152:	db02      	blt.n	800915a <_printf_float+0x22a>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	07d8      	lsls	r0, r3, #31
 8009158:	d510      	bpl.n	800917c <_printf_float+0x24c>
 800915a:	ee18 3a10 	vmov	r3, s16
 800915e:	4652      	mov	r2, sl
 8009160:	4631      	mov	r1, r6
 8009162:	4628      	mov	r0, r5
 8009164:	47b8      	blx	r7
 8009166:	3001      	adds	r0, #1
 8009168:	f43f af41 	beq.w	8008fee <_printf_float+0xbe>
 800916c:	f04f 0800 	mov.w	r8, #0
 8009170:	f104 091a 	add.w	r9, r4, #26
 8009174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009176:	3b01      	subs	r3, #1
 8009178:	4543      	cmp	r3, r8
 800917a:	dc09      	bgt.n	8009190 <_printf_float+0x260>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	079b      	lsls	r3, r3, #30
 8009180:	f100 8107 	bmi.w	8009392 <_printf_float+0x462>
 8009184:	68e0      	ldr	r0, [r4, #12]
 8009186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009188:	4298      	cmp	r0, r3
 800918a:	bfb8      	it	lt
 800918c:	4618      	movlt	r0, r3
 800918e:	e730      	b.n	8008ff2 <_printf_float+0xc2>
 8009190:	2301      	movs	r3, #1
 8009192:	464a      	mov	r2, r9
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	f43f af27 	beq.w	8008fee <_printf_float+0xbe>
 80091a0:	f108 0801 	add.w	r8, r8, #1
 80091a4:	e7e6      	b.n	8009174 <_printf_float+0x244>
 80091a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dc39      	bgt.n	8009220 <_printf_float+0x2f0>
 80091ac:	4a1b      	ldr	r2, [pc, #108]	; (800921c <_printf_float+0x2ec>)
 80091ae:	2301      	movs	r3, #1
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f af19 	beq.w	8008fee <_printf_float+0xbe>
 80091bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80091c0:	4313      	orrs	r3, r2
 80091c2:	d102      	bne.n	80091ca <_printf_float+0x29a>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07d9      	lsls	r1, r3, #31
 80091c8:	d5d8      	bpl.n	800917c <_printf_float+0x24c>
 80091ca:	ee18 3a10 	vmov	r3, s16
 80091ce:	4652      	mov	r2, sl
 80091d0:	4631      	mov	r1, r6
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b8      	blx	r7
 80091d6:	3001      	adds	r0, #1
 80091d8:	f43f af09 	beq.w	8008fee <_printf_float+0xbe>
 80091dc:	f04f 0900 	mov.w	r9, #0
 80091e0:	f104 0a1a 	add.w	sl, r4, #26
 80091e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e6:	425b      	negs	r3, r3
 80091e8:	454b      	cmp	r3, r9
 80091ea:	dc01      	bgt.n	80091f0 <_printf_float+0x2c0>
 80091ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ee:	e792      	b.n	8009116 <_printf_float+0x1e6>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4652      	mov	r2, sl
 80091f4:	4631      	mov	r1, r6
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	f43f aef7 	beq.w	8008fee <_printf_float+0xbe>
 8009200:	f109 0901 	add.w	r9, r9, #1
 8009204:	e7ee      	b.n	80091e4 <_printf_float+0x2b4>
 8009206:	bf00      	nop
 8009208:	7fefffff 	.word	0x7fefffff
 800920c:	0800c499 	.word	0x0800c499
 8009210:	0800c49d 	.word	0x0800c49d
 8009214:	0800c4a1 	.word	0x0800c4a1
 8009218:	0800c4a5 	.word	0x0800c4a5
 800921c:	0800c4a9 	.word	0x0800c4a9
 8009220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009224:	429a      	cmp	r2, r3
 8009226:	bfa8      	it	ge
 8009228:	461a      	movge	r2, r3
 800922a:	2a00      	cmp	r2, #0
 800922c:	4691      	mov	r9, r2
 800922e:	dc37      	bgt.n	80092a0 <_printf_float+0x370>
 8009230:	f04f 0b00 	mov.w	fp, #0
 8009234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009238:	f104 021a 	add.w	r2, r4, #26
 800923c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800923e:	9305      	str	r3, [sp, #20]
 8009240:	eba3 0309 	sub.w	r3, r3, r9
 8009244:	455b      	cmp	r3, fp
 8009246:	dc33      	bgt.n	80092b0 <_printf_float+0x380>
 8009248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800924c:	429a      	cmp	r2, r3
 800924e:	db3b      	blt.n	80092c8 <_printf_float+0x398>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	07da      	lsls	r2, r3, #31
 8009254:	d438      	bmi.n	80092c8 <_printf_float+0x398>
 8009256:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800925a:	eba2 0903 	sub.w	r9, r2, r3
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	1ad2      	subs	r2, r2, r3
 8009262:	4591      	cmp	r9, r2
 8009264:	bfa8      	it	ge
 8009266:	4691      	movge	r9, r2
 8009268:	f1b9 0f00 	cmp.w	r9, #0
 800926c:	dc35      	bgt.n	80092da <_printf_float+0x3aa>
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009276:	f104 0a1a 	add.w	sl, r4, #26
 800927a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800927e:	1a9b      	subs	r3, r3, r2
 8009280:	eba3 0309 	sub.w	r3, r3, r9
 8009284:	4543      	cmp	r3, r8
 8009286:	f77f af79 	ble.w	800917c <_printf_float+0x24c>
 800928a:	2301      	movs	r3, #1
 800928c:	4652      	mov	r2, sl
 800928e:	4631      	mov	r1, r6
 8009290:	4628      	mov	r0, r5
 8009292:	47b8      	blx	r7
 8009294:	3001      	adds	r0, #1
 8009296:	f43f aeaa 	beq.w	8008fee <_printf_float+0xbe>
 800929a:	f108 0801 	add.w	r8, r8, #1
 800929e:	e7ec      	b.n	800927a <_printf_float+0x34a>
 80092a0:	4613      	mov	r3, r2
 80092a2:	4631      	mov	r1, r6
 80092a4:	4642      	mov	r2, r8
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b8      	blx	r7
 80092aa:	3001      	adds	r0, #1
 80092ac:	d1c0      	bne.n	8009230 <_printf_float+0x300>
 80092ae:	e69e      	b.n	8008fee <_printf_float+0xbe>
 80092b0:	2301      	movs	r3, #1
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	9205      	str	r2, [sp, #20]
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	f43f ae97 	beq.w	8008fee <_printf_float+0xbe>
 80092c0:	9a05      	ldr	r2, [sp, #20]
 80092c2:	f10b 0b01 	add.w	fp, fp, #1
 80092c6:	e7b9      	b.n	800923c <_printf_float+0x30c>
 80092c8:	ee18 3a10 	vmov	r3, s16
 80092cc:	4652      	mov	r2, sl
 80092ce:	4631      	mov	r1, r6
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b8      	blx	r7
 80092d4:	3001      	adds	r0, #1
 80092d6:	d1be      	bne.n	8009256 <_printf_float+0x326>
 80092d8:	e689      	b.n	8008fee <_printf_float+0xbe>
 80092da:	9a05      	ldr	r2, [sp, #20]
 80092dc:	464b      	mov	r3, r9
 80092de:	4442      	add	r2, r8
 80092e0:	4631      	mov	r1, r6
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b8      	blx	r7
 80092e6:	3001      	adds	r0, #1
 80092e8:	d1c1      	bne.n	800926e <_printf_float+0x33e>
 80092ea:	e680      	b.n	8008fee <_printf_float+0xbe>
 80092ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092ee:	2a01      	cmp	r2, #1
 80092f0:	dc01      	bgt.n	80092f6 <_printf_float+0x3c6>
 80092f2:	07db      	lsls	r3, r3, #31
 80092f4:	d53a      	bpl.n	800936c <_printf_float+0x43c>
 80092f6:	2301      	movs	r3, #1
 80092f8:	4642      	mov	r2, r8
 80092fa:	4631      	mov	r1, r6
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b8      	blx	r7
 8009300:	3001      	adds	r0, #1
 8009302:	f43f ae74 	beq.w	8008fee <_printf_float+0xbe>
 8009306:	ee18 3a10 	vmov	r3, s16
 800930a:	4652      	mov	r2, sl
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f ae6b 	beq.w	8008fee <_printf_float+0xbe>
 8009318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800931c:	2200      	movs	r2, #0
 800931e:	2300      	movs	r3, #0
 8009320:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009324:	f7f7 fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009328:	b9d8      	cbnz	r0, 8009362 <_printf_float+0x432>
 800932a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800932e:	f108 0201 	add.w	r2, r8, #1
 8009332:	4631      	mov	r1, r6
 8009334:	4628      	mov	r0, r5
 8009336:	47b8      	blx	r7
 8009338:	3001      	adds	r0, #1
 800933a:	d10e      	bne.n	800935a <_printf_float+0x42a>
 800933c:	e657      	b.n	8008fee <_printf_float+0xbe>
 800933e:	2301      	movs	r3, #1
 8009340:	4652      	mov	r2, sl
 8009342:	4631      	mov	r1, r6
 8009344:	4628      	mov	r0, r5
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	f43f ae50 	beq.w	8008fee <_printf_float+0xbe>
 800934e:	f108 0801 	add.w	r8, r8, #1
 8009352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009354:	3b01      	subs	r3, #1
 8009356:	4543      	cmp	r3, r8
 8009358:	dcf1      	bgt.n	800933e <_printf_float+0x40e>
 800935a:	464b      	mov	r3, r9
 800935c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009360:	e6da      	b.n	8009118 <_printf_float+0x1e8>
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	f104 0a1a 	add.w	sl, r4, #26
 800936a:	e7f2      	b.n	8009352 <_printf_float+0x422>
 800936c:	2301      	movs	r3, #1
 800936e:	4642      	mov	r2, r8
 8009370:	e7df      	b.n	8009332 <_printf_float+0x402>
 8009372:	2301      	movs	r3, #1
 8009374:	464a      	mov	r2, r9
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	f43f ae36 	beq.w	8008fee <_printf_float+0xbe>
 8009382:	f108 0801 	add.w	r8, r8, #1
 8009386:	68e3      	ldr	r3, [r4, #12]
 8009388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800938a:	1a5b      	subs	r3, r3, r1
 800938c:	4543      	cmp	r3, r8
 800938e:	dcf0      	bgt.n	8009372 <_printf_float+0x442>
 8009390:	e6f8      	b.n	8009184 <_printf_float+0x254>
 8009392:	f04f 0800 	mov.w	r8, #0
 8009396:	f104 0919 	add.w	r9, r4, #25
 800939a:	e7f4      	b.n	8009386 <_printf_float+0x456>

0800939c <_printf_common>:
 800939c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	4616      	mov	r6, r2
 80093a2:	4699      	mov	r9, r3
 80093a4:	688a      	ldr	r2, [r1, #8]
 80093a6:	690b      	ldr	r3, [r1, #16]
 80093a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	bfb8      	it	lt
 80093b0:	4613      	movlt	r3, r2
 80093b2:	6033      	str	r3, [r6, #0]
 80093b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b8:	4607      	mov	r7, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	b10a      	cbz	r2, 80093c2 <_printf_common+0x26>
 80093be:	3301      	adds	r3, #1
 80093c0:	6033      	str	r3, [r6, #0]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	0699      	lsls	r1, r3, #26
 80093c6:	bf42      	ittt	mi
 80093c8:	6833      	ldrmi	r3, [r6, #0]
 80093ca:	3302      	addmi	r3, #2
 80093cc:	6033      	strmi	r3, [r6, #0]
 80093ce:	6825      	ldr	r5, [r4, #0]
 80093d0:	f015 0506 	ands.w	r5, r5, #6
 80093d4:	d106      	bne.n	80093e4 <_printf_common+0x48>
 80093d6:	f104 0a19 	add.w	sl, r4, #25
 80093da:	68e3      	ldr	r3, [r4, #12]
 80093dc:	6832      	ldr	r2, [r6, #0]
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	42ab      	cmp	r3, r5
 80093e2:	dc26      	bgt.n	8009432 <_printf_common+0x96>
 80093e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093e8:	1e13      	subs	r3, r2, #0
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	bf18      	it	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	0692      	lsls	r2, r2, #26
 80093f2:	d42b      	bmi.n	800944c <_printf_common+0xb0>
 80093f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093f8:	4649      	mov	r1, r9
 80093fa:	4638      	mov	r0, r7
 80093fc:	47c0      	blx	r8
 80093fe:	3001      	adds	r0, #1
 8009400:	d01e      	beq.n	8009440 <_printf_common+0xa4>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	f003 0306 	and.w	r3, r3, #6
 800940a:	2b04      	cmp	r3, #4
 800940c:	bf02      	ittt	eq
 800940e:	68e5      	ldreq	r5, [r4, #12]
 8009410:	6833      	ldreq	r3, [r6, #0]
 8009412:	1aed      	subeq	r5, r5, r3
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	bf0c      	ite	eq
 8009418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800941c:	2500      	movne	r5, #0
 800941e:	4293      	cmp	r3, r2
 8009420:	bfc4      	itt	gt
 8009422:	1a9b      	subgt	r3, r3, r2
 8009424:	18ed      	addgt	r5, r5, r3
 8009426:	2600      	movs	r6, #0
 8009428:	341a      	adds	r4, #26
 800942a:	42b5      	cmp	r5, r6
 800942c:	d11a      	bne.n	8009464 <_printf_common+0xc8>
 800942e:	2000      	movs	r0, #0
 8009430:	e008      	b.n	8009444 <_printf_common+0xa8>
 8009432:	2301      	movs	r3, #1
 8009434:	4652      	mov	r2, sl
 8009436:	4649      	mov	r1, r9
 8009438:	4638      	mov	r0, r7
 800943a:	47c0      	blx	r8
 800943c:	3001      	adds	r0, #1
 800943e:	d103      	bne.n	8009448 <_printf_common+0xac>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009448:	3501      	adds	r5, #1
 800944a:	e7c6      	b.n	80093da <_printf_common+0x3e>
 800944c:	18e1      	adds	r1, r4, r3
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	2030      	movs	r0, #48	; 0x30
 8009452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009456:	4422      	add	r2, r4
 8009458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800945c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009460:	3302      	adds	r3, #2
 8009462:	e7c7      	b.n	80093f4 <_printf_common+0x58>
 8009464:	2301      	movs	r3, #1
 8009466:	4622      	mov	r2, r4
 8009468:	4649      	mov	r1, r9
 800946a:	4638      	mov	r0, r7
 800946c:	47c0      	blx	r8
 800946e:	3001      	adds	r0, #1
 8009470:	d0e6      	beq.n	8009440 <_printf_common+0xa4>
 8009472:	3601      	adds	r6, #1
 8009474:	e7d9      	b.n	800942a <_printf_common+0x8e>
	...

08009478 <_printf_i>:
 8009478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800947c:	7e0f      	ldrb	r7, [r1, #24]
 800947e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009480:	2f78      	cmp	r7, #120	; 0x78
 8009482:	4691      	mov	r9, r2
 8009484:	4680      	mov	r8, r0
 8009486:	460c      	mov	r4, r1
 8009488:	469a      	mov	sl, r3
 800948a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800948e:	d807      	bhi.n	80094a0 <_printf_i+0x28>
 8009490:	2f62      	cmp	r7, #98	; 0x62
 8009492:	d80a      	bhi.n	80094aa <_printf_i+0x32>
 8009494:	2f00      	cmp	r7, #0
 8009496:	f000 80d4 	beq.w	8009642 <_printf_i+0x1ca>
 800949a:	2f58      	cmp	r7, #88	; 0x58
 800949c:	f000 80c0 	beq.w	8009620 <_printf_i+0x1a8>
 80094a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094a8:	e03a      	b.n	8009520 <_printf_i+0xa8>
 80094aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ae:	2b15      	cmp	r3, #21
 80094b0:	d8f6      	bhi.n	80094a0 <_printf_i+0x28>
 80094b2:	a101      	add	r1, pc, #4	; (adr r1, 80094b8 <_printf_i+0x40>)
 80094b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094b8:	08009511 	.word	0x08009511
 80094bc:	08009525 	.word	0x08009525
 80094c0:	080094a1 	.word	0x080094a1
 80094c4:	080094a1 	.word	0x080094a1
 80094c8:	080094a1 	.word	0x080094a1
 80094cc:	080094a1 	.word	0x080094a1
 80094d0:	08009525 	.word	0x08009525
 80094d4:	080094a1 	.word	0x080094a1
 80094d8:	080094a1 	.word	0x080094a1
 80094dc:	080094a1 	.word	0x080094a1
 80094e0:	080094a1 	.word	0x080094a1
 80094e4:	08009629 	.word	0x08009629
 80094e8:	08009551 	.word	0x08009551
 80094ec:	080095e3 	.word	0x080095e3
 80094f0:	080094a1 	.word	0x080094a1
 80094f4:	080094a1 	.word	0x080094a1
 80094f8:	0800964b 	.word	0x0800964b
 80094fc:	080094a1 	.word	0x080094a1
 8009500:	08009551 	.word	0x08009551
 8009504:	080094a1 	.word	0x080094a1
 8009508:	080094a1 	.word	0x080094a1
 800950c:	080095eb 	.word	0x080095eb
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	1d1a      	adds	r2, r3, #4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	602a      	str	r2, [r5, #0]
 8009518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800951c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009520:	2301      	movs	r3, #1
 8009522:	e09f      	b.n	8009664 <_printf_i+0x1ec>
 8009524:	6820      	ldr	r0, [r4, #0]
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	0607      	lsls	r7, r0, #24
 800952a:	f103 0104 	add.w	r1, r3, #4
 800952e:	6029      	str	r1, [r5, #0]
 8009530:	d501      	bpl.n	8009536 <_printf_i+0xbe>
 8009532:	681e      	ldr	r6, [r3, #0]
 8009534:	e003      	b.n	800953e <_printf_i+0xc6>
 8009536:	0646      	lsls	r6, r0, #25
 8009538:	d5fb      	bpl.n	8009532 <_printf_i+0xba>
 800953a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800953e:	2e00      	cmp	r6, #0
 8009540:	da03      	bge.n	800954a <_printf_i+0xd2>
 8009542:	232d      	movs	r3, #45	; 0x2d
 8009544:	4276      	negs	r6, r6
 8009546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800954a:	485a      	ldr	r0, [pc, #360]	; (80096b4 <_printf_i+0x23c>)
 800954c:	230a      	movs	r3, #10
 800954e:	e012      	b.n	8009576 <_printf_i+0xfe>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	6820      	ldr	r0, [r4, #0]
 8009554:	1d19      	adds	r1, r3, #4
 8009556:	6029      	str	r1, [r5, #0]
 8009558:	0605      	lsls	r5, r0, #24
 800955a:	d501      	bpl.n	8009560 <_printf_i+0xe8>
 800955c:	681e      	ldr	r6, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0xee>
 8009560:	0641      	lsls	r1, r0, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0xe4>
 8009564:	881e      	ldrh	r6, [r3, #0]
 8009566:	4853      	ldr	r0, [pc, #332]	; (80096b4 <_printf_i+0x23c>)
 8009568:	2f6f      	cmp	r7, #111	; 0x6f
 800956a:	bf0c      	ite	eq
 800956c:	2308      	moveq	r3, #8
 800956e:	230a      	movne	r3, #10
 8009570:	2100      	movs	r1, #0
 8009572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009576:	6865      	ldr	r5, [r4, #4]
 8009578:	60a5      	str	r5, [r4, #8]
 800957a:	2d00      	cmp	r5, #0
 800957c:	bfa2      	ittt	ge
 800957e:	6821      	ldrge	r1, [r4, #0]
 8009580:	f021 0104 	bicge.w	r1, r1, #4
 8009584:	6021      	strge	r1, [r4, #0]
 8009586:	b90e      	cbnz	r6, 800958c <_printf_i+0x114>
 8009588:	2d00      	cmp	r5, #0
 800958a:	d04b      	beq.n	8009624 <_printf_i+0x1ac>
 800958c:	4615      	mov	r5, r2
 800958e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009592:	fb03 6711 	mls	r7, r3, r1, r6
 8009596:	5dc7      	ldrb	r7, [r0, r7]
 8009598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800959c:	4637      	mov	r7, r6
 800959e:	42bb      	cmp	r3, r7
 80095a0:	460e      	mov	r6, r1
 80095a2:	d9f4      	bls.n	800958e <_printf_i+0x116>
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d10b      	bne.n	80095c0 <_printf_i+0x148>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	07de      	lsls	r6, r3, #31
 80095ac:	d508      	bpl.n	80095c0 <_printf_i+0x148>
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	6861      	ldr	r1, [r4, #4]
 80095b2:	4299      	cmp	r1, r3
 80095b4:	bfde      	ittt	le
 80095b6:	2330      	movle	r3, #48	; 0x30
 80095b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095c0:	1b52      	subs	r2, r2, r5
 80095c2:	6122      	str	r2, [r4, #16]
 80095c4:	f8cd a000 	str.w	sl, [sp]
 80095c8:	464b      	mov	r3, r9
 80095ca:	aa03      	add	r2, sp, #12
 80095cc:	4621      	mov	r1, r4
 80095ce:	4640      	mov	r0, r8
 80095d0:	f7ff fee4 	bl	800939c <_printf_common>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d14a      	bne.n	800966e <_printf_i+0x1f6>
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095dc:	b004      	add	sp, #16
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f043 0320 	orr.w	r3, r3, #32
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	4833      	ldr	r0, [pc, #204]	; (80096b8 <_printf_i+0x240>)
 80095ec:	2778      	movs	r7, #120	; 0x78
 80095ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	6829      	ldr	r1, [r5, #0]
 80095f6:	061f      	lsls	r7, r3, #24
 80095f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80095fc:	d402      	bmi.n	8009604 <_printf_i+0x18c>
 80095fe:	065f      	lsls	r7, r3, #25
 8009600:	bf48      	it	mi
 8009602:	b2b6      	uxthmi	r6, r6
 8009604:	07df      	lsls	r7, r3, #31
 8009606:	bf48      	it	mi
 8009608:	f043 0320 	orrmi.w	r3, r3, #32
 800960c:	6029      	str	r1, [r5, #0]
 800960e:	bf48      	it	mi
 8009610:	6023      	strmi	r3, [r4, #0]
 8009612:	b91e      	cbnz	r6, 800961c <_printf_i+0x1a4>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	f023 0320 	bic.w	r3, r3, #32
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	2310      	movs	r3, #16
 800961e:	e7a7      	b.n	8009570 <_printf_i+0xf8>
 8009620:	4824      	ldr	r0, [pc, #144]	; (80096b4 <_printf_i+0x23c>)
 8009622:	e7e4      	b.n	80095ee <_printf_i+0x176>
 8009624:	4615      	mov	r5, r2
 8009626:	e7bd      	b.n	80095a4 <_printf_i+0x12c>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	6826      	ldr	r6, [r4, #0]
 800962c:	6961      	ldr	r1, [r4, #20]
 800962e:	1d18      	adds	r0, r3, #4
 8009630:	6028      	str	r0, [r5, #0]
 8009632:	0635      	lsls	r5, r6, #24
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	d501      	bpl.n	800963c <_printf_i+0x1c4>
 8009638:	6019      	str	r1, [r3, #0]
 800963a:	e002      	b.n	8009642 <_printf_i+0x1ca>
 800963c:	0670      	lsls	r0, r6, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0x1c0>
 8009640:	8019      	strh	r1, [r3, #0]
 8009642:	2300      	movs	r3, #0
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	4615      	mov	r5, r2
 8009648:	e7bc      	b.n	80095c4 <_printf_i+0x14c>
 800964a:	682b      	ldr	r3, [r5, #0]
 800964c:	1d1a      	adds	r2, r3, #4
 800964e:	602a      	str	r2, [r5, #0]
 8009650:	681d      	ldr	r5, [r3, #0]
 8009652:	6862      	ldr	r2, [r4, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	4628      	mov	r0, r5
 8009658:	f7f6 fdca 	bl	80001f0 <memchr>
 800965c:	b108      	cbz	r0, 8009662 <_printf_i+0x1ea>
 800965e:	1b40      	subs	r0, r0, r5
 8009660:	6060      	str	r0, [r4, #4]
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	2300      	movs	r3, #0
 8009668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800966c:	e7aa      	b.n	80095c4 <_printf_i+0x14c>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	462a      	mov	r2, r5
 8009672:	4649      	mov	r1, r9
 8009674:	4640      	mov	r0, r8
 8009676:	47d0      	blx	sl
 8009678:	3001      	adds	r0, #1
 800967a:	d0ad      	beq.n	80095d8 <_printf_i+0x160>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	079b      	lsls	r3, r3, #30
 8009680:	d413      	bmi.n	80096aa <_printf_i+0x232>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	4298      	cmp	r0, r3
 8009688:	bfb8      	it	lt
 800968a:	4618      	movlt	r0, r3
 800968c:	e7a6      	b.n	80095dc <_printf_i+0x164>
 800968e:	2301      	movs	r3, #1
 8009690:	4632      	mov	r2, r6
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	47d0      	blx	sl
 8009698:	3001      	adds	r0, #1
 800969a:	d09d      	beq.n	80095d8 <_printf_i+0x160>
 800969c:	3501      	adds	r5, #1
 800969e:	68e3      	ldr	r3, [r4, #12]
 80096a0:	9903      	ldr	r1, [sp, #12]
 80096a2:	1a5b      	subs	r3, r3, r1
 80096a4:	42ab      	cmp	r3, r5
 80096a6:	dcf2      	bgt.n	800968e <_printf_i+0x216>
 80096a8:	e7eb      	b.n	8009682 <_printf_i+0x20a>
 80096aa:	2500      	movs	r5, #0
 80096ac:	f104 0619 	add.w	r6, r4, #25
 80096b0:	e7f5      	b.n	800969e <_printf_i+0x226>
 80096b2:	bf00      	nop
 80096b4:	0800c4ab 	.word	0x0800c4ab
 80096b8:	0800c4bc 	.word	0x0800c4bc

080096bc <__sflush_r>:
 80096bc:	898a      	ldrh	r2, [r1, #12]
 80096be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c2:	4605      	mov	r5, r0
 80096c4:	0710      	lsls	r0, r2, #28
 80096c6:	460c      	mov	r4, r1
 80096c8:	d458      	bmi.n	800977c <__sflush_r+0xc0>
 80096ca:	684b      	ldr	r3, [r1, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dc05      	bgt.n	80096dc <__sflush_r+0x20>
 80096d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	dc02      	bgt.n	80096dc <__sflush_r+0x20>
 80096d6:	2000      	movs	r0, #0
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096de:	2e00      	cmp	r6, #0
 80096e0:	d0f9      	beq.n	80096d6 <__sflush_r+0x1a>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096e8:	682f      	ldr	r7, [r5, #0]
 80096ea:	6a21      	ldr	r1, [r4, #32]
 80096ec:	602b      	str	r3, [r5, #0]
 80096ee:	d032      	beq.n	8009756 <__sflush_r+0x9a>
 80096f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	075a      	lsls	r2, r3, #29
 80096f6:	d505      	bpl.n	8009704 <__sflush_r+0x48>
 80096f8:	6863      	ldr	r3, [r4, #4]
 80096fa:	1ac0      	subs	r0, r0, r3
 80096fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096fe:	b10b      	cbz	r3, 8009704 <__sflush_r+0x48>
 8009700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009702:	1ac0      	subs	r0, r0, r3
 8009704:	2300      	movs	r3, #0
 8009706:	4602      	mov	r2, r0
 8009708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800970a:	6a21      	ldr	r1, [r4, #32]
 800970c:	4628      	mov	r0, r5
 800970e:	47b0      	blx	r6
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	d106      	bne.n	8009724 <__sflush_r+0x68>
 8009716:	6829      	ldr	r1, [r5, #0]
 8009718:	291d      	cmp	r1, #29
 800971a:	d82b      	bhi.n	8009774 <__sflush_r+0xb8>
 800971c:	4a29      	ldr	r2, [pc, #164]	; (80097c4 <__sflush_r+0x108>)
 800971e:	410a      	asrs	r2, r1
 8009720:	07d6      	lsls	r6, r2, #31
 8009722:	d427      	bmi.n	8009774 <__sflush_r+0xb8>
 8009724:	2200      	movs	r2, #0
 8009726:	6062      	str	r2, [r4, #4]
 8009728:	04d9      	lsls	r1, r3, #19
 800972a:	6922      	ldr	r2, [r4, #16]
 800972c:	6022      	str	r2, [r4, #0]
 800972e:	d504      	bpl.n	800973a <__sflush_r+0x7e>
 8009730:	1c42      	adds	r2, r0, #1
 8009732:	d101      	bne.n	8009738 <__sflush_r+0x7c>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b903      	cbnz	r3, 800973a <__sflush_r+0x7e>
 8009738:	6560      	str	r0, [r4, #84]	; 0x54
 800973a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800973c:	602f      	str	r7, [r5, #0]
 800973e:	2900      	cmp	r1, #0
 8009740:	d0c9      	beq.n	80096d6 <__sflush_r+0x1a>
 8009742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009746:	4299      	cmp	r1, r3
 8009748:	d002      	beq.n	8009750 <__sflush_r+0x94>
 800974a:	4628      	mov	r0, r5
 800974c:	f001 f99e 	bl	800aa8c <_free_r>
 8009750:	2000      	movs	r0, #0
 8009752:	6360      	str	r0, [r4, #52]	; 0x34
 8009754:	e7c0      	b.n	80096d8 <__sflush_r+0x1c>
 8009756:	2301      	movs	r3, #1
 8009758:	4628      	mov	r0, r5
 800975a:	47b0      	blx	r6
 800975c:	1c41      	adds	r1, r0, #1
 800975e:	d1c8      	bne.n	80096f2 <__sflush_r+0x36>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0c5      	beq.n	80096f2 <__sflush_r+0x36>
 8009766:	2b1d      	cmp	r3, #29
 8009768:	d001      	beq.n	800976e <__sflush_r+0xb2>
 800976a:	2b16      	cmp	r3, #22
 800976c:	d101      	bne.n	8009772 <__sflush_r+0xb6>
 800976e:	602f      	str	r7, [r5, #0]
 8009770:	e7b1      	b.n	80096d6 <__sflush_r+0x1a>
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	e7ad      	b.n	80096d8 <__sflush_r+0x1c>
 800977c:	690f      	ldr	r7, [r1, #16]
 800977e:	2f00      	cmp	r7, #0
 8009780:	d0a9      	beq.n	80096d6 <__sflush_r+0x1a>
 8009782:	0793      	lsls	r3, r2, #30
 8009784:	680e      	ldr	r6, [r1, #0]
 8009786:	bf08      	it	eq
 8009788:	694b      	ldreq	r3, [r1, #20]
 800978a:	600f      	str	r7, [r1, #0]
 800978c:	bf18      	it	ne
 800978e:	2300      	movne	r3, #0
 8009790:	eba6 0807 	sub.w	r8, r6, r7
 8009794:	608b      	str	r3, [r1, #8]
 8009796:	f1b8 0f00 	cmp.w	r8, #0
 800979a:	dd9c      	ble.n	80096d6 <__sflush_r+0x1a>
 800979c:	6a21      	ldr	r1, [r4, #32]
 800979e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097a0:	4643      	mov	r3, r8
 80097a2:	463a      	mov	r2, r7
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b0      	blx	r6
 80097a8:	2800      	cmp	r0, #0
 80097aa:	dc06      	bgt.n	80097ba <__sflush_r+0xfe>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b8:	e78e      	b.n	80096d8 <__sflush_r+0x1c>
 80097ba:	4407      	add	r7, r0
 80097bc:	eba8 0800 	sub.w	r8, r8, r0
 80097c0:	e7e9      	b.n	8009796 <__sflush_r+0xda>
 80097c2:	bf00      	nop
 80097c4:	dfbffffe 	.word	0xdfbffffe

080097c8 <_fflush_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	690b      	ldr	r3, [r1, #16]
 80097cc:	4605      	mov	r5, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	b913      	cbnz	r3, 80097d8 <_fflush_r+0x10>
 80097d2:	2500      	movs	r5, #0
 80097d4:	4628      	mov	r0, r5
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	b118      	cbz	r0, 80097e2 <_fflush_r+0x1a>
 80097da:	6a03      	ldr	r3, [r0, #32]
 80097dc:	b90b      	cbnz	r3, 80097e2 <_fflush_r+0x1a>
 80097de:	f000 f8bb 	bl	8009958 <__sinit>
 80097e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0f3      	beq.n	80097d2 <_fflush_r+0xa>
 80097ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097ec:	07d0      	lsls	r0, r2, #31
 80097ee:	d404      	bmi.n	80097fa <_fflush_r+0x32>
 80097f0:	0599      	lsls	r1, r3, #22
 80097f2:	d402      	bmi.n	80097fa <_fflush_r+0x32>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f000 fabe 	bl	8009d76 <__retarget_lock_acquire_recursive>
 80097fa:	4628      	mov	r0, r5
 80097fc:	4621      	mov	r1, r4
 80097fe:	f7ff ff5d 	bl	80096bc <__sflush_r>
 8009802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009804:	07da      	lsls	r2, r3, #31
 8009806:	4605      	mov	r5, r0
 8009808:	d4e4      	bmi.n	80097d4 <_fflush_r+0xc>
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	059b      	lsls	r3, r3, #22
 800980e:	d4e1      	bmi.n	80097d4 <_fflush_r+0xc>
 8009810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009812:	f000 fab1 	bl	8009d78 <__retarget_lock_release_recursive>
 8009816:	e7dd      	b.n	80097d4 <_fflush_r+0xc>

08009818 <fflush>:
 8009818:	4601      	mov	r1, r0
 800981a:	b920      	cbnz	r0, 8009826 <fflush+0xe>
 800981c:	4a04      	ldr	r2, [pc, #16]	; (8009830 <fflush+0x18>)
 800981e:	4905      	ldr	r1, [pc, #20]	; (8009834 <fflush+0x1c>)
 8009820:	4805      	ldr	r0, [pc, #20]	; (8009838 <fflush+0x20>)
 8009822:	f000 b8b1 	b.w	8009988 <_fwalk_sglue>
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <fflush+0x24>)
 8009828:	6818      	ldr	r0, [r3, #0]
 800982a:	f7ff bfcd 	b.w	80097c8 <_fflush_r>
 800982e:	bf00      	nop
 8009830:	200000c8 	.word	0x200000c8
 8009834:	080097c9 	.word	0x080097c9
 8009838:	200000d4 	.word	0x200000d4
 800983c:	20000120 	.word	0x20000120

08009840 <std>:
 8009840:	2300      	movs	r3, #0
 8009842:	b510      	push	{r4, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	e9c0 3300 	strd	r3, r3, [r0]
 800984a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800984e:	6083      	str	r3, [r0, #8]
 8009850:	8181      	strh	r1, [r0, #12]
 8009852:	6643      	str	r3, [r0, #100]	; 0x64
 8009854:	81c2      	strh	r2, [r0, #14]
 8009856:	6183      	str	r3, [r0, #24]
 8009858:	4619      	mov	r1, r3
 800985a:	2208      	movs	r2, #8
 800985c:	305c      	adds	r0, #92	; 0x5c
 800985e:	f000 f9a3 	bl	8009ba8 <memset>
 8009862:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <std+0x58>)
 8009864:	6263      	str	r3, [r4, #36]	; 0x24
 8009866:	4b0d      	ldr	r3, [pc, #52]	; (800989c <std+0x5c>)
 8009868:	62a3      	str	r3, [r4, #40]	; 0x28
 800986a:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <std+0x60>)
 800986c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800986e:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <std+0x64>)
 8009870:	6323      	str	r3, [r4, #48]	; 0x30
 8009872:	4b0d      	ldr	r3, [pc, #52]	; (80098a8 <std+0x68>)
 8009874:	6224      	str	r4, [r4, #32]
 8009876:	429c      	cmp	r4, r3
 8009878:	d006      	beq.n	8009888 <std+0x48>
 800987a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800987e:	4294      	cmp	r4, r2
 8009880:	d002      	beq.n	8009888 <std+0x48>
 8009882:	33d0      	adds	r3, #208	; 0xd0
 8009884:	429c      	cmp	r4, r3
 8009886:	d105      	bne.n	8009894 <std+0x54>
 8009888:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009890:	f000 ba70 	b.w	8009d74 <__retarget_lock_init_recursive>
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	080099f9 	.word	0x080099f9
 800989c:	08009a1b 	.word	0x08009a1b
 80098a0:	08009a53 	.word	0x08009a53
 80098a4:	08009a77 	.word	0x08009a77
 80098a8:	20005fa4 	.word	0x20005fa4

080098ac <stdio_exit_handler>:
 80098ac:	4a02      	ldr	r2, [pc, #8]	; (80098b8 <stdio_exit_handler+0xc>)
 80098ae:	4903      	ldr	r1, [pc, #12]	; (80098bc <stdio_exit_handler+0x10>)
 80098b0:	4803      	ldr	r0, [pc, #12]	; (80098c0 <stdio_exit_handler+0x14>)
 80098b2:	f000 b869 	b.w	8009988 <_fwalk_sglue>
 80098b6:	bf00      	nop
 80098b8:	200000c8 	.word	0x200000c8
 80098bc:	080097c9 	.word	0x080097c9
 80098c0:	200000d4 	.word	0x200000d4

080098c4 <cleanup_stdio>:
 80098c4:	6841      	ldr	r1, [r0, #4]
 80098c6:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <cleanup_stdio+0x34>)
 80098c8:	4299      	cmp	r1, r3
 80098ca:	b510      	push	{r4, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	d001      	beq.n	80098d4 <cleanup_stdio+0x10>
 80098d0:	f7ff ff7a 	bl	80097c8 <_fflush_r>
 80098d4:	68a1      	ldr	r1, [r4, #8]
 80098d6:	4b09      	ldr	r3, [pc, #36]	; (80098fc <cleanup_stdio+0x38>)
 80098d8:	4299      	cmp	r1, r3
 80098da:	d002      	beq.n	80098e2 <cleanup_stdio+0x1e>
 80098dc:	4620      	mov	r0, r4
 80098de:	f7ff ff73 	bl	80097c8 <_fflush_r>
 80098e2:	68e1      	ldr	r1, [r4, #12]
 80098e4:	4b06      	ldr	r3, [pc, #24]	; (8009900 <cleanup_stdio+0x3c>)
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d004      	beq.n	80098f4 <cleanup_stdio+0x30>
 80098ea:	4620      	mov	r0, r4
 80098ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f0:	f7ff bf6a 	b.w	80097c8 <_fflush_r>
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	20005fa4 	.word	0x20005fa4
 80098fc:	2000600c 	.word	0x2000600c
 8009900:	20006074 	.word	0x20006074

08009904 <global_stdio_init.part.0>:
 8009904:	b510      	push	{r4, lr}
 8009906:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <global_stdio_init.part.0+0x30>)
 8009908:	4c0b      	ldr	r4, [pc, #44]	; (8009938 <global_stdio_init.part.0+0x34>)
 800990a:	4a0c      	ldr	r2, [pc, #48]	; (800993c <global_stdio_init.part.0+0x38>)
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	4620      	mov	r0, r4
 8009910:	2200      	movs	r2, #0
 8009912:	2104      	movs	r1, #4
 8009914:	f7ff ff94 	bl	8009840 <std>
 8009918:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800991c:	2201      	movs	r2, #1
 800991e:	2109      	movs	r1, #9
 8009920:	f7ff ff8e 	bl	8009840 <std>
 8009924:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009928:	2202      	movs	r2, #2
 800992a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800992e:	2112      	movs	r1, #18
 8009930:	f7ff bf86 	b.w	8009840 <std>
 8009934:	200060dc 	.word	0x200060dc
 8009938:	20005fa4 	.word	0x20005fa4
 800993c:	080098ad 	.word	0x080098ad

08009940 <__sfp_lock_acquire>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__sfp_lock_acquire+0x8>)
 8009942:	f000 ba18 	b.w	8009d76 <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	200060e5 	.word	0x200060e5

0800994c <__sfp_lock_release>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__sfp_lock_release+0x8>)
 800994e:	f000 ba13 	b.w	8009d78 <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	200060e5 	.word	0x200060e5

08009958 <__sinit>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4604      	mov	r4, r0
 800995c:	f7ff fff0 	bl	8009940 <__sfp_lock_acquire>
 8009960:	6a23      	ldr	r3, [r4, #32]
 8009962:	b11b      	cbz	r3, 800996c <__sinit+0x14>
 8009964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009968:	f7ff bff0 	b.w	800994c <__sfp_lock_release>
 800996c:	4b04      	ldr	r3, [pc, #16]	; (8009980 <__sinit+0x28>)
 800996e:	6223      	str	r3, [r4, #32]
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <__sinit+0x2c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1f5      	bne.n	8009964 <__sinit+0xc>
 8009978:	f7ff ffc4 	bl	8009904 <global_stdio_init.part.0>
 800997c:	e7f2      	b.n	8009964 <__sinit+0xc>
 800997e:	bf00      	nop
 8009980:	080098c5 	.word	0x080098c5
 8009984:	200060dc 	.word	0x200060dc

08009988 <_fwalk_sglue>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4607      	mov	r7, r0
 800998e:	4688      	mov	r8, r1
 8009990:	4614      	mov	r4, r2
 8009992:	2600      	movs	r6, #0
 8009994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009998:	f1b9 0901 	subs.w	r9, r9, #1
 800999c:	d505      	bpl.n	80099aa <_fwalk_sglue+0x22>
 800999e:	6824      	ldr	r4, [r4, #0]
 80099a0:	2c00      	cmp	r4, #0
 80099a2:	d1f7      	bne.n	8009994 <_fwalk_sglue+0xc>
 80099a4:	4630      	mov	r0, r6
 80099a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099aa:	89ab      	ldrh	r3, [r5, #12]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d907      	bls.n	80099c0 <_fwalk_sglue+0x38>
 80099b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099b4:	3301      	adds	r3, #1
 80099b6:	d003      	beq.n	80099c0 <_fwalk_sglue+0x38>
 80099b8:	4629      	mov	r1, r5
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c0      	blx	r8
 80099be:	4306      	orrs	r6, r0
 80099c0:	3568      	adds	r5, #104	; 0x68
 80099c2:	e7e9      	b.n	8009998 <_fwalk_sglue+0x10>

080099c4 <iprintf>:
 80099c4:	b40f      	push	{r0, r1, r2, r3}
 80099c6:	b507      	push	{r0, r1, r2, lr}
 80099c8:	4906      	ldr	r1, [pc, #24]	; (80099e4 <iprintf+0x20>)
 80099ca:	ab04      	add	r3, sp, #16
 80099cc:	6808      	ldr	r0, [r1, #0]
 80099ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d2:	6881      	ldr	r1, [r0, #8]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	f001 fcff 	bl	800b3d8 <_vfiprintf_r>
 80099da:	b003      	add	sp, #12
 80099dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e0:	b004      	add	sp, #16
 80099e2:	4770      	bx	lr
 80099e4:	20000120 	.word	0x20000120

080099e8 <putchar>:
 80099e8:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <putchar+0xc>)
 80099ea:	4601      	mov	r1, r0
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	6882      	ldr	r2, [r0, #8]
 80099f0:	f001 be6e 	b.w	800b6d0 <_putc_r>
 80099f4:	20000120 	.word	0x20000120

080099f8 <__sread>:
 80099f8:	b510      	push	{r4, lr}
 80099fa:	460c      	mov	r4, r1
 80099fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a00:	f000 f96a 	bl	8009cd8 <_read_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	bfab      	itete	ge
 8009a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a0c:	181b      	addge	r3, r3, r0
 8009a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a12:	bfac      	ite	ge
 8009a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a16:	81a3      	strhlt	r3, [r4, #12]
 8009a18:	bd10      	pop	{r4, pc}

08009a1a <__swrite>:
 8009a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1e:	461f      	mov	r7, r3
 8009a20:	898b      	ldrh	r3, [r1, #12]
 8009a22:	05db      	lsls	r3, r3, #23
 8009a24:	4605      	mov	r5, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	4616      	mov	r6, r2
 8009a2a:	d505      	bpl.n	8009a38 <__swrite+0x1e>
 8009a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a30:	2302      	movs	r3, #2
 8009a32:	2200      	movs	r2, #0
 8009a34:	f000 f93e 	bl	8009cb4 <_lseek_r>
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	4632      	mov	r2, r6
 8009a46:	463b      	mov	r3, r7
 8009a48:	4628      	mov	r0, r5
 8009a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4e:	f000 b955 	b.w	8009cfc <_write_r>

08009a52 <__sseek>:
 8009a52:	b510      	push	{r4, lr}
 8009a54:	460c      	mov	r4, r1
 8009a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5a:	f000 f92b 	bl	8009cb4 <_lseek_r>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	bf15      	itete	ne
 8009a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a6e:	81a3      	strheq	r3, [r4, #12]
 8009a70:	bf18      	it	ne
 8009a72:	81a3      	strhne	r3, [r4, #12]
 8009a74:	bd10      	pop	{r4, pc}

08009a76 <__sclose>:
 8009a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7a:	f000 b8b5 	b.w	8009be8 <_close_r>

08009a7e <__swbuf_r>:
 8009a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a80:	460e      	mov	r6, r1
 8009a82:	4614      	mov	r4, r2
 8009a84:	4605      	mov	r5, r0
 8009a86:	b118      	cbz	r0, 8009a90 <__swbuf_r+0x12>
 8009a88:	6a03      	ldr	r3, [r0, #32]
 8009a8a:	b90b      	cbnz	r3, 8009a90 <__swbuf_r+0x12>
 8009a8c:	f7ff ff64 	bl	8009958 <__sinit>
 8009a90:	69a3      	ldr	r3, [r4, #24]
 8009a92:	60a3      	str	r3, [r4, #8]
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	071a      	lsls	r2, r3, #28
 8009a98:	d525      	bpl.n	8009ae6 <__swbuf_r+0x68>
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	b31b      	cbz	r3, 8009ae6 <__swbuf_r+0x68>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	6922      	ldr	r2, [r4, #16]
 8009aa2:	1a98      	subs	r0, r3, r2
 8009aa4:	6963      	ldr	r3, [r4, #20]
 8009aa6:	b2f6      	uxtb	r6, r6
 8009aa8:	4283      	cmp	r3, r0
 8009aaa:	4637      	mov	r7, r6
 8009aac:	dc04      	bgt.n	8009ab8 <__swbuf_r+0x3a>
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	f7ff fe89 	bl	80097c8 <_fflush_r>
 8009ab6:	b9e0      	cbnz	r0, 8009af2 <__swbuf_r+0x74>
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	60a3      	str	r3, [r4, #8]
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	6022      	str	r2, [r4, #0]
 8009ac4:	701e      	strb	r6, [r3, #0]
 8009ac6:	6962      	ldr	r2, [r4, #20]
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d004      	beq.n	8009ad8 <__swbuf_r+0x5a>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	07db      	lsls	r3, r3, #31
 8009ad2:	d506      	bpl.n	8009ae2 <__swbuf_r+0x64>
 8009ad4:	2e0a      	cmp	r6, #10
 8009ad6:	d104      	bne.n	8009ae2 <__swbuf_r+0x64>
 8009ad8:	4621      	mov	r1, r4
 8009ada:	4628      	mov	r0, r5
 8009adc:	f7ff fe74 	bl	80097c8 <_fflush_r>
 8009ae0:	b938      	cbnz	r0, 8009af2 <__swbuf_r+0x74>
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f000 f805 	bl	8009af8 <__swsetup_r>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d0d5      	beq.n	8009a9e <__swbuf_r+0x20>
 8009af2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009af6:	e7f4      	b.n	8009ae2 <__swbuf_r+0x64>

08009af8 <__swsetup_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4b2a      	ldr	r3, [pc, #168]	; (8009ba4 <__swsetup_r+0xac>)
 8009afc:	4605      	mov	r5, r0
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	460c      	mov	r4, r1
 8009b02:	b118      	cbz	r0, 8009b0c <__swsetup_r+0x14>
 8009b04:	6a03      	ldr	r3, [r0, #32]
 8009b06:	b90b      	cbnz	r3, 8009b0c <__swsetup_r+0x14>
 8009b08:	f7ff ff26 	bl	8009958 <__sinit>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b12:	0718      	lsls	r0, r3, #28
 8009b14:	d422      	bmi.n	8009b5c <__swsetup_r+0x64>
 8009b16:	06d9      	lsls	r1, r3, #27
 8009b18:	d407      	bmi.n	8009b2a <__swsetup_r+0x32>
 8009b1a:	2309      	movs	r3, #9
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b28:	e034      	b.n	8009b94 <__swsetup_r+0x9c>
 8009b2a:	0758      	lsls	r0, r3, #29
 8009b2c:	d512      	bpl.n	8009b54 <__swsetup_r+0x5c>
 8009b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b30:	b141      	cbz	r1, 8009b44 <__swsetup_r+0x4c>
 8009b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b36:	4299      	cmp	r1, r3
 8009b38:	d002      	beq.n	8009b40 <__swsetup_r+0x48>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 ffa6 	bl	800aa8c <_free_r>
 8009b40:	2300      	movs	r3, #0
 8009b42:	6363      	str	r3, [r4, #52]	; 0x34
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f043 0308 	orr.w	r3, r3, #8
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	b94b      	cbnz	r3, 8009b74 <__swsetup_r+0x7c>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b6a:	d003      	beq.n	8009b74 <__swsetup_r+0x7c>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f001 fd72 	bl	800b658 <__smakebuf_r>
 8009b74:	89a0      	ldrh	r0, [r4, #12]
 8009b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b7a:	f010 0301 	ands.w	r3, r0, #1
 8009b7e:	d00a      	beq.n	8009b96 <__swsetup_r+0x9e>
 8009b80:	2300      	movs	r3, #0
 8009b82:	60a3      	str	r3, [r4, #8]
 8009b84:	6963      	ldr	r3, [r4, #20]
 8009b86:	425b      	negs	r3, r3
 8009b88:	61a3      	str	r3, [r4, #24]
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	b943      	cbnz	r3, 8009ba0 <__swsetup_r+0xa8>
 8009b8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b92:	d1c4      	bne.n	8009b1e <__swsetup_r+0x26>
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	0781      	lsls	r1, r0, #30
 8009b98:	bf58      	it	pl
 8009b9a:	6963      	ldrpl	r3, [r4, #20]
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	e7f4      	b.n	8009b8a <__swsetup_r+0x92>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7f7      	b.n	8009b94 <__swsetup_r+0x9c>
 8009ba4:	20000120 	.word	0x20000120

08009ba8 <memset>:
 8009ba8:	4402      	add	r2, r0
 8009baa:	4603      	mov	r3, r0
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d100      	bne.n	8009bb2 <memset+0xa>
 8009bb0:	4770      	bx	lr
 8009bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb6:	e7f9      	b.n	8009bac <memset+0x4>

08009bb8 <strncpy>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	3901      	subs	r1, #1
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	b132      	cbz	r2, 8009bce <strncpy+0x16>
 8009bc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009bc4:	f803 4b01 	strb.w	r4, [r3], #1
 8009bc8:	3a01      	subs	r2, #1
 8009bca:	2c00      	cmp	r4, #0
 8009bcc:	d1f7      	bne.n	8009bbe <strncpy+0x6>
 8009bce:	441a      	add	r2, r3
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d100      	bne.n	8009bd8 <strncpy+0x20>
 8009bd6:	bd10      	pop	{r4, pc}
 8009bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bdc:	e7f9      	b.n	8009bd2 <strncpy+0x1a>
	...

08009be0 <_localeconv_r>:
 8009be0:	4800      	ldr	r0, [pc, #0]	; (8009be4 <_localeconv_r+0x4>)
 8009be2:	4770      	bx	lr
 8009be4:	20000214 	.word	0x20000214

08009be8 <_close_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	; (8009c04 <_close_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f9 fa73 	bl	80030de <_close>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_close_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_close_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	200060e0 	.word	0x200060e0

08009c08 <_reclaim_reent>:
 8009c08:	4b29      	ldr	r3, [pc, #164]	; (8009cb0 <_reclaim_reent+0xa8>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4283      	cmp	r3, r0
 8009c0e:	b570      	push	{r4, r5, r6, lr}
 8009c10:	4604      	mov	r4, r0
 8009c12:	d04b      	beq.n	8009cac <_reclaim_reent+0xa4>
 8009c14:	69c3      	ldr	r3, [r0, #28]
 8009c16:	b143      	cbz	r3, 8009c2a <_reclaim_reent+0x22>
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d144      	bne.n	8009ca8 <_reclaim_reent+0xa0>
 8009c1e:	69e3      	ldr	r3, [r4, #28]
 8009c20:	6819      	ldr	r1, [r3, #0]
 8009c22:	b111      	cbz	r1, 8009c2a <_reclaim_reent+0x22>
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 ff31 	bl	800aa8c <_free_r>
 8009c2a:	6961      	ldr	r1, [r4, #20]
 8009c2c:	b111      	cbz	r1, 8009c34 <_reclaim_reent+0x2c>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 ff2c 	bl	800aa8c <_free_r>
 8009c34:	69e1      	ldr	r1, [r4, #28]
 8009c36:	b111      	cbz	r1, 8009c3e <_reclaim_reent+0x36>
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 ff27 	bl	800aa8c <_free_r>
 8009c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c40:	b111      	cbz	r1, 8009c48 <_reclaim_reent+0x40>
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 ff22 	bl	800aa8c <_free_r>
 8009c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c4a:	b111      	cbz	r1, 8009c52 <_reclaim_reent+0x4a>
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 ff1d 	bl	800aa8c <_free_r>
 8009c52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c54:	b111      	cbz	r1, 8009c5c <_reclaim_reent+0x54>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 ff18 	bl	800aa8c <_free_r>
 8009c5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c5e:	b111      	cbz	r1, 8009c66 <_reclaim_reent+0x5e>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 ff13 	bl	800aa8c <_free_r>
 8009c66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c68:	b111      	cbz	r1, 8009c70 <_reclaim_reent+0x68>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 ff0e 	bl	800aa8c <_free_r>
 8009c70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c72:	b111      	cbz	r1, 8009c7a <_reclaim_reent+0x72>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 ff09 	bl	800aa8c <_free_r>
 8009c7a:	6a23      	ldr	r3, [r4, #32]
 8009c7c:	b1b3      	cbz	r3, 8009cac <_reclaim_reent+0xa4>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c84:	4718      	bx	r3
 8009c86:	5949      	ldr	r1, [r1, r5]
 8009c88:	b941      	cbnz	r1, 8009c9c <_reclaim_reent+0x94>
 8009c8a:	3504      	adds	r5, #4
 8009c8c:	69e3      	ldr	r3, [r4, #28]
 8009c8e:	2d80      	cmp	r5, #128	; 0x80
 8009c90:	68d9      	ldr	r1, [r3, #12]
 8009c92:	d1f8      	bne.n	8009c86 <_reclaim_reent+0x7e>
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 fef9 	bl	800aa8c <_free_r>
 8009c9a:	e7c0      	b.n	8009c1e <_reclaim_reent+0x16>
 8009c9c:	680e      	ldr	r6, [r1, #0]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 fef4 	bl	800aa8c <_free_r>
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	e7ef      	b.n	8009c88 <_reclaim_reent+0x80>
 8009ca8:	2500      	movs	r5, #0
 8009caa:	e7ef      	b.n	8009c8c <_reclaim_reent+0x84>
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000120 	.word	0x20000120

08009cb4 <_lseek_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	; (8009cd4 <_lseek_r+0x20>)
 8009cb8:	4604      	mov	r4, r0
 8009cba:	4608      	mov	r0, r1
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	602a      	str	r2, [r5, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f7f9 fa32 	bl	800312c <_lseek>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_lseek_r+0x1e>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_lseek_r+0x1e>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	200060e0 	.word	0x200060e0

08009cd8 <_read_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d07      	ldr	r5, [pc, #28]	; (8009cf8 <_read_r+0x20>)
 8009cdc:	4604      	mov	r4, r0
 8009cde:	4608      	mov	r0, r1
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	602a      	str	r2, [r5, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	f7f9 f9c0 	bl	800306c <_read>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d102      	bne.n	8009cf6 <_read_r+0x1e>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	b103      	cbz	r3, 8009cf6 <_read_r+0x1e>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	200060e0 	.word	0x200060e0

08009cfc <_write_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d07      	ldr	r5, [pc, #28]	; (8009d1c <_write_r+0x20>)
 8009d00:	4604      	mov	r4, r0
 8009d02:	4608      	mov	r0, r1
 8009d04:	4611      	mov	r1, r2
 8009d06:	2200      	movs	r2, #0
 8009d08:	602a      	str	r2, [r5, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f7f9 f9cb 	bl	80030a6 <_write>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_write_r+0x1e>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_write_r+0x1e>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	200060e0 	.word	0x200060e0

08009d20 <__errno>:
 8009d20:	4b01      	ldr	r3, [pc, #4]	; (8009d28 <__errno+0x8>)
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	20000120 	.word	0x20000120

08009d2c <__libc_init_array>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	4d0d      	ldr	r5, [pc, #52]	; (8009d64 <__libc_init_array+0x38>)
 8009d30:	4c0d      	ldr	r4, [pc, #52]	; (8009d68 <__libc_init_array+0x3c>)
 8009d32:	1b64      	subs	r4, r4, r5
 8009d34:	10a4      	asrs	r4, r4, #2
 8009d36:	2600      	movs	r6, #0
 8009d38:	42a6      	cmp	r6, r4
 8009d3a:	d109      	bne.n	8009d50 <__libc_init_array+0x24>
 8009d3c:	4d0b      	ldr	r5, [pc, #44]	; (8009d6c <__libc_init_array+0x40>)
 8009d3e:	4c0c      	ldr	r4, [pc, #48]	; (8009d70 <__libc_init_array+0x44>)
 8009d40:	f001 fdde 	bl	800b900 <_init>
 8009d44:	1b64      	subs	r4, r4, r5
 8009d46:	10a4      	asrs	r4, r4, #2
 8009d48:	2600      	movs	r6, #0
 8009d4a:	42a6      	cmp	r6, r4
 8009d4c:	d105      	bne.n	8009d5a <__libc_init_array+0x2e>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d54:	4798      	blx	r3
 8009d56:	3601      	adds	r6, #1
 8009d58:	e7ee      	b.n	8009d38 <__libc_init_array+0xc>
 8009d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d5e:	4798      	blx	r3
 8009d60:	3601      	adds	r6, #1
 8009d62:	e7f2      	b.n	8009d4a <__libc_init_array+0x1e>
 8009d64:	0800c714 	.word	0x0800c714
 8009d68:	0800c714 	.word	0x0800c714
 8009d6c:	0800c714 	.word	0x0800c714
 8009d70:	0800c718 	.word	0x0800c718

08009d74 <__retarget_lock_init_recursive>:
 8009d74:	4770      	bx	lr

08009d76 <__retarget_lock_acquire_recursive>:
 8009d76:	4770      	bx	lr

08009d78 <__retarget_lock_release_recursive>:
 8009d78:	4770      	bx	lr

08009d7a <memcpy>:
 8009d7a:	440a      	add	r2, r1
 8009d7c:	4291      	cmp	r1, r2
 8009d7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d82:	d100      	bne.n	8009d86 <memcpy+0xc>
 8009d84:	4770      	bx	lr
 8009d86:	b510      	push	{r4, lr}
 8009d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d90:	4291      	cmp	r1, r2
 8009d92:	d1f9      	bne.n	8009d88 <memcpy+0xe>
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <quorem>:
 8009d96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	6903      	ldr	r3, [r0, #16]
 8009d9c:	690c      	ldr	r4, [r1, #16]
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	4607      	mov	r7, r0
 8009da2:	db7e      	blt.n	8009ea2 <quorem+0x10c>
 8009da4:	3c01      	subs	r4, #1
 8009da6:	f101 0814 	add.w	r8, r1, #20
 8009daa:	f100 0514 	add.w	r5, r0, #20
 8009dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dcc:	d331      	bcc.n	8009e32 <quorem+0x9c>
 8009dce:	f04f 0e00 	mov.w	lr, #0
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	46ac      	mov	ip, r5
 8009dd6:	46f2      	mov	sl, lr
 8009dd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ddc:	b293      	uxth	r3, r2
 8009dde:	fb06 e303 	mla	r3, r6, r3, lr
 8009de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009de6:	0c1a      	lsrs	r2, r3, #16
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	ebaa 0303 	sub.w	r3, sl, r3
 8009dee:	f8dc a000 	ldr.w	sl, [ip]
 8009df2:	fa13 f38a 	uxtah	r3, r3, sl
 8009df6:	fb06 220e 	mla	r2, r6, lr, r2
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	9b00      	ldr	r3, [sp, #0]
 8009dfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e02:	b292      	uxth	r2, r2
 8009e04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e10:	4581      	cmp	r9, r0
 8009e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e16:	f84c 3b04 	str.w	r3, [ip], #4
 8009e1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e1e:	d2db      	bcs.n	8009dd8 <quorem+0x42>
 8009e20:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e24:	b92b      	cbnz	r3, 8009e32 <quorem+0x9c>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	3b04      	subs	r3, #4
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	d32c      	bcc.n	8009e8a <quorem+0xf4>
 8009e30:	613c      	str	r4, [r7, #16]
 8009e32:	4638      	mov	r0, r7
 8009e34:	f001 f9a6 	bl	800b184 <__mcmp>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	db22      	blt.n	8009e82 <quorem+0xec>
 8009e3c:	3601      	adds	r6, #1
 8009e3e:	4629      	mov	r1, r5
 8009e40:	2000      	movs	r0, #0
 8009e42:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e46:	f8d1 c000 	ldr.w	ip, [r1]
 8009e4a:	b293      	uxth	r3, r2
 8009e4c:	1ac3      	subs	r3, r0, r3
 8009e4e:	0c12      	lsrs	r2, r2, #16
 8009e50:	fa13 f38c 	uxtah	r3, r3, ip
 8009e54:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e62:	45c1      	cmp	r9, r8
 8009e64:	f841 3b04 	str.w	r3, [r1], #4
 8009e68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e6c:	d2e9      	bcs.n	8009e42 <quorem+0xac>
 8009e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e76:	b922      	cbnz	r2, 8009e82 <quorem+0xec>
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	429d      	cmp	r5, r3
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	d30a      	bcc.n	8009e96 <quorem+0x100>
 8009e80:	613c      	str	r4, [r7, #16]
 8009e82:	4630      	mov	r0, r6
 8009e84:	b003      	add	sp, #12
 8009e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8a:	6812      	ldr	r2, [r2, #0]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	d1ce      	bne.n	8009e30 <quorem+0x9a>
 8009e92:	3c01      	subs	r4, #1
 8009e94:	e7c9      	b.n	8009e2a <quorem+0x94>
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	3b04      	subs	r3, #4
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	d1f0      	bne.n	8009e80 <quorem+0xea>
 8009e9e:	3c01      	subs	r4, #1
 8009ea0:	e7eb      	b.n	8009e7a <quorem+0xe4>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	e7ee      	b.n	8009e84 <quorem+0xee>
	...

08009ea8 <_dtoa_r>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	ed2d 8b04 	vpush	{d8-d9}
 8009eb0:	69c5      	ldr	r5, [r0, #28]
 8009eb2:	b093      	sub	sp, #76	; 0x4c
 8009eb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009eb8:	ec57 6b10 	vmov	r6, r7, d0
 8009ebc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ec0:	9107      	str	r1, [sp, #28]
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ec8:	b975      	cbnz	r5, 8009ee8 <_dtoa_r+0x40>
 8009eca:	2010      	movs	r0, #16
 8009ecc:	f000 fe2a 	bl	800ab24 <malloc>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	61e0      	str	r0, [r4, #28]
 8009ed4:	b920      	cbnz	r0, 8009ee0 <_dtoa_r+0x38>
 8009ed6:	4bae      	ldr	r3, [pc, #696]	; (800a190 <_dtoa_r+0x2e8>)
 8009ed8:	21ef      	movs	r1, #239	; 0xef
 8009eda:	48ae      	ldr	r0, [pc, #696]	; (800a194 <_dtoa_r+0x2ec>)
 8009edc:	f001 fc5e 	bl	800b79c <__assert_func>
 8009ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ee4:	6005      	str	r5, [r0, #0]
 8009ee6:	60c5      	str	r5, [r0, #12]
 8009ee8:	69e3      	ldr	r3, [r4, #28]
 8009eea:	6819      	ldr	r1, [r3, #0]
 8009eec:	b151      	cbz	r1, 8009f04 <_dtoa_r+0x5c>
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	604a      	str	r2, [r1, #4]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4093      	lsls	r3, r2
 8009ef6:	608b      	str	r3, [r1, #8]
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 ff07 	bl	800ad0c <_Bfree>
 8009efe:	69e3      	ldr	r3, [r4, #28]
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	1e3b      	subs	r3, r7, #0
 8009f06:	bfbb      	ittet	lt
 8009f08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f0c:	9303      	strlt	r3, [sp, #12]
 8009f0e:	2300      	movge	r3, #0
 8009f10:	2201      	movlt	r2, #1
 8009f12:	bfac      	ite	ge
 8009f14:	f8c8 3000 	strge.w	r3, [r8]
 8009f18:	f8c8 2000 	strlt.w	r2, [r8]
 8009f1c:	4b9e      	ldr	r3, [pc, #632]	; (800a198 <_dtoa_r+0x2f0>)
 8009f1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f22:	ea33 0308 	bics.w	r3, r3, r8
 8009f26:	d11b      	bne.n	8009f60 <_dtoa_r+0xb8>
 8009f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f34:	4333      	orrs	r3, r6
 8009f36:	f000 8593 	beq.w	800aa60 <_dtoa_r+0xbb8>
 8009f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f3c:	b963      	cbnz	r3, 8009f58 <_dtoa_r+0xb0>
 8009f3e:	4b97      	ldr	r3, [pc, #604]	; (800a19c <_dtoa_r+0x2f4>)
 8009f40:	e027      	b.n	8009f92 <_dtoa_r+0xea>
 8009f42:	4b97      	ldr	r3, [pc, #604]	; (800a1a0 <_dtoa_r+0x2f8>)
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	9800      	ldr	r0, [sp, #0]
 8009f4e:	b013      	add	sp, #76	; 0x4c
 8009f50:	ecbd 8b04 	vpop	{d8-d9}
 8009f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f58:	4b90      	ldr	r3, [pc, #576]	; (800a19c <_dtoa_r+0x2f4>)
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	3303      	adds	r3, #3
 8009f5e:	e7f3      	b.n	8009f48 <_dtoa_r+0xa0>
 8009f60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	ec51 0b17 	vmov	r0, r1, d7
 8009f6a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f6e:	eef0 8a67 	vmov.f32	s17, s15
 8009f72:	2300      	movs	r3, #0
 8009f74:	f7f6 fdb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f78:	4681      	mov	r9, r0
 8009f7a:	b160      	cbz	r0, 8009f96 <_dtoa_r+0xee>
 8009f7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f7e:	2301      	movs	r3, #1
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8568 	beq.w	800aa5a <_dtoa_r+0xbb2>
 8009f8a:	4b86      	ldr	r3, [pc, #536]	; (800a1a4 <_dtoa_r+0x2fc>)
 8009f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	e7da      	b.n	8009f4c <_dtoa_r+0xa4>
 8009f96:	aa10      	add	r2, sp, #64	; 0x40
 8009f98:	a911      	add	r1, sp, #68	; 0x44
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa0:	eef0 0a68 	vmov.f32	s1, s17
 8009fa4:	f001 f994 	bl	800b2d0 <__d2b>
 8009fa8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fac:	4682      	mov	sl, r0
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	d07f      	beq.n	800a0b2 <_dtoa_r+0x20a>
 8009fb2:	ee18 3a90 	vmov	r3, s17
 8009fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fbe:	ec51 0b18 	vmov	r0, r1, d8
 8009fc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fce:	4619      	mov	r1, r3
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4b75      	ldr	r3, [pc, #468]	; (800a1a8 <_dtoa_r+0x300>)
 8009fd4:	f7f6 f968 	bl	80002a8 <__aeabi_dsub>
 8009fd8:	a367      	add	r3, pc, #412	; (adr r3, 800a178 <_dtoa_r+0x2d0>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fb1b 	bl	8000618 <__aeabi_dmul>
 8009fe2:	a367      	add	r3, pc, #412	; (adr r3, 800a180 <_dtoa_r+0x2d8>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	f7f6 f960 	bl	80002ac <__adddf3>
 8009fec:	4606      	mov	r6, r0
 8009fee:	4628      	mov	r0, r5
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	f7f6 faa7 	bl	8000544 <__aeabi_i2d>
 8009ff6:	a364      	add	r3, pc, #400	; (adr r3, 800a188 <_dtoa_r+0x2e0>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 fb0c 	bl	8000618 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	f7f6 f950 	bl	80002ac <__adddf3>
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	f7f6 fdb2 	bl	8000b78 <__aeabi_d2iz>
 800a014:	2200      	movs	r2, #0
 800a016:	4683      	mov	fp, r0
 800a018:	2300      	movs	r3, #0
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 fd6d 	bl	8000afc <__aeabi_dcmplt>
 800a022:	b148      	cbz	r0, 800a038 <_dtoa_r+0x190>
 800a024:	4658      	mov	r0, fp
 800a026:	f7f6 fa8d 	bl	8000544 <__aeabi_i2d>
 800a02a:	4632      	mov	r2, r6
 800a02c:	463b      	mov	r3, r7
 800a02e:	f7f6 fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a032:	b908      	cbnz	r0, 800a038 <_dtoa_r+0x190>
 800a034:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a038:	f1bb 0f16 	cmp.w	fp, #22
 800a03c:	d857      	bhi.n	800a0ee <_dtoa_r+0x246>
 800a03e:	4b5b      	ldr	r3, [pc, #364]	; (800a1ac <_dtoa_r+0x304>)
 800a040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	ec51 0b18 	vmov	r0, r1, d8
 800a04c:	f7f6 fd56 	bl	8000afc <__aeabi_dcmplt>
 800a050:	2800      	cmp	r0, #0
 800a052:	d04e      	beq.n	800a0f2 <_dtoa_r+0x24a>
 800a054:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a058:	2300      	movs	r3, #0
 800a05a:	930c      	str	r3, [sp, #48]	; 0x30
 800a05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a05e:	1b5b      	subs	r3, r3, r5
 800a060:	1e5a      	subs	r2, r3, #1
 800a062:	bf45      	ittet	mi
 800a064:	f1c3 0301 	rsbmi	r3, r3, #1
 800a068:	9305      	strmi	r3, [sp, #20]
 800a06a:	2300      	movpl	r3, #0
 800a06c:	2300      	movmi	r3, #0
 800a06e:	9206      	str	r2, [sp, #24]
 800a070:	bf54      	ite	pl
 800a072:	9305      	strpl	r3, [sp, #20]
 800a074:	9306      	strmi	r3, [sp, #24]
 800a076:	f1bb 0f00 	cmp.w	fp, #0
 800a07a:	db3c      	blt.n	800a0f6 <_dtoa_r+0x24e>
 800a07c:	9b06      	ldr	r3, [sp, #24]
 800a07e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a082:	445b      	add	r3, fp
 800a084:	9306      	str	r3, [sp, #24]
 800a086:	2300      	movs	r3, #0
 800a088:	9308      	str	r3, [sp, #32]
 800a08a:	9b07      	ldr	r3, [sp, #28]
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d868      	bhi.n	800a162 <_dtoa_r+0x2ba>
 800a090:	2b05      	cmp	r3, #5
 800a092:	bfc4      	itt	gt
 800a094:	3b04      	subgt	r3, #4
 800a096:	9307      	strgt	r3, [sp, #28]
 800a098:	9b07      	ldr	r3, [sp, #28]
 800a09a:	f1a3 0302 	sub.w	r3, r3, #2
 800a09e:	bfcc      	ite	gt
 800a0a0:	2500      	movgt	r5, #0
 800a0a2:	2501      	movle	r5, #1
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	f200 8085 	bhi.w	800a1b4 <_dtoa_r+0x30c>
 800a0aa:	e8df f003 	tbb	[pc, r3]
 800a0ae:	3b2e      	.short	0x3b2e
 800a0b0:	5839      	.short	0x5839
 800a0b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0b6:	441d      	add	r5, r3
 800a0b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0bc:	2b20      	cmp	r3, #32
 800a0be:	bfc1      	itttt	gt
 800a0c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0d0:	bfd6      	itet	le
 800a0d2:	f1c3 0320 	rsble	r3, r3, #32
 800a0d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0da:	fa06 f003 	lslle.w	r0, r6, r3
 800a0de:	f7f6 fa21 	bl	8000524 <__aeabi_ui2d>
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0e8:	3d01      	subs	r5, #1
 800a0ea:	920e      	str	r2, [sp, #56]	; 0x38
 800a0ec:	e76f      	b.n	8009fce <_dtoa_r+0x126>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e7b3      	b.n	800a05a <_dtoa_r+0x1b2>
 800a0f2:	900c      	str	r0, [sp, #48]	; 0x30
 800a0f4:	e7b2      	b.n	800a05c <_dtoa_r+0x1b4>
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	eba3 030b 	sub.w	r3, r3, fp
 800a0fc:	9305      	str	r3, [sp, #20]
 800a0fe:	f1cb 0300 	rsb	r3, fp, #0
 800a102:	9308      	str	r3, [sp, #32]
 800a104:	2300      	movs	r3, #0
 800a106:	930b      	str	r3, [sp, #44]	; 0x2c
 800a108:	e7bf      	b.n	800a08a <_dtoa_r+0x1e2>
 800a10a:	2300      	movs	r3, #0
 800a10c:	9309      	str	r3, [sp, #36]	; 0x24
 800a10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a110:	2b00      	cmp	r3, #0
 800a112:	dc52      	bgt.n	800a1ba <_dtoa_r+0x312>
 800a114:	2301      	movs	r3, #1
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	461a      	mov	r2, r3
 800a11c:	920a      	str	r2, [sp, #40]	; 0x28
 800a11e:	e00b      	b.n	800a138 <_dtoa_r+0x290>
 800a120:	2301      	movs	r3, #1
 800a122:	e7f3      	b.n	800a10c <_dtoa_r+0x264>
 800a124:	2300      	movs	r3, #0
 800a126:	9309      	str	r3, [sp, #36]	; 0x24
 800a128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12a:	445b      	add	r3, fp
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	3301      	adds	r3, #1
 800a130:	2b01      	cmp	r3, #1
 800a132:	9304      	str	r3, [sp, #16]
 800a134:	bfb8      	it	lt
 800a136:	2301      	movlt	r3, #1
 800a138:	69e0      	ldr	r0, [r4, #28]
 800a13a:	2100      	movs	r1, #0
 800a13c:	2204      	movs	r2, #4
 800a13e:	f102 0614 	add.w	r6, r2, #20
 800a142:	429e      	cmp	r6, r3
 800a144:	d93d      	bls.n	800a1c2 <_dtoa_r+0x31a>
 800a146:	6041      	str	r1, [r0, #4]
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fd9f 	bl	800ac8c <_Balloc>
 800a14e:	9000      	str	r0, [sp, #0]
 800a150:	2800      	cmp	r0, #0
 800a152:	d139      	bne.n	800a1c8 <_dtoa_r+0x320>
 800a154:	4b16      	ldr	r3, [pc, #88]	; (800a1b0 <_dtoa_r+0x308>)
 800a156:	4602      	mov	r2, r0
 800a158:	f240 11af 	movw	r1, #431	; 0x1af
 800a15c:	e6bd      	b.n	8009eda <_dtoa_r+0x32>
 800a15e:	2301      	movs	r3, #1
 800a160:	e7e1      	b.n	800a126 <_dtoa_r+0x27e>
 800a162:	2501      	movs	r5, #1
 800a164:	2300      	movs	r3, #0
 800a166:	9307      	str	r3, [sp, #28]
 800a168:	9509      	str	r5, [sp, #36]	; 0x24
 800a16a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	2200      	movs	r2, #0
 800a174:	2312      	movs	r3, #18
 800a176:	e7d1      	b.n	800a11c <_dtoa_r+0x274>
 800a178:	636f4361 	.word	0x636f4361
 800a17c:	3fd287a7 	.word	0x3fd287a7
 800a180:	8b60c8b3 	.word	0x8b60c8b3
 800a184:	3fc68a28 	.word	0x3fc68a28
 800a188:	509f79fb 	.word	0x509f79fb
 800a18c:	3fd34413 	.word	0x3fd34413
 800a190:	0800c4da 	.word	0x0800c4da
 800a194:	0800c4f1 	.word	0x0800c4f1
 800a198:	7ff00000 	.word	0x7ff00000
 800a19c:	0800c4d6 	.word	0x0800c4d6
 800a1a0:	0800c4cd 	.word	0x0800c4cd
 800a1a4:	0800c4aa 	.word	0x0800c4aa
 800a1a8:	3ff80000 	.word	0x3ff80000
 800a1ac:	0800c5e0 	.word	0x0800c5e0
 800a1b0:	0800c549 	.word	0x0800c549
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b8:	e7d7      	b.n	800a16a <_dtoa_r+0x2c2>
 800a1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	e7ba      	b.n	800a138 <_dtoa_r+0x290>
 800a1c2:	3101      	adds	r1, #1
 800a1c4:	0052      	lsls	r2, r2, #1
 800a1c6:	e7ba      	b.n	800a13e <_dtoa_r+0x296>
 800a1c8:	69e3      	ldr	r3, [r4, #28]
 800a1ca:	9a00      	ldr	r2, [sp, #0]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	2b0e      	cmp	r3, #14
 800a1d2:	f200 80a8 	bhi.w	800a326 <_dtoa_r+0x47e>
 800a1d6:	2d00      	cmp	r5, #0
 800a1d8:	f000 80a5 	beq.w	800a326 <_dtoa_r+0x47e>
 800a1dc:	f1bb 0f00 	cmp.w	fp, #0
 800a1e0:	dd38      	ble.n	800a254 <_dtoa_r+0x3ac>
 800a1e2:	4bc0      	ldr	r3, [pc, #768]	; (800a4e4 <_dtoa_r+0x63c>)
 800a1e4:	f00b 020f 	and.w	r2, fp, #15
 800a1e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1f8:	d019      	beq.n	800a22e <_dtoa_r+0x386>
 800a1fa:	4bbb      	ldr	r3, [pc, #748]	; (800a4e8 <_dtoa_r+0x640>)
 800a1fc:	ec51 0b18 	vmov	r0, r1, d8
 800a200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a204:	f7f6 fb32 	bl	800086c <__aeabi_ddiv>
 800a208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20c:	f008 080f 	and.w	r8, r8, #15
 800a210:	2503      	movs	r5, #3
 800a212:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4e8 <_dtoa_r+0x640>
 800a216:	f1b8 0f00 	cmp.w	r8, #0
 800a21a:	d10a      	bne.n	800a232 <_dtoa_r+0x38a>
 800a21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a220:	4632      	mov	r2, r6
 800a222:	463b      	mov	r3, r7
 800a224:	f7f6 fb22 	bl	800086c <__aeabi_ddiv>
 800a228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a22c:	e02b      	b.n	800a286 <_dtoa_r+0x3de>
 800a22e:	2502      	movs	r5, #2
 800a230:	e7ef      	b.n	800a212 <_dtoa_r+0x36a>
 800a232:	f018 0f01 	tst.w	r8, #1
 800a236:	d008      	beq.n	800a24a <_dtoa_r+0x3a2>
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a240:	f7f6 f9ea 	bl	8000618 <__aeabi_dmul>
 800a244:	3501      	adds	r5, #1
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a24e:	f109 0908 	add.w	r9, r9, #8
 800a252:	e7e0      	b.n	800a216 <_dtoa_r+0x36e>
 800a254:	f000 809f 	beq.w	800a396 <_dtoa_r+0x4ee>
 800a258:	f1cb 0600 	rsb	r6, fp, #0
 800a25c:	4ba1      	ldr	r3, [pc, #644]	; (800a4e4 <_dtoa_r+0x63c>)
 800a25e:	4fa2      	ldr	r7, [pc, #648]	; (800a4e8 <_dtoa_r+0x640>)
 800a260:	f006 020f 	and.w	r2, r6, #15
 800a264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	ec51 0b18 	vmov	r0, r1, d8
 800a270:	f7f6 f9d2 	bl	8000618 <__aeabi_dmul>
 800a274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a278:	1136      	asrs	r6, r6, #4
 800a27a:	2300      	movs	r3, #0
 800a27c:	2502      	movs	r5, #2
 800a27e:	2e00      	cmp	r6, #0
 800a280:	d17e      	bne.n	800a380 <_dtoa_r+0x4d8>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1d0      	bne.n	800a228 <_dtoa_r+0x380>
 800a286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a288:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8084 	beq.w	800a39a <_dtoa_r+0x4f2>
 800a292:	4b96      	ldr	r3, [pc, #600]	; (800a4ec <_dtoa_r+0x644>)
 800a294:	2200      	movs	r2, #0
 800a296:	4640      	mov	r0, r8
 800a298:	4649      	mov	r1, r9
 800a29a:	f7f6 fc2f 	bl	8000afc <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d07b      	beq.n	800a39a <_dtoa_r+0x4f2>
 800a2a2:	9b04      	ldr	r3, [sp, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d078      	beq.n	800a39a <_dtoa_r+0x4f2>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dd39      	ble.n	800a322 <_dtoa_r+0x47a>
 800a2ae:	4b90      	ldr	r3, [pc, #576]	; (800a4f0 <_dtoa_r+0x648>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	f7f6 f9af 	bl	8000618 <__aeabi_dmul>
 800a2ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2be:	9e01      	ldr	r6, [sp, #4]
 800a2c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f7f6 f93a 	bl	8000544 <__aeabi_i2d>
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	f7f6 f9a0 	bl	8000618 <__aeabi_dmul>
 800a2d8:	4b86      	ldr	r3, [pc, #536]	; (800a4f4 <_dtoa_r+0x64c>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f5 ffe6 	bl	80002ac <__adddf3>
 800a2e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e8:	9303      	str	r3, [sp, #12]
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	d158      	bne.n	800a3a0 <_dtoa_r+0x4f8>
 800a2ee:	4b82      	ldr	r3, [pc, #520]	; (800a4f8 <_dtoa_r+0x650>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f5 ffd7 	bl	80002a8 <__aeabi_dsub>
 800a2fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2fe:	4680      	mov	r8, r0
 800a300:	4689      	mov	r9, r1
 800a302:	f7f6 fc19 	bl	8000b38 <__aeabi_dcmpgt>
 800a306:	2800      	cmp	r0, #0
 800a308:	f040 8296 	bne.w	800a838 <_dtoa_r+0x990>
 800a30c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a310:	4640      	mov	r0, r8
 800a312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a316:	4649      	mov	r1, r9
 800a318:	f7f6 fbf0 	bl	8000afc <__aeabi_dcmplt>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	f040 8289 	bne.w	800a834 <_dtoa_r+0x98c>
 800a322:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f2c0 814e 	blt.w	800a5ca <_dtoa_r+0x722>
 800a32e:	f1bb 0f0e 	cmp.w	fp, #14
 800a332:	f300 814a 	bgt.w	800a5ca <_dtoa_r+0x722>
 800a336:	4b6b      	ldr	r3, [pc, #428]	; (800a4e4 <_dtoa_r+0x63c>)
 800a338:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a33c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a342:	2b00      	cmp	r3, #0
 800a344:	f280 80dc 	bge.w	800a500 <_dtoa_r+0x658>
 800a348:	9b04      	ldr	r3, [sp, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f300 80d8 	bgt.w	800a500 <_dtoa_r+0x658>
 800a350:	f040 826f 	bne.w	800a832 <_dtoa_r+0x98a>
 800a354:	4b68      	ldr	r3, [pc, #416]	; (800a4f8 <_dtoa_r+0x650>)
 800a356:	2200      	movs	r2, #0
 800a358:	4640      	mov	r0, r8
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f6 f95c 	bl	8000618 <__aeabi_dmul>
 800a360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a364:	f7f6 fbde 	bl	8000b24 <__aeabi_dcmpge>
 800a368:	9e04      	ldr	r6, [sp, #16]
 800a36a:	4637      	mov	r7, r6
 800a36c:	2800      	cmp	r0, #0
 800a36e:	f040 8245 	bne.w	800a7fc <_dtoa_r+0x954>
 800a372:	9d00      	ldr	r5, [sp, #0]
 800a374:	2331      	movs	r3, #49	; 0x31
 800a376:	f805 3b01 	strb.w	r3, [r5], #1
 800a37a:	f10b 0b01 	add.w	fp, fp, #1
 800a37e:	e241      	b.n	800a804 <_dtoa_r+0x95c>
 800a380:	07f2      	lsls	r2, r6, #31
 800a382:	d505      	bpl.n	800a390 <_dtoa_r+0x4e8>
 800a384:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a388:	f7f6 f946 	bl	8000618 <__aeabi_dmul>
 800a38c:	3501      	adds	r5, #1
 800a38e:	2301      	movs	r3, #1
 800a390:	1076      	asrs	r6, r6, #1
 800a392:	3708      	adds	r7, #8
 800a394:	e773      	b.n	800a27e <_dtoa_r+0x3d6>
 800a396:	2502      	movs	r5, #2
 800a398:	e775      	b.n	800a286 <_dtoa_r+0x3de>
 800a39a:	9e04      	ldr	r6, [sp, #16]
 800a39c:	465f      	mov	r7, fp
 800a39e:	e792      	b.n	800a2c6 <_dtoa_r+0x41e>
 800a3a0:	9900      	ldr	r1, [sp, #0]
 800a3a2:	4b50      	ldr	r3, [pc, #320]	; (800a4e4 <_dtoa_r+0x63c>)
 800a3a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3a8:	4431      	add	r1, r6
 800a3aa:	9102      	str	r1, [sp, #8]
 800a3ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ae:	eeb0 9a47 	vmov.f32	s18, s14
 800a3b2:	eef0 9a67 	vmov.f32	s19, s15
 800a3b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	d044      	beq.n	800a44c <_dtoa_r+0x5a4>
 800a3c2:	494e      	ldr	r1, [pc, #312]	; (800a4fc <_dtoa_r+0x654>)
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	f7f6 fa51 	bl	800086c <__aeabi_ddiv>
 800a3ca:	ec53 2b19 	vmov	r2, r3, d9
 800a3ce:	f7f5 ff6b 	bl	80002a8 <__aeabi_dsub>
 800a3d2:	9d00      	ldr	r5, [sp, #0]
 800a3d4:	ec41 0b19 	vmov	d9, r0, r1
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4640      	mov	r0, r8
 800a3dc:	f7f6 fbcc 	bl	8000b78 <__aeabi_d2iz>
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	f7f6 f8af 	bl	8000544 <__aeabi_i2d>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f5 ff5b 	bl	80002a8 <__aeabi_dsub>
 800a3f2:	3630      	adds	r6, #48	; 0x30
 800a3f4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3f8:	ec53 2b19 	vmov	r2, r3, d9
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	4689      	mov	r9, r1
 800a400:	f7f6 fb7c 	bl	8000afc <__aeabi_dcmplt>
 800a404:	2800      	cmp	r0, #0
 800a406:	d164      	bne.n	800a4d2 <_dtoa_r+0x62a>
 800a408:	4642      	mov	r2, r8
 800a40a:	464b      	mov	r3, r9
 800a40c:	4937      	ldr	r1, [pc, #220]	; (800a4ec <_dtoa_r+0x644>)
 800a40e:	2000      	movs	r0, #0
 800a410:	f7f5 ff4a 	bl	80002a8 <__aeabi_dsub>
 800a414:	ec53 2b19 	vmov	r2, r3, d9
 800a418:	f7f6 fb70 	bl	8000afc <__aeabi_dcmplt>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	f040 80b6 	bne.w	800a58e <_dtoa_r+0x6e6>
 800a422:	9b02      	ldr	r3, [sp, #8]
 800a424:	429d      	cmp	r5, r3
 800a426:	f43f af7c 	beq.w	800a322 <_dtoa_r+0x47a>
 800a42a:	4b31      	ldr	r3, [pc, #196]	; (800a4f0 <_dtoa_r+0x648>)
 800a42c:	ec51 0b19 	vmov	r0, r1, d9
 800a430:	2200      	movs	r2, #0
 800a432:	f7f6 f8f1 	bl	8000618 <__aeabi_dmul>
 800a436:	4b2e      	ldr	r3, [pc, #184]	; (800a4f0 <_dtoa_r+0x648>)
 800a438:	ec41 0b19 	vmov	d9, r0, r1
 800a43c:	2200      	movs	r2, #0
 800a43e:	4640      	mov	r0, r8
 800a440:	4649      	mov	r1, r9
 800a442:	f7f6 f8e9 	bl	8000618 <__aeabi_dmul>
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	e7c5      	b.n	800a3d8 <_dtoa_r+0x530>
 800a44c:	ec51 0b17 	vmov	r0, r1, d7
 800a450:	f7f6 f8e2 	bl	8000618 <__aeabi_dmul>
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	9d00      	ldr	r5, [sp, #0]
 800a458:	930f      	str	r3, [sp, #60]	; 0x3c
 800a45a:	ec41 0b19 	vmov	d9, r0, r1
 800a45e:	4649      	mov	r1, r9
 800a460:	4640      	mov	r0, r8
 800a462:	f7f6 fb89 	bl	8000b78 <__aeabi_d2iz>
 800a466:	4606      	mov	r6, r0
 800a468:	f7f6 f86c 	bl	8000544 <__aeabi_i2d>
 800a46c:	3630      	adds	r6, #48	; 0x30
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f5 ff17 	bl	80002a8 <__aeabi_dsub>
 800a47a:	f805 6b01 	strb.w	r6, [r5], #1
 800a47e:	9b02      	ldr	r3, [sp, #8]
 800a480:	429d      	cmp	r5, r3
 800a482:	4680      	mov	r8, r0
 800a484:	4689      	mov	r9, r1
 800a486:	f04f 0200 	mov.w	r2, #0
 800a48a:	d124      	bne.n	800a4d6 <_dtoa_r+0x62e>
 800a48c:	4b1b      	ldr	r3, [pc, #108]	; (800a4fc <_dtoa_r+0x654>)
 800a48e:	ec51 0b19 	vmov	r0, r1, d9
 800a492:	f7f5 ff0b 	bl	80002ac <__adddf3>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4640      	mov	r0, r8
 800a49c:	4649      	mov	r1, r9
 800a49e:	f7f6 fb4b 	bl	8000b38 <__aeabi_dcmpgt>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d173      	bne.n	800a58e <_dtoa_r+0x6e6>
 800a4a6:	ec53 2b19 	vmov	r2, r3, d9
 800a4aa:	4914      	ldr	r1, [pc, #80]	; (800a4fc <_dtoa_r+0x654>)
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f7f5 fefb 	bl	80002a8 <__aeabi_dsub>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	f7f6 fb1f 	bl	8000afc <__aeabi_dcmplt>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	f43f af2f 	beq.w	800a322 <_dtoa_r+0x47a>
 800a4c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4c6:	1e6b      	subs	r3, r5, #1
 800a4c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4ce:	2b30      	cmp	r3, #48	; 0x30
 800a4d0:	d0f8      	beq.n	800a4c4 <_dtoa_r+0x61c>
 800a4d2:	46bb      	mov	fp, r7
 800a4d4:	e04a      	b.n	800a56c <_dtoa_r+0x6c4>
 800a4d6:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <_dtoa_r+0x648>)
 800a4d8:	f7f6 f89e 	bl	8000618 <__aeabi_dmul>
 800a4dc:	4680      	mov	r8, r0
 800a4de:	4689      	mov	r9, r1
 800a4e0:	e7bd      	b.n	800a45e <_dtoa_r+0x5b6>
 800a4e2:	bf00      	nop
 800a4e4:	0800c5e0 	.word	0x0800c5e0
 800a4e8:	0800c5b8 	.word	0x0800c5b8
 800a4ec:	3ff00000 	.word	0x3ff00000
 800a4f0:	40240000 	.word	0x40240000
 800a4f4:	401c0000 	.word	0x401c0000
 800a4f8:	40140000 	.word	0x40140000
 800a4fc:	3fe00000 	.word	0x3fe00000
 800a500:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a504:	9d00      	ldr	r5, [sp, #0]
 800a506:	4642      	mov	r2, r8
 800a508:	464b      	mov	r3, r9
 800a50a:	4630      	mov	r0, r6
 800a50c:	4639      	mov	r1, r7
 800a50e:	f7f6 f9ad 	bl	800086c <__aeabi_ddiv>
 800a512:	f7f6 fb31 	bl	8000b78 <__aeabi_d2iz>
 800a516:	9001      	str	r0, [sp, #4]
 800a518:	f7f6 f814 	bl	8000544 <__aeabi_i2d>
 800a51c:	4642      	mov	r2, r8
 800a51e:	464b      	mov	r3, r9
 800a520:	f7f6 f87a 	bl	8000618 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4630      	mov	r0, r6
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f5 febc 	bl	80002a8 <__aeabi_dsub>
 800a530:	9e01      	ldr	r6, [sp, #4]
 800a532:	9f04      	ldr	r7, [sp, #16]
 800a534:	3630      	adds	r6, #48	; 0x30
 800a536:	f805 6b01 	strb.w	r6, [r5], #1
 800a53a:	9e00      	ldr	r6, [sp, #0]
 800a53c:	1bae      	subs	r6, r5, r6
 800a53e:	42b7      	cmp	r7, r6
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	d134      	bne.n	800a5b0 <_dtoa_r+0x708>
 800a546:	f7f5 feb1 	bl	80002ac <__adddf3>
 800a54a:	4642      	mov	r2, r8
 800a54c:	464b      	mov	r3, r9
 800a54e:	4606      	mov	r6, r0
 800a550:	460f      	mov	r7, r1
 800a552:	f7f6 faf1 	bl	8000b38 <__aeabi_dcmpgt>
 800a556:	b9c8      	cbnz	r0, 800a58c <_dtoa_r+0x6e4>
 800a558:	4642      	mov	r2, r8
 800a55a:	464b      	mov	r3, r9
 800a55c:	4630      	mov	r0, r6
 800a55e:	4639      	mov	r1, r7
 800a560:	f7f6 fac2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a564:	b110      	cbz	r0, 800a56c <_dtoa_r+0x6c4>
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	07db      	lsls	r3, r3, #31
 800a56a:	d40f      	bmi.n	800a58c <_dtoa_r+0x6e4>
 800a56c:	4651      	mov	r1, sl
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 fbcc 	bl	800ad0c <_Bfree>
 800a574:	2300      	movs	r3, #0
 800a576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a578:	702b      	strb	r3, [r5, #0]
 800a57a:	f10b 0301 	add.w	r3, fp, #1
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a582:	2b00      	cmp	r3, #0
 800a584:	f43f ace2 	beq.w	8009f4c <_dtoa_r+0xa4>
 800a588:	601d      	str	r5, [r3, #0]
 800a58a:	e4df      	b.n	8009f4c <_dtoa_r+0xa4>
 800a58c:	465f      	mov	r7, fp
 800a58e:	462b      	mov	r3, r5
 800a590:	461d      	mov	r5, r3
 800a592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a596:	2a39      	cmp	r2, #57	; 0x39
 800a598:	d106      	bne.n	800a5a8 <_dtoa_r+0x700>
 800a59a:	9a00      	ldr	r2, [sp, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d1f7      	bne.n	800a590 <_dtoa_r+0x6e8>
 800a5a0:	9900      	ldr	r1, [sp, #0]
 800a5a2:	2230      	movs	r2, #48	; 0x30
 800a5a4:	3701      	adds	r7, #1
 800a5a6:	700a      	strb	r2, [r1, #0]
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	3201      	adds	r2, #1
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	e790      	b.n	800a4d2 <_dtoa_r+0x62a>
 800a5b0:	4ba3      	ldr	r3, [pc, #652]	; (800a840 <_dtoa_r+0x998>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f7f6 f830 	bl	8000618 <__aeabi_dmul>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	f7f6 fa92 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d09e      	beq.n	800a506 <_dtoa_r+0x65e>
 800a5c8:	e7d0      	b.n	800a56c <_dtoa_r+0x6c4>
 800a5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5cc:	2a00      	cmp	r2, #0
 800a5ce:	f000 80ca 	beq.w	800a766 <_dtoa_r+0x8be>
 800a5d2:	9a07      	ldr	r2, [sp, #28]
 800a5d4:	2a01      	cmp	r2, #1
 800a5d6:	f300 80ad 	bgt.w	800a734 <_dtoa_r+0x88c>
 800a5da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5dc:	2a00      	cmp	r2, #0
 800a5de:	f000 80a5 	beq.w	800a72c <_dtoa_r+0x884>
 800a5e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5e6:	9e08      	ldr	r6, [sp, #32]
 800a5e8:	9d05      	ldr	r5, [sp, #20]
 800a5ea:	9a05      	ldr	r2, [sp, #20]
 800a5ec:	441a      	add	r2, r3
 800a5ee:	9205      	str	r2, [sp, #20]
 800a5f0:	9a06      	ldr	r2, [sp, #24]
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	441a      	add	r2, r3
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	9206      	str	r2, [sp, #24]
 800a5fa:	f000 fc3d 	bl	800ae78 <__i2b>
 800a5fe:	4607      	mov	r7, r0
 800a600:	b165      	cbz	r5, 800a61c <_dtoa_r+0x774>
 800a602:	9b06      	ldr	r3, [sp, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	dd09      	ble.n	800a61c <_dtoa_r+0x774>
 800a608:	42ab      	cmp	r3, r5
 800a60a:	9a05      	ldr	r2, [sp, #20]
 800a60c:	bfa8      	it	ge
 800a60e:	462b      	movge	r3, r5
 800a610:	1ad2      	subs	r2, r2, r3
 800a612:	9205      	str	r2, [sp, #20]
 800a614:	9a06      	ldr	r2, [sp, #24]
 800a616:	1aed      	subs	r5, r5, r3
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	9306      	str	r3, [sp, #24]
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	b1f3      	cbz	r3, 800a65e <_dtoa_r+0x7b6>
 800a620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 80a3 	beq.w	800a76e <_dtoa_r+0x8c6>
 800a628:	2e00      	cmp	r6, #0
 800a62a:	dd10      	ble.n	800a64e <_dtoa_r+0x7a6>
 800a62c:	4639      	mov	r1, r7
 800a62e:	4632      	mov	r2, r6
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fce1 	bl	800aff8 <__pow5mult>
 800a636:	4652      	mov	r2, sl
 800a638:	4601      	mov	r1, r0
 800a63a:	4607      	mov	r7, r0
 800a63c:	4620      	mov	r0, r4
 800a63e:	f000 fc31 	bl	800aea4 <__multiply>
 800a642:	4651      	mov	r1, sl
 800a644:	4680      	mov	r8, r0
 800a646:	4620      	mov	r0, r4
 800a648:	f000 fb60 	bl	800ad0c <_Bfree>
 800a64c:	46c2      	mov	sl, r8
 800a64e:	9b08      	ldr	r3, [sp, #32]
 800a650:	1b9a      	subs	r2, r3, r6
 800a652:	d004      	beq.n	800a65e <_dtoa_r+0x7b6>
 800a654:	4651      	mov	r1, sl
 800a656:	4620      	mov	r0, r4
 800a658:	f000 fcce 	bl	800aff8 <__pow5mult>
 800a65c:	4682      	mov	sl, r0
 800a65e:	2101      	movs	r1, #1
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fc09 	bl	800ae78 <__i2b>
 800a666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	4606      	mov	r6, r0
 800a66c:	f340 8081 	ble.w	800a772 <_dtoa_r+0x8ca>
 800a670:	461a      	mov	r2, r3
 800a672:	4601      	mov	r1, r0
 800a674:	4620      	mov	r0, r4
 800a676:	f000 fcbf 	bl	800aff8 <__pow5mult>
 800a67a:	9b07      	ldr	r3, [sp, #28]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	4606      	mov	r6, r0
 800a680:	dd7a      	ble.n	800a778 <_dtoa_r+0x8d0>
 800a682:	f04f 0800 	mov.w	r8, #0
 800a686:	6933      	ldr	r3, [r6, #16]
 800a688:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a68c:	6918      	ldr	r0, [r3, #16]
 800a68e:	f000 fba5 	bl	800addc <__hi0bits>
 800a692:	f1c0 0020 	rsb	r0, r0, #32
 800a696:	9b06      	ldr	r3, [sp, #24]
 800a698:	4418      	add	r0, r3
 800a69a:	f010 001f 	ands.w	r0, r0, #31
 800a69e:	f000 8094 	beq.w	800a7ca <_dtoa_r+0x922>
 800a6a2:	f1c0 0320 	rsb	r3, r0, #32
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	f340 8085 	ble.w	800a7b6 <_dtoa_r+0x90e>
 800a6ac:	9b05      	ldr	r3, [sp, #20]
 800a6ae:	f1c0 001c 	rsb	r0, r0, #28
 800a6b2:	4403      	add	r3, r0
 800a6b4:	9305      	str	r3, [sp, #20]
 800a6b6:	9b06      	ldr	r3, [sp, #24]
 800a6b8:	4403      	add	r3, r0
 800a6ba:	4405      	add	r5, r0
 800a6bc:	9306      	str	r3, [sp, #24]
 800a6be:	9b05      	ldr	r3, [sp, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dd05      	ble.n	800a6d0 <_dtoa_r+0x828>
 800a6c4:	4651      	mov	r1, sl
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 fcef 	bl	800b0ac <__lshift>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	9b06      	ldr	r3, [sp, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dd05      	ble.n	800a6e2 <_dtoa_r+0x83a>
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fce6 	bl	800b0ac <__lshift>
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d072      	beq.n	800a7ce <_dtoa_r+0x926>
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	f000 fd4a 	bl	800b184 <__mcmp>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	da6c      	bge.n	800a7ce <_dtoa_r+0x926>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4651      	mov	r1, sl
 800a6f8:	220a      	movs	r2, #10
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fb28 	bl	800ad50 <__multadd>
 800a700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a702:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a706:	4682      	mov	sl, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 81b0 	beq.w	800aa6e <_dtoa_r+0xbc6>
 800a70e:	2300      	movs	r3, #0
 800a710:	4639      	mov	r1, r7
 800a712:	220a      	movs	r2, #10
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fb1b 	bl	800ad50 <__multadd>
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	4607      	mov	r7, r0
 800a720:	f300 8096 	bgt.w	800a850 <_dtoa_r+0x9a8>
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	2b02      	cmp	r3, #2
 800a728:	dc59      	bgt.n	800a7de <_dtoa_r+0x936>
 800a72a:	e091      	b.n	800a850 <_dtoa_r+0x9a8>
 800a72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a72e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a732:	e758      	b.n	800a5e6 <_dtoa_r+0x73e>
 800a734:	9b04      	ldr	r3, [sp, #16]
 800a736:	1e5e      	subs	r6, r3, #1
 800a738:	9b08      	ldr	r3, [sp, #32]
 800a73a:	42b3      	cmp	r3, r6
 800a73c:	bfbf      	itttt	lt
 800a73e:	9b08      	ldrlt	r3, [sp, #32]
 800a740:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a742:	9608      	strlt	r6, [sp, #32]
 800a744:	1af3      	sublt	r3, r6, r3
 800a746:	bfb4      	ite	lt
 800a748:	18d2      	addlt	r2, r2, r3
 800a74a:	1b9e      	subge	r6, r3, r6
 800a74c:	9b04      	ldr	r3, [sp, #16]
 800a74e:	bfbc      	itt	lt
 800a750:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a752:	2600      	movlt	r6, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	bfb7      	itett	lt
 800a758:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a75c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a760:	1a9d      	sublt	r5, r3, r2
 800a762:	2300      	movlt	r3, #0
 800a764:	e741      	b.n	800a5ea <_dtoa_r+0x742>
 800a766:	9e08      	ldr	r6, [sp, #32]
 800a768:	9d05      	ldr	r5, [sp, #20]
 800a76a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a76c:	e748      	b.n	800a600 <_dtoa_r+0x758>
 800a76e:	9a08      	ldr	r2, [sp, #32]
 800a770:	e770      	b.n	800a654 <_dtoa_r+0x7ac>
 800a772:	9b07      	ldr	r3, [sp, #28]
 800a774:	2b01      	cmp	r3, #1
 800a776:	dc19      	bgt.n	800a7ac <_dtoa_r+0x904>
 800a778:	9b02      	ldr	r3, [sp, #8]
 800a77a:	b9bb      	cbnz	r3, 800a7ac <_dtoa_r+0x904>
 800a77c:	9b03      	ldr	r3, [sp, #12]
 800a77e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a782:	b99b      	cbnz	r3, 800a7ac <_dtoa_r+0x904>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a78a:	0d1b      	lsrs	r3, r3, #20
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	b183      	cbz	r3, 800a7b2 <_dtoa_r+0x90a>
 800a790:	9b05      	ldr	r3, [sp, #20]
 800a792:	3301      	adds	r3, #1
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	9b06      	ldr	r3, [sp, #24]
 800a798:	3301      	adds	r3, #1
 800a79a:	9306      	str	r3, [sp, #24]
 800a79c:	f04f 0801 	mov.w	r8, #1
 800a7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f47f af6f 	bne.w	800a686 <_dtoa_r+0x7de>
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	e774      	b.n	800a696 <_dtoa_r+0x7ee>
 800a7ac:	f04f 0800 	mov.w	r8, #0
 800a7b0:	e7f6      	b.n	800a7a0 <_dtoa_r+0x8f8>
 800a7b2:	4698      	mov	r8, r3
 800a7b4:	e7f4      	b.n	800a7a0 <_dtoa_r+0x8f8>
 800a7b6:	d082      	beq.n	800a6be <_dtoa_r+0x816>
 800a7b8:	9a05      	ldr	r2, [sp, #20]
 800a7ba:	331c      	adds	r3, #28
 800a7bc:	441a      	add	r2, r3
 800a7be:	9205      	str	r2, [sp, #20]
 800a7c0:	9a06      	ldr	r2, [sp, #24]
 800a7c2:	441a      	add	r2, r3
 800a7c4:	441d      	add	r5, r3
 800a7c6:	9206      	str	r2, [sp, #24]
 800a7c8:	e779      	b.n	800a6be <_dtoa_r+0x816>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	e7f4      	b.n	800a7b8 <_dtoa_r+0x910>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	dc37      	bgt.n	800a844 <_dtoa_r+0x99c>
 800a7d4:	9b07      	ldr	r3, [sp, #28]
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	dd34      	ble.n	800a844 <_dtoa_r+0x99c>
 800a7da:	9b04      	ldr	r3, [sp, #16]
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	b963      	cbnz	r3, 800a7fc <_dtoa_r+0x954>
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	2205      	movs	r2, #5
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 fab2 	bl	800ad50 <__multadd>
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	4650      	mov	r0, sl
 800a7f2:	f000 fcc7 	bl	800b184 <__mcmp>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f73f adbb 	bgt.w	800a372 <_dtoa_r+0x4ca>
 800a7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fe:	9d00      	ldr	r5, [sp, #0]
 800a800:	ea6f 0b03 	mvn.w	fp, r3
 800a804:	f04f 0800 	mov.w	r8, #0
 800a808:	4631      	mov	r1, r6
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fa7e 	bl	800ad0c <_Bfree>
 800a810:	2f00      	cmp	r7, #0
 800a812:	f43f aeab 	beq.w	800a56c <_dtoa_r+0x6c4>
 800a816:	f1b8 0f00 	cmp.w	r8, #0
 800a81a:	d005      	beq.n	800a828 <_dtoa_r+0x980>
 800a81c:	45b8      	cmp	r8, r7
 800a81e:	d003      	beq.n	800a828 <_dtoa_r+0x980>
 800a820:	4641      	mov	r1, r8
 800a822:	4620      	mov	r0, r4
 800a824:	f000 fa72 	bl	800ad0c <_Bfree>
 800a828:	4639      	mov	r1, r7
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fa6e 	bl	800ad0c <_Bfree>
 800a830:	e69c      	b.n	800a56c <_dtoa_r+0x6c4>
 800a832:	2600      	movs	r6, #0
 800a834:	4637      	mov	r7, r6
 800a836:	e7e1      	b.n	800a7fc <_dtoa_r+0x954>
 800a838:	46bb      	mov	fp, r7
 800a83a:	4637      	mov	r7, r6
 800a83c:	e599      	b.n	800a372 <_dtoa_r+0x4ca>
 800a83e:	bf00      	nop
 800a840:	40240000 	.word	0x40240000
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 80c8 	beq.w	800a9dc <_dtoa_r+0xb34>
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	2d00      	cmp	r5, #0
 800a852:	dd05      	ble.n	800a860 <_dtoa_r+0x9b8>
 800a854:	4639      	mov	r1, r7
 800a856:	462a      	mov	r2, r5
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fc27 	bl	800b0ac <__lshift>
 800a85e:	4607      	mov	r7, r0
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	d05b      	beq.n	800a91e <_dtoa_r+0xa76>
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fa0f 	bl	800ac8c <_Balloc>
 800a86e:	4605      	mov	r5, r0
 800a870:	b928      	cbnz	r0, 800a87e <_dtoa_r+0x9d6>
 800a872:	4b83      	ldr	r3, [pc, #524]	; (800aa80 <_dtoa_r+0xbd8>)
 800a874:	4602      	mov	r2, r0
 800a876:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a87a:	f7ff bb2e 	b.w	8009eda <_dtoa_r+0x32>
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	3202      	adds	r2, #2
 800a882:	0092      	lsls	r2, r2, #2
 800a884:	f107 010c 	add.w	r1, r7, #12
 800a888:	300c      	adds	r0, #12
 800a88a:	f7ff fa76 	bl	8009d7a <memcpy>
 800a88e:	2201      	movs	r2, #1
 800a890:	4629      	mov	r1, r5
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fc0a 	bl	800b0ac <__lshift>
 800a898:	9b00      	ldr	r3, [sp, #0]
 800a89a:	3301      	adds	r3, #1
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	9308      	str	r3, [sp, #32]
 800a8a6:	9b02      	ldr	r3, [sp, #8]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	46b8      	mov	r8, r7
 800a8ae:	9306      	str	r3, [sp, #24]
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	4650      	mov	r0, sl
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	f7ff fa6b 	bl	8009d96 <quorem>
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	9002      	str	r0, [sp, #8]
 800a8c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	f000 fc5b 	bl	800b184 <__mcmp>
 800a8ce:	463a      	mov	r2, r7
 800a8d0:	9005      	str	r0, [sp, #20]
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 fc71 	bl	800b1bc <__mdiff>
 800a8da:	68c2      	ldr	r2, [r0, #12]
 800a8dc:	4605      	mov	r5, r0
 800a8de:	bb02      	cbnz	r2, 800a922 <_dtoa_r+0xa7a>
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	4650      	mov	r0, sl
 800a8e4:	f000 fc4e 	bl	800b184 <__mcmp>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f0:	f000 fa0c 	bl	800ad0c <_Bfree>
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f8:	9d04      	ldr	r5, [sp, #16]
 800a8fa:	ea43 0102 	orr.w	r1, r3, r2
 800a8fe:	9b06      	ldr	r3, [sp, #24]
 800a900:	4319      	orrs	r1, r3
 800a902:	d110      	bne.n	800a926 <_dtoa_r+0xa7e>
 800a904:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a908:	d029      	beq.n	800a95e <_dtoa_r+0xab6>
 800a90a:	9b05      	ldr	r3, [sp, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dd02      	ble.n	800a916 <_dtoa_r+0xa6e>
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	f883 9000 	strb.w	r9, [r3]
 800a91c:	e774      	b.n	800a808 <_dtoa_r+0x960>
 800a91e:	4638      	mov	r0, r7
 800a920:	e7ba      	b.n	800a898 <_dtoa_r+0x9f0>
 800a922:	2201      	movs	r2, #1
 800a924:	e7e1      	b.n	800a8ea <_dtoa_r+0xa42>
 800a926:	9b05      	ldr	r3, [sp, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db04      	blt.n	800a936 <_dtoa_r+0xa8e>
 800a92c:	9907      	ldr	r1, [sp, #28]
 800a92e:	430b      	orrs	r3, r1
 800a930:	9906      	ldr	r1, [sp, #24]
 800a932:	430b      	orrs	r3, r1
 800a934:	d120      	bne.n	800a978 <_dtoa_r+0xad0>
 800a936:	2a00      	cmp	r2, #0
 800a938:	dded      	ble.n	800a916 <_dtoa_r+0xa6e>
 800a93a:	4651      	mov	r1, sl
 800a93c:	2201      	movs	r2, #1
 800a93e:	4620      	mov	r0, r4
 800a940:	f000 fbb4 	bl	800b0ac <__lshift>
 800a944:	4631      	mov	r1, r6
 800a946:	4682      	mov	sl, r0
 800a948:	f000 fc1c 	bl	800b184 <__mcmp>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	dc03      	bgt.n	800a958 <_dtoa_r+0xab0>
 800a950:	d1e1      	bne.n	800a916 <_dtoa_r+0xa6e>
 800a952:	f019 0f01 	tst.w	r9, #1
 800a956:	d0de      	beq.n	800a916 <_dtoa_r+0xa6e>
 800a958:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a95c:	d1d8      	bne.n	800a910 <_dtoa_r+0xa68>
 800a95e:	9a01      	ldr	r2, [sp, #4]
 800a960:	2339      	movs	r3, #57	; 0x39
 800a962:	7013      	strb	r3, [r2, #0]
 800a964:	462b      	mov	r3, r5
 800a966:	461d      	mov	r5, r3
 800a968:	3b01      	subs	r3, #1
 800a96a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a96e:	2a39      	cmp	r2, #57	; 0x39
 800a970:	d06c      	beq.n	800aa4c <_dtoa_r+0xba4>
 800a972:	3201      	adds	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
 800a976:	e747      	b.n	800a808 <_dtoa_r+0x960>
 800a978:	2a00      	cmp	r2, #0
 800a97a:	dd07      	ble.n	800a98c <_dtoa_r+0xae4>
 800a97c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a980:	d0ed      	beq.n	800a95e <_dtoa_r+0xab6>
 800a982:	9a01      	ldr	r2, [sp, #4]
 800a984:	f109 0301 	add.w	r3, r9, #1
 800a988:	7013      	strb	r3, [r2, #0]
 800a98a:	e73d      	b.n	800a808 <_dtoa_r+0x960>
 800a98c:	9b04      	ldr	r3, [sp, #16]
 800a98e:	9a08      	ldr	r2, [sp, #32]
 800a990:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a994:	4293      	cmp	r3, r2
 800a996:	d043      	beq.n	800aa20 <_dtoa_r+0xb78>
 800a998:	4651      	mov	r1, sl
 800a99a:	2300      	movs	r3, #0
 800a99c:	220a      	movs	r2, #10
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f9d6 	bl	800ad50 <__multadd>
 800a9a4:	45b8      	cmp	r8, r7
 800a9a6:	4682      	mov	sl, r0
 800a9a8:	f04f 0300 	mov.w	r3, #0
 800a9ac:	f04f 020a 	mov.w	r2, #10
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	d107      	bne.n	800a9c6 <_dtoa_r+0xb1e>
 800a9b6:	f000 f9cb 	bl	800ad50 <__multadd>
 800a9ba:	4680      	mov	r8, r0
 800a9bc:	4607      	mov	r7, r0
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	e775      	b.n	800a8b2 <_dtoa_r+0xa0a>
 800a9c6:	f000 f9c3 	bl	800ad50 <__multadd>
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	220a      	movs	r2, #10
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f9bc 	bl	800ad50 <__multadd>
 800a9d8:	4607      	mov	r7, r0
 800a9da:	e7f0      	b.n	800a9be <_dtoa_r+0xb16>
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	9d00      	ldr	r5, [sp, #0]
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	f7ff f9d6 	bl	8009d96 <quorem>
 800a9ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	f805 9b01 	strb.w	r9, [r5], #1
 800a9f4:	1aea      	subs	r2, r5, r3
 800a9f6:	9b01      	ldr	r3, [sp, #4]
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	dd07      	ble.n	800aa0c <_dtoa_r+0xb64>
 800a9fc:	4651      	mov	r1, sl
 800a9fe:	2300      	movs	r3, #0
 800aa00:	220a      	movs	r2, #10
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f9a4 	bl	800ad50 <__multadd>
 800aa08:	4682      	mov	sl, r0
 800aa0a:	e7ea      	b.n	800a9e2 <_dtoa_r+0xb3a>
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfc8      	it	gt
 800aa12:	461d      	movgt	r5, r3
 800aa14:	9b00      	ldr	r3, [sp, #0]
 800aa16:	bfd8      	it	le
 800aa18:	2501      	movle	r5, #1
 800aa1a:	441d      	add	r5, r3
 800aa1c:	f04f 0800 	mov.w	r8, #0
 800aa20:	4651      	mov	r1, sl
 800aa22:	2201      	movs	r2, #1
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fb41 	bl	800b0ac <__lshift>
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4682      	mov	sl, r0
 800aa2e:	f000 fba9 	bl	800b184 <__mcmp>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	dc96      	bgt.n	800a964 <_dtoa_r+0xabc>
 800aa36:	d102      	bne.n	800aa3e <_dtoa_r+0xb96>
 800aa38:	f019 0f01 	tst.w	r9, #1
 800aa3c:	d192      	bne.n	800a964 <_dtoa_r+0xabc>
 800aa3e:	462b      	mov	r3, r5
 800aa40:	461d      	mov	r5, r3
 800aa42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa46:	2a30      	cmp	r2, #48	; 0x30
 800aa48:	d0fa      	beq.n	800aa40 <_dtoa_r+0xb98>
 800aa4a:	e6dd      	b.n	800a808 <_dtoa_r+0x960>
 800aa4c:	9a00      	ldr	r2, [sp, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d189      	bne.n	800a966 <_dtoa_r+0xabe>
 800aa52:	f10b 0b01 	add.w	fp, fp, #1
 800aa56:	2331      	movs	r3, #49	; 0x31
 800aa58:	e796      	b.n	800a988 <_dtoa_r+0xae0>
 800aa5a:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <_dtoa_r+0xbdc>)
 800aa5c:	f7ff ba99 	b.w	8009f92 <_dtoa_r+0xea>
 800aa60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f47f aa6d 	bne.w	8009f42 <_dtoa_r+0x9a>
 800aa68:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <_dtoa_r+0xbe0>)
 800aa6a:	f7ff ba92 	b.w	8009f92 <_dtoa_r+0xea>
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dcb5      	bgt.n	800a9e0 <_dtoa_r+0xb38>
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	f73f aeb1 	bgt.w	800a7de <_dtoa_r+0x936>
 800aa7c:	e7b0      	b.n	800a9e0 <_dtoa_r+0xb38>
 800aa7e:	bf00      	nop
 800aa80:	0800c549 	.word	0x0800c549
 800aa84:	0800c4a9 	.word	0x0800c4a9
 800aa88:	0800c4cd 	.word	0x0800c4cd

0800aa8c <_free_r>:
 800aa8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa8e:	2900      	cmp	r1, #0
 800aa90:	d044      	beq.n	800ab1c <_free_r+0x90>
 800aa92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa96:	9001      	str	r0, [sp, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa9e:	bfb8      	it	lt
 800aaa0:	18e4      	addlt	r4, r4, r3
 800aaa2:	f000 f8e7 	bl	800ac74 <__malloc_lock>
 800aaa6:	4a1e      	ldr	r2, [pc, #120]	; (800ab20 <_free_r+0x94>)
 800aaa8:	9801      	ldr	r0, [sp, #4]
 800aaaa:	6813      	ldr	r3, [r2, #0]
 800aaac:	b933      	cbnz	r3, 800aabc <_free_r+0x30>
 800aaae:	6063      	str	r3, [r4, #4]
 800aab0:	6014      	str	r4, [r2, #0]
 800aab2:	b003      	add	sp, #12
 800aab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aab8:	f000 b8e2 	b.w	800ac80 <__malloc_unlock>
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	d908      	bls.n	800aad2 <_free_r+0x46>
 800aac0:	6825      	ldr	r5, [r4, #0]
 800aac2:	1961      	adds	r1, r4, r5
 800aac4:	428b      	cmp	r3, r1
 800aac6:	bf01      	itttt	eq
 800aac8:	6819      	ldreq	r1, [r3, #0]
 800aaca:	685b      	ldreq	r3, [r3, #4]
 800aacc:	1949      	addeq	r1, r1, r5
 800aace:	6021      	streq	r1, [r4, #0]
 800aad0:	e7ed      	b.n	800aaae <_free_r+0x22>
 800aad2:	461a      	mov	r2, r3
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	b10b      	cbz	r3, 800aadc <_free_r+0x50>
 800aad8:	42a3      	cmp	r3, r4
 800aada:	d9fa      	bls.n	800aad2 <_free_r+0x46>
 800aadc:	6811      	ldr	r1, [r2, #0]
 800aade:	1855      	adds	r5, r2, r1
 800aae0:	42a5      	cmp	r5, r4
 800aae2:	d10b      	bne.n	800aafc <_free_r+0x70>
 800aae4:	6824      	ldr	r4, [r4, #0]
 800aae6:	4421      	add	r1, r4
 800aae8:	1854      	adds	r4, r2, r1
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	6011      	str	r1, [r2, #0]
 800aaee:	d1e0      	bne.n	800aab2 <_free_r+0x26>
 800aaf0:	681c      	ldr	r4, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	6053      	str	r3, [r2, #4]
 800aaf6:	440c      	add	r4, r1
 800aaf8:	6014      	str	r4, [r2, #0]
 800aafa:	e7da      	b.n	800aab2 <_free_r+0x26>
 800aafc:	d902      	bls.n	800ab04 <_free_r+0x78>
 800aafe:	230c      	movs	r3, #12
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	e7d6      	b.n	800aab2 <_free_r+0x26>
 800ab04:	6825      	ldr	r5, [r4, #0]
 800ab06:	1961      	adds	r1, r4, r5
 800ab08:	428b      	cmp	r3, r1
 800ab0a:	bf04      	itt	eq
 800ab0c:	6819      	ldreq	r1, [r3, #0]
 800ab0e:	685b      	ldreq	r3, [r3, #4]
 800ab10:	6063      	str	r3, [r4, #4]
 800ab12:	bf04      	itt	eq
 800ab14:	1949      	addeq	r1, r1, r5
 800ab16:	6021      	streq	r1, [r4, #0]
 800ab18:	6054      	str	r4, [r2, #4]
 800ab1a:	e7ca      	b.n	800aab2 <_free_r+0x26>
 800ab1c:	b003      	add	sp, #12
 800ab1e:	bd30      	pop	{r4, r5, pc}
 800ab20:	200060e8 	.word	0x200060e8

0800ab24 <malloc>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <malloc+0xc>)
 800ab26:	4601      	mov	r1, r0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f000 b823 	b.w	800ab74 <_malloc_r>
 800ab2e:	bf00      	nop
 800ab30:	20000120 	.word	0x20000120

0800ab34 <sbrk_aligned>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	4e0e      	ldr	r6, [pc, #56]	; (800ab70 <sbrk_aligned+0x3c>)
 800ab38:	460c      	mov	r4, r1
 800ab3a:	6831      	ldr	r1, [r6, #0]
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	b911      	cbnz	r1, 800ab46 <sbrk_aligned+0x12>
 800ab40:	f000 fe1c 	bl	800b77c <_sbrk_r>
 800ab44:	6030      	str	r0, [r6, #0]
 800ab46:	4621      	mov	r1, r4
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f000 fe17 	bl	800b77c <_sbrk_r>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	d00a      	beq.n	800ab68 <sbrk_aligned+0x34>
 800ab52:	1cc4      	adds	r4, r0, #3
 800ab54:	f024 0403 	bic.w	r4, r4, #3
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d007      	beq.n	800ab6c <sbrk_aligned+0x38>
 800ab5c:	1a21      	subs	r1, r4, r0
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 fe0c 	bl	800b77c <_sbrk_r>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d101      	bne.n	800ab6c <sbrk_aligned+0x38>
 800ab68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	200060ec 	.word	0x200060ec

0800ab74 <_malloc_r>:
 800ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab78:	1ccd      	adds	r5, r1, #3
 800ab7a:	f025 0503 	bic.w	r5, r5, #3
 800ab7e:	3508      	adds	r5, #8
 800ab80:	2d0c      	cmp	r5, #12
 800ab82:	bf38      	it	cc
 800ab84:	250c      	movcc	r5, #12
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	4607      	mov	r7, r0
 800ab8a:	db01      	blt.n	800ab90 <_malloc_r+0x1c>
 800ab8c:	42a9      	cmp	r1, r5
 800ab8e:	d905      	bls.n	800ab9c <_malloc_r+0x28>
 800ab90:	230c      	movs	r3, #12
 800ab92:	603b      	str	r3, [r7, #0]
 800ab94:	2600      	movs	r6, #0
 800ab96:	4630      	mov	r0, r6
 800ab98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac70 <_malloc_r+0xfc>
 800aba0:	f000 f868 	bl	800ac74 <__malloc_lock>
 800aba4:	f8d8 3000 	ldr.w	r3, [r8]
 800aba8:	461c      	mov	r4, r3
 800abaa:	bb5c      	cbnz	r4, 800ac04 <_malloc_r+0x90>
 800abac:	4629      	mov	r1, r5
 800abae:	4638      	mov	r0, r7
 800abb0:	f7ff ffc0 	bl	800ab34 <sbrk_aligned>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	4604      	mov	r4, r0
 800abb8:	d155      	bne.n	800ac66 <_malloc_r+0xf2>
 800abba:	f8d8 4000 	ldr.w	r4, [r8]
 800abbe:	4626      	mov	r6, r4
 800abc0:	2e00      	cmp	r6, #0
 800abc2:	d145      	bne.n	800ac50 <_malloc_r+0xdc>
 800abc4:	2c00      	cmp	r4, #0
 800abc6:	d048      	beq.n	800ac5a <_malloc_r+0xe6>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	4631      	mov	r1, r6
 800abcc:	4638      	mov	r0, r7
 800abce:	eb04 0903 	add.w	r9, r4, r3
 800abd2:	f000 fdd3 	bl	800b77c <_sbrk_r>
 800abd6:	4581      	cmp	r9, r0
 800abd8:	d13f      	bne.n	800ac5a <_malloc_r+0xe6>
 800abda:	6821      	ldr	r1, [r4, #0]
 800abdc:	1a6d      	subs	r5, r5, r1
 800abde:	4629      	mov	r1, r5
 800abe0:	4638      	mov	r0, r7
 800abe2:	f7ff ffa7 	bl	800ab34 <sbrk_aligned>
 800abe6:	3001      	adds	r0, #1
 800abe8:	d037      	beq.n	800ac5a <_malloc_r+0xe6>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	442b      	add	r3, r5
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	f8d8 3000 	ldr.w	r3, [r8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d038      	beq.n	800ac6a <_malloc_r+0xf6>
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	42a2      	cmp	r2, r4
 800abfc:	d12b      	bne.n	800ac56 <_malloc_r+0xe2>
 800abfe:	2200      	movs	r2, #0
 800ac00:	605a      	str	r2, [r3, #4]
 800ac02:	e00f      	b.n	800ac24 <_malloc_r+0xb0>
 800ac04:	6822      	ldr	r2, [r4, #0]
 800ac06:	1b52      	subs	r2, r2, r5
 800ac08:	d41f      	bmi.n	800ac4a <_malloc_r+0xd6>
 800ac0a:	2a0b      	cmp	r2, #11
 800ac0c:	d917      	bls.n	800ac3e <_malloc_r+0xca>
 800ac0e:	1961      	adds	r1, r4, r5
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	6025      	str	r5, [r4, #0]
 800ac14:	bf18      	it	ne
 800ac16:	6059      	strne	r1, [r3, #4]
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	bf08      	it	eq
 800ac1c:	f8c8 1000 	streq.w	r1, [r8]
 800ac20:	5162      	str	r2, [r4, r5]
 800ac22:	604b      	str	r3, [r1, #4]
 800ac24:	4638      	mov	r0, r7
 800ac26:	f104 060b 	add.w	r6, r4, #11
 800ac2a:	f000 f829 	bl	800ac80 <__malloc_unlock>
 800ac2e:	f026 0607 	bic.w	r6, r6, #7
 800ac32:	1d23      	adds	r3, r4, #4
 800ac34:	1af2      	subs	r2, r6, r3
 800ac36:	d0ae      	beq.n	800ab96 <_malloc_r+0x22>
 800ac38:	1b9b      	subs	r3, r3, r6
 800ac3a:	50a3      	str	r3, [r4, r2]
 800ac3c:	e7ab      	b.n	800ab96 <_malloc_r+0x22>
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	6862      	ldr	r2, [r4, #4]
 800ac42:	d1dd      	bne.n	800ac00 <_malloc_r+0x8c>
 800ac44:	f8c8 2000 	str.w	r2, [r8]
 800ac48:	e7ec      	b.n	800ac24 <_malloc_r+0xb0>
 800ac4a:	4623      	mov	r3, r4
 800ac4c:	6864      	ldr	r4, [r4, #4]
 800ac4e:	e7ac      	b.n	800abaa <_malloc_r+0x36>
 800ac50:	4634      	mov	r4, r6
 800ac52:	6876      	ldr	r6, [r6, #4]
 800ac54:	e7b4      	b.n	800abc0 <_malloc_r+0x4c>
 800ac56:	4613      	mov	r3, r2
 800ac58:	e7cc      	b.n	800abf4 <_malloc_r+0x80>
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	603b      	str	r3, [r7, #0]
 800ac5e:	4638      	mov	r0, r7
 800ac60:	f000 f80e 	bl	800ac80 <__malloc_unlock>
 800ac64:	e797      	b.n	800ab96 <_malloc_r+0x22>
 800ac66:	6025      	str	r5, [r4, #0]
 800ac68:	e7dc      	b.n	800ac24 <_malloc_r+0xb0>
 800ac6a:	605b      	str	r3, [r3, #4]
 800ac6c:	deff      	udf	#255	; 0xff
 800ac6e:	bf00      	nop
 800ac70:	200060e8 	.word	0x200060e8

0800ac74 <__malloc_lock>:
 800ac74:	4801      	ldr	r0, [pc, #4]	; (800ac7c <__malloc_lock+0x8>)
 800ac76:	f7ff b87e 	b.w	8009d76 <__retarget_lock_acquire_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	200060e4 	.word	0x200060e4

0800ac80 <__malloc_unlock>:
 800ac80:	4801      	ldr	r0, [pc, #4]	; (800ac88 <__malloc_unlock+0x8>)
 800ac82:	f7ff b879 	b.w	8009d78 <__retarget_lock_release_recursive>
 800ac86:	bf00      	nop
 800ac88:	200060e4 	.word	0x200060e4

0800ac8c <_Balloc>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	69c6      	ldr	r6, [r0, #28]
 800ac90:	4604      	mov	r4, r0
 800ac92:	460d      	mov	r5, r1
 800ac94:	b976      	cbnz	r6, 800acb4 <_Balloc+0x28>
 800ac96:	2010      	movs	r0, #16
 800ac98:	f7ff ff44 	bl	800ab24 <malloc>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	61e0      	str	r0, [r4, #28]
 800aca0:	b920      	cbnz	r0, 800acac <_Balloc+0x20>
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <_Balloc+0x78>)
 800aca4:	4818      	ldr	r0, [pc, #96]	; (800ad08 <_Balloc+0x7c>)
 800aca6:	216b      	movs	r1, #107	; 0x6b
 800aca8:	f000 fd78 	bl	800b79c <__assert_func>
 800acac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb0:	6006      	str	r6, [r0, #0]
 800acb2:	60c6      	str	r6, [r0, #12]
 800acb4:	69e6      	ldr	r6, [r4, #28]
 800acb6:	68f3      	ldr	r3, [r6, #12]
 800acb8:	b183      	cbz	r3, 800acdc <_Balloc+0x50>
 800acba:	69e3      	ldr	r3, [r4, #28]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acc2:	b9b8      	cbnz	r0, 800acf4 <_Balloc+0x68>
 800acc4:	2101      	movs	r1, #1
 800acc6:	fa01 f605 	lsl.w	r6, r1, r5
 800acca:	1d72      	adds	r2, r6, #5
 800accc:	0092      	lsls	r2, r2, #2
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 fd82 	bl	800b7d8 <_calloc_r>
 800acd4:	b160      	cbz	r0, 800acf0 <_Balloc+0x64>
 800acd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acda:	e00e      	b.n	800acfa <_Balloc+0x6e>
 800acdc:	2221      	movs	r2, #33	; 0x21
 800acde:	2104      	movs	r1, #4
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fd79 	bl	800b7d8 <_calloc_r>
 800ace6:	69e3      	ldr	r3, [r4, #28]
 800ace8:	60f0      	str	r0, [r6, #12]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e4      	bne.n	800acba <_Balloc+0x2e>
 800acf0:	2000      	movs	r0, #0
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	6802      	ldr	r2, [r0, #0]
 800acf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acfa:	2300      	movs	r3, #0
 800acfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad00:	e7f7      	b.n	800acf2 <_Balloc+0x66>
 800ad02:	bf00      	nop
 800ad04:	0800c4da 	.word	0x0800c4da
 800ad08:	0800c55a 	.word	0x0800c55a

0800ad0c <_Bfree>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	69c6      	ldr	r6, [r0, #28]
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b976      	cbnz	r6, 800ad34 <_Bfree+0x28>
 800ad16:	2010      	movs	r0, #16
 800ad18:	f7ff ff04 	bl	800ab24 <malloc>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	61e8      	str	r0, [r5, #28]
 800ad20:	b920      	cbnz	r0, 800ad2c <_Bfree+0x20>
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <_Bfree+0x3c>)
 800ad24:	4809      	ldr	r0, [pc, #36]	; (800ad4c <_Bfree+0x40>)
 800ad26:	218f      	movs	r1, #143	; 0x8f
 800ad28:	f000 fd38 	bl	800b79c <__assert_func>
 800ad2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad30:	6006      	str	r6, [r0, #0]
 800ad32:	60c6      	str	r6, [r0, #12]
 800ad34:	b13c      	cbz	r4, 800ad46 <_Bfree+0x3a>
 800ad36:	69eb      	ldr	r3, [r5, #28]
 800ad38:	6862      	ldr	r2, [r4, #4]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad40:	6021      	str	r1, [r4, #0]
 800ad42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	0800c4da 	.word	0x0800c4da
 800ad4c:	0800c55a 	.word	0x0800c55a

0800ad50 <__multadd>:
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	690d      	ldr	r5, [r1, #16]
 800ad56:	4607      	mov	r7, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	461e      	mov	r6, r3
 800ad5c:	f101 0c14 	add.w	ip, r1, #20
 800ad60:	2000      	movs	r0, #0
 800ad62:	f8dc 3000 	ldr.w	r3, [ip]
 800ad66:	b299      	uxth	r1, r3
 800ad68:	fb02 6101 	mla	r1, r2, r1, r6
 800ad6c:	0c1e      	lsrs	r6, r3, #16
 800ad6e:	0c0b      	lsrs	r3, r1, #16
 800ad70:	fb02 3306 	mla	r3, r2, r6, r3
 800ad74:	b289      	uxth	r1, r1
 800ad76:	3001      	adds	r0, #1
 800ad78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad7c:	4285      	cmp	r5, r0
 800ad7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad86:	dcec      	bgt.n	800ad62 <__multadd+0x12>
 800ad88:	b30e      	cbz	r6, 800adce <__multadd+0x7e>
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	dc19      	bgt.n	800adc4 <__multadd+0x74>
 800ad90:	6861      	ldr	r1, [r4, #4]
 800ad92:	4638      	mov	r0, r7
 800ad94:	3101      	adds	r1, #1
 800ad96:	f7ff ff79 	bl	800ac8c <_Balloc>
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <__multadd+0x5a>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <__multadd+0x84>)
 800ada2:	480d      	ldr	r0, [pc, #52]	; (800add8 <__multadd+0x88>)
 800ada4:	21ba      	movs	r1, #186	; 0xba
 800ada6:	f000 fcf9 	bl	800b79c <__assert_func>
 800adaa:	6922      	ldr	r2, [r4, #16]
 800adac:	3202      	adds	r2, #2
 800adae:	f104 010c 	add.w	r1, r4, #12
 800adb2:	0092      	lsls	r2, r2, #2
 800adb4:	300c      	adds	r0, #12
 800adb6:	f7fe ffe0 	bl	8009d7a <memcpy>
 800adba:	4621      	mov	r1, r4
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff ffa5 	bl	800ad0c <_Bfree>
 800adc2:	4644      	mov	r4, r8
 800adc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adc8:	3501      	adds	r5, #1
 800adca:	615e      	str	r6, [r3, #20]
 800adcc:	6125      	str	r5, [r4, #16]
 800adce:	4620      	mov	r0, r4
 800add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add4:	0800c549 	.word	0x0800c549
 800add8:	0800c55a 	.word	0x0800c55a

0800addc <__hi0bits>:
 800addc:	0c03      	lsrs	r3, r0, #16
 800adde:	041b      	lsls	r3, r3, #16
 800ade0:	b9d3      	cbnz	r3, 800ae18 <__hi0bits+0x3c>
 800ade2:	0400      	lsls	r0, r0, #16
 800ade4:	2310      	movs	r3, #16
 800ade6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adea:	bf04      	itt	eq
 800adec:	0200      	lsleq	r0, r0, #8
 800adee:	3308      	addeq	r3, #8
 800adf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800adf4:	bf04      	itt	eq
 800adf6:	0100      	lsleq	r0, r0, #4
 800adf8:	3304      	addeq	r3, #4
 800adfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adfe:	bf04      	itt	eq
 800ae00:	0080      	lsleq	r0, r0, #2
 800ae02:	3302      	addeq	r3, #2
 800ae04:	2800      	cmp	r0, #0
 800ae06:	db05      	blt.n	800ae14 <__hi0bits+0x38>
 800ae08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae0c:	f103 0301 	add.w	r3, r3, #1
 800ae10:	bf08      	it	eq
 800ae12:	2320      	moveq	r3, #32
 800ae14:	4618      	mov	r0, r3
 800ae16:	4770      	bx	lr
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e7e4      	b.n	800ade6 <__hi0bits+0xa>

0800ae1c <__lo0bits>:
 800ae1c:	6803      	ldr	r3, [r0, #0]
 800ae1e:	f013 0207 	ands.w	r2, r3, #7
 800ae22:	d00c      	beq.n	800ae3e <__lo0bits+0x22>
 800ae24:	07d9      	lsls	r1, r3, #31
 800ae26:	d422      	bmi.n	800ae6e <__lo0bits+0x52>
 800ae28:	079a      	lsls	r2, r3, #30
 800ae2a:	bf49      	itett	mi
 800ae2c:	085b      	lsrmi	r3, r3, #1
 800ae2e:	089b      	lsrpl	r3, r3, #2
 800ae30:	6003      	strmi	r3, [r0, #0]
 800ae32:	2201      	movmi	r2, #1
 800ae34:	bf5c      	itt	pl
 800ae36:	6003      	strpl	r3, [r0, #0]
 800ae38:	2202      	movpl	r2, #2
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4770      	bx	lr
 800ae3e:	b299      	uxth	r1, r3
 800ae40:	b909      	cbnz	r1, 800ae46 <__lo0bits+0x2a>
 800ae42:	0c1b      	lsrs	r3, r3, #16
 800ae44:	2210      	movs	r2, #16
 800ae46:	b2d9      	uxtb	r1, r3
 800ae48:	b909      	cbnz	r1, 800ae4e <__lo0bits+0x32>
 800ae4a:	3208      	adds	r2, #8
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	0719      	lsls	r1, r3, #28
 800ae50:	bf04      	itt	eq
 800ae52:	091b      	lsreq	r3, r3, #4
 800ae54:	3204      	addeq	r2, #4
 800ae56:	0799      	lsls	r1, r3, #30
 800ae58:	bf04      	itt	eq
 800ae5a:	089b      	lsreq	r3, r3, #2
 800ae5c:	3202      	addeq	r2, #2
 800ae5e:	07d9      	lsls	r1, r3, #31
 800ae60:	d403      	bmi.n	800ae6a <__lo0bits+0x4e>
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	f102 0201 	add.w	r2, r2, #1
 800ae68:	d003      	beq.n	800ae72 <__lo0bits+0x56>
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	e7e5      	b.n	800ae3a <__lo0bits+0x1e>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	e7e3      	b.n	800ae3a <__lo0bits+0x1e>
 800ae72:	2220      	movs	r2, #32
 800ae74:	e7e1      	b.n	800ae3a <__lo0bits+0x1e>
	...

0800ae78 <__i2b>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	f7ff ff05 	bl	800ac8c <_Balloc>
 800ae82:	4602      	mov	r2, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <__i2b+0x1a>
 800ae86:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <__i2b+0x24>)
 800ae88:	4805      	ldr	r0, [pc, #20]	; (800aea0 <__i2b+0x28>)
 800ae8a:	f240 1145 	movw	r1, #325	; 0x145
 800ae8e:	f000 fc85 	bl	800b79c <__assert_func>
 800ae92:	2301      	movs	r3, #1
 800ae94:	6144      	str	r4, [r0, #20]
 800ae96:	6103      	str	r3, [r0, #16]
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800c549 	.word	0x0800c549
 800aea0:	0800c55a 	.word	0x0800c55a

0800aea4 <__multiply>:
 800aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	4691      	mov	r9, r2
 800aeaa:	690a      	ldr	r2, [r1, #16]
 800aeac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	bfb8      	it	lt
 800aeb4:	460b      	movlt	r3, r1
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	bfbc      	itt	lt
 800aeba:	464c      	movlt	r4, r9
 800aebc:	4699      	movlt	r9, r3
 800aebe:	6927      	ldr	r7, [r4, #16]
 800aec0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	6861      	ldr	r1, [r4, #4]
 800aec8:	eb07 060a 	add.w	r6, r7, sl
 800aecc:	42b3      	cmp	r3, r6
 800aece:	b085      	sub	sp, #20
 800aed0:	bfb8      	it	lt
 800aed2:	3101      	addlt	r1, #1
 800aed4:	f7ff feda 	bl	800ac8c <_Balloc>
 800aed8:	b930      	cbnz	r0, 800aee8 <__multiply+0x44>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b44      	ldr	r3, [pc, #272]	; (800aff0 <__multiply+0x14c>)
 800aede:	4845      	ldr	r0, [pc, #276]	; (800aff4 <__multiply+0x150>)
 800aee0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aee4:	f000 fc5a 	bl	800b79c <__assert_func>
 800aee8:	f100 0514 	add.w	r5, r0, #20
 800aeec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aef0:	462b      	mov	r3, r5
 800aef2:	2200      	movs	r2, #0
 800aef4:	4543      	cmp	r3, r8
 800aef6:	d321      	bcc.n	800af3c <__multiply+0x98>
 800aef8:	f104 0314 	add.w	r3, r4, #20
 800aefc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af00:	f109 0314 	add.w	r3, r9, #20
 800af04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af08:	9202      	str	r2, [sp, #8]
 800af0a:	1b3a      	subs	r2, r7, r4
 800af0c:	3a15      	subs	r2, #21
 800af0e:	f022 0203 	bic.w	r2, r2, #3
 800af12:	3204      	adds	r2, #4
 800af14:	f104 0115 	add.w	r1, r4, #21
 800af18:	428f      	cmp	r7, r1
 800af1a:	bf38      	it	cc
 800af1c:	2204      	movcc	r2, #4
 800af1e:	9201      	str	r2, [sp, #4]
 800af20:	9a02      	ldr	r2, [sp, #8]
 800af22:	9303      	str	r3, [sp, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d80c      	bhi.n	800af42 <__multiply+0x9e>
 800af28:	2e00      	cmp	r6, #0
 800af2a:	dd03      	ble.n	800af34 <__multiply+0x90>
 800af2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05b      	beq.n	800afec <__multiply+0x148>
 800af34:	6106      	str	r6, [r0, #16]
 800af36:	b005      	add	sp, #20
 800af38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3c:	f843 2b04 	str.w	r2, [r3], #4
 800af40:	e7d8      	b.n	800aef4 <__multiply+0x50>
 800af42:	f8b3 a000 	ldrh.w	sl, [r3]
 800af46:	f1ba 0f00 	cmp.w	sl, #0
 800af4a:	d024      	beq.n	800af96 <__multiply+0xf2>
 800af4c:	f104 0e14 	add.w	lr, r4, #20
 800af50:	46a9      	mov	r9, r5
 800af52:	f04f 0c00 	mov.w	ip, #0
 800af56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af5a:	f8d9 1000 	ldr.w	r1, [r9]
 800af5e:	fa1f fb82 	uxth.w	fp, r2
 800af62:	b289      	uxth	r1, r1
 800af64:	fb0a 110b 	mla	r1, sl, fp, r1
 800af68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af6c:	f8d9 2000 	ldr.w	r2, [r9]
 800af70:	4461      	add	r1, ip
 800af72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af76:	fb0a c20b 	mla	r2, sl, fp, ip
 800af7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af7e:	b289      	uxth	r1, r1
 800af80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af84:	4577      	cmp	r7, lr
 800af86:	f849 1b04 	str.w	r1, [r9], #4
 800af8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af8e:	d8e2      	bhi.n	800af56 <__multiply+0xb2>
 800af90:	9a01      	ldr	r2, [sp, #4]
 800af92:	f845 c002 	str.w	ip, [r5, r2]
 800af96:	9a03      	ldr	r2, [sp, #12]
 800af98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af9c:	3304      	adds	r3, #4
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	d021      	beq.n	800afe8 <__multiply+0x144>
 800afa4:	6829      	ldr	r1, [r5, #0]
 800afa6:	f104 0c14 	add.w	ip, r4, #20
 800afaa:	46ae      	mov	lr, r5
 800afac:	f04f 0a00 	mov.w	sl, #0
 800afb0:	f8bc b000 	ldrh.w	fp, [ip]
 800afb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afb8:	fb09 220b 	mla	r2, r9, fp, r2
 800afbc:	4452      	add	r2, sl
 800afbe:	b289      	uxth	r1, r1
 800afc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afc4:	f84e 1b04 	str.w	r1, [lr], #4
 800afc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afd0:	f8be 1000 	ldrh.w	r1, [lr]
 800afd4:	fb09 110a 	mla	r1, r9, sl, r1
 800afd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800afdc:	4567      	cmp	r7, ip
 800afde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afe2:	d8e5      	bhi.n	800afb0 <__multiply+0x10c>
 800afe4:	9a01      	ldr	r2, [sp, #4]
 800afe6:	50a9      	str	r1, [r5, r2]
 800afe8:	3504      	adds	r5, #4
 800afea:	e799      	b.n	800af20 <__multiply+0x7c>
 800afec:	3e01      	subs	r6, #1
 800afee:	e79b      	b.n	800af28 <__multiply+0x84>
 800aff0:	0800c549 	.word	0x0800c549
 800aff4:	0800c55a 	.word	0x0800c55a

0800aff8 <__pow5mult>:
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	4615      	mov	r5, r2
 800affe:	f012 0203 	ands.w	r2, r2, #3
 800b002:	4606      	mov	r6, r0
 800b004:	460f      	mov	r7, r1
 800b006:	d007      	beq.n	800b018 <__pow5mult+0x20>
 800b008:	4c25      	ldr	r4, [pc, #148]	; (800b0a0 <__pow5mult+0xa8>)
 800b00a:	3a01      	subs	r2, #1
 800b00c:	2300      	movs	r3, #0
 800b00e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b012:	f7ff fe9d 	bl	800ad50 <__multadd>
 800b016:	4607      	mov	r7, r0
 800b018:	10ad      	asrs	r5, r5, #2
 800b01a:	d03d      	beq.n	800b098 <__pow5mult+0xa0>
 800b01c:	69f4      	ldr	r4, [r6, #28]
 800b01e:	b97c      	cbnz	r4, 800b040 <__pow5mult+0x48>
 800b020:	2010      	movs	r0, #16
 800b022:	f7ff fd7f 	bl	800ab24 <malloc>
 800b026:	4602      	mov	r2, r0
 800b028:	61f0      	str	r0, [r6, #28]
 800b02a:	b928      	cbnz	r0, 800b038 <__pow5mult+0x40>
 800b02c:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <__pow5mult+0xac>)
 800b02e:	481e      	ldr	r0, [pc, #120]	; (800b0a8 <__pow5mult+0xb0>)
 800b030:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b034:	f000 fbb2 	bl	800b79c <__assert_func>
 800b038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b03c:	6004      	str	r4, [r0, #0]
 800b03e:	60c4      	str	r4, [r0, #12]
 800b040:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b048:	b94c      	cbnz	r4, 800b05e <__pow5mult+0x66>
 800b04a:	f240 2171 	movw	r1, #625	; 0x271
 800b04e:	4630      	mov	r0, r6
 800b050:	f7ff ff12 	bl	800ae78 <__i2b>
 800b054:	2300      	movs	r3, #0
 800b056:	f8c8 0008 	str.w	r0, [r8, #8]
 800b05a:	4604      	mov	r4, r0
 800b05c:	6003      	str	r3, [r0, #0]
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	07eb      	lsls	r3, r5, #31
 800b064:	d50a      	bpl.n	800b07c <__pow5mult+0x84>
 800b066:	4639      	mov	r1, r7
 800b068:	4622      	mov	r2, r4
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff ff1a 	bl	800aea4 <__multiply>
 800b070:	4639      	mov	r1, r7
 800b072:	4680      	mov	r8, r0
 800b074:	4630      	mov	r0, r6
 800b076:	f7ff fe49 	bl	800ad0c <_Bfree>
 800b07a:	4647      	mov	r7, r8
 800b07c:	106d      	asrs	r5, r5, #1
 800b07e:	d00b      	beq.n	800b098 <__pow5mult+0xa0>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	b938      	cbnz	r0, 800b094 <__pow5mult+0x9c>
 800b084:	4622      	mov	r2, r4
 800b086:	4621      	mov	r1, r4
 800b088:	4630      	mov	r0, r6
 800b08a:	f7ff ff0b 	bl	800aea4 <__multiply>
 800b08e:	6020      	str	r0, [r4, #0]
 800b090:	f8c0 9000 	str.w	r9, [r0]
 800b094:	4604      	mov	r4, r0
 800b096:	e7e4      	b.n	800b062 <__pow5mult+0x6a>
 800b098:	4638      	mov	r0, r7
 800b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800c6a8 	.word	0x0800c6a8
 800b0a4:	0800c4da 	.word	0x0800c4da
 800b0a8:	0800c55a 	.word	0x0800c55a

0800b0ac <__lshift>:
 800b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	6849      	ldr	r1, [r1, #4]
 800b0b4:	6923      	ldr	r3, [r4, #16]
 800b0b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	4607      	mov	r7, r0
 800b0be:	4691      	mov	r9, r2
 800b0c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0c4:	f108 0601 	add.w	r6, r8, #1
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	db0b      	blt.n	800b0e4 <__lshift+0x38>
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fddd 	bl	800ac8c <_Balloc>
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	b948      	cbnz	r0, 800b0ea <__lshift+0x3e>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	4b28      	ldr	r3, [pc, #160]	; (800b17c <__lshift+0xd0>)
 800b0da:	4829      	ldr	r0, [pc, #164]	; (800b180 <__lshift+0xd4>)
 800b0dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b0e0:	f000 fb5c 	bl	800b79c <__assert_func>
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	e7ee      	b.n	800b0c8 <__lshift+0x1c>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f100 0114 	add.w	r1, r0, #20
 800b0f0:	f100 0210 	add.w	r2, r0, #16
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4553      	cmp	r3, sl
 800b0f8:	db33      	blt.n	800b162 <__lshift+0xb6>
 800b0fa:	6920      	ldr	r0, [r4, #16]
 800b0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b100:	f104 0314 	add.w	r3, r4, #20
 800b104:	f019 091f 	ands.w	r9, r9, #31
 800b108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b10c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b110:	d02b      	beq.n	800b16a <__lshift+0xbe>
 800b112:	f1c9 0e20 	rsb	lr, r9, #32
 800b116:	468a      	mov	sl, r1
 800b118:	2200      	movs	r2, #0
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	fa00 f009 	lsl.w	r0, r0, r9
 800b120:	4310      	orrs	r0, r2
 800b122:	f84a 0b04 	str.w	r0, [sl], #4
 800b126:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12a:	459c      	cmp	ip, r3
 800b12c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b130:	d8f3      	bhi.n	800b11a <__lshift+0x6e>
 800b132:	ebac 0304 	sub.w	r3, ip, r4
 800b136:	3b15      	subs	r3, #21
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	3304      	adds	r3, #4
 800b13e:	f104 0015 	add.w	r0, r4, #21
 800b142:	4584      	cmp	ip, r0
 800b144:	bf38      	it	cc
 800b146:	2304      	movcc	r3, #4
 800b148:	50ca      	str	r2, [r1, r3]
 800b14a:	b10a      	cbz	r2, 800b150 <__lshift+0xa4>
 800b14c:	f108 0602 	add.w	r6, r8, #2
 800b150:	3e01      	subs	r6, #1
 800b152:	4638      	mov	r0, r7
 800b154:	612e      	str	r6, [r5, #16]
 800b156:	4621      	mov	r1, r4
 800b158:	f7ff fdd8 	bl	800ad0c <_Bfree>
 800b15c:	4628      	mov	r0, r5
 800b15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b162:	f842 0f04 	str.w	r0, [r2, #4]!
 800b166:	3301      	adds	r3, #1
 800b168:	e7c5      	b.n	800b0f6 <__lshift+0x4a>
 800b16a:	3904      	subs	r1, #4
 800b16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b170:	f841 2f04 	str.w	r2, [r1, #4]!
 800b174:	459c      	cmp	ip, r3
 800b176:	d8f9      	bhi.n	800b16c <__lshift+0xc0>
 800b178:	e7ea      	b.n	800b150 <__lshift+0xa4>
 800b17a:	bf00      	nop
 800b17c:	0800c549 	.word	0x0800c549
 800b180:	0800c55a 	.word	0x0800c55a

0800b184 <__mcmp>:
 800b184:	b530      	push	{r4, r5, lr}
 800b186:	6902      	ldr	r2, [r0, #16]
 800b188:	690c      	ldr	r4, [r1, #16]
 800b18a:	1b12      	subs	r2, r2, r4
 800b18c:	d10e      	bne.n	800b1ac <__mcmp+0x28>
 800b18e:	f100 0314 	add.w	r3, r0, #20
 800b192:	3114      	adds	r1, #20
 800b194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b19c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1a4:	42a5      	cmp	r5, r4
 800b1a6:	d003      	beq.n	800b1b0 <__mcmp+0x2c>
 800b1a8:	d305      	bcc.n	800b1b6 <__mcmp+0x32>
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	bd30      	pop	{r4, r5, pc}
 800b1b0:	4283      	cmp	r3, r0
 800b1b2:	d3f3      	bcc.n	800b19c <__mcmp+0x18>
 800b1b4:	e7fa      	b.n	800b1ac <__mcmp+0x28>
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1ba:	e7f7      	b.n	800b1ac <__mcmp+0x28>

0800b1bc <__mdiff>:
 800b1bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	f7ff ffdb 	bl	800b184 <__mcmp>
 800b1ce:	1e05      	subs	r5, r0, #0
 800b1d0:	d110      	bne.n	800b1f4 <__mdiff+0x38>
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f7ff fd59 	bl	800ac8c <_Balloc>
 800b1da:	b930      	cbnz	r0, 800b1ea <__mdiff+0x2e>
 800b1dc:	4b3a      	ldr	r3, [pc, #232]	; (800b2c8 <__mdiff+0x10c>)
 800b1de:	4602      	mov	r2, r0
 800b1e0:	f240 2137 	movw	r1, #567	; 0x237
 800b1e4:	4839      	ldr	r0, [pc, #228]	; (800b2cc <__mdiff+0x110>)
 800b1e6:	f000 fad9 	bl	800b79c <__assert_func>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f4:	bfa4      	itt	ge
 800b1f6:	4643      	movge	r3, r8
 800b1f8:	46a0      	movge	r8, r4
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b200:	bfa6      	itte	ge
 800b202:	461c      	movge	r4, r3
 800b204:	2500      	movge	r5, #0
 800b206:	2501      	movlt	r5, #1
 800b208:	f7ff fd40 	bl	800ac8c <_Balloc>
 800b20c:	b920      	cbnz	r0, 800b218 <__mdiff+0x5c>
 800b20e:	4b2e      	ldr	r3, [pc, #184]	; (800b2c8 <__mdiff+0x10c>)
 800b210:	4602      	mov	r2, r0
 800b212:	f240 2145 	movw	r1, #581	; 0x245
 800b216:	e7e5      	b.n	800b1e4 <__mdiff+0x28>
 800b218:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b21c:	6926      	ldr	r6, [r4, #16]
 800b21e:	60c5      	str	r5, [r0, #12]
 800b220:	f104 0914 	add.w	r9, r4, #20
 800b224:	f108 0514 	add.w	r5, r8, #20
 800b228:	f100 0e14 	add.w	lr, r0, #20
 800b22c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b234:	f108 0210 	add.w	r2, r8, #16
 800b238:	46f2      	mov	sl, lr
 800b23a:	2100      	movs	r1, #0
 800b23c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b240:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b244:	fa11 f88b 	uxtah	r8, r1, fp
 800b248:	b299      	uxth	r1, r3
 800b24a:	0c1b      	lsrs	r3, r3, #16
 800b24c:	eba8 0801 	sub.w	r8, r8, r1
 800b250:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b254:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b258:	fa1f f888 	uxth.w	r8, r8
 800b25c:	1419      	asrs	r1, r3, #16
 800b25e:	454e      	cmp	r6, r9
 800b260:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b264:	f84a 3b04 	str.w	r3, [sl], #4
 800b268:	d8e8      	bhi.n	800b23c <__mdiff+0x80>
 800b26a:	1b33      	subs	r3, r6, r4
 800b26c:	3b15      	subs	r3, #21
 800b26e:	f023 0303 	bic.w	r3, r3, #3
 800b272:	3304      	adds	r3, #4
 800b274:	3415      	adds	r4, #21
 800b276:	42a6      	cmp	r6, r4
 800b278:	bf38      	it	cc
 800b27a:	2304      	movcc	r3, #4
 800b27c:	441d      	add	r5, r3
 800b27e:	4473      	add	r3, lr
 800b280:	469e      	mov	lr, r3
 800b282:	462e      	mov	r6, r5
 800b284:	4566      	cmp	r6, ip
 800b286:	d30e      	bcc.n	800b2a6 <__mdiff+0xea>
 800b288:	f10c 0203 	add.w	r2, ip, #3
 800b28c:	1b52      	subs	r2, r2, r5
 800b28e:	f022 0203 	bic.w	r2, r2, #3
 800b292:	3d03      	subs	r5, #3
 800b294:	45ac      	cmp	ip, r5
 800b296:	bf38      	it	cc
 800b298:	2200      	movcc	r2, #0
 800b29a:	4413      	add	r3, r2
 800b29c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b2a0:	b17a      	cbz	r2, 800b2c2 <__mdiff+0x106>
 800b2a2:	6107      	str	r7, [r0, #16]
 800b2a4:	e7a4      	b.n	800b1f0 <__mdiff+0x34>
 800b2a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2aa:	fa11 f288 	uxtah	r2, r1, r8
 800b2ae:	1414      	asrs	r4, r2, #16
 800b2b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2b4:	b292      	uxth	r2, r2
 800b2b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2ba:	f84e 2b04 	str.w	r2, [lr], #4
 800b2be:	1421      	asrs	r1, r4, #16
 800b2c0:	e7e0      	b.n	800b284 <__mdiff+0xc8>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	e7ea      	b.n	800b29c <__mdiff+0xe0>
 800b2c6:	bf00      	nop
 800b2c8:	0800c549 	.word	0x0800c549
 800b2cc:	0800c55a 	.word	0x0800c55a

0800b2d0 <__d2b>:
 800b2d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	ec59 8b10 	vmov	r8, r9, d0
 800b2dc:	4616      	mov	r6, r2
 800b2de:	f7ff fcd5 	bl	800ac8c <_Balloc>
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	b930      	cbnz	r0, 800b2f4 <__d2b+0x24>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4b24      	ldr	r3, [pc, #144]	; (800b37c <__d2b+0xac>)
 800b2ea:	4825      	ldr	r0, [pc, #148]	; (800b380 <__d2b+0xb0>)
 800b2ec:	f240 310f 	movw	r1, #783	; 0x30f
 800b2f0:	f000 fa54 	bl	800b79c <__assert_func>
 800b2f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2fc:	bb2d      	cbnz	r5, 800b34a <__d2b+0x7a>
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	f1b8 0300 	subs.w	r3, r8, #0
 800b304:	d026      	beq.n	800b354 <__d2b+0x84>
 800b306:	4668      	mov	r0, sp
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	f7ff fd87 	bl	800ae1c <__lo0bits>
 800b30e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b312:	b1e8      	cbz	r0, 800b350 <__d2b+0x80>
 800b314:	f1c0 0320 	rsb	r3, r0, #32
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	430b      	orrs	r3, r1
 800b31e:	40c2      	lsrs	r2, r0
 800b320:	6163      	str	r3, [r4, #20]
 800b322:	9201      	str	r2, [sp, #4]
 800b324:	9b01      	ldr	r3, [sp, #4]
 800b326:	61a3      	str	r3, [r4, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bf14      	ite	ne
 800b32c:	2202      	movne	r2, #2
 800b32e:	2201      	moveq	r2, #1
 800b330:	6122      	str	r2, [r4, #16]
 800b332:	b1bd      	cbz	r5, 800b364 <__d2b+0x94>
 800b334:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b338:	4405      	add	r5, r0
 800b33a:	603d      	str	r5, [r7, #0]
 800b33c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b340:	6030      	str	r0, [r6, #0]
 800b342:	4620      	mov	r0, r4
 800b344:	b003      	add	sp, #12
 800b346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b34a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b34e:	e7d6      	b.n	800b2fe <__d2b+0x2e>
 800b350:	6161      	str	r1, [r4, #20]
 800b352:	e7e7      	b.n	800b324 <__d2b+0x54>
 800b354:	a801      	add	r0, sp, #4
 800b356:	f7ff fd61 	bl	800ae1c <__lo0bits>
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	6163      	str	r3, [r4, #20]
 800b35e:	3020      	adds	r0, #32
 800b360:	2201      	movs	r2, #1
 800b362:	e7e5      	b.n	800b330 <__d2b+0x60>
 800b364:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b36c:	6038      	str	r0, [r7, #0]
 800b36e:	6918      	ldr	r0, [r3, #16]
 800b370:	f7ff fd34 	bl	800addc <__hi0bits>
 800b374:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b378:	e7e2      	b.n	800b340 <__d2b+0x70>
 800b37a:	bf00      	nop
 800b37c:	0800c549 	.word	0x0800c549
 800b380:	0800c55a 	.word	0x0800c55a

0800b384 <__sfputc_r>:
 800b384:	6893      	ldr	r3, [r2, #8]
 800b386:	3b01      	subs	r3, #1
 800b388:	2b00      	cmp	r3, #0
 800b38a:	b410      	push	{r4}
 800b38c:	6093      	str	r3, [r2, #8]
 800b38e:	da08      	bge.n	800b3a2 <__sfputc_r+0x1e>
 800b390:	6994      	ldr	r4, [r2, #24]
 800b392:	42a3      	cmp	r3, r4
 800b394:	db01      	blt.n	800b39a <__sfputc_r+0x16>
 800b396:	290a      	cmp	r1, #10
 800b398:	d103      	bne.n	800b3a2 <__sfputc_r+0x1e>
 800b39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b39e:	f7fe bb6e 	b.w	8009a7e <__swbuf_r>
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	1c58      	adds	r0, r3, #1
 800b3a6:	6010      	str	r0, [r2, #0]
 800b3a8:	7019      	strb	r1, [r3, #0]
 800b3aa:	4608      	mov	r0, r1
 800b3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <__sfputs_r>:
 800b3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	18d5      	adds	r5, r2, r3
 800b3bc:	42ac      	cmp	r4, r5
 800b3be:	d101      	bne.n	800b3c4 <__sfputs_r+0x12>
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	e007      	b.n	800b3d4 <__sfputs_r+0x22>
 800b3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c8:	463a      	mov	r2, r7
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f7ff ffda 	bl	800b384 <__sfputc_r>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d1f3      	bne.n	800b3bc <__sfputs_r+0xa>
 800b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3d8 <_vfiprintf_r>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	460d      	mov	r5, r1
 800b3de:	b09d      	sub	sp, #116	; 0x74
 800b3e0:	4614      	mov	r4, r2
 800b3e2:	4698      	mov	r8, r3
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	b118      	cbz	r0, 800b3f0 <_vfiprintf_r+0x18>
 800b3e8:	6a03      	ldr	r3, [r0, #32]
 800b3ea:	b90b      	cbnz	r3, 800b3f0 <_vfiprintf_r+0x18>
 800b3ec:	f7fe fab4 	bl	8009958 <__sinit>
 800b3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3f2:	07d9      	lsls	r1, r3, #31
 800b3f4:	d405      	bmi.n	800b402 <_vfiprintf_r+0x2a>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	059a      	lsls	r2, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_vfiprintf_r+0x2a>
 800b3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3fe:	f7fe fcba 	bl	8009d76 <__retarget_lock_acquire_recursive>
 800b402:	89ab      	ldrh	r3, [r5, #12]
 800b404:	071b      	lsls	r3, r3, #28
 800b406:	d501      	bpl.n	800b40c <_vfiprintf_r+0x34>
 800b408:	692b      	ldr	r3, [r5, #16]
 800b40a:	b99b      	cbnz	r3, 800b434 <_vfiprintf_r+0x5c>
 800b40c:	4629      	mov	r1, r5
 800b40e:	4630      	mov	r0, r6
 800b410:	f7fe fb72 	bl	8009af8 <__swsetup_r>
 800b414:	b170      	cbz	r0, 800b434 <_vfiprintf_r+0x5c>
 800b416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b418:	07dc      	lsls	r4, r3, #31
 800b41a:	d504      	bpl.n	800b426 <_vfiprintf_r+0x4e>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b420:	b01d      	add	sp, #116	; 0x74
 800b422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b426:	89ab      	ldrh	r3, [r5, #12]
 800b428:	0598      	lsls	r0, r3, #22
 800b42a:	d4f7      	bmi.n	800b41c <_vfiprintf_r+0x44>
 800b42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b42e:	f7fe fca3 	bl	8009d78 <__retarget_lock_release_recursive>
 800b432:	e7f3      	b.n	800b41c <_vfiprintf_r+0x44>
 800b434:	2300      	movs	r3, #0
 800b436:	9309      	str	r3, [sp, #36]	; 0x24
 800b438:	2320      	movs	r3, #32
 800b43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b442:	2330      	movs	r3, #48	; 0x30
 800b444:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b5f8 <_vfiprintf_r+0x220>
 800b448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b44c:	f04f 0901 	mov.w	r9, #1
 800b450:	4623      	mov	r3, r4
 800b452:	469a      	mov	sl, r3
 800b454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b458:	b10a      	cbz	r2, 800b45e <_vfiprintf_r+0x86>
 800b45a:	2a25      	cmp	r2, #37	; 0x25
 800b45c:	d1f9      	bne.n	800b452 <_vfiprintf_r+0x7a>
 800b45e:	ebba 0b04 	subs.w	fp, sl, r4
 800b462:	d00b      	beq.n	800b47c <_vfiprintf_r+0xa4>
 800b464:	465b      	mov	r3, fp
 800b466:	4622      	mov	r2, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7ff ffa1 	bl	800b3b2 <__sfputs_r>
 800b470:	3001      	adds	r0, #1
 800b472:	f000 80a9 	beq.w	800b5c8 <_vfiprintf_r+0x1f0>
 800b476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b478:	445a      	add	r2, fp
 800b47a:	9209      	str	r2, [sp, #36]	; 0x24
 800b47c:	f89a 3000 	ldrb.w	r3, [sl]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 80a1 	beq.w	800b5c8 <_vfiprintf_r+0x1f0>
 800b486:	2300      	movs	r3, #0
 800b488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b490:	f10a 0a01 	add.w	sl, sl, #1
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	9307      	str	r3, [sp, #28]
 800b498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b49c:	931a      	str	r3, [sp, #104]	; 0x68
 800b49e:	4654      	mov	r4, sl
 800b4a0:	2205      	movs	r2, #5
 800b4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a6:	4854      	ldr	r0, [pc, #336]	; (800b5f8 <_vfiprintf_r+0x220>)
 800b4a8:	f7f4 fea2 	bl	80001f0 <memchr>
 800b4ac:	9a04      	ldr	r2, [sp, #16]
 800b4ae:	b9d8      	cbnz	r0, 800b4e8 <_vfiprintf_r+0x110>
 800b4b0:	06d1      	lsls	r1, r2, #27
 800b4b2:	bf44      	itt	mi
 800b4b4:	2320      	movmi	r3, #32
 800b4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ba:	0713      	lsls	r3, r2, #28
 800b4bc:	bf44      	itt	mi
 800b4be:	232b      	movmi	r3, #43	; 0x2b
 800b4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ca:	d015      	beq.n	800b4f8 <_vfiprintf_r+0x120>
 800b4cc:	9a07      	ldr	r2, [sp, #28]
 800b4ce:	4654      	mov	r4, sl
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	f04f 0c0a 	mov.w	ip, #10
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4dc:	3b30      	subs	r3, #48	; 0x30
 800b4de:	2b09      	cmp	r3, #9
 800b4e0:	d94d      	bls.n	800b57e <_vfiprintf_r+0x1a6>
 800b4e2:	b1b0      	cbz	r0, 800b512 <_vfiprintf_r+0x13a>
 800b4e4:	9207      	str	r2, [sp, #28]
 800b4e6:	e014      	b.n	800b512 <_vfiprintf_r+0x13a>
 800b4e8:	eba0 0308 	sub.w	r3, r0, r8
 800b4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	46a2      	mov	sl, r4
 800b4f6:	e7d2      	b.n	800b49e <_vfiprintf_r+0xc6>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	1d19      	adds	r1, r3, #4
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	9103      	str	r1, [sp, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	bfbb      	ittet	lt
 800b504:	425b      	neglt	r3, r3
 800b506:	f042 0202 	orrlt.w	r2, r2, #2
 800b50a:	9307      	strge	r3, [sp, #28]
 800b50c:	9307      	strlt	r3, [sp, #28]
 800b50e:	bfb8      	it	lt
 800b510:	9204      	strlt	r2, [sp, #16]
 800b512:	7823      	ldrb	r3, [r4, #0]
 800b514:	2b2e      	cmp	r3, #46	; 0x2e
 800b516:	d10c      	bne.n	800b532 <_vfiprintf_r+0x15a>
 800b518:	7863      	ldrb	r3, [r4, #1]
 800b51a:	2b2a      	cmp	r3, #42	; 0x2a
 800b51c:	d134      	bne.n	800b588 <_vfiprintf_r+0x1b0>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	1d1a      	adds	r2, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	9203      	str	r2, [sp, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	bfb8      	it	lt
 800b52a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b52e:	3402      	adds	r4, #2
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b608 <_vfiprintf_r+0x230>
 800b536:	7821      	ldrb	r1, [r4, #0]
 800b538:	2203      	movs	r2, #3
 800b53a:	4650      	mov	r0, sl
 800b53c:	f7f4 fe58 	bl	80001f0 <memchr>
 800b540:	b138      	cbz	r0, 800b552 <_vfiprintf_r+0x17a>
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	eba0 000a 	sub.w	r0, r0, sl
 800b548:	2240      	movs	r2, #64	; 0x40
 800b54a:	4082      	lsls	r2, r0
 800b54c:	4313      	orrs	r3, r2
 800b54e:	3401      	adds	r4, #1
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b556:	4829      	ldr	r0, [pc, #164]	; (800b5fc <_vfiprintf_r+0x224>)
 800b558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b55c:	2206      	movs	r2, #6
 800b55e:	f7f4 fe47 	bl	80001f0 <memchr>
 800b562:	2800      	cmp	r0, #0
 800b564:	d03f      	beq.n	800b5e6 <_vfiprintf_r+0x20e>
 800b566:	4b26      	ldr	r3, [pc, #152]	; (800b600 <_vfiprintf_r+0x228>)
 800b568:	bb1b      	cbnz	r3, 800b5b2 <_vfiprintf_r+0x1da>
 800b56a:	9b03      	ldr	r3, [sp, #12]
 800b56c:	3307      	adds	r3, #7
 800b56e:	f023 0307 	bic.w	r3, r3, #7
 800b572:	3308      	adds	r3, #8
 800b574:	9303      	str	r3, [sp, #12]
 800b576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b578:	443b      	add	r3, r7
 800b57a:	9309      	str	r3, [sp, #36]	; 0x24
 800b57c:	e768      	b.n	800b450 <_vfiprintf_r+0x78>
 800b57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b582:	460c      	mov	r4, r1
 800b584:	2001      	movs	r0, #1
 800b586:	e7a6      	b.n	800b4d6 <_vfiprintf_r+0xfe>
 800b588:	2300      	movs	r3, #0
 800b58a:	3401      	adds	r4, #1
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	4619      	mov	r1, r3
 800b590:	f04f 0c0a 	mov.w	ip, #10
 800b594:	4620      	mov	r0, r4
 800b596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b59a:	3a30      	subs	r2, #48	; 0x30
 800b59c:	2a09      	cmp	r2, #9
 800b59e:	d903      	bls.n	800b5a8 <_vfiprintf_r+0x1d0>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d0c6      	beq.n	800b532 <_vfiprintf_r+0x15a>
 800b5a4:	9105      	str	r1, [sp, #20]
 800b5a6:	e7c4      	b.n	800b532 <_vfiprintf_r+0x15a>
 800b5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e7f0      	b.n	800b594 <_vfiprintf_r+0x1bc>
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	462a      	mov	r2, r5
 800b5b8:	4b12      	ldr	r3, [pc, #72]	; (800b604 <_vfiprintf_r+0x22c>)
 800b5ba:	a904      	add	r1, sp, #16
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7fd fcb7 	bl	8008f30 <_printf_float>
 800b5c2:	4607      	mov	r7, r0
 800b5c4:	1c78      	adds	r0, r7, #1
 800b5c6:	d1d6      	bne.n	800b576 <_vfiprintf_r+0x19e>
 800b5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5ca:	07d9      	lsls	r1, r3, #31
 800b5cc:	d405      	bmi.n	800b5da <_vfiprintf_r+0x202>
 800b5ce:	89ab      	ldrh	r3, [r5, #12]
 800b5d0:	059a      	lsls	r2, r3, #22
 800b5d2:	d402      	bmi.n	800b5da <_vfiprintf_r+0x202>
 800b5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5d6:	f7fe fbcf 	bl	8009d78 <__retarget_lock_release_recursive>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	065b      	lsls	r3, r3, #25
 800b5de:	f53f af1d 	bmi.w	800b41c <_vfiprintf_r+0x44>
 800b5e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e4:	e71c      	b.n	800b420 <_vfiprintf_r+0x48>
 800b5e6:	ab03      	add	r3, sp, #12
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <_vfiprintf_r+0x22c>)
 800b5ee:	a904      	add	r1, sp, #16
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7fd ff41 	bl	8009478 <_printf_i>
 800b5f6:	e7e4      	b.n	800b5c2 <_vfiprintf_r+0x1ea>
 800b5f8:	0800c6b4 	.word	0x0800c6b4
 800b5fc:	0800c6be 	.word	0x0800c6be
 800b600:	08008f31 	.word	0x08008f31
 800b604:	0800b3b3 	.word	0x0800b3b3
 800b608:	0800c6ba 	.word	0x0800c6ba

0800b60c <__swhatbuf_r>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	460c      	mov	r4, r1
 800b610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b614:	2900      	cmp	r1, #0
 800b616:	b096      	sub	sp, #88	; 0x58
 800b618:	4615      	mov	r5, r2
 800b61a:	461e      	mov	r6, r3
 800b61c:	da0d      	bge.n	800b63a <__swhatbuf_r+0x2e>
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b624:	f04f 0100 	mov.w	r1, #0
 800b628:	bf0c      	ite	eq
 800b62a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b62e:	2340      	movne	r3, #64	; 0x40
 800b630:	2000      	movs	r0, #0
 800b632:	6031      	str	r1, [r6, #0]
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	b016      	add	sp, #88	; 0x58
 800b638:	bd70      	pop	{r4, r5, r6, pc}
 800b63a:	466a      	mov	r2, sp
 800b63c:	f000 f87c 	bl	800b738 <_fstat_r>
 800b640:	2800      	cmp	r0, #0
 800b642:	dbec      	blt.n	800b61e <__swhatbuf_r+0x12>
 800b644:	9901      	ldr	r1, [sp, #4]
 800b646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b64a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b64e:	4259      	negs	r1, r3
 800b650:	4159      	adcs	r1, r3
 800b652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b656:	e7eb      	b.n	800b630 <__swhatbuf_r+0x24>

0800b658 <__smakebuf_r>:
 800b658:	898b      	ldrh	r3, [r1, #12]
 800b65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b65c:	079d      	lsls	r5, r3, #30
 800b65e:	4606      	mov	r6, r0
 800b660:	460c      	mov	r4, r1
 800b662:	d507      	bpl.n	800b674 <__smakebuf_r+0x1c>
 800b664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	6123      	str	r3, [r4, #16]
 800b66c:	2301      	movs	r3, #1
 800b66e:	6163      	str	r3, [r4, #20]
 800b670:	b002      	add	sp, #8
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	ab01      	add	r3, sp, #4
 800b676:	466a      	mov	r2, sp
 800b678:	f7ff ffc8 	bl	800b60c <__swhatbuf_r>
 800b67c:	9900      	ldr	r1, [sp, #0]
 800b67e:	4605      	mov	r5, r0
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff fa77 	bl	800ab74 <_malloc_r>
 800b686:	b948      	cbnz	r0, 800b69c <__smakebuf_r+0x44>
 800b688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68c:	059a      	lsls	r2, r3, #22
 800b68e:	d4ef      	bmi.n	800b670 <__smakebuf_r+0x18>
 800b690:	f023 0303 	bic.w	r3, r3, #3
 800b694:	f043 0302 	orr.w	r3, r3, #2
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	e7e3      	b.n	800b664 <__smakebuf_r+0xc>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	6020      	str	r0, [r4, #0]
 800b6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	6163      	str	r3, [r4, #20]
 800b6aa:	9b01      	ldr	r3, [sp, #4]
 800b6ac:	6120      	str	r0, [r4, #16]
 800b6ae:	b15b      	cbz	r3, 800b6c8 <__smakebuf_r+0x70>
 800b6b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f000 f851 	bl	800b75c <_isatty_r>
 800b6ba:	b128      	cbz	r0, 800b6c8 <__smakebuf_r+0x70>
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	f043 0301 	orr.w	r3, r3, #1
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	431d      	orrs	r5, r3
 800b6cc:	81a5      	strh	r5, [r4, #12]
 800b6ce:	e7cf      	b.n	800b670 <__smakebuf_r+0x18>

0800b6d0 <_putc_r>:
 800b6d0:	b570      	push	{r4, r5, r6, lr}
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	b118      	cbz	r0, 800b6e2 <_putc_r+0x12>
 800b6da:	6a03      	ldr	r3, [r0, #32]
 800b6dc:	b90b      	cbnz	r3, 800b6e2 <_putc_r+0x12>
 800b6de:	f7fe f93b 	bl	8009958 <__sinit>
 800b6e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6e4:	07d8      	lsls	r0, r3, #31
 800b6e6:	d405      	bmi.n	800b6f4 <_putc_r+0x24>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	0599      	lsls	r1, r3, #22
 800b6ec:	d402      	bmi.n	800b6f4 <_putc_r+0x24>
 800b6ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f0:	f7fe fb41 	bl	8009d76 <__retarget_lock_acquire_recursive>
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	60a3      	str	r3, [r4, #8]
 800b6fc:	da05      	bge.n	800b70a <_putc_r+0x3a>
 800b6fe:	69a2      	ldr	r2, [r4, #24]
 800b700:	4293      	cmp	r3, r2
 800b702:	db12      	blt.n	800b72a <_putc_r+0x5a>
 800b704:	b2eb      	uxtb	r3, r5
 800b706:	2b0a      	cmp	r3, #10
 800b708:	d00f      	beq.n	800b72a <_putc_r+0x5a>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	6022      	str	r2, [r4, #0]
 800b710:	701d      	strb	r5, [r3, #0]
 800b712:	b2ed      	uxtb	r5, r5
 800b714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b716:	07da      	lsls	r2, r3, #31
 800b718:	d405      	bmi.n	800b726 <_putc_r+0x56>
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	059b      	lsls	r3, r3, #22
 800b71e:	d402      	bmi.n	800b726 <_putc_r+0x56>
 800b720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b722:	f7fe fb29 	bl	8009d78 <__retarget_lock_release_recursive>
 800b726:	4628      	mov	r0, r5
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	4629      	mov	r1, r5
 800b72c:	4622      	mov	r2, r4
 800b72e:	4630      	mov	r0, r6
 800b730:	f7fe f9a5 	bl	8009a7e <__swbuf_r>
 800b734:	4605      	mov	r5, r0
 800b736:	e7ed      	b.n	800b714 <_putc_r+0x44>

0800b738 <_fstat_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d07      	ldr	r5, [pc, #28]	; (800b758 <_fstat_r+0x20>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	4611      	mov	r1, r2
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	f7f7 fcd6 	bl	80030f6 <_fstat>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d102      	bne.n	800b754 <_fstat_r+0x1c>
 800b74e:	682b      	ldr	r3, [r5, #0]
 800b750:	b103      	cbz	r3, 800b754 <_fstat_r+0x1c>
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	bd38      	pop	{r3, r4, r5, pc}
 800b756:	bf00      	nop
 800b758:	200060e0 	.word	0x200060e0

0800b75c <_isatty_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d06      	ldr	r5, [pc, #24]	; (800b778 <_isatty_r+0x1c>)
 800b760:	2300      	movs	r3, #0
 800b762:	4604      	mov	r4, r0
 800b764:	4608      	mov	r0, r1
 800b766:	602b      	str	r3, [r5, #0]
 800b768:	f7f7 fcd5 	bl	8003116 <_isatty>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_isatty_r+0x1a>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_isatty_r+0x1a>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	200060e0 	.word	0x200060e0

0800b77c <_sbrk_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d06      	ldr	r5, [pc, #24]	; (800b798 <_sbrk_r+0x1c>)
 800b780:	2300      	movs	r3, #0
 800b782:	4604      	mov	r4, r0
 800b784:	4608      	mov	r0, r1
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	f7f7 fcde 	bl	8003148 <_sbrk>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_sbrk_r+0x1a>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b103      	cbz	r3, 800b796 <_sbrk_r+0x1a>
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	200060e0 	.word	0x200060e0

0800b79c <__assert_func>:
 800b79c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b79e:	4614      	mov	r4, r2
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <__assert_func+0x2c>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	68d8      	ldr	r0, [r3, #12]
 800b7aa:	b14c      	cbz	r4, 800b7c0 <__assert_func+0x24>
 800b7ac:	4b07      	ldr	r3, [pc, #28]	; (800b7cc <__assert_func+0x30>)
 800b7ae:	9100      	str	r1, [sp, #0]
 800b7b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7b4:	4906      	ldr	r1, [pc, #24]	; (800b7d0 <__assert_func+0x34>)
 800b7b6:	462b      	mov	r3, r5
 800b7b8:	f000 f844 	bl	800b844 <fiprintf>
 800b7bc:	f000 f854 	bl	800b868 <abort>
 800b7c0:	4b04      	ldr	r3, [pc, #16]	; (800b7d4 <__assert_func+0x38>)
 800b7c2:	461c      	mov	r4, r3
 800b7c4:	e7f3      	b.n	800b7ae <__assert_func+0x12>
 800b7c6:	bf00      	nop
 800b7c8:	20000120 	.word	0x20000120
 800b7cc:	0800c6cf 	.word	0x0800c6cf
 800b7d0:	0800c6dc 	.word	0x0800c6dc
 800b7d4:	0800c70a 	.word	0x0800c70a

0800b7d8 <_calloc_r>:
 800b7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7da:	fba1 2402 	umull	r2, r4, r1, r2
 800b7de:	b94c      	cbnz	r4, 800b7f4 <_calloc_r+0x1c>
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	9201      	str	r2, [sp, #4]
 800b7e4:	f7ff f9c6 	bl	800ab74 <_malloc_r>
 800b7e8:	9a01      	ldr	r2, [sp, #4]
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	b930      	cbnz	r0, 800b7fc <_calloc_r+0x24>
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	b003      	add	sp, #12
 800b7f2:	bd30      	pop	{r4, r5, pc}
 800b7f4:	220c      	movs	r2, #12
 800b7f6:	6002      	str	r2, [r0, #0]
 800b7f8:	2500      	movs	r5, #0
 800b7fa:	e7f8      	b.n	800b7ee <_calloc_r+0x16>
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	f7fe f9d3 	bl	8009ba8 <memset>
 800b802:	e7f4      	b.n	800b7ee <_calloc_r+0x16>

0800b804 <__ascii_mbtowc>:
 800b804:	b082      	sub	sp, #8
 800b806:	b901      	cbnz	r1, 800b80a <__ascii_mbtowc+0x6>
 800b808:	a901      	add	r1, sp, #4
 800b80a:	b142      	cbz	r2, 800b81e <__ascii_mbtowc+0x1a>
 800b80c:	b14b      	cbz	r3, 800b822 <__ascii_mbtowc+0x1e>
 800b80e:	7813      	ldrb	r3, [r2, #0]
 800b810:	600b      	str	r3, [r1, #0]
 800b812:	7812      	ldrb	r2, [r2, #0]
 800b814:	1e10      	subs	r0, r2, #0
 800b816:	bf18      	it	ne
 800b818:	2001      	movne	r0, #1
 800b81a:	b002      	add	sp, #8
 800b81c:	4770      	bx	lr
 800b81e:	4610      	mov	r0, r2
 800b820:	e7fb      	b.n	800b81a <__ascii_mbtowc+0x16>
 800b822:	f06f 0001 	mvn.w	r0, #1
 800b826:	e7f8      	b.n	800b81a <__ascii_mbtowc+0x16>

0800b828 <__ascii_wctomb>:
 800b828:	b149      	cbz	r1, 800b83e <__ascii_wctomb+0x16>
 800b82a:	2aff      	cmp	r2, #255	; 0xff
 800b82c:	bf85      	ittet	hi
 800b82e:	238a      	movhi	r3, #138	; 0x8a
 800b830:	6003      	strhi	r3, [r0, #0]
 800b832:	700a      	strbls	r2, [r1, #0]
 800b834:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b838:	bf98      	it	ls
 800b83a:	2001      	movls	r0, #1
 800b83c:	4770      	bx	lr
 800b83e:	4608      	mov	r0, r1
 800b840:	4770      	bx	lr
	...

0800b844 <fiprintf>:
 800b844:	b40e      	push	{r1, r2, r3}
 800b846:	b503      	push	{r0, r1, lr}
 800b848:	4601      	mov	r1, r0
 800b84a:	ab03      	add	r3, sp, #12
 800b84c:	4805      	ldr	r0, [pc, #20]	; (800b864 <fiprintf+0x20>)
 800b84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b852:	6800      	ldr	r0, [r0, #0]
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	f7ff fdbf 	bl	800b3d8 <_vfiprintf_r>
 800b85a:	b002      	add	sp, #8
 800b85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b860:	b003      	add	sp, #12
 800b862:	4770      	bx	lr
 800b864:	20000120 	.word	0x20000120

0800b868 <abort>:
 800b868:	b508      	push	{r3, lr}
 800b86a:	2006      	movs	r0, #6
 800b86c:	f000 f82c 	bl	800b8c8 <raise>
 800b870:	2001      	movs	r0, #1
 800b872:	f7f7 fbf1 	bl	8003058 <_exit>

0800b876 <_raise_r>:
 800b876:	291f      	cmp	r1, #31
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4604      	mov	r4, r0
 800b87c:	460d      	mov	r5, r1
 800b87e:	d904      	bls.n	800b88a <_raise_r+0x14>
 800b880:	2316      	movs	r3, #22
 800b882:	6003      	str	r3, [r0, #0]
 800b884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b888:	bd38      	pop	{r3, r4, r5, pc}
 800b88a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b88c:	b112      	cbz	r2, 800b894 <_raise_r+0x1e>
 800b88e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b892:	b94b      	cbnz	r3, 800b8a8 <_raise_r+0x32>
 800b894:	4620      	mov	r0, r4
 800b896:	f000 f831 	bl	800b8fc <_getpid_r>
 800b89a:	462a      	mov	r2, r5
 800b89c:	4601      	mov	r1, r0
 800b89e:	4620      	mov	r0, r4
 800b8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a4:	f000 b818 	b.w	800b8d8 <_kill_r>
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d00a      	beq.n	800b8c2 <_raise_r+0x4c>
 800b8ac:	1c59      	adds	r1, r3, #1
 800b8ae:	d103      	bne.n	800b8b8 <_raise_r+0x42>
 800b8b0:	2316      	movs	r3, #22
 800b8b2:	6003      	str	r3, [r0, #0]
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	e7e7      	b.n	800b888 <_raise_r+0x12>
 800b8b8:	2400      	movs	r4, #0
 800b8ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8be:	4628      	mov	r0, r5
 800b8c0:	4798      	blx	r3
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e7e0      	b.n	800b888 <_raise_r+0x12>
	...

0800b8c8 <raise>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <raise+0xc>)
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f7ff bfd2 	b.w	800b876 <_raise_r>
 800b8d2:	bf00      	nop
 800b8d4:	20000120 	.word	0x20000120

0800b8d8 <_kill_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d07      	ldr	r5, [pc, #28]	; (800b8f8 <_kill_r+0x20>)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	602b      	str	r3, [r5, #0]
 800b8e6:	f7f7 fba7 	bl	8003038 <_kill>
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	d102      	bne.n	800b8f4 <_kill_r+0x1c>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	b103      	cbz	r3, 800b8f4 <_kill_r+0x1c>
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	bd38      	pop	{r3, r4, r5, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200060e0 	.word	0x200060e0

0800b8fc <_getpid_r>:
 800b8fc:	f7f7 bb94 	b.w	8003028 <_getpid>

0800b900 <_init>:
 800b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b902:	bf00      	nop
 800b904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b906:	bc08      	pop	{r3}
 800b908:	469e      	mov	lr, r3
 800b90a:	4770      	bx	lr

0800b90c <_fini>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	bf00      	nop
 800b910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b912:	bc08      	pop	{r3}
 800b914:	469e      	mov	lr, r3
 800b916:	4770      	bx	lr
