
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  0800d088  0800d088  0001d088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db5c  0800db5c  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800db5c  0800db5c  0001db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db64  0800db64  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db64  0800db64  0001db64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db68  0800db68  0001db68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800db6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020244  2**0
                  CONTENTS
 10 .bss          00000a9c  20000244  20000244  00020244  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ce0  20000ce0  00020244  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002011c  00000000  00000000  000202b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f46  00000000  00000000  000403d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b60  00000000  00000000  00045320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001502  00000000  00000000  00046e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006b2b  00000000  00000000  00048382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000215b9  00000000  00000000  0004eead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb0dc  00000000  00000000  00070466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008328  00000000  00000000  0015b544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0016386c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d070 	.word	0x0800d070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800d070 	.word	0x0800d070

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    __asm volatile (
 8001016:	680a      	ldr	r2, [r1, #0]
 8001018:	f382 8808 	msr	MSP, r2
 800101c:	684a      	ldr	r2, [r1, #4]
 800101e:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001020:	e7fe      	b.n	8001020 <branch_to_bootloader+0x14>
	...

08001024 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800102a:	491d      	ldr	r1, [pc, #116]	; (80010a0 <check_enter_bootloader+0x7c>)
 800102c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001030:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001034:	4c1a      	ldr	r4, [pc, #104]	; (80010a0 <check_enter_bootloader+0x7c>)
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	f04f 0100 	mov.w	r1, #0
 800103e:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8001042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	f04f 0100 	mov.w	r1, #0
 800104e:	0028      	movs	r0, r5
 8001050:	2100      	movs	r1, #0
 8001052:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001056:	2300      	movs	r3, #0
 8001058:	4912      	ldr	r1, [pc, #72]	; (80010a4 <check_enter_bootloader+0x80>)
 800105a:	4411      	add	r1, r2
 800105c:	430b      	orrs	r3, r1
 800105e:	d11a      	bne.n	8001096 <check_enter_bootloader+0x72>
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <check_enter_bootloader+0x84>)
 8001062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d014      	beq.n	8001096 <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <check_enter_bootloader+0x88>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8001072:	683c      	ldr	r4, [r7, #0]
 8001074:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	000a      	movs	r2, r1
 8001082:	2300      	movs	r3, #0
 8001084:	4613      	mov	r3, r2
 8001086:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800108a:	f023 030f 	bic.w	r3, r3, #15
 800108e:	4619      	mov	r1, r3
 8001090:	4620      	mov	r0, r4
 8001092:	f7ff ffbb 	bl	800100c <branch_to_bootloader>
    }
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	2001c000 	.word	0x2001c000
 80010a4:	fffffa5b 	.word	0xfffffa5b
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800

080010b0 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f897 	bl	80011f0 <platformGetListOfConfigurations>
 80010c2:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4619      	mov	r1, r3
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f855 	bl	8001178 <platformInitConfiguration>
 80010ce:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b30      	cmp	r3, #48	; 0x30
 80010f4:	d104      	bne.n	8001100 <platformParseDeviceTypeString+0x1c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b3b      	cmp	r3, #59	; 0x3b
 80010fe:	d001      	beq.n	8001104 <platformParseDeviceTypeString+0x20>
    return 1;
 8001100:	2301      	movs	r3, #1
 8001102:	e034      	b.n	800116e <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3304      	adds	r3, #4
 800110c:	60fb      	str	r3, [r7, #12]
  int end = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e00e      	b.n	8001136 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00c      	beq.n	800113e <platformParseDeviceTypeString+0x5a>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b3b      	cmp	r3, #59	; 0x3b
 800112e:	d006      	beq.n	800113e <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	ddec      	ble.n	8001118 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	429a      	cmp	r2, r3
 8001144:	dd01      	ble.n	800114a <platformParseDeviceTypeString+0x66>
    return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e011      	b.n	800116e <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	4619      	mov	r1, r3
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f00a f9f6 	bl	800b54e <memcpy>
  deviceType[length] = '\0';
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f852 	bl	8001230 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ffa4 	bl	80010e4 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a0:	e01a      	b.n	80011d8 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 80011a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 80011b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b6:	f107 020c 	add.w	r2, r7, #12
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f807 	bl	80001d0 <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <platformInitConfiguration+0x5a>
      active_config = config;
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <platformInitConfiguration+0x74>)
 80011ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011cc:	6013      	str	r3, [r2, #0]
      return 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e007      	b.n	80011e2 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 80011d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d4:	3301      	adds	r3, #1
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbe0      	blt.n	80011a2 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3740      	adds	r7, #64	; 0x40
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000260 	.word	0x20000260

080011f0 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	601a      	str	r2, [r3, #0]
  return configs;
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <platformGetListOfConfigurations+0x1c>)
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000000 	.word	0x20000000

08001210 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800121e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001222:	015b      	lsls	r3, r3, #5
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	e00d      	b.n	800125e <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8001242:	6938      	ldr	r0, [r7, #16]
 8001244:	f7ff ffe4 	bl	8001210 <getAddressOfOtpMemoryBlock>
 8001248:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	617b      	str	r3, [r7, #20]
      break;
 8001256:	e005      	b.n	8001264 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	3301      	adds	r3, #1
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	ddee      	ble.n	8001242 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <platformGetDeviceTypeString+0x42>
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d101      	bne.n	8001276 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <platformGetDeviceTypeString+0x60>)
 8001274:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8001276:	2220      	movs	r2, #32
 8001278:	6979      	ldr	r1, [r7, #20]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f00a f8dc 	bl	800b438 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3320      	adds	r3, #32
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800d088 	.word	0x0800d088

08001294 <uartSendData>:




void uartSendData(uint32_t size, uint8_t* data)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e00f      	b.n	80012c4 <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 80012a4:	bf00      	nop
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <uartSendData+0x48>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f9      	beq.n	80012a6 <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <uartSendData+0x48>)
 80012bc:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3eb      	bcc.n	80012a4 <uartSendData+0x10>
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40011400 	.word	0x40011400

080012e0 <uartPutchar>:


int uartPutchar(int ch)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff ffd1 	bl	8001294 <uartSendData>
    return (unsigned char)ch;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	b2db      	uxtb	r3, r3
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  int l = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 800130c:	e00a      	b.n	8001324 <getIntLen+0x24>
  {
    l++;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <getIntLen+0x38>)
 8001318:	fb82 1203 	smull	r1, r2, r2, r3
 800131c:	1092      	asrs	r2, r2, #2
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b09      	cmp	r3, #9
 8001328:	dcf1      	bgt.n	800130e <getIntLen+0xe>
  }
  return l;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	66666667 	.word	0x66666667

0800133c <power>:

int power(int a, int b)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e007      	b.n	8001360 <power+0x24>
  {
    x *= a;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf3      	blt.n	8001350 <power+0x14>
  }

  return x;
 8001368:	68bb      	ldr	r3, [r7, #8]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8001378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800137c:	b088      	sub	sp, #32
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 800138a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800138e:	4313      	orrs	r3, r2
 8001390:	d104      	bne.n	800139c <itoa10Unsigned+0x24>
  {
    putcf('0');
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2030      	movs	r0, #48	; 0x30
 8001396:	4798      	blx	r3
    return 1;
 8001398:	2301      	movs	r3, #1
 800139a:	e057      	b.n	800144c <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 800139c:	f04f 0201 	mov.w	r2, #1
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 80013a8:	e019      	b.n	80013de <itoa10Unsigned+0x66>
  {
    i *= 10L;
 80013aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80013ae:	4642      	mov	r2, r8
 80013b0:	464b      	mov	r3, r9
 80013b2:	f04f 0000 	mov.w	r0, #0
 80013b6:	f04f 0100 	mov.w	r1, #0
 80013ba:	0099      	lsls	r1, r3, #2
 80013bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80013c0:	0090      	lsls	r0, r2, #2
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	eb12 0408 	adds.w	r4, r2, r8
 80013ca:	eb43 0509 	adc.w	r5, r3, r9
 80013ce:	eb14 0a04 	adds.w	sl, r4, r4
 80013d2:	eb45 0b05 	adc.w	fp, r5, r5
 80013d6:	4654      	mov	r4, sl
 80013d8:	465d      	mov	r5, fp
 80013da:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 80013de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013e6:	f7ff fc3f 	bl	8000c68 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	2a0a      	cmp	r2, #10
 80013f0:	f173 0300 	sbcs.w	r3, r3, #0
 80013f4:	d2d9      	bcs.n	80013aa <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 80013f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013fe:	f7ff fc33 	bl	8000c68 <__aeabi_uldivmod>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 020a 	mov.w	r2, #10
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	f7ff fc29 	bl	8000c68 <__aeabi_uldivmod>
 8001416:	4910      	ldr	r1, [pc, #64]	; (8001458 <itoa10Unsigned+0xe0>)
 8001418:	188b      	adds	r3, r1, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4610      	mov	r0, r2
 8001422:	4798      	blx	r3
    len++;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3301      	adds	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 800142a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800142e:	f04f 020a 	mov.w	r2, #10
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f7ff fc17 	bl	8000c68 <__aeabi_uldivmod>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001442:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	d1d5      	bne.n	80013f6 <itoa10Unsigned+0x7e>

  return len;
 800144a:	69fb      	ldr	r3, [r7, #28]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001456:	bf00      	nop
 8001458:	0800d7b8 	.word	0x0800d7b8

0800145c <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 800146c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001470:	4313      	orrs	r3, r2
 8001472:	d104      	bne.n	800147e <itoa10+0x22>
  {
    putcf('0');
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2030      	movs	r0, #48	; 0x30
 8001478:	4798      	blx	r3
    return 1;
 800147a:	2301      	movs	r3, #1
 800147c:	e037      	b.n	80014ee <itoa10+0x92>
  }

  long long unsigned int n = num;
 800147e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001482:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 8001486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da0d      	bge.n	80014aa <itoa10+0x4e>
  {
    n = -num;
 800148e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001492:	2100      	movs	r1, #0
 8001494:	4254      	negs	r4, r2
 8001496:	eb61 0503 	sbc.w	r5, r1, r3
 800149a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	202d      	movs	r0, #45	; 0x2d
 80014a2:	4798      	blx	r3
    len++;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	3301      	adds	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff27 	bl	8001300 <getIntLen>
 80014b2:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b8:	429a      	cmp	r2, r3
 80014ba:	da10      	bge.n	80014de <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 80014bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 80014c4:	e008      	b.n	80014d8 <itoa10+0x7c>
    {
      putcf('0');
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2030      	movs	r0, #48	; 0x30
 80014ca:	4798      	blx	r3
      len++;
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	3301      	adds	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	dcf3      	bgt.n	80014c6 <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 80014de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff ff48 	bl	8001378 <itoa10Unsigned>
 80014e8:	4602      	mov	r2, r0
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	4413      	add	r3, r2
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014f8 <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 80014f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fc:	b08d      	sub	sp, #52	; 0x34
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8001510:	230f      	movs	r3, #15
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
 8001514:	e059      	b.n	80015ca <itoa16+0xd2>
  {
    int shift = i * 4;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 800151c:	f04f 020f 	mov.w	r2, #15
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	6a39      	ldr	r1, [r7, #32]
 8001526:	f1a1 0620 	sub.w	r6, r1, #32
 800152a:	f1c1 0020 	rsb	r0, r1, #32
 800152e:	fa03 f501 	lsl.w	r5, r3, r1
 8001532:	fa02 f606 	lsl.w	r6, r2, r6
 8001536:	4335      	orrs	r5, r6
 8001538:	fa22 f000 	lsr.w	r0, r2, r0
 800153c:	4305      	orrs	r5, r0
 800153e:	fa02 f401 	lsl.w	r4, r2, r1
 8001542:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 8001546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154e:	ea00 0a02 	and.w	sl, r0, r2
 8001552:	ea01 0b03 	and.w	fp, r1, r3
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	f1c3 0120 	rsb	r1, r3, #32
 800155c:	f1a3 0220 	sub.w	r2, r3, #32
 8001560:	fa2a f803 	lsr.w	r8, sl, r3
 8001564:	fa0b f101 	lsl.w	r1, fp, r1
 8001568:	ea48 0801 	orr.w	r8, r8, r1
 800156c:	fa2b f202 	lsr.w	r2, fp, r2
 8001570:	ea48 0802 	orr.w	r8, r8, r2
 8001574:	fa2b f903 	lsr.w	r9, fp, r3
 8001578:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 800157c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	d002      	beq.n	800158a <itoa16+0x92>
    {
      foundFirst = true;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 800158a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <itoa16+0xa2>
 8001592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001596:	429a      	cmp	r2, r3
 8001598:	da14      	bge.n	80015c4 <itoa16+0xcc>
    {
      if (foundFirst)
 800159a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <itoa16+0xbc>
      {
        putcf(digit[val]);
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <itoa16+0xe4>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4610      	mov	r0, r2
 80015b0:	4798      	blx	r3
 80015b2:	e004      	b.n	80015be <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 80015b4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4610      	mov	r0, r2
 80015bc:	4798      	blx	r3
      }

      len++;
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	3301      	adds	r3, #1
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3b01      	subs	r3, #1
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	daa2      	bge.n	8001516 <itoa16+0x1e>
    }
  }

  return len;
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3734      	adds	r7, #52	; 0x34
 80015d6:	46bd      	mov	sp, r7
 80015d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015dc:	0800d7b8 	.word	0x0800d7b8

080015e0 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	6011      	str	r1, [r2, #0]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3b58      	subs	r3, #88	; 0x58
 8001600:	2b20      	cmp	r3, #32
 8001602:	d861      	bhi.n	80016c8 <handleLongLong+0xe8>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <handleLongLong+0x2c>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	080016b1 	.word	0x080016b1
 8001610:	080016c9 	.word	0x080016c9
 8001614:	080016c9 	.word	0x080016c9
 8001618:	080016c9 	.word	0x080016c9
 800161c:	080016c9 	.word	0x080016c9
 8001620:	080016c9 	.word	0x080016c9
 8001624:	080016c9 	.word	0x080016c9
 8001628:	080016c9 	.word	0x080016c9
 800162c:	080016c9 	.word	0x080016c9
 8001630:	080016c9 	.word	0x080016c9
 8001634:	080016c9 	.word	0x080016c9
 8001638:	080016c9 	.word	0x080016c9
 800163c:	08001691 	.word	0x08001691
 8001640:	080016c9 	.word	0x080016c9
 8001644:	080016c9 	.word	0x080016c9
 8001648:	080016c9 	.word	0x080016c9
 800164c:	080016c9 	.word	0x080016c9
 8001650:	08001691 	.word	0x08001691
 8001654:	080016c9 	.word	0x080016c9
 8001658:	080016c9 	.word	0x080016c9
 800165c:	080016c9 	.word	0x080016c9
 8001660:	080016c9 	.word	0x080016c9
 8001664:	080016c9 	.word	0x080016c9
 8001668:	080016c9 	.word	0x080016c9
 800166c:	080016c9 	.word	0x080016c9
 8001670:	080016c9 	.word	0x080016c9
 8001674:	080016c9 	.word	0x080016c9
 8001678:	080016c9 	.word	0x080016c9
 800167c:	080016c9 	.word	0x080016c9
 8001680:	080016a3 	.word	0x080016a3
 8001684:	080016c9 	.word	0x080016c9
 8001688:	080016c9 	.word	0x080016c9
 800168c:	080016b1 	.word	0x080016b1
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 8001690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001694:	2100      	movs	r1, #0
 8001696:	9100      	str	r1, [sp, #0]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fedf 	bl	800145c <itoa10>
 800169e:	6178      	str	r0, [r7, #20]
      break;
 80016a0:	e013      	b.n	80016ca <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80016a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff fe66 	bl	8001378 <itoa10Unsigned>
 80016ac:	6178      	str	r0, [r7, #20]
      break;
 80016ae:	e00c      	b.n	80016ca <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80016b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff ff1a 	bl	80014f8 <itoa16>
 80016c4:	6178      	str	r0, [r7, #20]
      break;
 80016c6:	e000      	b.n	80016ca <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 80016c8:	bf00      	nop
  }

  return len;
 80016ca:	697b      	ldr	r3, [r7, #20]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 80016d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d8:	b088      	sub	sp, #32
 80016da:	af02      	add	r7, sp, #8
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	603b      	str	r3, [r7, #0]
  int len = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c59      	adds	r1, r3, #1
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	6011      	str	r1, [r2, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b58      	subs	r3, #88	; 0x58
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d86c      	bhi.n	80017d4 <handleLong+0x100>
 80016fa:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <handleLong+0x2c>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	080017b5 	.word	0x080017b5
 8001704:	080017d5 	.word	0x080017d5
 8001708:	080017d5 	.word	0x080017d5
 800170c:	080017d5 	.word	0x080017d5
 8001710:	080017d5 	.word	0x080017d5
 8001714:	080017d5 	.word	0x080017d5
 8001718:	080017d5 	.word	0x080017d5
 800171c:	080017d5 	.word	0x080017d5
 8001720:	080017d5 	.word	0x080017d5
 8001724:	080017d5 	.word	0x080017d5
 8001728:	080017d5 	.word	0x080017d5
 800172c:	080017d5 	.word	0x080017d5
 8001730:	08001785 	.word	0x08001785
 8001734:	080017d5 	.word	0x080017d5
 8001738:	080017d5 	.word	0x080017d5
 800173c:	080017d5 	.word	0x080017d5
 8001740:	080017d5 	.word	0x080017d5
 8001744:	08001785 	.word	0x08001785
 8001748:	080017d5 	.word	0x080017d5
 800174c:	080017d5 	.word	0x080017d5
 8001750:	080017d5 	.word	0x080017d5
 8001754:	080017d5 	.word	0x080017d5
 8001758:	080017d5 	.word	0x080017d5
 800175c:	080017d5 	.word	0x080017d5
 8001760:	080017d5 	.word	0x080017d5
 8001764:	080017d5 	.word	0x080017d5
 8001768:	080017d5 	.word	0x080017d5
 800176c:	080017d5 	.word	0x080017d5
 8001770:	080017d5 	.word	0x080017d5
 8001774:	0800179f 	.word	0x0800179f
 8001778:	080017d5 	.word	0x080017d5
 800177c:	080017d5 	.word	0x080017d5
 8001780:	080017b5 	.word	0x080017b5
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	17da      	asrs	r2, r3, #31
 8001788:	469a      	mov	sl, r3
 800178a:	4693      	mov	fp, r2
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4652      	mov	r2, sl
 8001792:	465b      	mov	r3, fp
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff fe61 	bl	800145c <itoa10>
 800179a:	6178      	str	r0, [r7, #20]
      break;
 800179c:	e01b      	b.n	80017d6 <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	4698      	mov	r8, r3
 80017a4:	4691      	mov	r9, r2
 80017a6:	4642      	mov	r2, r8
 80017a8:	464b      	mov	r3, r9
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7ff fde4 	bl	8001378 <itoa10Unsigned>
 80017b0:	6178      	str	r0, [r7, #20]
      break;
 80017b2:	e010      	b.n	80017d6 <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	461c      	mov	r4, r3
 80017ba:	4615      	mov	r5, r2
 80017bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4622      	mov	r2, r4
 80017c8:	462b      	mov	r3, r5
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fe94 	bl	80014f8 <itoa16>
 80017d0:	6178      	str	r0, [r7, #20]
      break;
 80017d2:	e000      	b.n	80017d6 <handleLong+0x102>
    default:
      // Nothing here
      break;
 80017d4:	bf00      	nop
  }

  return len;
 80017d6:	697b      	ldr	r3, [r7, #20]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop

080017e4 <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 80017e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e8:	ed2d 8b02 	vpush	{d8}
 80017ec:	b08e      	sub	sp, #56	; 0x38
 80017ee:	af02      	add	r7, sp, #8
 80017f0:	6178      	str	r0, [r7, #20]
 80017f2:	6139      	str	r1, [r7, #16]
 80017f4:	60fa      	str	r2, [r7, #12]
  int len=0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 80017fa:	e1ac      	b.n	8001b56 <evprintf+0x372>
  {
    if (*fmt == '%')
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b25      	cmp	r3, #37	; 0x25
 8001802:	f040 819d 	bne.w	8001b40 <evprintf+0x35c>
    {
      precision = 6;
 8001806:	2306      	movs	r3, #6
 8001808:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 800180a:	2320      	movs	r3, #32
 800180c:	76fb      	strb	r3, [r7, #27]
      width = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]

      fmt++;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b25      	cmp	r3, #37	; 0x25
 800181e:	d110      	bne.n	8001842 <evprintf+0x5e>
        putcf(*fmt++);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	613a      	str	r2, [r7, #16]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4610      	mov	r0, r2
 800182e:	4798      	blx	r3
        len++;
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	3301      	adds	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 8001836:	e18e      	b.n	8001b56 <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 8001838:	2330      	movs	r3, #48	; 0x30
 800183a:	76fb      	strb	r3, [r7, #27]
        fmt++;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3301      	adds	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b30      	cmp	r3, #48	; 0x30
 8001848:	d0f6      	beq.n	8001838 <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 800184a:	e00e      	b.n	800186a <evprintf+0x86>
			{
				width *= 10;
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3b30      	subs	r3, #48	; 0x30
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	61fb      	str	r3, [r7, #28]
				fmt++;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	3301      	adds	r3, #1
 8001868:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4ab2      	ldr	r2, [pc, #712]	; (8001b3c <evprintf+0x358>)
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e6      	bne.n	800184c <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 800187e:	e017      	b.n	80018b0 <evprintf+0xcc>
      {
        if (*fmt == '.')
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b2e      	cmp	r3, #46	; 0x2e
 8001886:	d113      	bne.n	80018b0 <evprintf+0xcc>
        {
          fmt++;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	3301      	adds	r3, #1
 800188c:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4aa9      	ldr	r2, [pc, #676]	; (8001b3c <evprintf+0x358>)
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b30      	subs	r3, #48	; 0x30
 80018a8:	623b      	str	r3, [r7, #32]
            fmt++;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	3301      	adds	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4aa1      	ldr	r2, [pc, #644]	; (8001b3c <evprintf+0x358>)
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0dd      	beq.n	8001880 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	613a      	str	r2, [r7, #16]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3b58      	subs	r3, #88	; 0x58
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	f200 8132 	bhi.w	8001b38 <evprintf+0x354>
 80018d4:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <evprintf+0xf8>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080019a9 	.word	0x080019a9
 80018e0:	08001b39 	.word	0x08001b39
 80018e4:	08001b39 	.word	0x08001b39
 80018e8:	08001b39 	.word	0x08001b39
 80018ec:	08001b39 	.word	0x08001b39
 80018f0:	08001b39 	.word	0x08001b39
 80018f4:	08001b39 	.word	0x08001b39
 80018f8:	08001b39 	.word	0x08001b39
 80018fc:	08001b39 	.word	0x08001b39
 8001900:	08001b39 	.word	0x08001b39
 8001904:	08001b39 	.word	0x08001b39
 8001908:	08001b1f 	.word	0x08001b1f
 800190c:	08001961 	.word	0x08001961
 8001910:	08001b39 	.word	0x08001b39
 8001914:	08001a33 	.word	0x08001a33
 8001918:	08001b39 	.word	0x08001b39
 800191c:	08001b39 	.word	0x08001b39
 8001920:	08001961 	.word	0x08001961
 8001924:	08001b39 	.word	0x08001b39
 8001928:	08001b39 	.word	0x08001b39
 800192c:	080019d3 	.word	0x080019d3
 8001930:	08001b39 	.word	0x08001b39
 8001934:	08001b39 	.word	0x08001b39
 8001938:	08001b39 	.word	0x08001b39
 800193c:	08001b39 	.word	0x08001b39
 8001940:	08001b39 	.word	0x08001b39
 8001944:	08001b39 	.word	0x08001b39
 8001948:	08001af3 	.word	0x08001af3
 800194c:	08001b39 	.word	0x08001b39
 8001950:	08001987 	.word	0x08001987
 8001954:	08001b39 	.word	0x08001b39
 8001958:	08001b39 	.word	0x08001b39
 800195c:	080019a9 	.word	0x080019a9
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	60fa      	str	r2, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	17da      	asrs	r2, r3, #31
 800196a:	461c      	mov	r4, r3
 800196c:	4615      	mov	r5, r2
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff fd70 	bl	800145c <itoa10>
 800197c:	4602      	mov	r2, r0
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	4413      	add	r3, r2
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8001984:	e0e7      	b.n	8001b56 <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1d1a      	adds	r2, r3, #4
 800198a:	60fa      	str	r2, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	4698      	mov	r8, r3
 8001992:	4691      	mov	r9, r2
 8001994:	4642      	mov	r2, r8
 8001996:	464b      	mov	r3, r9
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f7ff fced 	bl	8001378 <itoa10Unsigned>
 800199e:	4602      	mov	r2, r0
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	4413      	add	r3, r2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80019a6:	e0d6      	b.n	8001b56 <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1d1a      	adds	r2, r3, #4
 80019ac:	60fa      	str	r2, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	469a      	mov	sl, r3
 80019b4:	4693      	mov	fp, r2
 80019b6:	7efb      	ldrb	r3, [r7, #27]
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4652      	mov	r2, sl
 80019c0:	465b      	mov	r3, fp
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff fd98 	bl	80014f8 <itoa16>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	4413      	add	r3, r2
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80019d0:	e0c1      	b.n	8001b56 <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b6c      	cmp	r3, #108	; 0x6c
 80019d8:	d11a      	bne.n	8001a10 <evprintf+0x22c>
            fmt++;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	3301      	adds	r3, #1
 80019de:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3307      	adds	r3, #7
 80019e4:	f023 0307 	bic.w	r3, r3, #7
 80019e8:	f103 0208 	add.w	r2, r3, #8
 80019ec:	60fa      	str	r2, [r7, #12]
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f107 0010 	add.w	r0, r7, #16
 80019f6:	7ef9      	ldrb	r1, [r7, #27]
 80019f8:	9101      	str	r1, [sp, #4]
 80019fa:	69f9      	ldr	r1, [r7, #28]
 80019fc:	9100      	str	r1, [sp, #0]
 80019fe:	4601      	mov	r1, r0
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7ff fded 	bl	80015e0 <handleLongLong>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	4413      	add	r3, r2
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 8001a0e:	e0a2      	b.n	8001b56 <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1d1a      	adds	r2, r3, #4
 8001a14:	60fa      	str	r2, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	f107 0110 	add.w	r1, r7, #16
 8001a1c:	7efb      	ldrb	r3, [r7, #27]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff fe56 	bl	80016d4 <handleLong>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	4413      	add	r3, r2
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8001a30:	e091      	b.n	8001b56 <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3307      	adds	r3, #7
 8001a36:	f023 0307 	bic.w	r3, r3, #7
 8001a3a:	f103 0208 	add.w	r2, r3, #8
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f8be 	bl	8000bc8 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 8001a50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	d50b      	bpl.n	8001a76 <evprintf+0x292>
          {
            putcf('-');
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	202d      	movs	r0, #45	; 0x2d
 8001a62:	4798      	blx	r3
            num = -num;
 8001a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a68:	eef1 7a67 	vneg.f32	s15, s15
 8001a6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	3301      	adds	r3, #1
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 8001a76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 2a90 	vmov	r2, s15
 8001a82:	17d3      	asrs	r3, r2, #31
 8001a84:	603a      	str	r2, [r7, #0]
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a90:	6978      	ldr	r0, [r7, #20]
 8001a92:	f7ff fce3 	bl	800145c <itoa10>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	4413      	add	r3, r2
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	202e      	movs	r0, #46	; 0x2e
 8001aa2:	4798      	blx	r3
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 8001aaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001aba:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001abe:	6a39      	ldr	r1, [r7, #32]
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f7ff fc3b 	bl	800133c <power>
 8001ac6:	ee07 0a90 	vmov	s15, r0
 8001aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ace:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ad2:	ee17 0a90 	vmov	r0, s15
 8001ad6:	f7ff f8df 	bl	8000c98 <__aeabi_f2lz>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	6a39      	ldr	r1, [r7, #32]
 8001ae0:	9100      	str	r1, [sp, #0]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff fcba 	bl	800145c <itoa10>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	4413      	add	r3, r2
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8001af0:	e031      	b.n	8001b56 <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1d1a      	adds	r2, r3, #4
 8001af6:	60fa      	str	r2, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 8001afc:	e00a      	b.n	8001b14 <evprintf+0x330>
          {
            putcf(*str++);
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	627a      	str	r2, [r7, #36]	; 0x24
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4798      	blx	r3
            len++;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	3301      	adds	r3, #1
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <evprintf+0x31a>
          }
          break;
 8001b1c:	e01b      	b.n	8001b56 <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1d1a      	adds	r2, r3, #4
 8001b22:	60fa      	str	r2, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4798      	blx	r3
          len++;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	3301      	adds	r3, #1
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8001b36:	e00e      	b.n	8001b56 <evprintf+0x372>
        default:
          break;
 8001b38:	bf00      	nop
 8001b3a:	e00c      	b.n	8001b56 <evprintf+0x372>
 8001b3c:	0800d7e8 	.word	0x0800d7e8
      }
    }
    else
    {
      putcf(*fmt++);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	613a      	str	r2, [r7, #16]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4798      	blx	r3
      len++;
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	3301      	adds	r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f47f ae4e 	bne.w	80017fc <evprintf+0x18>
    }
  }
  
  return len;
 8001b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	ecbd 8b02 	vpop	{d8}
 8001b6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b70 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 8001b70:	b40e      	push	{r1, r2, r3}
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	69f9      	ldr	r1, [r7, #28]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fe2d 	bl	80017e4 <evprintf>
 8001b8a:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b98:	b003      	add	sp, #12
 8001b9a:	4770      	bx	lr

08001b9c <getRunTimeCounterValue>:
{

}

__weak unsigned long getRunTimeCounterValue(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 0210 	bic.w	r2, r3, #16
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40023800 	.word	0x40023800

08001c18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40023800 	.word	0x40023800

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4e:	f000 ff6d 	bl	8002b2c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c52:	f000 f87d 	bl	8001d50 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c56:	f000 fa69 	bl	800212c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c5a:	f000 fa37 	bl	80020cc <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001c5e:	f000 fa0b 	bl	8002078 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001c62:	f000 f9d3 	bl	800200c <MX_TIM7_Init>
  MX_SPI1_Init();
 8001c66:	f000 f97f 	bl	8001f68 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001c6a:	f000 f8d9 	bl	8001e20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c6e:	f000 f929 	bl	8001ec4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <main+0xd4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <main+0xd4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8001c82:	f000 fadf 	bl	8002244 <freertos_IntroTitle>



  check_enter_bootloader();
 8001c86:	f7ff f9cd 	bl	8001024 <check_enter_bootloader>

  int err = platformInit();
 8001c8a:	f7ff fa11 	bl	80010b0 <platformInit>
 8001c8e:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d000      	beq.n	8001c98 <main+0x50>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 8001c96:	e7fe      	b.n	8001c96 <main+0x4e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <main+0xd8>)
 8001c9a:	f003 ffcf 	bl	8005c3c <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <main+0xdc>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <main+0xe0>)
 8001ca4:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1002 us
 8001ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001caa:	f000 fb59 	bl	8002360 <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <main+0xdc>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <main+0xe4>)
 8001cb4:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8001cb6:	481a      	ldr	r0, [pc, #104]	; (8001d20 <main+0xd8>)
 8001cb8:	f004 f830 	bl	8005d1c <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <main+0xe4>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <main+0xe0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d30 <main+0xe8>
 8001cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cd6:	ee16 0a90 	vmov	r0, s13
 8001cda:	f7fe fc45 	bl	8000568 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4914      	ldr	r1, [pc, #80]	; (8001d34 <main+0xec>)
 8001ce4:	4814      	ldr	r0, [pc, #80]	; (8001d38 <main+0xf0>)
 8001ce6:	f7ff ff43 	bl	8001b70 <eprintf>
//  uint32_t ld = SysTick->LOAD;

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	4913      	ldr	r1, [pc, #76]	; (8001d3c <main+0xf4>)
 8001cee:	4814      	ldr	r0, [pc, #80]	; (8001d40 <main+0xf8>)
 8001cf0:	f000 ffd2 	bl	8002c98 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4913      	ldr	r1, [pc, #76]	; (8001d44 <main+0xfc>)
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <main+0x100>)
 8001cfa:	f000 ffcd 	bl	8002c98 <HAL_ADC_Start_DMA>
  while(1){

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <main+0xf4>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <main+0xfc>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4910      	ldr	r1, [pc, #64]	; (8001d4c <main+0x104>)
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <main+0xf0>)
 8001d0c:	f7ff ff30 	bl	8001b70 <eprintf>
	  delay_us(1000);
 8001d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d14:	f000 fb24 	bl	8002360 <delay_us>
	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
 8001d18:	e7f1      	b.n	8001cfe <main+0xb6>
 8001d1a:	bf00      	nop
 8001d1c:	20000404 	.word	0x20000404
 8001d20:	200003bc 	.word	0x200003bc
 8001d24:	e0001000 	.word	0xe0001000
 8001d28:	200004ac 	.word	0x200004ac
 8001d2c:	200004b0 	.word	0x200004b0
 8001d30:	42900000 	.word	0x42900000
 8001d34:	0800d090 	.word	0x0800d090
 8001d38:	080012e1 	.word	0x080012e1
 8001d3c:	200004b4 	.word	0x200004b4
 8001d40:	2000026c 	.word	0x2000026c
 8001d44:	200004b6 	.word	0x200004b6
 8001d48:	200002b4 	.word	0x200002b4
 8001d4c:	0800d0a4 	.word	0x0800d0a4

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	; 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	2230      	movs	r2, #48	; 0x30
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f009 fb62 	bl	800b428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <SystemClock_Config+0xc8>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <SystemClock_Config+0xc8>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <SystemClock_Config+0xc8>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <SystemClock_Config+0xcc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <SystemClock_Config+0xcc>)
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <SystemClock_Config+0xcc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db6:	2302      	movs	r3, #2
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001dc4:	2348      	movs	r3, #72	; 0x48
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fa49 	bl	800526c <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de0:	f000 fada 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	230f      	movs	r3, #15
 8001de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	2102      	movs	r1, #2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fcab 	bl	800575c <HAL_RCC_ClockConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e0c:	f000 fac4 	bl	8002398 <Error_Handler>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3750      	adds	r7, #80	; 0x50
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000

08001e20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e34:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <MX_ADC1_Init+0xa0>)
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e7e:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001e80:	f000 fec6 	bl	8002c10 <HAL_ADC_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 fa85 	bl	8002398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e8e:	230b      	movs	r3, #11
 8001e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e96:	2307      	movs	r3, #7
 8001e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <MX_ADC1_Init+0x98>)
 8001ea0:	f001 f828 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001eaa:	f000 fa75 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000026c 	.word	0x2000026c
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	0f000001 	.word	0x0f000001

08001ec4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001eda:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <MX_ADC2_Init+0xa0>)
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f22:	480e      	ldr	r0, [pc, #56]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f24:	f000 fe74 	bl	8002c10 <HAL_ADC_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001f2e:	f000 fa33 	bl	8002398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f32:	230c      	movs	r3, #12
 8001f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f3e:	463b      	mov	r3, r7
 8001f40:	4619      	mov	r1, r3
 8001f42:	4806      	ldr	r0, [pc, #24]	; (8001f5c <MX_ADC2_Init+0x98>)
 8001f44:	f000 ffd6 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001f4e:	f000 fa23 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002b4 	.word	0x200002b4
 8001f60:	40012100 	.word	0x40012100
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b090      	sub	sp, #64	; 0x40
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f6e:	f107 0318 	add.w	r3, r7, #24
 8001f72:	2228      	movs	r2, #40	; 0x28
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f009 fa56 	bl	800b428 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]
 8001f8a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f90:	f7ff fe42 	bl	8001c18 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fe27 	bl	8001be8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f9a:	23e0      	movs	r3, #224	; 0xe0
 8001f9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4813      	ldr	r0, [pc, #76]	; (8002004 <MX_SPI1_Init+0x9c>)
 8001fb8:	f005 f9a7 	bl	800730a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001fc0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fc4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001fd8:	2310      	movs	r3, #16
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001fe8:	f107 0318 	add.w	r3, r7, #24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <MX_SPI1_Init+0xa0>)
 8001ff0:	f005 fa2f 	bl	8007452 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_SPI1_Init+0xa0>)
 8001ff8:	f7ff fde3 	bl	8001bc2 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3740      	adds	r7, #64	; 0x40
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40020000 	.word	0x40020000
 8002008:	40013000 	.word	0x40013000

0800200c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002012:	463b      	mov	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_TIM7_Init+0x64>)
 800201c:	4a15      	ldr	r2, [pc, #84]	; (8002074 <MX_TIM7_Init+0x68>)
 800201e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <MX_TIM7_Init+0x64>)
 8002022:	2247      	movs	r2, #71	; 0x47
 8002024:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_TIM7_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_TIM7_Init+0x64>)
 800202e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002032:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_TIM7_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_TIM7_Init+0x64>)
 800203c:	f003 fdae 	bl	8005b9c <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002046:	f000 f9a7 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <MX_TIM7_Init+0x64>)
 8002058:	f004 f85e 	bl	8006118 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002062:	f000 f999 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200003bc 	.word	0x200003bc
 8002074:	40001400 	.word	0x40001400

08002078 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_USART6_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 80020b0:	f004 f8c2 	bl	8006238 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020ba:	f000 f96d 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000404 	.word	0x20000404
 80020c8:	40011400 	.word	0x40011400

080020cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_DMA_Init+0x5c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a13      	ldr	r2, [pc, #76]	; (8002128 <MX_DMA_Init+0x5c>)
 80020dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_DMA_Init+0x5c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	2038      	movs	r0, #56	; 0x38
 80020f4:	f001 fa79 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020f8:	2038      	movs	r0, #56	; 0x38
 80020fa:	f001 fa92 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2105      	movs	r1, #5
 8002102:	203a      	movs	r0, #58	; 0x3a
 8002104:	f001 fa71 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002108:	203a      	movs	r0, #58	; 0x3a
 800210a:	f001 fa8a 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	2045      	movs	r0, #69	; 0x45
 8002114:	f001 fa69 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002118:	2045      	movs	r0, #69	; 0x45
 800211a:	f001 fa82 	bl	8003622 <HAL_NVIC_EnableIRQ>

}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a35      	ldr	r2, [pc, #212]	; (8002220 <MX_GPIO_Init+0xf4>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a27      	ldr	r2, [pc, #156]	; (8002220 <MX_GPIO_Init+0xf4>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <MX_GPIO_Init+0xf4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <MX_GPIO_Init+0xf4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a20      	ldr	r2, [pc, #128]	; (8002220 <MX_GPIO_Init+0xf4>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_GPIO_Init+0xf4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2110      	movs	r1, #16
 80021b6:	481b      	ldr	r0, [pc, #108]	; (8002224 <MX_GPIO_Init+0xf8>)
 80021b8:	f001 ffec 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	4819      	ldr	r0, [pc, #100]	; (8002228 <MX_GPIO_Init+0xfc>)
 80021c2:	f001 ffe7 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 80021c6:	2310      	movs	r3, #16
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4811      	ldr	r0, [pc, #68]	; (8002224 <MX_GPIO_Init+0xf8>)
 80021de:	f001 fe3d 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 80021e2:	2310      	movs	r3, #16
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	480d      	ldr	r0, [pc, #52]	; (800222c <MX_GPIO_Init+0x100>)
 80021f8:	f001 fe30 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80021fc:	2320      	movs	r3, #32
 80021fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_GPIO_Init+0xfc>)
 8002214:	f001 fe22 	bl	8003e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800

08002230 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <OSVersion+0x10>)
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	0800d0d4 	.word	0x0800d0d4

08002244 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002248:	492e      	ldr	r1, [pc, #184]	; (8002304 <freertos_IntroTitle+0xc0>)
 800224a:	482f      	ldr	r0, [pc, #188]	; (8002308 <freertos_IntroTitle+0xc4>)
 800224c:	f7ff fc90 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8002250:	492e      	ldr	r1, [pc, #184]	; (800230c <freertos_IntroTitle+0xc8>)
 8002252:	482d      	ldr	r0, [pc, #180]	; (8002308 <freertos_IntroTitle+0xc4>)
 8002254:	f7ff fc8c 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8002258:	492d      	ldr	r1, [pc, #180]	; (8002310 <freertos_IntroTitle+0xcc>)
 800225a:	482b      	ldr	r0, [pc, #172]	; (8002308 <freertos_IntroTitle+0xc4>)
 800225c:	f7ff fc88 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8002260:	492c      	ldr	r1, [pc, #176]	; (8002314 <freertos_IntroTitle+0xd0>)
 8002262:	4829      	ldr	r0, [pc, #164]	; (8002308 <freertos_IntroTitle+0xc4>)
 8002264:	f7ff fc84 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8002268:	492b      	ldr	r1, [pc, #172]	; (8002318 <freertos_IntroTitle+0xd4>)
 800226a:	4827      	ldr	r0, [pc, #156]	; (8002308 <freertos_IntroTitle+0xc4>)
 800226c:	f7ff fc80 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8002270:	492a      	ldr	r1, [pc, #168]	; (800231c <freertos_IntroTitle+0xd8>)
 8002272:	4825      	ldr	r0, [pc, #148]	; (8002308 <freertos_IntroTitle+0xc4>)
 8002274:	f7ff fc7c 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8002278:	4929      	ldr	r1, [pc, #164]	; (8002320 <freertos_IntroTitle+0xdc>)
 800227a:	4823      	ldr	r0, [pc, #140]	; (8002308 <freertos_IntroTitle+0xc4>)
 800227c:	f7ff fc78 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8002280:	4928      	ldr	r1, [pc, #160]	; (8002324 <freertos_IntroTitle+0xe0>)
 8002282:	4821      	ldr	r0, [pc, #132]	; (8002308 <freertos_IntroTitle+0xc4>)
 8002284:	f7ff fc74 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8002288:	4927      	ldr	r1, [pc, #156]	; (8002328 <freertos_IntroTitle+0xe4>)
 800228a:	481f      	ldr	r0, [pc, #124]	; (8002308 <freertos_IntroTitle+0xc4>)
 800228c:	f7ff fc70 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8002290:	4926      	ldr	r1, [pc, #152]	; (800232c <freertos_IntroTitle+0xe8>)
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <freertos_IntroTitle+0xc4>)
 8002294:	f7ff fc6c 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8002298:	4925      	ldr	r1, [pc, #148]	; (8002330 <freertos_IntroTitle+0xec>)
 800229a:	481b      	ldr	r0, [pc, #108]	; (8002308 <freertos_IntroTitle+0xc4>)
 800229c:	f7ff fc68 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 80022a0:	4924      	ldr	r1, [pc, #144]	; (8002334 <freertos_IntroTitle+0xf0>)
 80022a2:	4819      	ldr	r0, [pc, #100]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022a4:	f7ff fc64 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 80022a8:	4923      	ldr	r1, [pc, #140]	; (8002338 <freertos_IntroTitle+0xf4>)
 80022aa:	4817      	ldr	r0, [pc, #92]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022ac:	f7ff fc60 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 80022b0:	4922      	ldr	r1, [pc, #136]	; (800233c <freertos_IntroTitle+0xf8>)
 80022b2:	4815      	ldr	r0, [pc, #84]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022b4:	f7ff fc5c 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80022b8:	4921      	ldr	r1, [pc, #132]	; (8002340 <freertos_IntroTitle+0xfc>)
 80022ba:	4813      	ldr	r0, [pc, #76]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022bc:	f7ff fc58 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80022c0:	4920      	ldr	r1, [pc, #128]	; (8002344 <freertos_IntroTitle+0x100>)
 80022c2:	4811      	ldr	r0, [pc, #68]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022c4:	f7ff fc54 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80022c8:	491f      	ldr	r1, [pc, #124]	; (8002348 <freertos_IntroTitle+0x104>)
 80022ca:	480f      	ldr	r0, [pc, #60]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022cc:	f7ff fc50 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80022d0:	491e      	ldr	r1, [pc, #120]	; (800234c <freertos_IntroTitle+0x108>)
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022d4:	f7ff fc4c 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80022d8:	491d      	ldr	r1, [pc, #116]	; (8002350 <freertos_IntroTitle+0x10c>)
 80022da:	480b      	ldr	r0, [pc, #44]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022dc:	f7ff fc48 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80022e0:	f7ff ffa6 	bl	8002230 <OSVersion>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	491a      	ldr	r1, [pc, #104]	; (8002354 <freertos_IntroTitle+0x110>)
 80022ea:	4807      	ldr	r0, [pc, #28]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022ec:	f7ff fc40 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80022f0:	4919      	ldr	r1, [pc, #100]	; (8002358 <freertos_IntroTitle+0x114>)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022f4:	f7ff fc3c 	bl	8001b70 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80022f8:	4918      	ldr	r1, [pc, #96]	; (800235c <freertos_IntroTitle+0x118>)
 80022fa:	4803      	ldr	r0, [pc, #12]	; (8002308 <freertos_IntroTitle+0xc4>)
 80022fc:	f7ff fc38 	bl	8001b70 <eprintf>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	0800d0dc 	.word	0x0800d0dc
 8002308:	080012e1 	.word	0x080012e1
 800230c:	0800d11c 	.word	0x0800d11c
 8002310:	0800d170 	.word	0x0800d170
 8002314:	0800d1c4 	.word	0x0800d1c4
 8002318:	0800d218 	.word	0x0800d218
 800231c:	0800d26c 	.word	0x0800d26c
 8002320:	0800d2c0 	.word	0x0800d2c0
 8002324:	0800d314 	.word	0x0800d314
 8002328:	0800d368 	.word	0x0800d368
 800232c:	0800d3bc 	.word	0x0800d3bc
 8002330:	0800d410 	.word	0x0800d410
 8002334:	0800d464 	.word	0x0800d464
 8002338:	0800d4b8 	.word	0x0800d4b8
 800233c:	0800d50c 	.word	0x0800d50c
 8002340:	0800d560 	.word	0x0800d560
 8002344:	0800d5b4 	.word	0x0800d5b4
 8002348:	0800d608 	.word	0x0800d608
 800234c:	0800d65c 	.word	0x0800d65c
 8002350:	0800d6a4 	.word	0x0800d6a4
 8002354:	0800d6d4 	.word	0x0800d6d4
 8002358:	0800d718 	.word	0x0800d718
 800235c:	0800d744 	.word	0x0800d744

08002360 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 800236a:	480a      	ldr	r0, [pc, #40]	; (8002394 <delay_us+0x34>)
 800236c:	f003 fc66 	bl	8005c3c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <delay_us+0x34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002378:	bf00      	nop
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <delay_us+0x34>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3f9      	bcc.n	800237a <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8002386:	4803      	ldr	r0, [pc, #12]	; (8002394 <delay_us+0x34>)
 8002388:	f003 fcc8 	bl	8005d1c <HAL_TIM_Base_Stop_IT>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200003bc 	.word	0x200003bc

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <Error_Handler+0x8>
	...

080023a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_MspInit+0x64>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_MspInit+0x64>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_MspInit+0x64>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_MspInit+0x64>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_MspInit+0x64>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_MspInit+0x64>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	210f      	movs	r1, #15
 80023e6:	f06f 0001 	mvn.w	r0, #1
 80023ea:	f001 f8fe 	bl	80035ea <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2105      	movs	r1, #5
 80023f2:	2005      	movs	r0, #5
 80023f4:	f001 f8f9 	bl	80035ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80023f8:	2005      	movs	r0, #5
 80023fa:	f001 f912 	bl	8003622 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	; 0x30
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d158      	bne.n	80024e0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a5c      	ldr	r2, [pc, #368]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a55      	ldr	r2, [pc, #340]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 8002466:	2302      	movs	r3, #2
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	484c      	ldr	r0, [pc, #304]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 800247a:	f001 fcef 	bl	8003e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 8002480:	4a4c      	ldr	r2, [pc, #304]	; (80025b4 <HAL_ADC_MspInit+0x1a8>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 8002498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800249c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800249e:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024bc:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024c2:	483b      	ldr	r0, [pc, #236]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024c4:	f001 f8c8 	bl	8003658 <HAL_DMA_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80024ce:	f7ff ff63 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a36      	ldr	r2, [pc, #216]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
 80024d8:	4a35      	ldr	r2, [pc, #212]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80024de:	e05d      	b.n	800259c <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a34      	ldr	r2, [pc, #208]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d158      	bne.n	800259c <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 80024f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 8002522:	2304      	movs	r3, #4
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	4619      	mov	r1, r3
 8002534:	481d      	ldr	r0, [pc, #116]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 8002536:	f001 fc91 	bl	8003e5c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 800253c:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_ADC_MspInit+0x1b4>)
 800253e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002546:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 800255e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002562:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 800256e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002572:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002580:	480e      	ldr	r0, [pc, #56]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002582:	f001 f869 	bl	8003658 <HAL_DMA_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 800258c:	f7ff ff04 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002594:	639a      	str	r2, [r3, #56]	; 0x38
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800259c:	bf00      	nop
 800259e:	3730      	adds	r7, #48	; 0x30
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40012000 	.word	0x40012000
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020800 	.word	0x40020800
 80025b0:	200002fc 	.word	0x200002fc
 80025b4:	40026410 	.word	0x40026410
 80025b8:	40012100 	.word	0x40012100
 80025bc:	2000035c 	.word	0x2000035c
 80025c0:	40026440 	.word	0x40026440

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_TIM_Base_MspInit+0x48>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d115      	bne.n	8002602 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_TIM_Base_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <HAL_TIM_Base_MspInit+0x4c>)
 80025e0:	f043 0320 	orr.w	r3, r3, #32
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_TIM_Base_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2105      	movs	r1, #5
 80025f6:	2037      	movs	r0, #55	; 0x37
 80025f8:	f000 fff7 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025fc:	2037      	movs	r0, #55	; 0x37
 80025fe:	f001 f810 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40001400 	.word	0x40001400
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a34      	ldr	r2, [pc, #208]	; (8002704 <HAL_UART_MspInit+0xf0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d161      	bne.n	80026fa <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_UART_MspInit+0xf4>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a32      	ldr	r2, [pc, #200]	; (8002708 <HAL_UART_MspInit+0xf4>)
 8002640:	f043 0320 	orr.w	r3, r3, #32
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_UART_MspInit+0xf4>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_UART_MspInit+0xf4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_UART_MspInit+0xf4>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_UART_MspInit+0xf4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 800266e:	23c0      	movs	r3, #192	; 0xc0
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800267e:	2308      	movs	r3, #8
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4820      	ldr	r0, [pc, #128]	; (800270c <HAL_UART_MspInit+0xf8>)
 800268a:	f001 fbe7 	bl	8003e5c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_UART_MspInit+0xfc>)
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_UART_MspInit+0x100>)
 8002692:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_UART_MspInit+0xfc>)
 8002696:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800269a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_UART_MspInit+0xfc>)
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ae:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80026ce:	4810      	ldr	r0, [pc, #64]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026d0:	f000 ffc2 	bl	8003658 <HAL_DMA_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80026da:	f7ff fe5d 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	2047      	movs	r0, #71	; 0x47
 80026f0:	f000 ff7b 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80026f4:	2047      	movs	r0, #71	; 0x47
 80026f6:	f000 ff94 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026fa:	bf00      	nop
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40011400 	.word	0x40011400
 8002708:	40023800 	.word	0x40023800
 800270c:	40020800 	.word	0x40020800
 8002710:	2000044c 	.word	0x2000044c
 8002714:	400264a0 	.word	0x400264a0

08002718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800271c:	e7fe      	b.n	800271c <NMI_Handler+0x4>

0800271e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <MemManage_Handler+0x4>

0800272a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <BusFault_Handler+0x4>

08002730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <UsageFault_Handler+0x4>

08002736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <SysTick_Handler+0x2c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <SysTick_Handler+0x16>

		TimingDelay--;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <SysTick_Handler+0x2c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <SysTick_Handler+0x2c>)
 8002758:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275a:	f000 fa39 	bl	8002bd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800275e:	f007 fc4f 	bl	800a000 <xTaskGetSchedulerState>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002768:	f007 fd3e 	bl	800a1e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200004bc 	.word	0x200004bc

08002774 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <TIM7_IRQHandler+0x10>)
 800278a:	f003 faf6 	bl	8005d7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200003bc 	.word	0x200003bc

08002798 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA2_Stream0_IRQHandler+0x10>)
 800279e:	f001 f8f3 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200002fc 	.word	0x200002fc

080027ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA2_Stream2_IRQHandler+0x10>)
 80027b2:	f001 f8e9 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000035c 	.word	0x2000035c

080027c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <OTG_FS_IRQHandler+0x10>)
 80027c6:	f001 fcfe 	bl	80041c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200006b0 	.word	0x200006b0

080027d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <DMA2_Stream6_IRQHandler+0xa8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f007 f924 	bl	8009a32 <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <DMA2_Stream6_IRQHandler+0xac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <DMA2_Stream6_IRQHandler+0xb0>)
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d904      	bls.n	8002804 <DMA2_Stream6_IRQHandler+0x30>
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <DMA2_Stream6_IRQHandler+0xb4>)
 80027fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e019      	b.n	8002838 <DMA2_Stream6_IRQHandler+0x64>
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <DMA2_Stream6_IRQHandler+0xac>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <DMA2_Stream6_IRQHandler+0xb8>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d904      	bls.n	800281a <DMA2_Stream6_IRQHandler+0x46>
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <DMA2_Stream6_IRQHandler+0xb4>)
 8002812:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002816:	6093      	str	r3, [r2, #8]
 8002818:	e00e      	b.n	8002838 <DMA2_Stream6_IRQHandler+0x64>
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <DMA2_Stream6_IRQHandler+0xac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <DMA2_Stream6_IRQHandler+0xbc>)
 8002822:	429a      	cmp	r2, r3
 8002824:	d904      	bls.n	8002830 <DMA2_Stream6_IRQHandler+0x5c>
 8002826:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <DMA2_Stream6_IRQHandler+0xc0>)
 8002828:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800282c:	60d3      	str	r3, [r2, #12]
 800282e:	e003      	b.n	8002838 <DMA2_Stream6_IRQHandler+0x64>
 8002830:	4a18      	ldr	r2, [pc, #96]	; (8002894 <DMA2_Stream6_IRQHandler+0xc0>)
 8002832:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002836:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <DMA2_Stream6_IRQHandler+0xac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <DMA2_Stream6_IRQHandler+0xac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <DMA2_Stream6_IRQHandler+0xa8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1d3a      	adds	r2, r7, #4
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f007 f861 	bl	8009918 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <DMA2_Stream6_IRQHandler+0x98>
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <DMA2_Stream6_IRQHandler+0xc4>)
 800285e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <DMA2_Stream6_IRQHandler+0xac>)
 800286e:	f001 f88b 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000268 	.word	0x20000268
 8002880:	2000044c 	.word	0x2000044c
 8002884:	40026458 	.word	0x40026458
 8002888:	40026400 	.word	0x40026400
 800288c:	400260b8 	.word	0x400260b8
 8002890:	40026058 	.word	0x40026058
 8002894:	40026000 	.word	0x40026000
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <USART6_IRQHandler+0x7c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d12b      	bne.n	8002908 <USART6_IRQHandler+0x6c>
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <USART6_IRQHandler+0x7c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d024      	beq.n	8002908 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <USART6_IRQHandler+0x7c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <USART6_IRQHandler+0x80>)
 80028cc:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 80028ce:	2300      	movs	r3, #0
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <USART6_IRQHandler+0x7c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <USART6_IRQHandler+0x7c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <USART6_IRQHandler+0x84>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	1d3a      	adds	r2, r7, #4
 80028ea:	2300      	movs	r3, #0
 80028ec:	490b      	ldr	r1, [pc, #44]	; (800291c <USART6_IRQHandler+0x80>)
 80028ee:	f006 ff78 	bl	80097e2 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <USART6_IRQHandler+0x6c>
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <USART6_IRQHandler+0x88>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <USART6_IRQHandler+0x7c>)
 800290a:	f003 fce5 	bl	80062d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000404 	.word	0x20000404
 800291c:	200004b8 	.word	0x200004b8
 8002920:	20000264 	.word	0x20000264
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return 1;
 800292c:	2301      	movs	r3, #1
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_kill>:

int _kill(int pid, int sig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002942:	f008 fdd7 	bl	800b4f4 <__errno>
 8002946:	4603      	mov	r3, r0
 8002948:	2216      	movs	r2, #22
 800294a:	601a      	str	r2, [r3, #0]
  return -1;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_exit>:

void _exit (int status)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ffe7 	bl	8002938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800296a:	e7fe      	b.n	800296a <_exit+0x12>

0800296c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e00a      	b.n	8002994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800297e:	f3af 8000 	nop.w
 8002982:	4601      	mov	r1, r0
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	60ba      	str	r2, [r7, #8]
 800298a:	b2ca      	uxtb	r2, r1
 800298c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	dbf0      	blt.n	800297e <_read+0x12>
  }

  return len;
 800299c:	687b      	ldr	r3, [r7, #4]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e009      	b.n	80029cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60ba      	str	r2, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	dbf1      	blt.n	80029b8 <_write+0x12>
  }
  return len;
 80029d4:	687b      	ldr	r3, [r7, #4]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_close>:

int _close(int file)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a06:	605a      	str	r2, [r3, #4]
  return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_isatty>:

int _isatty(int file)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a1e:	2301      	movs	r3, #1
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <_sbrk+0x5c>)
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <_sbrk+0x60>)
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <_sbrk+0x64>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <_sbrk+0x68>)
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d207      	bcs.n	8002a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a78:	f008 fd3c 	bl	800b4f4 <__errno>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	220c      	movs	r2, #12
 8002a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a86:	e009      	b.n	8002a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <_sbrk+0x64>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <_sbrk+0x64>)
 8002a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20020000 	.word	0x20020000
 8002aa8:	00000400 	.word	0x00000400
 8002aac:	200004c0 	.word	0x200004c0
 8002ab0:	20000ce0 	.word	0x20000ce0

08002ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <SystemInit+0x20>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <SystemInit+0x20>)
 8002ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002adc:	f7ff ffea 	bl	8002ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ae2:	490d      	ldr	r1, [pc, #52]	; (8002b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae8:	e002      	b.n	8002af0 <LoopCopyDataInit>

08002aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aee:	3304      	adds	r3, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af4:	d3f9      	bcc.n	8002aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af8:	4c0a      	ldr	r4, [pc, #40]	; (8002b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002afc:	e001      	b.n	8002b02 <LoopFillZerobss>

08002afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b00:	3204      	adds	r2, #4

08002b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b04:	d3fb      	bcc.n	8002afe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002b06:	f008 fcfb 	bl	800b500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b0a:	f7ff f89d 	bl	8001c48 <main>
  bx  lr    
 8002b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b18:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8002b1c:	0800db6c 	.word	0x0800db6c
  ldr r2, =_sbss
 8002b20:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8002b24:	20000ce0 	.word	0x20000ce0

08002b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b28:	e7fe      	b.n	8002b28 <ADC_IRQHandler>
	...

08002b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_Init+0x40>)
 8002b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_Init+0x40>)
 8002b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <HAL_Init+0x40>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 fd3d 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b5a:	200f      	movs	r0, #15
 8002b5c:	f000 f808 	bl	8002b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b60:	f7ff fc20 	bl	80023a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x54>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_InitTick+0x58>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fd55 	bl	800363e <HAL_SYSTICK_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00e      	b.n	8002bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d80a      	bhi.n	8002bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bac:	f000 fd1d 	bl	80035ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <HAL_InitTick+0x5c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000070 	.word	0x20000070
 8002bc8:	20000078 	.word	0x20000078
 8002bcc:	20000074 	.word	0x20000074

08002bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x20>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_IncTick+0x24>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_IncTick+0x24>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000078 	.word	0x20000078
 8002bf4:	200004c4 	.word	0x200004c4

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	200004c4 	.word	0x200004c4

08002c10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e033      	b.n	8002c8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fbec 	bl	800240c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c56:	f023 0302 	bic.w	r3, r3, #2
 8002c5a:	f043 0202 	orr.w	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa68 	bl	8003138 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7e:	e001      	b.n	8002c84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Start_DMA+0x1e>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0e9      	b.n	8002e8a <HAL_ADC_Start_DMA+0x1f2>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d018      	beq.n	8002cfe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cdc:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_ADC_Start_DMA+0x1fc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6d      	ldr	r2, [pc, #436]	; (8002e98 <HAL_ADC_Start_DMA+0x200>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9a      	lsrs	r2, r3, #18
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d107      	bne.n	8002d1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 80a1 	bne.w	8002e70 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d106      	bne.n	8002d7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f023 0206 	bic.w	r2, r3, #6
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
 8002d7a:	e002      	b.n	8002d82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_ADC_Start_DMA+0x204>)
 8002d8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	4a43      	ldr	r2, [pc, #268]	; (8002ea0 <HAL_ADC_Start_DMA+0x208>)
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	4a42      	ldr	r2, [pc, #264]	; (8002ea4 <HAL_ADC_Start_DMA+0x20c>)
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	4a41      	ldr	r2, [pc, #260]	; (8002ea8 <HAL_ADC_Start_DMA+0x210>)
 8002da4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002dae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dce:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	334c      	adds	r3, #76	; 0x4c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f000 fce8 	bl	80037b4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d12a      	bne.n	8002e46 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <HAL_ADC_Start_DMA+0x214>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d015      	beq.n	8002e26 <HAL_ADC_Start_DMA+0x18e>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <HAL_ADC_Start_DMA+0x218>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d105      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x178>
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_ADC_Start_DMA+0x204>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <HAL_ADC_Start_DMA+0x21c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d136      	bne.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_ADC_Start_DMA+0x204>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d130      	bne.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d129      	bne.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e020      	b.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_ADC_Start_DMA+0x214>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d11b      	bne.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d114      	bne.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	e00b      	b.n	8002e88 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000070 	.word	0x20000070
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	40012300 	.word	0x40012300
 8002ea0:	08003331 	.word	0x08003331
 8002ea4:	080033eb 	.word	0x080033eb
 8002ea8:	08003407 	.word	0x08003407
 8002eac:	40012000 	.word	0x40012000
 8002eb0:	40012100 	.word	0x40012100
 8002eb4:	40012200 	.word	0x40012200

08002eb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e105      	b.n	800311c <HAL_ADC_ConfigChannel+0x228>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d925      	bls.n	8002f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	3b1e      	subs	r3, #30
 8002f36:	2207      	movs	r2, #7
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	400a      	ands	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	4603      	mov	r3, r0
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4403      	add	r3, r0
 8002f5e:	3b1e      	subs	r3, #30
 8002f60:	409a      	lsls	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e022      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	2207      	movs	r2, #7
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4403      	add	r3, r0
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d824      	bhi.n	8003004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b05      	subs	r3, #5
 8002fcc:	221f      	movs	r2, #31
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	400a      	ands	r2, r1
 8002fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b05      	subs	r3, #5
 8002ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	635a      	str	r2, [r3, #52]	; 0x34
 8003002:	e04c      	b.n	800309e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d824      	bhi.n	8003056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b23      	subs	r3, #35	; 0x23
 800301e:	221f      	movs	r2, #31
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43da      	mvns	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	400a      	ands	r2, r1
 800302c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b23      	subs	r3, #35	; 0x23
 8003048:	fa00 f203 	lsl.w	r2, r0, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
 8003054:	e023      	b.n	800309e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	3b41      	subs	r3, #65	; 0x41
 8003068:	221f      	movs	r2, #31
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43da      	mvns	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	400a      	ands	r2, r1
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	4618      	mov	r0, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b41      	subs	r3, #65	; 0x41
 8003092:	fa00 f203 	lsl.w	r2, r0, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_ADC_ConfigChannel+0x234>)
 80030a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_ADC_ConfigChannel+0x238>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d109      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1cc>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a19      	ldr	r2, [pc, #100]	; (800312c <HAL_ADC_ConfigChannel+0x238>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d123      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d003      	beq.n	80030da <HAL_ADC_ConfigChannel+0x1e6>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b11      	cmp	r3, #17
 80030d8:	d11b      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d111      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_ADC_ConfigChannel+0x23c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a10      	ldr	r2, [pc, #64]	; (8003134 <HAL_ADC_ConfigChannel+0x240>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9a      	lsrs	r2, r3, #18
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003104:	e002      	b.n	800310c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3b01      	subs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40012300 	.word	0x40012300
 800312c:	40012000 	.word	0x40012000
 8003130:	20000070 	.word	0x20000070
 8003134:	431bde83 	.word	0x431bde83

08003138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003140:	4b79      	ldr	r3, [pc, #484]	; (8003328 <ADC_Init+0x1f0>)
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	4a58      	ldr	r2, [pc, #352]	; (800332c <ADC_Init+0x1f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e00f      	b.n	8003236 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003234:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0202 	bic.w	r2, r2, #2
 8003244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e1b      	ldrb	r3, [r3, #24]
 8003250:	005a      	lsls	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003272:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003282:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	3b01      	subs	r3, #1
 8003290:	035a      	lsls	r2, r3, #13
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e007      	b.n	80032ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	051a      	lsls	r2, r3, #20
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ee:	025a      	lsls	r2, r3, #9
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	029a      	lsls	r2, r3, #10
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012300 	.word	0x40012300
 800332c:	0f000001 	.word	0x0f000001

08003330 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003346:	2b00      	cmp	r3, #0
 8003348:	d13c      	bne.n	80033c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12b      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003368:	2b00      	cmp	r3, #0
 800336a:	d127      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0220 	bic.w	r2, r2, #32
 8003396:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff fd7b 	bl	8002eb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033c2:	e00e      	b.n	80033e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff fd85 	bl	8002ee0 <HAL_ADC_ErrorCallback>
}
 80033d6:	e004      	b.n	80033e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff fd67 	bl	8002ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2240      	movs	r2, #64	; 0x40
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fd5a 	bl	8002ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800345c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__NVIC_GetPriorityGrouping+0x18>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0307 	and.w	r3, r3, #7
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0b      	blt.n	80034c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <__NVIC_EnableIRQ+0x38>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	; (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff29 	bl	8003434 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035fc:	f7ff ff3e 	bl	800347c <__NVIC_GetPriorityGrouping>
 8003600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff8e 	bl	8003528 <NVIC_EncodePriority>
 800360c:	4602      	mov	r2, r0
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff5d 	bl	80034d4 <__NVIC_SetPriority>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff31 	bl	8003498 <__NVIC_EnableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffa2 	bl	8003590 <SysTick_Config>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7ff fac8 	bl	8002bf8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e099      	b.n	80037a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003694:	e00f      	b.n	80036b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003696:	f7ff faaf 	bl	8002bf8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d908      	bls.n	80036b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e078      	b.n	80037a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e8      	bne.n	8003696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <HAL_DMA_Init+0x158>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4313      	orrs	r3, r2
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b04      	cmp	r3, #4
 8003748:	d117      	bne.n	800377a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fb01 	bl	8003d64 <DMA_CheckFifoParam>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003776:	2301      	movs	r3, #1
 8003778:	e016      	b.n	80037a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fab8 	bl	8003cf8 <DMA_CalcBaseAndBitshift>
 8003788:	4603      	mov	r3, r0
 800378a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	223f      	movs	r2, #63	; 0x3f
 8003792:	409a      	lsls	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	f010803f 	.word	0xf010803f

080037b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_DMA_Start_IT+0x26>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e040      	b.n	800385c <HAL_DMA_Start_IT+0xa8>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d12f      	bne.n	800384e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fa4a 	bl	8003c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	223f      	movs	r2, #63	; 0x3f
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0216 	orr.w	r2, r2, #22
 8003822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e005      	b.n	800385a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800385a:	7dfb      	ldrb	r3, [r7, #23]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003872:	f7ff f9c1 	bl	8002bf8 <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d008      	beq.n	8003896 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e052      	b.n	800393c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0216 	bic.w	r2, r2, #22
 80038a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <HAL_DMA_Abort+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0208 	bic.w	r2, r2, #8
 80038d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e6:	e013      	b.n	8003910 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e8:	f7ff f986 	bl	8002bf8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d90c      	bls.n	8003910 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2203      	movs	r2, #3
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e015      	b.n	800393c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e4      	bne.n	80038e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	223f      	movs	r2, #63	; 0x3f
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00c      	b.n	800397c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2205      	movs	r2, #5
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003994:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_DMA_IRQHandler+0x248>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8e      	ldr	r2, [pc, #568]	; (8003bd4 <HAL_DMA_IRQHandler+0x24c>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2208      	movs	r2, #8
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2210      	movs	r2, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d043      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2210      	movs	r2, #16
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e01f      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2220      	movs	r2, #32
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808f 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8087 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2220      	movs	r2, #32
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d136      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x1da>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	223f      	movs	r2, #63	; 0x3f
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07e      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
        }
        return;
 8003b9e:	e079      	b.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d031      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e02c      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
 8003bce:	bf00      	nop
 8003bd0:	20000070 	.word	0x20000070
 8003bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
 8003be8:	e01e      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0210 	bic.w	r2, r2, #16
 8003c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d032      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2205      	movs	r2, #5
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d307      	bcc.n	8003c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x2cc>
 8003c6e:	e000      	b.n	8003c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c94:	bf00      	nop
    }
  }
}
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d108      	bne.n	8003cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cda:	e007      	b.n	8003cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b10      	subs	r3, #16
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <DMA_CalcBaseAndBitshift+0x64>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA_CalcBaseAndBitshift+0x68>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d909      	bls.n	8003d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
 8003d38:	e007      	b.n	8003d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab
 8003d60:	0800d7e0 	.word	0x0800d7e0

08003d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11f      	bne.n	8003dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d856      	bhi.n	8003e32 <DMA_CheckFifoParam+0xce>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <DMA_CheckFifoParam+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003daf 	.word	0x08003daf
 8003d94:	08003d9d 	.word	0x08003d9d
 8003d98:	08003e33 	.word	0x08003e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d046      	beq.n	8003e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e043      	b.n	8003e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db6:	d140      	bne.n	8003e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e03d      	b.n	8003e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d121      	bne.n	8003e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d837      	bhi.n	8003e3e <DMA_CheckFifoParam+0xda>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <DMA_CheckFifoParam+0x70>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003deb 	.word	0x08003deb
 8003ddc:	08003de5 	.word	0x08003de5
 8003de0:	08003dfd 	.word	0x08003dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e030      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d025      	beq.n	8003e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e022      	b.n	8003e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e04:	d11f      	bne.n	8003e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e0a:	e01c      	b.n	8003e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d903      	bls.n	8003e1a <DMA_CheckFifoParam+0xb6>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d003      	beq.n	8003e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e18:	e018      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1e:	e015      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e00b      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e32:	bf00      	nop
 8003e34:	e00a      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e008      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e006      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e16b      	b.n	8004150 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e78:	2201      	movs	r2, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f040 815a 	bne.w	800414a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d005      	beq.n	8003eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d130      	bne.n	8003f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 0201 	and.w	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d017      	beq.n	8003f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d123      	bne.n	8003fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80b4 	beq.w	800414a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b60      	ldr	r3, [pc, #384]	; (8004168 <HAL_GPIO_Init+0x30c>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a5f      	ldr	r2, [pc, #380]	; (8004168 <HAL_GPIO_Init+0x30c>)
 8003fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b5d      	ldr	r3, [pc, #372]	; (8004168 <HAL_GPIO_Init+0x30c>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ffe:	4a5b      	ldr	r2, [pc, #364]	; (800416c <HAL_GPIO_Init+0x310>)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_GPIO_Init+0x314>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02b      	beq.n	8004082 <HAL_GPIO_Init+0x226>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a51      	ldr	r2, [pc, #324]	; (8004174 <HAL_GPIO_Init+0x318>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d025      	beq.n	800407e <HAL_GPIO_Init+0x222>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a50      	ldr	r2, [pc, #320]	; (8004178 <HAL_GPIO_Init+0x31c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <HAL_GPIO_Init+0x21e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_GPIO_Init+0x320>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d019      	beq.n	8004076 <HAL_GPIO_Init+0x21a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_GPIO_Init+0x216>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4d      	ldr	r2, [pc, #308]	; (8004184 <HAL_GPIO_Init+0x328>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00d      	beq.n	800406e <HAL_GPIO_Init+0x212>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_GPIO_Init+0x32c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <HAL_GPIO_Init+0x20e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_GPIO_Init+0x330>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_GPIO_Init+0x20a>
 8004062:	2307      	movs	r3, #7
 8004064:	e00e      	b.n	8004084 <HAL_GPIO_Init+0x228>
 8004066:	2308      	movs	r3, #8
 8004068:	e00c      	b.n	8004084 <HAL_GPIO_Init+0x228>
 800406a:	2306      	movs	r3, #6
 800406c:	e00a      	b.n	8004084 <HAL_GPIO_Init+0x228>
 800406e:	2305      	movs	r3, #5
 8004070:	e008      	b.n	8004084 <HAL_GPIO_Init+0x228>
 8004072:	2304      	movs	r3, #4
 8004074:	e006      	b.n	8004084 <HAL_GPIO_Init+0x228>
 8004076:	2303      	movs	r3, #3
 8004078:	e004      	b.n	8004084 <HAL_GPIO_Init+0x228>
 800407a:	2302      	movs	r3, #2
 800407c:	e002      	b.n	8004084 <HAL_GPIO_Init+0x228>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_GPIO_Init+0x228>
 8004082:	2300      	movs	r3, #0
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f002 0203 	and.w	r2, r2, #3
 800408a:	0092      	lsls	r2, r2, #2
 800408c:	4093      	lsls	r3, r2
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004094:	4935      	ldr	r1, [pc, #212]	; (800416c <HAL_GPIO_Init+0x310>)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	3302      	adds	r3, #2
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_GPIO_Init+0x334>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040c6:	4a32      	ldr	r2, [pc, #200]	; (8004190 <HAL_GPIO_Init+0x334>)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040cc:	4b30      	ldr	r3, [pc, #192]	; (8004190 <HAL_GPIO_Init+0x334>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <HAL_GPIO_Init+0x334>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <HAL_GPIO_Init+0x334>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800411a:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <HAL_GPIO_Init+0x334>)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_GPIO_Init+0x334>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004144:	4a12      	ldr	r2, [pc, #72]	; (8004190 <HAL_GPIO_Init+0x334>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3301      	adds	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b0f      	cmp	r3, #15
 8004154:	f67f ae90 	bls.w	8003e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	40013800 	.word	0x40013800
 8004170:	40020000 	.word	0x40020000
 8004174:	40020400 	.word	0x40020400
 8004178:	40020800 	.word	0x40020800
 800417c:	40020c00 	.word	0x40020c00
 8004180:	40021000 	.word	0x40021000
 8004184:	40021400 	.word	0x40021400
 8004188:	40021800 	.word	0x40021800
 800418c:	40021c00 	.word	0x40021c00
 8004190:	40013c00 	.word	0x40013c00

08004194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
 80041a0:	4613      	mov	r3, r2
 80041a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041b0:	e003      	b.n	80041ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	041a      	lsls	r2, r3, #16
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041c6:	b590      	push	{r4, r7, lr}
 80041c8:	b08d      	sub	sp, #52	; 0x34
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f004 f870 	bl	80082c2 <USB_GetMode>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 848c 	bne.w	8004b02 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 ffd4 	bl	800819c <USB_ReadInterrupts>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8482 	beq.w	8004b00 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 ffc1 	bl	800819c <USB_ReadInterrupts>
 800421a:	4603      	mov	r3, r0
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	d107      	bne.n	8004234 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f002 0202 	and.w	r2, r2, #2
 8004232:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f003 ffaf 	bl	800819c <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d161      	bne.n	800430c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0210 	bic.w	r2, r2, #16
 8004256:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	0c5b      	lsrs	r3, r3, #17
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	2b02      	cmp	r3, #2
 8004282:	d124      	bne.n	80042ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d035      	beq.n	80042fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800429a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6a38      	ldr	r0, [r7, #32]
 80042a4:	f003 fe28 	bl	8007ef8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b4:	441a      	add	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c6:	441a      	add	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	615a      	str	r2, [r3, #20]
 80042cc:	e016      	b.n	80042fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	0c5b      	lsrs	r3, r3, #17
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d110      	bne.n	80042fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80042e0:	2208      	movs	r2, #8
 80042e2:	4619      	mov	r1, r3
 80042e4:	6a38      	ldr	r0, [r7, #32]
 80042e6:	f003 fe07 	bl	8007ef8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f6:	441a      	add	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0210 	orr.w	r2, r2, #16
 800430a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 ff43 	bl	800819c <USB_ReadInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004320:	f040 80a7 	bne.w	8004472 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f003 ff48 	bl	80081c2 <USB_ReadDevAllOutEpInterrupt>
 8004332:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004334:	e099      	b.n	800446a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 808e 	beq.w	800445e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f003 ff6c 	bl	800822a <USB_ReadDevOutEPInterrupt>
 8004352:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00c      	beq.n	8004378 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	2301      	movs	r3, #1
 800436e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fe40 	bl	8004ff8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	461a      	mov	r2, r3
 8004390:	2308      	movs	r3, #8
 8004392:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 ff16 	bl	80051c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	2310      	movs	r3, #16
 80043b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d030      	beq.n	8004424 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d109      	bne.n	80043e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	3304      	adds	r3, #4
 80043f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d108      	bne.n	8004412 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f005 ffff 	bl	800a410 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	2302      	movs	r3, #2
 8004422:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	2320      	movs	r3, #32
 800443e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800445c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	3301      	adds	r3, #1
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f af62 	bne.w	8004336 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f003 fe90 	bl	800819c <USB_ReadInterrupts>
 800447c:	4603      	mov	r3, r0
 800447e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004486:	f040 80db 	bne.w	8004640 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f003 feb1 	bl	80081f6 <USB_ReadDevAllInEpInterrupt>
 8004494:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800449a:	e0cd      	b.n	8004638 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80c2 	beq.w	800462c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f003 fed7 	bl	8008266 <USB_ReadDevInEPInterrupt>
 80044b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d057      	beq.n	8004574 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	2201      	movs	r2, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	43db      	mvns	r3, r3
 80044de:	69f9      	ldr	r1, [r7, #28]
 80044e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e4:	4013      	ands	r3, r2
 80044e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	461a      	mov	r2, r3
 80044f6:	2301      	movs	r3, #1
 80044f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	799b      	ldrb	r3, [r3, #6]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d132      	bne.n	8004568 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	3320      	adds	r3, #32
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4403      	add	r3, r0
 8004522:	331c      	adds	r3, #28
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4419      	add	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4403      	add	r3, r0
 8004536:	3320      	adds	r3, #32
 8004538:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d113      	bne.n	8004568 <HAL_PCD_IRQHandler+0x3a2>
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004560:	461a      	mov	r2, r3
 8004562:	2101      	movs	r1, #1
 8004564:	f003 fede 	bl	8008324 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	b2db      	uxtb	r3, r3
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f005 fec9 	bl	800a306 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	461a      	mov	r2, r3
 800458c:	2308      	movs	r3, #8
 800458e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	2310      	movs	r3, #16
 80045aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	461a      	mov	r2, r3
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d023      	beq.n	800461a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80045d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d4:	6a38      	ldr	r0, [r7, #32]
 80045d6:	f003 f831 	bl	800763c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3310      	adds	r3, #16
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	3304      	adds	r3, #4
 80045ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	78db      	ldrb	r3, [r3, #3]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f005 ff16 	bl	800a434 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	2302      	movs	r3, #2
 8004618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fc59 	bl	8004ede <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	3301      	adds	r3, #1
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f af2e 	bne.w	800449c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f003 fda9 	bl	800819c <USB_ReadInterrupts>
 800464a:	4603      	mov	r3, r0
 800464c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004654:	d122      	bne.n	800469c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004670:	2b01      	cmp	r3, #1
 8004672:	d108      	bne.n	8004686 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800467c:	2100      	movs	r1, #0
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fde8 	bl	8005254 <HAL_PCDEx_LPM_Callback>
 8004684:	e002      	b.n	800468c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f005 feb4 	bl	800a3f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800469a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f003 fd7b 	bl	800819c <USB_ReadInterrupts>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	d112      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d102      	bne.n	80046c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f005 fe70 	bl	800a3a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046d6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f003 fd5d 	bl	800819c <USB_ReadInterrupts>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	f040 80b7 	bne.w	800485e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2110      	movs	r1, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f002 ff96 	bl	800763c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004714:	e046      	b.n	80047a4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	461a      	mov	r2, r3
 8004724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004728:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004748:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	461a      	mov	r2, r3
 8004758:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800475c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004778:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800477c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004798:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	3301      	adds	r3, #1
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	791b      	ldrb	r3, [r3, #4]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d3b2      	bcc.n	8004716 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	7bdb      	ldrb	r3, [r3, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047dc:	f043 030b 	orr.w	r3, r3, #11
 80047e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f2:	f043 030b 	orr.w	r3, r3, #11
 80047f6:	6453      	str	r3, [r2, #68]	; 0x44
 80047f8:	e015      	b.n	8004826 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800480c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004810:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004820:	f043 030b 	orr.w	r3, r3, #11
 8004824:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004834:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004838:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004848:	461a      	mov	r2, r3
 800484a:	f003 fd6b 	bl	8008324 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800485c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f003 fc9a 	bl	800819c <USB_ReadInterrupts>
 8004868:	4603      	mov	r3, r0
 800486a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800486e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004872:	d123      	bne.n	80048bc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f003 fd30 	bl	80082de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f002 ff0c 	bl	80076a0 <USB_GetDevSpeed>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681c      	ldr	r4, [r3, #0]
 8004894:	f001 f94e 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8004898:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800489e:	461a      	mov	r2, r3
 80048a0:	4620      	mov	r0, r4
 80048a2:	f002 fe29 	bl	80074f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f005 fd55 	bl	800a356 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f003 fc6b 	bl	800819c <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d10a      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f005 fd32 	bl	800a33a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 0208 	and.w	r2, r2, #8
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f003 fc56 	bl	800819c <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d123      	bne.n	8004942 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004906:	2301      	movs	r3, #1
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	e014      	b.n	8004936 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 faa6 	bl	8004e7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	3301      	adds	r3, #1
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	4293      	cmp	r3, r2
 8004940:	d3e4      	bcc.n	800490c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fc28 	bl	800819c <USB_ReadInterrupts>
 800494c:	4603      	mov	r3, r0
 800494e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004956:	d13c      	bne.n	80049d2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004958:	2301      	movs	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
 800495c:	e02b      	b.n	80049b6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3318      	adds	r3, #24
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d115      	bne.n	80049b0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004984:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004986:	2b00      	cmp	r3, #0
 8004988:	da12      	bge.n	80049b0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3317      	adds	r3, #23
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa66 	bl	8004e7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	3301      	adds	r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	791b      	ldrb	r3, [r3, #4]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	4293      	cmp	r3, r2
 80049c0:	d3cd      	bcc.n	800495e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f003 fbe0 	bl	800819c <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e6:	d156      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e8:	2301      	movs	r3, #1
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	e045      	b.n	8004a7a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d12e      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da2b      	bge.n	8004a74 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004a28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d121      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a70:	6053      	str	r3, [r2, #4]
            break;
 8004a72:	e008      	b.n	8004a86 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	3301      	adds	r3, #1
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	791b      	ldrb	r3, [r3, #4]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d3b3      	bcc.n	80049ee <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 fb7e 	bl	800819c <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f005 fcd3 	bl	800a458 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f003 fb68 	bl	800819c <USB_ReadInterrupts>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d115      	bne.n	8004b02 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f005 fcc3 	bl	800a474 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	e000      	b.n	8004b02 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004b00:	bf00      	nop
    }
  }
}
 8004b02:	3734      	adds	r7, #52	; 0x34
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_PCD_SetAddress+0x1a>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e012      	b.n	8004b48 <HAL_PCD_SetAddress+0x40>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 fb09 	bl	8008150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	70fb      	strb	r3, [r7, #3]
 8004b62:	460b      	mov	r3, r1
 8004b64:	803b      	strh	r3, [r7, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da0f      	bge.n	8004b96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	3310      	adds	r3, #16
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4413      	add	r3, r2
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	705a      	strb	r2, [r3, #1]
 8004b94:	e00f      	b.n	8004bb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4413      	add	r3, r2
 8004bac:	3304      	adds	r3, #4
 8004bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bc2:	883a      	ldrh	r2, [r7, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	78ba      	ldrb	r2, [r7, #2]
 8004bcc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	785b      	ldrb	r3, [r3, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004be0:	78bb      	ldrb	r3, [r7, #2]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d102      	bne.n	8004bec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_PCD_EP_Open+0xaa>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e00e      	b.n	8004c18 <HAL_PCD_EP_Open+0xc8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f002 fd6e 	bl	80076ea <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004c16:	7afb      	ldrb	r3, [r7, #11]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	3304      	adds	r3, #4
 8004c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	799b      	ldrb	r3, [r3, #6]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	799b      	ldrb	r3, [r3, #6]
 8004c84:	461a      	mov	r2, r3
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	f002 fdb6 	bl	80077f8 <USB_EPStartXfer>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ca6:	7afb      	ldrb	r3, [r7, #11]
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	3304      	adds	r3, #4
 8004cbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d102      	bne.n	8004cf0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	799b      	ldrb	r3, [r3, #6]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6979      	ldr	r1, [r7, #20]
 8004cfc:	f002 fd7c 	bl	80077f8 <USB_EPStartXfer>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	7912      	ldrb	r2, [r2, #4]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04f      	b.n	8004dc8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da0f      	bge.n	8004d50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3310      	adds	r3, #16
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	705a      	strb	r2, [r3, #1]
 8004d4e:	e00d      	b.n	8004d6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_PCD_EP_SetStall+0x82>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e01d      	b.n	8004dc8 <HAL_PCD_EP_SetStall+0xbe>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f003 f904 	bl	8007fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7999      	ldrb	r1, [r3, #6]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004db8:	461a      	mov	r2, r3
 8004dba:	f003 fab3 	bl	8008324 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	7912      	ldrb	r2, [r2, #4]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e042      	b.n	8004e74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	da0f      	bge.n	8004e16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 020f 	and.w	r2, r3, #15
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	3310      	adds	r3, #16
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	705a      	strb	r2, [r3, #1]
 8004e14:	e00f      	b.n	8004e36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_PCD_EP_ClrStall+0x86>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e00e      	b.n	8004e74 <HAL_PCD_EP_ClrStall+0xa4>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f003 f90d 	bl	8008084 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da0c      	bge.n	8004eaa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	f003 020f 	and.w	r2, r3, #15
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e00c      	b.n	8004ec4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 ff2c 	bl	8007d28 <USB_EPStopXfer>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	; 0x28
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	3310      	adds	r3, #16
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d901      	bls.n	8004f16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e06b      	b.n	8004fee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d902      	bls.n	8004f32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	3303      	adds	r3, #3
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3a:	e02a      	b.n	8004f92 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d902      	bls.n	8004f58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3303      	adds	r3, #3
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68d9      	ldr	r1, [r3, #12]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4603      	mov	r3, r0
 8004f74:	6978      	ldr	r0, [r7, #20]
 8004f76:	f002 ff81 	bl	8007e7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	441a      	add	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d809      	bhi.n	8004fbc <PCD_WriteEmptyTxFifo+0xde>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d203      	bcs.n	8004fbc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1bf      	bne.n	8004f3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d811      	bhi.n	8004fec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	2201      	movs	r2, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe8:	4013      	ands	r3, r2
 8004fea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	333c      	adds	r3, #60	; 0x3c
 8005010:	3304      	adds	r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	799b      	ldrb	r3, [r3, #6]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d17b      	bne.n	8005126 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d015      	beq.n	8005064 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4a61      	ldr	r2, [pc, #388]	; (80051c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	f240 80b9 	bls.w	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80b3 	beq.w	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005060:	6093      	str	r3, [r2, #8]
 8005062:	e0a7      	b.n	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	461a      	mov	r2, r3
 800507c:	2320      	movs	r3, #32
 800507e:	6093      	str	r3, [r2, #8]
 8005080:	e098      	b.n	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 8093 	bne.w	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	4a4b      	ldr	r2, [pc, #300]	; (80051c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d90f      	bls.n	80050b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	461a      	mov	r2, r3
 80050ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b2:	6093      	str	r3, [r2, #8]
 80050b4:	e07e      	b.n	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	3304      	adds	r3, #4
 80050ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	0159      	lsls	r1, r3, #5
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	440b      	add	r3, r1
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d114      	bne.n	8005118 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005100:	461a      	mov	r2, r3
 8005102:	2101      	movs	r1, #1
 8005104:	f003 f90e 	bl	8008324 <USB_EP0_OutStart>
 8005108:	e006      	b.n	8005118 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	441a      	add	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f005 f8d6 	bl	800a2d0 <HAL_PCD_DataOutStageCallback>
 8005124:	e046      	b.n	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d124      	bne.n	8005178 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	6093      	str	r3, [r2, #8]
 800514c:	e032      	b.n	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	461a      	mov	r2, r3
 8005166:	2320      	movs	r3, #32
 8005168:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f005 f8ad 	bl	800a2d0 <HAL_PCD_DataOutStageCallback>
 8005176:	e01d      	b.n	80051b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d114      	bne.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d108      	bne.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80051a0:	461a      	mov	r2, r3
 80051a2:	2100      	movs	r1, #0
 80051a4:	f003 f8be 	bl	8008324 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f005 f88e 	bl	800a2d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	4f54300a 	.word	0x4f54300a
 80051c4:	4f54310a 	.word	0x4f54310a

080051c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	333c      	adds	r3, #60	; 0x3c
 80051e0:	3304      	adds	r3, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <PCD_EP_OutSetupPacket_int+0x88>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d90e      	bls.n	800521c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	461a      	mov	r2, r3
 8005216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f005 f845 	bl	800a2ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <PCD_EP_OutSetupPacket_int+0x88>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d90c      	bls.n	8005244 <PCD_EP_OutSetupPacket_int+0x7c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	799b      	ldrb	r3, [r3, #6]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d108      	bne.n	8005244 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800523c:	461a      	mov	r2, r3
 800523e:	2101      	movs	r1, #1
 8005240:	f003 f870 	bl	8008324 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	4f54300a 	.word	0x4f54300a

08005254 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e267      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d075      	beq.n	8005376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528a:	4b88      	ldr	r3, [pc, #544]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b04      	cmp	r3, #4
 8005294:	d00c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005296:	4b85      	ldr	r3, [pc, #532]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d112      	bne.n	80052c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a2:	4b82      	ldr	r3, [pc, #520]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ae:	d10b      	bne.n	80052c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	4b7e      	ldr	r3, [pc, #504]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05b      	beq.n	8005374 <HAL_RCC_OscConfig+0x108>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d157      	bne.n	8005374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e242      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCC_OscConfig+0x74>
 80052d2:	4b76      	ldr	r3, [pc, #472]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a75      	ldr	r2, [pc, #468]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e01d      	b.n	800531c <HAL_RCC_OscConfig+0xb0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x98>
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a6f      	ldr	r2, [pc, #444]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6c      	ldr	r2, [pc, #432]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0xb0>
 8005304:	4b69      	ldr	r3, [pc, #420]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a68      	ldr	r2, [pc, #416]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b66      	ldr	r3, [pc, #408]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a65      	ldr	r2, [pc, #404]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fd fc68 	bl	8002bf8 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532c:	f7fd fc64 	bl	8002bf8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e207      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b5b      	ldr	r3, [pc, #364]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0xc0>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fd fc54 	bl	8002bf8 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005354:	f7fd fc50 	bl	8002bf8 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1f3      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	4b51      	ldr	r3, [pc, #324]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0xe8>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d063      	beq.n	800544a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005382:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538e:	4b47      	ldr	r3, [pc, #284]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539a:	4b44      	ldr	r3, [pc, #272]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	4b41      	ldr	r3, [pc, #260]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCC_OscConfig+0x152>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e1c7      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4937      	ldr	r1, [pc, #220]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	e03a      	b.n	800544a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <HAL_RCC_OscConfig+0x244>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fd fc09 	bl	8002bf8 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fd fc05 	bl	8002bf8 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1a8      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fc:	4b2b      	ldr	r3, [pc, #172]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4925      	ldr	r1, [pc, #148]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HAL_RCC_OscConfig+0x244>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fd fbe8 	bl	8002bf8 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542c:	f7fd fbe4 	bl	8002bf8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e187      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543e:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d036      	beq.n	80054c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545e:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <HAL_RCC_OscConfig+0x248>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fd fbc8 	bl	8002bf8 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546c:	f7fd fbc4 	bl	8002bf8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e167      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_OscConfig+0x240>)
 8005480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x200>
 800548a:	e01b      	b.n	80054c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCC_OscConfig+0x248>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005492:	f7fd fbb1 	bl	8002bf8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005498:	e00e      	b.n	80054b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549a:	f7fd fbad 	bl	8002bf8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d907      	bls.n	80054b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e150      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
 80054ac:	40023800 	.word	0x40023800
 80054b0:	42470000 	.word	0x42470000
 80054b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ea      	bne.n	800549a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8097 	beq.w	8005600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d6:	4b81      	ldr	r3, [pc, #516]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	4b7d      	ldr	r3, [pc, #500]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	4a7c      	ldr	r2, [pc, #496]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6413      	str	r3, [r2, #64]	; 0x40
 80054f2:	4b7a      	ldr	r3, [pc, #488]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005502:	4b77      	ldr	r3, [pc, #476]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d118      	bne.n	8005540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550e:	4b74      	ldr	r3, [pc, #464]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551a:	f7fd fb6d 	bl	8002bf8 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005522:	f7fd fb69 	bl	8002bf8 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e10c      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	4b6a      	ldr	r3, [pc, #424]	; (80056e0 <HAL_RCC_OscConfig+0x474>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d106      	bne.n	8005556 <HAL_RCC_OscConfig+0x2ea>
 8005548:	4b64      	ldr	r3, [pc, #400]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4a63      	ldr	r2, [pc, #396]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6713      	str	r3, [r2, #112]	; 0x70
 8005554:	e01c      	b.n	8005590 <HAL_RCC_OscConfig+0x324>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b05      	cmp	r3, #5
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0x30c>
 800555e:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	4a5e      	ldr	r2, [pc, #376]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005564:	f043 0304 	orr.w	r3, r3, #4
 8005568:	6713      	str	r3, [r2, #112]	; 0x70
 800556a:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a5b      	ldr	r2, [pc, #364]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
 8005576:	e00b      	b.n	8005590 <HAL_RCC_OscConfig+0x324>
 8005578:	4b58      	ldr	r3, [pc, #352]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	4a57      	ldr	r2, [pc, #348]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	6713      	str	r3, [r2, #112]	; 0x70
 8005584:	4b55      	ldr	r3, [pc, #340]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	4a54      	ldr	r2, [pc, #336]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800558a:	f023 0304 	bic.w	r3, r3, #4
 800558e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fd fb2e 	bl	8002bf8 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a0:	f7fd fb2a 	bl	8002bf8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0cb      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	4b49      	ldr	r3, [pc, #292]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ee      	beq.n	80055a0 <HAL_RCC_OscConfig+0x334>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c4:	f7fd fb18 	bl	8002bf8 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fd fb14 	bl	8002bf8 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0b5      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e2:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1ee      	bne.n	80055cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f4:	4b39      	ldr	r3, [pc, #228]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	4a38      	ldr	r2, [pc, #224]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80055fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a1 	beq.w	800574c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560a:	4b34      	ldr	r3, [pc, #208]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b08      	cmp	r3, #8
 8005614:	d05c      	beq.n	80056d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d141      	bne.n	80056a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_OscConfig+0x478>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fd fae8 	bl	8002bf8 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562c:	f7fd fae4 	bl	8002bf8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e087      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	3b01      	subs	r3, #1
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	491b      	ldr	r1, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005674:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <HAL_RCC_OscConfig+0x478>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567a:	f7fd fabd 	bl	8002bf8 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005682:	f7fd fab9 	bl	8002bf8 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e05c      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x416>
 80056a0:	e054      	b.n	800574c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_OscConfig+0x478>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fd faa6 	bl	8002bf8 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b0:	f7fd faa2 	bl	8002bf8 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e045      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCC_OscConfig+0x470>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x444>
 80056ce:	e03d      	b.n	800574c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e038      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x4ec>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d028      	beq.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d121      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570e:	429a      	cmp	r2, r3
 8005710:	d11a      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800571e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005720:	4293      	cmp	r3, r2
 8005722:	d111      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	3b01      	subs	r3, #1
 8005732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d107      	bne.n	8005748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800

0800575c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0cc      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d90c      	bls.n	8005798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b65      	ldr	r3, [pc, #404]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b63      	ldr	r3, [pc, #396]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0b8      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d020      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b0:	4b59      	ldr	r3, [pc, #356]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a58      	ldr	r2, [pc, #352]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c8:	4b53      	ldr	r3, [pc, #332]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a52      	ldr	r2, [pc, #328]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d4:	4b50      	ldr	r3, [pc, #320]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	494d      	ldr	r1, [pc, #308]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d044      	beq.n	800587c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d107      	bne.n	800580a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d119      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e07f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d003      	beq.n	800581a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005816:	2b03      	cmp	r3, #3
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581a:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e06f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e067      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583a:	4b37      	ldr	r3, [pc, #220]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 0203 	bic.w	r2, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4934      	ldr	r1, [pc, #208]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800584c:	f7fd f9d4 	bl	8002bf8 <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	e00a      	b.n	800586a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005854:	f7fd f9d0 	bl	8002bf8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e04f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 020c 	and.w	r2, r3, #12
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	429a      	cmp	r2, r3
 800587a:	d1eb      	bne.n	8005854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d20c      	bcs.n	80058a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e032      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4916      	ldr	r1, [pc, #88]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ce:	4b12      	ldr	r3, [pc, #72]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	490e      	ldr	r1, [pc, #56]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e2:	f000 f821 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 80058e6:	4602      	mov	r2, r0
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	490a      	ldr	r1, [pc, #40]	; (800591c <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	5ccb      	ldrb	r3, [r1, r3]
 80058f6:	fa22 f303 	lsr.w	r3, r2, r3
 80058fa:	4a09      	ldr	r2, [pc, #36]	; (8005920 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1c8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd f934 	bl	8002b70 <HAL_InitTick>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40023c00 	.word	0x40023c00
 8005918:	40023800 	.word	0x40023800
 800591c:	0800d7c8 	.word	0x0800d7c8
 8005920:	20000070 	.word	0x20000070
 8005924:	20000074 	.word	0x20000074

08005928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800592c:	b094      	sub	sp, #80	; 0x50
 800592e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
 8005934:	2300      	movs	r3, #0
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005938:	2300      	movs	r3, #0
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005940:	4b79      	ldr	r3, [pc, #484]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b08      	cmp	r3, #8
 800594a:	d00d      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x40>
 800594c:	2b08      	cmp	r3, #8
 800594e:	f200 80e1 	bhi.w	8005b14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0x34>
 8005956:	2b04      	cmp	r3, #4
 8005958:	d003      	beq.n	8005962 <HAL_RCC_GetSysClockFreq+0x3a>
 800595a:	e0db      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800595c:	4b73      	ldr	r3, [pc, #460]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x204>)
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005960:	e0db      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005962:	4b73      	ldr	r3, [pc, #460]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005966:	e0d8      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005968:	4b6f      	ldr	r3, [pc, #444]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005972:	4b6d      	ldr	r3, [pc, #436]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d063      	beq.n	8005a46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800597e:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	099b      	lsrs	r3, r3, #6
 8005984:	2200      	movs	r2, #0
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
 8005988:	63fa      	str	r2, [r7, #60]	; 0x3c
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005990:	633b      	str	r3, [r7, #48]	; 0x30
 8005992:	2300      	movs	r3, #0
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
 8005996:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800599a:	4622      	mov	r2, r4
 800599c:	462b      	mov	r3, r5
 800599e:	f04f 0000 	mov.w	r0, #0
 80059a2:	f04f 0100 	mov.w	r1, #0
 80059a6:	0159      	lsls	r1, r3, #5
 80059a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ac:	0150      	lsls	r0, r2, #5
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4621      	mov	r1, r4
 80059b4:	1a51      	subs	r1, r2, r1
 80059b6:	6139      	str	r1, [r7, #16]
 80059b8:	4629      	mov	r1, r5
 80059ba:	eb63 0301 	sbc.w	r3, r3, r1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059cc:	4659      	mov	r1, fp
 80059ce:	018b      	lsls	r3, r1, #6
 80059d0:	4651      	mov	r1, sl
 80059d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059d6:	4651      	mov	r1, sl
 80059d8:	018a      	lsls	r2, r1, #6
 80059da:	4651      	mov	r1, sl
 80059dc:	ebb2 0801 	subs.w	r8, r2, r1
 80059e0:	4659      	mov	r1, fp
 80059e2:	eb63 0901 	sbc.w	r9, r3, r1
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fa:	4690      	mov	r8, r2
 80059fc:	4699      	mov	r9, r3
 80059fe:	4623      	mov	r3, r4
 8005a00:	eb18 0303 	adds.w	r3, r8, r3
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	462b      	mov	r3, r5
 8005a08:	eb49 0303 	adc.w	r3, r9, r3
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	024b      	lsls	r3, r1, #9
 8005a1e:	4621      	mov	r1, r4
 8005a20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a24:	4621      	mov	r1, r4
 8005a26:	024a      	lsls	r2, r1, #9
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	2200      	movs	r2, #0
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a38:	f7fb f916 	bl	8000c68 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4613      	mov	r3, r2
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a44:	e058      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a46:	4b38      	ldr	r3, [pc, #224]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	099b      	lsrs	r3, r3, #6
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	4611      	mov	r1, r2
 8005a52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a56:	623b      	str	r3, [r7, #32]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	f04f 0000 	mov.w	r0, #0
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	0159      	lsls	r1, r3, #5
 8005a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a72:	0150      	lsls	r0, r2, #5
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4641      	mov	r1, r8
 8005a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a98:	ebb2 040a 	subs.w	r4, r2, sl
 8005a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	00eb      	lsls	r3, r5, #3
 8005aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aae:	00e2      	lsls	r2, r4, #3
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	461d      	mov	r5, r3
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	18e3      	adds	r3, r4, r3
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	464b      	mov	r3, r9
 8005abc:	eb45 0303 	adc.w	r3, r5, r3
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ace:	4629      	mov	r1, r5
 8005ad0:	028b      	lsls	r3, r1, #10
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ad8:	4621      	mov	r1, r4
 8005ada:	028a      	lsls	r2, r1, #10
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	61fa      	str	r2, [r7, #28]
 8005ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aec:	f7fb f8bc 	bl	8000c68 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	3301      	adds	r3, #1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3750      	adds	r7, #80	; 0x50
 8005b20:	46bd      	mov	sp, r7
 8005b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	00f42400 	.word	0x00f42400
 8005b30:	007a1200 	.word	0x007a1200

08005b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000070 	.word	0x20000070

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b50:	f7ff fff0 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0a9b      	lsrs	r3, r3, #10
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	0800d7d8 	.word	0x0800d7d8

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b78:	f7ff ffdc 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	0b5b      	lsrs	r3, r3, #13
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40023800 	.word	0x40023800
 8005b98:	0800d7d8 	.word	0x0800d7d8

08005b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e041      	b.n	8005c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fc fcfe 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f000 f9f0 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e04e      	b.n	8005cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d01d      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d111      	bne.n	8005ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d010      	beq.n	8005cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	e007      	b.n	8005cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6a1a      	ldr	r2, [r3, #32]
 8005d3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10f      	bne.n	8005d64 <HAL_TIM_Base_Stop_IT+0x48>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a1a      	ldr	r2, [r3, #32]
 8005d4a:	f240 4344 	movw	r3, #1092	; 0x444
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <HAL_TIM_Base_Stop_IT+0x48>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d020      	beq.n	8005dde <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01b      	beq.n	8005dde <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0202 	mvn.w	r2, #2
 8005dae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f8dc 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005dca:	e005      	b.n	8005dd8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f8ce 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8df 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01b      	beq.n	8005e2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f06f 0204 	mvn.w	r2, #4
 8005dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8b6 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005e16:	e005      	b.n	8005e24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8a8 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8b9 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01b      	beq.n	8005e76 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f06f 0208 	mvn.w	r2, #8
 8005e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f890 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005e62:	e005      	b.n	8005e70 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f882 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f893 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d020      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01b      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f06f 0210 	mvn.w	r2, #16
 8005e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2208      	movs	r2, #8
 8005e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f86a 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005eae:	e005      	b.n	8005ebc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f85c 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f86d 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00c      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f06f 0201 	mvn.w	r2, #1
 8005ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f83a 	bl	8005f5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f98d 	bl	8006224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f83e 	bl	8005faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d007      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f06f 0220 	mvn.w	r2, #32
 8005f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f95f 	bl	8006210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a46      	ldr	r2, [pc, #280]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d00f      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a43      	ldr	r2, [pc, #268]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a42      	ldr	r2, [pc, #264]	; (80060f4 <TIM_Base_SetConfig+0x134>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a41      	ldr	r2, [pc, #260]	; (80060f8 <TIM_Base_SetConfig+0x138>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a40      	ldr	r2, [pc, #256]	; (80060fc <TIM_Base_SetConfig+0x13c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a35      	ldr	r2, [pc, #212]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d02b      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d027      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a32      	ldr	r2, [pc, #200]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d023      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a31      	ldr	r2, [pc, #196]	; (80060f4 <TIM_Base_SetConfig+0x134>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01f      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a30      	ldr	r2, [pc, #192]	; (80060f8 <TIM_Base_SetConfig+0x138>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01b      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2f      	ldr	r2, [pc, #188]	; (80060fc <TIM_Base_SetConfig+0x13c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d017      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2e      	ldr	r2, [pc, #184]	; (8006100 <TIM_Base_SetConfig+0x140>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <TIM_Base_SetConfig+0x144>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <TIM_Base_SetConfig+0x148>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x14c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x150>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x154>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d108      	bne.n	8006084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a12      	ldr	r2, [pc, #72]	; (80060fc <TIM_Base_SetConfig+0x13c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d103      	bne.n	80060c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d105      	bne.n	80060de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	611a      	str	r2, [r3, #16]
  }
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40010400 	.word	0x40010400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800
 800610c:	40001800 	.word	0x40001800
 8006110:	40001c00 	.word	0x40001c00
 8006114:	40002000 	.word	0x40002000

08006118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800612c:	2302      	movs	r3, #2
 800612e:	e05a      	b.n	80061e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617c:	d01d      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a17      	ldr	r2, [pc, #92]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d10c      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40000c00 	.word	0x40000c00
 8006204:	40010400 	.word	0x40010400
 8006208:	40014000 	.word	0x40014000
 800620c:	40001800 	.word	0x40001800

08006210 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e042      	b.n	80062d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fc f9d8 	bl	8002614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	; 0x24
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc85 	bl	8006b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b0ba      	sub	sp, #232	; 0xe8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062fe:	2300      	movs	r3, #0
 8006300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10f      	bne.n	800633e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <HAL_UART_IRQHandler+0x66>
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fb69 	bl	8006a0e <UART_Receive_IT>
      return;
 800633c:	e25b      	b.n	80067f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800633e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 80de 	beq.w	8006504 <HAL_UART_IRQHandler+0x22c>
 8006348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006358:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80d1 	beq.w	8006504 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HAL_UART_IRQHandler+0xae>
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	f043 0201 	orr.w	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <HAL_UART_IRQHandler+0xd2>
 8006392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	f043 0202 	orr.w	r2, r3, #2
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_UART_IRQHandler+0xf6>
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f043 0204 	orr.w	r2, r3, #4
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d011      	beq.n	80063fe <HAL_UART_IRQHandler+0x126>
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d105      	bne.n	80063f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	f043 0208 	orr.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 81f2 	beq.w	80067ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_UART_IRQHandler+0x14e>
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 faf4 	bl	8006a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <HAL_UART_IRQHandler+0x17a>
 800644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04f      	beq.n	80064f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f9fc 	bl	8006850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	d141      	bne.n	80064ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800647c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006492:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800649e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1d9      	bne.n	8006466 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d013      	beq.n	80064e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	4a7e      	ldr	r2, [pc, #504]	; (80066b8 <HAL_UART_IRQHandler+0x3e0>)
 80064c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fd fa3c 	bl	8003944 <HAL_DMA_Abort_IT>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064dc:	4610      	mov	r0, r2
 80064de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e0:	e00e      	b.n	8006500 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f99e 	bl	8006824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	e00a      	b.n	8006500 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f99a 	bl	8006824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f0:	e006      	b.n	8006500 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f996 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80064fe:	e175      	b.n	80067ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	bf00      	nop
    return;
 8006502:	e173      	b.n	80067ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	2b01      	cmp	r3, #1
 800650a:	f040 814f 	bne.w	80067ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8148 	beq.w	80067ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8141 	beq.w	80067ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	f040 80b6 	bne.w	80066bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800655c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8145 	beq.w	80067f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800656a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800656e:	429a      	cmp	r2, r3
 8006570:	f080 813e 	bcs.w	80067f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800657a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006586:	f000 8088 	beq.w	800669a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1d9      	bne.n	800658a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3314      	adds	r3, #20
 80065f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006602:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800660c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e1      	bne.n	80065d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006636:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006638:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800663c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e3      	bne.n	8006612 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800667c:	65ba      	str	r2, [r7, #88]	; 0x58
 800667e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e3      	bne.n	8006658 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	4618      	mov	r0, r3
 8006696:	f7fd f8e5 	bl	8003864 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8c1 	bl	8006838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066b6:	e09b      	b.n	80067f0 <HAL_UART_IRQHandler+0x518>
 80066b8:	08006917 	.word	0x08006917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 808e 	beq.w	80067f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8089 	beq.w	80067f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006706:	647a      	str	r2, [r7, #68]	; 0x44
 8006708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800670c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3314      	adds	r3, #20
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	623b      	str	r3, [r7, #32]
   return(result);
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800673e:	633a      	str	r2, [r7, #48]	; 0x30
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e3      	bne.n	800671a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0310 	bic.w	r3, r3, #16
 8006776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006784:	61fa      	str	r2, [r7, #28]
 8006786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e3      	bne.n	8006760 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800679e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f847 	bl	8006838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067aa:	e023      	b.n	80067f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <HAL_UART_IRQHandler+0x4f4>
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f8ba 	bl	800693e <UART_Transmit_IT>
    return;
 80067ca:	e014      	b.n	80067f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00e      	beq.n	80067f6 <HAL_UART_IRQHandler+0x51e>
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f8fa 	bl	80069de <UART_EndTransmit_IT>
    return;
 80067ea:	e004      	b.n	80067f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80067ec:	bf00      	nop
 80067ee:	e002      	b.n	80067f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80067f0:	bf00      	nop
 80067f2:	e000      	b.n	80067f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80067f4:	bf00      	nop
  }
}
 80067f6:	37e8      	adds	r7, #232	; 0xe8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b095      	sub	sp, #84	; 0x54
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006878:	643a      	str	r2, [r7, #64]	; 0x40
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800687e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e5      	bne.n	8006858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3314      	adds	r3, #20
 8006892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	61fb      	str	r3, [r7, #28]
   return(result);
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f023 0301 	bic.w	r3, r3, #1
 80068a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3314      	adds	r3, #20
 80068aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e5      	bne.n	800688c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d119      	bne.n	80068fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f023 0310 	bic.w	r3, r3, #16
 80068de:	647b      	str	r3, [r7, #68]	; 0x44
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e8:	61ba      	str	r2, [r7, #24]
 80068ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	613b      	str	r3, [r7, #16]
   return(result);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800690a:	bf00      	nop
 800690c:	3754      	adds	r7, #84	; 0x54
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff77 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b21      	cmp	r3, #33	; 0x21
 8006950:	d13e      	bne.n	80069d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d114      	bne.n	8006986 <UART_Transmit_IT+0x48>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d110      	bne.n	8006986 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	621a      	str	r2, [r3, #32]
 8006984:	e008      	b.n	8006998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	1c59      	adds	r1, r3, #1
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6211      	str	r1, [r2, #32]
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4619      	mov	r1, r3
 80069a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10f      	bne.n	80069cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e000      	b.n	80069d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069d0:	2302      	movs	r3, #2
  }
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fefc 	bl	80067fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08c      	sub	sp, #48	; 0x30
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b22      	cmp	r3, #34	; 0x22
 8006a20:	f040 80ae 	bne.w	8006b80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d117      	bne.n	8006a5e <UART_Receive_IT+0x50>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d113      	bne.n	8006a5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a5c:	e026      	b.n	8006aac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d007      	beq.n	8006a82 <UART_Receive_IT+0x74>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <UART_Receive_IT+0x82>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	e008      	b.n	8006aa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d15d      	bne.n	8006b7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0220 	bic.w	r2, r2, #32
 8006ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d135      	bne.n	8006b72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2c:	623a      	str	r2, [r7, #32]
 8006b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	6a3a      	ldr	r2, [r7, #32]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d10a      	bne.n	8006b64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fe64 	bl	8006838 <HAL_UARTEx_RxEventCallback>
 8006b70:	e002      	b.n	8006b78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fe4c 	bl	8006810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e002      	b.n	8006b82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b90:	b0c0      	sub	sp, #256	; 0x100
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	68d9      	ldr	r1, [r3, #12]
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	ea40 0301 	orr.w	r3, r0, r1
 8006bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006be4:	f021 010c 	bic.w	r1, r1, #12
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c06:	6999      	ldr	r1, [r3, #24]
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	ea40 0301 	orr.w	r3, r0, r1
 8006c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b8f      	ldr	r3, [pc, #572]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d005      	beq.n	8006c2c <UART_SetConfig+0xa0>
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4b8d      	ldr	r3, [pc, #564]	; (8006e5c <UART_SetConfig+0x2d0>)
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d104      	bne.n	8006c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fe ffa2 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8006c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c34:	e003      	b.n	8006c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7fe ff89 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8006c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c48:	f040 810c 	bne.w	8006e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c5e:	4622      	mov	r2, r4
 8006c60:	462b      	mov	r3, r5
 8006c62:	1891      	adds	r1, r2, r2
 8006c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c66:	415b      	adcs	r3, r3
 8006c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c6e:	4621      	mov	r1, r4
 8006c70:	eb12 0801 	adds.w	r8, r2, r1
 8006c74:	4629      	mov	r1, r5
 8006c76:	eb43 0901 	adc.w	r9, r3, r1
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c8e:	4690      	mov	r8, r2
 8006c90:	4699      	mov	r9, r3
 8006c92:	4623      	mov	r3, r4
 8006c94:	eb18 0303 	adds.w	r3, r8, r3
 8006c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	eb49 0303 	adc.w	r3, r9, r3
 8006ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cba:	460b      	mov	r3, r1
 8006cbc:	18db      	adds	r3, r3, r3
 8006cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	eb42 0303 	adc.w	r3, r2, r3
 8006cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cd0:	f7f9 ffca 	bl	8000c68 <__aeabi_uldivmod>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4b61      	ldr	r3, [pc, #388]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006cda:	fba3 2302 	umull	r2, r3, r3, r2
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	011c      	lsls	r4, r3, #4
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	1891      	adds	r1, r2, r2
 8006cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cfc:	415b      	adcs	r3, r3
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d04:	4641      	mov	r1, r8
 8006d06:	eb12 0a01 	adds.w	sl, r2, r1
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d24:	4692      	mov	sl, r2
 8006d26:	469b      	mov	fp, r3
 8006d28:	4643      	mov	r3, r8
 8006d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d32:	464b      	mov	r3, r9
 8006d34:	eb4b 0303 	adc.w	r3, fp, r3
 8006d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d50:	460b      	mov	r3, r1
 8006d52:	18db      	adds	r3, r3, r3
 8006d54:	643b      	str	r3, [r7, #64]	; 0x40
 8006d56:	4613      	mov	r3, r2
 8006d58:	eb42 0303 	adc.w	r3, r2, r3
 8006d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d66:	f7f9 ff7f 	bl	8000c68 <__aeabi_uldivmod>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4b3b      	ldr	r3, [pc, #236]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006d72:	fba3 2301 	umull	r2, r3, r3, r1
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	2264      	movs	r2, #100	; 0x64
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	1acb      	subs	r3, r1, r3
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d86:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006d88:	fba3 2302 	umull	r2, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d94:	441c      	add	r4, r3
 8006d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	1891      	adds	r1, r2, r2
 8006dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006db0:	415b      	adcs	r3, r3
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006db8:	4641      	mov	r1, r8
 8006dba:	1851      	adds	r1, r2, r1
 8006dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	414b      	adcs	r3, r1
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	00cb      	lsls	r3, r1, #3
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dda:	4651      	mov	r1, sl
 8006ddc:	00ca      	lsls	r2, r1, #3
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	4642      	mov	r2, r8
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dec:	464b      	mov	r3, r9
 8006dee:	460a      	mov	r2, r1
 8006df0:	eb42 0303 	adc.w	r3, r2, r3
 8006df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	18db      	adds	r3, r3, r3
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e12:	4613      	mov	r3, r2
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e22:	f7f9 ff21 	bl	8000c68 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	2164      	movs	r1, #100	; 0x64
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	3332      	adds	r3, #50	; 0x32
 8006e3e:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f003 0207 	and.w	r2, r3, #7
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4422      	add	r2, r4
 8006e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e54:	e106      	b.n	8007064 <UART_SetConfig+0x4d8>
 8006e56:	bf00      	nop
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40011400 	.word	0x40011400
 8006e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e76:	4642      	mov	r2, r8
 8006e78:	464b      	mov	r3, r9
 8006e7a:	1891      	adds	r1, r2, r2
 8006e7c:	6239      	str	r1, [r7, #32]
 8006e7e:	415b      	adcs	r3, r3
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
 8006e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e86:	4641      	mov	r1, r8
 8006e88:	1854      	adds	r4, r2, r1
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	eb43 0501 	adc.w	r5, r3, r1
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	00eb      	lsls	r3, r5, #3
 8006e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9e:	00e2      	lsls	r2, r4, #3
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	18e3      	adds	r3, r4, r3
 8006ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006eac:	464b      	mov	r3, r9
 8006eae:	eb45 0303 	adc.w	r3, r5, r3
 8006eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	008b      	lsls	r3, r1, #2
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006edc:	4621      	mov	r1, r4
 8006ede:	008a      	lsls	r2, r1, #2
 8006ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ee4:	f7f9 fec0 	bl	8000c68 <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4b60      	ldr	r3, [pc, #384]	; (8007070 <UART_SetConfig+0x4e4>)
 8006eee:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	011c      	lsls	r4, r3, #4
 8006ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f08:	4642      	mov	r2, r8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	1891      	adds	r1, r2, r2
 8006f0e:	61b9      	str	r1, [r7, #24]
 8006f10:	415b      	adcs	r3, r3
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f18:	4641      	mov	r1, r8
 8006f1a:	1851      	adds	r1, r2, r1
 8006f1c:	6139      	str	r1, [r7, #16]
 8006f1e:	4649      	mov	r1, r9
 8006f20:	414b      	adcs	r3, r1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f30:	4659      	mov	r1, fp
 8006f32:	00cb      	lsls	r3, r1, #3
 8006f34:	4651      	mov	r1, sl
 8006f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f3a:	4651      	mov	r1, sl
 8006f3c:	00ca      	lsls	r2, r1, #3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4619      	mov	r1, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	4642      	mov	r2, r8
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	460a      	mov	r2, r1
 8006f50:	eb42 0303 	adc.w	r3, r2, r3
 8006f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f70:	4649      	mov	r1, r9
 8006f72:	008b      	lsls	r3, r1, #2
 8006f74:	4641      	mov	r1, r8
 8006f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	008a      	lsls	r2, r1, #2
 8006f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f82:	f7f9 fe71 	bl	8000c68 <__aeabi_uldivmod>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4b38      	ldr	r3, [pc, #224]	; (8007070 <UART_SetConfig+0x4e4>)
 8006f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	2264      	movs	r2, #100	; 0x64
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
 8006f9a:	1acb      	subs	r3, r1, r3
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	3332      	adds	r3, #50	; 0x32
 8006fa0:	4a33      	ldr	r2, [pc, #204]	; (8007070 <UART_SetConfig+0x4e4>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fac:	441c      	add	r4, r3
 8006fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	673b      	str	r3, [r7, #112]	; 0x70
 8006fb6:	677a      	str	r2, [r7, #116]	; 0x74
 8006fb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	1891      	adds	r1, r2, r2
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	415b      	adcs	r3, r3
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fcc:	4641      	mov	r1, r8
 8006fce:	1851      	adds	r1, r2, r1
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	414b      	adcs	r3, r1
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	00cb      	lsls	r3, r1, #3
 8006fe8:	4651      	mov	r1, sl
 8006fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fee:	4651      	mov	r1, sl
 8006ff0:	00ca      	lsls	r2, r1, #3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ffe:	464b      	mov	r3, r9
 8007000:	460a      	mov	r2, r1
 8007002:	eb42 0303 	adc.w	r3, r2, r3
 8007006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	663b      	str	r3, [r7, #96]	; 0x60
 8007012:	667a      	str	r2, [r7, #100]	; 0x64
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007020:	4649      	mov	r1, r9
 8007022:	008b      	lsls	r3, r1, #2
 8007024:	4641      	mov	r1, r8
 8007026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800702a:	4641      	mov	r1, r8
 800702c:	008a      	lsls	r2, r1, #2
 800702e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007032:	f7f9 fe19 	bl	8000c68 <__aeabi_uldivmod>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <UART_SetConfig+0x4e4>)
 800703c:	fba3 1302 	umull	r1, r3, r3, r2
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	2164      	movs	r1, #100	; 0x64
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	3332      	adds	r3, #50	; 0x32
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <UART_SetConfig+0x4e4>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	095b      	lsrs	r3, r3, #5
 8007056:	f003 020f 	and.w	r2, r3, #15
 800705a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4422      	add	r2, r4
 8007062:	609a      	str	r2, [r3, #8]
}
 8007064:	bf00      	nop
 8007066:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800706a:	46bd      	mov	sp, r7
 800706c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007070:	51eb851f 	.word	0x51eb851f

08007074 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007074:	b480      	push	{r7}
 8007076:	b08b      	sub	sp, #44	; 0x2c
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	fa93 f3a3 	rbit	r3, r3
 800708e:	613b      	str	r3, [r7, #16]
  return result;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800709a:	2320      	movs	r3, #32
 800709c:	e003      	b.n	80070a6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	fab3 f383 	clz	r3, r3
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	2103      	movs	r1, #3
 80070aa:	fa01 f303 	lsl.w	r3, r1, r3
 80070ae:	43db      	mvns	r3, r3
 80070b0:	401a      	ands	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	fa93 f3a3 	rbit	r3, r3
 80070bc:	61fb      	str	r3, [r7, #28]
  return result;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80070c8:	2320      	movs	r3, #32
 80070ca:	e003      	b.n	80070d4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	fab3 f383 	clz	r3, r3
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	fa01 f303 	lsl.w	r3, r1, r3
 80070dc:	431a      	orrs	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	372c      	adds	r7, #44	; 0x2c
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	43db      	mvns	r3, r3
 8007102:	401a      	ands	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	fb01 f303 	mul.w	r3, r1, r3
 800710c:	431a      	orrs	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800711e:	b480      	push	{r7}
 8007120:	b08b      	sub	sp, #44	; 0x2c
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	fa93 f3a3 	rbit	r3, r3
 8007138:	613b      	str	r3, [r7, #16]
  return result;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007144:	2320      	movs	r3, #32
 8007146:	e003      	b.n	8007150 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	fab3 f383 	clz	r3, r3
 800714e:	b2db      	uxtb	r3, r3
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	2103      	movs	r1, #3
 8007154:	fa01 f303 	lsl.w	r3, r1, r3
 8007158:	43db      	mvns	r3, r3
 800715a:	401a      	ands	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	fa93 f3a3 	rbit	r3, r3
 8007166:	61fb      	str	r3, [r7, #28]
  return result;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007172:	2320      	movs	r3, #32
 8007174:	e003      	b.n	800717e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	fab3 f383 	clz	r3, r3
 800717c:	b2db      	uxtb	r3, r3
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	fa01 f303 	lsl.w	r3, r1, r3
 8007186:	431a      	orrs	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800718c:	bf00      	nop
 800718e:	372c      	adds	r7, #44	; 0x2c
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007198:	b480      	push	{r7}
 800719a:	b08b      	sub	sp, #44	; 0x2c
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	fa93 f3a3 	rbit	r3, r3
 80071b2:	613b      	str	r3, [r7, #16]
  return result;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80071be:	2320      	movs	r3, #32
 80071c0:	e003      	b.n	80071ca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	fab3 f383 	clz	r3, r3
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	2103      	movs	r1, #3
 80071ce:	fa01 f303 	lsl.w	r3, r1, r3
 80071d2:	43db      	mvns	r3, r3
 80071d4:	401a      	ands	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	fa93 f3a3 	rbit	r3, r3
 80071e0:	61fb      	str	r3, [r7, #28]
  return result;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80071ec:	2320      	movs	r3, #32
 80071ee:	e003      	b.n	80071f8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	fab3 f383 	clz	r3, r3
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007200:	431a      	orrs	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	60da      	str	r2, [r3, #12]
}
 8007206:	bf00      	nop
 8007208:	372c      	adds	r7, #44	; 0x2c
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007212:	b480      	push	{r7}
 8007214:	b08b      	sub	sp, #44	; 0x2c
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	fa93 f3a3 	rbit	r3, r3
 800722c:	613b      	str	r3, [r7, #16]
  return result;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007238:	2320      	movs	r3, #32
 800723a:	e003      	b.n	8007244 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	fab3 f383 	clz	r3, r3
 8007242:	b2db      	uxtb	r3, r3
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	210f      	movs	r1, #15
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	43db      	mvns	r3, r3
 800724e:	401a      	ands	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	fa93 f3a3 	rbit	r3, r3
 800725a:	61fb      	str	r3, [r7, #28]
  return result;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007266:	2320      	movs	r3, #32
 8007268:	e003      	b.n	8007272 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	fab3 f383 	clz	r3, r3
 8007270:	b2db      	uxtb	r3, r3
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	fa01 f303 	lsl.w	r3, r1, r3
 800727a:	431a      	orrs	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007280:	bf00      	nop
 8007282:	372c      	adds	r7, #44	; 0x2c
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800728c:	b480      	push	{r7}
 800728e:	b08b      	sub	sp, #44	; 0x2c
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	fa93 f3a3 	rbit	r3, r3
 80072a8:	613b      	str	r3, [r7, #16]
  return result;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80072b4:	2320      	movs	r3, #32
 80072b6:	e003      	b.n	80072c0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	fab3 f383 	clz	r3, r3
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	210f      	movs	r1, #15
 80072c4:	fa01 f303 	lsl.w	r3, r1, r3
 80072c8:	43db      	mvns	r3, r3
 80072ca:	401a      	ands	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	fa93 f3a3 	rbit	r3, r3
 80072d8:	61fb      	str	r3, [r7, #28]
  return result;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80072e4:	2320      	movs	r3, #32
 80072e6:	e003      	b.n	80072f0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80072fe:	bf00      	nop
 8007300:	372c      	adds	r7, #44	; 0x2c
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b08a      	sub	sp, #40	; 0x28
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007314:	2300      	movs	r3, #0
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8007318:	2300      	movs	r3, #0
 800731a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	fa93 f3a3 	rbit	r3, r3
 8007328:	617b      	str	r3, [r7, #20]
  return result;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <LL_GPIO_Init+0x2e>
    return 32U;
 8007334:	2320      	movs	r3, #32
 8007336:	e003      	b.n	8007340 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	fab3 f383 	clz	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007342:	e057      	b.n	80073f4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	2101      	movs	r1, #1
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	4013      	ands	r3, r2
 8007352:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d049      	beq.n	80073ee <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d003      	beq.n	800736a <LL_GPIO_Init+0x60>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d10d      	bne.n	8007386 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	461a      	mov	r2, r3
 8007370:	6a39      	ldr	r1, [r7, #32]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fed3 	bl	800711e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	461a      	mov	r2, r3
 800737e:	6a39      	ldr	r1, [r7, #32]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff feb4 	bl	80070ee <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	461a      	mov	r2, r3
 800738c:	6a39      	ldr	r1, [r7, #32]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ff02 	bl	8007198 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d121      	bne.n	80073e0 <LL_GPIO_Init+0xd6>
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	fa93 f3a3 	rbit	r3, r3
 80073a6:	60bb      	str	r3, [r7, #8]
  return result;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <LL_GPIO_Init+0xac>
    return 32U;
 80073b2:	2320      	movs	r3, #32
 80073b4:	e003      	b.n	80073be <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	fab3 f383 	clz	r3, r3
 80073bc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d807      	bhi.n	80073d2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6a39      	ldr	r1, [r7, #32]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff ff21 	bl	8007212 <LL_GPIO_SetAFPin_0_7>
 80073d0:	e006      	b.n	80073e0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6a39      	ldr	r1, [r7, #32]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff ff56 	bl	800728c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6a39      	ldr	r1, [r7, #32]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fe43 	bl	8007074 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	3301      	adds	r3, #1
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	fa22 f303 	lsr.w	r3, r2, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1a0      	bne.n	8007344 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3728      	adds	r7, #40	; 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <LL_SPI_IsEnabled>:
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d101      	bne.n	8007424 <LL_SPI_IsEnabled+0x18>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <LL_SPI_IsEnabled+0x1a>
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	611a      	str	r2, [r3, #16]
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ffd3 	bl	800740c <LL_SPI_IsEnabled>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d139      	bne.n	80074e0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007474:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	6811      	ldr	r1, [r2, #0]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	6852      	ldr	r2, [r2, #4]
 8007480:	4311      	orrs	r1, r2
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	6892      	ldr	r2, [r2, #8]
 8007486:	4311      	orrs	r1, r2
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68d2      	ldr	r2, [r2, #12]
 800748c:	4311      	orrs	r1, r2
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	6912      	ldr	r2, [r2, #16]
 8007492:	4311      	orrs	r1, r2
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	6952      	ldr	r2, [r2, #20]
 8007498:	4311      	orrs	r1, r2
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	6992      	ldr	r2, [r2, #24]
 800749e:	4311      	orrs	r1, r2
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	69d2      	ldr	r2, [r2, #28]
 80074a4:	4311      	orrs	r1, r2
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	6a12      	ldr	r2, [r2, #32]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f023 0204 	bic.w	r2, r3, #4
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	d105      	bne.n	80074dc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff ffab 	bl	8007432 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	61da      	str	r2, [r3, #28]
  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d165      	bne.n	80075d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4a41      	ldr	r2, [pc, #260]	; (8007614 <USB_SetTurnaroundTime+0x11c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d906      	bls.n	8007522 <USB_SetTurnaroundTime+0x2a>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a40      	ldr	r2, [pc, #256]	; (8007618 <USB_SetTurnaroundTime+0x120>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d202      	bcs.n	8007522 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800751c:	230f      	movs	r3, #15
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e062      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4a3c      	ldr	r2, [pc, #240]	; (8007618 <USB_SetTurnaroundTime+0x120>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d306      	bcc.n	8007538 <USB_SetTurnaroundTime+0x40>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4a3b      	ldr	r2, [pc, #236]	; (800761c <USB_SetTurnaroundTime+0x124>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d202      	bcs.n	8007538 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007532:	230e      	movs	r3, #14
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e057      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4a38      	ldr	r2, [pc, #224]	; (800761c <USB_SetTurnaroundTime+0x124>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d306      	bcc.n	800754e <USB_SetTurnaroundTime+0x56>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4a37      	ldr	r2, [pc, #220]	; (8007620 <USB_SetTurnaroundTime+0x128>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d202      	bcs.n	800754e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007548:	230d      	movs	r3, #13
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e04c      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4a33      	ldr	r2, [pc, #204]	; (8007620 <USB_SetTurnaroundTime+0x128>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d306      	bcc.n	8007564 <USB_SetTurnaroundTime+0x6c>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4a32      	ldr	r2, [pc, #200]	; (8007624 <USB_SetTurnaroundTime+0x12c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d802      	bhi.n	8007564 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800755e:	230c      	movs	r3, #12
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e041      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4a2f      	ldr	r2, [pc, #188]	; (8007624 <USB_SetTurnaroundTime+0x12c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d906      	bls.n	800757a <USB_SetTurnaroundTime+0x82>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4a2e      	ldr	r2, [pc, #184]	; (8007628 <USB_SetTurnaroundTime+0x130>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d802      	bhi.n	800757a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007574:	230b      	movs	r3, #11
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e036      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <USB_SetTurnaroundTime+0x130>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d906      	bls.n	8007590 <USB_SetTurnaroundTime+0x98>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a29      	ldr	r2, [pc, #164]	; (800762c <USB_SetTurnaroundTime+0x134>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d802      	bhi.n	8007590 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800758a:	230a      	movs	r3, #10
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e02b      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a26      	ldr	r2, [pc, #152]	; (800762c <USB_SetTurnaroundTime+0x134>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d906      	bls.n	80075a6 <USB_SetTurnaroundTime+0xae>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a25      	ldr	r2, [pc, #148]	; (8007630 <USB_SetTurnaroundTime+0x138>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d202      	bcs.n	80075a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075a0:	2309      	movs	r3, #9
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e020      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4a21      	ldr	r2, [pc, #132]	; (8007630 <USB_SetTurnaroundTime+0x138>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d306      	bcc.n	80075bc <USB_SetTurnaroundTime+0xc4>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4a20      	ldr	r2, [pc, #128]	; (8007634 <USB_SetTurnaroundTime+0x13c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d802      	bhi.n	80075bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075b6:	2308      	movs	r3, #8
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e015      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <USB_SetTurnaroundTime+0x13c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d906      	bls.n	80075d2 <USB_SetTurnaroundTime+0xda>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <USB_SetTurnaroundTime+0x140>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d202      	bcs.n	80075d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075cc:	2307      	movs	r3, #7
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	e00a      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075d2:	2306      	movs	r3, #6
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e007      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075de:	2309      	movs	r3, #9
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e001      	b.n	80075e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075e4:	2309      	movs	r3, #9
 80075e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	029b      	lsls	r3, r3, #10
 80075fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	00d8acbf 	.word	0x00d8acbf
 8007618:	00e4e1c0 	.word	0x00e4e1c0
 800761c:	00f42400 	.word	0x00f42400
 8007620:	01067380 	.word	0x01067380
 8007624:	011a499f 	.word	0x011a499f
 8007628:	01312cff 	.word	0x01312cff
 800762c:	014ca43f 	.word	0x014ca43f
 8007630:	016e3600 	.word	0x016e3600
 8007634:	01a6ab1f 	.word	0x01a6ab1f
 8007638:	01e84800 	.word	0x01e84800

0800763c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007656:	d901      	bls.n	800765c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e01b      	b.n	8007694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	daf2      	bge.n	800764a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	019b      	lsls	r3, r3, #6
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007680:	d901      	bls.n	8007686 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e006      	b.n	8007694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b20      	cmp	r3, #32
 8007690:	d0f0      	beq.n	8007674 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0306 	and.w	r3, r3, #6
 80076b8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
 80076c4:	e00a      	b.n	80076dc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d002      	beq.n	80076d2 <USB_GetDevSpeed+0x32>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b06      	cmp	r3, #6
 80076d0:	d102      	bne.n	80076d8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076d2:	2302      	movs	r3, #2
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e001      	b.n	80076dc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076d8:	230f      	movs	r3, #15
 80076da:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d13a      	bne.n	800777c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770c:	69da      	ldr	r2, [r3, #28]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	2101      	movs	r1, #1
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	b29b      	uxth	r3, r3
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007724:	4313      	orrs	r3, r2
 8007726:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d155      	bne.n	80077ea <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800775a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	059b      	lsls	r3, r3, #22
 8007760:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007762:	4313      	orrs	r3, r2
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	e036      	b.n	80077ea <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007782:	69da      	ldr	r2, [r3, #28]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	2101      	movs	r1, #1
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	041b      	lsls	r3, r3, #16
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800779a:	4313      	orrs	r3, r2
 800779c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11a      	bne.n	80077ea <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	791b      	ldrb	r3, [r3, #4]
 80077ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077d0:	430b      	orrs	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	f040 817a 	bne.w	8007b0e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d132      	bne.n	8007888 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	440a      	add	r2, r1
 8007838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007880:	0cdb      	lsrs	r3, r3, #19
 8007882:	04db      	lsls	r3, r3, #19
 8007884:	6113      	str	r3, [r2, #16]
 8007886:	e092      	b.n	80079ae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a2:	0cdb      	lsrs	r3, r3, #19
 80078a4:	04db      	lsls	r3, r3, #19
 80078a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d11a      	bne.n	8007908 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d903      	bls.n	80078e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007904:	6113      	str	r3, [r2, #16]
 8007906:	e01b      	b.n	8007940 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007914:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6919      	ldr	r1, [r3, #16]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	440b      	add	r3, r1
 8007920:	1e59      	subs	r1, r3, #1
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	fbb1 f3f3 	udiv	r3, r1, r3
 800792a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800792c:	4ba2      	ldr	r3, [pc, #648]	; (8007bb8 <USB_EPStartXfer+0x3c0>)
 800792e:	400b      	ands	r3, r1
 8007930:	69b9      	ldr	r1, [r7, #24]
 8007932:	0148      	lsls	r0, r1, #5
 8007934:	69f9      	ldr	r1, [r7, #28]
 8007936:	4401      	add	r1, r0
 8007938:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800793c:	4313      	orrs	r3, r2
 800793e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007956:	69b9      	ldr	r1, [r7, #24]
 8007958:	0148      	lsls	r0, r1, #5
 800795a:	69f9      	ldr	r1, [r7, #28]
 800795c:	4401      	add	r1, r0
 800795e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007962:	4313      	orrs	r3, r2
 8007964:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d11f      	bne.n	80079ae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	0151      	lsls	r1, r2, #5
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	440a      	add	r2, r1
 8007984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007988:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800798c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d14b      	bne.n	8007a4c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d009      	beq.n	80079d0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c8:	461a      	mov	r2, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	791b      	ldrb	r3, [r3, #4]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d128      	bne.n	8007a2a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d110      	bne.n	8007a0a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	e00f      	b.n	8007a2a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e165      	b.n	8007d18 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d015      	beq.n	8007aa0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 814d 	beq.w	8007d18 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	2101      	movs	r1, #1
 8007a90:	fa01 f303 	lsl.w	r3, r1, r3
 8007a94:	69f9      	ldr	r1, [r7, #28]
 8007a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	634b      	str	r3, [r1, #52]	; 0x34
 8007a9e:	e13b      	b.n	8007d18 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d110      	bne.n	8007ad2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	0151      	lsls	r1, r2, #5
 8007ac2:	69fa      	ldr	r2, [r7, #28]
 8007ac4:	440a      	add	r2, r1
 8007ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	e00f      	b.n	8007af2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	68d9      	ldr	r1, [r3, #12]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	b298      	uxth	r0, r3
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f9b8 	bl	8007e7c <USB_WritePacket>
 8007b0c:	e104      	b.n	8007d18 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b28:	0cdb      	lsrs	r3, r3, #19
 8007b2a:	04db      	lsls	r3, r3, #19
 8007b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b50:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d131      	bne.n	8007bbc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	0148      	lsls	r0, r1, #5
 8007b8a:	69f9      	ldr	r1, [r7, #28]
 8007b8c:	4401      	add	r1, r0
 8007b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b92:	4313      	orrs	r3, r2
 8007b94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bb4:	6113      	str	r3, [r2, #16]
 8007bb6:	e061      	b.n	8007c7c <USB_EPStartXfer+0x484>
 8007bb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d123      	bne.n	8007c0c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bda:	69b9      	ldr	r1, [r7, #24]
 8007bdc:	0148      	lsls	r0, r1, #5
 8007bde:	69f9      	ldr	r1, [r7, #28]
 8007be0:	4401      	add	r1, r0
 8007be2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007be6:	4313      	orrs	r3, r2
 8007be8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c08:	6113      	str	r3, [r2, #16]
 8007c0a:	e037      	b.n	8007c7c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	4413      	add	r3, r2
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	8afa      	ldrh	r2, [r7, #22]
 8007c28:	fb03 f202 	mul.w	r2, r3, r2
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	691a      	ldr	r2, [r3, #16]
 8007c3e:	8afb      	ldrh	r3, [r7, #22]
 8007c40:	04d9      	lsls	r1, r3, #19
 8007c42:	4b38      	ldr	r3, [pc, #224]	; (8007d24 <USB_EPStartXfer+0x52c>)
 8007c44:	400b      	ands	r3, r1
 8007c46:	69b9      	ldr	r1, [r7, #24]
 8007c48:	0148      	lsls	r0, r1, #5
 8007c4a:	69f9      	ldr	r1, [r7, #28]
 8007c4c:	4401      	add	r1, r0
 8007c4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c52:	4313      	orrs	r3, r2
 8007c54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c6c:	69b9      	ldr	r1, [r7, #24]
 8007c6e:	0148      	lsls	r0, r1, #5
 8007c70:	69f9      	ldr	r1, [r7, #28]
 8007c72:	4401      	add	r1, r0
 8007c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d10d      	bne.n	8007c9e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	68d9      	ldr	r1, [r3, #12]
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d128      	bne.n	8007cf8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d110      	bne.n	8007cd8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	e00f      	b.n	8007cf8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	1ff80000 	.word	0x1ff80000

08007d28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d14a      	bne.n	8007ddc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5e:	f040 8086 	bne.w	8007e6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	7812      	ldrb	r2, [r2, #0]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	7812      	ldrb	r2, [r2, #0]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007da8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d902      	bls.n	8007dc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dbe:	e056      	b.n	8007e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd8:	d0e7      	beq.n	8007daa <USB_EPStopXfer+0x82>
 8007dda:	e048      	b.n	8007e6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007df4:	d13b      	bne.n	8007e6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	0151      	lsls	r1, r2, #5
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	440a      	add	r2, r1
 8007e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d902      	bls.n	8007e54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]
          break;
 8007e52:	e00c      	b.n	8007e6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e6c:	d0e7      	beq.n	8007e3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b089      	sub	sp, #36	; 0x24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4611      	mov	r1, r2
 8007e88:	461a      	mov	r2, r3
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	71fb      	strb	r3, [r7, #7]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d123      	bne.n	8007eea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ea2:	88bb      	ldrh	r3, [r7, #4]
 8007ea4:	3303      	adds	r3, #3
 8007ea6:	089b      	lsrs	r3, r3, #2
 8007ea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	e018      	b.n	8007ee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	031a      	lsls	r2, r3, #12
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d3e2      	bcc.n	8007eb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3724      	adds	r7, #36	; 0x24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b08b      	sub	sp, #44	; 0x2c
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	089b      	lsrs	r3, r3, #2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f1e:	2300      	movs	r3, #0
 8007f20:	623b      	str	r3, [r7, #32]
 8007f22:	e014      	b.n	8007f4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	3301      	adds	r3, #1
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	3301      	adds	r3, #1
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	3301      	adds	r3, #1
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	3301      	adds	r3, #1
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d3e6      	bcc.n	8007f24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f56:	8bfb      	ldrh	r3, [r7, #30]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01e      	beq.n	8007f9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f66:	461a      	mov	r2, r3
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	701a      	strb	r2, [r3, #0]
      i++;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	3301      	adds	r3, #1
 8007f86:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f8e:	8bfb      	ldrh	r3, [r7, #30]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f94:	8bfb      	ldrh	r3, [r7, #30]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1ea      	bne.n	8007f70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	372c      	adds	r7, #44	; 0x2c
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d12c      	bne.n	800801e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	db12      	blt.n	8007ffc <USB_EPSetStall+0x54>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ffa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	440a      	add	r2, r1
 8008012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e02b      	b.n	8008076 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	db12      	blt.n	8008056 <USB_EPSetStall+0xae>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00f      	beq.n	8008056 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008054:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	0151      	lsls	r1, r2, #5
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	440a      	add	r2, r1
 800806c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d128      	bne.n	80080f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	791b      	ldrb	r3, [r3, #4]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d003      	beq.n	80080d0 <USB_EPClearStall+0x4c>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d138      	bne.n	8008142 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	e027      	b.n	8008142 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800810c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008110:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d003      	beq.n	8008122 <USB_EPClearStall+0x9e>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	791b      	ldrb	r3, [r3, #4]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d10f      	bne.n	8008142 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	0151      	lsls	r1, r2, #5
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	440a      	add	r2, r1
 8008138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800813c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008140:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800816e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008172:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008184:	68f9      	ldr	r1, [r7, #12]
 8008186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800818a:	4313      	orrs	r3, r2
 800818c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4013      	ands	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081b4:	68fb      	ldr	r3, [r7, #12]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	4013      	ands	r3, r2
 80081e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	0c1b      	lsrs	r3, r3, #16
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b085      	sub	sp, #20
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	b29b      	uxth	r3, r3
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4013      	ands	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008258:	68bb      	ldr	r3, [r7, #8]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008266:	b480      	push	{r7}
 8008268:	b087      	sub	sp, #28
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008288:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	fa22 f303 	lsr.w	r3, r2, r3
 8008296:	01db      	lsls	r3, r3, #7
 8008298:	b2db      	uxtb	r3, r3
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4013      	ands	r3, r2
 80082b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082b4:	68bb      	ldr	r3, [r7, #8]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f003 0301 	and.w	r3, r3, #1
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082fc:	f023 0307 	bic.w	r3, r3, #7
 8008300:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008314:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	460b      	mov	r3, r1
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	333c      	adds	r3, #60	; 0x3c
 800833a:	3304      	adds	r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4a26      	ldr	r2, [pc, #152]	; (80083dc <USB_EP0_OutStart+0xb8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d90a      	bls.n	800835e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008358:	d101      	bne.n	800835e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	e037      	b.n	80083ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	461a      	mov	r2, r3
 8008366:	2300      	movs	r3, #0
 8008368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800838c:	f043 0318 	orr.w	r3, r3, #24
 8008390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d10f      	bne.n	80083cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	4f54300a 	.word	0x4f54300a

080083e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d009      	beq.n	8008424 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4611      	mov	r1, r2
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	4798      	blx	r3
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008454:	2303      	movs	r3, #3
 8008456:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f001 f8b8 	bl	80095ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	2b02      	cmp	r3, #2
 800849c:	d01a      	beq.n	80084d4 <USBD_LL_SetupStage+0x72>
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d822      	bhi.n	80084e8 <USBD_LL_SetupStage+0x86>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <USBD_LL_SetupStage+0x4a>
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d00a      	beq.n	80084c0 <USBD_LL_SetupStage+0x5e>
 80084aa:	e01d      	b.n	80084e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fb0f 	bl	8008ad8 <USBD_StdDevReq>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
      break;
 80084be:	e020      	b.n	8008502 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fb77 	bl	8008bbc <USBD_StdItfReq>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
      break;
 80084d2:	e016      	b.n	8008502 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fbd9 	bl	8008c94 <USBD_StdEPReq>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
      break;
 80084e6:	e00c      	b.n	8008502 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 fff0 	bl	800a4dc <USBD_LL_StallEP>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008500:	bf00      	nop
  }

  return ret;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d16e      	bne.n	8008602 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800852a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008532:	2b03      	cmp	r3, #3
 8008534:	f040 8098 	bne.w	8008668 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d913      	bls.n	800856c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	4293      	cmp	r3, r2
 800855c:	bf28      	it	cs
 800855e:	4613      	movcs	r3, r2
 8008560:	461a      	mov	r2, r3
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f001 f8b7 	bl	80096d8 <USBD_CtlContinueRx>
 800856a:	e07d      	b.n	8008668 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	2b02      	cmp	r3, #2
 8008578:	d014      	beq.n	80085a4 <USBD_LL_DataOutStage+0x98>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d81d      	bhi.n	80085ba <USBD_LL_DataOutStage+0xae>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <USBD_LL_DataOutStage+0x7c>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d003      	beq.n	800858e <USBD_LL_DataOutStage+0x82>
 8008586:	e018      	b.n	80085ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	75bb      	strb	r3, [r7, #22]
            break;
 800858c:	e018      	b.n	80085c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008594:	b2db      	uxtb	r3, r3
 8008596:	4619      	mov	r1, r3
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 fa64 	bl	8008a66 <USBD_CoreFindIF>
 800859e:	4603      	mov	r3, r0
 80085a0:	75bb      	strb	r3, [r7, #22]
            break;
 80085a2:	e00d      	b.n	80085c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	4619      	mov	r1, r3
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fa66 	bl	8008a80 <USBD_CoreFindEP>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75bb      	strb	r3, [r7, #22]
            break;
 80085b8:	e002      	b.n	80085c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75bb      	strb	r3, [r7, #22]
            break;
 80085be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085c0:	7dbb      	ldrb	r3, [r7, #22]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d119      	bne.n	80085fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d113      	bne.n	80085fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085d2:	7dba      	ldrb	r2, [r7, #22]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	32ae      	adds	r2, #174	; 0xae
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085e2:	7dba      	ldrb	r2, [r7, #22]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085ea:	7dba      	ldrb	r2, [r7, #22]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	32ae      	adds	r2, #174	; 0xae
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f001 f87d 	bl	80096fa <USBD_CtlSendStatus>
 8008600:	e032      	b.n	8008668 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008608:	b2db      	uxtb	r3, r3
 800860a:	4619      	mov	r1, r3
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 fa37 	bl	8008a80 <USBD_CoreFindEP>
 8008612:	4603      	mov	r3, r0
 8008614:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008616:	7dbb      	ldrb	r3, [r7, #22]
 8008618:	2bff      	cmp	r3, #255	; 0xff
 800861a:	d025      	beq.n	8008668 <USBD_LL_DataOutStage+0x15c>
 800861c:	7dbb      	ldrb	r3, [r7, #22]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d122      	bne.n	8008668 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b03      	cmp	r3, #3
 800862c:	d117      	bne.n	800865e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800862e:	7dba      	ldrb	r2, [r7, #22]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	32ae      	adds	r2, #174	; 0xae
 8008634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00f      	beq.n	800865e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800863e:	7dba      	ldrb	r2, [r7, #22]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008646:	7dba      	ldrb	r2, [r7, #22]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	32ae      	adds	r2, #174	; 0xae
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	7afa      	ldrb	r2, [r7, #11]
 8008654:	4611      	mov	r1, r2
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	4798      	blx	r3
 800865a:	4603      	mov	r3, r0
 800865c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	e000      	b.n	800866a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b086      	sub	sp, #24
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	460b      	mov	r3, r1
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d16f      	bne.n	8008766 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3314      	adds	r3, #20
 800868a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008692:	2b02      	cmp	r3, #2
 8008694:	d15a      	bne.n	800874c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d914      	bls.n	80086cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	1ad2      	subs	r2, r2, r3
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fffc 	bl	80096b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	2100      	movs	r1, #0
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f001 ffb3 	bl	800a630 <USBD_LL_PrepareReceive>
 80086ca:	e03f      	b.n	800874c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d11c      	bne.n	8008712 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d316      	bcc.n	8008712 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d20f      	bcs.n	8008712 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086f2:	2200      	movs	r2, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 ffdd 	bl	80096b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008704:	2300      	movs	r3, #0
 8008706:	2200      	movs	r2, #0
 8008708:	2100      	movs	r1, #0
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f001 ff90 	bl	800a630 <USBD_LL_PrepareReceive>
 8008710:	e01c      	b.n	800874c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d10f      	bne.n	800873e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800873e:	2180      	movs	r1, #128	; 0x80
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f001 fecb 	bl	800a4dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 ffea 	bl	8009720 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d03a      	beq.n	80087cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fe42 	bl	80083e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008764:	e032      	b.n	80087cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800876c:	b2db      	uxtb	r3, r3
 800876e:	4619      	mov	r1, r3
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 f985 	bl	8008a80 <USBD_CoreFindEP>
 8008776:	4603      	mov	r3, r0
 8008778:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	2bff      	cmp	r3, #255	; 0xff
 800877e:	d025      	beq.n	80087cc <USBD_LL_DataInStage+0x15a>
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d122      	bne.n	80087cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d11c      	bne.n	80087cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008792:	7dfa      	ldrb	r2, [r7, #23]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	32ae      	adds	r2, #174	; 0xae
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d014      	beq.n	80087cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80087a2:	7dfa      	ldrb	r2, [r7, #23]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087aa:	7dfa      	ldrb	r2, [r7, #23]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	32ae      	adds	r2, #174	; 0xae
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	7afa      	ldrb	r2, [r7, #11]
 80087b8:	4611      	mov	r1, r2
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	4798      	blx	r3
 80087be:	4603      	mov	r3, r0
 80087c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087c2:	7dbb      	ldrb	r3, [r7, #22]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087c8:	7dbb      	ldrb	r3, [r7, #22]
 80087ca:	e000      	b.n	80087ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d014      	beq.n	800883c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6852      	ldr	r2, [r2, #4]
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	4611      	mov	r1, r2
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fe24 	bl	800a490 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2240      	movs	r2, #64	; 0x40
 8008854:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	2200      	movs	r2, #0
 800885c:	2180      	movs	r1, #128	; 0x80
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 fe16 	bl	800a490 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2240      	movs	r2, #64	; 0x40
 800886e:	621a      	str	r2, [r3, #32]

  return ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d006      	beq.n	80088bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2204      	movs	r2, #4
 80088c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d106      	bne.n	80088f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b03      	cmp	r3, #3
 8008914:	d110      	bne.n	8008938 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	32ae      	adds	r2, #174	; 0xae
 8008958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	e01c      	b.n	800899e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b03      	cmp	r3, #3
 800896e:	d115      	bne.n	800899c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	32ae      	adds	r2, #174	; 0xae
 800897a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	32ae      	adds	r2, #174	; 0xae
 800898e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	4611      	mov	r1, r2
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	32ae      	adds	r2, #174	; 0xae
 80089bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e01c      	b.n	8008a02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d115      	bne.n	8008a00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	32ae      	adds	r2, #174	; 0xae
 80089de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	32ae      	adds	r2, #174	; 0xae
 80089f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	4611      	mov	r1, r2
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6852      	ldr	r2, [r2, #4]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b087      	sub	sp, #28
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ab8:	8a3b      	ldrh	r3, [r7, #16]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b21a      	sxth	r2, r3
 8008abe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b21b      	sxth	r3, r3
 8008ac6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	d005      	beq.n	8008afe <USBD_StdDevReq+0x26>
 8008af2:	2b40      	cmp	r3, #64	; 0x40
 8008af4:	d857      	bhi.n	8008ba6 <USBD_StdDevReq+0xce>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <USBD_StdDevReq+0x42>
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d153      	bne.n	8008ba6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	32ae      	adds	r2, #174	; 0xae
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]
      break;
 8008b18:	e04a      	b.n	8008bb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d83b      	bhi.n	8008b9a <USBD_StdDevReq+0xc2>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <USBD_StdDevReq+0x50>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b7d 	.word	0x08008b7d
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008b9b 	.word	0x08008b9b
 8008b34:	08008b87 	.word	0x08008b87
 8008b38:	08008b9b 	.word	0x08008b9b
 8008b3c:	08008b5b 	.word	0x08008b5b
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b9b 	.word	0x08008b9b
 8008b48:	08008b73 	.word	0x08008b73
 8008b4c:	08008b65 	.word	0x08008b65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa3c 	bl	8008fd0 <USBD_GetDescriptor>
          break;
 8008b58:	e024      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fba1 	bl	80092a4 <USBD_SetAddress>
          break;
 8008b62:	e01f      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fbe0 	bl	800932c <USBD_SetConfig>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]
          break;
 8008b70:	e018      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc83 	bl	8009480 <USBD_GetConfig>
          break;
 8008b7a:	e013      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fcb4 	bl	80094ec <USBD_GetStatus>
          break;
 8008b84:	e00e      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fce3 	bl	8009554 <USBD_SetFeature>
          break;
 8008b8e:	e009      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fd07 	bl	80095a6 <USBD_ClrFeature>
          break;
 8008b98:	e004      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fd5e 	bl	800965e <USBD_CtlError>
          break;
 8008ba2:	bf00      	nop
      }
      break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fd58 	bl	800965e <USBD_CtlError>
      break;
 8008bae:	bf00      	nop
  }

  return ret;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop

08008bbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d005      	beq.n	8008be2 <USBD_StdItfReq+0x26>
 8008bd6:	2b40      	cmp	r3, #64	; 0x40
 8008bd8:	d852      	bhi.n	8008c80 <USBD_StdItfReq+0xc4>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <USBD_StdItfReq+0x26>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d14e      	bne.n	8008c80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d840      	bhi.n	8008c72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	889b      	ldrh	r3, [r3, #4]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d836      	bhi.n	8008c68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ff2f 	bl	8008a66 <USBD_CoreFindIF>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2bff      	cmp	r3, #255	; 0xff
 8008c10:	d01d      	beq.n	8008c4e <USBD_StdItfReq+0x92>
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11a      	bne.n	8008c4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c18:	7bba      	ldrb	r2, [r7, #14]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	32ae      	adds	r2, #174	; 0xae
 8008c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00f      	beq.n	8008c48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c28:	7bba      	ldrb	r2, [r7, #14]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c30:	7bba      	ldrb	r2, [r7, #14]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32ae      	adds	r2, #174	; 0xae
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c46:	e004      	b.n	8008c52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c4c:	e001      	b.n	8008c52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d110      	bne.n	8008c7c <USBD_StdItfReq+0xc0>
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10d      	bne.n	8008c7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fd4a 	bl	80096fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c66:	e009      	b.n	8008c7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fcf7 	bl	800965e <USBD_CtlError>
          break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fcf2 	bl	800965e <USBD_CtlError>
          break;
 8008c7a:	e000      	b.n	8008c7e <USBD_StdItfReq+0xc2>
          break;
 8008c7c:	bf00      	nop
      }
      break;
 8008c7e:	e004      	b.n	8008c8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fceb 	bl	800965e <USBD_CtlError>
      break;
 8008c88:	bf00      	nop
  }

  return ret;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d007      	beq.n	8008cc4 <USBD_StdEPReq+0x30>
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	f200 817f 	bhi.w	8008fb8 <USBD_StdEPReq+0x324>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d02a      	beq.n	8008d14 <USBD_StdEPReq+0x80>
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	f040 817a 	bne.w	8008fb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fed9 	bl	8008a80 <USBD_CoreFindEP>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cd2:	7b7b      	ldrb	r3, [r7, #13]
 8008cd4:	2bff      	cmp	r3, #255	; 0xff
 8008cd6:	f000 8174 	beq.w	8008fc2 <USBD_StdEPReq+0x32e>
 8008cda:	7b7b      	ldrb	r3, [r7, #13]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 8170 	bne.w	8008fc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ce2:	7b7a      	ldrb	r2, [r7, #13]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008cea:	7b7a      	ldrb	r2, [r7, #13]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32ae      	adds	r2, #174	; 0xae
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 8163 	beq.w	8008fc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008cfc:	7b7a      	ldrb	r2, [r7, #13]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	32ae      	adds	r2, #174	; 0xae
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d12:	e156      	b.n	8008fc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d008      	beq.n	8008d2e <USBD_StdEPReq+0x9a>
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	f300 8145 	bgt.w	8008fac <USBD_StdEPReq+0x318>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 809b 	beq.w	8008e5e <USBD_StdEPReq+0x1ca>
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d03c      	beq.n	8008da6 <USBD_StdEPReq+0x112>
 8008d2c:	e13e      	b.n	8008fac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d002      	beq.n	8008d40 <USBD_StdEPReq+0xac>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d016      	beq.n	8008d6c <USBD_StdEPReq+0xd8>
 8008d3e:	e02c      	b.n	8008d9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00d      	beq.n	8008d62 <USBD_StdEPReq+0xce>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b80      	cmp	r3, #128	; 0x80
 8008d4a:	d00a      	beq.n	8008d62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fbc3 	bl	800a4dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d56:	2180      	movs	r1, #128	; 0x80
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 fbbf 	bl	800a4dc <USBD_LL_StallEP>
 8008d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d60:	e020      	b.n	8008da4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc7a 	bl	800965e <USBD_CtlError>
              break;
 8008d6a:	e01b      	b.n	8008da4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10e      	bne.n	8008d92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <USBD_StdEPReq+0xfe>
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b80      	cmp	r3, #128	; 0x80
 8008d7e:	d008      	beq.n	8008d92 <USBD_StdEPReq+0xfe>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d104      	bne.n	8008d92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 fba5 	bl	800a4dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fcb1 	bl	80096fa <USBD_CtlSendStatus>

              break;
 8008d98:	e004      	b.n	8008da4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc5e 	bl	800965e <USBD_CtlError>
              break;
 8008da2:	bf00      	nop
          }
          break;
 8008da4:	e107      	b.n	8008fb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d002      	beq.n	8008db8 <USBD_StdEPReq+0x124>
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d016      	beq.n	8008de4 <USBD_StdEPReq+0x150>
 8008db6:	e04b      	b.n	8008e50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00d      	beq.n	8008dda <USBD_StdEPReq+0x146>
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	2b80      	cmp	r3, #128	; 0x80
 8008dc2:	d00a      	beq.n	8008dda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 fb87 	bl	800a4dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dce:	2180      	movs	r1, #128	; 0x80
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 fb83 	bl	800a4dc <USBD_LL_StallEP>
 8008dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dd8:	e040      	b.n	8008e5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc3e 	bl	800965e <USBD_CtlError>
              break;
 8008de2:	e03b      	b.n	8008e5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d136      	bne.n	8008e5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 fb8d 	bl	800a51a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fc7a 	bl	80096fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fe38 	bl	8008a80 <USBD_CoreFindEP>
 8008e10:	4603      	mov	r3, r0
 8008e12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e14:	7b7b      	ldrb	r3, [r7, #13]
 8008e16:	2bff      	cmp	r3, #255	; 0xff
 8008e18:	d01f      	beq.n	8008e5a <USBD_StdEPReq+0x1c6>
 8008e1a:	7b7b      	ldrb	r3, [r7, #13]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d11c      	bne.n	8008e5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e20:	7b7a      	ldrb	r2, [r7, #13]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e28:	7b7a      	ldrb	r2, [r7, #13]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32ae      	adds	r2, #174	; 0xae
 8008e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d010      	beq.n	8008e5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e38:	7b7a      	ldrb	r2, [r7, #13]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32ae      	adds	r2, #174	; 0xae
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e4e:	e004      	b.n	8008e5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc03 	bl	800965e <USBD_CtlError>
              break;
 8008e58:	e000      	b.n	8008e5c <USBD_StdEPReq+0x1c8>
              break;
 8008e5a:	bf00      	nop
          }
          break;
 8008e5c:	e0ab      	b.n	8008fb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d002      	beq.n	8008e70 <USBD_StdEPReq+0x1dc>
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d032      	beq.n	8008ed4 <USBD_StdEPReq+0x240>
 8008e6e:	e097      	b.n	8008fa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <USBD_StdEPReq+0x1f2>
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	d004      	beq.n	8008e86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fbed 	bl	800965e <USBD_CtlError>
                break;
 8008e84:	e091      	b.n	8008faa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da0b      	bge.n	8008ea6 <USBD_StdEPReq+0x212>
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	3310      	adds	r3, #16
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	e00b      	b.n	8008ebe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	4413      	add	r3, r2
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fbd7 	bl	8009680 <USBD_CtlSendData>
              break;
 8008ed2:	e06a      	b.n	8008faa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da11      	bge.n	8008f00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	f003 020f 	and.w	r2, r3, #15
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	3324      	adds	r3, #36	; 0x24
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d117      	bne.n	8008f26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fbb0 	bl	800965e <USBD_CtlError>
                  break;
 8008efe:	e054      	b.n	8008faa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	f003 020f 	and.w	r2, r3, #15
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fb9d 	bl	800965e <USBD_CtlError>
                  break;
 8008f24:	e041      	b.n	8008faa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da0b      	bge.n	8008f46 <USBD_StdEPReq+0x2b2>
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	3304      	adds	r3, #4
 8008f44:	e00b      	b.n	8008f5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <USBD_StdEPReq+0x2d8>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b80      	cmp	r3, #128	; 0x80
 8008f6a:	d103      	bne.n	8008f74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	e00e      	b.n	8008f92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 faed 	bl	800a558 <USBD_LL_IsStallEP>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2201      	movs	r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	e002      	b.n	8008f92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2202      	movs	r2, #2
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fb71 	bl	8009680 <USBD_CtlSendData>
              break;
 8008f9e:	e004      	b.n	8008faa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fb5b 	bl	800965e <USBD_CtlError>
              break;
 8008fa8:	bf00      	nop
          }
          break;
 8008faa:	e004      	b.n	8008fb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fb55 	bl	800965e <USBD_CtlError>
          break;
 8008fb4:	bf00      	nop
      }
      break;
 8008fb6:	e005      	b.n	8008fc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fb4f 	bl	800965e <USBD_CtlError>
      break;
 8008fc0:	e000      	b.n	8008fc4 <USBD_StdEPReq+0x330>
      break;
 8008fc2:	bf00      	nop
  }

  return ret;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	885b      	ldrh	r3, [r3, #2]
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	2b06      	cmp	r3, #6
 8008ff2:	f200 8128 	bhi.w	8009246 <USBD_GetDescriptor+0x276>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBD_GetDescriptor+0x2c>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009019 	.word	0x08009019
 8009000:	08009031 	.word	0x08009031
 8009004:	08009071 	.word	0x08009071
 8009008:	08009247 	.word	0x08009247
 800900c:	08009247 	.word	0x08009247
 8009010:	080091e7 	.word	0x080091e7
 8009014:	08009213 	.word	0x08009213
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
      break;
 800902e:	e112      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7c1b      	ldrb	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10d      	bne.n	8009054 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	f107 0208 	add.w	r2, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3301      	adds	r3, #1
 800904e:	2202      	movs	r2, #2
 8009050:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009052:	e100      	b.n	8009256 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	f107 0208 	add.w	r2, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3301      	adds	r3, #1
 800906a:	2202      	movs	r2, #2
 800906c:	701a      	strb	r2, [r3, #0]
      break;
 800906e:	e0f2      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	885b      	ldrh	r3, [r3, #2]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b05      	cmp	r3, #5
 8009078:	f200 80ac 	bhi.w	80091d4 <USBD_GetDescriptor+0x204>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <USBD_GetDescriptor+0xb4>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	0800909d 	.word	0x0800909d
 8009088:	080090d1 	.word	0x080090d1
 800908c:	08009105 	.word	0x08009105
 8009090:	08009139 	.word	0x08009139
 8009094:	0800916d 	.word	0x0800916d
 8009098:	080091a1 	.word	0x080091a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090be:	e091      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 facb 	bl	800965e <USBD_CtlError>
            err++;
 80090c8:	7afb      	ldrb	r3, [r7, #11]
 80090ca:	3301      	adds	r3, #1
 80090cc:	72fb      	strb	r3, [r7, #11]
          break;
 80090ce:	e089      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	7c12      	ldrb	r2, [r2, #16]
 80090e8:	f107 0108 	add.w	r1, r7, #8
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
 80090f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f2:	e077      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fab1 	bl	800965e <USBD_CtlError>
            err++;
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	3301      	adds	r3, #1
 8009100:	72fb      	strb	r3, [r7, #11]
          break;
 8009102:	e06f      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7c12      	ldrb	r2, [r2, #16]
 800911c:	f107 0108 	add.w	r1, r7, #8
 8009120:	4610      	mov	r0, r2
 8009122:	4798      	blx	r3
 8009124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009126:	e05d      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa97 	bl	800965e <USBD_CtlError>
            err++;
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	3301      	adds	r3, #1
 8009134:	72fb      	strb	r3, [r7, #11]
          break;
 8009136:	e055      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7c12      	ldrb	r2, [r2, #16]
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
 8009158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915a:	e043      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa7d 	bl	800965e <USBD_CtlError>
            err++;
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	3301      	adds	r3, #1
 8009168:	72fb      	strb	r3, [r7, #11]
          break;
 800916a:	e03b      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	7c12      	ldrb	r2, [r2, #16]
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918e:	e029      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa63 	bl	800965e <USBD_CtlError>
            err++;
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	3301      	adds	r3, #1
 800919c:	72fb      	strb	r3, [r7, #11]
          break;
 800919e:	e021      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	7c12      	ldrb	r2, [r2, #16]
 80091b8:	f107 0108 	add.w	r1, r7, #8
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
 80091c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c2:	e00f      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa49 	bl	800965e <USBD_CtlError>
            err++;
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	3301      	adds	r3, #1
 80091d0:	72fb      	strb	r3, [r7, #11]
          break;
 80091d2:	e007      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa41 	bl	800965e <USBD_CtlError>
          err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80091e2:	bf00      	nop
      }
      break;
 80091e4:	e037      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7c1b      	ldrb	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	f107 0208 	add.w	r2, r7, #8
 80091fa:	4610      	mov	r0, r2
 80091fc:	4798      	blx	r3
 80091fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009200:	e029      	b.n	8009256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fa2a 	bl	800965e <USBD_CtlError>
        err++;
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	3301      	adds	r3, #1
 800920e:	72fb      	strb	r3, [r7, #11]
      break;
 8009210:	e021      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7c1b      	ldrb	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10d      	bne.n	8009236 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	f107 0208 	add.w	r2, r7, #8
 8009226:	4610      	mov	r0, r2
 8009228:	4798      	blx	r3
 800922a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	2207      	movs	r2, #7
 8009232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009234:	e00f      	b.n	8009256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa10 	bl	800965e <USBD_CtlError>
        err++;
 800923e:	7afb      	ldrb	r3, [r7, #11]
 8009240:	3301      	adds	r3, #1
 8009242:	72fb      	strb	r3, [r7, #11]
      break;
 8009244:	e007      	b.n	8009256 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fa08 	bl	800965e <USBD_CtlError>
      err++;
 800924e:	7afb      	ldrb	r3, [r7, #11]
 8009250:	3301      	adds	r3, #1
 8009252:	72fb      	strb	r3, [r7, #11]
      break;
 8009254:	bf00      	nop
  }

  if (err != 0U)
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d11e      	bne.n	800929a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	88db      	ldrh	r3, [r3, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d016      	beq.n	8009292 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009264:	893b      	ldrh	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00e      	beq.n	8009288 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88da      	ldrh	r2, [r3, #6]
 800926e:	893b      	ldrh	r3, [r7, #8]
 8009270:	4293      	cmp	r3, r2
 8009272:	bf28      	it	cs
 8009274:	4613      	movcs	r3, r2
 8009276:	b29b      	uxth	r3, r3
 8009278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800927a:	893b      	ldrh	r3, [r7, #8]
 800927c:	461a      	mov	r2, r3
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f9fd 	bl	8009680 <USBD_CtlSendData>
 8009286:	e009      	b.n	800929c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9e7 	bl	800965e <USBD_CtlError>
 8009290:	e004      	b.n	800929c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa31 	bl	80096fa <USBD_CtlSendStatus>
 8009298:	e000      	b.n	800929c <USBD_GetDescriptor+0x2cc>
    return;
 800929a:	bf00      	nop
  }
}
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d131      	bne.n	800931a <USBD_SetAddress+0x76>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d12d      	bne.n	800931a <USBD_SetAddress+0x76>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	885b      	ldrh	r3, [r3, #2]
 80092c2:	2b7f      	cmp	r3, #127	; 0x7f
 80092c4:	d829      	bhi.n	800931a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	885b      	ldrh	r3, [r3, #2]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d104      	bne.n	80092e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9bc 	bl	800965e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e6:	e01d      	b.n	8009324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7bfa      	ldrb	r2, [r7, #15]
 80092ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 f95b 	bl	800a5b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f9fd 	bl	80096fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930e:	e009      	b.n	8009324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009318:	e004      	b.n	8009324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f99e 	bl	800965e <USBD_CtlError>
  }
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	885b      	ldrh	r3, [r3, #2]
 800933e:	b2da      	uxtb	r2, r3
 8009340:	4b4e      	ldr	r3, [pc, #312]	; (800947c <USBD_SetConfig+0x150>)
 8009342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009344:	4b4d      	ldr	r3, [pc, #308]	; (800947c <USBD_SetConfig+0x150>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d905      	bls.n	8009358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f985 	bl	800965e <USBD_CtlError>
    return USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	e08c      	b.n	8009472 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d002      	beq.n	800936a <USBD_SetConfig+0x3e>
 8009364:	2b03      	cmp	r3, #3
 8009366:	d029      	beq.n	80093bc <USBD_SetConfig+0x90>
 8009368:	e075      	b.n	8009456 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800936a:	4b44      	ldr	r3, [pc, #272]	; (800947c <USBD_SetConfig+0x150>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d020      	beq.n	80093b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009372:	4b42      	ldr	r3, [pc, #264]	; (800947c <USBD_SetConfig+0x150>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800937c:	4b3f      	ldr	r3, [pc, #252]	; (800947c <USBD_SetConfig+0x150>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff f837 	bl	80083f6 <USBD_SetClassConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d008      	beq.n	80093a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f962 	bl	800965e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2202      	movs	r2, #2
 800939e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093a2:	e065      	b.n	8009470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f9a8 	bl	80096fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2203      	movs	r2, #3
 80093ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093b2:	e05d      	b.n	8009470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f9a0 	bl	80096fa <USBD_CtlSendStatus>
      break;
 80093ba:	e059      	b.n	8009470 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093bc:	4b2f      	ldr	r3, [pc, #188]	; (800947c <USBD_SetConfig+0x150>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d112      	bne.n	80093ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80093cc:	4b2b      	ldr	r3, [pc, #172]	; (800947c <USBD_SetConfig+0x150>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093d6:	4b29      	ldr	r3, [pc, #164]	; (800947c <USBD_SetConfig+0x150>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff f826 	bl	800842e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f989 	bl	80096fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093e8:	e042      	b.n	8009470 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <USBD_SetConfig+0x150>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d02a      	beq.n	800944e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff f814 	bl	800842e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009406:	4b1d      	ldr	r3, [pc, #116]	; (800947c <USBD_SetConfig+0x150>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009410:	4b1a      	ldr	r3, [pc, #104]	; (800947c <USBD_SetConfig+0x150>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe ffed 	bl	80083f6 <USBD_SetClassConfig>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00f      	beq.n	8009446 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f918 	bl	800965e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe fff9 	bl	800842e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009444:	e014      	b.n	8009470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f957 	bl	80096fa <USBD_CtlSendStatus>
      break;
 800944c:	e010      	b.n	8009470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f953 	bl	80096fa <USBD_CtlSendStatus>
      break;
 8009454:	e00c      	b.n	8009470 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f900 	bl	800965e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800945e:	4b07      	ldr	r3, [pc, #28]	; (800947c <USBD_SetConfig+0x150>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7fe ffe2 	bl	800842e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
      break;
 800946e:	bf00      	nop
  }

  return ret;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200004c8 	.word	0x200004c8

08009480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	88db      	ldrh	r3, [r3, #6]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d004      	beq.n	800949c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8e2 	bl	800965e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800949a:	e023      	b.n	80094e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	dc02      	bgt.n	80094ae <USBD_GetConfig+0x2e>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc03      	bgt.n	80094b4 <USBD_GetConfig+0x34>
 80094ac:	e015      	b.n	80094da <USBD_GetConfig+0x5a>
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d00b      	beq.n	80094ca <USBD_GetConfig+0x4a>
 80094b2:	e012      	b.n	80094da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3308      	adds	r3, #8
 80094be:	2201      	movs	r2, #1
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8dc 	bl	8009680 <USBD_CtlSendData>
        break;
 80094c8:	e00c      	b.n	80094e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3304      	adds	r3, #4
 80094ce:	2201      	movs	r2, #1
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f8d4 	bl	8009680 <USBD_CtlSendData>
        break;
 80094d8:	e004      	b.n	80094e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f8be 	bl	800965e <USBD_CtlError>
        break;
 80094e2:	bf00      	nop
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	2b02      	cmp	r3, #2
 8009502:	d81e      	bhi.n	8009542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	88db      	ldrh	r3, [r3, #6]
 8009508:	2b02      	cmp	r3, #2
 800950a:	d004      	beq.n	8009516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8a5 	bl	800965e <USBD_CtlError>
        break;
 8009514:	e01a      	b.n	800954c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f043 0202 	orr.w	r2, r3, #2
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	330c      	adds	r3, #12
 8009536:	2202      	movs	r2, #2
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f8a0 	bl	8009680 <USBD_CtlSendData>
      break;
 8009540:	e004      	b.n	800954c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f88a 	bl	800965e <USBD_CtlError>
      break;
 800954a:	bf00      	nop
  }
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	885b      	ldrh	r3, [r3, #2]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d107      	bne.n	8009576 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f8c3 	bl	80096fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009574:	e013      	b.n	800959e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	885b      	ldrh	r3, [r3, #2]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d10b      	bne.n	8009596 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	889b      	ldrh	r3, [r3, #4]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	b29b      	uxth	r3, r3
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f8b3 	bl	80096fa <USBD_CtlSendStatus>
}
 8009594:	e003      	b.n	800959e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f860 	bl	800965e <USBD_CtlError>
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	3b01      	subs	r3, #1
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d80b      	bhi.n	80095d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d10c      	bne.n	80095e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f893 	bl	80096fa <USBD_CtlSendStatus>
      }
      break;
 80095d4:	e004      	b.n	80095e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f840 	bl	800965e <USBD_CtlError>
      break;
 80095de:	e000      	b.n	80095e2 <USBD_ClrFeature+0x3c>
      break;
 80095e0:	bf00      	nop
  }
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781a      	ldrb	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	781a      	ldrb	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3301      	adds	r3, #1
 8009612:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7ff fa40 	bl	8008a9a <SWAPBYTE>
 800961a:	4603      	mov	r3, r0
 800961c:	461a      	mov	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3301      	adds	r3, #1
 8009626:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fa33 	bl	8008a9a <SWAPBYTE>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3301      	adds	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3301      	adds	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fa26 	bl	8008a9a <SWAPBYTE>
 800964e:	4603      	mov	r3, r0
 8009650:	461a      	mov	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	80da      	strh	r2, [r3, #6]
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009668:	2180      	movs	r1, #128	; 0x80
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 ff36 	bl	800a4dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 ff32 	bl	800a4dc <USBD_LL_StallEP>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2202      	movs	r2, #2
 8009690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	2100      	movs	r1, #0
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 ffa1 	bl	800a5ee <USBD_LL_Transmit>

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	2100      	movs	r1, #0
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 ff90 	bl	800a5ee <USBD_LL_Transmit>

  return USBD_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	2100      	movs	r1, #0
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 ffa0 	bl	800a630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2204      	movs	r2, #4
 8009706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800970a:	2300      	movs	r3, #0
 800970c:	2200      	movs	r2, #0
 800970e:	2100      	movs	r1, #0
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 ff6c 	bl	800a5ee <USBD_LL_Transmit>

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2205      	movs	r2, #5
 800972c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009730:	2300      	movs	r3, #0
 8009732:	2200      	movs	r2, #0
 8009734:	2100      	movs	r1, #0
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 ff7a 	bl	800a630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	601a      	str	r2, [r3, #0]
}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	6892      	ldr	r2, [r2, #8]
 80097a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6852      	ldr	r2, [r2, #4]
 80097ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d103      	bne.n	80097c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b090      	sub	sp, #64	; 0x40
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <xQueueGenericSendFromISR+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <xQueueGenericSendFromISR+0x3c>
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <xQueueGenericSendFromISR+0x40>
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <xQueueGenericSendFromISR+0x42>
 8009822:	2300      	movs	r3, #0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b02      	cmp	r3, #2
 8009842:	d103      	bne.n	800984c <xQueueGenericSendFromISR+0x6a>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <xQueueGenericSendFromISR+0x6e>
 800984c:	2301      	movs	r3, #1
 800984e:	e000      	b.n	8009852 <xQueueGenericSendFromISR+0x70>
 8009850:	2300      	movs	r3, #0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	623b      	str	r3, [r7, #32]
}
 8009868:	bf00      	nop
 800986a:	e7fe      	b.n	800986a <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800986c:	f000 fcde 	bl	800a22c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009870:	f3ef 8211 	mrs	r2, BASEPRI
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	61fa      	str	r2, [r7, #28]
 8009886:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009888:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009894:	429a      	cmp	r2, r3
 8009896:	d302      	bcc.n	800989e <xQueueGenericSendFromISR+0xbc>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d12f      	bne.n	80098fe <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098b4:	f000 f93d 	bl	8009b32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c0:	d112      	bne.n	80098e8 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d016      	beq.n	80098f8 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	3324      	adds	r3, #36	; 0x24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fb14 	bl	8009efc <xTaskRemoveFromEventList>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00e      	beq.n	80098f8 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00b      	beq.n	80098f8 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e007      	b.n	80098f8 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ec:	3301      	adds	r3, #1
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	b25a      	sxtb	r2, r3
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098f8:	2301      	movs	r3, #1
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80098fc:	e001      	b.n	8009902 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009904:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800990c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800990e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009910:	4618      	mov	r0, r3
 8009912:	3740      	adds	r7, #64	; 0x40
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08e      	sub	sp, #56	; 0x38
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	623b      	str	r3, [r7, #32]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <xQueueGiveFromISR+0x48>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	61fb      	str	r3, [r7, #28]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d103      	bne.n	8009970 <xQueueGiveFromISR+0x58>
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <xQueueGiveFromISR+0x5c>
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <xQueueGiveFromISR+0x5e>
 8009974:	2300      	movs	r3, #0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10a      	bne.n	8009990 <xQueueGiveFromISR+0x78>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	61bb      	str	r3, [r7, #24]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009990:	f000 fc4c 	bl	800a22c <vPortValidateInterruptPriority>
	__asm volatile
 8009994:	f3ef 8211 	mrs	r2, BASEPRI
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	617a      	str	r2, [r7, #20]
 80099aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80099ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099bc:	429a      	cmp	r2, r3
 80099be:	d22b      	bcs.n	8009a18 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099da:	d112      	bne.n	8009a02 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d016      	beq.n	8009a12 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	3324      	adds	r3, #36	; 0x24
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fa87 	bl	8009efc <xTaskRemoveFromEventList>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00e      	beq.n	8009a12 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e007      	b.n	8009a12 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a06:	3301      	adds	r3, #1
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	b25a      	sxtb	r2, r3
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a12:	2301      	movs	r3, #1
 8009a14:	637b      	str	r3, [r7, #52]	; 0x34
 8009a16:	e001      	b.n	8009a1c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f383 8811 	msr	BASEPRI, r3
}
 8009a26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3738      	adds	r7, #56	; 0x38
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b08e      	sub	sp, #56	; 0x38
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	623b      	str	r3, [r7, #32]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d103      	bne.n	8009a6c <xQueueReceiveFromISR+0x3a>
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <xQueueReceiveFromISR+0x3e>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e000      	b.n	8009a72 <xQueueReceiveFromISR+0x40>
 8009a70:	2300      	movs	r3, #0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	61fb      	str	r3, [r7, #28]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a8c:	f000 fbce 	bl	800a22c <vPortValidateInterruptPriority>
	__asm volatile
 8009a90:	f3ef 8211 	mrs	r2, BASEPRI
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	61ba      	str	r2, [r7, #24]
 8009aa6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009aa8:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d02f      	beq.n	8009b18 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ac6:	f000 f89e 	bl	8009c06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	1e5a      	subs	r2, r3, #1
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009ad2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ada:	d112      	bne.n	8009b02 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d016      	beq.n	8009b12 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	3310      	adds	r3, #16
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fa07 	bl	8009efc <xTaskRemoveFromEventList>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00e      	beq.n	8009b12 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00b      	beq.n	8009b12 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	e007      	b.n	8009b12 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b06:	3301      	adds	r3, #1
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	b25a      	sxtb	r2, r3
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b12:	2301      	movs	r3, #1
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
 8009b16:	e001      	b.n	8009b1c <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f383 8811 	msr	BASEPRI, r3
}
 8009b26:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3738      	adds	r7, #56	; 0x38
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10d      	bne.n	8009b6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d14d      	bne.n	8009bf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fa6d 	bl	800a03c <xTaskPriorityDisinherit>
 8009b62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	609a      	str	r2, [r3, #8]
 8009b6a:	e043      	b.n	8009bf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d119      	bne.n	8009ba6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6858      	ldr	r0, [r3, #4]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	f001 fce6 	bl	800b54e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8a:	441a      	add	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d32b      	bcc.n	8009bf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	605a      	str	r2, [r3, #4]
 8009ba4:	e026      	b.n	8009bf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	68d8      	ldr	r0, [r3, #12]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	461a      	mov	r2, r3
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	f001 fccc 	bl	800b54e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	425b      	negs	r3, r3
 8009bc0:	441a      	add	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d207      	bcs.n	8009be2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	425b      	negs	r3, r3
 8009bdc:	441a      	add	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d105      	bne.n	8009bf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009bfc:	697b      	ldr	r3, [r7, #20]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d018      	beq.n	8009c4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c20:	441a      	add	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d303      	bcc.n	8009c3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68d9      	ldr	r1, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	461a      	mov	r2, r3
 8009c44:	6838      	ldr	r0, [r7, #0]
 8009c46:	f001 fc82 	bl	800b54e <memcpy>
	}
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c5e:	4b4e      	ldr	r3, [pc, #312]	; (8009d98 <xTaskIncrementTick+0x144>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 808e 	bne.w	8009d84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c68:	4b4c      	ldr	r3, [pc, #304]	; (8009d9c <xTaskIncrementTick+0x148>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c70:	4a4a      	ldr	r2, [pc, #296]	; (8009d9c <xTaskIncrementTick+0x148>)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d120      	bne.n	8009cbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c7c:	4b48      	ldr	r3, [pc, #288]	; (8009da0 <xTaskIncrementTick+0x14c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <xTaskIncrementTick+0x48>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	603b      	str	r3, [r7, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	e7fe      	b.n	8009c9a <xTaskIncrementTick+0x46>
 8009c9c:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <xTaskIncrementTick+0x14c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	4b40      	ldr	r3, [pc, #256]	; (8009da4 <xTaskIncrementTick+0x150>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a3e      	ldr	r2, [pc, #248]	; (8009da0 <xTaskIncrementTick+0x14c>)
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	4a3e      	ldr	r2, [pc, #248]	; (8009da4 <xTaskIncrementTick+0x150>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	4b3d      	ldr	r3, [pc, #244]	; (8009da8 <xTaskIncrementTick+0x154>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	4a3c      	ldr	r2, [pc, #240]	; (8009da8 <xTaskIncrementTick+0x154>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	f000 f981 	bl	8009fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cbe:	4b3b      	ldr	r3, [pc, #236]	; (8009dac <xTaskIncrementTick+0x158>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d348      	bcc.n	8009d5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cc8:	4b35      	ldr	r3, [pc, #212]	; (8009da0 <xTaskIncrementTick+0x14c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d104      	bne.n	8009cdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd2:	4b36      	ldr	r3, [pc, #216]	; (8009dac <xTaskIncrementTick+0x158>)
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cd8:	601a      	str	r2, [r3, #0]
					break;
 8009cda:	e03e      	b.n	8009d5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cdc:	4b30      	ldr	r3, [pc, #192]	; (8009da0 <xTaskIncrementTick+0x14c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d203      	bcs.n	8009cfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cf4:	4a2d      	ldr	r2, [pc, #180]	; (8009dac <xTaskIncrementTick+0x158>)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cfa:	e02e      	b.n	8009d5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff fd44 	bl	800978e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	3318      	adds	r3, #24
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff fd3b 	bl	800978e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	409a      	lsls	r2, r3
 8009d20:	4b23      	ldr	r3, [pc, #140]	; (8009db0 <xTaskIncrementTick+0x15c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	4a22      	ldr	r2, [pc, #136]	; (8009db0 <xTaskIncrementTick+0x15c>)
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4a1f      	ldr	r2, [pc, #124]	; (8009db4 <xTaskIncrementTick+0x160>)
 8009d38:	441a      	add	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f7ff fd00 	bl	8009746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <xTaskIncrementTick+0x164>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d3b9      	bcc.n	8009cc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009d54:	2301      	movs	r3, #1
 8009d56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d58:	e7b6      	b.n	8009cc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d5a:	4b17      	ldr	r3, [pc, #92]	; (8009db8 <xTaskIncrementTick+0x164>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d60:	4914      	ldr	r1, [pc, #80]	; (8009db4 <xTaskIncrementTick+0x160>)
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d901      	bls.n	8009d76 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009d72:	2301      	movs	r3, #1
 8009d74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <xTaskIncrementTick+0x168>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e004      	b.n	8009d8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d84:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <xTaskIncrementTick+0x16c>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	4a0d      	ldr	r2, [pc, #52]	; (8009dc0 <xTaskIncrementTick+0x16c>)
 8009d8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d8e:	697b      	ldr	r3, [r7, #20]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	2000069c 	.word	0x2000069c
 8009d9c:	20000680 	.word	0x20000680
 8009da0:	20000660 	.word	0x20000660
 8009da4:	20000664 	.word	0x20000664
 8009da8:	20000694 	.word	0x20000694
 8009dac:	20000698 	.word	0x20000698
 8009db0:	20000684 	.word	0x20000684
 8009db4:	200004d0 	.word	0x200004d0
 8009db8:	200004cc 	.word	0x200004cc
 8009dbc:	20000690 	.word	0x20000690
 8009dc0:	2000068c 	.word	0x2000068c

08009dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dca:	4b43      	ldr	r3, [pc, #268]	; (8009ed8 <vTaskSwitchContext+0x114>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dd2:	4b42      	ldr	r3, [pc, #264]	; (8009edc <vTaskSwitchContext+0x118>)
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009dd8:	e07a      	b.n	8009ed0 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 8009dda:	4b40      	ldr	r3, [pc, #256]	; (8009edc <vTaskSwitchContext+0x118>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009de0:	f7f7 fedc 	bl	8001b9c <getRunTimeCounterValue>
 8009de4:	4603      	mov	r3, r0
 8009de6:	4a3e      	ldr	r2, [pc, #248]	; (8009ee0 <vTaskSwitchContext+0x11c>)
 8009de8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009dea:	4b3d      	ldr	r3, [pc, #244]	; (8009ee0 <vTaskSwitchContext+0x11c>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b3d      	ldr	r3, [pc, #244]	; (8009ee4 <vTaskSwitchContext+0x120>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d909      	bls.n	8009e0a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009df6:	4b3c      	ldr	r3, [pc, #240]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009dfc:	4a38      	ldr	r2, [pc, #224]	; (8009ee0 <vTaskSwitchContext+0x11c>)
 8009dfe:	6810      	ldr	r0, [r2, #0]
 8009e00:	4a38      	ldr	r2, [pc, #224]	; (8009ee4 <vTaskSwitchContext+0x120>)
 8009e02:	6812      	ldr	r2, [r2, #0]
 8009e04:	1a82      	subs	r2, r0, r2
 8009e06:	440a      	add	r2, r1
 8009e08:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009e0a:	4b35      	ldr	r3, [pc, #212]	; (8009ee0 <vTaskSwitchContext+0x11c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a35      	ldr	r2, [pc, #212]	; (8009ee4 <vTaskSwitchContext+0x120>)
 8009e10:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009e12:	4b35      	ldr	r3, [pc, #212]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	4b33      	ldr	r3, [pc, #204]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d808      	bhi.n	8009e34 <vTaskSwitchContext+0x70>
 8009e22:	4b31      	ldr	r3, [pc, #196]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b30      	ldr	r3, [pc, #192]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3334      	adds	r3, #52	; 0x34
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f7f7 febc 	bl	8001bac <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8009e34:	4b2c      	ldr	r3, [pc, #176]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <vTaskSwitchContext+0x128>)
 8009e3a:	6812      	ldr	r2, [r2, #0]
 8009e3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e40:	4b2b      	ldr	r3, [pc, #172]	; (8009ef0 <vTaskSwitchContext+0x12c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	fab3 f383 	clz	r3, r3
 8009e4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e4e:	7afb      	ldrb	r3, [r7, #11]
 8009e50:	f1c3 031f 	rsb	r3, r3, #31
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	4927      	ldr	r1, [pc, #156]	; (8009ef4 <vTaskSwitchContext+0x130>)
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	440b      	add	r3, r1
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <vTaskSwitchContext+0xbc>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <vTaskSwitchContext+0xba>
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4a1a      	ldr	r2, [pc, #104]	; (8009ef4 <vTaskSwitchContext+0x130>)
 8009e8c:	4413      	add	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d104      	bne.n	8009eb0 <vTaskSwitchContext+0xec>
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	605a      	str	r2, [r3, #4]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	4a0c      	ldr	r2, [pc, #48]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009eb8:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ec2:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <vTaskSwitchContext+0x128>)
 8009ec4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ec6:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <vTaskSwitchContext+0x124>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	335c      	adds	r3, #92	; 0x5c
 8009ecc:	4a0a      	ldr	r2, [pc, #40]	; (8009ef8 <vTaskSwitchContext+0x134>)
 8009ece:	6013      	str	r3, [r2, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	2000069c 	.word	0x2000069c
 8009edc:	20000690 	.word	0x20000690
 8009ee0:	200006a4 	.word	0x200006a4
 8009ee4:	200006a0 	.word	0x200006a0
 8009ee8:	200004cc 	.word	0x200004cc
 8009eec:	2000067c 	.word	0x2000067c
 8009ef0:	20000684 	.word	0x20000684
 8009ef4:	200004d0 	.word	0x200004d0
 8009ef8:	200000d4 	.word	0x200000d4

08009efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60fb      	str	r3, [r7, #12]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	3318      	adds	r3, #24
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7ff fc2e 	bl	800978e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f32:	4b1d      	ldr	r3, [pc, #116]	; (8009fa8 <xTaskRemoveFromEventList+0xac>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d11c      	bne.n	8009f74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff fc25 	bl	800978e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	2201      	movs	r2, #1
 8009f4a:	409a      	lsls	r2, r3
 8009f4c:	4b17      	ldr	r3, [pc, #92]	; (8009fac <xTaskRemoveFromEventList+0xb0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	4a16      	ldr	r2, [pc, #88]	; (8009fac <xTaskRemoveFromEventList+0xb0>)
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4a13      	ldr	r2, [pc, #76]	; (8009fb0 <xTaskRemoveFromEventList+0xb4>)
 8009f64:	441a      	add	r2, r3
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7ff fbea 	bl	8009746 <vListInsertEnd>
 8009f72:	e005      	b.n	8009f80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	3318      	adds	r3, #24
 8009f78:	4619      	mov	r1, r3
 8009f7a:	480e      	ldr	r0, [pc, #56]	; (8009fb4 <xTaskRemoveFromEventList+0xb8>)
 8009f7c:	f7ff fbe3 	bl	8009746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <xTaskRemoveFromEventList+0xbc>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d905      	bls.n	8009f9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f92:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <xTaskRemoveFromEventList+0xc0>)
 8009f94:	2201      	movs	r2, #1
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	e001      	b.n	8009f9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f9e:	697b      	ldr	r3, [r7, #20]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	2000069c 	.word	0x2000069c
 8009fac:	20000684 	.word	0x20000684
 8009fb0:	200004d0 	.word	0x200004d0
 8009fb4:	20000668 	.word	0x20000668
 8009fb8:	200004cc 	.word	0x200004cc
 8009fbc:	20000690 	.word	0x20000690

08009fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvResetNextTaskUnblockTime+0x38>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <prvResetNextTaskUnblockTime+0x3c>)
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fd8:	e008      	b.n	8009fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fda:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <prvResetNextTaskUnblockTime+0x38>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4a04      	ldr	r2, [pc, #16]	; (8009ffc <prvResetNextTaskUnblockTime+0x3c>)
 8009fea:	6013      	str	r3, [r2, #0]
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20000660 	.word	0x20000660
 8009ffc:	20000698 	.word	0x20000698

0800a000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a006:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <xTaskGetSchedulerState+0x34>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a00e:	2301      	movs	r3, #1
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	e008      	b.n	800a026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a014:	4b08      	ldr	r3, [pc, #32]	; (800a038 <xTaskGetSchedulerState+0x38>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a01c:	2302      	movs	r3, #2
 800a01e:	607b      	str	r3, [r7, #4]
 800a020:	e001      	b.n	800a026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a022:	2300      	movs	r3, #0
 800a024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a026:	687b      	ldr	r3, [r7, #4]
	}
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000688 	.word	0x20000688
 800a038:	2000069c 	.word	0x2000069c

0800a03c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d06e      	beq.n	800a130 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a052:	4b3a      	ldr	r3, [pc, #232]	; (800a13c <xTaskPriorityDisinherit+0x100>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d00a      	beq.n	800a072 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	60fb      	str	r3, [r7, #12]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	60bb      	str	r3, [r7, #8]
}
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a094:	1e5a      	subs	r2, r3, #1
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d044      	beq.n	800a130 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d140      	bne.n	800a130 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff fb6b 	bl	800978e <uxListRemove>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d115      	bne.n	800a0ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c2:	491f      	ldr	r1, [pc, #124]	; (800a140 <xTaskPriorityDisinherit+0x104>)
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	440b      	add	r3, r1
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <xTaskPriorityDisinherit+0xae>
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	2201      	movs	r2, #1
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	43da      	mvns	r2, r3
 800a0e0:	4b18      	ldr	r3, [pc, #96]	; (800a144 <xTaskPriorityDisinherit+0x108>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	4a17      	ldr	r2, [pc, #92]	; (800a144 <xTaskPriorityDisinherit+0x108>)
 800a0e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	f1c3 0214 	rsb	r2, r3, #20
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	2201      	movs	r2, #1
 800a104:	409a      	lsls	r2, r3
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <xTaskPriorityDisinherit+0x108>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	4a0d      	ldr	r2, [pc, #52]	; (800a144 <xTaskPriorityDisinherit+0x108>)
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4a08      	ldr	r2, [pc, #32]	; (800a140 <xTaskPriorityDisinherit+0x104>)
 800a11e:	441a      	add	r2, r3
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f7ff fb0d 	bl	8009746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a12c:	2301      	movs	r3, #1
 800a12e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a130:	697b      	ldr	r3, [r7, #20]
	}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200004cc 	.word	0x200004cc
 800a140:	200004d0 	.word	0x200004d0
 800a144:	20000684 	.word	0x20000684
	...

0800a150 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a150:	4b07      	ldr	r3, [pc, #28]	; (800a170 <pxCurrentTCBConst2>)
 800a152:	6819      	ldr	r1, [r3, #0]
 800a154:	6808      	ldr	r0, [r1, #0]
 800a156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	f380 8809 	msr	PSP, r0
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f380 8811 	msr	BASEPRI, r0
 800a16a:	4770      	bx	lr
 800a16c:	f3af 8000 	nop.w

0800a170 <pxCurrentTCBConst2>:
 800a170:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
	...

0800a180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a180:	f3ef 8009 	mrs	r0, PSP
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <pxCurrentTCBConst>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	f01e 0f10 	tst.w	lr, #16
 800a190:	bf08      	it	eq
 800a192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	6010      	str	r0, [r2, #0]
 800a19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1a4:	f380 8811 	msr	BASEPRI, r0
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f7ff fe08 	bl	8009dc4 <vTaskSwitchContext>
 800a1b4:	f04f 0000 	mov.w	r0, #0
 800a1b8:	f380 8811 	msr	BASEPRI, r0
 800a1bc:	bc09      	pop	{r0, r3}
 800a1be:	6819      	ldr	r1, [r3, #0]
 800a1c0:	6808      	ldr	r0, [r1, #0]
 800a1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c6:	f01e 0f10 	tst.w	lr, #16
 800a1ca:	bf08      	it	eq
 800a1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1d0:	f380 8809 	msr	PSP, r0
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst>:
 800a1e0:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop

0800a1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	607b      	str	r3, [r7, #4]
}
 800a200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a202:	f7ff fd27 	bl	8009c54 <xTaskIncrementTick>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <xPortSysTickHandler+0x40>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	2300      	movs	r3, #0
 800a216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f383 8811 	msr	BASEPRI, r3
}
 800a21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a232:	f3ef 8305 	mrs	r3, IPSR
 800a236:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b0f      	cmp	r3, #15
 800a23c:	d914      	bls.n	800a268 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a23e:	4a17      	ldr	r2, [pc, #92]	; (800a29c <vPortValidateInterruptPriority+0x70>)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a248:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <vPortValidateInterruptPriority+0x74>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	7afa      	ldrb	r2, [r7, #11]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d20a      	bcs.n	800a268 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	607b      	str	r3, [r7, #4]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a268:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <vPortValidateInterruptPriority+0x78>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <vPortValidateInterruptPriority+0x7c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d90a      	bls.n	800a28e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	603b      	str	r3, [r7, #0]
}
 800a28a:	bf00      	nop
 800a28c:	e7fe      	b.n	800a28c <vPortValidateInterruptPriority+0x60>
	}
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	e000e3f0 	.word	0xe000e3f0
 800a2a0:	200006a8 	.word	0x200006a8
 800a2a4:	e000ed0c 	.word	0xe000ed0c
 800a2a8:	200006ac 	.word	0x200006ac

0800a2ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f7fe f8cd 	bl	8008462 <USBD_LL_SetupStage>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a2e2:	78fa      	ldrb	r2, [r7, #3]
 800a2e4:	6879      	ldr	r1, [r7, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	440b      	add	r3, r1
 800a2f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	f7fe f907 	bl	800850c <USBD_LL_DataOutStage>
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	3320      	adds	r3, #32
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	4619      	mov	r1, r3
 800a32e:	f7fe f9a0 	bl	8008672 <USBD_LL_DataInStage>
}
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fada 	bl	8008902 <USBD_LL_SOF>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a35e:	2301      	movs	r3, #1
 800a360:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	79db      	ldrb	r3, [r3, #7]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	e008      	b.n	800a382 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	79db      	ldrb	r3, [r3, #7]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d102      	bne.n	800a37e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a378:	2301      	movs	r3, #1
 800a37a:	73fb      	strb	r3, [r7, #15]
 800a37c:	e001      	b.n	800a382 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a37e:	f7f8 f80b 	bl	8002398 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a388:	7bfa      	ldrb	r2, [r7, #15]
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fa74 	bl	800887a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fa1c 	bl	80087d6 <USBD_LL_Reset>
}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe fa6f 	bl	800889a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7adb      	ldrb	r3, [r3, #11]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d005      	beq.n	800a3e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <HAL_PCD_SuspendCallback+0x48>)
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	4a03      	ldr	r2, [pc, #12]	; (800a3f0 <HAL_PCD_SuspendCallback+0x48>)
 800a3e2:	f043 0306 	orr.w	r3, r3, #6
 800a3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	e000ed00 	.word	0xe000ed00

0800a3f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fa65 	bl	80088d2 <USBD_LL_Resume>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fabd 	bl	80089a6 <USBD_LL_IsoOUTIncomplete>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fa79 	bl	8008942 <USBD_LL_IsoINIncomplete>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe facf 	bl	8008a0a <USBD_LL_DevConnected>
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe facc 	bl	8008a20 <USBD_LL_DevDisconnected>
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	461a      	mov	r2, r3
 800a49e:	4603      	mov	r3, r0
 800a4a0:	70fb      	strb	r3, [r7, #3]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70bb      	strb	r3, [r7, #2]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a4b8:	78bb      	ldrb	r3, [r7, #2]
 800a4ba:	883a      	ldrh	r2, [r7, #0]
 800a4bc:	78f9      	ldrb	r1, [r7, #3]
 800a4be:	f7fa fb47 	bl	8004b50 <HAL_PCD_EP_Open>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 f8d3 	bl	800a674 <USBD_Get_USB_Status>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fa fc05 	bl	8004d0a <HAL_PCD_EP_SetStall>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 f8b4 	bl	800a674 <USBD_Get_USB_Status>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a510:	7bbb      	ldrb	r3, [r7, #14]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	4611      	mov	r1, r2
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fa fc49 	bl	8004dd0 <HAL_PCD_EP_ClrStall>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f895 	bl	800a674 <USBD_Get_USB_Status>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a56a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a56c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a570:	2b00      	cmp	r3, #0
 800a572:	da0b      	bge.n	800a58c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	4613      	mov	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	3316      	adds	r3, #22
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	e00b      	b.n	800a5a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	4613      	mov	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	4413      	add	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	440b      	add	r3, r1
 800a59e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a5a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5ca:	78fa      	ldrb	r2, [r7, #3]
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fa fa9a 	bl	8004b08 <HAL_PCD_SetAddress>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 f84a 	bl	800a674 <USBD_Get_USB_Status>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b086      	sub	sp, #24
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a60c:	7af9      	ldrb	r1, [r7, #11]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	f7fa fb40 	bl	8004c96 <HAL_PCD_EP_Transmit>
 800a616:	4603      	mov	r3, r0
 800a618:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f829 	bl	800a674 <USBD_Get_USB_Status>
 800a622:	4603      	mov	r3, r0
 800a624:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a626:	7dbb      	ldrb	r3, [r7, #22]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	607a      	str	r2, [r7, #4]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	460b      	mov	r3, r1
 800a63e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a64e:	7af9      	ldrb	r1, [r7, #11]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f7fa fae4 	bl	8004c20 <HAL_PCD_EP_Receive>
 800a658:	4603      	mov	r3, r0
 800a65a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f808 	bl	800a674 <USBD_Get_USB_Status>
 800a664:	4603      	mov	r3, r0
 800a666:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a668:	7dbb      	ldrb	r3, [r7, #22]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	2b03      	cmp	r3, #3
 800a686:	d817      	bhi.n	800a6b8 <USBD_Get_USB_Status+0x44>
 800a688:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <USBD_Get_USB_Status+0x1c>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a6a1 	.word	0x0800a6a1
 800a694:	0800a6a7 	.word	0x0800a6a7
 800a698:	0800a6ad 	.word	0x0800a6ad
 800a69c:	0800a6b3 	.word	0x0800a6b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a4:	e00b      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6aa:	e008      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b0:	e005      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b6:	e002      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a6bc:	bf00      	nop
  }
  return usb_status;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <__cvt>:
 800a6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	ec55 4b10 	vmov	r4, r5, d0
 800a6d4:	2d00      	cmp	r5, #0
 800a6d6:	460e      	mov	r6, r1
 800a6d8:	4619      	mov	r1, r3
 800a6da:	462b      	mov	r3, r5
 800a6dc:	bfbb      	ittet	lt
 800a6de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6e2:	461d      	movlt	r5, r3
 800a6e4:	2300      	movge	r3, #0
 800a6e6:	232d      	movlt	r3, #45	; 0x2d
 800a6e8:	700b      	strb	r3, [r1, #0]
 800a6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6f0:	4691      	mov	r9, r2
 800a6f2:	f023 0820 	bic.w	r8, r3, #32
 800a6f6:	bfbc      	itt	lt
 800a6f8:	4622      	movlt	r2, r4
 800a6fa:	4614      	movlt	r4, r2
 800a6fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a700:	d005      	beq.n	800a70e <__cvt+0x42>
 800a702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a706:	d100      	bne.n	800a70a <__cvt+0x3e>
 800a708:	3601      	adds	r6, #1
 800a70a:	2102      	movs	r1, #2
 800a70c:	e000      	b.n	800a710 <__cvt+0x44>
 800a70e:	2103      	movs	r1, #3
 800a710:	ab03      	add	r3, sp, #12
 800a712:	9301      	str	r3, [sp, #4]
 800a714:	ab02      	add	r3, sp, #8
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	ec45 4b10 	vmov	d0, r4, r5
 800a71c:	4653      	mov	r3, sl
 800a71e:	4632      	mov	r2, r6
 800a720:	f000 ffae 	bl	800b680 <_dtoa_r>
 800a724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a728:	4607      	mov	r7, r0
 800a72a:	d102      	bne.n	800a732 <__cvt+0x66>
 800a72c:	f019 0f01 	tst.w	r9, #1
 800a730:	d022      	beq.n	800a778 <__cvt+0xac>
 800a732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a736:	eb07 0906 	add.w	r9, r7, r6
 800a73a:	d110      	bne.n	800a75e <__cvt+0x92>
 800a73c:	783b      	ldrb	r3, [r7, #0]
 800a73e:	2b30      	cmp	r3, #48	; 0x30
 800a740:	d10a      	bne.n	800a758 <__cvt+0x8c>
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	4620      	mov	r0, r4
 800a748:	4629      	mov	r1, r5
 800a74a:	f7f6 f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800a74e:	b918      	cbnz	r0, 800a758 <__cvt+0x8c>
 800a750:	f1c6 0601 	rsb	r6, r6, #1
 800a754:	f8ca 6000 	str.w	r6, [sl]
 800a758:	f8da 3000 	ldr.w	r3, [sl]
 800a75c:	4499      	add	r9, r3
 800a75e:	2200      	movs	r2, #0
 800a760:	2300      	movs	r3, #0
 800a762:	4620      	mov	r0, r4
 800a764:	4629      	mov	r1, r5
 800a766:	f7f6 f9bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800a76a:	b108      	cbz	r0, 800a770 <__cvt+0xa4>
 800a76c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a770:	2230      	movs	r2, #48	; 0x30
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	454b      	cmp	r3, r9
 800a776:	d307      	bcc.n	800a788 <__cvt+0xbc>
 800a778:	9b03      	ldr	r3, [sp, #12]
 800a77a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a77c:	1bdb      	subs	r3, r3, r7
 800a77e:	4638      	mov	r0, r7
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	b004      	add	sp, #16
 800a784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a788:	1c59      	adds	r1, r3, #1
 800a78a:	9103      	str	r1, [sp, #12]
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e7f0      	b.n	800a772 <__cvt+0xa6>

0800a790 <__exponent>:
 800a790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a792:	4603      	mov	r3, r0
 800a794:	2900      	cmp	r1, #0
 800a796:	bfb8      	it	lt
 800a798:	4249      	neglt	r1, r1
 800a79a:	f803 2b02 	strb.w	r2, [r3], #2
 800a79e:	bfb4      	ite	lt
 800a7a0:	222d      	movlt	r2, #45	; 0x2d
 800a7a2:	222b      	movge	r2, #43	; 0x2b
 800a7a4:	2909      	cmp	r1, #9
 800a7a6:	7042      	strb	r2, [r0, #1]
 800a7a8:	dd2a      	ble.n	800a800 <__exponent+0x70>
 800a7aa:	f10d 0207 	add.w	r2, sp, #7
 800a7ae:	4617      	mov	r7, r2
 800a7b0:	260a      	movs	r6, #10
 800a7b2:	4694      	mov	ip, r2
 800a7b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a7b8:	fb06 1415 	mls	r4, r6, r5, r1
 800a7bc:	3430      	adds	r4, #48	; 0x30
 800a7be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	2c63      	cmp	r4, #99	; 0x63
 800a7c6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	dcf1      	bgt.n	800a7b2 <__exponent+0x22>
 800a7ce:	3130      	adds	r1, #48	; 0x30
 800a7d0:	f1ac 0402 	sub.w	r4, ip, #2
 800a7d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a7d8:	1c41      	adds	r1, r0, #1
 800a7da:	4622      	mov	r2, r4
 800a7dc:	42ba      	cmp	r2, r7
 800a7de:	d30a      	bcc.n	800a7f6 <__exponent+0x66>
 800a7e0:	f10d 0209 	add.w	r2, sp, #9
 800a7e4:	eba2 020c 	sub.w	r2, r2, ip
 800a7e8:	42bc      	cmp	r4, r7
 800a7ea:	bf88      	it	hi
 800a7ec:	2200      	movhi	r2, #0
 800a7ee:	4413      	add	r3, r2
 800a7f0:	1a18      	subs	r0, r3, r0
 800a7f2:	b003      	add	sp, #12
 800a7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a7fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a7fe:	e7ed      	b.n	800a7dc <__exponent+0x4c>
 800a800:	2330      	movs	r3, #48	; 0x30
 800a802:	3130      	adds	r1, #48	; 0x30
 800a804:	7083      	strb	r3, [r0, #2]
 800a806:	70c1      	strb	r1, [r0, #3]
 800a808:	1d03      	adds	r3, r0, #4
 800a80a:	e7f1      	b.n	800a7f0 <__exponent+0x60>

0800a80c <_printf_float>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	ed2d 8b02 	vpush	{d8}
 800a814:	b08d      	sub	sp, #52	; 0x34
 800a816:	460c      	mov	r4, r1
 800a818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a81c:	4616      	mov	r6, r2
 800a81e:	461f      	mov	r7, r3
 800a820:	4605      	mov	r5, r0
 800a822:	f000 fe1d 	bl	800b460 <_localeconv_r>
 800a826:	f8d0 a000 	ldr.w	sl, [r0]
 800a82a:	4650      	mov	r0, sl
 800a82c:	f7f5 fd30 	bl	8000290 <strlen>
 800a830:	2300      	movs	r3, #0
 800a832:	930a      	str	r3, [sp, #40]	; 0x28
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	9305      	str	r3, [sp, #20]
 800a838:	f8d8 3000 	ldr.w	r3, [r8]
 800a83c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a840:	3307      	adds	r3, #7
 800a842:	f023 0307 	bic.w	r3, r3, #7
 800a846:	f103 0208 	add.w	r2, r3, #8
 800a84a:	f8c8 2000 	str.w	r2, [r8]
 800a84e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a856:	9307      	str	r3, [sp, #28]
 800a858:	f8cd 8018 	str.w	r8, [sp, #24]
 800a85c:	ee08 0a10 	vmov	s16, r0
 800a860:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a868:	4b9e      	ldr	r3, [pc, #632]	; (800aae4 <_printf_float+0x2d8>)
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a86e:	f7f6 f96d 	bl	8000b4c <__aeabi_dcmpun>
 800a872:	bb88      	cbnz	r0, 800a8d8 <_printf_float+0xcc>
 800a874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a878:	4b9a      	ldr	r3, [pc, #616]	; (800aae4 <_printf_float+0x2d8>)
 800a87a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a87e:	f7f6 f947 	bl	8000b10 <__aeabi_dcmple>
 800a882:	bb48      	cbnz	r0, 800a8d8 <_printf_float+0xcc>
 800a884:	2200      	movs	r2, #0
 800a886:	2300      	movs	r3, #0
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f6 f936 	bl	8000afc <__aeabi_dcmplt>
 800a890:	b110      	cbz	r0, 800a898 <_printf_float+0x8c>
 800a892:	232d      	movs	r3, #45	; 0x2d
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a898:	4a93      	ldr	r2, [pc, #588]	; (800aae8 <_printf_float+0x2dc>)
 800a89a:	4b94      	ldr	r3, [pc, #592]	; (800aaec <_printf_float+0x2e0>)
 800a89c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8a0:	bf94      	ite	ls
 800a8a2:	4690      	movls	r8, r2
 800a8a4:	4698      	movhi	r8, r3
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	f023 0304 	bic.w	r3, r3, #4
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	f04f 0900 	mov.w	r9, #0
 800a8b6:	9700      	str	r7, [sp, #0]
 800a8b8:	4633      	mov	r3, r6
 800a8ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f000 f9da 	bl	800ac78 <_printf_common>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	f040 8090 	bne.w	800a9ea <_printf_float+0x1de>
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ce:	b00d      	add	sp, #52	; 0x34
 800a8d0:	ecbd 8b02 	vpop	{d8}
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	4640      	mov	r0, r8
 800a8de:	4649      	mov	r1, r9
 800a8e0:	f7f6 f934 	bl	8000b4c <__aeabi_dcmpun>
 800a8e4:	b140      	cbz	r0, 800a8f8 <_printf_float+0xec>
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bfbc      	itt	lt
 800a8ec:	232d      	movlt	r3, #45	; 0x2d
 800a8ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8f2:	4a7f      	ldr	r2, [pc, #508]	; (800aaf0 <_printf_float+0x2e4>)
 800a8f4:	4b7f      	ldr	r3, [pc, #508]	; (800aaf4 <_printf_float+0x2e8>)
 800a8f6:	e7d1      	b.n	800a89c <_printf_float+0x90>
 800a8f8:	6863      	ldr	r3, [r4, #4]
 800a8fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8fe:	9206      	str	r2, [sp, #24]
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	d13f      	bne.n	800a984 <_printf_float+0x178>
 800a904:	2306      	movs	r3, #6
 800a906:	6063      	str	r3, [r4, #4]
 800a908:	9b05      	ldr	r3, [sp, #20]
 800a90a:	6861      	ldr	r1, [r4, #4]
 800a90c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a910:	2300      	movs	r3, #0
 800a912:	9303      	str	r3, [sp, #12]
 800a914:	ab0a      	add	r3, sp, #40	; 0x28
 800a916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a91a:	ab09      	add	r3, sp, #36	; 0x24
 800a91c:	ec49 8b10 	vmov	d0, r8, r9
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	6022      	str	r2, [r4, #0]
 800a924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a928:	4628      	mov	r0, r5
 800a92a:	f7ff fecf 	bl	800a6cc <__cvt>
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a932:	2b47      	cmp	r3, #71	; 0x47
 800a934:	4680      	mov	r8, r0
 800a936:	d108      	bne.n	800a94a <_printf_float+0x13e>
 800a938:	1cc8      	adds	r0, r1, #3
 800a93a:	db02      	blt.n	800a942 <_printf_float+0x136>
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	4299      	cmp	r1, r3
 800a940:	dd41      	ble.n	800a9c6 <_printf_float+0x1ba>
 800a942:	f1ab 0302 	sub.w	r3, fp, #2
 800a946:	fa5f fb83 	uxtb.w	fp, r3
 800a94a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a94e:	d820      	bhi.n	800a992 <_printf_float+0x186>
 800a950:	3901      	subs	r1, #1
 800a952:	465a      	mov	r2, fp
 800a954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a958:	9109      	str	r1, [sp, #36]	; 0x24
 800a95a:	f7ff ff19 	bl	800a790 <__exponent>
 800a95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a960:	1813      	adds	r3, r2, r0
 800a962:	2a01      	cmp	r2, #1
 800a964:	4681      	mov	r9, r0
 800a966:	6123      	str	r3, [r4, #16]
 800a968:	dc02      	bgt.n	800a970 <_printf_float+0x164>
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	07d2      	lsls	r2, r2, #31
 800a96e:	d501      	bpl.n	800a974 <_printf_float+0x168>
 800a970:	3301      	adds	r3, #1
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d09c      	beq.n	800a8b6 <_printf_float+0xaa>
 800a97c:	232d      	movs	r3, #45	; 0x2d
 800a97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a982:	e798      	b.n	800a8b6 <_printf_float+0xaa>
 800a984:	9a06      	ldr	r2, [sp, #24]
 800a986:	2a47      	cmp	r2, #71	; 0x47
 800a988:	d1be      	bne.n	800a908 <_printf_float+0xfc>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1bc      	bne.n	800a908 <_printf_float+0xfc>
 800a98e:	2301      	movs	r3, #1
 800a990:	e7b9      	b.n	800a906 <_printf_float+0xfa>
 800a992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a996:	d118      	bne.n	800a9ca <_printf_float+0x1be>
 800a998:	2900      	cmp	r1, #0
 800a99a:	6863      	ldr	r3, [r4, #4]
 800a99c:	dd0b      	ble.n	800a9b6 <_printf_float+0x1aa>
 800a99e:	6121      	str	r1, [r4, #16]
 800a9a0:	b913      	cbnz	r3, 800a9a8 <_printf_float+0x19c>
 800a9a2:	6822      	ldr	r2, [r4, #0]
 800a9a4:	07d0      	lsls	r0, r2, #31
 800a9a6:	d502      	bpl.n	800a9ae <_printf_float+0x1a2>
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	440b      	add	r3, r1
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9b0:	f04f 0900 	mov.w	r9, #0
 800a9b4:	e7de      	b.n	800a974 <_printf_float+0x168>
 800a9b6:	b913      	cbnz	r3, 800a9be <_printf_float+0x1b2>
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	07d2      	lsls	r2, r2, #31
 800a9bc:	d501      	bpl.n	800a9c2 <_printf_float+0x1b6>
 800a9be:	3302      	adds	r3, #2
 800a9c0:	e7f4      	b.n	800a9ac <_printf_float+0x1a0>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e7f2      	b.n	800a9ac <_printf_float+0x1a0>
 800a9c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	db05      	blt.n	800a9dc <_printf_float+0x1d0>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	6121      	str	r1, [r4, #16]
 800a9d4:	07d8      	lsls	r0, r3, #31
 800a9d6:	d5ea      	bpl.n	800a9ae <_printf_float+0x1a2>
 800a9d8:	1c4b      	adds	r3, r1, #1
 800a9da:	e7e7      	b.n	800a9ac <_printf_float+0x1a0>
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	bfd4      	ite	le
 800a9e0:	f1c1 0202 	rsble	r2, r1, #2
 800a9e4:	2201      	movgt	r2, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	e7e0      	b.n	800a9ac <_printf_float+0x1a0>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	055a      	lsls	r2, r3, #21
 800a9ee:	d407      	bmi.n	800aa00 <_printf_float+0x1f4>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d12c      	bne.n	800aa58 <_printf_float+0x24c>
 800a9fe:	e764      	b.n	800a8ca <_printf_float+0xbe>
 800aa00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa04:	f240 80e0 	bls.w	800abc8 <_printf_float+0x3bc>
 800aa08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f7f6 f86a 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d034      	beq.n	800aa82 <_printf_float+0x276>
 800aa18:	4a37      	ldr	r2, [pc, #220]	; (800aaf8 <_printf_float+0x2ec>)
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4628      	mov	r0, r5
 800aa20:	47b8      	blx	r7
 800aa22:	3001      	adds	r0, #1
 800aa24:	f43f af51 	beq.w	800a8ca <_printf_float+0xbe>
 800aa28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	db02      	blt.n	800aa36 <_printf_float+0x22a>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	07d8      	lsls	r0, r3, #31
 800aa34:	d510      	bpl.n	800aa58 <_printf_float+0x24c>
 800aa36:	ee18 3a10 	vmov	r3, s16
 800aa3a:	4652      	mov	r2, sl
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f43f af41 	beq.w	800a8ca <_printf_float+0xbe>
 800aa48:	f04f 0800 	mov.w	r8, #0
 800aa4c:	f104 091a 	add.w	r9, r4, #26
 800aa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa52:	3b01      	subs	r3, #1
 800aa54:	4543      	cmp	r3, r8
 800aa56:	dc09      	bgt.n	800aa6c <_printf_float+0x260>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	079b      	lsls	r3, r3, #30
 800aa5c:	f100 8107 	bmi.w	800ac6e <_printf_float+0x462>
 800aa60:	68e0      	ldr	r0, [r4, #12]
 800aa62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa64:	4298      	cmp	r0, r3
 800aa66:	bfb8      	it	lt
 800aa68:	4618      	movlt	r0, r3
 800aa6a:	e730      	b.n	800a8ce <_printf_float+0xc2>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	464a      	mov	r2, r9
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	f43f af27 	beq.w	800a8ca <_printf_float+0xbe>
 800aa7c:	f108 0801 	add.w	r8, r8, #1
 800aa80:	e7e6      	b.n	800aa50 <_printf_float+0x244>
 800aa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dc39      	bgt.n	800aafc <_printf_float+0x2f0>
 800aa88:	4a1b      	ldr	r2, [pc, #108]	; (800aaf8 <_printf_float+0x2ec>)
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b8      	blx	r7
 800aa92:	3001      	adds	r0, #1
 800aa94:	f43f af19 	beq.w	800a8ca <_printf_float+0xbe>
 800aa98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	d102      	bne.n	800aaa6 <_printf_float+0x29a>
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	07d9      	lsls	r1, r3, #31
 800aaa4:	d5d8      	bpl.n	800aa58 <_printf_float+0x24c>
 800aaa6:	ee18 3a10 	vmov	r3, s16
 800aaaa:	4652      	mov	r2, sl
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	f43f af09 	beq.w	800a8ca <_printf_float+0xbe>
 800aab8:	f04f 0900 	mov.w	r9, #0
 800aabc:	f104 0a1a 	add.w	sl, r4, #26
 800aac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac2:	425b      	negs	r3, r3
 800aac4:	454b      	cmp	r3, r9
 800aac6:	dc01      	bgt.n	800aacc <_printf_float+0x2c0>
 800aac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaca:	e792      	b.n	800a9f2 <_printf_float+0x1e6>
 800aacc:	2301      	movs	r3, #1
 800aace:	4652      	mov	r2, sl
 800aad0:	4631      	mov	r1, r6
 800aad2:	4628      	mov	r0, r5
 800aad4:	47b8      	blx	r7
 800aad6:	3001      	adds	r0, #1
 800aad8:	f43f aef7 	beq.w	800a8ca <_printf_float+0xbe>
 800aadc:	f109 0901 	add.w	r9, r9, #1
 800aae0:	e7ee      	b.n	800aac0 <_printf_float+0x2b4>
 800aae2:	bf00      	nop
 800aae4:	7fefffff 	.word	0x7fefffff
 800aae8:	0800d8e9 	.word	0x0800d8e9
 800aaec:	0800d8ed 	.word	0x0800d8ed
 800aaf0:	0800d8f1 	.word	0x0800d8f1
 800aaf4:	0800d8f5 	.word	0x0800d8f5
 800aaf8:	0800d8f9 	.word	0x0800d8f9
 800aafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab00:	429a      	cmp	r2, r3
 800ab02:	bfa8      	it	ge
 800ab04:	461a      	movge	r2, r3
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	4691      	mov	r9, r2
 800ab0a:	dc37      	bgt.n	800ab7c <_printf_float+0x370>
 800ab0c:	f04f 0b00 	mov.w	fp, #0
 800ab10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab14:	f104 021a 	add.w	r2, r4, #26
 800ab18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	eba3 0309 	sub.w	r3, r3, r9
 800ab20:	455b      	cmp	r3, fp
 800ab22:	dc33      	bgt.n	800ab8c <_printf_float+0x380>
 800ab24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	db3b      	blt.n	800aba4 <_printf_float+0x398>
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	07da      	lsls	r2, r3, #31
 800ab30:	d438      	bmi.n	800aba4 <_printf_float+0x398>
 800ab32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab36:	eba2 0903 	sub.w	r9, r2, r3
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	1ad2      	subs	r2, r2, r3
 800ab3e:	4591      	cmp	r9, r2
 800ab40:	bfa8      	it	ge
 800ab42:	4691      	movge	r9, r2
 800ab44:	f1b9 0f00 	cmp.w	r9, #0
 800ab48:	dc35      	bgt.n	800abb6 <_printf_float+0x3aa>
 800ab4a:	f04f 0800 	mov.w	r8, #0
 800ab4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab52:	f104 0a1a 	add.w	sl, r4, #26
 800ab56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	eba3 0309 	sub.w	r3, r3, r9
 800ab60:	4543      	cmp	r3, r8
 800ab62:	f77f af79 	ble.w	800aa58 <_printf_float+0x24c>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4652      	mov	r2, sl
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	47b8      	blx	r7
 800ab70:	3001      	adds	r0, #1
 800ab72:	f43f aeaa 	beq.w	800a8ca <_printf_float+0xbe>
 800ab76:	f108 0801 	add.w	r8, r8, #1
 800ab7a:	e7ec      	b.n	800ab56 <_printf_float+0x34a>
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4642      	mov	r2, r8
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	d1c0      	bne.n	800ab0c <_printf_float+0x300>
 800ab8a:	e69e      	b.n	800a8ca <_printf_float+0xbe>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	9205      	str	r2, [sp, #20]
 800ab94:	47b8      	blx	r7
 800ab96:	3001      	adds	r0, #1
 800ab98:	f43f ae97 	beq.w	800a8ca <_printf_float+0xbe>
 800ab9c:	9a05      	ldr	r2, [sp, #20]
 800ab9e:	f10b 0b01 	add.w	fp, fp, #1
 800aba2:	e7b9      	b.n	800ab18 <_printf_float+0x30c>
 800aba4:	ee18 3a10 	vmov	r3, s16
 800aba8:	4652      	mov	r2, sl
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	47b8      	blx	r7
 800abb0:	3001      	adds	r0, #1
 800abb2:	d1be      	bne.n	800ab32 <_printf_float+0x326>
 800abb4:	e689      	b.n	800a8ca <_printf_float+0xbe>
 800abb6:	9a05      	ldr	r2, [sp, #20]
 800abb8:	464b      	mov	r3, r9
 800abba:	4442      	add	r2, r8
 800abbc:	4631      	mov	r1, r6
 800abbe:	4628      	mov	r0, r5
 800abc0:	47b8      	blx	r7
 800abc2:	3001      	adds	r0, #1
 800abc4:	d1c1      	bne.n	800ab4a <_printf_float+0x33e>
 800abc6:	e680      	b.n	800a8ca <_printf_float+0xbe>
 800abc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abca:	2a01      	cmp	r2, #1
 800abcc:	dc01      	bgt.n	800abd2 <_printf_float+0x3c6>
 800abce:	07db      	lsls	r3, r3, #31
 800abd0:	d53a      	bpl.n	800ac48 <_printf_float+0x43c>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4642      	mov	r2, r8
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f ae74 	beq.w	800a8ca <_printf_float+0xbe>
 800abe2:	ee18 3a10 	vmov	r3, s16
 800abe6:	4652      	mov	r2, sl
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f ae6b 	beq.w	800a8ca <_printf_float+0xbe>
 800abf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ac00:	f7f5 ff72 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac04:	b9d8      	cbnz	r0, 800ac3e <_printf_float+0x432>
 800ac06:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ac0a:	f108 0201 	add.w	r2, r8, #1
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b8      	blx	r7
 800ac14:	3001      	adds	r0, #1
 800ac16:	d10e      	bne.n	800ac36 <_printf_float+0x42a>
 800ac18:	e657      	b.n	800a8ca <_printf_float+0xbe>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b8      	blx	r7
 800ac24:	3001      	adds	r0, #1
 800ac26:	f43f ae50 	beq.w	800a8ca <_printf_float+0xbe>
 800ac2a:	f108 0801 	add.w	r8, r8, #1
 800ac2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac30:	3b01      	subs	r3, #1
 800ac32:	4543      	cmp	r3, r8
 800ac34:	dcf1      	bgt.n	800ac1a <_printf_float+0x40e>
 800ac36:	464b      	mov	r3, r9
 800ac38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac3c:	e6da      	b.n	800a9f4 <_printf_float+0x1e8>
 800ac3e:	f04f 0800 	mov.w	r8, #0
 800ac42:	f104 0a1a 	add.w	sl, r4, #26
 800ac46:	e7f2      	b.n	800ac2e <_printf_float+0x422>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	4642      	mov	r2, r8
 800ac4c:	e7df      	b.n	800ac0e <_printf_float+0x402>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	464a      	mov	r2, r9
 800ac52:	4631      	mov	r1, r6
 800ac54:	4628      	mov	r0, r5
 800ac56:	47b8      	blx	r7
 800ac58:	3001      	adds	r0, #1
 800ac5a:	f43f ae36 	beq.w	800a8ca <_printf_float+0xbe>
 800ac5e:	f108 0801 	add.w	r8, r8, #1
 800ac62:	68e3      	ldr	r3, [r4, #12]
 800ac64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac66:	1a5b      	subs	r3, r3, r1
 800ac68:	4543      	cmp	r3, r8
 800ac6a:	dcf0      	bgt.n	800ac4e <_printf_float+0x442>
 800ac6c:	e6f8      	b.n	800aa60 <_printf_float+0x254>
 800ac6e:	f04f 0800 	mov.w	r8, #0
 800ac72:	f104 0919 	add.w	r9, r4, #25
 800ac76:	e7f4      	b.n	800ac62 <_printf_float+0x456>

0800ac78 <_printf_common>:
 800ac78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	4699      	mov	r9, r3
 800ac80:	688a      	ldr	r2, [r1, #8]
 800ac82:	690b      	ldr	r3, [r1, #16]
 800ac84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	bfb8      	it	lt
 800ac8c:	4613      	movlt	r3, r2
 800ac8e:	6033      	str	r3, [r6, #0]
 800ac90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac94:	4607      	mov	r7, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	b10a      	cbz	r2, 800ac9e <_printf_common+0x26>
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	6033      	str	r3, [r6, #0]
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	0699      	lsls	r1, r3, #26
 800aca2:	bf42      	ittt	mi
 800aca4:	6833      	ldrmi	r3, [r6, #0]
 800aca6:	3302      	addmi	r3, #2
 800aca8:	6033      	strmi	r3, [r6, #0]
 800acaa:	6825      	ldr	r5, [r4, #0]
 800acac:	f015 0506 	ands.w	r5, r5, #6
 800acb0:	d106      	bne.n	800acc0 <_printf_common+0x48>
 800acb2:	f104 0a19 	add.w	sl, r4, #25
 800acb6:	68e3      	ldr	r3, [r4, #12]
 800acb8:	6832      	ldr	r2, [r6, #0]
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	42ab      	cmp	r3, r5
 800acbe:	dc26      	bgt.n	800ad0e <_printf_common+0x96>
 800acc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acc4:	1e13      	subs	r3, r2, #0
 800acc6:	6822      	ldr	r2, [r4, #0]
 800acc8:	bf18      	it	ne
 800acca:	2301      	movne	r3, #1
 800accc:	0692      	lsls	r2, r2, #26
 800acce:	d42b      	bmi.n	800ad28 <_printf_common+0xb0>
 800acd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acd4:	4649      	mov	r1, r9
 800acd6:	4638      	mov	r0, r7
 800acd8:	47c0      	blx	r8
 800acda:	3001      	adds	r0, #1
 800acdc:	d01e      	beq.n	800ad1c <_printf_common+0xa4>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	6922      	ldr	r2, [r4, #16]
 800ace2:	f003 0306 	and.w	r3, r3, #6
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	bf02      	ittt	eq
 800acea:	68e5      	ldreq	r5, [r4, #12]
 800acec:	6833      	ldreq	r3, [r6, #0]
 800acee:	1aed      	subeq	r5, r5, r3
 800acf0:	68a3      	ldr	r3, [r4, #8]
 800acf2:	bf0c      	ite	eq
 800acf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf8:	2500      	movne	r5, #0
 800acfa:	4293      	cmp	r3, r2
 800acfc:	bfc4      	itt	gt
 800acfe:	1a9b      	subgt	r3, r3, r2
 800ad00:	18ed      	addgt	r5, r5, r3
 800ad02:	2600      	movs	r6, #0
 800ad04:	341a      	adds	r4, #26
 800ad06:	42b5      	cmp	r5, r6
 800ad08:	d11a      	bne.n	800ad40 <_printf_common+0xc8>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e008      	b.n	800ad20 <_printf_common+0xa8>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	4652      	mov	r2, sl
 800ad12:	4649      	mov	r1, r9
 800ad14:	4638      	mov	r0, r7
 800ad16:	47c0      	blx	r8
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d103      	bne.n	800ad24 <_printf_common+0xac>
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad24:	3501      	adds	r5, #1
 800ad26:	e7c6      	b.n	800acb6 <_printf_common+0x3e>
 800ad28:	18e1      	adds	r1, r4, r3
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	2030      	movs	r0, #48	; 0x30
 800ad2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad32:	4422      	add	r2, r4
 800ad34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	e7c7      	b.n	800acd0 <_printf_common+0x58>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4622      	mov	r2, r4
 800ad44:	4649      	mov	r1, r9
 800ad46:	4638      	mov	r0, r7
 800ad48:	47c0      	blx	r8
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d0e6      	beq.n	800ad1c <_printf_common+0xa4>
 800ad4e:	3601      	adds	r6, #1
 800ad50:	e7d9      	b.n	800ad06 <_printf_common+0x8e>
	...

0800ad54 <_printf_i>:
 800ad54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	7e0f      	ldrb	r7, [r1, #24]
 800ad5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad5c:	2f78      	cmp	r7, #120	; 0x78
 800ad5e:	4691      	mov	r9, r2
 800ad60:	4680      	mov	r8, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	469a      	mov	sl, r3
 800ad66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad6a:	d807      	bhi.n	800ad7c <_printf_i+0x28>
 800ad6c:	2f62      	cmp	r7, #98	; 0x62
 800ad6e:	d80a      	bhi.n	800ad86 <_printf_i+0x32>
 800ad70:	2f00      	cmp	r7, #0
 800ad72:	f000 80d4 	beq.w	800af1e <_printf_i+0x1ca>
 800ad76:	2f58      	cmp	r7, #88	; 0x58
 800ad78:	f000 80c0 	beq.w	800aefc <_printf_i+0x1a8>
 800ad7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad84:	e03a      	b.n	800adfc <_printf_i+0xa8>
 800ad86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad8a:	2b15      	cmp	r3, #21
 800ad8c:	d8f6      	bhi.n	800ad7c <_printf_i+0x28>
 800ad8e:	a101      	add	r1, pc, #4	; (adr r1, 800ad94 <_printf_i+0x40>)
 800ad90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad94:	0800aded 	.word	0x0800aded
 800ad98:	0800ae01 	.word	0x0800ae01
 800ad9c:	0800ad7d 	.word	0x0800ad7d
 800ada0:	0800ad7d 	.word	0x0800ad7d
 800ada4:	0800ad7d 	.word	0x0800ad7d
 800ada8:	0800ad7d 	.word	0x0800ad7d
 800adac:	0800ae01 	.word	0x0800ae01
 800adb0:	0800ad7d 	.word	0x0800ad7d
 800adb4:	0800ad7d 	.word	0x0800ad7d
 800adb8:	0800ad7d 	.word	0x0800ad7d
 800adbc:	0800ad7d 	.word	0x0800ad7d
 800adc0:	0800af05 	.word	0x0800af05
 800adc4:	0800ae2d 	.word	0x0800ae2d
 800adc8:	0800aebf 	.word	0x0800aebf
 800adcc:	0800ad7d 	.word	0x0800ad7d
 800add0:	0800ad7d 	.word	0x0800ad7d
 800add4:	0800af27 	.word	0x0800af27
 800add8:	0800ad7d 	.word	0x0800ad7d
 800addc:	0800ae2d 	.word	0x0800ae2d
 800ade0:	0800ad7d 	.word	0x0800ad7d
 800ade4:	0800ad7d 	.word	0x0800ad7d
 800ade8:	0800aec7 	.word	0x0800aec7
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	1d1a      	adds	r2, r3, #4
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	602a      	str	r2, [r5, #0]
 800adf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adfc:	2301      	movs	r3, #1
 800adfe:	e09f      	b.n	800af40 <_printf_i+0x1ec>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	0607      	lsls	r7, r0, #24
 800ae06:	f103 0104 	add.w	r1, r3, #4
 800ae0a:	6029      	str	r1, [r5, #0]
 800ae0c:	d501      	bpl.n	800ae12 <_printf_i+0xbe>
 800ae0e:	681e      	ldr	r6, [r3, #0]
 800ae10:	e003      	b.n	800ae1a <_printf_i+0xc6>
 800ae12:	0646      	lsls	r6, r0, #25
 800ae14:	d5fb      	bpl.n	800ae0e <_printf_i+0xba>
 800ae16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	da03      	bge.n	800ae26 <_printf_i+0xd2>
 800ae1e:	232d      	movs	r3, #45	; 0x2d
 800ae20:	4276      	negs	r6, r6
 800ae22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae26:	485a      	ldr	r0, [pc, #360]	; (800af90 <_printf_i+0x23c>)
 800ae28:	230a      	movs	r3, #10
 800ae2a:	e012      	b.n	800ae52 <_printf_i+0xfe>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	6820      	ldr	r0, [r4, #0]
 800ae30:	1d19      	adds	r1, r3, #4
 800ae32:	6029      	str	r1, [r5, #0]
 800ae34:	0605      	lsls	r5, r0, #24
 800ae36:	d501      	bpl.n	800ae3c <_printf_i+0xe8>
 800ae38:	681e      	ldr	r6, [r3, #0]
 800ae3a:	e002      	b.n	800ae42 <_printf_i+0xee>
 800ae3c:	0641      	lsls	r1, r0, #25
 800ae3e:	d5fb      	bpl.n	800ae38 <_printf_i+0xe4>
 800ae40:	881e      	ldrh	r6, [r3, #0]
 800ae42:	4853      	ldr	r0, [pc, #332]	; (800af90 <_printf_i+0x23c>)
 800ae44:	2f6f      	cmp	r7, #111	; 0x6f
 800ae46:	bf0c      	ite	eq
 800ae48:	2308      	moveq	r3, #8
 800ae4a:	230a      	movne	r3, #10
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae52:	6865      	ldr	r5, [r4, #4]
 800ae54:	60a5      	str	r5, [r4, #8]
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	bfa2      	ittt	ge
 800ae5a:	6821      	ldrge	r1, [r4, #0]
 800ae5c:	f021 0104 	bicge.w	r1, r1, #4
 800ae60:	6021      	strge	r1, [r4, #0]
 800ae62:	b90e      	cbnz	r6, 800ae68 <_printf_i+0x114>
 800ae64:	2d00      	cmp	r5, #0
 800ae66:	d04b      	beq.n	800af00 <_printf_i+0x1ac>
 800ae68:	4615      	mov	r5, r2
 800ae6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae6e:	fb03 6711 	mls	r7, r3, r1, r6
 800ae72:	5dc7      	ldrb	r7, [r0, r7]
 800ae74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae78:	4637      	mov	r7, r6
 800ae7a:	42bb      	cmp	r3, r7
 800ae7c:	460e      	mov	r6, r1
 800ae7e:	d9f4      	bls.n	800ae6a <_printf_i+0x116>
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	d10b      	bne.n	800ae9c <_printf_i+0x148>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	07de      	lsls	r6, r3, #31
 800ae88:	d508      	bpl.n	800ae9c <_printf_i+0x148>
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	bfde      	ittt	le
 800ae92:	2330      	movle	r3, #48	; 0x30
 800ae94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae9c:	1b52      	subs	r2, r2, r5
 800ae9e:	6122      	str	r2, [r4, #16]
 800aea0:	f8cd a000 	str.w	sl, [sp]
 800aea4:	464b      	mov	r3, r9
 800aea6:	aa03      	add	r2, sp, #12
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fee4 	bl	800ac78 <_printf_common>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d14a      	bne.n	800af4a <_printf_i+0x1f6>
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb8:	b004      	add	sp, #16
 800aeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	f043 0320 	orr.w	r3, r3, #32
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	4833      	ldr	r0, [pc, #204]	; (800af94 <_printf_i+0x240>)
 800aec8:	2778      	movs	r7, #120	; 0x78
 800aeca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	6829      	ldr	r1, [r5, #0]
 800aed2:	061f      	lsls	r7, r3, #24
 800aed4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aed8:	d402      	bmi.n	800aee0 <_printf_i+0x18c>
 800aeda:	065f      	lsls	r7, r3, #25
 800aedc:	bf48      	it	mi
 800aede:	b2b6      	uxthmi	r6, r6
 800aee0:	07df      	lsls	r7, r3, #31
 800aee2:	bf48      	it	mi
 800aee4:	f043 0320 	orrmi.w	r3, r3, #32
 800aee8:	6029      	str	r1, [r5, #0]
 800aeea:	bf48      	it	mi
 800aeec:	6023      	strmi	r3, [r4, #0]
 800aeee:	b91e      	cbnz	r6, 800aef8 <_printf_i+0x1a4>
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	f023 0320 	bic.w	r3, r3, #32
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	2310      	movs	r3, #16
 800aefa:	e7a7      	b.n	800ae4c <_printf_i+0xf8>
 800aefc:	4824      	ldr	r0, [pc, #144]	; (800af90 <_printf_i+0x23c>)
 800aefe:	e7e4      	b.n	800aeca <_printf_i+0x176>
 800af00:	4615      	mov	r5, r2
 800af02:	e7bd      	b.n	800ae80 <_printf_i+0x12c>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	6826      	ldr	r6, [r4, #0]
 800af08:	6961      	ldr	r1, [r4, #20]
 800af0a:	1d18      	adds	r0, r3, #4
 800af0c:	6028      	str	r0, [r5, #0]
 800af0e:	0635      	lsls	r5, r6, #24
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	d501      	bpl.n	800af18 <_printf_i+0x1c4>
 800af14:	6019      	str	r1, [r3, #0]
 800af16:	e002      	b.n	800af1e <_printf_i+0x1ca>
 800af18:	0670      	lsls	r0, r6, #25
 800af1a:	d5fb      	bpl.n	800af14 <_printf_i+0x1c0>
 800af1c:	8019      	strh	r1, [r3, #0]
 800af1e:	2300      	movs	r3, #0
 800af20:	6123      	str	r3, [r4, #16]
 800af22:	4615      	mov	r5, r2
 800af24:	e7bc      	b.n	800aea0 <_printf_i+0x14c>
 800af26:	682b      	ldr	r3, [r5, #0]
 800af28:	1d1a      	adds	r2, r3, #4
 800af2a:	602a      	str	r2, [r5, #0]
 800af2c:	681d      	ldr	r5, [r3, #0]
 800af2e:	6862      	ldr	r2, [r4, #4]
 800af30:	2100      	movs	r1, #0
 800af32:	4628      	mov	r0, r5
 800af34:	f7f5 f95c 	bl	80001f0 <memchr>
 800af38:	b108      	cbz	r0, 800af3e <_printf_i+0x1ea>
 800af3a:	1b40      	subs	r0, r0, r5
 800af3c:	6060      	str	r0, [r4, #4]
 800af3e:	6863      	ldr	r3, [r4, #4]
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	2300      	movs	r3, #0
 800af44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af48:	e7aa      	b.n	800aea0 <_printf_i+0x14c>
 800af4a:	6923      	ldr	r3, [r4, #16]
 800af4c:	462a      	mov	r2, r5
 800af4e:	4649      	mov	r1, r9
 800af50:	4640      	mov	r0, r8
 800af52:	47d0      	blx	sl
 800af54:	3001      	adds	r0, #1
 800af56:	d0ad      	beq.n	800aeb4 <_printf_i+0x160>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	079b      	lsls	r3, r3, #30
 800af5c:	d413      	bmi.n	800af86 <_printf_i+0x232>
 800af5e:	68e0      	ldr	r0, [r4, #12]
 800af60:	9b03      	ldr	r3, [sp, #12]
 800af62:	4298      	cmp	r0, r3
 800af64:	bfb8      	it	lt
 800af66:	4618      	movlt	r0, r3
 800af68:	e7a6      	b.n	800aeb8 <_printf_i+0x164>
 800af6a:	2301      	movs	r3, #1
 800af6c:	4632      	mov	r2, r6
 800af6e:	4649      	mov	r1, r9
 800af70:	4640      	mov	r0, r8
 800af72:	47d0      	blx	sl
 800af74:	3001      	adds	r0, #1
 800af76:	d09d      	beq.n	800aeb4 <_printf_i+0x160>
 800af78:	3501      	adds	r5, #1
 800af7a:	68e3      	ldr	r3, [r4, #12]
 800af7c:	9903      	ldr	r1, [sp, #12]
 800af7e:	1a5b      	subs	r3, r3, r1
 800af80:	42ab      	cmp	r3, r5
 800af82:	dcf2      	bgt.n	800af6a <_printf_i+0x216>
 800af84:	e7eb      	b.n	800af5e <_printf_i+0x20a>
 800af86:	2500      	movs	r5, #0
 800af88:	f104 0619 	add.w	r6, r4, #25
 800af8c:	e7f5      	b.n	800af7a <_printf_i+0x226>
 800af8e:	bf00      	nop
 800af90:	0800d8fb 	.word	0x0800d8fb
 800af94:	0800d90c 	.word	0x0800d90c

0800af98 <__sflush_r>:
 800af98:	898a      	ldrh	r2, [r1, #12]
 800af9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9e:	4605      	mov	r5, r0
 800afa0:	0710      	lsls	r0, r2, #28
 800afa2:	460c      	mov	r4, r1
 800afa4:	d458      	bmi.n	800b058 <__sflush_r+0xc0>
 800afa6:	684b      	ldr	r3, [r1, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dc05      	bgt.n	800afb8 <__sflush_r+0x20>
 800afac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dc02      	bgt.n	800afb8 <__sflush_r+0x20>
 800afb2:	2000      	movs	r0, #0
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afba:	2e00      	cmp	r6, #0
 800afbc:	d0f9      	beq.n	800afb2 <__sflush_r+0x1a>
 800afbe:	2300      	movs	r3, #0
 800afc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afc4:	682f      	ldr	r7, [r5, #0]
 800afc6:	6a21      	ldr	r1, [r4, #32]
 800afc8:	602b      	str	r3, [r5, #0]
 800afca:	d032      	beq.n	800b032 <__sflush_r+0x9a>
 800afcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	075a      	lsls	r2, r3, #29
 800afd2:	d505      	bpl.n	800afe0 <__sflush_r+0x48>
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	1ac0      	subs	r0, r0, r3
 800afd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afda:	b10b      	cbz	r3, 800afe0 <__sflush_r+0x48>
 800afdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afde:	1ac0      	subs	r0, r0, r3
 800afe0:	2300      	movs	r3, #0
 800afe2:	4602      	mov	r2, r0
 800afe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe6:	6a21      	ldr	r1, [r4, #32]
 800afe8:	4628      	mov	r0, r5
 800afea:	47b0      	blx	r6
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	d106      	bne.n	800b000 <__sflush_r+0x68>
 800aff2:	6829      	ldr	r1, [r5, #0]
 800aff4:	291d      	cmp	r1, #29
 800aff6:	d82b      	bhi.n	800b050 <__sflush_r+0xb8>
 800aff8:	4a29      	ldr	r2, [pc, #164]	; (800b0a0 <__sflush_r+0x108>)
 800affa:	410a      	asrs	r2, r1
 800affc:	07d6      	lsls	r6, r2, #31
 800affe:	d427      	bmi.n	800b050 <__sflush_r+0xb8>
 800b000:	2200      	movs	r2, #0
 800b002:	6062      	str	r2, [r4, #4]
 800b004:	04d9      	lsls	r1, r3, #19
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	6022      	str	r2, [r4, #0]
 800b00a:	d504      	bpl.n	800b016 <__sflush_r+0x7e>
 800b00c:	1c42      	adds	r2, r0, #1
 800b00e:	d101      	bne.n	800b014 <__sflush_r+0x7c>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b903      	cbnz	r3, 800b016 <__sflush_r+0x7e>
 800b014:	6560      	str	r0, [r4, #84]	; 0x54
 800b016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b018:	602f      	str	r7, [r5, #0]
 800b01a:	2900      	cmp	r1, #0
 800b01c:	d0c9      	beq.n	800afb2 <__sflush_r+0x1a>
 800b01e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b022:	4299      	cmp	r1, r3
 800b024:	d002      	beq.n	800b02c <__sflush_r+0x94>
 800b026:	4628      	mov	r0, r5
 800b028:	f001 f91c 	bl	800c264 <_free_r>
 800b02c:	2000      	movs	r0, #0
 800b02e:	6360      	str	r0, [r4, #52]	; 0x34
 800b030:	e7c0      	b.n	800afb4 <__sflush_r+0x1c>
 800b032:	2301      	movs	r3, #1
 800b034:	4628      	mov	r0, r5
 800b036:	47b0      	blx	r6
 800b038:	1c41      	adds	r1, r0, #1
 800b03a:	d1c8      	bne.n	800afce <__sflush_r+0x36>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0c5      	beq.n	800afce <__sflush_r+0x36>
 800b042:	2b1d      	cmp	r3, #29
 800b044:	d001      	beq.n	800b04a <__sflush_r+0xb2>
 800b046:	2b16      	cmp	r3, #22
 800b048:	d101      	bne.n	800b04e <__sflush_r+0xb6>
 800b04a:	602f      	str	r7, [r5, #0]
 800b04c:	e7b1      	b.n	800afb2 <__sflush_r+0x1a>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	e7ad      	b.n	800afb4 <__sflush_r+0x1c>
 800b058:	690f      	ldr	r7, [r1, #16]
 800b05a:	2f00      	cmp	r7, #0
 800b05c:	d0a9      	beq.n	800afb2 <__sflush_r+0x1a>
 800b05e:	0793      	lsls	r3, r2, #30
 800b060:	680e      	ldr	r6, [r1, #0]
 800b062:	bf08      	it	eq
 800b064:	694b      	ldreq	r3, [r1, #20]
 800b066:	600f      	str	r7, [r1, #0]
 800b068:	bf18      	it	ne
 800b06a:	2300      	movne	r3, #0
 800b06c:	eba6 0807 	sub.w	r8, r6, r7
 800b070:	608b      	str	r3, [r1, #8]
 800b072:	f1b8 0f00 	cmp.w	r8, #0
 800b076:	dd9c      	ble.n	800afb2 <__sflush_r+0x1a>
 800b078:	6a21      	ldr	r1, [r4, #32]
 800b07a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b07c:	4643      	mov	r3, r8
 800b07e:	463a      	mov	r2, r7
 800b080:	4628      	mov	r0, r5
 800b082:	47b0      	blx	r6
 800b084:	2800      	cmp	r0, #0
 800b086:	dc06      	bgt.n	800b096 <__sflush_r+0xfe>
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b094:	e78e      	b.n	800afb4 <__sflush_r+0x1c>
 800b096:	4407      	add	r7, r0
 800b098:	eba8 0800 	sub.w	r8, r8, r0
 800b09c:	e7e9      	b.n	800b072 <__sflush_r+0xda>
 800b09e:	bf00      	nop
 800b0a0:	dfbffffe 	.word	0xdfbffffe

0800b0a4 <_fflush_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	690b      	ldr	r3, [r1, #16]
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b913      	cbnz	r3, 800b0b4 <_fflush_r+0x10>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	b118      	cbz	r0, 800b0be <_fflush_r+0x1a>
 800b0b6:	6a03      	ldr	r3, [r0, #32]
 800b0b8:	b90b      	cbnz	r3, 800b0be <_fflush_r+0x1a>
 800b0ba:	f000 f8a7 	bl	800b20c <__sinit>
 800b0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0f3      	beq.n	800b0ae <_fflush_r+0xa>
 800b0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0c8:	07d0      	lsls	r0, r2, #31
 800b0ca:	d404      	bmi.n	800b0d6 <_fflush_r+0x32>
 800b0cc:	0599      	lsls	r1, r3, #22
 800b0ce:	d402      	bmi.n	800b0d6 <_fflush_r+0x32>
 800b0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0d2:	f000 fa3a 	bl	800b54a <__retarget_lock_acquire_recursive>
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	4621      	mov	r1, r4
 800b0da:	f7ff ff5d 	bl	800af98 <__sflush_r>
 800b0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0e0:	07da      	lsls	r2, r3, #31
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	d4e4      	bmi.n	800b0b0 <_fflush_r+0xc>
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	059b      	lsls	r3, r3, #22
 800b0ea:	d4e1      	bmi.n	800b0b0 <_fflush_r+0xc>
 800b0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ee:	f000 fa2d 	bl	800b54c <__retarget_lock_release_recursive>
 800b0f2:	e7dd      	b.n	800b0b0 <_fflush_r+0xc>

0800b0f4 <std>:
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	b510      	push	{r4, lr}
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b0fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b102:	6083      	str	r3, [r0, #8]
 800b104:	8181      	strh	r1, [r0, #12]
 800b106:	6643      	str	r3, [r0, #100]	; 0x64
 800b108:	81c2      	strh	r2, [r0, #14]
 800b10a:	6183      	str	r3, [r0, #24]
 800b10c:	4619      	mov	r1, r3
 800b10e:	2208      	movs	r2, #8
 800b110:	305c      	adds	r0, #92	; 0x5c
 800b112:	f000 f989 	bl	800b428 <memset>
 800b116:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <std+0x58>)
 800b118:	6263      	str	r3, [r4, #36]	; 0x24
 800b11a:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <std+0x5c>)
 800b11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b11e:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <std+0x60>)
 800b120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b122:	4b0d      	ldr	r3, [pc, #52]	; (800b158 <std+0x64>)
 800b124:	6323      	str	r3, [r4, #48]	; 0x30
 800b126:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <std+0x68>)
 800b128:	6224      	str	r4, [r4, #32]
 800b12a:	429c      	cmp	r4, r3
 800b12c:	d006      	beq.n	800b13c <std+0x48>
 800b12e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b132:	4294      	cmp	r4, r2
 800b134:	d002      	beq.n	800b13c <std+0x48>
 800b136:	33d0      	adds	r3, #208	; 0xd0
 800b138:	429c      	cmp	r4, r3
 800b13a:	d105      	bne.n	800b148 <std+0x54>
 800b13c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b144:	f000 ba00 	b.w	800b548 <__retarget_lock_init_recursive>
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop
 800b14c:	0800b279 	.word	0x0800b279
 800b150:	0800b29b 	.word	0x0800b29b
 800b154:	0800b2d3 	.word	0x0800b2d3
 800b158:	0800b2f7 	.word	0x0800b2f7
 800b15c:	20000b94 	.word	0x20000b94

0800b160 <stdio_exit_handler>:
 800b160:	4a02      	ldr	r2, [pc, #8]	; (800b16c <stdio_exit_handler+0xc>)
 800b162:	4903      	ldr	r1, [pc, #12]	; (800b170 <stdio_exit_handler+0x10>)
 800b164:	4803      	ldr	r0, [pc, #12]	; (800b174 <stdio_exit_handler+0x14>)
 800b166:	f000 b869 	b.w	800b23c <_fwalk_sglue>
 800b16a:	bf00      	nop
 800b16c:	2000007c 	.word	0x2000007c
 800b170:	0800b0a5 	.word	0x0800b0a5
 800b174:	20000088 	.word	0x20000088

0800b178 <cleanup_stdio>:
 800b178:	6841      	ldr	r1, [r0, #4]
 800b17a:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <cleanup_stdio+0x34>)
 800b17c:	4299      	cmp	r1, r3
 800b17e:	b510      	push	{r4, lr}
 800b180:	4604      	mov	r4, r0
 800b182:	d001      	beq.n	800b188 <cleanup_stdio+0x10>
 800b184:	f7ff ff8e 	bl	800b0a4 <_fflush_r>
 800b188:	68a1      	ldr	r1, [r4, #8]
 800b18a:	4b09      	ldr	r3, [pc, #36]	; (800b1b0 <cleanup_stdio+0x38>)
 800b18c:	4299      	cmp	r1, r3
 800b18e:	d002      	beq.n	800b196 <cleanup_stdio+0x1e>
 800b190:	4620      	mov	r0, r4
 800b192:	f7ff ff87 	bl	800b0a4 <_fflush_r>
 800b196:	68e1      	ldr	r1, [r4, #12]
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <cleanup_stdio+0x3c>)
 800b19a:	4299      	cmp	r1, r3
 800b19c:	d004      	beq.n	800b1a8 <cleanup_stdio+0x30>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a4:	f7ff bf7e 	b.w	800b0a4 <_fflush_r>
 800b1a8:	bd10      	pop	{r4, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000b94 	.word	0x20000b94
 800b1b0:	20000bfc 	.word	0x20000bfc
 800b1b4:	20000c64 	.word	0x20000c64

0800b1b8 <global_stdio_init.part.0>:
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <global_stdio_init.part.0+0x30>)
 800b1bc:	4c0b      	ldr	r4, [pc, #44]	; (800b1ec <global_stdio_init.part.0+0x34>)
 800b1be:	4a0c      	ldr	r2, [pc, #48]	; (800b1f0 <global_stdio_init.part.0+0x38>)
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2104      	movs	r1, #4
 800b1c8:	f7ff ff94 	bl	800b0f4 <std>
 800b1cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	2109      	movs	r1, #9
 800b1d4:	f7ff ff8e 	bl	800b0f4 <std>
 800b1d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b1dc:	2202      	movs	r2, #2
 800b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e2:	2112      	movs	r1, #18
 800b1e4:	f7ff bf86 	b.w	800b0f4 <std>
 800b1e8:	20000ccc 	.word	0x20000ccc
 800b1ec:	20000b94 	.word	0x20000b94
 800b1f0:	0800b161 	.word	0x0800b161

0800b1f4 <__sfp_lock_acquire>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	; (800b1fc <__sfp_lock_acquire+0x8>)
 800b1f6:	f000 b9a8 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	20000cd5 	.word	0x20000cd5

0800b200 <__sfp_lock_release>:
 800b200:	4801      	ldr	r0, [pc, #4]	; (800b208 <__sfp_lock_release+0x8>)
 800b202:	f000 b9a3 	b.w	800b54c <__retarget_lock_release_recursive>
 800b206:	bf00      	nop
 800b208:	20000cd5 	.word	0x20000cd5

0800b20c <__sinit>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	f7ff fff0 	bl	800b1f4 <__sfp_lock_acquire>
 800b214:	6a23      	ldr	r3, [r4, #32]
 800b216:	b11b      	cbz	r3, 800b220 <__sinit+0x14>
 800b218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b21c:	f7ff bff0 	b.w	800b200 <__sfp_lock_release>
 800b220:	4b04      	ldr	r3, [pc, #16]	; (800b234 <__sinit+0x28>)
 800b222:	6223      	str	r3, [r4, #32]
 800b224:	4b04      	ldr	r3, [pc, #16]	; (800b238 <__sinit+0x2c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1f5      	bne.n	800b218 <__sinit+0xc>
 800b22c:	f7ff ffc4 	bl	800b1b8 <global_stdio_init.part.0>
 800b230:	e7f2      	b.n	800b218 <__sinit+0xc>
 800b232:	bf00      	nop
 800b234:	0800b179 	.word	0x0800b179
 800b238:	20000ccc 	.word	0x20000ccc

0800b23c <_fwalk_sglue>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	4607      	mov	r7, r0
 800b242:	4688      	mov	r8, r1
 800b244:	4614      	mov	r4, r2
 800b246:	2600      	movs	r6, #0
 800b248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b24c:	f1b9 0901 	subs.w	r9, r9, #1
 800b250:	d505      	bpl.n	800b25e <_fwalk_sglue+0x22>
 800b252:	6824      	ldr	r4, [r4, #0]
 800b254:	2c00      	cmp	r4, #0
 800b256:	d1f7      	bne.n	800b248 <_fwalk_sglue+0xc>
 800b258:	4630      	mov	r0, r6
 800b25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25e:	89ab      	ldrh	r3, [r5, #12]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d907      	bls.n	800b274 <_fwalk_sglue+0x38>
 800b264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b268:	3301      	adds	r3, #1
 800b26a:	d003      	beq.n	800b274 <_fwalk_sglue+0x38>
 800b26c:	4629      	mov	r1, r5
 800b26e:	4638      	mov	r0, r7
 800b270:	47c0      	blx	r8
 800b272:	4306      	orrs	r6, r0
 800b274:	3568      	adds	r5, #104	; 0x68
 800b276:	e7e9      	b.n	800b24c <_fwalk_sglue+0x10>

0800b278 <__sread>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	460c      	mov	r4, r1
 800b27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b280:	f000 f914 	bl	800b4ac <_read_r>
 800b284:	2800      	cmp	r0, #0
 800b286:	bfab      	itete	ge
 800b288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b28a:	89a3      	ldrhlt	r3, [r4, #12]
 800b28c:	181b      	addge	r3, r3, r0
 800b28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b292:	bfac      	ite	ge
 800b294:	6563      	strge	r3, [r4, #84]	; 0x54
 800b296:	81a3      	strhlt	r3, [r4, #12]
 800b298:	bd10      	pop	{r4, pc}

0800b29a <__swrite>:
 800b29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29e:	461f      	mov	r7, r3
 800b2a0:	898b      	ldrh	r3, [r1, #12]
 800b2a2:	05db      	lsls	r3, r3, #23
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	4616      	mov	r6, r2
 800b2aa:	d505      	bpl.n	800b2b8 <__swrite+0x1e>
 800b2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f000 f8e8 	bl	800b488 <_lseek_r>
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ce:	f000 b8ff 	b.w	800b4d0 <_write_r>

0800b2d2 <__sseek>:
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2da:	f000 f8d5 	bl	800b488 <_lseek_r>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	bf15      	itete	ne
 800b2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2ee:	81a3      	strheq	r3, [r4, #12]
 800b2f0:	bf18      	it	ne
 800b2f2:	81a3      	strhne	r3, [r4, #12]
 800b2f4:	bd10      	pop	{r4, pc}

0800b2f6 <__sclose>:
 800b2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fa:	f000 b8b5 	b.w	800b468 <_close_r>

0800b2fe <__swbuf_r>:
 800b2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b300:	460e      	mov	r6, r1
 800b302:	4614      	mov	r4, r2
 800b304:	4605      	mov	r5, r0
 800b306:	b118      	cbz	r0, 800b310 <__swbuf_r+0x12>
 800b308:	6a03      	ldr	r3, [r0, #32]
 800b30a:	b90b      	cbnz	r3, 800b310 <__swbuf_r+0x12>
 800b30c:	f7ff ff7e 	bl	800b20c <__sinit>
 800b310:	69a3      	ldr	r3, [r4, #24]
 800b312:	60a3      	str	r3, [r4, #8]
 800b314:	89a3      	ldrh	r3, [r4, #12]
 800b316:	071a      	lsls	r2, r3, #28
 800b318:	d525      	bpl.n	800b366 <__swbuf_r+0x68>
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	b31b      	cbz	r3, 800b366 <__swbuf_r+0x68>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	6922      	ldr	r2, [r4, #16]
 800b322:	1a98      	subs	r0, r3, r2
 800b324:	6963      	ldr	r3, [r4, #20]
 800b326:	b2f6      	uxtb	r6, r6
 800b328:	4283      	cmp	r3, r0
 800b32a:	4637      	mov	r7, r6
 800b32c:	dc04      	bgt.n	800b338 <__swbuf_r+0x3a>
 800b32e:	4621      	mov	r1, r4
 800b330:	4628      	mov	r0, r5
 800b332:	f7ff feb7 	bl	800b0a4 <_fflush_r>
 800b336:	b9e0      	cbnz	r0, 800b372 <__swbuf_r+0x74>
 800b338:	68a3      	ldr	r3, [r4, #8]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	60a3      	str	r3, [r4, #8]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	1c5a      	adds	r2, r3, #1
 800b342:	6022      	str	r2, [r4, #0]
 800b344:	701e      	strb	r6, [r3, #0]
 800b346:	6962      	ldr	r2, [r4, #20]
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d004      	beq.n	800b358 <__swbuf_r+0x5a>
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	07db      	lsls	r3, r3, #31
 800b352:	d506      	bpl.n	800b362 <__swbuf_r+0x64>
 800b354:	2e0a      	cmp	r6, #10
 800b356:	d104      	bne.n	800b362 <__swbuf_r+0x64>
 800b358:	4621      	mov	r1, r4
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff fea2 	bl	800b0a4 <_fflush_r>
 800b360:	b938      	cbnz	r0, 800b372 <__swbuf_r+0x74>
 800b362:	4638      	mov	r0, r7
 800b364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	f000 f805 	bl	800b378 <__swsetup_r>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d0d5      	beq.n	800b31e <__swbuf_r+0x20>
 800b372:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b376:	e7f4      	b.n	800b362 <__swbuf_r+0x64>

0800b378 <__swsetup_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <__swsetup_r+0xac>)
 800b37c:	4605      	mov	r5, r0
 800b37e:	6818      	ldr	r0, [r3, #0]
 800b380:	460c      	mov	r4, r1
 800b382:	b118      	cbz	r0, 800b38c <__swsetup_r+0x14>
 800b384:	6a03      	ldr	r3, [r0, #32]
 800b386:	b90b      	cbnz	r3, 800b38c <__swsetup_r+0x14>
 800b388:	f7ff ff40 	bl	800b20c <__sinit>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b392:	0718      	lsls	r0, r3, #28
 800b394:	d422      	bmi.n	800b3dc <__swsetup_r+0x64>
 800b396:	06d9      	lsls	r1, r3, #27
 800b398:	d407      	bmi.n	800b3aa <__swsetup_r+0x32>
 800b39a:	2309      	movs	r3, #9
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3a8:	e034      	b.n	800b414 <__swsetup_r+0x9c>
 800b3aa:	0758      	lsls	r0, r3, #29
 800b3ac:	d512      	bpl.n	800b3d4 <__swsetup_r+0x5c>
 800b3ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b0:	b141      	cbz	r1, 800b3c4 <__swsetup_r+0x4c>
 800b3b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	d002      	beq.n	800b3c0 <__swsetup_r+0x48>
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 ff52 	bl	800c264 <_free_r>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	6363      	str	r3, [r4, #52]	; 0x34
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	6063      	str	r3, [r4, #4]
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f043 0308 	orr.w	r3, r3, #8
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	b94b      	cbnz	r3, 800b3f4 <__swsetup_r+0x7c>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ea:	d003      	beq.n	800b3f4 <__swsetup_r+0x7c>
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f001 fd1e 	bl	800ce30 <__smakebuf_r>
 800b3f4:	89a0      	ldrh	r0, [r4, #12]
 800b3f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3fa:	f010 0301 	ands.w	r3, r0, #1
 800b3fe:	d00a      	beq.n	800b416 <__swsetup_r+0x9e>
 800b400:	2300      	movs	r3, #0
 800b402:	60a3      	str	r3, [r4, #8]
 800b404:	6963      	ldr	r3, [r4, #20]
 800b406:	425b      	negs	r3, r3
 800b408:	61a3      	str	r3, [r4, #24]
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	b943      	cbnz	r3, 800b420 <__swsetup_r+0xa8>
 800b40e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b412:	d1c4      	bne.n	800b39e <__swsetup_r+0x26>
 800b414:	bd38      	pop	{r3, r4, r5, pc}
 800b416:	0781      	lsls	r1, r0, #30
 800b418:	bf58      	it	pl
 800b41a:	6963      	ldrpl	r3, [r4, #20]
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	e7f4      	b.n	800b40a <__swsetup_r+0x92>
 800b420:	2000      	movs	r0, #0
 800b422:	e7f7      	b.n	800b414 <__swsetup_r+0x9c>
 800b424:	200000d4 	.word	0x200000d4

0800b428 <memset>:
 800b428:	4402      	add	r2, r0
 800b42a:	4603      	mov	r3, r0
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d100      	bne.n	800b432 <memset+0xa>
 800b430:	4770      	bx	lr
 800b432:	f803 1b01 	strb.w	r1, [r3], #1
 800b436:	e7f9      	b.n	800b42c <memset+0x4>

0800b438 <strncpy>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	3901      	subs	r1, #1
 800b43c:	4603      	mov	r3, r0
 800b43e:	b132      	cbz	r2, 800b44e <strncpy+0x16>
 800b440:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b444:	f803 4b01 	strb.w	r4, [r3], #1
 800b448:	3a01      	subs	r2, #1
 800b44a:	2c00      	cmp	r4, #0
 800b44c:	d1f7      	bne.n	800b43e <strncpy+0x6>
 800b44e:	441a      	add	r2, r3
 800b450:	2100      	movs	r1, #0
 800b452:	4293      	cmp	r3, r2
 800b454:	d100      	bne.n	800b458 <strncpy+0x20>
 800b456:	bd10      	pop	{r4, pc}
 800b458:	f803 1b01 	strb.w	r1, [r3], #1
 800b45c:	e7f9      	b.n	800b452 <strncpy+0x1a>
	...

0800b460 <_localeconv_r>:
 800b460:	4800      	ldr	r0, [pc, #0]	; (800b464 <_localeconv_r+0x4>)
 800b462:	4770      	bx	lr
 800b464:	200001c8 	.word	0x200001c8

0800b468 <_close_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4d06      	ldr	r5, [pc, #24]	; (800b484 <_close_r+0x1c>)
 800b46c:	2300      	movs	r3, #0
 800b46e:	4604      	mov	r4, r0
 800b470:	4608      	mov	r0, r1
 800b472:	602b      	str	r3, [r5, #0]
 800b474:	f7f7 fab3 	bl	80029de <_close>
 800b478:	1c43      	adds	r3, r0, #1
 800b47a:	d102      	bne.n	800b482 <_close_r+0x1a>
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	b103      	cbz	r3, 800b482 <_close_r+0x1a>
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	bd38      	pop	{r3, r4, r5, pc}
 800b484:	20000cd0 	.word	0x20000cd0

0800b488 <_lseek_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_lseek_r+0x20>)
 800b48c:	4604      	mov	r4, r0
 800b48e:	4608      	mov	r0, r1
 800b490:	4611      	mov	r1, r2
 800b492:	2200      	movs	r2, #0
 800b494:	602a      	str	r2, [r5, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	f7f7 fac8 	bl	8002a2c <_lseek>
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d102      	bne.n	800b4a6 <_lseek_r+0x1e>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	b103      	cbz	r3, 800b4a6 <_lseek_r+0x1e>
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	20000cd0 	.word	0x20000cd0

0800b4ac <_read_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d07      	ldr	r5, [pc, #28]	; (800b4cc <_read_r+0x20>)
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	4608      	mov	r0, r1
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	602a      	str	r2, [r5, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f7f7 fa56 	bl	800296c <_read>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d102      	bne.n	800b4ca <_read_r+0x1e>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	b103      	cbz	r3, 800b4ca <_read_r+0x1e>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	20000cd0 	.word	0x20000cd0

0800b4d0 <_write_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4d07      	ldr	r5, [pc, #28]	; (800b4f0 <_write_r+0x20>)
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	602a      	str	r2, [r5, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f7f7 fa61 	bl	80029a6 <_write>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_write_r+0x1e>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_write_r+0x1e>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	20000cd0 	.word	0x20000cd0

0800b4f4 <__errno>:
 800b4f4:	4b01      	ldr	r3, [pc, #4]	; (800b4fc <__errno+0x8>)
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	200000d4 	.word	0x200000d4

0800b500 <__libc_init_array>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4d0d      	ldr	r5, [pc, #52]	; (800b538 <__libc_init_array+0x38>)
 800b504:	4c0d      	ldr	r4, [pc, #52]	; (800b53c <__libc_init_array+0x3c>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	2600      	movs	r6, #0
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	d109      	bne.n	800b524 <__libc_init_array+0x24>
 800b510:	4d0b      	ldr	r5, [pc, #44]	; (800b540 <__libc_init_array+0x40>)
 800b512:	4c0c      	ldr	r4, [pc, #48]	; (800b544 <__libc_init_array+0x44>)
 800b514:	f001 fdac 	bl	800d070 <_init>
 800b518:	1b64      	subs	r4, r4, r5
 800b51a:	10a4      	asrs	r4, r4, #2
 800b51c:	2600      	movs	r6, #0
 800b51e:	42a6      	cmp	r6, r4
 800b520:	d105      	bne.n	800b52e <__libc_init_array+0x2e>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f855 3b04 	ldr.w	r3, [r5], #4
 800b528:	4798      	blx	r3
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7ee      	b.n	800b50c <__libc_init_array+0xc>
 800b52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b532:	4798      	blx	r3
 800b534:	3601      	adds	r6, #1
 800b536:	e7f2      	b.n	800b51e <__libc_init_array+0x1e>
 800b538:	0800db64 	.word	0x0800db64
 800b53c:	0800db64 	.word	0x0800db64
 800b540:	0800db64 	.word	0x0800db64
 800b544:	0800db68 	.word	0x0800db68

0800b548 <__retarget_lock_init_recursive>:
 800b548:	4770      	bx	lr

0800b54a <__retarget_lock_acquire_recursive>:
 800b54a:	4770      	bx	lr

0800b54c <__retarget_lock_release_recursive>:
 800b54c:	4770      	bx	lr

0800b54e <memcpy>:
 800b54e:	440a      	add	r2, r1
 800b550:	4291      	cmp	r1, r2
 800b552:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b556:	d100      	bne.n	800b55a <memcpy+0xc>
 800b558:	4770      	bx	lr
 800b55a:	b510      	push	{r4, lr}
 800b55c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b560:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b564:	4291      	cmp	r1, r2
 800b566:	d1f9      	bne.n	800b55c <memcpy+0xe>
 800b568:	bd10      	pop	{r4, pc}

0800b56a <quorem>:
 800b56a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56e:	6903      	ldr	r3, [r0, #16]
 800b570:	690c      	ldr	r4, [r1, #16]
 800b572:	42a3      	cmp	r3, r4
 800b574:	4607      	mov	r7, r0
 800b576:	db7e      	blt.n	800b676 <quorem+0x10c>
 800b578:	3c01      	subs	r4, #1
 800b57a:	f101 0814 	add.w	r8, r1, #20
 800b57e:	f100 0514 	add.w	r5, r0, #20
 800b582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b58c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b590:	3301      	adds	r3, #1
 800b592:	429a      	cmp	r2, r3
 800b594:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b59c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5a0:	d331      	bcc.n	800b606 <quorem+0x9c>
 800b5a2:	f04f 0e00 	mov.w	lr, #0
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	46ac      	mov	ip, r5
 800b5aa:	46f2      	mov	sl, lr
 800b5ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5b0:	b293      	uxth	r3, r2
 800b5b2:	fb06 e303 	mla	r3, r6, r3, lr
 800b5b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5ba:	0c1a      	lsrs	r2, r3, #16
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	ebaa 0303 	sub.w	r3, sl, r3
 800b5c2:	f8dc a000 	ldr.w	sl, [ip]
 800b5c6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5ca:	fb06 220e 	mla	r2, r6, lr, r2
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5d6:	b292      	uxth	r2, r2
 800b5d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b5e4:	4581      	cmp	r9, r0
 800b5e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5ea:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5f2:	d2db      	bcs.n	800b5ac <quorem+0x42>
 800b5f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5f8:	b92b      	cbnz	r3, 800b606 <quorem+0x9c>
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	3b04      	subs	r3, #4
 800b5fe:	429d      	cmp	r5, r3
 800b600:	461a      	mov	r2, r3
 800b602:	d32c      	bcc.n	800b65e <quorem+0xf4>
 800b604:	613c      	str	r4, [r7, #16]
 800b606:	4638      	mov	r0, r7
 800b608:	f001 f9a8 	bl	800c95c <__mcmp>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	db22      	blt.n	800b656 <quorem+0xec>
 800b610:	3601      	adds	r6, #1
 800b612:	4629      	mov	r1, r5
 800b614:	2000      	movs	r0, #0
 800b616:	f858 2b04 	ldr.w	r2, [r8], #4
 800b61a:	f8d1 c000 	ldr.w	ip, [r1]
 800b61e:	b293      	uxth	r3, r2
 800b620:	1ac3      	subs	r3, r0, r3
 800b622:	0c12      	lsrs	r2, r2, #16
 800b624:	fa13 f38c 	uxtah	r3, r3, ip
 800b628:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b62c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b630:	b29b      	uxth	r3, r3
 800b632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b636:	45c1      	cmp	r9, r8
 800b638:	f841 3b04 	str.w	r3, [r1], #4
 800b63c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b640:	d2e9      	bcs.n	800b616 <quorem+0xac>
 800b642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b64a:	b922      	cbnz	r2, 800b656 <quorem+0xec>
 800b64c:	3b04      	subs	r3, #4
 800b64e:	429d      	cmp	r5, r3
 800b650:	461a      	mov	r2, r3
 800b652:	d30a      	bcc.n	800b66a <quorem+0x100>
 800b654:	613c      	str	r4, [r7, #16]
 800b656:	4630      	mov	r0, r6
 800b658:	b003      	add	sp, #12
 800b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65e:	6812      	ldr	r2, [r2, #0]
 800b660:	3b04      	subs	r3, #4
 800b662:	2a00      	cmp	r2, #0
 800b664:	d1ce      	bne.n	800b604 <quorem+0x9a>
 800b666:	3c01      	subs	r4, #1
 800b668:	e7c9      	b.n	800b5fe <quorem+0x94>
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	3b04      	subs	r3, #4
 800b66e:	2a00      	cmp	r2, #0
 800b670:	d1f0      	bne.n	800b654 <quorem+0xea>
 800b672:	3c01      	subs	r4, #1
 800b674:	e7eb      	b.n	800b64e <quorem+0xe4>
 800b676:	2000      	movs	r0, #0
 800b678:	e7ee      	b.n	800b658 <quorem+0xee>
 800b67a:	0000      	movs	r0, r0
 800b67c:	0000      	movs	r0, r0
	...

0800b680 <_dtoa_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	ed2d 8b04 	vpush	{d8-d9}
 800b688:	69c5      	ldr	r5, [r0, #28]
 800b68a:	b093      	sub	sp, #76	; 0x4c
 800b68c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b690:	ec57 6b10 	vmov	r6, r7, d0
 800b694:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b698:	9107      	str	r1, [sp, #28]
 800b69a:	4604      	mov	r4, r0
 800b69c:	920a      	str	r2, [sp, #40]	; 0x28
 800b69e:	930d      	str	r3, [sp, #52]	; 0x34
 800b6a0:	b975      	cbnz	r5, 800b6c0 <_dtoa_r+0x40>
 800b6a2:	2010      	movs	r0, #16
 800b6a4:	f000 fe2a 	bl	800c2fc <malloc>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	61e0      	str	r0, [r4, #28]
 800b6ac:	b920      	cbnz	r0, 800b6b8 <_dtoa_r+0x38>
 800b6ae:	4bae      	ldr	r3, [pc, #696]	; (800b968 <_dtoa_r+0x2e8>)
 800b6b0:	21ef      	movs	r1, #239	; 0xef
 800b6b2:	48ae      	ldr	r0, [pc, #696]	; (800b96c <_dtoa_r+0x2ec>)
 800b6b4:	f001 fc2a 	bl	800cf0c <__assert_func>
 800b6b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6bc:	6005      	str	r5, [r0, #0]
 800b6be:	60c5      	str	r5, [r0, #12]
 800b6c0:	69e3      	ldr	r3, [r4, #28]
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	b151      	cbz	r1, 800b6dc <_dtoa_r+0x5c>
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	604a      	str	r2, [r1, #4]
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4093      	lsls	r3, r2
 800b6ce:	608b      	str	r3, [r1, #8]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 ff07 	bl	800c4e4 <_Bfree>
 800b6d6:	69e3      	ldr	r3, [r4, #28]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	1e3b      	subs	r3, r7, #0
 800b6de:	bfbb      	ittet	lt
 800b6e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6e4:	9303      	strlt	r3, [sp, #12]
 800b6e6:	2300      	movge	r3, #0
 800b6e8:	2201      	movlt	r2, #1
 800b6ea:	bfac      	ite	ge
 800b6ec:	f8c8 3000 	strge.w	r3, [r8]
 800b6f0:	f8c8 2000 	strlt.w	r2, [r8]
 800b6f4:	4b9e      	ldr	r3, [pc, #632]	; (800b970 <_dtoa_r+0x2f0>)
 800b6f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b6fa:	ea33 0308 	bics.w	r3, r3, r8
 800b6fe:	d11b      	bne.n	800b738 <_dtoa_r+0xb8>
 800b700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b702:	f242 730f 	movw	r3, #9999	; 0x270f
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b70c:	4333      	orrs	r3, r6
 800b70e:	f000 8593 	beq.w	800c238 <_dtoa_r+0xbb8>
 800b712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b714:	b963      	cbnz	r3, 800b730 <_dtoa_r+0xb0>
 800b716:	4b97      	ldr	r3, [pc, #604]	; (800b974 <_dtoa_r+0x2f4>)
 800b718:	e027      	b.n	800b76a <_dtoa_r+0xea>
 800b71a:	4b97      	ldr	r3, [pc, #604]	; (800b978 <_dtoa_r+0x2f8>)
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	3308      	adds	r3, #8
 800b720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	9800      	ldr	r0, [sp, #0]
 800b726:	b013      	add	sp, #76	; 0x4c
 800b728:	ecbd 8b04 	vpop	{d8-d9}
 800b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b730:	4b90      	ldr	r3, [pc, #576]	; (800b974 <_dtoa_r+0x2f4>)
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	3303      	adds	r3, #3
 800b736:	e7f3      	b.n	800b720 <_dtoa_r+0xa0>
 800b738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b73c:	2200      	movs	r2, #0
 800b73e:	ec51 0b17 	vmov	r0, r1, d7
 800b742:	eeb0 8a47 	vmov.f32	s16, s14
 800b746:	eef0 8a67 	vmov.f32	s17, s15
 800b74a:	2300      	movs	r3, #0
 800b74c:	f7f5 f9cc 	bl	8000ae8 <__aeabi_dcmpeq>
 800b750:	4681      	mov	r9, r0
 800b752:	b160      	cbz	r0, 800b76e <_dtoa_r+0xee>
 800b754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b756:	2301      	movs	r3, #1
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 8568 	beq.w	800c232 <_dtoa_r+0xbb2>
 800b762:	4b86      	ldr	r3, [pc, #536]	; (800b97c <_dtoa_r+0x2fc>)
 800b764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	3b01      	subs	r3, #1
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	e7da      	b.n	800b724 <_dtoa_r+0xa4>
 800b76e:	aa10      	add	r2, sp, #64	; 0x40
 800b770:	a911      	add	r1, sp, #68	; 0x44
 800b772:	4620      	mov	r0, r4
 800b774:	eeb0 0a48 	vmov.f32	s0, s16
 800b778:	eef0 0a68 	vmov.f32	s1, s17
 800b77c:	f001 f994 	bl	800caa8 <__d2b>
 800b780:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b784:	4682      	mov	sl, r0
 800b786:	2d00      	cmp	r5, #0
 800b788:	d07f      	beq.n	800b88a <_dtoa_r+0x20a>
 800b78a:	ee18 3a90 	vmov	r3, s17
 800b78e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b792:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b796:	ec51 0b18 	vmov	r0, r1, d8
 800b79a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b79e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4b75      	ldr	r3, [pc, #468]	; (800b980 <_dtoa_r+0x300>)
 800b7ac:	f7f4 fd7c 	bl	80002a8 <__aeabi_dsub>
 800b7b0:	a367      	add	r3, pc, #412	; (adr r3, 800b950 <_dtoa_r+0x2d0>)
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	f7f4 ff2f 	bl	8000618 <__aeabi_dmul>
 800b7ba:	a367      	add	r3, pc, #412	; (adr r3, 800b958 <_dtoa_r+0x2d8>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7f4 fd74 	bl	80002ac <__adddf3>
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	f7f4 febb 	bl	8000544 <__aeabi_i2d>
 800b7ce:	a364      	add	r3, pc, #400	; (adr r3, 800b960 <_dtoa_r+0x2e0>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	f7f4 ff20 	bl	8000618 <__aeabi_dmul>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4630      	mov	r0, r6
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f4 fd64 	bl	80002ac <__adddf3>
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	f7f5 f9c6 	bl	8000b78 <__aeabi_d2iz>
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	4683      	mov	fp, r0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7f5 f981 	bl	8000afc <__aeabi_dcmplt>
 800b7fa:	b148      	cbz	r0, 800b810 <_dtoa_r+0x190>
 800b7fc:	4658      	mov	r0, fp
 800b7fe:	f7f4 fea1 	bl	8000544 <__aeabi_i2d>
 800b802:	4632      	mov	r2, r6
 800b804:	463b      	mov	r3, r7
 800b806:	f7f5 f96f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b80a:	b908      	cbnz	r0, 800b810 <_dtoa_r+0x190>
 800b80c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b810:	f1bb 0f16 	cmp.w	fp, #22
 800b814:	d857      	bhi.n	800b8c6 <_dtoa_r+0x246>
 800b816:	4b5b      	ldr	r3, [pc, #364]	; (800b984 <_dtoa_r+0x304>)
 800b818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	ec51 0b18 	vmov	r0, r1, d8
 800b824:	f7f5 f96a 	bl	8000afc <__aeabi_dcmplt>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d04e      	beq.n	800b8ca <_dtoa_r+0x24a>
 800b82c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b830:	2300      	movs	r3, #0
 800b832:	930c      	str	r3, [sp, #48]	; 0x30
 800b834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b836:	1b5b      	subs	r3, r3, r5
 800b838:	1e5a      	subs	r2, r3, #1
 800b83a:	bf45      	ittet	mi
 800b83c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b840:	9305      	strmi	r3, [sp, #20]
 800b842:	2300      	movpl	r3, #0
 800b844:	2300      	movmi	r3, #0
 800b846:	9206      	str	r2, [sp, #24]
 800b848:	bf54      	ite	pl
 800b84a:	9305      	strpl	r3, [sp, #20]
 800b84c:	9306      	strmi	r3, [sp, #24]
 800b84e:	f1bb 0f00 	cmp.w	fp, #0
 800b852:	db3c      	blt.n	800b8ce <_dtoa_r+0x24e>
 800b854:	9b06      	ldr	r3, [sp, #24]
 800b856:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b85a:	445b      	add	r3, fp
 800b85c:	9306      	str	r3, [sp, #24]
 800b85e:	2300      	movs	r3, #0
 800b860:	9308      	str	r3, [sp, #32]
 800b862:	9b07      	ldr	r3, [sp, #28]
 800b864:	2b09      	cmp	r3, #9
 800b866:	d868      	bhi.n	800b93a <_dtoa_r+0x2ba>
 800b868:	2b05      	cmp	r3, #5
 800b86a:	bfc4      	itt	gt
 800b86c:	3b04      	subgt	r3, #4
 800b86e:	9307      	strgt	r3, [sp, #28]
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	f1a3 0302 	sub.w	r3, r3, #2
 800b876:	bfcc      	ite	gt
 800b878:	2500      	movgt	r5, #0
 800b87a:	2501      	movle	r5, #1
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	f200 8085 	bhi.w	800b98c <_dtoa_r+0x30c>
 800b882:	e8df f003 	tbb	[pc, r3]
 800b886:	3b2e      	.short	0x3b2e
 800b888:	5839      	.short	0x5839
 800b88a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b88e:	441d      	add	r5, r3
 800b890:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b894:	2b20      	cmp	r3, #32
 800b896:	bfc1      	itttt	gt
 800b898:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b89c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b8a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b8a8:	bfd6      	itet	le
 800b8aa:	f1c3 0320 	rsble	r3, r3, #32
 800b8ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800b8b2:	fa06 f003 	lslle.w	r0, r6, r3
 800b8b6:	f7f4 fe35 	bl	8000524 <__aeabi_ui2d>
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b8c0:	3d01      	subs	r5, #1
 800b8c2:	920e      	str	r2, [sp, #56]	; 0x38
 800b8c4:	e76f      	b.n	800b7a6 <_dtoa_r+0x126>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e7b3      	b.n	800b832 <_dtoa_r+0x1b2>
 800b8ca:	900c      	str	r0, [sp, #48]	; 0x30
 800b8cc:	e7b2      	b.n	800b834 <_dtoa_r+0x1b4>
 800b8ce:	9b05      	ldr	r3, [sp, #20]
 800b8d0:	eba3 030b 	sub.w	r3, r3, fp
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	f1cb 0300 	rsb	r3, fp, #0
 800b8da:	9308      	str	r3, [sp, #32]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e0:	e7bf      	b.n	800b862 <_dtoa_r+0x1e2>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dc52      	bgt.n	800b992 <_dtoa_r+0x312>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b8f6:	e00b      	b.n	800b910 <_dtoa_r+0x290>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e7f3      	b.n	800b8e4 <_dtoa_r+0x264>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b902:	445b      	add	r3, fp
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	2b01      	cmp	r3, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	bfb8      	it	lt
 800b90e:	2301      	movlt	r3, #1
 800b910:	69e0      	ldr	r0, [r4, #28]
 800b912:	2100      	movs	r1, #0
 800b914:	2204      	movs	r2, #4
 800b916:	f102 0614 	add.w	r6, r2, #20
 800b91a:	429e      	cmp	r6, r3
 800b91c:	d93d      	bls.n	800b99a <_dtoa_r+0x31a>
 800b91e:	6041      	str	r1, [r0, #4]
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fd9f 	bl	800c464 <_Balloc>
 800b926:	9000      	str	r0, [sp, #0]
 800b928:	2800      	cmp	r0, #0
 800b92a:	d139      	bne.n	800b9a0 <_dtoa_r+0x320>
 800b92c:	4b16      	ldr	r3, [pc, #88]	; (800b988 <_dtoa_r+0x308>)
 800b92e:	4602      	mov	r2, r0
 800b930:	f240 11af 	movw	r1, #431	; 0x1af
 800b934:	e6bd      	b.n	800b6b2 <_dtoa_r+0x32>
 800b936:	2301      	movs	r3, #1
 800b938:	e7e1      	b.n	800b8fe <_dtoa_r+0x27e>
 800b93a:	2501      	movs	r5, #1
 800b93c:	2300      	movs	r3, #0
 800b93e:	9307      	str	r3, [sp, #28]
 800b940:	9509      	str	r5, [sp, #36]	; 0x24
 800b942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	2200      	movs	r2, #0
 800b94c:	2312      	movs	r3, #18
 800b94e:	e7d1      	b.n	800b8f4 <_dtoa_r+0x274>
 800b950:	636f4361 	.word	0x636f4361
 800b954:	3fd287a7 	.word	0x3fd287a7
 800b958:	8b60c8b3 	.word	0x8b60c8b3
 800b95c:	3fc68a28 	.word	0x3fc68a28
 800b960:	509f79fb 	.word	0x509f79fb
 800b964:	3fd34413 	.word	0x3fd34413
 800b968:	0800d92a 	.word	0x0800d92a
 800b96c:	0800d941 	.word	0x0800d941
 800b970:	7ff00000 	.word	0x7ff00000
 800b974:	0800d926 	.word	0x0800d926
 800b978:	0800d91d 	.word	0x0800d91d
 800b97c:	0800d8fa 	.word	0x0800d8fa
 800b980:	3ff80000 	.word	0x3ff80000
 800b984:	0800da30 	.word	0x0800da30
 800b988:	0800d999 	.word	0x0800d999
 800b98c:	2301      	movs	r3, #1
 800b98e:	9309      	str	r3, [sp, #36]	; 0x24
 800b990:	e7d7      	b.n	800b942 <_dtoa_r+0x2c2>
 800b992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	9304      	str	r3, [sp, #16]
 800b998:	e7ba      	b.n	800b910 <_dtoa_r+0x290>
 800b99a:	3101      	adds	r1, #1
 800b99c:	0052      	lsls	r2, r2, #1
 800b99e:	e7ba      	b.n	800b916 <_dtoa_r+0x296>
 800b9a0:	69e3      	ldr	r3, [r4, #28]
 800b9a2:	9a00      	ldr	r2, [sp, #0]
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	2b0e      	cmp	r3, #14
 800b9aa:	f200 80a8 	bhi.w	800bafe <_dtoa_r+0x47e>
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	f000 80a5 	beq.w	800bafe <_dtoa_r+0x47e>
 800b9b4:	f1bb 0f00 	cmp.w	fp, #0
 800b9b8:	dd38      	ble.n	800ba2c <_dtoa_r+0x3ac>
 800b9ba:	4bc0      	ldr	r3, [pc, #768]	; (800bcbc <_dtoa_r+0x63c>)
 800b9bc:	f00b 020f 	and.w	r2, fp, #15
 800b9c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b9c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b9cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b9d0:	d019      	beq.n	800ba06 <_dtoa_r+0x386>
 800b9d2:	4bbb      	ldr	r3, [pc, #748]	; (800bcc0 <_dtoa_r+0x640>)
 800b9d4:	ec51 0b18 	vmov	r0, r1, d8
 800b9d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9dc:	f7f4 ff46 	bl	800086c <__aeabi_ddiv>
 800b9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e4:	f008 080f 	and.w	r8, r8, #15
 800b9e8:	2503      	movs	r5, #3
 800b9ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bcc0 <_dtoa_r+0x640>
 800b9ee:	f1b8 0f00 	cmp.w	r8, #0
 800b9f2:	d10a      	bne.n	800ba0a <_dtoa_r+0x38a>
 800b9f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f8:	4632      	mov	r2, r6
 800b9fa:	463b      	mov	r3, r7
 800b9fc:	f7f4 ff36 	bl	800086c <__aeabi_ddiv>
 800ba00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba04:	e02b      	b.n	800ba5e <_dtoa_r+0x3de>
 800ba06:	2502      	movs	r5, #2
 800ba08:	e7ef      	b.n	800b9ea <_dtoa_r+0x36a>
 800ba0a:	f018 0f01 	tst.w	r8, #1
 800ba0e:	d008      	beq.n	800ba22 <_dtoa_r+0x3a2>
 800ba10:	4630      	mov	r0, r6
 800ba12:	4639      	mov	r1, r7
 800ba14:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba18:	f7f4 fdfe 	bl	8000618 <__aeabi_dmul>
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460f      	mov	r7, r1
 800ba22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba26:	f109 0908 	add.w	r9, r9, #8
 800ba2a:	e7e0      	b.n	800b9ee <_dtoa_r+0x36e>
 800ba2c:	f000 809f 	beq.w	800bb6e <_dtoa_r+0x4ee>
 800ba30:	f1cb 0600 	rsb	r6, fp, #0
 800ba34:	4ba1      	ldr	r3, [pc, #644]	; (800bcbc <_dtoa_r+0x63c>)
 800ba36:	4fa2      	ldr	r7, [pc, #648]	; (800bcc0 <_dtoa_r+0x640>)
 800ba38:	f006 020f 	and.w	r2, r6, #15
 800ba3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	ec51 0b18 	vmov	r0, r1, d8
 800ba48:	f7f4 fde6 	bl	8000618 <__aeabi_dmul>
 800ba4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba50:	1136      	asrs	r6, r6, #4
 800ba52:	2300      	movs	r3, #0
 800ba54:	2502      	movs	r5, #2
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	d17e      	bne.n	800bb58 <_dtoa_r+0x4d8>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1d0      	bne.n	800ba00 <_dtoa_r+0x380>
 800ba5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 8084 	beq.w	800bb72 <_dtoa_r+0x4f2>
 800ba6a:	4b96      	ldr	r3, [pc, #600]	; (800bcc4 <_dtoa_r+0x644>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	4640      	mov	r0, r8
 800ba70:	4649      	mov	r1, r9
 800ba72:	f7f5 f843 	bl	8000afc <__aeabi_dcmplt>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d07b      	beq.n	800bb72 <_dtoa_r+0x4f2>
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d078      	beq.n	800bb72 <_dtoa_r+0x4f2>
 800ba80:	9b01      	ldr	r3, [sp, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	dd39      	ble.n	800bafa <_dtoa_r+0x47a>
 800ba86:	4b90      	ldr	r3, [pc, #576]	; (800bcc8 <_dtoa_r+0x648>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	4649      	mov	r1, r9
 800ba8e:	f7f4 fdc3 	bl	8000618 <__aeabi_dmul>
 800ba92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba96:	9e01      	ldr	r6, [sp, #4]
 800ba98:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ba9c:	3501      	adds	r5, #1
 800ba9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baa2:	4628      	mov	r0, r5
 800baa4:	f7f4 fd4e 	bl	8000544 <__aeabi_i2d>
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	f7f4 fdb4 	bl	8000618 <__aeabi_dmul>
 800bab0:	4b86      	ldr	r3, [pc, #536]	; (800bccc <_dtoa_r+0x64c>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	f7f4 fbfa 	bl	80002ac <__adddf3>
 800bab8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800babc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	2e00      	cmp	r6, #0
 800bac4:	d158      	bne.n	800bb78 <_dtoa_r+0x4f8>
 800bac6:	4b82      	ldr	r3, [pc, #520]	; (800bcd0 <_dtoa_r+0x650>)
 800bac8:	2200      	movs	r2, #0
 800baca:	4640      	mov	r0, r8
 800bacc:	4649      	mov	r1, r9
 800bace:	f7f4 fbeb 	bl	80002a8 <__aeabi_dsub>
 800bad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bad6:	4680      	mov	r8, r0
 800bad8:	4689      	mov	r9, r1
 800bada:	f7f5 f82d 	bl	8000b38 <__aeabi_dcmpgt>
 800bade:	2800      	cmp	r0, #0
 800bae0:	f040 8296 	bne.w	800c010 <_dtoa_r+0x990>
 800bae4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bae8:	4640      	mov	r0, r8
 800baea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baee:	4649      	mov	r1, r9
 800baf0:	f7f5 f804 	bl	8000afc <__aeabi_dcmplt>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	f040 8289 	bne.w	800c00c <_dtoa_r+0x98c>
 800bafa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bafe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f2c0 814e 	blt.w	800bda2 <_dtoa_r+0x722>
 800bb06:	f1bb 0f0e 	cmp.w	fp, #14
 800bb0a:	f300 814a 	bgt.w	800bda2 <_dtoa_r+0x722>
 800bb0e:	4b6b      	ldr	r3, [pc, #428]	; (800bcbc <_dtoa_r+0x63c>)
 800bb10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f280 80dc 	bge.w	800bcd8 <_dtoa_r+0x658>
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f300 80d8 	bgt.w	800bcd8 <_dtoa_r+0x658>
 800bb28:	f040 826f 	bne.w	800c00a <_dtoa_r+0x98a>
 800bb2c:	4b68      	ldr	r3, [pc, #416]	; (800bcd0 <_dtoa_r+0x650>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4640      	mov	r0, r8
 800bb32:	4649      	mov	r1, r9
 800bb34:	f7f4 fd70 	bl	8000618 <__aeabi_dmul>
 800bb38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb3c:	f7f4 fff2 	bl	8000b24 <__aeabi_dcmpge>
 800bb40:	9e04      	ldr	r6, [sp, #16]
 800bb42:	4637      	mov	r7, r6
 800bb44:	2800      	cmp	r0, #0
 800bb46:	f040 8245 	bne.w	800bfd4 <_dtoa_r+0x954>
 800bb4a:	9d00      	ldr	r5, [sp, #0]
 800bb4c:	2331      	movs	r3, #49	; 0x31
 800bb4e:	f805 3b01 	strb.w	r3, [r5], #1
 800bb52:	f10b 0b01 	add.w	fp, fp, #1
 800bb56:	e241      	b.n	800bfdc <_dtoa_r+0x95c>
 800bb58:	07f2      	lsls	r2, r6, #31
 800bb5a:	d505      	bpl.n	800bb68 <_dtoa_r+0x4e8>
 800bb5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb60:	f7f4 fd5a 	bl	8000618 <__aeabi_dmul>
 800bb64:	3501      	adds	r5, #1
 800bb66:	2301      	movs	r3, #1
 800bb68:	1076      	asrs	r6, r6, #1
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	e773      	b.n	800ba56 <_dtoa_r+0x3d6>
 800bb6e:	2502      	movs	r5, #2
 800bb70:	e775      	b.n	800ba5e <_dtoa_r+0x3de>
 800bb72:	9e04      	ldr	r6, [sp, #16]
 800bb74:	465f      	mov	r7, fp
 800bb76:	e792      	b.n	800ba9e <_dtoa_r+0x41e>
 800bb78:	9900      	ldr	r1, [sp, #0]
 800bb7a:	4b50      	ldr	r3, [pc, #320]	; (800bcbc <_dtoa_r+0x63c>)
 800bb7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb80:	4431      	add	r1, r6
 800bb82:	9102      	str	r1, [sp, #8]
 800bb84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb86:	eeb0 9a47 	vmov.f32	s18, s14
 800bb8a:	eef0 9a67 	vmov.f32	s19, s15
 800bb8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb96:	2900      	cmp	r1, #0
 800bb98:	d044      	beq.n	800bc24 <_dtoa_r+0x5a4>
 800bb9a:	494e      	ldr	r1, [pc, #312]	; (800bcd4 <_dtoa_r+0x654>)
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f7f4 fe65 	bl	800086c <__aeabi_ddiv>
 800bba2:	ec53 2b19 	vmov	r2, r3, d9
 800bba6:	f7f4 fb7f 	bl	80002a8 <__aeabi_dsub>
 800bbaa:	9d00      	ldr	r5, [sp, #0]
 800bbac:	ec41 0b19 	vmov	d9, r0, r1
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	f7f4 ffe0 	bl	8000b78 <__aeabi_d2iz>
 800bbb8:	4606      	mov	r6, r0
 800bbba:	f7f4 fcc3 	bl	8000544 <__aeabi_i2d>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	f7f4 fb6f 	bl	80002a8 <__aeabi_dsub>
 800bbca:	3630      	adds	r6, #48	; 0x30
 800bbcc:	f805 6b01 	strb.w	r6, [r5], #1
 800bbd0:	ec53 2b19 	vmov	r2, r3, d9
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	4689      	mov	r9, r1
 800bbd8:	f7f4 ff90 	bl	8000afc <__aeabi_dcmplt>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d164      	bne.n	800bcaa <_dtoa_r+0x62a>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	4937      	ldr	r1, [pc, #220]	; (800bcc4 <_dtoa_r+0x644>)
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	f7f4 fb5e 	bl	80002a8 <__aeabi_dsub>
 800bbec:	ec53 2b19 	vmov	r2, r3, d9
 800bbf0:	f7f4 ff84 	bl	8000afc <__aeabi_dcmplt>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f040 80b6 	bne.w	800bd66 <_dtoa_r+0x6e6>
 800bbfa:	9b02      	ldr	r3, [sp, #8]
 800bbfc:	429d      	cmp	r5, r3
 800bbfe:	f43f af7c 	beq.w	800bafa <_dtoa_r+0x47a>
 800bc02:	4b31      	ldr	r3, [pc, #196]	; (800bcc8 <_dtoa_r+0x648>)
 800bc04:	ec51 0b19 	vmov	r0, r1, d9
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f7f4 fd05 	bl	8000618 <__aeabi_dmul>
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <_dtoa_r+0x648>)
 800bc10:	ec41 0b19 	vmov	d9, r0, r1
 800bc14:	2200      	movs	r2, #0
 800bc16:	4640      	mov	r0, r8
 800bc18:	4649      	mov	r1, r9
 800bc1a:	f7f4 fcfd 	bl	8000618 <__aeabi_dmul>
 800bc1e:	4680      	mov	r8, r0
 800bc20:	4689      	mov	r9, r1
 800bc22:	e7c5      	b.n	800bbb0 <_dtoa_r+0x530>
 800bc24:	ec51 0b17 	vmov	r0, r1, d7
 800bc28:	f7f4 fcf6 	bl	8000618 <__aeabi_dmul>
 800bc2c:	9b02      	ldr	r3, [sp, #8]
 800bc2e:	9d00      	ldr	r5, [sp, #0]
 800bc30:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc32:	ec41 0b19 	vmov	d9, r0, r1
 800bc36:	4649      	mov	r1, r9
 800bc38:	4640      	mov	r0, r8
 800bc3a:	f7f4 ff9d 	bl	8000b78 <__aeabi_d2iz>
 800bc3e:	4606      	mov	r6, r0
 800bc40:	f7f4 fc80 	bl	8000544 <__aeabi_i2d>
 800bc44:	3630      	adds	r6, #48	; 0x30
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fb2b 	bl	80002a8 <__aeabi_dsub>
 800bc52:	f805 6b01 	strb.w	r6, [r5], #1
 800bc56:	9b02      	ldr	r3, [sp, #8]
 800bc58:	429d      	cmp	r5, r3
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4689      	mov	r9, r1
 800bc5e:	f04f 0200 	mov.w	r2, #0
 800bc62:	d124      	bne.n	800bcae <_dtoa_r+0x62e>
 800bc64:	4b1b      	ldr	r3, [pc, #108]	; (800bcd4 <_dtoa_r+0x654>)
 800bc66:	ec51 0b19 	vmov	r0, r1, d9
 800bc6a:	f7f4 fb1f 	bl	80002ac <__adddf3>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 ff5f 	bl	8000b38 <__aeabi_dcmpgt>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d173      	bne.n	800bd66 <_dtoa_r+0x6e6>
 800bc7e:	ec53 2b19 	vmov	r2, r3, d9
 800bc82:	4914      	ldr	r1, [pc, #80]	; (800bcd4 <_dtoa_r+0x654>)
 800bc84:	2000      	movs	r0, #0
 800bc86:	f7f4 fb0f 	bl	80002a8 <__aeabi_dsub>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4640      	mov	r0, r8
 800bc90:	4649      	mov	r1, r9
 800bc92:	f7f4 ff33 	bl	8000afc <__aeabi_dcmplt>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f43f af2f 	beq.w	800bafa <_dtoa_r+0x47a>
 800bc9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc9e:	1e6b      	subs	r3, r5, #1
 800bca0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bca2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bca6:	2b30      	cmp	r3, #48	; 0x30
 800bca8:	d0f8      	beq.n	800bc9c <_dtoa_r+0x61c>
 800bcaa:	46bb      	mov	fp, r7
 800bcac:	e04a      	b.n	800bd44 <_dtoa_r+0x6c4>
 800bcae:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <_dtoa_r+0x648>)
 800bcb0:	f7f4 fcb2 	bl	8000618 <__aeabi_dmul>
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4689      	mov	r9, r1
 800bcb8:	e7bd      	b.n	800bc36 <_dtoa_r+0x5b6>
 800bcba:	bf00      	nop
 800bcbc:	0800da30 	.word	0x0800da30
 800bcc0:	0800da08 	.word	0x0800da08
 800bcc4:	3ff00000 	.word	0x3ff00000
 800bcc8:	40240000 	.word	0x40240000
 800bccc:	401c0000 	.word	0x401c0000
 800bcd0:	40140000 	.word	0x40140000
 800bcd4:	3fe00000 	.word	0x3fe00000
 800bcd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcdc:	9d00      	ldr	r5, [sp, #0]
 800bcde:	4642      	mov	r2, r8
 800bce0:	464b      	mov	r3, r9
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fdc1 	bl	800086c <__aeabi_ddiv>
 800bcea:	f7f4 ff45 	bl	8000b78 <__aeabi_d2iz>
 800bcee:	9001      	str	r0, [sp, #4]
 800bcf0:	f7f4 fc28 	bl	8000544 <__aeabi_i2d>
 800bcf4:	4642      	mov	r2, r8
 800bcf6:	464b      	mov	r3, r9
 800bcf8:	f7f4 fc8e 	bl	8000618 <__aeabi_dmul>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f4 fad0 	bl	80002a8 <__aeabi_dsub>
 800bd08:	9e01      	ldr	r6, [sp, #4]
 800bd0a:	9f04      	ldr	r7, [sp, #16]
 800bd0c:	3630      	adds	r6, #48	; 0x30
 800bd0e:	f805 6b01 	strb.w	r6, [r5], #1
 800bd12:	9e00      	ldr	r6, [sp, #0]
 800bd14:	1bae      	subs	r6, r5, r6
 800bd16:	42b7      	cmp	r7, r6
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	d134      	bne.n	800bd88 <_dtoa_r+0x708>
 800bd1e:	f7f4 fac5 	bl	80002ac <__adddf3>
 800bd22:	4642      	mov	r2, r8
 800bd24:	464b      	mov	r3, r9
 800bd26:	4606      	mov	r6, r0
 800bd28:	460f      	mov	r7, r1
 800bd2a:	f7f4 ff05 	bl	8000b38 <__aeabi_dcmpgt>
 800bd2e:	b9c8      	cbnz	r0, 800bd64 <_dtoa_r+0x6e4>
 800bd30:	4642      	mov	r2, r8
 800bd32:	464b      	mov	r3, r9
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 fed6 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd3c:	b110      	cbz	r0, 800bd44 <_dtoa_r+0x6c4>
 800bd3e:	9b01      	ldr	r3, [sp, #4]
 800bd40:	07db      	lsls	r3, r3, #31
 800bd42:	d40f      	bmi.n	800bd64 <_dtoa_r+0x6e4>
 800bd44:	4651      	mov	r1, sl
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 fbcc 	bl	800c4e4 <_Bfree>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd50:	702b      	strb	r3, [r5, #0]
 800bd52:	f10b 0301 	add.w	r3, fp, #1
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f43f ace2 	beq.w	800b724 <_dtoa_r+0xa4>
 800bd60:	601d      	str	r5, [r3, #0]
 800bd62:	e4df      	b.n	800b724 <_dtoa_r+0xa4>
 800bd64:	465f      	mov	r7, fp
 800bd66:	462b      	mov	r3, r5
 800bd68:	461d      	mov	r5, r3
 800bd6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd6e:	2a39      	cmp	r2, #57	; 0x39
 800bd70:	d106      	bne.n	800bd80 <_dtoa_r+0x700>
 800bd72:	9a00      	ldr	r2, [sp, #0]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d1f7      	bne.n	800bd68 <_dtoa_r+0x6e8>
 800bd78:	9900      	ldr	r1, [sp, #0]
 800bd7a:	2230      	movs	r2, #48	; 0x30
 800bd7c:	3701      	adds	r7, #1
 800bd7e:	700a      	strb	r2, [r1, #0]
 800bd80:	781a      	ldrb	r2, [r3, #0]
 800bd82:	3201      	adds	r2, #1
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	e790      	b.n	800bcaa <_dtoa_r+0x62a>
 800bd88:	4ba3      	ldr	r3, [pc, #652]	; (800c018 <_dtoa_r+0x998>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f7f4 fc44 	bl	8000618 <__aeabi_dmul>
 800bd90:	2200      	movs	r2, #0
 800bd92:	2300      	movs	r3, #0
 800bd94:	4606      	mov	r6, r0
 800bd96:	460f      	mov	r7, r1
 800bd98:	f7f4 fea6 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d09e      	beq.n	800bcde <_dtoa_r+0x65e>
 800bda0:	e7d0      	b.n	800bd44 <_dtoa_r+0x6c4>
 800bda2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda4:	2a00      	cmp	r2, #0
 800bda6:	f000 80ca 	beq.w	800bf3e <_dtoa_r+0x8be>
 800bdaa:	9a07      	ldr	r2, [sp, #28]
 800bdac:	2a01      	cmp	r2, #1
 800bdae:	f300 80ad 	bgt.w	800bf0c <_dtoa_r+0x88c>
 800bdb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	f000 80a5 	beq.w	800bf04 <_dtoa_r+0x884>
 800bdba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bdbe:	9e08      	ldr	r6, [sp, #32]
 800bdc0:	9d05      	ldr	r5, [sp, #20]
 800bdc2:	9a05      	ldr	r2, [sp, #20]
 800bdc4:	441a      	add	r2, r3
 800bdc6:	9205      	str	r2, [sp, #20]
 800bdc8:	9a06      	ldr	r2, [sp, #24]
 800bdca:	2101      	movs	r1, #1
 800bdcc:	441a      	add	r2, r3
 800bdce:	4620      	mov	r0, r4
 800bdd0:	9206      	str	r2, [sp, #24]
 800bdd2:	f000 fc3d 	bl	800c650 <__i2b>
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	b165      	cbz	r5, 800bdf4 <_dtoa_r+0x774>
 800bdda:	9b06      	ldr	r3, [sp, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dd09      	ble.n	800bdf4 <_dtoa_r+0x774>
 800bde0:	42ab      	cmp	r3, r5
 800bde2:	9a05      	ldr	r2, [sp, #20]
 800bde4:	bfa8      	it	ge
 800bde6:	462b      	movge	r3, r5
 800bde8:	1ad2      	subs	r2, r2, r3
 800bdea:	9205      	str	r2, [sp, #20]
 800bdec:	9a06      	ldr	r2, [sp, #24]
 800bdee:	1aed      	subs	r5, r5, r3
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	9306      	str	r3, [sp, #24]
 800bdf4:	9b08      	ldr	r3, [sp, #32]
 800bdf6:	b1f3      	cbz	r3, 800be36 <_dtoa_r+0x7b6>
 800bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 80a3 	beq.w	800bf46 <_dtoa_r+0x8c6>
 800be00:	2e00      	cmp	r6, #0
 800be02:	dd10      	ble.n	800be26 <_dtoa_r+0x7a6>
 800be04:	4639      	mov	r1, r7
 800be06:	4632      	mov	r2, r6
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fce1 	bl	800c7d0 <__pow5mult>
 800be0e:	4652      	mov	r2, sl
 800be10:	4601      	mov	r1, r0
 800be12:	4607      	mov	r7, r0
 800be14:	4620      	mov	r0, r4
 800be16:	f000 fc31 	bl	800c67c <__multiply>
 800be1a:	4651      	mov	r1, sl
 800be1c:	4680      	mov	r8, r0
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 fb60 	bl	800c4e4 <_Bfree>
 800be24:	46c2      	mov	sl, r8
 800be26:	9b08      	ldr	r3, [sp, #32]
 800be28:	1b9a      	subs	r2, r3, r6
 800be2a:	d004      	beq.n	800be36 <_dtoa_r+0x7b6>
 800be2c:	4651      	mov	r1, sl
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 fcce 	bl	800c7d0 <__pow5mult>
 800be34:	4682      	mov	sl, r0
 800be36:	2101      	movs	r1, #1
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 fc09 	bl	800c650 <__i2b>
 800be3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be40:	2b00      	cmp	r3, #0
 800be42:	4606      	mov	r6, r0
 800be44:	f340 8081 	ble.w	800bf4a <_dtoa_r+0x8ca>
 800be48:	461a      	mov	r2, r3
 800be4a:	4601      	mov	r1, r0
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 fcbf 	bl	800c7d0 <__pow5mult>
 800be52:	9b07      	ldr	r3, [sp, #28]
 800be54:	2b01      	cmp	r3, #1
 800be56:	4606      	mov	r6, r0
 800be58:	dd7a      	ble.n	800bf50 <_dtoa_r+0x8d0>
 800be5a:	f04f 0800 	mov.w	r8, #0
 800be5e:	6933      	ldr	r3, [r6, #16]
 800be60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be64:	6918      	ldr	r0, [r3, #16]
 800be66:	f000 fba5 	bl	800c5b4 <__hi0bits>
 800be6a:	f1c0 0020 	rsb	r0, r0, #32
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	4418      	add	r0, r3
 800be72:	f010 001f 	ands.w	r0, r0, #31
 800be76:	f000 8094 	beq.w	800bfa2 <_dtoa_r+0x922>
 800be7a:	f1c0 0320 	rsb	r3, r0, #32
 800be7e:	2b04      	cmp	r3, #4
 800be80:	f340 8085 	ble.w	800bf8e <_dtoa_r+0x90e>
 800be84:	9b05      	ldr	r3, [sp, #20]
 800be86:	f1c0 001c 	rsb	r0, r0, #28
 800be8a:	4403      	add	r3, r0
 800be8c:	9305      	str	r3, [sp, #20]
 800be8e:	9b06      	ldr	r3, [sp, #24]
 800be90:	4403      	add	r3, r0
 800be92:	4405      	add	r5, r0
 800be94:	9306      	str	r3, [sp, #24]
 800be96:	9b05      	ldr	r3, [sp, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dd05      	ble.n	800bea8 <_dtoa_r+0x828>
 800be9c:	4651      	mov	r1, sl
 800be9e:	461a      	mov	r2, r3
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fcef 	bl	800c884 <__lshift>
 800bea6:	4682      	mov	sl, r0
 800bea8:	9b06      	ldr	r3, [sp, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dd05      	ble.n	800beba <_dtoa_r+0x83a>
 800beae:	4631      	mov	r1, r6
 800beb0:	461a      	mov	r2, r3
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fce6 	bl	800c884 <__lshift>
 800beb8:	4606      	mov	r6, r0
 800beba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d072      	beq.n	800bfa6 <_dtoa_r+0x926>
 800bec0:	4631      	mov	r1, r6
 800bec2:	4650      	mov	r0, sl
 800bec4:	f000 fd4a 	bl	800c95c <__mcmp>
 800bec8:	2800      	cmp	r0, #0
 800beca:	da6c      	bge.n	800bfa6 <_dtoa_r+0x926>
 800becc:	2300      	movs	r3, #0
 800bece:	4651      	mov	r1, sl
 800bed0:	220a      	movs	r2, #10
 800bed2:	4620      	mov	r0, r4
 800bed4:	f000 fb28 	bl	800c528 <__multadd>
 800bed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bede:	4682      	mov	sl, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 81b0 	beq.w	800c246 <_dtoa_r+0xbc6>
 800bee6:	2300      	movs	r3, #0
 800bee8:	4639      	mov	r1, r7
 800beea:	220a      	movs	r2, #10
 800beec:	4620      	mov	r0, r4
 800beee:	f000 fb1b 	bl	800c528 <__multadd>
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	4607      	mov	r7, r0
 800bef8:	f300 8096 	bgt.w	800c028 <_dtoa_r+0x9a8>
 800befc:	9b07      	ldr	r3, [sp, #28]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	dc59      	bgt.n	800bfb6 <_dtoa_r+0x936>
 800bf02:	e091      	b.n	800c028 <_dtoa_r+0x9a8>
 800bf04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf0a:	e758      	b.n	800bdbe <_dtoa_r+0x73e>
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	1e5e      	subs	r6, r3, #1
 800bf10:	9b08      	ldr	r3, [sp, #32]
 800bf12:	42b3      	cmp	r3, r6
 800bf14:	bfbf      	itttt	lt
 800bf16:	9b08      	ldrlt	r3, [sp, #32]
 800bf18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bf1a:	9608      	strlt	r6, [sp, #32]
 800bf1c:	1af3      	sublt	r3, r6, r3
 800bf1e:	bfb4      	ite	lt
 800bf20:	18d2      	addlt	r2, r2, r3
 800bf22:	1b9e      	subge	r6, r3, r6
 800bf24:	9b04      	ldr	r3, [sp, #16]
 800bf26:	bfbc      	itt	lt
 800bf28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bf2a:	2600      	movlt	r6, #0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	bfb7      	itett	lt
 800bf30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bf34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bf38:	1a9d      	sublt	r5, r3, r2
 800bf3a:	2300      	movlt	r3, #0
 800bf3c:	e741      	b.n	800bdc2 <_dtoa_r+0x742>
 800bf3e:	9e08      	ldr	r6, [sp, #32]
 800bf40:	9d05      	ldr	r5, [sp, #20]
 800bf42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf44:	e748      	b.n	800bdd8 <_dtoa_r+0x758>
 800bf46:	9a08      	ldr	r2, [sp, #32]
 800bf48:	e770      	b.n	800be2c <_dtoa_r+0x7ac>
 800bf4a:	9b07      	ldr	r3, [sp, #28]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	dc19      	bgt.n	800bf84 <_dtoa_r+0x904>
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	b9bb      	cbnz	r3, 800bf84 <_dtoa_r+0x904>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf5a:	b99b      	cbnz	r3, 800bf84 <_dtoa_r+0x904>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf62:	0d1b      	lsrs	r3, r3, #20
 800bf64:	051b      	lsls	r3, r3, #20
 800bf66:	b183      	cbz	r3, 800bf8a <_dtoa_r+0x90a>
 800bf68:	9b05      	ldr	r3, [sp, #20]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	9b06      	ldr	r3, [sp, #24]
 800bf70:	3301      	adds	r3, #1
 800bf72:	9306      	str	r3, [sp, #24]
 800bf74:	f04f 0801 	mov.w	r8, #1
 800bf78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f47f af6f 	bne.w	800be5e <_dtoa_r+0x7de>
 800bf80:	2001      	movs	r0, #1
 800bf82:	e774      	b.n	800be6e <_dtoa_r+0x7ee>
 800bf84:	f04f 0800 	mov.w	r8, #0
 800bf88:	e7f6      	b.n	800bf78 <_dtoa_r+0x8f8>
 800bf8a:	4698      	mov	r8, r3
 800bf8c:	e7f4      	b.n	800bf78 <_dtoa_r+0x8f8>
 800bf8e:	d082      	beq.n	800be96 <_dtoa_r+0x816>
 800bf90:	9a05      	ldr	r2, [sp, #20]
 800bf92:	331c      	adds	r3, #28
 800bf94:	441a      	add	r2, r3
 800bf96:	9205      	str	r2, [sp, #20]
 800bf98:	9a06      	ldr	r2, [sp, #24]
 800bf9a:	441a      	add	r2, r3
 800bf9c:	441d      	add	r5, r3
 800bf9e:	9206      	str	r2, [sp, #24]
 800bfa0:	e779      	b.n	800be96 <_dtoa_r+0x816>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	e7f4      	b.n	800bf90 <_dtoa_r+0x910>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dc37      	bgt.n	800c01c <_dtoa_r+0x99c>
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	dd34      	ble.n	800c01c <_dtoa_r+0x99c>
 800bfb2:	9b04      	ldr	r3, [sp, #16]
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	b963      	cbnz	r3, 800bfd4 <_dtoa_r+0x954>
 800bfba:	4631      	mov	r1, r6
 800bfbc:	2205      	movs	r2, #5
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 fab2 	bl	800c528 <__multadd>
 800bfc4:	4601      	mov	r1, r0
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	4650      	mov	r0, sl
 800bfca:	f000 fcc7 	bl	800c95c <__mcmp>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f73f adbb 	bgt.w	800bb4a <_dtoa_r+0x4ca>
 800bfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd6:	9d00      	ldr	r5, [sp, #0]
 800bfd8:	ea6f 0b03 	mvn.w	fp, r3
 800bfdc:	f04f 0800 	mov.w	r8, #0
 800bfe0:	4631      	mov	r1, r6
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 fa7e 	bl	800c4e4 <_Bfree>
 800bfe8:	2f00      	cmp	r7, #0
 800bfea:	f43f aeab 	beq.w	800bd44 <_dtoa_r+0x6c4>
 800bfee:	f1b8 0f00 	cmp.w	r8, #0
 800bff2:	d005      	beq.n	800c000 <_dtoa_r+0x980>
 800bff4:	45b8      	cmp	r8, r7
 800bff6:	d003      	beq.n	800c000 <_dtoa_r+0x980>
 800bff8:	4641      	mov	r1, r8
 800bffa:	4620      	mov	r0, r4
 800bffc:	f000 fa72 	bl	800c4e4 <_Bfree>
 800c000:	4639      	mov	r1, r7
 800c002:	4620      	mov	r0, r4
 800c004:	f000 fa6e 	bl	800c4e4 <_Bfree>
 800c008:	e69c      	b.n	800bd44 <_dtoa_r+0x6c4>
 800c00a:	2600      	movs	r6, #0
 800c00c:	4637      	mov	r7, r6
 800c00e:	e7e1      	b.n	800bfd4 <_dtoa_r+0x954>
 800c010:	46bb      	mov	fp, r7
 800c012:	4637      	mov	r7, r6
 800c014:	e599      	b.n	800bb4a <_dtoa_r+0x4ca>
 800c016:	bf00      	nop
 800c018:	40240000 	.word	0x40240000
 800c01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 80c8 	beq.w	800c1b4 <_dtoa_r+0xb34>
 800c024:	9b04      	ldr	r3, [sp, #16]
 800c026:	9301      	str	r3, [sp, #4]
 800c028:	2d00      	cmp	r5, #0
 800c02a:	dd05      	ble.n	800c038 <_dtoa_r+0x9b8>
 800c02c:	4639      	mov	r1, r7
 800c02e:	462a      	mov	r2, r5
 800c030:	4620      	mov	r0, r4
 800c032:	f000 fc27 	bl	800c884 <__lshift>
 800c036:	4607      	mov	r7, r0
 800c038:	f1b8 0f00 	cmp.w	r8, #0
 800c03c:	d05b      	beq.n	800c0f6 <_dtoa_r+0xa76>
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fa0f 	bl	800c464 <_Balloc>
 800c046:	4605      	mov	r5, r0
 800c048:	b928      	cbnz	r0, 800c056 <_dtoa_r+0x9d6>
 800c04a:	4b83      	ldr	r3, [pc, #524]	; (800c258 <_dtoa_r+0xbd8>)
 800c04c:	4602      	mov	r2, r0
 800c04e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c052:	f7ff bb2e 	b.w	800b6b2 <_dtoa_r+0x32>
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	3202      	adds	r2, #2
 800c05a:	0092      	lsls	r2, r2, #2
 800c05c:	f107 010c 	add.w	r1, r7, #12
 800c060:	300c      	adds	r0, #12
 800c062:	f7ff fa74 	bl	800b54e <memcpy>
 800c066:	2201      	movs	r2, #1
 800c068:	4629      	mov	r1, r5
 800c06a:	4620      	mov	r0, r4
 800c06c:	f000 fc0a 	bl	800c884 <__lshift>
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	9304      	str	r3, [sp, #16]
 800c076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c07a:	4413      	add	r3, r2
 800c07c:	9308      	str	r3, [sp, #32]
 800c07e:	9b02      	ldr	r3, [sp, #8]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	46b8      	mov	r8, r7
 800c086:	9306      	str	r3, [sp, #24]
 800c088:	4607      	mov	r7, r0
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	4631      	mov	r1, r6
 800c08e:	3b01      	subs	r3, #1
 800c090:	4650      	mov	r0, sl
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	f7ff fa69 	bl	800b56a <quorem>
 800c098:	4641      	mov	r1, r8
 800c09a:	9002      	str	r0, [sp, #8]
 800c09c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0a0:	4650      	mov	r0, sl
 800c0a2:	f000 fc5b 	bl	800c95c <__mcmp>
 800c0a6:	463a      	mov	r2, r7
 800c0a8:	9005      	str	r0, [sp, #20]
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fc71 	bl	800c994 <__mdiff>
 800c0b2:	68c2      	ldr	r2, [r0, #12]
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	bb02      	cbnz	r2, 800c0fa <_dtoa_r+0xa7a>
 800c0b8:	4601      	mov	r1, r0
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	f000 fc4e 	bl	800c95c <__mcmp>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c0c8:	f000 fa0c 	bl	800c4e4 <_Bfree>
 800c0cc:	9b07      	ldr	r3, [sp, #28]
 800c0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0d0:	9d04      	ldr	r5, [sp, #16]
 800c0d2:	ea43 0102 	orr.w	r1, r3, r2
 800c0d6:	9b06      	ldr	r3, [sp, #24]
 800c0d8:	4319      	orrs	r1, r3
 800c0da:	d110      	bne.n	800c0fe <_dtoa_r+0xa7e>
 800c0dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c0e0:	d029      	beq.n	800c136 <_dtoa_r+0xab6>
 800c0e2:	9b05      	ldr	r3, [sp, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	dd02      	ble.n	800c0ee <_dtoa_r+0xa6e>
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	f883 9000 	strb.w	r9, [r3]
 800c0f4:	e774      	b.n	800bfe0 <_dtoa_r+0x960>
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	e7ba      	b.n	800c070 <_dtoa_r+0x9f0>
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	e7e1      	b.n	800c0c2 <_dtoa_r+0xa42>
 800c0fe:	9b05      	ldr	r3, [sp, #20]
 800c100:	2b00      	cmp	r3, #0
 800c102:	db04      	blt.n	800c10e <_dtoa_r+0xa8e>
 800c104:	9907      	ldr	r1, [sp, #28]
 800c106:	430b      	orrs	r3, r1
 800c108:	9906      	ldr	r1, [sp, #24]
 800c10a:	430b      	orrs	r3, r1
 800c10c:	d120      	bne.n	800c150 <_dtoa_r+0xad0>
 800c10e:	2a00      	cmp	r2, #0
 800c110:	dded      	ble.n	800c0ee <_dtoa_r+0xa6e>
 800c112:	4651      	mov	r1, sl
 800c114:	2201      	movs	r2, #1
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fbb4 	bl	800c884 <__lshift>
 800c11c:	4631      	mov	r1, r6
 800c11e:	4682      	mov	sl, r0
 800c120:	f000 fc1c 	bl	800c95c <__mcmp>
 800c124:	2800      	cmp	r0, #0
 800c126:	dc03      	bgt.n	800c130 <_dtoa_r+0xab0>
 800c128:	d1e1      	bne.n	800c0ee <_dtoa_r+0xa6e>
 800c12a:	f019 0f01 	tst.w	r9, #1
 800c12e:	d0de      	beq.n	800c0ee <_dtoa_r+0xa6e>
 800c130:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c134:	d1d8      	bne.n	800c0e8 <_dtoa_r+0xa68>
 800c136:	9a01      	ldr	r2, [sp, #4]
 800c138:	2339      	movs	r3, #57	; 0x39
 800c13a:	7013      	strb	r3, [r2, #0]
 800c13c:	462b      	mov	r3, r5
 800c13e:	461d      	mov	r5, r3
 800c140:	3b01      	subs	r3, #1
 800c142:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c146:	2a39      	cmp	r2, #57	; 0x39
 800c148:	d06c      	beq.n	800c224 <_dtoa_r+0xba4>
 800c14a:	3201      	adds	r2, #1
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	e747      	b.n	800bfe0 <_dtoa_r+0x960>
 800c150:	2a00      	cmp	r2, #0
 800c152:	dd07      	ble.n	800c164 <_dtoa_r+0xae4>
 800c154:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c158:	d0ed      	beq.n	800c136 <_dtoa_r+0xab6>
 800c15a:	9a01      	ldr	r2, [sp, #4]
 800c15c:	f109 0301 	add.w	r3, r9, #1
 800c160:	7013      	strb	r3, [r2, #0]
 800c162:	e73d      	b.n	800bfe0 <_dtoa_r+0x960>
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	9a08      	ldr	r2, [sp, #32]
 800c168:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d043      	beq.n	800c1f8 <_dtoa_r+0xb78>
 800c170:	4651      	mov	r1, sl
 800c172:	2300      	movs	r3, #0
 800c174:	220a      	movs	r2, #10
 800c176:	4620      	mov	r0, r4
 800c178:	f000 f9d6 	bl	800c528 <__multadd>
 800c17c:	45b8      	cmp	r8, r7
 800c17e:	4682      	mov	sl, r0
 800c180:	f04f 0300 	mov.w	r3, #0
 800c184:	f04f 020a 	mov.w	r2, #10
 800c188:	4641      	mov	r1, r8
 800c18a:	4620      	mov	r0, r4
 800c18c:	d107      	bne.n	800c19e <_dtoa_r+0xb1e>
 800c18e:	f000 f9cb 	bl	800c528 <__multadd>
 800c192:	4680      	mov	r8, r0
 800c194:	4607      	mov	r7, r0
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	3301      	adds	r3, #1
 800c19a:	9304      	str	r3, [sp, #16]
 800c19c:	e775      	b.n	800c08a <_dtoa_r+0xa0a>
 800c19e:	f000 f9c3 	bl	800c528 <__multadd>
 800c1a2:	4639      	mov	r1, r7
 800c1a4:	4680      	mov	r8, r0
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 f9bc 	bl	800c528 <__multadd>
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	e7f0      	b.n	800c196 <_dtoa_r+0xb16>
 800c1b4:	9b04      	ldr	r3, [sp, #16]
 800c1b6:	9301      	str	r3, [sp, #4]
 800c1b8:	9d00      	ldr	r5, [sp, #0]
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4650      	mov	r0, sl
 800c1be:	f7ff f9d4 	bl	800b56a <quorem>
 800c1c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	f805 9b01 	strb.w	r9, [r5], #1
 800c1cc:	1aea      	subs	r2, r5, r3
 800c1ce:	9b01      	ldr	r3, [sp, #4]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	dd07      	ble.n	800c1e4 <_dtoa_r+0xb64>
 800c1d4:	4651      	mov	r1, sl
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	220a      	movs	r2, #10
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 f9a4 	bl	800c528 <__multadd>
 800c1e0:	4682      	mov	sl, r0
 800c1e2:	e7ea      	b.n	800c1ba <_dtoa_r+0xb3a>
 800c1e4:	9b01      	ldr	r3, [sp, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bfc8      	it	gt
 800c1ea:	461d      	movgt	r5, r3
 800c1ec:	9b00      	ldr	r3, [sp, #0]
 800c1ee:	bfd8      	it	le
 800c1f0:	2501      	movle	r5, #1
 800c1f2:	441d      	add	r5, r3
 800c1f4:	f04f 0800 	mov.w	r8, #0
 800c1f8:	4651      	mov	r1, sl
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 fb41 	bl	800c884 <__lshift>
 800c202:	4631      	mov	r1, r6
 800c204:	4682      	mov	sl, r0
 800c206:	f000 fba9 	bl	800c95c <__mcmp>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	dc96      	bgt.n	800c13c <_dtoa_r+0xabc>
 800c20e:	d102      	bne.n	800c216 <_dtoa_r+0xb96>
 800c210:	f019 0f01 	tst.w	r9, #1
 800c214:	d192      	bne.n	800c13c <_dtoa_r+0xabc>
 800c216:	462b      	mov	r3, r5
 800c218:	461d      	mov	r5, r3
 800c21a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c21e:	2a30      	cmp	r2, #48	; 0x30
 800c220:	d0fa      	beq.n	800c218 <_dtoa_r+0xb98>
 800c222:	e6dd      	b.n	800bfe0 <_dtoa_r+0x960>
 800c224:	9a00      	ldr	r2, [sp, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d189      	bne.n	800c13e <_dtoa_r+0xabe>
 800c22a:	f10b 0b01 	add.w	fp, fp, #1
 800c22e:	2331      	movs	r3, #49	; 0x31
 800c230:	e796      	b.n	800c160 <_dtoa_r+0xae0>
 800c232:	4b0a      	ldr	r3, [pc, #40]	; (800c25c <_dtoa_r+0xbdc>)
 800c234:	f7ff ba99 	b.w	800b76a <_dtoa_r+0xea>
 800c238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f47f aa6d 	bne.w	800b71a <_dtoa_r+0x9a>
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <_dtoa_r+0xbe0>)
 800c242:	f7ff ba92 	b.w	800b76a <_dtoa_r+0xea>
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dcb5      	bgt.n	800c1b8 <_dtoa_r+0xb38>
 800c24c:	9b07      	ldr	r3, [sp, #28]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	f73f aeb1 	bgt.w	800bfb6 <_dtoa_r+0x936>
 800c254:	e7b0      	b.n	800c1b8 <_dtoa_r+0xb38>
 800c256:	bf00      	nop
 800c258:	0800d999 	.word	0x0800d999
 800c25c:	0800d8f9 	.word	0x0800d8f9
 800c260:	0800d91d 	.word	0x0800d91d

0800c264 <_free_r>:
 800c264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c266:	2900      	cmp	r1, #0
 800c268:	d044      	beq.n	800c2f4 <_free_r+0x90>
 800c26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c26e:	9001      	str	r0, [sp, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	f1a1 0404 	sub.w	r4, r1, #4
 800c276:	bfb8      	it	lt
 800c278:	18e4      	addlt	r4, r4, r3
 800c27a:	f000 f8e7 	bl	800c44c <__malloc_lock>
 800c27e:	4a1e      	ldr	r2, [pc, #120]	; (800c2f8 <_free_r+0x94>)
 800c280:	9801      	ldr	r0, [sp, #4]
 800c282:	6813      	ldr	r3, [r2, #0]
 800c284:	b933      	cbnz	r3, 800c294 <_free_r+0x30>
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	6014      	str	r4, [r2, #0]
 800c28a:	b003      	add	sp, #12
 800c28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c290:	f000 b8e2 	b.w	800c458 <__malloc_unlock>
 800c294:	42a3      	cmp	r3, r4
 800c296:	d908      	bls.n	800c2aa <_free_r+0x46>
 800c298:	6825      	ldr	r5, [r4, #0]
 800c29a:	1961      	adds	r1, r4, r5
 800c29c:	428b      	cmp	r3, r1
 800c29e:	bf01      	itttt	eq
 800c2a0:	6819      	ldreq	r1, [r3, #0]
 800c2a2:	685b      	ldreq	r3, [r3, #4]
 800c2a4:	1949      	addeq	r1, r1, r5
 800c2a6:	6021      	streq	r1, [r4, #0]
 800c2a8:	e7ed      	b.n	800c286 <_free_r+0x22>
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	b10b      	cbz	r3, 800c2b4 <_free_r+0x50>
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	d9fa      	bls.n	800c2aa <_free_r+0x46>
 800c2b4:	6811      	ldr	r1, [r2, #0]
 800c2b6:	1855      	adds	r5, r2, r1
 800c2b8:	42a5      	cmp	r5, r4
 800c2ba:	d10b      	bne.n	800c2d4 <_free_r+0x70>
 800c2bc:	6824      	ldr	r4, [r4, #0]
 800c2be:	4421      	add	r1, r4
 800c2c0:	1854      	adds	r4, r2, r1
 800c2c2:	42a3      	cmp	r3, r4
 800c2c4:	6011      	str	r1, [r2, #0]
 800c2c6:	d1e0      	bne.n	800c28a <_free_r+0x26>
 800c2c8:	681c      	ldr	r4, [r3, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	6053      	str	r3, [r2, #4]
 800c2ce:	440c      	add	r4, r1
 800c2d0:	6014      	str	r4, [r2, #0]
 800c2d2:	e7da      	b.n	800c28a <_free_r+0x26>
 800c2d4:	d902      	bls.n	800c2dc <_free_r+0x78>
 800c2d6:	230c      	movs	r3, #12
 800c2d8:	6003      	str	r3, [r0, #0]
 800c2da:	e7d6      	b.n	800c28a <_free_r+0x26>
 800c2dc:	6825      	ldr	r5, [r4, #0]
 800c2de:	1961      	adds	r1, r4, r5
 800c2e0:	428b      	cmp	r3, r1
 800c2e2:	bf04      	itt	eq
 800c2e4:	6819      	ldreq	r1, [r3, #0]
 800c2e6:	685b      	ldreq	r3, [r3, #4]
 800c2e8:	6063      	str	r3, [r4, #4]
 800c2ea:	bf04      	itt	eq
 800c2ec:	1949      	addeq	r1, r1, r5
 800c2ee:	6021      	streq	r1, [r4, #0]
 800c2f0:	6054      	str	r4, [r2, #4]
 800c2f2:	e7ca      	b.n	800c28a <_free_r+0x26>
 800c2f4:	b003      	add	sp, #12
 800c2f6:	bd30      	pop	{r4, r5, pc}
 800c2f8:	20000cd8 	.word	0x20000cd8

0800c2fc <malloc>:
 800c2fc:	4b02      	ldr	r3, [pc, #8]	; (800c308 <malloc+0xc>)
 800c2fe:	4601      	mov	r1, r0
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	f000 b823 	b.w	800c34c <_malloc_r>
 800c306:	bf00      	nop
 800c308:	200000d4 	.word	0x200000d4

0800c30c <sbrk_aligned>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	4e0e      	ldr	r6, [pc, #56]	; (800c348 <sbrk_aligned+0x3c>)
 800c310:	460c      	mov	r4, r1
 800c312:	6831      	ldr	r1, [r6, #0]
 800c314:	4605      	mov	r5, r0
 800c316:	b911      	cbnz	r1, 800c31e <sbrk_aligned+0x12>
 800c318:	f000 fde8 	bl	800ceec <_sbrk_r>
 800c31c:	6030      	str	r0, [r6, #0]
 800c31e:	4621      	mov	r1, r4
 800c320:	4628      	mov	r0, r5
 800c322:	f000 fde3 	bl	800ceec <_sbrk_r>
 800c326:	1c43      	adds	r3, r0, #1
 800c328:	d00a      	beq.n	800c340 <sbrk_aligned+0x34>
 800c32a:	1cc4      	adds	r4, r0, #3
 800c32c:	f024 0403 	bic.w	r4, r4, #3
 800c330:	42a0      	cmp	r0, r4
 800c332:	d007      	beq.n	800c344 <sbrk_aligned+0x38>
 800c334:	1a21      	subs	r1, r4, r0
 800c336:	4628      	mov	r0, r5
 800c338:	f000 fdd8 	bl	800ceec <_sbrk_r>
 800c33c:	3001      	adds	r0, #1
 800c33e:	d101      	bne.n	800c344 <sbrk_aligned+0x38>
 800c340:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c344:	4620      	mov	r0, r4
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	20000cdc 	.word	0x20000cdc

0800c34c <_malloc_r>:
 800c34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c350:	1ccd      	adds	r5, r1, #3
 800c352:	f025 0503 	bic.w	r5, r5, #3
 800c356:	3508      	adds	r5, #8
 800c358:	2d0c      	cmp	r5, #12
 800c35a:	bf38      	it	cc
 800c35c:	250c      	movcc	r5, #12
 800c35e:	2d00      	cmp	r5, #0
 800c360:	4607      	mov	r7, r0
 800c362:	db01      	blt.n	800c368 <_malloc_r+0x1c>
 800c364:	42a9      	cmp	r1, r5
 800c366:	d905      	bls.n	800c374 <_malloc_r+0x28>
 800c368:	230c      	movs	r3, #12
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	2600      	movs	r6, #0
 800c36e:	4630      	mov	r0, r6
 800c370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c374:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c448 <_malloc_r+0xfc>
 800c378:	f000 f868 	bl	800c44c <__malloc_lock>
 800c37c:	f8d8 3000 	ldr.w	r3, [r8]
 800c380:	461c      	mov	r4, r3
 800c382:	bb5c      	cbnz	r4, 800c3dc <_malloc_r+0x90>
 800c384:	4629      	mov	r1, r5
 800c386:	4638      	mov	r0, r7
 800c388:	f7ff ffc0 	bl	800c30c <sbrk_aligned>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	4604      	mov	r4, r0
 800c390:	d155      	bne.n	800c43e <_malloc_r+0xf2>
 800c392:	f8d8 4000 	ldr.w	r4, [r8]
 800c396:	4626      	mov	r6, r4
 800c398:	2e00      	cmp	r6, #0
 800c39a:	d145      	bne.n	800c428 <_malloc_r+0xdc>
 800c39c:	2c00      	cmp	r4, #0
 800c39e:	d048      	beq.n	800c432 <_malloc_r+0xe6>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	eb04 0903 	add.w	r9, r4, r3
 800c3aa:	f000 fd9f 	bl	800ceec <_sbrk_r>
 800c3ae:	4581      	cmp	r9, r0
 800c3b0:	d13f      	bne.n	800c432 <_malloc_r+0xe6>
 800c3b2:	6821      	ldr	r1, [r4, #0]
 800c3b4:	1a6d      	subs	r5, r5, r1
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	f7ff ffa7 	bl	800c30c <sbrk_aligned>
 800c3be:	3001      	adds	r0, #1
 800c3c0:	d037      	beq.n	800c432 <_malloc_r+0xe6>
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	442b      	add	r3, r5
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d038      	beq.n	800c442 <_malloc_r+0xf6>
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	42a2      	cmp	r2, r4
 800c3d4:	d12b      	bne.n	800c42e <_malloc_r+0xe2>
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	605a      	str	r2, [r3, #4]
 800c3da:	e00f      	b.n	800c3fc <_malloc_r+0xb0>
 800c3dc:	6822      	ldr	r2, [r4, #0]
 800c3de:	1b52      	subs	r2, r2, r5
 800c3e0:	d41f      	bmi.n	800c422 <_malloc_r+0xd6>
 800c3e2:	2a0b      	cmp	r2, #11
 800c3e4:	d917      	bls.n	800c416 <_malloc_r+0xca>
 800c3e6:	1961      	adds	r1, r4, r5
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	6025      	str	r5, [r4, #0]
 800c3ec:	bf18      	it	ne
 800c3ee:	6059      	strne	r1, [r3, #4]
 800c3f0:	6863      	ldr	r3, [r4, #4]
 800c3f2:	bf08      	it	eq
 800c3f4:	f8c8 1000 	streq.w	r1, [r8]
 800c3f8:	5162      	str	r2, [r4, r5]
 800c3fa:	604b      	str	r3, [r1, #4]
 800c3fc:	4638      	mov	r0, r7
 800c3fe:	f104 060b 	add.w	r6, r4, #11
 800c402:	f000 f829 	bl	800c458 <__malloc_unlock>
 800c406:	f026 0607 	bic.w	r6, r6, #7
 800c40a:	1d23      	adds	r3, r4, #4
 800c40c:	1af2      	subs	r2, r6, r3
 800c40e:	d0ae      	beq.n	800c36e <_malloc_r+0x22>
 800c410:	1b9b      	subs	r3, r3, r6
 800c412:	50a3      	str	r3, [r4, r2]
 800c414:	e7ab      	b.n	800c36e <_malloc_r+0x22>
 800c416:	42a3      	cmp	r3, r4
 800c418:	6862      	ldr	r2, [r4, #4]
 800c41a:	d1dd      	bne.n	800c3d8 <_malloc_r+0x8c>
 800c41c:	f8c8 2000 	str.w	r2, [r8]
 800c420:	e7ec      	b.n	800c3fc <_malloc_r+0xb0>
 800c422:	4623      	mov	r3, r4
 800c424:	6864      	ldr	r4, [r4, #4]
 800c426:	e7ac      	b.n	800c382 <_malloc_r+0x36>
 800c428:	4634      	mov	r4, r6
 800c42a:	6876      	ldr	r6, [r6, #4]
 800c42c:	e7b4      	b.n	800c398 <_malloc_r+0x4c>
 800c42e:	4613      	mov	r3, r2
 800c430:	e7cc      	b.n	800c3cc <_malloc_r+0x80>
 800c432:	230c      	movs	r3, #12
 800c434:	603b      	str	r3, [r7, #0]
 800c436:	4638      	mov	r0, r7
 800c438:	f000 f80e 	bl	800c458 <__malloc_unlock>
 800c43c:	e797      	b.n	800c36e <_malloc_r+0x22>
 800c43e:	6025      	str	r5, [r4, #0]
 800c440:	e7dc      	b.n	800c3fc <_malloc_r+0xb0>
 800c442:	605b      	str	r3, [r3, #4]
 800c444:	deff      	udf	#255	; 0xff
 800c446:	bf00      	nop
 800c448:	20000cd8 	.word	0x20000cd8

0800c44c <__malloc_lock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__malloc_lock+0x8>)
 800c44e:	f7ff b87c 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800c452:	bf00      	nop
 800c454:	20000cd4 	.word	0x20000cd4

0800c458 <__malloc_unlock>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__malloc_unlock+0x8>)
 800c45a:	f7ff b877 	b.w	800b54c <__retarget_lock_release_recursive>
 800c45e:	bf00      	nop
 800c460:	20000cd4 	.word	0x20000cd4

0800c464 <_Balloc>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	69c6      	ldr	r6, [r0, #28]
 800c468:	4604      	mov	r4, r0
 800c46a:	460d      	mov	r5, r1
 800c46c:	b976      	cbnz	r6, 800c48c <_Balloc+0x28>
 800c46e:	2010      	movs	r0, #16
 800c470:	f7ff ff44 	bl	800c2fc <malloc>
 800c474:	4602      	mov	r2, r0
 800c476:	61e0      	str	r0, [r4, #28]
 800c478:	b920      	cbnz	r0, 800c484 <_Balloc+0x20>
 800c47a:	4b18      	ldr	r3, [pc, #96]	; (800c4dc <_Balloc+0x78>)
 800c47c:	4818      	ldr	r0, [pc, #96]	; (800c4e0 <_Balloc+0x7c>)
 800c47e:	216b      	movs	r1, #107	; 0x6b
 800c480:	f000 fd44 	bl	800cf0c <__assert_func>
 800c484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c488:	6006      	str	r6, [r0, #0]
 800c48a:	60c6      	str	r6, [r0, #12]
 800c48c:	69e6      	ldr	r6, [r4, #28]
 800c48e:	68f3      	ldr	r3, [r6, #12]
 800c490:	b183      	cbz	r3, 800c4b4 <_Balloc+0x50>
 800c492:	69e3      	ldr	r3, [r4, #28]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c49a:	b9b8      	cbnz	r0, 800c4cc <_Balloc+0x68>
 800c49c:	2101      	movs	r1, #1
 800c49e:	fa01 f605 	lsl.w	r6, r1, r5
 800c4a2:	1d72      	adds	r2, r6, #5
 800c4a4:	0092      	lsls	r2, r2, #2
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 fd4e 	bl	800cf48 <_calloc_r>
 800c4ac:	b160      	cbz	r0, 800c4c8 <_Balloc+0x64>
 800c4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4b2:	e00e      	b.n	800c4d2 <_Balloc+0x6e>
 800c4b4:	2221      	movs	r2, #33	; 0x21
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fd45 	bl	800cf48 <_calloc_r>
 800c4be:	69e3      	ldr	r3, [r4, #28]
 800c4c0:	60f0      	str	r0, [r6, #12]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e4      	bne.n	800c492 <_Balloc+0x2e>
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
 800c4cc:	6802      	ldr	r2, [r0, #0]
 800c4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4d8:	e7f7      	b.n	800c4ca <_Balloc+0x66>
 800c4da:	bf00      	nop
 800c4dc:	0800d92a 	.word	0x0800d92a
 800c4e0:	0800d9aa 	.word	0x0800d9aa

0800c4e4 <_Bfree>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	69c6      	ldr	r6, [r0, #28]
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b976      	cbnz	r6, 800c50c <_Bfree+0x28>
 800c4ee:	2010      	movs	r0, #16
 800c4f0:	f7ff ff04 	bl	800c2fc <malloc>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	61e8      	str	r0, [r5, #28]
 800c4f8:	b920      	cbnz	r0, 800c504 <_Bfree+0x20>
 800c4fa:	4b09      	ldr	r3, [pc, #36]	; (800c520 <_Bfree+0x3c>)
 800c4fc:	4809      	ldr	r0, [pc, #36]	; (800c524 <_Bfree+0x40>)
 800c4fe:	218f      	movs	r1, #143	; 0x8f
 800c500:	f000 fd04 	bl	800cf0c <__assert_func>
 800c504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c508:	6006      	str	r6, [r0, #0]
 800c50a:	60c6      	str	r6, [r0, #12]
 800c50c:	b13c      	cbz	r4, 800c51e <_Bfree+0x3a>
 800c50e:	69eb      	ldr	r3, [r5, #28]
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c518:	6021      	str	r1, [r4, #0]
 800c51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	0800d92a 	.word	0x0800d92a
 800c524:	0800d9aa 	.word	0x0800d9aa

0800c528 <__multadd>:
 800c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52c:	690d      	ldr	r5, [r1, #16]
 800c52e:	4607      	mov	r7, r0
 800c530:	460c      	mov	r4, r1
 800c532:	461e      	mov	r6, r3
 800c534:	f101 0c14 	add.w	ip, r1, #20
 800c538:	2000      	movs	r0, #0
 800c53a:	f8dc 3000 	ldr.w	r3, [ip]
 800c53e:	b299      	uxth	r1, r3
 800c540:	fb02 6101 	mla	r1, r2, r1, r6
 800c544:	0c1e      	lsrs	r6, r3, #16
 800c546:	0c0b      	lsrs	r3, r1, #16
 800c548:	fb02 3306 	mla	r3, r2, r6, r3
 800c54c:	b289      	uxth	r1, r1
 800c54e:	3001      	adds	r0, #1
 800c550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c554:	4285      	cmp	r5, r0
 800c556:	f84c 1b04 	str.w	r1, [ip], #4
 800c55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c55e:	dcec      	bgt.n	800c53a <__multadd+0x12>
 800c560:	b30e      	cbz	r6, 800c5a6 <__multadd+0x7e>
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	42ab      	cmp	r3, r5
 800c566:	dc19      	bgt.n	800c59c <__multadd+0x74>
 800c568:	6861      	ldr	r1, [r4, #4]
 800c56a:	4638      	mov	r0, r7
 800c56c:	3101      	adds	r1, #1
 800c56e:	f7ff ff79 	bl	800c464 <_Balloc>
 800c572:	4680      	mov	r8, r0
 800c574:	b928      	cbnz	r0, 800c582 <__multadd+0x5a>
 800c576:	4602      	mov	r2, r0
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <__multadd+0x84>)
 800c57a:	480d      	ldr	r0, [pc, #52]	; (800c5b0 <__multadd+0x88>)
 800c57c:	21ba      	movs	r1, #186	; 0xba
 800c57e:	f000 fcc5 	bl	800cf0c <__assert_func>
 800c582:	6922      	ldr	r2, [r4, #16]
 800c584:	3202      	adds	r2, #2
 800c586:	f104 010c 	add.w	r1, r4, #12
 800c58a:	0092      	lsls	r2, r2, #2
 800c58c:	300c      	adds	r0, #12
 800c58e:	f7fe ffde 	bl	800b54e <memcpy>
 800c592:	4621      	mov	r1, r4
 800c594:	4638      	mov	r0, r7
 800c596:	f7ff ffa5 	bl	800c4e4 <_Bfree>
 800c59a:	4644      	mov	r4, r8
 800c59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5a0:	3501      	adds	r5, #1
 800c5a2:	615e      	str	r6, [r3, #20]
 800c5a4:	6125      	str	r5, [r4, #16]
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ac:	0800d999 	.word	0x0800d999
 800c5b0:	0800d9aa 	.word	0x0800d9aa

0800c5b4 <__hi0bits>:
 800c5b4:	0c03      	lsrs	r3, r0, #16
 800c5b6:	041b      	lsls	r3, r3, #16
 800c5b8:	b9d3      	cbnz	r3, 800c5f0 <__hi0bits+0x3c>
 800c5ba:	0400      	lsls	r0, r0, #16
 800c5bc:	2310      	movs	r3, #16
 800c5be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5c2:	bf04      	itt	eq
 800c5c4:	0200      	lsleq	r0, r0, #8
 800c5c6:	3308      	addeq	r3, #8
 800c5c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5cc:	bf04      	itt	eq
 800c5ce:	0100      	lsleq	r0, r0, #4
 800c5d0:	3304      	addeq	r3, #4
 800c5d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5d6:	bf04      	itt	eq
 800c5d8:	0080      	lsleq	r0, r0, #2
 800c5da:	3302      	addeq	r3, #2
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	db05      	blt.n	800c5ec <__hi0bits+0x38>
 800c5e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5e4:	f103 0301 	add.w	r3, r3, #1
 800c5e8:	bf08      	it	eq
 800c5ea:	2320      	moveq	r3, #32
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	4770      	bx	lr
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e7e4      	b.n	800c5be <__hi0bits+0xa>

0800c5f4 <__lo0bits>:
 800c5f4:	6803      	ldr	r3, [r0, #0]
 800c5f6:	f013 0207 	ands.w	r2, r3, #7
 800c5fa:	d00c      	beq.n	800c616 <__lo0bits+0x22>
 800c5fc:	07d9      	lsls	r1, r3, #31
 800c5fe:	d422      	bmi.n	800c646 <__lo0bits+0x52>
 800c600:	079a      	lsls	r2, r3, #30
 800c602:	bf49      	itett	mi
 800c604:	085b      	lsrmi	r3, r3, #1
 800c606:	089b      	lsrpl	r3, r3, #2
 800c608:	6003      	strmi	r3, [r0, #0]
 800c60a:	2201      	movmi	r2, #1
 800c60c:	bf5c      	itt	pl
 800c60e:	6003      	strpl	r3, [r0, #0]
 800c610:	2202      	movpl	r2, #2
 800c612:	4610      	mov	r0, r2
 800c614:	4770      	bx	lr
 800c616:	b299      	uxth	r1, r3
 800c618:	b909      	cbnz	r1, 800c61e <__lo0bits+0x2a>
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	2210      	movs	r2, #16
 800c61e:	b2d9      	uxtb	r1, r3
 800c620:	b909      	cbnz	r1, 800c626 <__lo0bits+0x32>
 800c622:	3208      	adds	r2, #8
 800c624:	0a1b      	lsrs	r3, r3, #8
 800c626:	0719      	lsls	r1, r3, #28
 800c628:	bf04      	itt	eq
 800c62a:	091b      	lsreq	r3, r3, #4
 800c62c:	3204      	addeq	r2, #4
 800c62e:	0799      	lsls	r1, r3, #30
 800c630:	bf04      	itt	eq
 800c632:	089b      	lsreq	r3, r3, #2
 800c634:	3202      	addeq	r2, #2
 800c636:	07d9      	lsls	r1, r3, #31
 800c638:	d403      	bmi.n	800c642 <__lo0bits+0x4e>
 800c63a:	085b      	lsrs	r3, r3, #1
 800c63c:	f102 0201 	add.w	r2, r2, #1
 800c640:	d003      	beq.n	800c64a <__lo0bits+0x56>
 800c642:	6003      	str	r3, [r0, #0]
 800c644:	e7e5      	b.n	800c612 <__lo0bits+0x1e>
 800c646:	2200      	movs	r2, #0
 800c648:	e7e3      	b.n	800c612 <__lo0bits+0x1e>
 800c64a:	2220      	movs	r2, #32
 800c64c:	e7e1      	b.n	800c612 <__lo0bits+0x1e>
	...

0800c650 <__i2b>:
 800c650:	b510      	push	{r4, lr}
 800c652:	460c      	mov	r4, r1
 800c654:	2101      	movs	r1, #1
 800c656:	f7ff ff05 	bl	800c464 <_Balloc>
 800c65a:	4602      	mov	r2, r0
 800c65c:	b928      	cbnz	r0, 800c66a <__i2b+0x1a>
 800c65e:	4b05      	ldr	r3, [pc, #20]	; (800c674 <__i2b+0x24>)
 800c660:	4805      	ldr	r0, [pc, #20]	; (800c678 <__i2b+0x28>)
 800c662:	f240 1145 	movw	r1, #325	; 0x145
 800c666:	f000 fc51 	bl	800cf0c <__assert_func>
 800c66a:	2301      	movs	r3, #1
 800c66c:	6144      	str	r4, [r0, #20]
 800c66e:	6103      	str	r3, [r0, #16]
 800c670:	bd10      	pop	{r4, pc}
 800c672:	bf00      	nop
 800c674:	0800d999 	.word	0x0800d999
 800c678:	0800d9aa 	.word	0x0800d9aa

0800c67c <__multiply>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	4691      	mov	r9, r2
 800c682:	690a      	ldr	r2, [r1, #16]
 800c684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c688:	429a      	cmp	r2, r3
 800c68a:	bfb8      	it	lt
 800c68c:	460b      	movlt	r3, r1
 800c68e:	460c      	mov	r4, r1
 800c690:	bfbc      	itt	lt
 800c692:	464c      	movlt	r4, r9
 800c694:	4699      	movlt	r9, r3
 800c696:	6927      	ldr	r7, [r4, #16]
 800c698:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	6861      	ldr	r1, [r4, #4]
 800c6a0:	eb07 060a 	add.w	r6, r7, sl
 800c6a4:	42b3      	cmp	r3, r6
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	bfb8      	it	lt
 800c6aa:	3101      	addlt	r1, #1
 800c6ac:	f7ff feda 	bl	800c464 <_Balloc>
 800c6b0:	b930      	cbnz	r0, 800c6c0 <__multiply+0x44>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	4b44      	ldr	r3, [pc, #272]	; (800c7c8 <__multiply+0x14c>)
 800c6b6:	4845      	ldr	r0, [pc, #276]	; (800c7cc <__multiply+0x150>)
 800c6b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c6bc:	f000 fc26 	bl	800cf0c <__assert_func>
 800c6c0:	f100 0514 	add.w	r5, r0, #20
 800c6c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	4543      	cmp	r3, r8
 800c6ce:	d321      	bcc.n	800c714 <__multiply+0x98>
 800c6d0:	f104 0314 	add.w	r3, r4, #20
 800c6d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6d8:	f109 0314 	add.w	r3, r9, #20
 800c6dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6e0:	9202      	str	r2, [sp, #8]
 800c6e2:	1b3a      	subs	r2, r7, r4
 800c6e4:	3a15      	subs	r2, #21
 800c6e6:	f022 0203 	bic.w	r2, r2, #3
 800c6ea:	3204      	adds	r2, #4
 800c6ec:	f104 0115 	add.w	r1, r4, #21
 800c6f0:	428f      	cmp	r7, r1
 800c6f2:	bf38      	it	cc
 800c6f4:	2204      	movcc	r2, #4
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	9a02      	ldr	r2, [sp, #8]
 800c6fa:	9303      	str	r3, [sp, #12]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d80c      	bhi.n	800c71a <__multiply+0x9e>
 800c700:	2e00      	cmp	r6, #0
 800c702:	dd03      	ble.n	800c70c <__multiply+0x90>
 800c704:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d05b      	beq.n	800c7c4 <__multiply+0x148>
 800c70c:	6106      	str	r6, [r0, #16]
 800c70e:	b005      	add	sp, #20
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	f843 2b04 	str.w	r2, [r3], #4
 800c718:	e7d8      	b.n	800c6cc <__multiply+0x50>
 800c71a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c71e:	f1ba 0f00 	cmp.w	sl, #0
 800c722:	d024      	beq.n	800c76e <__multiply+0xf2>
 800c724:	f104 0e14 	add.w	lr, r4, #20
 800c728:	46a9      	mov	r9, r5
 800c72a:	f04f 0c00 	mov.w	ip, #0
 800c72e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c732:	f8d9 1000 	ldr.w	r1, [r9]
 800c736:	fa1f fb82 	uxth.w	fp, r2
 800c73a:	b289      	uxth	r1, r1
 800c73c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c740:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c744:	f8d9 2000 	ldr.w	r2, [r9]
 800c748:	4461      	add	r1, ip
 800c74a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c74e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c756:	b289      	uxth	r1, r1
 800c758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c75c:	4577      	cmp	r7, lr
 800c75e:	f849 1b04 	str.w	r1, [r9], #4
 800c762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c766:	d8e2      	bhi.n	800c72e <__multiply+0xb2>
 800c768:	9a01      	ldr	r2, [sp, #4]
 800c76a:	f845 c002 	str.w	ip, [r5, r2]
 800c76e:	9a03      	ldr	r2, [sp, #12]
 800c770:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c774:	3304      	adds	r3, #4
 800c776:	f1b9 0f00 	cmp.w	r9, #0
 800c77a:	d021      	beq.n	800c7c0 <__multiply+0x144>
 800c77c:	6829      	ldr	r1, [r5, #0]
 800c77e:	f104 0c14 	add.w	ip, r4, #20
 800c782:	46ae      	mov	lr, r5
 800c784:	f04f 0a00 	mov.w	sl, #0
 800c788:	f8bc b000 	ldrh.w	fp, [ip]
 800c78c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c790:	fb09 220b 	mla	r2, r9, fp, r2
 800c794:	4452      	add	r2, sl
 800c796:	b289      	uxth	r1, r1
 800c798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c79c:	f84e 1b04 	str.w	r1, [lr], #4
 800c7a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7a8:	f8be 1000 	ldrh.w	r1, [lr]
 800c7ac:	fb09 110a 	mla	r1, r9, sl, r1
 800c7b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c7b4:	4567      	cmp	r7, ip
 800c7b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7ba:	d8e5      	bhi.n	800c788 <__multiply+0x10c>
 800c7bc:	9a01      	ldr	r2, [sp, #4]
 800c7be:	50a9      	str	r1, [r5, r2]
 800c7c0:	3504      	adds	r5, #4
 800c7c2:	e799      	b.n	800c6f8 <__multiply+0x7c>
 800c7c4:	3e01      	subs	r6, #1
 800c7c6:	e79b      	b.n	800c700 <__multiply+0x84>
 800c7c8:	0800d999 	.word	0x0800d999
 800c7cc:	0800d9aa 	.word	0x0800d9aa

0800c7d0 <__pow5mult>:
 800c7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d4:	4615      	mov	r5, r2
 800c7d6:	f012 0203 	ands.w	r2, r2, #3
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460f      	mov	r7, r1
 800c7de:	d007      	beq.n	800c7f0 <__pow5mult+0x20>
 800c7e0:	4c25      	ldr	r4, [pc, #148]	; (800c878 <__pow5mult+0xa8>)
 800c7e2:	3a01      	subs	r2, #1
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ea:	f7ff fe9d 	bl	800c528 <__multadd>
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	10ad      	asrs	r5, r5, #2
 800c7f2:	d03d      	beq.n	800c870 <__pow5mult+0xa0>
 800c7f4:	69f4      	ldr	r4, [r6, #28]
 800c7f6:	b97c      	cbnz	r4, 800c818 <__pow5mult+0x48>
 800c7f8:	2010      	movs	r0, #16
 800c7fa:	f7ff fd7f 	bl	800c2fc <malloc>
 800c7fe:	4602      	mov	r2, r0
 800c800:	61f0      	str	r0, [r6, #28]
 800c802:	b928      	cbnz	r0, 800c810 <__pow5mult+0x40>
 800c804:	4b1d      	ldr	r3, [pc, #116]	; (800c87c <__pow5mult+0xac>)
 800c806:	481e      	ldr	r0, [pc, #120]	; (800c880 <__pow5mult+0xb0>)
 800c808:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c80c:	f000 fb7e 	bl	800cf0c <__assert_func>
 800c810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c814:	6004      	str	r4, [r0, #0]
 800c816:	60c4      	str	r4, [r0, #12]
 800c818:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c820:	b94c      	cbnz	r4, 800c836 <__pow5mult+0x66>
 800c822:	f240 2171 	movw	r1, #625	; 0x271
 800c826:	4630      	mov	r0, r6
 800c828:	f7ff ff12 	bl	800c650 <__i2b>
 800c82c:	2300      	movs	r3, #0
 800c82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c832:	4604      	mov	r4, r0
 800c834:	6003      	str	r3, [r0, #0]
 800c836:	f04f 0900 	mov.w	r9, #0
 800c83a:	07eb      	lsls	r3, r5, #31
 800c83c:	d50a      	bpl.n	800c854 <__pow5mult+0x84>
 800c83e:	4639      	mov	r1, r7
 800c840:	4622      	mov	r2, r4
 800c842:	4630      	mov	r0, r6
 800c844:	f7ff ff1a 	bl	800c67c <__multiply>
 800c848:	4639      	mov	r1, r7
 800c84a:	4680      	mov	r8, r0
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7ff fe49 	bl	800c4e4 <_Bfree>
 800c852:	4647      	mov	r7, r8
 800c854:	106d      	asrs	r5, r5, #1
 800c856:	d00b      	beq.n	800c870 <__pow5mult+0xa0>
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	b938      	cbnz	r0, 800c86c <__pow5mult+0x9c>
 800c85c:	4622      	mov	r2, r4
 800c85e:	4621      	mov	r1, r4
 800c860:	4630      	mov	r0, r6
 800c862:	f7ff ff0b 	bl	800c67c <__multiply>
 800c866:	6020      	str	r0, [r4, #0]
 800c868:	f8c0 9000 	str.w	r9, [r0]
 800c86c:	4604      	mov	r4, r0
 800c86e:	e7e4      	b.n	800c83a <__pow5mult+0x6a>
 800c870:	4638      	mov	r0, r7
 800c872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c876:	bf00      	nop
 800c878:	0800daf8 	.word	0x0800daf8
 800c87c:	0800d92a 	.word	0x0800d92a
 800c880:	0800d9aa 	.word	0x0800d9aa

0800c884 <__lshift>:
 800c884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c888:	460c      	mov	r4, r1
 800c88a:	6849      	ldr	r1, [r1, #4]
 800c88c:	6923      	ldr	r3, [r4, #16]
 800c88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	4607      	mov	r7, r0
 800c896:	4691      	mov	r9, r2
 800c898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c89c:	f108 0601 	add.w	r6, r8, #1
 800c8a0:	42b3      	cmp	r3, r6
 800c8a2:	db0b      	blt.n	800c8bc <__lshift+0x38>
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	f7ff fddd 	bl	800c464 <_Balloc>
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	b948      	cbnz	r0, 800c8c2 <__lshift+0x3e>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	4b28      	ldr	r3, [pc, #160]	; (800c954 <__lshift+0xd0>)
 800c8b2:	4829      	ldr	r0, [pc, #164]	; (800c958 <__lshift+0xd4>)
 800c8b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c8b8:	f000 fb28 	bl	800cf0c <__assert_func>
 800c8bc:	3101      	adds	r1, #1
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	e7ee      	b.n	800c8a0 <__lshift+0x1c>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	f100 0114 	add.w	r1, r0, #20
 800c8c8:	f100 0210 	add.w	r2, r0, #16
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	4553      	cmp	r3, sl
 800c8d0:	db33      	blt.n	800c93a <__lshift+0xb6>
 800c8d2:	6920      	ldr	r0, [r4, #16]
 800c8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8d8:	f104 0314 	add.w	r3, r4, #20
 800c8dc:	f019 091f 	ands.w	r9, r9, #31
 800c8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8e8:	d02b      	beq.n	800c942 <__lshift+0xbe>
 800c8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c8ee:	468a      	mov	sl, r1
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c8f8:	4310      	orrs	r0, r2
 800c8fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c902:	459c      	cmp	ip, r3
 800c904:	fa22 f20e 	lsr.w	r2, r2, lr
 800c908:	d8f3      	bhi.n	800c8f2 <__lshift+0x6e>
 800c90a:	ebac 0304 	sub.w	r3, ip, r4
 800c90e:	3b15      	subs	r3, #21
 800c910:	f023 0303 	bic.w	r3, r3, #3
 800c914:	3304      	adds	r3, #4
 800c916:	f104 0015 	add.w	r0, r4, #21
 800c91a:	4584      	cmp	ip, r0
 800c91c:	bf38      	it	cc
 800c91e:	2304      	movcc	r3, #4
 800c920:	50ca      	str	r2, [r1, r3]
 800c922:	b10a      	cbz	r2, 800c928 <__lshift+0xa4>
 800c924:	f108 0602 	add.w	r6, r8, #2
 800c928:	3e01      	subs	r6, #1
 800c92a:	4638      	mov	r0, r7
 800c92c:	612e      	str	r6, [r5, #16]
 800c92e:	4621      	mov	r1, r4
 800c930:	f7ff fdd8 	bl	800c4e4 <_Bfree>
 800c934:	4628      	mov	r0, r5
 800c936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c93e:	3301      	adds	r3, #1
 800c940:	e7c5      	b.n	800c8ce <__lshift+0x4a>
 800c942:	3904      	subs	r1, #4
 800c944:	f853 2b04 	ldr.w	r2, [r3], #4
 800c948:	f841 2f04 	str.w	r2, [r1, #4]!
 800c94c:	459c      	cmp	ip, r3
 800c94e:	d8f9      	bhi.n	800c944 <__lshift+0xc0>
 800c950:	e7ea      	b.n	800c928 <__lshift+0xa4>
 800c952:	bf00      	nop
 800c954:	0800d999 	.word	0x0800d999
 800c958:	0800d9aa 	.word	0x0800d9aa

0800c95c <__mcmp>:
 800c95c:	b530      	push	{r4, r5, lr}
 800c95e:	6902      	ldr	r2, [r0, #16]
 800c960:	690c      	ldr	r4, [r1, #16]
 800c962:	1b12      	subs	r2, r2, r4
 800c964:	d10e      	bne.n	800c984 <__mcmp+0x28>
 800c966:	f100 0314 	add.w	r3, r0, #20
 800c96a:	3114      	adds	r1, #20
 800c96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c97c:	42a5      	cmp	r5, r4
 800c97e:	d003      	beq.n	800c988 <__mcmp+0x2c>
 800c980:	d305      	bcc.n	800c98e <__mcmp+0x32>
 800c982:	2201      	movs	r2, #1
 800c984:	4610      	mov	r0, r2
 800c986:	bd30      	pop	{r4, r5, pc}
 800c988:	4283      	cmp	r3, r0
 800c98a:	d3f3      	bcc.n	800c974 <__mcmp+0x18>
 800c98c:	e7fa      	b.n	800c984 <__mcmp+0x28>
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c992:	e7f7      	b.n	800c984 <__mcmp+0x28>

0800c994 <__mdiff>:
 800c994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	460c      	mov	r4, r1
 800c99a:	4606      	mov	r6, r0
 800c99c:	4611      	mov	r1, r2
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4690      	mov	r8, r2
 800c9a2:	f7ff ffdb 	bl	800c95c <__mcmp>
 800c9a6:	1e05      	subs	r5, r0, #0
 800c9a8:	d110      	bne.n	800c9cc <__mdiff+0x38>
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff fd59 	bl	800c464 <_Balloc>
 800c9b2:	b930      	cbnz	r0, 800c9c2 <__mdiff+0x2e>
 800c9b4:	4b3a      	ldr	r3, [pc, #232]	; (800caa0 <__mdiff+0x10c>)
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	f240 2137 	movw	r1, #567	; 0x237
 800c9bc:	4839      	ldr	r0, [pc, #228]	; (800caa4 <__mdiff+0x110>)
 800c9be:	f000 faa5 	bl	800cf0c <__assert_func>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9cc:	bfa4      	itt	ge
 800c9ce:	4643      	movge	r3, r8
 800c9d0:	46a0      	movge	r8, r4
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9d8:	bfa6      	itte	ge
 800c9da:	461c      	movge	r4, r3
 800c9dc:	2500      	movge	r5, #0
 800c9de:	2501      	movlt	r5, #1
 800c9e0:	f7ff fd40 	bl	800c464 <_Balloc>
 800c9e4:	b920      	cbnz	r0, 800c9f0 <__mdiff+0x5c>
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <__mdiff+0x10c>)
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	f240 2145 	movw	r1, #581	; 0x245
 800c9ee:	e7e5      	b.n	800c9bc <__mdiff+0x28>
 800c9f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9f4:	6926      	ldr	r6, [r4, #16]
 800c9f6:	60c5      	str	r5, [r0, #12]
 800c9f8:	f104 0914 	add.w	r9, r4, #20
 800c9fc:	f108 0514 	add.w	r5, r8, #20
 800ca00:	f100 0e14 	add.w	lr, r0, #20
 800ca04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca0c:	f108 0210 	add.w	r2, r8, #16
 800ca10:	46f2      	mov	sl, lr
 800ca12:	2100      	movs	r1, #0
 800ca14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca1c:	fa11 f88b 	uxtah	r8, r1, fp
 800ca20:	b299      	uxth	r1, r3
 800ca22:	0c1b      	lsrs	r3, r3, #16
 800ca24:	eba8 0801 	sub.w	r8, r8, r1
 800ca28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca30:	fa1f f888 	uxth.w	r8, r8
 800ca34:	1419      	asrs	r1, r3, #16
 800ca36:	454e      	cmp	r6, r9
 800ca38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca3c:	f84a 3b04 	str.w	r3, [sl], #4
 800ca40:	d8e8      	bhi.n	800ca14 <__mdiff+0x80>
 800ca42:	1b33      	subs	r3, r6, r4
 800ca44:	3b15      	subs	r3, #21
 800ca46:	f023 0303 	bic.w	r3, r3, #3
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	3415      	adds	r4, #21
 800ca4e:	42a6      	cmp	r6, r4
 800ca50:	bf38      	it	cc
 800ca52:	2304      	movcc	r3, #4
 800ca54:	441d      	add	r5, r3
 800ca56:	4473      	add	r3, lr
 800ca58:	469e      	mov	lr, r3
 800ca5a:	462e      	mov	r6, r5
 800ca5c:	4566      	cmp	r6, ip
 800ca5e:	d30e      	bcc.n	800ca7e <__mdiff+0xea>
 800ca60:	f10c 0203 	add.w	r2, ip, #3
 800ca64:	1b52      	subs	r2, r2, r5
 800ca66:	f022 0203 	bic.w	r2, r2, #3
 800ca6a:	3d03      	subs	r5, #3
 800ca6c:	45ac      	cmp	ip, r5
 800ca6e:	bf38      	it	cc
 800ca70:	2200      	movcc	r2, #0
 800ca72:	4413      	add	r3, r2
 800ca74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ca78:	b17a      	cbz	r2, 800ca9a <__mdiff+0x106>
 800ca7a:	6107      	str	r7, [r0, #16]
 800ca7c:	e7a4      	b.n	800c9c8 <__mdiff+0x34>
 800ca7e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca82:	fa11 f288 	uxtah	r2, r1, r8
 800ca86:	1414      	asrs	r4, r2, #16
 800ca88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca8c:	b292      	uxth	r2, r2
 800ca8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca92:	f84e 2b04 	str.w	r2, [lr], #4
 800ca96:	1421      	asrs	r1, r4, #16
 800ca98:	e7e0      	b.n	800ca5c <__mdiff+0xc8>
 800ca9a:	3f01      	subs	r7, #1
 800ca9c:	e7ea      	b.n	800ca74 <__mdiff+0xe0>
 800ca9e:	bf00      	nop
 800caa0:	0800d999 	.word	0x0800d999
 800caa4:	0800d9aa 	.word	0x0800d9aa

0800caa8 <__d2b>:
 800caa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caac:	460f      	mov	r7, r1
 800caae:	2101      	movs	r1, #1
 800cab0:	ec59 8b10 	vmov	r8, r9, d0
 800cab4:	4616      	mov	r6, r2
 800cab6:	f7ff fcd5 	bl	800c464 <_Balloc>
 800caba:	4604      	mov	r4, r0
 800cabc:	b930      	cbnz	r0, 800cacc <__d2b+0x24>
 800cabe:	4602      	mov	r2, r0
 800cac0:	4b24      	ldr	r3, [pc, #144]	; (800cb54 <__d2b+0xac>)
 800cac2:	4825      	ldr	r0, [pc, #148]	; (800cb58 <__d2b+0xb0>)
 800cac4:	f240 310f 	movw	r1, #783	; 0x30f
 800cac8:	f000 fa20 	bl	800cf0c <__assert_func>
 800cacc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cad4:	bb2d      	cbnz	r5, 800cb22 <__d2b+0x7a>
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	f1b8 0300 	subs.w	r3, r8, #0
 800cadc:	d026      	beq.n	800cb2c <__d2b+0x84>
 800cade:	4668      	mov	r0, sp
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	f7ff fd87 	bl	800c5f4 <__lo0bits>
 800cae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800caea:	b1e8      	cbz	r0, 800cb28 <__d2b+0x80>
 800caec:	f1c0 0320 	rsb	r3, r0, #32
 800caf0:	fa02 f303 	lsl.w	r3, r2, r3
 800caf4:	430b      	orrs	r3, r1
 800caf6:	40c2      	lsrs	r2, r0
 800caf8:	6163      	str	r3, [r4, #20]
 800cafa:	9201      	str	r2, [sp, #4]
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	61a3      	str	r3, [r4, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	bf14      	ite	ne
 800cb04:	2202      	movne	r2, #2
 800cb06:	2201      	moveq	r2, #1
 800cb08:	6122      	str	r2, [r4, #16]
 800cb0a:	b1bd      	cbz	r5, 800cb3c <__d2b+0x94>
 800cb0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb10:	4405      	add	r5, r0
 800cb12:	603d      	str	r5, [r7, #0]
 800cb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb18:	6030      	str	r0, [r6, #0]
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	b003      	add	sp, #12
 800cb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb26:	e7d6      	b.n	800cad6 <__d2b+0x2e>
 800cb28:	6161      	str	r1, [r4, #20]
 800cb2a:	e7e7      	b.n	800cafc <__d2b+0x54>
 800cb2c:	a801      	add	r0, sp, #4
 800cb2e:	f7ff fd61 	bl	800c5f4 <__lo0bits>
 800cb32:	9b01      	ldr	r3, [sp, #4]
 800cb34:	6163      	str	r3, [r4, #20]
 800cb36:	3020      	adds	r0, #32
 800cb38:	2201      	movs	r2, #1
 800cb3a:	e7e5      	b.n	800cb08 <__d2b+0x60>
 800cb3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb44:	6038      	str	r0, [r7, #0]
 800cb46:	6918      	ldr	r0, [r3, #16]
 800cb48:	f7ff fd34 	bl	800c5b4 <__hi0bits>
 800cb4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb50:	e7e2      	b.n	800cb18 <__d2b+0x70>
 800cb52:	bf00      	nop
 800cb54:	0800d999 	.word	0x0800d999
 800cb58:	0800d9aa 	.word	0x0800d9aa

0800cb5c <__sfputc_r>:
 800cb5c:	6893      	ldr	r3, [r2, #8]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	b410      	push	{r4}
 800cb64:	6093      	str	r3, [r2, #8]
 800cb66:	da08      	bge.n	800cb7a <__sfputc_r+0x1e>
 800cb68:	6994      	ldr	r4, [r2, #24]
 800cb6a:	42a3      	cmp	r3, r4
 800cb6c:	db01      	blt.n	800cb72 <__sfputc_r+0x16>
 800cb6e:	290a      	cmp	r1, #10
 800cb70:	d103      	bne.n	800cb7a <__sfputc_r+0x1e>
 800cb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb76:	f7fe bbc2 	b.w	800b2fe <__swbuf_r>
 800cb7a:	6813      	ldr	r3, [r2, #0]
 800cb7c:	1c58      	adds	r0, r3, #1
 800cb7e:	6010      	str	r0, [r2, #0]
 800cb80:	7019      	strb	r1, [r3, #0]
 800cb82:	4608      	mov	r0, r1
 800cb84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <__sfputs_r>:
 800cb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	460f      	mov	r7, r1
 800cb90:	4614      	mov	r4, r2
 800cb92:	18d5      	adds	r5, r2, r3
 800cb94:	42ac      	cmp	r4, r5
 800cb96:	d101      	bne.n	800cb9c <__sfputs_r+0x12>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	e007      	b.n	800cbac <__sfputs_r+0x22>
 800cb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba0:	463a      	mov	r2, r7
 800cba2:	4630      	mov	r0, r6
 800cba4:	f7ff ffda 	bl	800cb5c <__sfputc_r>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d1f3      	bne.n	800cb94 <__sfputs_r+0xa>
 800cbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbb0 <_vfiprintf_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	460d      	mov	r5, r1
 800cbb6:	b09d      	sub	sp, #116	; 0x74
 800cbb8:	4614      	mov	r4, r2
 800cbba:	4698      	mov	r8, r3
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	b118      	cbz	r0, 800cbc8 <_vfiprintf_r+0x18>
 800cbc0:	6a03      	ldr	r3, [r0, #32]
 800cbc2:	b90b      	cbnz	r3, 800cbc8 <_vfiprintf_r+0x18>
 800cbc4:	f7fe fb22 	bl	800b20c <__sinit>
 800cbc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbca:	07d9      	lsls	r1, r3, #31
 800cbcc:	d405      	bmi.n	800cbda <_vfiprintf_r+0x2a>
 800cbce:	89ab      	ldrh	r3, [r5, #12]
 800cbd0:	059a      	lsls	r2, r3, #22
 800cbd2:	d402      	bmi.n	800cbda <_vfiprintf_r+0x2a>
 800cbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbd6:	f7fe fcb8 	bl	800b54a <__retarget_lock_acquire_recursive>
 800cbda:	89ab      	ldrh	r3, [r5, #12]
 800cbdc:	071b      	lsls	r3, r3, #28
 800cbde:	d501      	bpl.n	800cbe4 <_vfiprintf_r+0x34>
 800cbe0:	692b      	ldr	r3, [r5, #16]
 800cbe2:	b99b      	cbnz	r3, 800cc0c <_vfiprintf_r+0x5c>
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7fe fbc6 	bl	800b378 <__swsetup_r>
 800cbec:	b170      	cbz	r0, 800cc0c <_vfiprintf_r+0x5c>
 800cbee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbf0:	07dc      	lsls	r4, r3, #31
 800cbf2:	d504      	bpl.n	800cbfe <_vfiprintf_r+0x4e>
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf8:	b01d      	add	sp, #116	; 0x74
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	0598      	lsls	r0, r3, #22
 800cc02:	d4f7      	bmi.n	800cbf4 <_vfiprintf_r+0x44>
 800cc04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc06:	f7fe fca1 	bl	800b54c <__retarget_lock_release_recursive>
 800cc0a:	e7f3      	b.n	800cbf4 <_vfiprintf_r+0x44>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc10:	2320      	movs	r3, #32
 800cc12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc16:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc1a:	2330      	movs	r3, #48	; 0x30
 800cc1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cdd0 <_vfiprintf_r+0x220>
 800cc20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc24:	f04f 0901 	mov.w	r9, #1
 800cc28:	4623      	mov	r3, r4
 800cc2a:	469a      	mov	sl, r3
 800cc2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc30:	b10a      	cbz	r2, 800cc36 <_vfiprintf_r+0x86>
 800cc32:	2a25      	cmp	r2, #37	; 0x25
 800cc34:	d1f9      	bne.n	800cc2a <_vfiprintf_r+0x7a>
 800cc36:	ebba 0b04 	subs.w	fp, sl, r4
 800cc3a:	d00b      	beq.n	800cc54 <_vfiprintf_r+0xa4>
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	4622      	mov	r2, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff ffa1 	bl	800cb8a <__sfputs_r>
 800cc48:	3001      	adds	r0, #1
 800cc4a:	f000 80a9 	beq.w	800cda0 <_vfiprintf_r+0x1f0>
 800cc4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc50:	445a      	add	r2, fp
 800cc52:	9209      	str	r2, [sp, #36]	; 0x24
 800cc54:	f89a 3000 	ldrb.w	r3, [sl]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f000 80a1 	beq.w	800cda0 <_vfiprintf_r+0x1f0>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc68:	f10a 0a01 	add.w	sl, sl, #1
 800cc6c:	9304      	str	r3, [sp, #16]
 800cc6e:	9307      	str	r3, [sp, #28]
 800cc70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc74:	931a      	str	r3, [sp, #104]	; 0x68
 800cc76:	4654      	mov	r4, sl
 800cc78:	2205      	movs	r2, #5
 800cc7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7e:	4854      	ldr	r0, [pc, #336]	; (800cdd0 <_vfiprintf_r+0x220>)
 800cc80:	f7f3 fab6 	bl	80001f0 <memchr>
 800cc84:	9a04      	ldr	r2, [sp, #16]
 800cc86:	b9d8      	cbnz	r0, 800ccc0 <_vfiprintf_r+0x110>
 800cc88:	06d1      	lsls	r1, r2, #27
 800cc8a:	bf44      	itt	mi
 800cc8c:	2320      	movmi	r3, #32
 800cc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc92:	0713      	lsls	r3, r2, #28
 800cc94:	bf44      	itt	mi
 800cc96:	232b      	movmi	r3, #43	; 0x2b
 800cc98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cca0:	2b2a      	cmp	r3, #42	; 0x2a
 800cca2:	d015      	beq.n	800ccd0 <_vfiprintf_r+0x120>
 800cca4:	9a07      	ldr	r2, [sp, #28]
 800cca6:	4654      	mov	r4, sl
 800cca8:	2000      	movs	r0, #0
 800ccaa:	f04f 0c0a 	mov.w	ip, #10
 800ccae:	4621      	mov	r1, r4
 800ccb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccb4:	3b30      	subs	r3, #48	; 0x30
 800ccb6:	2b09      	cmp	r3, #9
 800ccb8:	d94d      	bls.n	800cd56 <_vfiprintf_r+0x1a6>
 800ccba:	b1b0      	cbz	r0, 800ccea <_vfiprintf_r+0x13a>
 800ccbc:	9207      	str	r2, [sp, #28]
 800ccbe:	e014      	b.n	800ccea <_vfiprintf_r+0x13a>
 800ccc0:	eba0 0308 	sub.w	r3, r0, r8
 800ccc4:	fa09 f303 	lsl.w	r3, r9, r3
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	46a2      	mov	sl, r4
 800ccce:	e7d2      	b.n	800cc76 <_vfiprintf_r+0xc6>
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	1d19      	adds	r1, r3, #4
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	9103      	str	r1, [sp, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	bfbb      	ittet	lt
 800ccdc:	425b      	neglt	r3, r3
 800ccde:	f042 0202 	orrlt.w	r2, r2, #2
 800cce2:	9307      	strge	r3, [sp, #28]
 800cce4:	9307      	strlt	r3, [sp, #28]
 800cce6:	bfb8      	it	lt
 800cce8:	9204      	strlt	r2, [sp, #16]
 800ccea:	7823      	ldrb	r3, [r4, #0]
 800ccec:	2b2e      	cmp	r3, #46	; 0x2e
 800ccee:	d10c      	bne.n	800cd0a <_vfiprintf_r+0x15a>
 800ccf0:	7863      	ldrb	r3, [r4, #1]
 800ccf2:	2b2a      	cmp	r3, #42	; 0x2a
 800ccf4:	d134      	bne.n	800cd60 <_vfiprintf_r+0x1b0>
 800ccf6:	9b03      	ldr	r3, [sp, #12]
 800ccf8:	1d1a      	adds	r2, r3, #4
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	9203      	str	r2, [sp, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bfb8      	it	lt
 800cd02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd06:	3402      	adds	r4, #2
 800cd08:	9305      	str	r3, [sp, #20]
 800cd0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cde0 <_vfiprintf_r+0x230>
 800cd0e:	7821      	ldrb	r1, [r4, #0]
 800cd10:	2203      	movs	r2, #3
 800cd12:	4650      	mov	r0, sl
 800cd14:	f7f3 fa6c 	bl	80001f0 <memchr>
 800cd18:	b138      	cbz	r0, 800cd2a <_vfiprintf_r+0x17a>
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	eba0 000a 	sub.w	r0, r0, sl
 800cd20:	2240      	movs	r2, #64	; 0x40
 800cd22:	4082      	lsls	r2, r0
 800cd24:	4313      	orrs	r3, r2
 800cd26:	3401      	adds	r4, #1
 800cd28:	9304      	str	r3, [sp, #16]
 800cd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2e:	4829      	ldr	r0, [pc, #164]	; (800cdd4 <_vfiprintf_r+0x224>)
 800cd30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd34:	2206      	movs	r2, #6
 800cd36:	f7f3 fa5b 	bl	80001f0 <memchr>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d03f      	beq.n	800cdbe <_vfiprintf_r+0x20e>
 800cd3e:	4b26      	ldr	r3, [pc, #152]	; (800cdd8 <_vfiprintf_r+0x228>)
 800cd40:	bb1b      	cbnz	r3, 800cd8a <_vfiprintf_r+0x1da>
 800cd42:	9b03      	ldr	r3, [sp, #12]
 800cd44:	3307      	adds	r3, #7
 800cd46:	f023 0307 	bic.w	r3, r3, #7
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	9303      	str	r3, [sp, #12]
 800cd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd50:	443b      	add	r3, r7
 800cd52:	9309      	str	r3, [sp, #36]	; 0x24
 800cd54:	e768      	b.n	800cc28 <_vfiprintf_r+0x78>
 800cd56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	2001      	movs	r0, #1
 800cd5e:	e7a6      	b.n	800ccae <_vfiprintf_r+0xfe>
 800cd60:	2300      	movs	r3, #0
 800cd62:	3401      	adds	r4, #1
 800cd64:	9305      	str	r3, [sp, #20]
 800cd66:	4619      	mov	r1, r3
 800cd68:	f04f 0c0a 	mov.w	ip, #10
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd72:	3a30      	subs	r2, #48	; 0x30
 800cd74:	2a09      	cmp	r2, #9
 800cd76:	d903      	bls.n	800cd80 <_vfiprintf_r+0x1d0>
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d0c6      	beq.n	800cd0a <_vfiprintf_r+0x15a>
 800cd7c:	9105      	str	r1, [sp, #20]
 800cd7e:	e7c4      	b.n	800cd0a <_vfiprintf_r+0x15a>
 800cd80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd84:	4604      	mov	r4, r0
 800cd86:	2301      	movs	r3, #1
 800cd88:	e7f0      	b.n	800cd6c <_vfiprintf_r+0x1bc>
 800cd8a:	ab03      	add	r3, sp, #12
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	462a      	mov	r2, r5
 800cd90:	4b12      	ldr	r3, [pc, #72]	; (800cddc <_vfiprintf_r+0x22c>)
 800cd92:	a904      	add	r1, sp, #16
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7fd fd39 	bl	800a80c <_printf_float>
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	1c78      	adds	r0, r7, #1
 800cd9e:	d1d6      	bne.n	800cd4e <_vfiprintf_r+0x19e>
 800cda0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cda2:	07d9      	lsls	r1, r3, #31
 800cda4:	d405      	bmi.n	800cdb2 <_vfiprintf_r+0x202>
 800cda6:	89ab      	ldrh	r3, [r5, #12]
 800cda8:	059a      	lsls	r2, r3, #22
 800cdaa:	d402      	bmi.n	800cdb2 <_vfiprintf_r+0x202>
 800cdac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdae:	f7fe fbcd 	bl	800b54c <__retarget_lock_release_recursive>
 800cdb2:	89ab      	ldrh	r3, [r5, #12]
 800cdb4:	065b      	lsls	r3, r3, #25
 800cdb6:	f53f af1d 	bmi.w	800cbf4 <_vfiprintf_r+0x44>
 800cdba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdbc:	e71c      	b.n	800cbf8 <_vfiprintf_r+0x48>
 800cdbe:	ab03      	add	r3, sp, #12
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	462a      	mov	r2, r5
 800cdc4:	4b05      	ldr	r3, [pc, #20]	; (800cddc <_vfiprintf_r+0x22c>)
 800cdc6:	a904      	add	r1, sp, #16
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7fd ffc3 	bl	800ad54 <_printf_i>
 800cdce:	e7e4      	b.n	800cd9a <_vfiprintf_r+0x1ea>
 800cdd0:	0800db04 	.word	0x0800db04
 800cdd4:	0800db0e 	.word	0x0800db0e
 800cdd8:	0800a80d 	.word	0x0800a80d
 800cddc:	0800cb8b 	.word	0x0800cb8b
 800cde0:	0800db0a 	.word	0x0800db0a

0800cde4 <__swhatbuf_r>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdec:	2900      	cmp	r1, #0
 800cdee:	b096      	sub	sp, #88	; 0x58
 800cdf0:	4615      	mov	r5, r2
 800cdf2:	461e      	mov	r6, r3
 800cdf4:	da0d      	bge.n	800ce12 <__swhatbuf_r+0x2e>
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdfc:	f04f 0100 	mov.w	r1, #0
 800ce00:	bf0c      	ite	eq
 800ce02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce06:	2340      	movne	r3, #64	; 0x40
 800ce08:	2000      	movs	r0, #0
 800ce0a:	6031      	str	r1, [r6, #0]
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	b016      	add	sp, #88	; 0x58
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	466a      	mov	r2, sp
 800ce14:	f000 f848 	bl	800cea8 <_fstat_r>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	dbec      	blt.n	800cdf6 <__swhatbuf_r+0x12>
 800ce1c:	9901      	ldr	r1, [sp, #4]
 800ce1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce26:	4259      	negs	r1, r3
 800ce28:	4159      	adcs	r1, r3
 800ce2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce2e:	e7eb      	b.n	800ce08 <__swhatbuf_r+0x24>

0800ce30 <__smakebuf_r>:
 800ce30:	898b      	ldrh	r3, [r1, #12]
 800ce32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce34:	079d      	lsls	r5, r3, #30
 800ce36:	4606      	mov	r6, r0
 800ce38:	460c      	mov	r4, r1
 800ce3a:	d507      	bpl.n	800ce4c <__smakebuf_r+0x1c>
 800ce3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	6123      	str	r3, [r4, #16]
 800ce44:	2301      	movs	r3, #1
 800ce46:	6163      	str	r3, [r4, #20]
 800ce48:	b002      	add	sp, #8
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	ab01      	add	r3, sp, #4
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f7ff ffc8 	bl	800cde4 <__swhatbuf_r>
 800ce54:	9900      	ldr	r1, [sp, #0]
 800ce56:	4605      	mov	r5, r0
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7ff fa77 	bl	800c34c <_malloc_r>
 800ce5e:	b948      	cbnz	r0, 800ce74 <__smakebuf_r+0x44>
 800ce60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce64:	059a      	lsls	r2, r3, #22
 800ce66:	d4ef      	bmi.n	800ce48 <__smakebuf_r+0x18>
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	f043 0302 	orr.w	r3, r3, #2
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	e7e3      	b.n	800ce3c <__smakebuf_r+0xc>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	6020      	str	r0, [r4, #0]
 800ce78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce7c:	81a3      	strh	r3, [r4, #12]
 800ce7e:	9b00      	ldr	r3, [sp, #0]
 800ce80:	6163      	str	r3, [r4, #20]
 800ce82:	9b01      	ldr	r3, [sp, #4]
 800ce84:	6120      	str	r0, [r4, #16]
 800ce86:	b15b      	cbz	r3, 800cea0 <__smakebuf_r+0x70>
 800ce88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f000 f81d 	bl	800cecc <_isatty_r>
 800ce92:	b128      	cbz	r0, 800cea0 <__smakebuf_r+0x70>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	f023 0303 	bic.w	r3, r3, #3
 800ce9a:	f043 0301 	orr.w	r3, r3, #1
 800ce9e:	81a3      	strh	r3, [r4, #12]
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	431d      	orrs	r5, r3
 800cea4:	81a5      	strh	r5, [r4, #12]
 800cea6:	e7cf      	b.n	800ce48 <__smakebuf_r+0x18>

0800cea8 <_fstat_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d07      	ldr	r5, [pc, #28]	; (800cec8 <_fstat_r+0x20>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	602b      	str	r3, [r5, #0]
 800ceb6:	f7f5 fd9e 	bl	80029f6 <_fstat>
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	d102      	bne.n	800cec4 <_fstat_r+0x1c>
 800cebe:	682b      	ldr	r3, [r5, #0]
 800cec0:	b103      	cbz	r3, 800cec4 <_fstat_r+0x1c>
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	bd38      	pop	{r3, r4, r5, pc}
 800cec6:	bf00      	nop
 800cec8:	20000cd0 	.word	0x20000cd0

0800cecc <_isatty_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4d06      	ldr	r5, [pc, #24]	; (800cee8 <_isatty_r+0x1c>)
 800ced0:	2300      	movs	r3, #0
 800ced2:	4604      	mov	r4, r0
 800ced4:	4608      	mov	r0, r1
 800ced6:	602b      	str	r3, [r5, #0]
 800ced8:	f7f5 fd9d 	bl	8002a16 <_isatty>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_isatty_r+0x1a>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_isatty_r+0x1a>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20000cd0 	.word	0x20000cd0

0800ceec <_sbrk_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d06      	ldr	r5, [pc, #24]	; (800cf08 <_sbrk_r+0x1c>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	602b      	str	r3, [r5, #0]
 800cef8:	f7f5 fda6 	bl	8002a48 <_sbrk>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_sbrk_r+0x1a>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_sbrk_r+0x1a>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	20000cd0 	.word	0x20000cd0

0800cf0c <__assert_func>:
 800cf0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf0e:	4614      	mov	r4, r2
 800cf10:	461a      	mov	r2, r3
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <__assert_func+0x2c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4605      	mov	r5, r0
 800cf18:	68d8      	ldr	r0, [r3, #12]
 800cf1a:	b14c      	cbz	r4, 800cf30 <__assert_func+0x24>
 800cf1c:	4b07      	ldr	r3, [pc, #28]	; (800cf3c <__assert_func+0x30>)
 800cf1e:	9100      	str	r1, [sp, #0]
 800cf20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf24:	4906      	ldr	r1, [pc, #24]	; (800cf40 <__assert_func+0x34>)
 800cf26:	462b      	mov	r3, r5
 800cf28:	f000 f844 	bl	800cfb4 <fiprintf>
 800cf2c:	f000 f854 	bl	800cfd8 <abort>
 800cf30:	4b04      	ldr	r3, [pc, #16]	; (800cf44 <__assert_func+0x38>)
 800cf32:	461c      	mov	r4, r3
 800cf34:	e7f3      	b.n	800cf1e <__assert_func+0x12>
 800cf36:	bf00      	nop
 800cf38:	200000d4 	.word	0x200000d4
 800cf3c:	0800db1f 	.word	0x0800db1f
 800cf40:	0800db2c 	.word	0x0800db2c
 800cf44:	0800db5a 	.word	0x0800db5a

0800cf48 <_calloc_r>:
 800cf48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf4a:	fba1 2402 	umull	r2, r4, r1, r2
 800cf4e:	b94c      	cbnz	r4, 800cf64 <_calloc_r+0x1c>
 800cf50:	4611      	mov	r1, r2
 800cf52:	9201      	str	r2, [sp, #4]
 800cf54:	f7ff f9fa 	bl	800c34c <_malloc_r>
 800cf58:	9a01      	ldr	r2, [sp, #4]
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	b930      	cbnz	r0, 800cf6c <_calloc_r+0x24>
 800cf5e:	4628      	mov	r0, r5
 800cf60:	b003      	add	sp, #12
 800cf62:	bd30      	pop	{r4, r5, pc}
 800cf64:	220c      	movs	r2, #12
 800cf66:	6002      	str	r2, [r0, #0]
 800cf68:	2500      	movs	r5, #0
 800cf6a:	e7f8      	b.n	800cf5e <_calloc_r+0x16>
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	f7fe fa5b 	bl	800b428 <memset>
 800cf72:	e7f4      	b.n	800cf5e <_calloc_r+0x16>

0800cf74 <__ascii_mbtowc>:
 800cf74:	b082      	sub	sp, #8
 800cf76:	b901      	cbnz	r1, 800cf7a <__ascii_mbtowc+0x6>
 800cf78:	a901      	add	r1, sp, #4
 800cf7a:	b142      	cbz	r2, 800cf8e <__ascii_mbtowc+0x1a>
 800cf7c:	b14b      	cbz	r3, 800cf92 <__ascii_mbtowc+0x1e>
 800cf7e:	7813      	ldrb	r3, [r2, #0]
 800cf80:	600b      	str	r3, [r1, #0]
 800cf82:	7812      	ldrb	r2, [r2, #0]
 800cf84:	1e10      	subs	r0, r2, #0
 800cf86:	bf18      	it	ne
 800cf88:	2001      	movne	r0, #1
 800cf8a:	b002      	add	sp, #8
 800cf8c:	4770      	bx	lr
 800cf8e:	4610      	mov	r0, r2
 800cf90:	e7fb      	b.n	800cf8a <__ascii_mbtowc+0x16>
 800cf92:	f06f 0001 	mvn.w	r0, #1
 800cf96:	e7f8      	b.n	800cf8a <__ascii_mbtowc+0x16>

0800cf98 <__ascii_wctomb>:
 800cf98:	b149      	cbz	r1, 800cfae <__ascii_wctomb+0x16>
 800cf9a:	2aff      	cmp	r2, #255	; 0xff
 800cf9c:	bf85      	ittet	hi
 800cf9e:	238a      	movhi	r3, #138	; 0x8a
 800cfa0:	6003      	strhi	r3, [r0, #0]
 800cfa2:	700a      	strbls	r2, [r1, #0]
 800cfa4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cfa8:	bf98      	it	ls
 800cfaa:	2001      	movls	r0, #1
 800cfac:	4770      	bx	lr
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4770      	bx	lr
	...

0800cfb4 <fiprintf>:
 800cfb4:	b40e      	push	{r1, r2, r3}
 800cfb6:	b503      	push	{r0, r1, lr}
 800cfb8:	4601      	mov	r1, r0
 800cfba:	ab03      	add	r3, sp, #12
 800cfbc:	4805      	ldr	r0, [pc, #20]	; (800cfd4 <fiprintf+0x20>)
 800cfbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc2:	6800      	ldr	r0, [r0, #0]
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	f7ff fdf3 	bl	800cbb0 <_vfiprintf_r>
 800cfca:	b002      	add	sp, #8
 800cfcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd0:	b003      	add	sp, #12
 800cfd2:	4770      	bx	lr
 800cfd4:	200000d4 	.word	0x200000d4

0800cfd8 <abort>:
 800cfd8:	b508      	push	{r3, lr}
 800cfda:	2006      	movs	r0, #6
 800cfdc:	f000 f82c 	bl	800d038 <raise>
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	f7f5 fcb9 	bl	8002958 <_exit>

0800cfe6 <_raise_r>:
 800cfe6:	291f      	cmp	r1, #31
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4604      	mov	r4, r0
 800cfec:	460d      	mov	r5, r1
 800cfee:	d904      	bls.n	800cffa <_raise_r+0x14>
 800cff0:	2316      	movs	r3, #22
 800cff2:	6003      	str	r3, [r0, #0]
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cff8:	bd38      	pop	{r3, r4, r5, pc}
 800cffa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cffc:	b112      	cbz	r2, 800d004 <_raise_r+0x1e>
 800cffe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d002:	b94b      	cbnz	r3, 800d018 <_raise_r+0x32>
 800d004:	4620      	mov	r0, r4
 800d006:	f000 f831 	bl	800d06c <_getpid_r>
 800d00a:	462a      	mov	r2, r5
 800d00c:	4601      	mov	r1, r0
 800d00e:	4620      	mov	r0, r4
 800d010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d014:	f000 b818 	b.w	800d048 <_kill_r>
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d00a      	beq.n	800d032 <_raise_r+0x4c>
 800d01c:	1c59      	adds	r1, r3, #1
 800d01e:	d103      	bne.n	800d028 <_raise_r+0x42>
 800d020:	2316      	movs	r3, #22
 800d022:	6003      	str	r3, [r0, #0]
 800d024:	2001      	movs	r0, #1
 800d026:	e7e7      	b.n	800cff8 <_raise_r+0x12>
 800d028:	2400      	movs	r4, #0
 800d02a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d02e:	4628      	mov	r0, r5
 800d030:	4798      	blx	r3
 800d032:	2000      	movs	r0, #0
 800d034:	e7e0      	b.n	800cff8 <_raise_r+0x12>
	...

0800d038 <raise>:
 800d038:	4b02      	ldr	r3, [pc, #8]	; (800d044 <raise+0xc>)
 800d03a:	4601      	mov	r1, r0
 800d03c:	6818      	ldr	r0, [r3, #0]
 800d03e:	f7ff bfd2 	b.w	800cfe6 <_raise_r>
 800d042:	bf00      	nop
 800d044:	200000d4 	.word	0x200000d4

0800d048 <_kill_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4d07      	ldr	r5, [pc, #28]	; (800d068 <_kill_r+0x20>)
 800d04c:	2300      	movs	r3, #0
 800d04e:	4604      	mov	r4, r0
 800d050:	4608      	mov	r0, r1
 800d052:	4611      	mov	r1, r2
 800d054:	602b      	str	r3, [r5, #0]
 800d056:	f7f5 fc6f 	bl	8002938 <_kill>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	d102      	bne.n	800d064 <_kill_r+0x1c>
 800d05e:	682b      	ldr	r3, [r5, #0]
 800d060:	b103      	cbz	r3, 800d064 <_kill_r+0x1c>
 800d062:	6023      	str	r3, [r4, #0]
 800d064:	bd38      	pop	{r3, r4, r5, pc}
 800d066:	bf00      	nop
 800d068:	20000cd0 	.word	0x20000cd0

0800d06c <_getpid_r>:
 800d06c:	f7f5 bc5c 	b.w	8002928 <_getpid>

0800d070 <_init>:
 800d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d072:	bf00      	nop
 800d074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d076:	bc08      	pop	{r3}
 800d078:	469e      	mov	lr, r3
 800d07a:	4770      	bx	lr

0800d07c <_fini>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	bf00      	nop
 800d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d082:	bc08      	pop	{r3}
 800d084:	469e      	mov	lr, r3
 800d086:	4770      	bx	lr
